quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"rom the original labeled images mapped to the corresponding cells that have been created. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; double xOrigin,; double yOrigin,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; xOrigin - the x pixel coordinate for the top left corner of the image, used to aid conversion between ImageJ and QuPath ROIs; equivalent to Calibration.xOrigin; yOrigin - the y pixel coordinate for the top left corner of the image, used to aid conversion between ImageJ and QuPath ROIs; equivalent to Calibration.yOrigin; downsample - the downsample value for the ImageProcessors, used to aid conversion between ImageJ and QuPath ROIs; plane - the ImagePlane defining where ROIs should be added; Returns:; a SortedMap containing integer labels from the original labeled images mapped to the corresponding cells that have been created. quickShowImage; public static void quickShowImage(String name,; Roi roi,; ImageProcessor... ips); Show an ImageProcessor (or array of similar ImageProcessors as a stack).; This is really intended for use with debugging... it takes care of creating an ImagePlus; with the specified title, reseting brightness/contrast suitably, setting a roi (if required); and showing the result. Parameters:; name - ; roi - ; ips - . quickShowImage; public static void quickShowImage(String name,; ImageProcessor... ips); Show an ImageProcessor (or array of similar ImageProcessors as a stack).; This is really intended for use with debugging... it takes care of creating an ImagePlus; with the specified title, reseting brightness/contrast suitably and showing the result. Parameters:; name - ; ips - . tryToParseMicrons; public static double tryToParseM",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:19781,down,downsample,19781,javadoc/docs/qupath/imagej/tools/IJTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html,2,['down'],['downsample']
Availability,"roperty; Always paint selected objects in the viewer, even if the opacity setting is 0. See Also:. alwaysPaintSelectedObjectsProperty(). viewerInterpolateBilinear; public static BooleanProperty viewerInterpolateBilinearProperty; Request that images are displayed in viewers using bilinear interpolation. See Also:. viewerInterpolateBilinearProperty(). detectionTreeDisplayMode; public static ObjectProperty<PathPrefs.DetectionTreeDisplayModes> detectionTreeDisplayModeProperty; Define how detections should be displayed in lists and tree views.; ; Showing all detections can be a bad idea, since there may be serious performance issues ; (especially when selecting/deselecting objects on an expanded tree). See Also:. detectionTreeDisplayModeProperty(). maxObjectsToClipboard; public static IntegerProperty maxObjectsToClipboardProperty; The maximum number of objects that can be copied to the system clipboard.; This is to avoid accidentally putting very large amounts of data on the clipboard (causing the app to slow down or freeze), ; or attempting to create strings that are too long. See Also:. maxObjectsToClipboardProperty(). scalebarFontSize; public static ObjectProperty<PathPrefs.FontSize> scalebarFontSizeProperty; Preferred font size for the scalebar in the viewer. See Also:. scalebarFontSizeProperty(). locationFontSize; public static ObjectProperty<PathPrefs.FontSize> locationFontSizeProperty; Preferred font size for the location text in the viewer. See Also:. locationFontSizeProperty(). scalebarFontWeight; public static ObjectProperty<FontWeight> scalebarFontWeightProperty; Preferred font weight in the viewer. See Also:. scalebarFontWeightProperty(). scalebarLineWidth; public static DoubleProperty scalebarLineWidthProperty; Preferred line width for the scalebar. See Also:. scalebarLineWidthProperty(). allredMinPercentagePositive; public static DoubleProperty allredMinPercentagePositiveProperty; The minimum positive percentage of cells for Allred proportion score to be no",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html:39159,down,down,39159,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,1,['down'],['down']
Availability,"rorNotification; public static void showErrorNotification(String title,; Throwable e); Deprecated.; Show an error notification, displaying the localized message of a Throwable. Parameters:; title - ; e - . showErrorNotification; public static void showErrorNotification(String title,; String message); Deprecated.; Show an error notification. Parameters:; title - ; message - . showWarningNotification; public static void showWarningNotification(String title,; String message); Deprecated.; Show a warning notification. Parameters:; title - ; message - . showInfoNotification; public static void showInfoNotification(String title,; String message); Deprecated.; Show an info notification. Parameters:; title - ; message - . showPlainNotification; public static void showPlainNotification(String title,; String message); Deprecated.; Show a plain notification. Parameters:; title - ; message - . showNoImageError; public static void showNoImageError(String title); Deprecated.; Show an error message that no image is available. This is included to help ; standardize the message throughout the software. Parameters:; title - . showNoProjectError; public static void showNoProjectError(String title); Deprecated.; Show an error message that no project is available. This is included to help ; standardize the message throughout the software. Parameters:; title - . showErrorMessage; public static void showErrorMessage(String title,; String message); Deprecated.; Show an error message. Parameters:; title - ; message - . showErrorMessage; public static void showErrorMessage(String title,; Node node); Deprecated.; Show an error message, with the content defined within a Node. Parameters:; title - ; node - . showPlainMessage; public static void showPlainMessage(String title,; String message); Deprecated.; Show a plain message. Parameters:; title - ; message - . showTextWindow; public static void showTextWindow(Window owner,; String title,; String contents,; Modality modality,; boolean isEditable",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/dialogs/Dialogs.html:9889,error,error,9889,javadoc/docs/qupath/lib/gui/dialogs/Dialogs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/dialogs/Dialogs.html,2,"['avail', 'error']","['available', 'error']"
Availability,"rows UnsupportedOperationException; Start the Timeit and create a checkpoint with the default name.; ; Note that calling this method is not essential, because the Timeit will automatically ; be started when the first checkpoint is created. Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has previously been started; See Also:. start(String); checkpoint(). start; public Timeit start(String name); throws UnsupportedOperationException; Start the Timeit and create a checkpoint with the specified name.; ; Note that calling this method is not essential, because the Timeit will automatically ; be started when the first checkpoint is created. Parameters:; name - of the checkpoint; if null, a default name will be generated; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has previously been started; See Also:. start(); checkpoint(String). checkpointAndRun; public Timeit checkpointAndRun(Runnable runnable); throws UnsupportedOperationException; Create a checkpoint with the default name and immediately run the provided runnable.; ; Note that no checkpoint is made automatically after completion, ; so you should generally print the output immediately, create a new checkpoint, or call stop(). Parameters:; runnable - the runnable to run; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. checkpointAndRun; public Timeit checkpointAndRun(String name,; Runnable runnable); throws UnsupportedOperationException; Create a checkpoint and immediately run the provided Runnable.; ; Note that no checkpoint is made automatically after completion, ; so you should generally print the output immediately, create a new checkpoint, or call stop(). Parameters:; name - the name of the checkpoint to create; runnable - the runnable to run; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. checkpointAndRun; public Timeit checkpointAn",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:4668,checkpoint,checkpointAndRun,4668,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,3,['checkpoint'],"['checkpoint', 'checkpointAndRun']"
Availability,"rred font size for the scalebar in the viewer. scalebarFontWeight - Variable in class qupath.lib.gui.panes.PreferencePane.ViewerPreferences;  ; scalebarFontWeightProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Preferred font weight in the viewer. scalebarLineWidth - Variable in class qupath.lib.gui.panes.PreferencePane.ViewerPreferences;  ; scalebarLineWidthProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Preferred line width for the scalebar. scaleColor(Color, double) - Static method in class qupath.lib.color.ColorToolsAwt. Get a scaled version of the specified color, where the RGB values are independently scaled by a specified factor. scaledDownsampling(double) - Method in class qupath.lib.images.writers.ome.OMEPyramidWriter.Builder. Downsample by specific increasing factor each time (e.g. scaledDownsampling(double, double) - Method in class qupath.lib.images.writers.ome.OMEPyramidWriter.Builder. Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. scaleVariance - Variable in class qupath.opencv.tools.LocalNormalization.LocalNormalizationType. Smoothing scale for Gaussian-weighted standard deviation estimate. scatterChart() - Static method in class qupath.lib.gui.charts.Charts. Create a Charts.ScatterChartBuilder for generating a custom scatter plot. SCREENSHOT - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; SCRIPT_EDITOR - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; SCRIPT_EDITOR - Variable in class qupath.lib.gui.actions.AutomateActions;  ; SCRIPT_EDITOR - Variable in class qupath.lib.gui.actions.menus.AutomateMenuActions.Actions;  ; SCRIPT_INTERPRETER - Variable in class qupath.lib.gui.actions.AutomateActions;  ; SCRIPT_INTERPRETER - Variable in class qupath.lib.gui.actions.menus.AutomateMenuActions.Actions;  ; ScriptableWorkflowStep - Interface in qupath.lib.plugins.workflow. A WorkflowStep that can also return som",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:886621,down,downsample,886621,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['down'],['downsample']
Availability,"rred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise. tryToLoad; public static boolean tryToLoad(String... searchPath); throws UnsatisfiedLinkError; Try to load OpenSlide. This is liable to throw an exception if the library cannot be loaded. Parameters:; searchPath - optional search paths that may be provided to assist with finding the preferred library.; Returns:; true if OpenSlide was loaded successfully, false otherwise.; Throws:; UnsatisfiedLinkError. getLibraryVersion; public static String getLibraryVersion(); Get the version of the OpenSlide library.; This will attempt to load OpenSlide if it is not already available. Returns:; a version string for the library, or null if the library is not available. isOpenSlideAvailable; public static boolean isOpenSlideAvailable(); Query whether OpenSlide has already been loaded.; This will not attempt to load the library; for that, use #tryToLoadQuietly(), getLibraryVersion() ; or tryToLoad(String...). Returns:; true if OpenSlide has been loaded successfully, false otherwise. openImage; public static OpenSlide openImage(String path); throws IOException; Open an image using OpenSlide, returning an OpenSlide instance to access pixels and metadata.; ; This will attempt to load OpenSlide if it has not already been loaded, throwing an IOException if; this fails.; Use isOpenSlideAvailable() to check whether OpenSlide is available before calling this. Parameters:; path - the image path (usually an absolute file path); Returns:; an OpenSlide instance; Throws:; IOException - if OpenSlide could not be loaded failed to open the file. detectVendor; public static String detectVendor(String path); Try to detect the vendor of the image at the specified path.; This will attempt to load OpenSlide if it has not already been loaded. Parameters:; path - the image path (usually an absolute file path); Returns:; a vendor string if available, or null if OpenSlide could not be loaded or does not recognize the file. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html:3241,avail,available,3241,javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/openslide/jna/OpenSlideLoader.html,2,['avail'],['available']
Availability,"rrent parent object. refresh() - Method in class qupath.lib.gui.commands.PathObjectGridView. Refresh the data in the grid view. refresh() - Method in class qupath.lib.gui.ExtensionClassLoader. Ensure all Jars in the extensions directory (and one subdirectory down) are available. refresh() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Refresh the current style. REFRESH - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; REFRESH_DUPLICATE_OBJECT_IDS - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.Actions;  ; REFRESH_OBJECT_IDS - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.Actions;  ; refreshAllEditors() - Method in class qupath.lib.gui.panes.PreferencePane. Request that all the property editors are regenerated. refreshChannelOptions() - Method in class qupath.lib.display.ImageDisplay. Refresh the channel options. refreshCombo() - Method in class qupath.lib.gui.charts.HistogramDisplay. Refresh the available measurements. refreshDuplicateIDs() - Static method in class qupath.lib.scripting.QP. Refresh all object IDs for the current hierarchy to ensure there are no duplicates,; retaining the original IDs where possible. refreshDuplicateIDs(PathObjectHierarchy) - Static method in class qupath.lib.scripting.QP. Refresh all object IDs for the current hierarchy to ensure there are no duplicates,; retaining the original IDs where possible. refreshEntries() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Refresh the measurement values. refreshExtensions(boolean) - Method in class qupath.lib.gui.ExtensionManager. Check the extensions directory, loading any new extensions found there. refreshFileContents() - Method in class qupath.lib.gui.scripting.ScriptTab;  ; refreshHistogram() - Method in class qupath.lib.gui.charts.HistogramDisplay. Refresh the currently-displayed histogram (e.g. refreshID() - Method in class qupath.lib.objects.PathObject. Regenerate a new random I",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:835465,avail,available,835465,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"rs:; doInclude - ; Returns:; this builder. options; public SvgTools.SvgBuilder options(OverlayOptions options); Specify the overlay options to control display.; This will override any previous customizations added to the builder. Parameters:; options - ; Returns:; this builder. fillAnnotations; public SvgTools.SvgBuilder fillAnnotations(boolean doFill); Request whether annotations are drawn as 'filled' shapes. Parameters:; doFill - ; Returns:; this builder. fillDetections; public SvgTools.SvgBuilder fillDetections(boolean doFill); Request whether detections are drawn as 'filled' shapes. Parameters:; doFill - ; Returns:; this builder. showSelection; public SvgTools.SvgBuilder showSelection(boolean doShow); Request whether selected objects are displayed. Parameters:; doShow - ; Returns:; this builder. region; public SvgTools.SvgBuilder region(ImageRegion region); Specify the region (in terms of the full resolution image space) for export.; If a RegionRequest is supplied, the downsample factor will be used if none has otherwise been set. Parameters:; region - ; Returns:; this builder. downsample; public SvgTools.SvgBuilder downsample(double downsample); Specify downsample factor (defined in terms of the full resolution image space). Parameters:; downsample - ; Returns:; this builder. width; public SvgTools.SvgBuilder width(int width); Export image width. Parameters:; width - width (in pixels) of the SVG image.; Returns:; this builder. height; public SvgTools.SvgBuilder height(int height); Export image height. Parameters:; height - height (in pixels) of the SVG image.; Returns:; this builder. size; public SvgTools.SvgBuilder size(int width,; int height); Export image size. Parameters:; width - width (in pixels) of the SVG image.; height - height (in pixels) of the SVG image.; Returns:; this builder. embedImages; public SvgTools.SvgBuilder embedImages(); Specify whether the underlying (raster) image should be embedded in any export.; This requires that the constructor wi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/extension/svg/SvgTools.SvgBuilder.html:5906,down,downsample,5906,javadoc/docs/qupath/lib/extension/svg/SvgTools.SvgBuilder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/extension/svg/SvgTools.SvgBuilder.html,1,['down'],['downsample']
Availability,"rs:; text - the text to search for; Returns:; the action, if found, or null otherwise. lookupMenuItem; public MenuItem lookupMenuItem(String menuPath); Search for a menu item based upon its path. Parameters:; menuPath - path to the menu item, in the form ""Main menu>Submenu>Name; Returns:; the menu item corresponding to this path, or null if no menu item is found. getOverlayActions; public OverlayActions getOverlayActions(); Get the actions associated with the viewer overlay options.; This includes showing/hiding/filling objects, or adjusting opacity. Returns:. getViewerActions; public ViewerActions getViewerActions(); Get the associations associated with QuPath image viewers. Returns:. createSingleThreadExecutor; @Deprecated; public ExecutorService createSingleThreadExecutor(Object owner); Deprecated.; since v0.5.0; use getThreadPoolManager(). Create an executor using a single thread.; ; Optionally specify an owner, in which case the same Executor will be returned for the owner; for so long as the Executor has not been shut down; if it has been shut down, a new Executor will be returned.; ; Specifying an owner is a good idea if there is a chance that any submitted tasks could block,; since the same Executor will be returned for all requests that give a null owner.; ; The advantage of using this over creating an ExecutorService some other way is that; shutdown will be called on any pools created this way whenever QuPath is quit. Parameters:; owner - ; Returns:. createSharedPoolCompletionService; @Deprecated; public <V> ExecutorCompletionService<V> createSharedPoolCompletionService(Class<V> cls); Deprecated.; since v0.5.0; use getThreadPoolManager(). Create a completion service that uses a shared threadpool for the application. Type Parameters:; V - ; Parameters:; cls - ; Returns:. submitShortTask; @Deprecated; public void submitShortTask(Runnable runnable); Deprecated.; since v0.5.0; use getThreadPoolManager(). Submit a short task to a shared thread pool. Parameters:;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:35737,down,down,35737,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,2,['down'],['down']
Availability,"rseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a server for any arbitrary region; rather, ; a server must exist for the specified region and downsample, otherwise this will return null. Parameters:; region - specified region to which the server should correspond (must be found within getRegions()); downsample - specified downsample for the server (must be found within getDownsamples()); Returns:; Throws:; IOException. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:1686,avail,available,1686,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,6,"['avail', 'down']","['available', 'downsample']"
Availability,"rseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a StringVector. Parameters:; vector - ; Returns:. parseShape; public static List<DnnShape> parseShape(MatShapeVector vector); Extract Mat dimensions from a MatShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8161,down,downsampled,8161,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['down'],['downsampled']
Availability,"rst resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). Parameters:; server - ; downsample - ; Returns:. createAllRequests; public static List<RegionRequest> createAllRequests(ImageServer<?> server,; double downsample); Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). Parameters:; server - ; downsample - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ROI roi); Create a request that contains the pixels of the specified ROI.; This is calculated using the ROI bounding box. Parameters:; path - ; downsample - ; roi - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; Collection<? extends ROI> rois); Create a request that contains the pixels of the specified ROIs.; This is calculated using the ROI bounding boxes. Parameters:; path - ; downsample - ; rois - ; Returns:; Throws:; IllegalArgumentException - if the ROIs do not all fall on the same ImagePlane. createInstance; public static RegionRequest createInstance(String path,; RegionRequest request); Create a request that matches another request but with a different path. Parameters:; path - ; request - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; ImageRegion region); Create a request corresponding to a specified ImageRegion.; This may also be used to construct a request based on an existing request, but changing either the path or downsample. Parameters:; path - ; downsample - ; region - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:5923,down,downsample,5923,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,1,['down'],['downsample']
Availability,"rtDownsampleProperty(). Default downsample factor to use when exporting TMA cores. static BooleanProperty; useCalibratedLocationStringProperty(). Show the cursor location on a viewer in calibrated units, rather than pixels. static BooleanProperty; usePixelSnappingProperty(). If true, pixels should be snapped to integer coordinates when using the drawing tools. static BooleanProperty; useRotateGesturesProperty(). Support rotate gestures for touchscreens and trackpads. static ObjectProperty<String>; userPathProperty(). A path where additional files may be stored, such as extensions and log files. static BooleanProperty; useScrollGesturesProperty(). Support scroll gestures for touchscreens and trackpads. static BooleanProperty; useSelectedColorProperty(). Use a specified color for highlighting selected objects in the viewer. static BooleanProperty; useSystemMenubarProperty(). Deprecated. static BooleanProperty; useTileBrushProperty(). Request that the brush tool automatically uses any available tiles, rather than creating 'circles' as normal. static BooleanProperty; useZoomGesturesProperty(). Support zoom gestures for touchscreens and trackpads. static IntegerProperty; viewerBackgroundColorProperty(). Color to paint behind any image. static DoubleProperty; viewerGammaProperty(). Requested gamma value applied to the image in each viewer (for display only). static BooleanProperty; viewerInterpolateBilinearProperty(). Request that images are displayed in viewers using bilinear interpolation. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. useSystemMenubar; @Deprecated; public static BooleanProperty useSystemMenubarProperty; Legacy property used to specify whether the system menubar should be used for the main QuPath stage.; This should be bound bidirectionally to the corresponding property of any menubars created. See Also:. useSystemMenubarProperty(). numCommandTh",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html:23156,avail,available,23156,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,1,['avail'],['available']
Availability,"rtToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp). Create an annotation object for a specific ImageJ Roi. static PathObject; convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). static ImageProcessor; convertToFloatProcessor(SimpleImage image). Convert a SimpleImage to an ImageProcessor. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; T pathImage). Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(String title,; ImageServer<BufferedImage> server,; BufferedImage img,; RegionRequest request). Convert a BufferedImage into a P",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:2914,down,downsampleFactor,2914,javadoc/docs/qupath/imagej/tools/IJTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html,1,['down'],['downsampleFactor']
Availability,"rter. java.lang.Object; qupath.lib.images.writers.TileExporter. public class TileExporter; extends Object; Helper class for exporting image tiles, typically for further analysis elsewhere or for training up an AI algorithm. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TileExporter(ImageData<BufferedImage> imageData). Create a builder to export tiles. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; TileExporter; annotatedCentroidTilesOnly(boolean annotatedCentroidTilesOnly). Specify whether tiles without any annotations over the tile centroid should be included. TileExporter; annotatedTilesOnly(boolean annotatedTilesOnly). Specify whether tiles that do not overlap with any annotations should be included. TileExporter; channels(int... channels). Export only specified channels. TileExporter; channels(String... channelNames). Export only specified channels, identified by name. TileExporter; downsample(double downsample). Define resolution as a downsample value. TileExporter; exportJson(boolean exportJson). Optionally export a JSON file that includes label information and image/label pairs, where available. TileExporter; fullImageTile(). Specify that a single tile should be generated corresponding to the full image. TileExporter; imageExtension(String ext). Specify a file extension for the original pixels, which determines the export file format. TileExporter; imageSubDir(String subdir). Specify a subdirectory within which image tiles should be saved. TileExporter; includePartialTiles(boolean includePartialTiles). Specify whether incomplete tiles at image boundaries should be included. TileExporter; labeledImageExtension(String ext). Specify a file extension for the labelled image, which determines the export file format. TileExporter; labeledImageId(String labelId). Specify an identifier appended to the filename for labeled images. TileExporter; labeledImageSubDir(String subdir).",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html:1369,down,downsample,1369,javadoc/docs/qupath/lib/images/writers/TileExporter.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/TileExporter.html,2,['down'],['downsample']
Availability,"rts (or 'dots').; Examples include ome.tif and tar.gz, which can be problematic with some file choosers. Parameters:; ext - ; Returns:. blankString; public static boolean blankString(String s,; boolean trim); Check if a string is blank, i.e. it is null or its length is 0. Parameters:; s - ; trim - If true, any string will be trimmed before its length checked.; Returns:; True if the string is null or empty. escapeFilePath; public static String escapeFilePath(String path); Escape backslashes in an absolute file path - useful when scripting. Parameters:; path - ; Returns:. clipValue; public static int clipValue(int value,; int min,; int max); Clip a value to be within a specific range. Parameters:; value - ; min - ; max - ; Returns:. clipValue; public static double clipValue(double value,; double min,; double max); Clip a value to be within a specific range. Parameters:; value - ; min - ; max - ; Returns:. almostTheSame; public static boolean almostTheSame(double n1,; double n2,; double tolerance); Test if two doubles are approximately equal, within a specified tolerance.; ; Relies on apache.common's method as the history of this method proved this task not as straightforward as initially thought.; ; Note that this calculation changed in v0.2.0-m4 and in v0.3.0. The behavior prior to v0.2.0-m4 divided the absolute difference ; by the first value only, which is not robust to differences in the input order or if the first value is negative. The behavior ; before v0.3.0 returned whether the absolute difference divided by the average is less than the specified tolerance. Parameters:; n1 - ; n2 - ; tolerance - ; Returns:. toURI; public static URI toURI(String path); throws URISyntaxException; Try to convert a path to a URI.; ; This currently does a very simple check for a known scheme at the beginning ; (""http:"", ""https:"" or """"file:"") to see if it can construct the URI directly; ; if not, it assumes the path refers to a local file (as it generally did in ; QuPath 0.1.2 and e",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/GeneralTools.html:12871,toler,tolerance,12871,javadoc/docs/qupath/lib/common/GeneralTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/GeneralTools.html,2,['toler'],['tolerance']
Availability,"ructors. Constructor; Description; ActionTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ActionTools.ActionBuilder; actionBuilder(). Create an ActionTools.ActionBuilder with no properties set. static ActionTools.ActionBuilder; actionBuilder(String text,; Consumer<ActionEvent> handler). Create an ActionTools.ActionBuilder with the specified text and event handler. static ActionTools.ActionBuilder; actionBuilder(Consumer<ActionEvent> handler). Create an ActionTools.ActionBuilder with the specified event handler. static org.controlsfx.control.action.Action; createAction(Runnable command). Create an action whose event handler calls a runnable. static org.controlsfx.control.action.Action; createAction(Runnable command,; String name). Create an action whose event handler calls a runnable, with a specified name. static Button; createButton(org.controlsfx.control.action.Action action). Create a button from an action, showing both the text and graphic if available. static Button; createButtonWithGraphicOnly(org.controlsfx.control.action.Action action). Create a button from an action, showing only the graphic and not any text. static CheckBox; createCheckBox(org.controlsfx.control.action.Action action). Create a checkbox from an action. static MenuItem; createCheckMenuItem(org.controlsfx.control.action.Action action). Create a menu item from an action that makes use of a selected property. static MenuItem; createCheckMenuItem(org.controlsfx.control.action.Action action,; ToggleGroup group). Create a menu item from an action that makes use of a selected property. static MenuItem; createMenuItem(org.controlsfx.control.action.Action action). Create a menu item from an action. static org.controlsfx.control.action.Action; createSelectableAction(ObservableValue<Boolean> property). Create an unnamed action with its Action.selectedProperty() bound to a specified property. static org.controlsfx.control.action.Action",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html:1948,avail,available,1948,javadoc/docs/qupath/lib/gui/actions/ActionTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html,1,['avail'],['available']
Availability,"rue otherwise. showInputDialog; public static Double showInputDialog(String title,; String message,; Double initialInput); Deprecated.; Show an input dialog requesting a numeric value. Only scientific notation and digits ; with/without a decimal separator (e.g. ""."") are permitted. Parameters:; title - ; message - ; initialInput - ; Returns:; Number input by the user, or NaN if no valid number was entered, or null if cancel was pressed. showInputDialog; public static String showInputDialog(String title,; String message,; String initialInput); Deprecated.; Show an input dialog requesting a String input. Parameters:; title - ; message - ; initialInput - ; Returns:. showChoiceDialog; public static <T> T showChoiceDialog(String title,; String message,; T[] choices,; T defaultChoice); Deprecated.; Show a choice dialog with an array of choices (selection from ComboBox or similar). Type Parameters:; T - ; Parameters:; title - dialog title; message - dialog prompt; choices - array of available options; defaultChoice - initial selected option; Returns:; chosen option, or null if the user cancels the dialog. showChoiceDialog; public static <T> T showChoiceDialog(String title,; String message,; Collection<T> choices,; T defaultChoice); Deprecated.; Show a choice dialog with a collection of choices (selection from ComboBox or similar). Type Parameters:; T - ; Parameters:; title - dialog title; message - dialog prompt; choices - list of available options; defaultChoice - initial selected option; Returns:; chosen option, or null if the user cancels the dialog. showErrorMessage; public static void showErrorMessage(String title,; Throwable e); Deprecated.; Show an error message, displaying the localized message of a Throwable. Parameters:; title - ; e - . showErrorNotification; public static void showErrorNotification(String title,; Throwable e); Deprecated.; Show an error notification, displaying the localized message of a Throwable. Parameters:; title - ; e - . showErrorNotificati",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/dialogs/Dialogs.html:8119,avail,available,8119,javadoc/docs/qupath/lib/gui/dialogs/Dialogs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/dialogs/Dialogs.html,1,['avail'],['available']
Availability,"runPlugin; public boolean runPlugin(PathPlugin<BufferedImage> plugin,; String arg,; boolean doInteractive); throws Exception; Run a plugin, interactively (i.e. launching a dialog) if necessary.; ; Note that this does not in itself perform any exception handling. Parameters:; plugin - the plugin to run; arg - optional string argument (usually JSON); doInteractive - if true, show an interactive dialog if the plugin is an instance of PathInteractivePlugin; Returns:; true if running the plugin was successful and was not cancelled.; Note that if doInteractive == true and the dialog was launched ; but not run, this will also return true.; Throws:; Exception. createPlugin; public PathPlugin<BufferedImage> createPlugin(Class<? extends PathPlugin> pluginClass); Create a plugin from a specified class. Parameters:; pluginClass - ; Returns:. getToolBar; public ToolBar getToolBar(); Get the main toolbar. Returns:. getUndoRedoManager; public UndoRedoManager getUndoRedoManager(); Get the UndoRedoManager, which can be useful if needing to clear it in cases where available memory is low. Returns:. isReadOnly; public boolean isReadOnly(); Query whether QuPath is in 'read-only' mode. This suppresses dialogs that ask about saving changes. Returns:; See Also:. setReadOnly(boolean). readOnlyProperty; public ReadOnlyBooleanProperty readOnlyProperty(); Property indicating whether QuPath is in 'read-only' mode. Returns:; See Also:. isReadOnly(); setReadOnly(boolean). setReadOnly; public void setReadOnly(boolean readOnly); Specify whether QuPath should be in 'read-only' mode. Parameters:; readOnly - ; See Also:. isReadOnly(). getScriptEditor; public ScriptEditor getScriptEditor(); Get a reference to the current ScriptEditor (which may or may not be open at the moment). Returns:. setScriptEditor; public void setScriptEditor(ScriptEditor scriptEditor); Set a new ScriptEditor, which will be used from now on. Parameters:; scriptEditor - . getOverlayOptions; public OverlayOptions getOverlayOptions",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:28115,avail,available,28115,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['avail'],['available']
Availability,"rver<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - th",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8906,down,downsampled,8906,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['down'],['downsampled']
Availability,"rwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability)",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:11147,down,downsample,11147,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,2,['down'],['downsample']
Availability,"ry. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Field Summary; Fields. Modifier and Type; Field; Description; protected double; x;  ; protected double; x2;  ; protected double; y;  ; protected double; y2;  . Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Deprecated. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Returns 4 (since the rectangle is defined by its bounding box). String; getRoiName(). Get a String representation of the kind of ROI we have, ; e.g. ROI.RoiType; getRoiType(). Get the RoiType, used to distinguish between points, lines and areas. double; getScaledArea(double pixelWidth,; double pixelHeight). Get scaled area of the ROI, for use with calibrated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Re",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RectangleROI.html:1673,avail,available,1673,javadoc/docs/qupath/lib/roi/RectangleROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RectangleROI.html,1,['avail'],['available']
Availability,"r grayscale(boolean grayscaleLut); Optionally use grayscale LUT, rather than deriving colors from classifications.; This can streamline import in software that automatically converts paletted images to RGB. Parameters:; grayscaleLut - ; Returns:; Since:; v0.4.0; See Also:. grayscale(). downsample; public LabeledImageServer.Builder downsample(double downsample); Specify downsample factor. This is very important because it defines ; the resolution at which shapes will be drawn and the line thickness is determined. Parameters:; downsample - ; Returns:. tileSize; public LabeledImageServer.Builder tileSize(int tileSize); Set tile width and height (square tiles). Parameters:; tileSize - ; Returns:. tileSize; public LabeledImageServer.Builder tileSize(int tileWidth,; int tileHeight); Set tile width and height. Parameters:; tileWidth - ; tileHeight - ; Returns:. lineThickness; public LabeledImageServer.Builder lineThickness(float thickness); Thickness of boundary lines and line annotations, defined in terms of pixels at the ; resolution specified by the downsample value of the server. Parameters:; thickness - ; Returns:. useUniqueLabels; @Deprecated; public LabeledImageServer.Builder useUniqueLabels(); Deprecated.; in favor of useInstanceLabels(). Returns:. useInstanceLabels; public LabeledImageServer.Builder useInstanceLabels(); Request that unique labels are used for all objects, rather than classifications.; If this flag is set, all other label requests are ignored. Returns:; See Also:. useInstanceLabels(boolean); shuffleInstanceLabels(boolean). useInstanceLabels; public LabeledImageServer.Builder useInstanceLabels(boolean instanceLabels); Optionally request that unique labels are used for all objects, rather than classifications.; If this flag is set, all other label requests are ignored. Parameters:; instanceLabels - ; Returns:; Since:; v0.4.0; See Also:. useInstanceLabels(); shuffleInstanceLabels(boolean). shuffleInstanceLabels; public LabeledImageServer.Builder shuffl",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html:8601,down,downsample,8601,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html,1,['down'],['downsample']
Availability,"s ImageServerMetadata.ImageResolutionLevel.Builder. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel.Builder. Enclosing class:; ImageServerMetadata.ImageResolutionLevel. public static class ImageServerMetadata.ImageResolutionLevel.Builder; extends Object; Builder to create a list of ImageServerMetadata.ImageResolutionLevel to represent pyramidal resolutions. Constructor Summary; Constructors. Constructor; Description; Builder(int fullWidth,; int fullHeight). Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata.ImageResolutionLevel.Builder; addFullResolutionLevel(). Add the full-resolution image as a level of the pyramid. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(double downsample,; int levelWidth,; int levelHeight). Add a new level by providing a downsample value, width and height. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(int levelWidth,; int levelHeight). Add a new level based on level dimensions, estimating the corresponding downsample value as required. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(ImageServerMetadata.ImageResolutionLevel level). Add a new level directly. ImageServerMetadata.ImageResolutionLevel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLev",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:1401,down,downsample,1401,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,1,['down'],['downsample']
Availability,"s PathObject> pathObjects,; OverlayOptions overlayOptions,; PathObjectSelectionModel selectionModel,; double downsample); Paint the specified objects. Parameters:; g2d - the graphics object on which the objects should be painted; pathObjects - the objects to paint; overlayOptions - the overlay options defining how objects should be painted; selectionModel - the selection model used to determine the selection status of each object; downsample - the downsample factor; this should already be applied to the graphics object, but is needed to determine some line thicknesses. paintTMAGrid; public static void paintTMAGrid(Graphics2D g2d,; TMAGrid tmaGrid,; OverlayOptions overlayOptions,; PathObjectSelectionModel selectionModel,; double downsample); Paint the specified tissue microarray grid. Parameters:; g2d - the graphics object on which the objects should be painted; tmaGrid - the TMA grid; overlayOptions - the overlay options defining how objects should be painted; selectionModel - the selection model used to determine the selection status of each object; downsample - the downsample factor; this should already be applied to the graphics object, but is needed to determine some line thicknesses. paintObject; public static boolean paintObject(PathObject pathObject,; Graphics2D g,; OverlayOptions overlayOptions,; PathObjectSelectionModel selectionModel,; double downsample); Paint an object (or, more precisely, its ROI).; ; This is subject to the OverlayOptions, and therefore may not actually end up painting anything; (if the settings are such that objects of the class provided are not to be displayed). Parameters:; pathObject - ; g - ; overlayOptions - ; selectionModel - ; downsample - ; Returns:; true if anything was painted, false otherwise. paintShape; public static void paintShape(Shape shape,; Graphics2D g2d,; Color colorStroke,; Stroke stroke,; Color colorFill); Paint the specified shape with specified stroke and fill colors. Parameters:; shape - shape to paint; g2d - g",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/PathObjectPainter.html:3568,down,downsample,3568,javadoc/docs/qupath/lib/gui/viewer/PathObjectPainter.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/PathObjectPainter.html,2,['down'],['downsample']
Availability,"s ROI to create multiple objects if it contains disjoint regions. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelProcessorUtils; public PixelProcessorUtils(). Method Details. extractMaskedPixels; public static double[] extractMaskedPixels(Parameters<BufferedImage,BufferedImage> params,; int channel,; Function<PathObject,ROI> roiFunction); throws IOException; Extract the pixels from one channel of an image using the specified transform, and applying any ROI mask. Parameters:; params - processor parameters; channel - number of the channel to extract (0-based index); roiFunction - the function used to select a ROI from an object (generally the main ROI or nucleus),; or null to use no ROI at all; Returns:; Throws:; IOException. extractMaskedPixels; public static double[] extractMaskedPixels(Parameters<BufferedImage,BufferedImage> params,; String channelName,; Function<PathObject,ROI> roiFunction); throws IOException; Extract the pixels from one channel of an image using the specified transform, and applying any ROI mask. Parameters:; params - processor parameters; channelName - name of the channel to extract; roiFunction - the function used to select a ROI from an object (generally the main ROI or nucleus),; or null to use no ROI at all; Returns:; Throws:; IOException. extractMaskedPixels; public static double[] extractMaskedPixels(Parameters<BufferedImage,BufferedImage> params,; ColorTransforms.ColorTransform transform,; Function<PathObject,ROI> roiFunction); throws IOException; Extract the pixels from the image using the specified transform, and applying any ROI mask. Parameters:; params - processor parameters; transform - transform to extract single-channel pixels; roiFunction - the function used to select a ROI from an object (generally the main ROI or nucleus),; or null to use no ROI at all; Returns:; Throws:; IOException. maskObject; public static L",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/PixelProcessorUtils.html:3195,mask,mask,3195,javadoc/docs/qupath/lib/experimental/pixels/PixelProcessorUtils.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/PixelProcessorUtils.html,1,['mask'],['mask']
Availability,"s are <= mask pixels, ; making this if necessary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MorphologicalReconstruction; public MorphologicalReconstruction(). Method Details. binaryReconstruction; public static ByteProcessor binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges); Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. Parameters:; bpMarker - ; bpMask - ; permitMaskChanges - ; Returns:. morphologicalReconstruction; public static boolean morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask); Apply morphological operation using marker and mask images. The marker image is changed. Parameters:; ipMarker - ; ipMask - ; Returns:. validateMarkerMask; public static boolean validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask); Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Parameters:; ipMarker - ; ipMask - ; Returns:. openingByReconstruction; public static ImageProcessor openingByReconstruction(ImageProcessor ip,; double radius); Apply opening by reconstruction, with the specified minimum filter radius. Parameters:; ip - ; radius - ; Returns:. closingByReconstruction; public static ImageProcessor closingByReconstruction(ImageProcessor ip,; double radius); Apply a morphological closing by reconstruction. Parameters:; ip - ImageProcessor to process; radius - minimum filter radius; Returns:; processed image. imposeMinima; public static void imposeMinima(FloatProcessor fp,; Roi roi); Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. Parameters:; fp - ; roi - . imposeMaxima; public static void imposeMaxima(FloatProcessor fp,; Roi roi); Ensure that a FloatProcessor only has regi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:3346,mask,mask,3346,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,2,['mask'],['mask']
Availability,"s generated from the labels; Throws:; IOException - if there is an error reading the images. labelsToCells; public static List<PathObject> labelsToCells(Path path,; RegionRequest request); throws IOException; Convert a 2-channel labeled image to cell objects. Parameters:; path - path to labeled image file (e.g. PNGs); request - a RegionRequest representing the region or the full image, used to reposition and rescale ROIs.; If not provided, this will be extracted from the filename, if possible.; Returns:; a list of objects generated from the labels; Throws:; IOException - if there is an error reading the images. labelsToAnnotations; public static List<PathObject> labelsToAnnotations(Collection<Path> paths,; boolean mergeByLabel); throws IOException; Convert labeled images to annotation objects, determining the region from the filename if possible. Parameters:; paths - paths to image files (e.g. PNGs); mergeByLabel - if true, merge objects with the same ROI label; Returns:; a list of objects generated from the labels; Throws:; IOException - if there is an error reading the images. labelsToAnnotations; public static List<PathObject> labelsToAnnotations(Path path,; RegionRequest request); throws IOException; Convert a labeled image to annotation objects. Parameters:; path - path to labeled image file (e.g. PNGs); request - a RegionRequest representing the region or the full image, used to reposition and rescale ROIs.; If not provided, this will be extracted from the filename, if possible.; Returns:; a list of objects generated from the labels; Throws:; IOException - if there is an error reading the images. labelsToObjects; public static List<PathObject> labelsToObjects(Path path,; RegionRequest request,; BiFunction<ROI,Number,PathObject> creator); throws IOException; Convert a labeled image to objects. Parameters:; path - path to labeled image file (e.g. PNGs); request - a RegionRequest representing the region or the full image, used to reposition and rescale ROIs.; If n",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/images/ContourTracing.html:8590,error,error,8590,javadoc/docs/qupath/lib/analysis/images/ContourTracing.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/images/ContourTracing.html,1,['error'],['error']
Availability,"s qupath.imagej.processing.Watershed. Apply an intensity-constrained watershed transform, preventing regions from expanding to pixels below a specified minimum threshold. doWatershed(Mat, Mat, boolean) - Static method in class qupath.opencv.tools.ProcessingCV. Apply a watershed transform. doWatershed(Mat, Mat, double, boolean) - Static method in class qupath.opencv.tools.ProcessingCV. Apply an intensity-constrained watershed transform, preventing regions from expanding to pixels below a specified minimum threshold. doWatershed(SimpleImage, SimpleModifiableImage, boolean) - Static method in class qupath.lib.analysis.algorithms.Watershed. Apply a 2D watershed transform. doWatershed(SimpleImage, SimpleModifiableImage, double, boolean) - Static method in class qupath.lib.analysis.algorithms.Watershed. Apply a 2D watershed transform, constraining region growing using an intensity threshold. DOWNLOAD - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; downsample(double) - Method in class qupath.lib.experimental.pixels.PixelProcessor.Builder. Set the downsample factor to use with requesting image regions. downsample(double) - Method in class qupath.lib.extension.svg.SvgTools.SvgBuilder. Specify downsample factor (defined in terms of the full resolution image space). downsample(double) - Method in class qupath.lib.images.servers.LabeledImageServer.Builder. Specify downsample factor. downsample(double) - Method in class qupath.lib.images.writers.TileExporter. Define resolution as a downsample value. downsamples(double...) - Method in class qupath.lib.gui.images.servers.RenderedImageServer.Builder. Specify downsamples; this is especially important for 'thick' objects (annotations, TMA cores); because the downsamples define the resolutions at which these will be rendered. downsamples(double...) - Method in class qupath.lib.images.writers.ome.OMEPyramidWriter.Builder. Specify downsample factors to use in the final pyramid. DragDropImportListener - Class",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:271050,down,downsample,271050,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['down'],['downsample']
Availability,"s qupath.lib.gui.panes.PreferencePane.GeneralPreferences;  ; tileCachePercentageProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Requested percentage of available memory to use for tile caching. TileClassificationsToAnnotationsPlugin<T> - Class in qupath.lib.plugins.objects. Plugin to merge classified tiles into annotation objects. TileClassificationsToAnnotationsPlugin() - Constructor for class qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin;  ; TileExporter - Class in qupath.lib.images.writers. Helper class for exporting image tiles, typically for further analysis elsewhere or for training up an AI algorithm. TileExporter(ImageData<BufferedImage>) - Constructor for class qupath.lib.images.writers.TileExporter. Create a builder to export tiles. tileHeight(int) - Method in class qupath.lib.objects.utils.Tiler.Builder. Change the height of output tiles. TileListener<T> - Interface in qupath.lib.gui.images.stores. Interface for anything that needs to know when image tiles become available. tileListeners - Variable in class qupath.lib.gui.images.stores.DefaultImageRegionStore;  ; tiler(Tiler) - Method in class qupath.lib.experimental.pixels.PixelProcessor.Builder. Set a tiler to use. Tiler - Class in qupath.lib.objects.utils. A class used to split ROI or Geometry objects into rectangular tiles. Tiler.Builder - Class in qupath.lib.objects.utils;  ; Tiler.TileAlignment - Enum Class in qupath.lib.objects.utils. Enum representing the possible alignments for tiles. TileRequest - Class in qupath.lib.images.servers. A wrapper for a RegionRequest, useful to precisely specify image tiles at a particular resolution. TileRequestManager - Interface in qupath.lib.images.servers. Helper class to manage tile requests from an ImageServer. TilerPlugin<T> - Class in qupath.lib.algorithms. Simple plugin to create square tiles, which may later have measurements added. TilerPlugin() - Constructor for class qupath.lib.algorithms.TilerPlugin. Default const",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1026005,avail,available,1026005,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"s qupath.lib.objects.hierarchy.PathObjectHierarchy. Get the TMAGrid, or null if there is no TMA grid associated with this hierarchy. getToken(String, int) - Method in interface qupath.lib.scripting.languages.AutoCompletions.CompletionTokenizer. Get the token needed for the completion. getTokenizer() - Method in interface qupath.lib.scripting.languages.AutoCompletions.Completion. Get the tokenizer needed to extract the relevant bit of the text to determine the validity and/or ; insertion for the completion. getTool(String) - Static method in class qupath.lib.gui.viewer.tools.PathTools. Return the PathTool corresponding to the specified String. getToolAction(PathTool) - Method in class qupath.lib.gui.ToolManager. Get the action that corresponds to a specific PathTool, creating a new action if one does not already exist. getToolBar() - Method in class qupath.lib.gui.QuPathGUI. Get the main toolbar. getToolManager() - Method in class qupath.lib.gui.QuPathGUI. Get the ToolManager that handles available and selected tools. getTools() - Method in class qupath.lib.gui.ToolManager. Get a read-only list of all available tools. getTPosition() - Method in class qupath.lib.gui.viewer.QuPathViewer. Get the currently-visible time point. getTrainData() - Method in class qupath.process.gui.commands.ml.PixelClassifierTraining.ClassifierTrainingData. Get training data. getTrainFlags() - Method in class qupath.opencv.ml.OpenCVClassifiers.BoostClassifier;  ; getTrainFlags() - Method in class qupath.opencv.ml.OpenCVClassifiers.DTreesClassifier;  ; getTrainFlags() - Method in class qupath.opencv.ml.OpenCVClassifiers.EMClusterer;  ; getTrainFlags() - Method in class qupath.opencv.ml.OpenCVClassifiers.LogisticRegressionClassifier;  ; getTrainFlags() - Method in class qupath.opencv.ml.OpenCVClassifiers.NormalBayesClassifierCV;  ; getTrainFlags() - Method in class qupath.opencv.ml.OpenCVClassifiers.RTreesClassifier;  ; getTrainFlags() - Method in class qupath.opencv.ml.OpenCVClassifiers.SVMCla",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:539386,avail,available,539386,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"s restarts. Author:; Pete Bankhead. Property Summary; Properties. Type; Property; Description; static ObservableList<QuPathStyleManager.Fonts>; availableFonts. Get a list of available fonts. static ObservableList<QuPathStyleManager.StyleOption>; availableStyles. Get the current available styles as an observable list. static ObjectProperty<QuPathStyleManager.Fonts>; font. Get the current selected font. static ObjectProperty<QuPathStyleManager.StyleOption>; selectedStyle. Get the current selected style. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; QuPathStyleManager.Fonts. Available font families. static interface ; QuPathStyleManager.StyleOption. Interface defining a style that may be applied to QuPath. Constructor Summary; Constructors. Constructor; Description; QuPathStyleManager();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ObservableList<QuPathStyleManager.Fonts>; availableFontsProperty(). Get a list of available fonts. static ObservableList<QuPathStyleManager.StyleOption>; availableStylesProperty(). Get the current available styles as an observable list. static ObjectProperty<QuPathStyleManager.Fonts>; fontProperty(). Get the current selected font. static boolean; installStyles(Collection<File> list). Handle installing CSS files (which can be used to style QuPath). static boolean; isDefaultStyle(). Check if the default JavaFX style is used. static void; refresh(). Refresh the current style. static ObjectProperty<QuPathStyleManager.StyleOption>; selectedStyleProperty(). Get the current selected style. static void; updateAvailableStyles(). Request that the list of available styles is updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. availableStyles; public static ObservableList<QuPathStyleManager.StyleOption> availableStylesProperty; Get the",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html:1632,avail,availableFontsProperty,1632,javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,1,['avail'],['availableFontsProperty']
Availability,"s the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Desc",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolygonROI.html:10069,avail,available,10069,javadoc/docs/qupath/lib/roi/PolygonROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolygonROI.html,1,['avail'],['available']
Availability,"s(); .stop();; System.out.println(timeit);; ; . Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; Timeit.Checkpoint. Class representing a named checkpoint with a timestamp in nanoseconds. Constructor Summary; Constructors. Constructor; Description; Timeit();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Timeit; autoUnits();  ; Timeit; checkpoint(). Create a new checkpoint with a default name. Timeit; checkpoint(String name). Create a new checkpoint with the specified name. Timeit; checkpointAndRun(Runnable runnable). Create a checkpoint with the default name and immediately run the provided runnable. Timeit; checkpointAndRun(String name,; Runnable runnable). Create a checkpoint and immediately run the provided Runnable. Timeit; checkpointAndRun(String name,; Runnable runnable,; int nIterations). Create a checkpoint and immediately run the provided Runnable nIterations times. List<Timeit.Checkpoint>; getCheckpoints(). Get an list of all the checkpoints. int; getMaxDecimalPlaces(). Get the maximum number of decimal places when reporting timings. static void; main(String[] args);  ; Timeit; maxDecimalPlaces(int maxDP). Set the maximum number of decimal places when reporting timings ; using seconds or minutes. Timeit; microseconds(). Report timings in microseconds. Timeit; milliseconds(). Report timings in milliseconds. Timeit; minutes(). Report timings in minutes. Timeit; nanoseconds(). Report timings in nanoseconds. Timeit; seconds(). Report timings in seconds. Timeit; start(). Start the Timeit and create a checkpoint with the default name. Timeit; start(String name). Start the Timeit and create a checkpoint with the specified name. Timeit; stop(). Stop the Timeit. Timeit; summarizeCheckpoints(). Request that checkpoints are summarized in the toString() method. Timeit; summarizeCheckpoints(boolean summarize). Optional",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:2355,checkpoint,checkpoint,2355,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,1,['checkpoint'],['checkpoint']
Availability,"s(Object) - Method in class qupath.lib.regions.ImageRegion;  ; equals(Object) - Method in class qupath.lib.regions.RegionRequest;  ; equals(Object) - Method in class qupath.opencv.tools.LocalNormalization.SmoothingScale;  ; equals(Object) - Method in class qupath.process.gui.commands.ml.BoundaryStrategy;  ; equals(Object) - Method in class qupath.process.gui.commands.ml.ClassificationResolution;  ; equalTo(String) - Method in class qupath.lib.classifiers.object.ObjectClassifiers.ClassifyByMeasurementBuilder. Set the classification (by name) for objects for which the specified measurement has a value exactly equal to the threshold. equalTo(PathClass) - Method in class qupath.lib.classifiers.object.ObjectClassifiers.ClassifyByMeasurementBuilder. Set the classification for objects for which the specified measurement has a value exactly equal to the threshold. error() - Method in class qupath.lib.gui.dialogs.Dialogs.Builder. Deprecated.; Create an error alert dialog. error(String) - Static method in class qupath.lib.gui.actions.InfoMessage. Create an error message with static text. error(String, int) - Static method in class qupath.lib.gui.actions.InfoMessage. Create an error message with static text and a count. error(ObservableNumberValue) - Static method in class qupath.lib.gui.actions.InfoMessage. Create a error message to show a count of errors. error(ObservableValue<String>) - Static method in class qupath.lib.gui.actions.InfoMessage. Create an error message. error(ObservableValue<String>, ObservableNumberValue) - Static method in class qupath.lib.gui.actions.InfoMessage. Create an error message with a count. ERROR - Enum constant in enum class qupath.lib.gui.actions.InfoMessage.MessageType. Error or exception. ERROR - Enum constant in enum class qupath.lib.gui.logging.LogManager.LogLevel. Error logging (only if something goes recognizably wrong). escapeFilePath(String) - Static method in class qupath.lib.common.GeneralTools. Escape backslashes in an absolute file ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:283140,error,error,283140,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['error'],['error']
Availability,"s(int). scalarMatWithType; public static Mat scalarMatWithType(double value,; int type); Create a 1x1 Mat with a specific value, with 1 or more channels.; If necessary, clipping or rounding is applied. Parameters:; value - the value to include in the Mat; type - type of the image; this may contain additional channels if required.; Returns:; a Mat with one pixel containing the closest value supported by the type. scalarMat; public static Mat scalarMat(double value,; int depth); Create a 1x1 single-channel Mat with a specific value.; If necessary, clipping or rounding is applied. Parameters:; value - the value to include in the Mat; depth - depth of the image; if a type (including channels) is supplied instead, the channel information is removed.; Returns:; a Mat with one pixel containing the closest value supported by the type. putPixelsUnsigned; public static void putPixelsUnsigned(Mat mat,; byte[] pixels); Set pixels from a byte array.; ; There is no real error checking; it is assumed that the pixel array is in the appropriate format. Parameters:; mat - ; pixels - . putPixelsFloat; public static void putPixelsFloat(Mat mat,; float[] pixels); Set pixels from a float array.; ; There is no real error checking; it is assumed that the pixel array is in the appropriate format. Parameters:; mat - ; pixels - . getCircularStructuringElement; @Deprecated; public static Mat getCircularStructuringElement(int radius); Deprecated.; createDisk(int, boolean) gives more reliable shapes. Create a Mat depicting a circle of the specified radius.; ; Pixels within the circle have the value 1, pixels outside are 0. Parameters:; radius - ; Returns:. createDisk; public static Mat createDisk(int radius,; boolean doMean); Create a disk filter.; This is a rasterized approximation of a filled circle with the specified radius. Parameters:; radius - radius of the disk; must be > 0; doMean - if true, normalize kernel by dividing by the sum of all elements.; If false, all 'inside' elements are 1 an",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/OpenCVTools.html:25946,error,error,25946,javadoc/docs/qupath/opencv/tools/OpenCVTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/OpenCVTools.html,1,['error'],['error']
Availability,"s) using method based on Visvalingam's Algorithm. simplifyPolygon(PolygonROI, double) - Static method in class qupath.lib.roi.ShapeSimplifier. Create a simplified polygon (fewer coordinates) using method based on Visvalingam's Algorithm. simplifyPolygonPoints(List<Point2>, double) - Static method in class qupath.lib.roi.ShapeSimplifier. Create a simplified polygon (fewer coordinates) using method based on Visvalingam's Algorithm. simplifyShape(ROI, double) - Static method in class qupath.lib.roi.ShapeSimplifier. Create a simplified shape (fewer coordinates) using method based on Visvalingam's Algorithm. simplifyTitledPane(TitledPane, boolean) - Static method in class qupath.lib.gui.tools.PaneTools. Deprecated.; Simplify the appearance of a TitledPane using CSS. singleChannel(String, ColorTransforms.ColorTransform, Function<double[], Double>) - Static method in class qupath.lib.experimental.pixels.MeasurementProcessor.Measurements. Create a new object measurement that requires one channel as input, using the main ROI of the object; as a mask. singleChannel(String, ColorTransforms.ColorTransform, Function<double[], Double>, Function<PathObject, ROI>) - Static method in class qupath.lib.experimental.pixels.MeasurementProcessor.Measurements. Create a new object measurement that requires one channel as input. SingleChannelDisplayInfo - Interface in qupath.lib.display. ChannelDisplayInfo that determines colors based upon a single value for each pixel. SingleMeasurementClassificationCommand - Class in qupath.process.gui.commands. Command to (sub)classify objects based on a single measurement. SingleMeasurementClassificationCommand(QuPathGUI) - Constructor for class qupath.process.gui.commands.SingleMeasurementClassificationCommand. Constructor. singleSelection() - Method in class qupath.lib.objects.hierarchy.events.PathObjectSelectionModel. Returns true if only one object has been selected, accessible by getSelectedObject();. size - Variable in class qupath.lib.analysis.sta",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:979095,mask,mask,979095,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['mask'],['mask']
Availability,"s). Specify one or more overlay layers. RenderedImageServer.Builder; overlayOpacity(double opacity). Specify the opacity for overlay layers. RenderedImageServer.Builder; renderer(ImageRenderer renderer). Specify the ImageRenderer that controls conversion to RGB. RenderedImageServer.Builder; settings(ImageDisplaySettings settings). Specify the ImageDisplaySettings that control conversion to RGB. RenderedImageServer.Builder; store(DefaultImageRegionStore store). Specify the region store used to paint the underlying image. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(QuPathViewer viewer); Create a rendered image server build using viewer defaults. Parameters:; viewer - . Builder; public Builder(ImageData<BufferedImage> imageData); Create a rendered image server for the specified ImageData;. Parameters:; imageData - . Method Details. downsamples; public RenderedImageServer.Builder downsamples(double... downsamples); Specify downsamples; this is especially important for 'thick' objects (annotations, TMA cores); because the downsamples define the resolutions at which these will be rendered. Parameters:; downsamples - ; Returns:. display; @Deprecated; public RenderedImageServer.Builder display(ImageDisplay display); Deprecated.; use renderer(ImageRenderer) instead (since an ImageDisplay is also an ImageRenderer. Specify the ImageDisplay that controls conversion to RGB. Parameters:; display - ; Returns:. settings; public RenderedImageServer.Builder settings(ImageDisplaySettings settings); Specify the ImageDisplaySettings that control conversion to RGB.; This will only be applied if no renderer has been set. Parameters:; settings - ; Returns:; Since:; v0.5.0; See Also:. renderer(ImageRenderer). renderer; public RenderedImageServer.Builder renderer(ImageRenderer renderer); Specify the ImageRenderer that controls conversion to RGB. Parameter",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/servers/RenderedImageServer.Builder.html:3006,down,downsamples,3006,javadoc/docs/qupath/lib/gui/images/servers/RenderedImageServer.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/servers/RenderedImageServer.Builder.html,1,['down'],['downsamples']
Availability,"s,; ColorTransforms.ColorTransform transform,; Function<PathObject,ROI> roiFunction). Extract the pixels from the image using the specified transform, and applying any ROI mask. static List<PathObject>; maskObject(ROI parentROI,; PathObject child). Apply a ROI mask to an object, ensuring that the child object's ROI does not extend beyond the mask. static List<PathObject>; maskObjectAndSplit(ROI parentROI,; PathObject child). Apply a ROI mask to an object, ensuring that the child object's ROI does not extend beyond the mask,; and splitting the child object's ROI to create multiple objects if it contains disjoint regions. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelProcessorUtils; public PixelProcessorUtils(). Method Details. extractMaskedPixels; public static double[] extractMaskedPixels(Parameters<BufferedImage,BufferedImage> params,; int channel,; Function<PathObject,ROI> roiFunction); throws IOException; Extract the pixels from one channel of an image using the specified transform, and applying any ROI mask. Parameters:; params - processor parameters; channel - number of the channel to extract (0-based index); roiFunction - the function used to select a ROI from an object (generally the main ROI or nucleus),; or null to use no ROI at all; Returns:; Throws:; IOException. extractMaskedPixels; public static double[] extractMaskedPixels(Parameters<BufferedImage,BufferedImage> params,; String channelName,; Function<PathObject,ROI> roiFunction); throws IOException; Extract the pixels from one channel of an image using the specified transform, and applying any ROI mask. Parameters:; params - processor parameters; channelName - name of the channel to extract; roiFunction - the function used to select a ROI from an object (generally the main ROI or nucleus),; or null to use no ROI at all; Returns:; Throws:; IOException. extractMaskedPixels; public static",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/PixelProcessorUtils.html:2629,mask,mask,2629,javadoc/docs/qupath/lib/experimental/pixels/PixelProcessorUtils.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/PixelProcessorUtils.html,1,['mask'],['mask']
Availability,"s. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. Timeit; public Timeit(). Method Details. start; public Timeit start(); throws UnsupportedOperationException; Start the Timeit and create a checkpoint with the default name.; ; Note that calling this method is not essential, because the Timeit will automatically ; be started when the first checkpoint is created. Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has previously been started; See Also:. start(String); checkpoint(). start; public Timeit start(String name); throws UnsupportedOperationException; Start the Timeit and create a checkpoint with the specified name.; ; Note that calling this method is not essential, because the Timeit will automatically ; be started when the first checkpoint is created. Parameters:; name - of the checkpoint; if null, a default name will be generated; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has previously been started; See Also:. start(); checkpoint(String). checkpointAndRun; public Timeit checkpointAndRun(Runnable runnable); throws UnsupportedOperationException; Create a checkpoint with the default name and immediately run the provided runnable.; ; Note that no checkpoint is made automatically after completion, ; so you should generally print the output immediately, create a new checkpoint, or call stop(). Parameters:; runnable - the runnable to run; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. checkpointAndRun; public Timeit checkpointAndRun(String name,; Runnable runnable); throws UnsupportedOperationException; Create a checkpoint and immediately run the provided Runnable.; ; Note that no checkpoint is made automatically after completion, ; so you should generally print the output immediately, create a new checkpoint, or call stop(). Parameters:; n",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:4464,checkpoint,checkpoint,4464,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,1,['checkpoint'],['checkpoint']
Availability,"s. acceleratorText; public ReadOnlyStringProperty acceleratorTextProperty; Property corresponding to getAcceleratorText(). See Also:. getAcceleratorText(); acceleratorTextProperty(). text; public ReadOnlyStringProperty textProperty; Property corresponding to getText(). See Also:. getText(); textProperty(). longText; public ReadOnlyStringProperty longTextProperty; Property corresponding to getLongText(). See Also:. getLongText(); longTextProperty(). menuPath; public ReadOnlyStringProperty menuPathProperty; Property corresponding to getMenuPath(). See Also:. getMenuPath(); menuPathProperty(). Method Details. getMenuItem; public MenuItem getMenuItem(); Get the menu item corresponding to this command. Returns:. getCommandPath; public String getCommandPath(); Get a string representation of the menu path for this command, including the menu path and the text. Returns:. getText; public String getText(); Get the name of the command. Returns:. getLongText; public String getLongText(); Get the long text (description) for the command, if available.; This assumes an action property has been set, see ActionTools.putActionProperty(MenuItem, org.controlsfx.control.action.Action). Returns:; the long text for the command, or null if no such text is available. getAcceleratorText; public String getAcceleratorText(); Get a String representation of any accelerator for the command. Returns:. getMenuPath; public String getMenuPath(); Get a String representation of the menu containing this command. Returns:. acceleratorTextProperty; public ReadOnlyStringProperty acceleratorTextProperty(); Property corresponding to getAcceleratorText(). Returns:; See Also:. getAcceleratorText(). textProperty; public ReadOnlyStringProperty textProperty(); Property corresponding to getText(). Returns:; See Also:. getText(). longTextProperty; public ReadOnlyStringProperty longTextProperty(); Property corresponding to getLongText(). Returns:; See Also:. getLongText(). menuPathProperty; public ReadOnlyStringPrope",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tools/CommandFinderTools.CommandEntry.html:3192,avail,available,3192,javadoc/docs/qupath/lib/gui/tools/CommandFinderTools.CommandEntry.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tools/CommandFinderTools.CommandEntry.html,1,['avail'],['available']
Availability,"s.ColorTransform> transforms,; Function<double[][],Double> function,; Function<PathObject,ROI> roiFunction); Create a new object measurement that requires multiple channels as input. Parameters:; name - name of the measurement; transforms - transforms to extract the channels; function - function to calculate the measurement from the pixels; roiFunction - function to select a ROI from an object (generally the main ROI or nucleus); Returns:. multiChannel; public static MeasurementProcessor.CustomMeasurement<BufferedImage,BufferedImage> multiChannel(String name,; List<ColorTransforms.ColorTransform> transforms,; Function<double[][],Double> function); Create a new object measurement that requires multiple channels as input, using the main ROI of the object; as a mask. Parameters:; name - name of the measurement; transforms - transforms to extract the channels; function - function to calculate the measurement from the pixels; Returns:. singleChannel; public static MeasurementProcessor.CustomMeasurement<BufferedImage,BufferedImage> singleChannel(String name,; ColorTransforms.ColorTransform transform,; Function<double[],Double> function,; Function<PathObject,ROI> roiFunction); Create a new object measurement that requires one channel as input. Parameters:; name - name of the measurement; transform - transform to extract the channel; function - function to calculate the measurement from the pixels; roiFunction - function to select a ROI from an object (generally the main ROI or nucleus); Returns:. singleChannel; public static MeasurementProcessor.CustomMeasurement<BufferedImage,BufferedImage> singleChannel(String name,; ColorTransforms.ColorTransform transform,; Function<double[],Double> function); Create a new object measurement that requires one channel as input, using the main ROI of the object; as a mask. Parameters:; name - name of the measurement; transform - transform to extract the channel; function - function to calculate the measurement from the pixels; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/MeasurementProcessor.Measurements.html:4228,mask,mask,4228,javadoc/docs/qupath/lib/experimental/pixels/MeasurementProcessor.Measurements.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/MeasurementProcessor.Measurements.html,1,['mask'],['mask']
Availability,"s.DensityMapParameters. Get the primary object filter. getMajor() - Method in class qupath.lib.common.Version. Get the major version number (X.0.0). getManager() - Method in class qupath.lib.images.servers.SparseImageServer. Get the manager, which defines from whence the regions originate. getMask() - Method in class qupath.lib.experimental.pixels.Parameters. Get the mask associated with the main ROI or the parent object, or null if no mask is available. getMask(Parameters<S, T>, ROI) - Method in interface qupath.lib.experimental.pixels.MaskSupplier. Get a mask corresponding to the image, depicting a specified ROI. getMask(ROI) - Method in class qupath.lib.experimental.pixels.Parameters. Get the mask associated with any ROI, or null if no mask is available. getMaskedPixels(Mat, Mat) - Static method in class qupath.opencv.tools.OpenCVTools. Extract all the masked pixels within an image. getMaskImageNames() - Method in interface qupath.lib.projects.Project. Query whether 'true' or masked image names are being returned. getMatrixInverse() - Method in class qupath.lib.color.ColorDeconvolutionStains. Get matrix inverse, as useful for color deconvolution. getMax() - Method in class qupath.lib.analysis.stats.RunningStatistics. Get the maximum non-NaN value added. getMaxAllowed() - Method in class qupath.lib.display.DirectServerChannelInfo;  ; getMaxAllowed() - Method in interface qupath.lib.display.ChannelDisplayInfo. Get the max allowed display value. getMaxBlue() - Method in class qupath.lib.color.ColorDeconvolutionStains. Get the maximum value for the blue channel (default = 255). getMaxCount() - Method in class qupath.lib.analysis.stats.Histogram. Get the highest count found for any bin. getMaxDecimalPlaces() - Method in class qupath.lib.common.Timeit. Get the maximum number of decimal places when reporting timings. getMaxDisplay() - Method in class qupath.lib.display.DirectServerChannelInfo;  ; getMaxDisplay() - Method in interface qupath.lib.display.ChannelDisplayInfo",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:432889,mask,masked,432889,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['mask'],['masked']
Availability,"s.PathPrefs. Show the cursor location on a viewer in calibrated units, rather than pixels. useCellNuclei() - Method in class qupath.lib.images.servers.LabeledImageServer.Builder. Use cells rather than annotations for labels, requesting the nucleus ROI where available. useCells() - Method in class qupath.lib.images.servers.LabeledImageServer.Builder. Use cells rather than annotations for labels. useColorLUTs() - Method in class qupath.lib.display.ImageDisplay. The opposite of ImageDisplay.useGrayscaleLuts(). useCompiled() - Method in class qupath.lib.scripting.ScriptParameters. Request that any script should be compiled before being evaluated, ; and previously compiled versions reused when possible. useCompiled(boolean) - Method in class qupath.lib.scripting.ScriptParameters.Builder. Request that the script is compiled before being evaluated, ; or a previously compiled version is used where available. useCuda() - Static method in class qupath.opencv.dnn.DnnTools. Returns true if CUDA is available and requested. useDetections() - Method in class qupath.lib.images.servers.LabeledImageServer.Builder. Use detections rather than annotations for labels. useExtensions - Variable in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension.BioFormatsPreferences;  ; useFilter(Predicate<PathObject>) - Method in class qupath.lib.images.servers.LabeledImageServer.Builder. Use a custom method of selecting objects for inclusion. useGrayscaleLutProperty() - Method in class qupath.lib.display.ImageDisplay. Property that specifies whether grayscale lookup tables should be preferred to color lookup tables. useGrayscaleLuts() - Method in class qupath.lib.display.ImageDisplay. Get the value of ImageDisplay.useGrayscaleLutProperty(). useInstanceLabels() - Method in class qupath.lib.images.servers.LabeledImageServer.Builder. Request that unique labels are used for all objects, rather than classifications. useInstanceLabels(boolean) - Method in class qupath.lib.images.servers.La",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1071865,avail,available,1071865,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"s.ml.PixelClassifierUI. Create a ComboBox that can be used to select the pixel classification region filter. createRelativePathProperty(String) - Method in class qupath.lib.gui.UserDirectoryManager. Create a read only property for a relative path of the user subdirectory. createRenderedServer(QuPathViewer) - Static method in class qupath.lib.gui.images.servers.RenderedImageServer. Create an ImageServer that returns tiles based on how approximately they would appear within the viewer. createRenderedServer(ImageServer<BufferedImage>, ImageRenderer) - Static method in class qupath.lib.gui.images.servers.RenderedImageServer. Create an ImageServer that converts the image to RGB using the specified ImageRenderer. createROIIcon(ROI, int, int, Color) - Static method in class qupath.lib.gui.tools.IconFactory. Create an icon depicting a ROI. createROIMask(int, int, ROI, double, double, double) - Static method in class qupath.lib.awt.common.BufferedImageTools. Create a grayscale BufferedImage representing a mask for a specified ROI. createROIMask(int, int, ROI, RegionRequest) - Static method in class qupath.lib.awt.common.BufferedImageTools. Create a grayscale BufferedImage representing a mask for a specified ROI. createROIMask(Shape, double) - Static method in class qupath.lib.awt.common.BufferedImageTools. Create a Shape mask using the minimal bounding box for the Shape. createROIMask(ROI, double) - Static method in class qupath.lib.awt.common.BufferedImageTools. Create a ROI mask using the minimal bounding box for the ROI. createROIs(Raster, int, RegionRequest, int, int) - Static method in class qupath.lib.analysis.images.ContourTracing. Create ROIs from one band of a raster containing integer label values. createROIs(Mat, RegionRequest, int, int) - Static method in class qupath.opencv.tools.OpenCVTools. Convert integer labels into ROIs. createROIs(SimpleImage, RegionRequest, int, int) - Static method in class qupath.lib.analysis.images.ContourTracing. Create ROIs from a la",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:216556,mask,mask,216556,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['mask'],['mask']
Availability,"s.stats.ArrayWrappers.ArrayWrapper. Extract one entry from the array, converting to double as necessary. getDoubleParameterValue(String) - Method in class qupath.lib.plugins.parameters.ParameterList. Get a double parameter value (or its default) for the specified key. getDoubleValues(String) - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData;  ; getDoubleValues(String) - Method in interface qupath.lib.gui.measure.PathTableData. Get all double values for all items. getDownsample() - Method in class qupath.lib.gui.commands.MiniViewers.MiniViewerManager. Get the downsample used within the mini viewers. getDownsample() - Method in class qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel. Get the downsample factor for this level. getDownsample() - Method in class qupath.lib.images.servers.TileRequest. Get the downsample value for this tile. getDownsample() - Method in class qupath.lib.regions.RegionRequest. Get the requested downsample factor, defining the resolution at which pixels should be returned. getDownsampleFactor() - Method in class qupath.lib.gui.viewer.QuPathViewer. Get the current downsample factor. getDownsampleFactor() - Method in interface qupath.lib.images.PathImage. Get the downsample factor originally used when obtaining the image from an ImageServer; will be 1 if the image is full-resolution. getDownsampleFactor(ImageServer<?>, double) - Static method in class qupath.lib.images.servers.ServerTools. Calculate a downsample factor for a server given a preferred pixel size. getDownsampleForLevel(int) - Method in class qupath.lib.images.servers.ImageServerMetadata. Get the downsample factor for a specific resolution level. getDownsampleForResolution(int) - Method in class qupath.lib.images.servers.AbstractImageServer;  ; getDownsampleForResolution(int) - Method in interface qupath.lib.images.servers.ImageServer. Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nR",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:386011,down,downsample,386011,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['down'],['downsample']
Availability,"s:; setSelected - if true, select the object that was created after it is added to the hierarchy; z - z-slice index for the annotation; t - timepoint index for the annotation. createAllFullImageAnnotations; public static List<PathObject> createAllFullImageAnnotations(boolean setSelected); Create annotation around the full image for the current image, on all z-slices and timepoints. Parameters:; setSelected - if true, set the annotations to be selected when they are created; Returns:; the annotations that were created, or an empty list if no image data was available; Since:; v0.4.0; See Also:. createAllFullImageAnnotations(ImageData, boolean). createAllFullImageAnnotations; public static List<PathObject> createAllFullImageAnnotations(ImageData<?> imageData,; boolean setSelected); Create annotation around the full image for the specified image, on all z-slices and timepoints. Parameters:; imageData - the image data; setSelected - if true, set the annotations to be selected when they are created; Returns:; the annotations that were created, or an empty list if no image data was available; Since:; v0.4.0. createFullImageAnnotation; public static PathObject createFullImageAnnotation(boolean setSelected); Create an annotation around the full image for the current image, on the default (first) z-slice and timepoint. Parameters:; setSelected - if true, set the annotation to be selected when it is created; Returns:; the annotation that was created, or null if no image data was available; Since:; v0.4.0; See Also:. createFullImageAnnotation(boolean, int, int); createFullImageAnnotation(ImageData, boolean). createFullImageAnnotation; public static PathObject createFullImageAnnotation(boolean setSelected,; int z,; int t); Create an annotation around the full image for the current image, on the specified z-slice and timepoint. Parameters:; setSelected - if true, set the annotation to be selected when it is created; z - z-slice (0-based index); t - timepoint (0-based index); Retu",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:71386,avail,available,71386,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['avail'],['available']
Availability,"s:; the number of objects whose classification was changed.; See Also:. getCompatibleObjects(ImageData). classifyObjects; int classifyObjects(ImageData<T> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. classifyObjects(ImageData, boolean); getCompatibleObjects(ImageData). getCompatibleObjects; Collection<PathObject> getCompatibleObjects(ImageData<T> imageData); Get the objects from an ImageData that are compatible with this classifier. Parameters:; imageData - ; Returns:; a collection of compatible objects, or empty list if no compatible objects are found. getMissingFeatures; Map<String,Integer> getMissingFeatures(ImageData<T> imageData,; Collection<? extends PathObject> pathObjects); Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/object/ObjectClassifier.html:4304,avail,available,4304,javadoc/docs/qupath/lib/classifiers/object/ObjectClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/classifiers/object/ObjectClassifier.html,1,['avail'],['available']
Availability,"s> classificationLabels,; boolean ignoredTransparent). Create a list of channels from classification labels. static int; getChannelIndex(ImageServer<?> server,; String channelName). Get the index of the first channel of a server with a specified channel name. static String; getDefaultShortServerName(URI uri). Get the default shortened server name given the server's path. static String; getDisplayableImageName(ImageServer<?> server). Get an ImageServer name suitable for displaying. static double; getDownsampleFactor(ImageServer<?> server,; double preferredPixelSizeMicrons). Calculate a downsample factor for a server given a preferred pixel size. static BufferedImage; getPaddedRequest(ImageServer<BufferedImage> server,; RegionRequest request,; Padding padding). Get a raster, padded by the specified amount, to the left, right, above and below. static double; getPreferredDownsampleFactor(ImageServer<?> server,; double requestedDownsample). Get the downsample factor supported by the server that is the best match for the requested downsample. static int; getPreferredResolutionLevel(ImageServer<?> server,; double requestedDownsample). Get the preferred resolution level to request regions from an ImageServer at a specified downsample level. static boolean; setImageName(ImageServer<?> server,; String name). Set the name property of the metadata for an ImageServer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ServerTools; public ServerTools(). Method Details. getDefaultShortServerName; public static String getDefaultShortServerName(URI uri); Get the default shortened server name given the server's path. Parameters:; uri - ; Returns:. getChannelIndex; public static int getChannelIndex(ImageServer<?> server,; String channelName); Get the index of the first channel of a server with a specified channel name. Parameters:; server - ; channelName - ; Returns:; index (0-b",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:1772,down,downsample,1772,javadoc/docs/qupath/lib/images/servers/ServerTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html,2,['down'],['downsample']
Availability,"sImageJRois(File file); Check whether a file is likely to contain an ImageJ ROI, based upon its extension ; or .zip file contents. Parameters:; file - ; Returns:; true if the file seems to contain ImageJ ROIs, false otherwise. calibrateObject; public static void calibrateObject(PathObject pathObject,; Roi roi); Set the properties of a PathObject based upon an ImageJ Roi.; This attempts to extract as much useful information as is relevant, including name, color and group. Parameters:; pathObject - ; roi - . convertToAnnotation; @Deprecated; public static PathObject convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). Create an annotation object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertToDetection; @Deprecated; public static PathObject convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane); Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). Create an detection object for a specific ImageJ Roi. Parameters:; imp - ; server - ; roi - ; downsampleFactor - ; plane - ; Returns:. convertLabelsToCells; public static SortedMap<Number,PathObject> convertLabelsToCells(ImageProcessor ipNuclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane); Convert integer labeled images into cell objects. Parameters:; ipNuclei - labels corresponding to cell nuclei; non-zero values here must be identical to the values in ipCells; ipCells - labels corresponding to full cell areas; cal - a Calibration object used to aid conversion between ImageJ and QuPath ROIs; downsample - the downsample value for the ImageProcessors, used to aid conversion between ImageJ and QuPath ROIs; plane - the ImagePlane defining where ROIs should be added; Returns:; a SortedMap",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:17947,down,downsampleFactor,17947,javadoc/docs/qupath/imagej/tools/IJTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html,1,['down'],['downsampleFactor']
Availability,"sabled an update check, then it will not be run). See Also:. requestFullUpdateCheck(). requestFullUpdateCheck; public void requestFullUpdateCheck(); Request a manual update check in a background thread.; This should perform the check if possible, regardless of the user preferences. See Also:. requestAutomaticUpdateCheck(). showAnalysisPaneProperty; public BooleanProperty showAnalysisPaneProperty(). Returns:; the showAnalysisPane property. uiBlocked; public ObservableValue<Boolean> uiBlocked(); Observable value indicating that the user interface is/should be blocked.; This happens when a plugin or script is running. Returns:. openInBrowser; public static boolean openInBrowser(String url); Try to launch a browser window for a specified URL. Parameters:; url - the URL to open in the browser; Returns:; true if this was (as far as we know...) successful, and false otherwise; Since:; v0.5.0 (renamed from launchInBrowserWindow(String}. getToolManager; public ToolManager getToolManager(); Get the ToolManager that handles available and selected tools. Returns:. getThreadPoolManager; public SharedThreadPoolManager getThreadPoolManager(); Get a SharedThreadPoolManager to help with submitting tasks in other threads.; A benefit of using this is that all the thread pools created will be shutdown when ; QuPath is exited. Returns:. getExtensionManager; public ExtensionManager getExtensionManager(); Get an ExtensionManager to facilitating working with extensions. Returns:. getViewerManager; public ViewerManager getViewerManager(); Get the viewer manager, which gives access to all the viewers available within this QuPath instance. Returns:. getAvailablePathClasses; public ObservableList<PathClass> getAvailablePathClasses(); Get an observable list of available PathClasses. Returns:. getDefaultDragDropListener; public DragDropImportListener getDefaultDragDropListener(); Get a reference to the default drag & drop listener, so this may be added to additional windows if needed. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:16026,avail,available,16026,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['avail'],['available']
Availability,"same StainVectors but new max (background) values. ColorDeconvolutionStains; changeName(String name). Create a new stains object with the same StainVectors but a new name. ColorDeconvolutionStains; changeStain(StainVector stainNew,; int stainNumber). Create a new stains object, identical to this one but for one StainVector having been changed. static String; getColorDeconvolutionStainsAsString(ColorDeconvolutionStains stains,; int nDecimalPlaces). Get a String representation of the stains and background. double[][]; getMatrixInverse(). Get matrix inverse, as useful for color deconvolution. double; getMaxBlue(). Get the maximum value for the blue channel (default = 255). double; getMaxGreen(). Get the maximum value for the green channel (default = 255). double; getMaxRed(). Get the maximum value for the red channel (default = 255). String; getName(). Get the stains name. StainVector; getStain(int n). Get a specified color deconvolution stain vector, where n should be 1, 2 or 3 ; (because color deconvolution on a 3-channel image can recover [to some extent] up to 3 stains). int; getStainNumber(StainVector stain). Get the number for a specific stain (1, 2 or 3). Collection<StainVector>; getStains(boolean includeResidual). Get a collection of all the stains. static boolean; isDAB(StainVector stain). Check if the name of a StainVector is ""dab"" or ""d"" (ignoring case). static boolean; isEosin(StainVector stain). Check if the name of a StainVector is ""eosin"", ""eos"" or ""e"" (ignoring case). boolean; isH_DAB(). Check if we have H-DAB staining, by checking the names of the first two stains and confirming that the third stain is a residual. boolean; isH_E(). Check if we have H&E staining, by checking the names of the first two stains and confirming that the third stain is a residual. static boolean; isHematoxylin(StainVector stain). Check if the name of a StainVector is ""haematoxylin"", ""hematoxylin"", ""haem"" or ""h"" (ignoring case). static ColorDeconvolutionStains; makeDefaultColo",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:3244,recover,recover,3244,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,1,['recover'],['recover']
Availability,"sampleFactor(int maxWidth,; int maxHeight). createServerBuilder; protected abstract ImageServerBuilder.ServerBuilder<T> createServerBuilder(); Create a ServerBuilder, which can be used to construct an identical ImageServer.; This should also include the current metadata.; It is permissible to return null for an ImageServer that cannot be recreated ; via a ImageServerBuilder.ServerBuilder. Returns:. getBuilder; public ImageServerBuilder.ServerBuilder<T> getBuilder(); Description copied from interface: ImageServer; Get a ServerBuilder capable of building a server the same as this one.; ; The purpose of this is to aid serialization of servers by switching to a simpler representation.; ; The default implementation returns null, indicating that rebuilding the server is not supported. Specified by:; getBuilder in interface ImageServer<T>; Returns:. getDownsampleForResolution; public double getDownsampleForResolution(int level); Description copied from interface: ImageServer; Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Specified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface Imag",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:5594,down,downsample,5594,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,2,"['avail', 'down']","['available', 'downsample']"
Availability,"scendants, objectCountPostfix, readExternal, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setLocked, setName, setPathClass, storeMetadataValue, writeExternal. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. PathRootObject; public PathRootObject(). Method Details. isRootObject; public boolean isRootObject(); Description copied from class: PathObject; Returns true if the object is the 'root' of an object hierarchy. Overrides:; isRootObject in class PathObject; Returns:; See Also:. PathObjectHierarchy. getPathClass; public PathClass getPathClass(); Description copied from class: PathObject; Get the classification of the object. Specified by:; getPathClass in class PathObject; Returns:. setPathClass; public void setPathClass(PathClass pathClass,; double classProbability); Description copied from class: PathObject; Set the classification of the object, specifying a classification probability.; ; The probability is expected to be between 0 and 1, or Double.NaN if no probability should be set. Specified by:; setPathClass in class PathObject; Parameters:; pathClass - ; classProbability - . getClassProbability; public double getClassProbability(); Description copied from class: PathObject; Request the classification probability, or Double.NaN if no probability is available. Specified by:; getClassProbability in class PathObject; Returns:. getROI; public ROI getROI(); Description copied from class: PathObject; Get the region of interest (ROI) for the object. Specified by:; getROI in class PathObject; Returns:. toString; public String toString(). Overrides:; toString in class PathObject. isEditable; public boolean isEditable(); The root object is never locked. Specified by:; isEditable in class PathObject; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html:3628,avail,available,3628,javadoc/docs/qupath/lib/objects/PathRootObject.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathRootObject.html,1,['avail'],['available']
Availability,"se. Method Details. getPath; String getPath(); Get a String path that can uniquely identify this image.; ; For most standard images, this should be a String representation of an absolute URI. ; If multiple images are stored within the same file, then this information should be encoded in the URI.; ; For images that are generated some other way (e.g. created dynamically) the path may not lend itself to ; a URI representation, but must still be unique so that it can be used for caching tiles. Returns:. getURIs; Collection<URI> getURIs(); Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see getBuilder(). Returns:. getPreferredDownsamples; double[] getPreferredDownsamples(); Get an array of downsample factors supported by the server. Returns:. nResolutions; int nResolutions(); Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Returns:. getDownsampleForResolution; double getDownsampleForResolution(int level); Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. getWidth; int getWidth(); Width of the full-resolution image in pixels. Returns:. getHeight; int getHeight(); Height of the full-resolution image in pixels. Returns:. nChannels; int nChannels(); Number of channels (3 for RGB). Returns:. isRGB; boolean isRGB(); True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Returns:. nZSlices; int nZSlices(); Number of slices in a z-stack. Returns:. nTimepoints; int nTimepoints(); ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:6004,down,downsample,6004,javadoc/docs/qupath/lib/images/servers/ImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html,1,['down'],['downsample']
Availability,"ser window for a specified URL. Parameters:; url - the URL to open in the browser; Returns:; true if this was (as far as we know...) successful, and false otherwise; Since:; v0.5.0 (renamed from launchInBrowserWindow(String}. getToolManager; public ToolManager getToolManager(); Get the ToolManager that handles available and selected tools. Returns:. getThreadPoolManager; public SharedThreadPoolManager getThreadPoolManager(); Get a SharedThreadPoolManager to help with submitting tasks in other threads.; A benefit of using this is that all the thread pools created will be shutdown when ; QuPath is exited. Returns:. getExtensionManager; public ExtensionManager getExtensionManager(); Get an ExtensionManager to facilitating working with extensions. Returns:. getViewerManager; public ViewerManager getViewerManager(); Get the viewer manager, which gives access to all the viewers available within this QuPath instance. Returns:. getAvailablePathClasses; public ObservableList<PathClass> getAvailablePathClasses(); Get an observable list of available PathClasses. Returns:. getDefaultDragDropListener; public DragDropImportListener getDefaultDragDropListener(); Get a reference to the default drag & drop listener, so this may be added to additional windows if needed. Returns:. resetAvailablePathClasses; public boolean resetAvailablePathClasses(); Populate the availablePathClasses with a default list. Returns:; true if changes were mad to the available classes, false otherwise. getAnalysisTabPane; public TabPane getAnalysisTabPane(); Access the main tab pane shown in the QuPath window.; This enables extensions to add or remove tabs - but be cautious!; ; Removing tabs can impact other functionality; If adding a tab, it is usually best to apply FXUtils.makeTabUndockable(Tab). Returns:. isStandalone; public boolean isStandalone(); Query whether this is a standalone QuPathGUI instance, as flagged during startup.; It can be important to know this so as to avoid calling System.exit(0) or",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:16759,avail,available,16759,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['avail'],['available']
Availability,"setValueWithBoundsCheck(Double lastValue); Description copied from class: NumericParameter; Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Specified by:; setValueWithBoundsCheck in class NumericParameter<Double>; Parameters:; lastValue - ; Returns:. setDoubleLastValue; public boolean setDoubleLastValue(double val); Description copied from class: NumericParameter; A class for setting the numeric value as a double (subclasses should convert this as needed). Specified by:; setDoubleLastValue in class NumericParameter<Double>; Parameters:; val - ; Returns:. duplicate; public Parameter<Double> duplicate(); Description copied from interface: Parameter; Create a new Parameter with the same text and value. Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public Double getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public Double getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html:3943,avail,available,3943,javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/DoubleParameter.html,1,['avail'],['available']
Availability,"should be filled; zPosition - the z-stack position; tPosition - the timepoint position; downsampleFactor - the downsample factor; imgThumbnail - a thumbnail image; if not null, this will be used to 'fill the gaps'; observer - an ImageObserver (often ignored); imageDisplay - an ImageRenderer to convert images to RGB. close; public void close(). getTileCacheSize; public long getTileCacheSize(); Get the tile cache size, in bytes.; Image tiles larger than this cannot be cached. Returns:. getCachedThumbnail; public BufferedImage getCachedThumbnail(ImageServer<BufferedImage> server,; int zPosition,; int tPosition). registerRequest; protected void registerRequest(TileListener<BufferedImage> tileListener,; ImageServer<BufferedImage> server,; Shape clipShape,; double downsampleFactor,; int zPosition,; int tPosition); Register a request so that the tile request queue will be populated, including potentially for nearby tiles (i.e. preemptively). Parameters:; tileListener - ; server - ; clipShape - ; downsampleFactor - ; zPosition - ; tPosition - . registerRequest; protected void registerRequest(TileListener<BufferedImage> tileListener,; ImageServer<BufferedImage> server,; RegionRequest region,; double downsampleFactor,; int zPosition,; int tPosition). addTileListener; public void addTileListener(TileListener<BufferedImage> listener). getCache; public Map<RegionRequest,BufferedImage> getCache(). removeTileListener; public void removeTileListener(TileListener<BufferedImage> listener). getCachedTile; public BufferedImage getCachedTile(ImageServer<BufferedImage> server,; RegionRequest request). getCachedTilesForServer; public Map<RegionRequest,BufferedImage> getCachedTilesForServer(ImageServer<BufferedImage> server); Get a map of all cached tiles pertaining to a specific ImageServer. Parameters:; server - ; Returns:. workerComplete; protected void workerComplete(qupath.lib.gui.images.stores.TileWorker<BufferedImage> worker); Every TileWorker should call this when the task is done!",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/stores/DefaultImageRegionStore.html:6771,down,downsampleFactor,6771,javadoc/docs/qupath/lib/gui/images/stores/DefaultImageRegionStore.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/stores/DefaultImageRegionStore.html,1,['down'],['downsampleFactor']
Availability,"sificationMap); Create an OutputHandler.OutputToObjectConverter to convert Mat labeled images to; path objects, optionally setting the classification. Parameters:; creator - the creator function to determine the type of object (e.g. detection, annotation); classificationMap - a map used to convert labels intoo; Returns:; the converter. createObjectConverter; public static <S,; T>; OutputHandler.OutputToObjectConverter<S,T,Mat> createObjectConverter(BiFunction<ROI,Number,PathObject> creator); Create an OutputHandler.OutputToObjectConverter to convert Mat binary or labeled images; to path objects, optionally using the label number. Parameters:; creator - the creator function to determine the type of object (e.g. detection, annotation).; The second argument is the label, which can be used e.g. to set a classification.; Returns:; the converter. builder; public static PixelProcessor.Builder<Mat,Mat,Mat> builder(Processor<Mat,Mat,Mat> processor); Create a PixelProcessor.Builder for an OpenCV Mat.; By default, this will attempt to convert any labeled or binary image output to unclassified detection objects -; but the builder may be further customized to override this behavior before building the processor. Parameters:; processor - ; Returns:. createMatImageSupplier; public static ImageSupplier<Mat> createMatImageSupplier(); Create an ImageSupplier that returns an OpenCV Mat. Returns:. createMatMaskSupplier; public static MaskSupplier<Mat,Mat> createMatMaskSupplier(); Create a MaskSupplier that returns an OpenCV Mat. Returns:. wrapInPointerScope; public static <S,; T,; U> Processor<S,T,U> wrapInPointerScope(Processor<S,T,U> processor); Wrap a processor in a second processor that uses a PointerScope to ensure that pointers are released; (except for any output).; ; If the input is a processor that is already known to have this behavior, it is returned unchanged. Type Parameters:; S - the image type; T - the mask type; U - the output type; Parameters:; processor - ; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/OpenCVProcessor.html:8778,mask,mask,8778,javadoc/docs/qupath/lib/experimental/pixels/OpenCVProcessor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/OpenCVProcessor.html,1,['mask'],['mask']
Availability,"sk by applying a predicate to pixel values. static List<PathObject>; createObjects(Mat matLabels,; RegionRequest region,; int minLabel,; int maxLabel,; BiFunction<ROI,Number,PathObject> creator). Create objects by tracing contours in a labelled image. static Map<Number,ROI>; createROIs(Mat matLabels,; RegionRequest region,; int minLabel,; int maxLabel). Convert integer labels into ROIs. static Mat; crop(Mat mat,; int x,; int y,; int width,; int height). Crop a region from a Mat based on its bounding box, returning a new image (not a subregion). static Mat; crop(Mat mat,; Padding padding). Crop a region from a Mat by stripping off padding, returning a new image (not a subregion). static Mat; ensureContinuous(Mat mat,; boolean inPlace). Ensure a Mat is continuous, creating a copy of the data if necessary. static double[]; extractDoubles(Mat mat). Extract pixels as a double array. static float[]; extractFloats(Mat mat). Extract pixels as a float array. static double[]; extractMaskedDoubles(Mat input,; Mat mask,; int channel). Extract pixels from an image using a mask, limited to the specified channel index. static float[]; extractMaskedFloats(Mat input,; Mat mask,; int channel). Extract pixels from an image using a mask, limited to the specified channel index. static double[]; extractPixels(Mat mat,; double[] pixels). Extract pixels as a double array. static float[]; extractPixels(Mat mat,; float[] pixels). Extract pixels as a float[] array. static List<Mat>; extractZStack(ImageServer<BufferedImage> server,; RegionRequest request). Extract a list of Mats, where each Mat corresponds to a z-slice, for all available z-slices of a region. static List<Mat>; extractZStack(ImageServer<BufferedImage> server,; RegionRequest request,; int zMin,; int zMax). Extract a list of Mats, where each Mat corresponds to a z-slice. static void; fill(Mat mat,; double value). Fill the pixels of an image with a specific value. static void; fill(Mat mat,; Mat mask,; double value). Fill the pixel",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/OpenCVTools.html:4130,mask,mask,4130,javadoc/docs/qupath/opencv/tools/OpenCVTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/OpenCVTools.html,1,['mask'],['mask']
Availability,"slice of a z-stack. MultiscaleFeatures.MultiscaleResultsBuilder.FeatureMap; build(Mat mat). Calculate results for a single Mat. MultiscaleFeatures.MultiscaleResultsBuilder; gaussianSmoothed(boolean calculate). Calculate the Gaussian-smoothed image. MultiscaleFeatures.MultiscaleResultsBuilder; gradientMagnitude(boolean calculate). Calculate the gradient magnitude. MultiscaleFeatures.MultiscaleResultsBuilder; hessianDeterminant(boolean calculate). Calculate the determinant of the Hessian matrix per pixel. MultiscaleFeatures.MultiscaleResultsBuilder; hessianEigenvalues(boolean calculate). Calculate the eigenvalues of the Hessian matrix per pixel. MultiscaleFeatures.MultiscaleResultsBuilder; laplacianOfGaussian(boolean calculate). Calculate the Laplacian of Gaussian image. MultiscaleFeatures.MultiscaleResultsBuilder; paddingXY(int padding). Specify the number of pixels that the input image is padded (left, right, above, below). MultiscaleFeatures.MultiscaleResultsBuilder; pixelCalibration(PixelCalibration cal,; double downsampleXY). Set the pixel calibration, with optional x,y scaling. MultiscaleFeatures.MultiscaleResultsBuilder; retainHessian(boolean retain). Optionally retain the Hessian matrix per pixel. MultiscaleFeatures.MultiscaleResultsBuilder; sigmaX(double sigma). Set all Gaussian sigma values for the horizontal filter. MultiscaleFeatures.MultiscaleResultsBuilder; sigmaXY(double sigma). Set all Gaussian sigma values (x, y) to the same value. MultiscaleFeatures.MultiscaleResultsBuilder; sigmaY(double sigma). Set all Gaussian sigma values for the vertical filter. MultiscaleFeatures.MultiscaleResultsBuilder; sigmaZ(double sigma). Set all Gaussian sigma values for the z-dimension filter. MultiscaleFeatures.MultiscaleResultsBuilder; structureTensorEigenvalues(boolean calculate). Calculate the eigenvalues of the structure tensor (not yet implemented!). MultiscaleFeatures.MultiscaleResultsBuilder; weightedStdDev(boolean calculate). Calculate a Gaussian-weighted standar",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/MultiscaleFeatures.MultiscaleResultsBuilder.html:2645,down,downsampleXY,2645,javadoc/docs/qupath/opencv/tools/MultiscaleFeatures.MultiscaleResultsBuilder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/MultiscaleFeatures.MultiscaleResultsBuilder.html,1,['down'],['downsampleXY']
Availability,"specified ROI. maskImageNames - Variable in class qupath.lib.gui.panes.PreferencePane.GeneralPreferences;  ; maskImageNamesProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Request that image names are hidden within the user interface. maskObject(ROI, PathObject) - Static method in class qupath.lib.experimental.pixels.PixelProcessorUtils. Apply a ROI mask to an object, ensuring that the child object's ROI does not extend beyond the mask. maskObjectAndSplit(ROI, PathObject) - Static method in class qupath.lib.experimental.pixels.PixelProcessorUtils. Apply a ROI mask to an object, ensuring that the child object's ROI does not extend beyond the mask,; and splitting the child object's ROI to create multiple objects if it contains disjoint regions. maskSupplier(MaskSupplier<S, T>) - Method in class qupath.lib.experimental.pixels.PixelProcessor.Builder. Set the mask supplier. MaskSupplier<S,T> - Interface in qupath.lib.experimental.pixels. A functional interface for supplying a mask corresponding to an image. MATCH_VIEWER_RESOLUTIONS - Variable in class qupath.lib.gui.actions.ViewerActions;  ; matchByID(Collection<? extends PathObject>, Collection<? extends PathObject>) - Static method in class qupath.lib.objects.PathObjectTools. Match objects according to their IDs. matchClassName(String...) - Method in class qupath.imagej.images.servers.ImageJServerBuilder;  ; matchClassName(String...) - Method in class qupath.lib.images.servers.bioformats.BioFormatsServerBuilder;  ; matchClassName(String...) - Method in interface qupath.lib.images.servers.ImageServerBuilder. Check if this provider matches one or more specified classnames. matchClassName(String...) - Method in class qupath.lib.images.servers.openslide.OpenslideServerBuilder;  ; matchResolutions() - Method in class qupath.lib.gui.viewer.ViewerManager. Match the display resolutions (downsamples) of all viewers to match the current viewer. matToBufferedImage(Mat) - Static method in class qupath.opencv.tool",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:673685,mask,mask,673685,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['mask'],['mask']
Availability,"specified image, using any current region of interest. Parameters:; imageData - the image data for which stain vectors should be estimated. promptToExportImageRegion; public static void promptToExportImageRegion(QuPathViewer viewer,; boolean renderedImage); Prompt to export the current image region selected in the viewer. Parameters:; viewer - the viewer containing the image to export; renderedImage - if true, export the rendered (RGB) image rather than original pixel values. showInstalledExtensions; public static void showInstalledExtensions(QuPathGUI qupath); Show a dialog displaying the extensions installed for a specified QuPath instance. Parameters:; qupath - the QuPath instance. showDetectionMeasurementManager; public static void showDetectionMeasurementManager(QuPathGUI qupath,; ImageData<?> imageData); Show a simple dialog for viewing (and optionally removing) detection measurements. Parameters:; qupath - ; imageData - . resetTMAMetadata; public static boolean resetTMAMetadata(ImageData<?> imageData); Reset TMA metadata, if available. Parameters:; imageData - ; Returns:; true if changes were made, false otherwise. createSingleStageAction; public static org.controlsfx.control.action.Action createSingleStageAction(Supplier<Stage> supplier); Create a command that generates a persistent single dialog on demand.; A reference to the dialog can be retained, so that if the command is called again ; either the original dialog is shown and/or brought to the front. Parameters:; supplier - supplier function to generate the dialog on demand; Returns:; the action. createSingleStageAction; public static org.controlsfx.control.action.Action createSingleStageAction(Supplier<Stage> supplier,; String name); Create a named command that generates a persistent single dialog on demand.; A reference to the dialog can be retained, so that if the command is called again ; either the original dialog is shown and/or brought to the front. Parameters:; supplier - supplier function to gen",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/Commands.html:14685,avail,available,14685,javadoc/docs/qupath/lib/gui/commands/Commands.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/Commands.html,1,['avail'],['available']
Availability,"splayed in this viewer. void; hierarchyChanged(PathObjectHierarchyEvent event). Notify listeners of a change in the hierarchy or its objects. ReadOnlyObjectProperty<ImageData<BufferedImage>>; imageDataProperty(). Property for the image data currently being displayed within this viewer. Point2D; imagePointToComponentPoint(Point2D point,; Point2D pointDest,; boolean constrainToBounds). Convert a coordinate from the the full-resolution image into the corresponding pixel coordinate in the viewer - optionally constraining it to any viewer component bounds. protected void; initializeForServer(ImageServer<BufferedImage> server);  ; boolean; isImageDataChanging(). Returns true between the time setImageData has been called, and before the first repaint has been completed. boolean; isRotated(). Returns true if viewer.getRotation() != 0. boolean; isShowing(). Returns true if the viewer is visible, and attached to a scene. boolean; isSpaceDown(). Returns true if the spacebar was pressed when this component was focussed, and is still being held down. protected void; paintComponent(Graphics g);  ; protected void; paintViewer(Graphics g,; int w,; int h);  ; void; removeViewerListener(QuPathViewerListener listener). Remove a viewer listener. void; repaint(). Request that the viewer is repainted. void; repaintEntireImage(). Request that the entire image is repainted, including the thumbnail. ReadOnlyLongProperty; repaintTimestamp(). Get the timestamp referring to the last time this viewer was repainted. void; requestCancelDirection(boolean xAxis). Requests that the viewer cancels either the x- or y-axis direction. void; requestDecelerate(). Request that a viewer decelerate any existing panning smoothly. void; requestStartMoving(double dx,; double dy). Request that the viewer start panning with a velocity determined by dx and dy. void; requestStopMoving(). Request that the viewer stop any panning immediately. boolean; requiresTileRegion(String serverPath,; ImageRegion region). Check i",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html:8995,down,down,8995,javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,1,['down'],['down']
Availability,"sponding to a specified ImageRegion.; This may also be used to construct a request based on an existing request, but changing either the path or downsample. Parameters:; path - ; downsample - ; region - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t); Create a request for a region specified in terms of its bounding box, z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; z - ; t - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane); Create a request for a region specified in terms of its bounding box and ImagePlane. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; plane - ; Returns:. createInstance; public static RegionRequest createInstance(String path,; double downsample,; int x,; int y,; int width,; int height); Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. Parameters:; path - ; downsample - ; x - ; y - ; width - ; height - ; Returns:. overlapsRequest; public boolean overlapsRequest(RegionRequest request); Returns true if the region specified by this request overlaps with that of another request.; The test includes insuring that they refer to the same image by checking the paths are the same. Parameters:; request - ; Returns:. getPath; public String getPath(); Get the requested ImageServer path, used as an identifier. Returns:; See Also:. ImageServer.getPath(). getDownsample; public double getDownsample(); Get the requested downsample factor, defining the resolution at which pixels should be returned. Returns:. intersect2D; public RegionRequest intersect2D(ImageRegion region); Intersect to the specified 2D region, ignoring z and t. Parameters:; region - the region defining the x, y, width and height of the maximum per",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:7537,down,downsample,7537,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,1,['down'],['downsample']
Availability,"ss qupath.lib.plugins.parameters.StringParameter;  ; setValue(S) - Method in interface qupath.lib.plugins.parameters.Parameter. Set the Parameter to have a specified value. setValues(DataBuffer, double) - Static method in class qupath.lib.awt.common.BufferedImageTools. Set all values in a DataBuffer. setValueWithBoundsCheck(Double) - Method in class qupath.lib.plugins.parameters.DoubleParameter;  ; setValueWithBoundsCheck(Integer) - Method in class qupath.lib.plugins.parameters.IntParameter;  ; setValueWithBoundsCheck(S) - Method in class qupath.lib.plugins.parameters.NumericParameter. Set the value of this parameter, constraining it to be within any lower and upper bounds if necessary. setVGrowPriority(Priority, Node...) - Static method in class qupath.lib.gui.tools.PaneTools. Deprecated.; Set the GridPane.setVgrow(Node, Priority) property for specified nodes. setViewerDownsample(QuPathViewer, double) - Static method in class qupath.lib.gui.commands.Commands. Set the downsample factor for the specified viewer. setWandSensitivity(double) - Static method in class qupath.process.gui.WandToolEventHandler. Set the wand sensitivity value, which influences how similar local intensity values must be for the wand region growing. setWandSigmaPixels(double) - Static method in class qupath.process.gui.WandToolEventHandler. Set the Gaussian sigma value used to smooth the image when applying the wand. setWandUseOverlays(boolean) - Static method in class qupath.process.gui.WandToolEventHandler. Set whether the wand tool should be influenced by pixel values painted on image overlays. setWarn() - Static method in class qupath.lib.gui.logging.LogManager. Set the root log level to LogLevel.WARN. setWriter(Writer) - Method in class qupath.lib.scripting.ScriptParameters.Builder. Set the main output writer. setZPosition(int) - Method in class qupath.lib.gui.viewer.QuPathViewer. Set the requested z-slice to be visible. shape(Mat) - Static method in class qupath.opencv.tools.GroovyCV. Get",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:955982,down,downsample,955982,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['down'],['downsample']
Availability,"ss qupath.opencv.ml.PatchClassifierParams. Get the requested input resolution for the image. getInputs() - Method in class qupath.opencv.dnn.DnnModelParams. Get the requested inputs and their shapes. getInputs() - Method in interface qupath.opencv.dnn.PredictionFunction. Get the required inputs. getInputShapes() - Method in class qupath.opencv.dnn.DnnTools.DNNLayer. Layer input shape. getInputWidth() - Method in class qupath.lib.classifiers.pixel.PixelClassifierMetadata. Requested width of input image, or -1 if the classifier is not fussy. getInsertion(String, int, String) - Method in interface qupath.lib.scripting.languages.AutoCompletions.Completion. Get the string to insert, given the provided text and position. getInstallationUrl() - Static method in class qupath.lib.gui.Urls. Get a URL pointing to a page that explains how to install this version of QuPath. getInstalledImageServerBuilders() - Static method in class qupath.lib.images.servers.ImageServerProvider. Request all available ImageServerBuilders. getInstalledImageServerBuilders(Class<T>) - Static method in class qupath.lib.images.servers.ImageServerProvider. Request all available ImageServerBuilders supporting a given image class. getInstance() - Static method in class qupath.lib.gui.BuildInfo. Get the shared BuildInfo instance. getInstance() - Static method in class qupath.lib.gui.ExtensionClassLoader. Get a singleton instance of the ExtensionClassLoader. getInstance() - Static method in class qupath.lib.gui.JavadocViewer. Get the main (singleton) instance of JavadocViewer. getInstance() - Static method in class qupath.lib.gui.QuPathGUI. Get the static instance of the current QuPath GUI. getInstance() - Static method in class qupath.lib.gui.scripting.languages.CssLanguage. Get the static instance of this class. getInstance() - Static method in class qupath.lib.gui.scripting.languages.GroovyLanguage. Get the static instance of this class. getInstance() - Static method in class qupath.lib.gui.scripting.lang",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:414648,avail,available,414648,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"ss> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Returns:. classifyObjects; public int classifyObjects(ImageData<T> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. ObjectClassifier.classifyObjects(ImageData, boolean); ObjectClassifier.getCompatibleObjects(ImageData). toString; public String toString(). Overrides:; toString in class Object. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<T> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/objects/OpenCVMLClassifier.html:4603,avail,available,4603,javadoc/docs/qupath/opencv/ml/objects/OpenCVMLClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/objects/OpenCVMLClassifier.html,1,['avail'],['available']
Availability,"stage to use for the QuPath UI (usually from Application.start(Stage)); hostServices - host services from the JavaFX Application, if available; Returns:; Throws:; IllegalStateException - if an instance of QuPath is already running (i.e. getInstance() is not null); See Also:. createInstance(Stage); launchInstanceFromSwing(). createHiddenInstance; public static QuPathGUI createHiddenInstance(); throws IllegalStateException; Create a new QuPath instance that is not visible (i.e. its stage is not shown). Returns:; Throws:; IllegalStateException. launchInstanceFromSwing; public static void launchInstanceFromSwing(); Static method to launch QuPath from within a Swing/AWT application.; ; This aims to handle several things:; ; initializing JavaFX in the appropriate thread; flagging that shutting down QuPath should not terminate the JVM; showing the QuPath UI window. This can potentially be used from other environments (e.g. MATLAB, Fiji, Python).; Afterwards, calls to getInstance() will return the QuPath instance as soon as it is available.; However, note that depending upon the thread from which this method is called, the QuPath instance may not ; be available until some time after the method returns.; ; If there is already an instance of QuPath running, this requests that it is made visible - but otherwise does nothing. requestAutomaticUpdateCheck; public void requestAutomaticUpdateCheck(); Request an automated update check in a background thread.; This will use the user preferences to determine whether or how to check for updates ; (i.e. if the preferences have disabled an update check, then it will not be run). See Also:. requestFullUpdateCheck(). requestFullUpdateCheck; public void requestFullUpdateCheck(); Request a manual update check in a background thread.; This should perform the check if possible, regardless of the user preferences. See Also:. requestAutomaticUpdateCheck(). showAnalysisPaneProperty; public BooleanProperty showAnalysisPaneProperty(). Returns:; the",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:14450,avail,available,14450,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['avail'],['available']
Availability,"static void; refresh(). Refresh the current style. static ObjectProperty<QuPathStyleManager.StyleOption>; selectedStyleProperty(). Get the current selected style. static void; updateAvailableStyles(). Request that the list of available styles is updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. availableStyles; public static ObservableList<QuPathStyleManager.StyleOption> availableStylesProperty; Get the current available styles as an observable list.; The list is unmodifiable, since any changes should be made via adding/removing files in UserDirectoryManager.getCssStylesPath(). See Also:. availableStylesProperty(). selectedStyle; public static ObjectProperty<QuPathStyleManager.StyleOption> selectedStyleProperty; Get the current selected style. See Also:. selectedStyleProperty(). availableFonts; public static ObservableList<QuPathStyleManager.Fonts> availableFontsProperty; Get a list of available fonts.; The list is unmodifiable, since this is primarily used to overcome issues with the default font on macOS ; by changing the font family. More fine-grained changes can be made via css. See Also:. availableFontsProperty(). font; public static ObjectProperty<QuPathStyleManager.Fonts> fontProperty; Get the current selected font. See Also:. fontProperty(). Constructor Details. QuPathStyleManager; public QuPathStyleManager(). Method Details. updateAvailableStyles; public static void updateAvailableStyles(); Request that the list of available styles is updated.; It makes sense to call this when a new user directory has been set, so that a check for CSS files ; can be performed. installStyles; public static boolean installStyles(Collection<File> list); Handle installing CSS files (which can be used to style QuPath). Parameters:; list - list of css files; Returns:. refresh; public static void refresh(); Refresh the current style.; This should not normally be requi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html:3096,avail,availableFontsProperty,3096,javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,2,['avail'],"['available', 'availableFontsProperty']"
Availability,"static void showErrorNotification(String title,; String message); Deprecated.; Show an error notification. Parameters:; title - ; message - . showWarningNotification; public static void showWarningNotification(String title,; String message); Deprecated.; Show a warning notification. Parameters:; title - ; message - . showInfoNotification; public static void showInfoNotification(String title,; String message); Deprecated.; Show an info notification. Parameters:; title - ; message - . showPlainNotification; public static void showPlainNotification(String title,; String message); Deprecated.; Show a plain notification. Parameters:; title - ; message - . showNoImageError; public static void showNoImageError(String title); Deprecated.; Show an error message that no image is available. This is included to help ; standardize the message throughout the software. Parameters:; title - . showNoProjectError; public static void showNoProjectError(String title); Deprecated.; Show an error message that no project is available. This is included to help ; standardize the message throughout the software. Parameters:; title - . showErrorMessage; public static void showErrorMessage(String title,; String message); Deprecated.; Show an error message. Parameters:; title - ; message - . showErrorMessage; public static void showErrorMessage(String title,; Node node); Deprecated.; Show an error message, with the content defined within a Node. Parameters:; title - ; node - . showPlainMessage; public static void showPlainMessage(String title,; String message); Deprecated.; Show a plain message. Parameters:; title - ; message - . showTextWindow; public static void showTextWindow(Window owner,; String title,; String contents,; Modality modality,; boolean isEditable); Deprecated.; Show a window containing plain text, with the specified properties. Parameters:; owner - ; title - ; contents - ; modality - ; isEditable - . promptForMultipleFiles; public static List<File> promptForMultipleFiles(String",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/dialogs/Dialogs.html:10124,error,error,10124,javadoc/docs/qupath/lib/gui/dialogs/Dialogs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/dialogs/Dialogs.html,2,"['avail', 'error']","['available', 'error']"
Availability,"sted; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class SparseImageServer.SparseImageServerManager. java.lang.Object; qupath.lib.images.servers.SparseImageServer.SparseImageServerManager. All Implemented Interfaces:; AutoCloseable. Enclosing class:; SparseImageServer. public static class SparseImageServer.SparseImageServerManager; extends Object; implements AutoCloseable; Helper class for SparseImageServers, capable of returning the appropriate ImageServer for ; different ImageRegions and different resolutions.; ; This also allows serialization/deserialization with JSON. Constructor Summary; Constructors. Constructor; Description; SparseImageServerManager();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; close();  ; Collection<ImageRegion>; getRegions(). Get an unmodifiable collection for all available regions. ImageServer<BufferedImage>; getServer(ImageRegion region,; double downsample). Request the server for a specific downsample. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SparseImageServerManager; public SparseImageServerManager(). Method Details. getRegions; public Collection<ImageRegion> getRegions(); Get an unmodifiable collection for all available regions.; ; This can be used to iterate through regions to check which overlap a request. Returns:. getServer; public ImageServer<BufferedImage> getServer(ImageRegion region,; double downsample); throws IOException; Request the server for a specific downsample.; ; Note that this does not aim to return a server for any arbitrary region; rather, ; a server must exist for the specified region and downsample, otherwise this will return null. Parameters:; region - specified region to which the server s",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html:1209,avail,available,1209,javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/SparseImageServer.SparseImageServerManager.html,1,['avail'],['available']
Availability,"sted | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.projects; Interface ResourceManager.Manager<T>. Type Parameters:; T - the generic type of the resource being managed. Enclosing class:; ResourceManager. public static interface ResourceManager.Manager<T>; Simple manager to handle saving and retrieving resources of different kinds, for example from projects ; or a user directory.; ; Examples of resources are scripts or classifiers. Several of these may be stored per project, ; and may be identified by name. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default boolean; contains(String name). Returns true if the manager knows a resource with the specified name exists. T; get(String name). Retrieve a resource by name. Collection<String>; getNames(). Get a list of the available resources. void; put(String name,; T resource). Save a resource within the project. boolean; remove(String name). Remove a resource within the project. Method Details. getNames; Collection<String> getNames(); throws IOException; Get a list of the available resources. Returns:; Throws:; IOException. get; T get(String name); throws IOException; Retrieve a resource by name. Parameters:; name - ; Returns:; Throws:; IOException. put; void put(String name,; T resource); throws IOException; Save a resource within the project. Parameters:; name - ; resource - ; Throws:; IOException. remove; boolean remove(String name); throws IOException; Remove a resource within the project. Parameters:; name - ; Returns:; true if a resource was successfully removed, false otherwise; Throws:; IOException. contains; default boolean contains(String name); throws IOException; Returns true if the manager knows a resource with the specified name exists. Parameters:; name - the name to check; Returns:; true if a resource with the name exists, false otherwise; Throws:; IOException. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.Manager.html:1432,avail,available,1432,javadoc/docs/qupath/lib/projects/ResourceManager.Manager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ResourceManager.Manager.html,1,['avail'],['available']
Availability,"stem.; This is equivalent to calling; ; String path = buildFilePath(PROJECT_BASE_DIR, more);; . If you want to additionally create the directory, see makePathInProject(String...). Parameters:; more - additional path components to append; Returns:; Throws:; IllegalArgumentException - if no project path is available; Since:; v0.4.0; See Also:. makePathInProject(String...); makeFileInProject(String...). makePathInProject; public static String makePathInProject(String... more); throws IllegalArgumentException; Build a file or directory path relative to the current project, and ensure that it exists.; If it does not, an attempt will be made to create a directory with the specified name, ; and all necessary parent directories.; ; This is equivalent to calling; ; String path = buildPathInProject(PROJECT_BASE_DIR, more);; mkdirs(path);; . Note that if you need a file and not a directory, see makeFileInProject(String...). Parameters:; more - additional path components to append; Returns:; Throws:; IllegalArgumentException - if no project path is available; Since:; v0.4.0; See Also:. buildPathInProject(String...); makeFileInProject(String...). makeFileInProject; public static File makeFileInProject(String... more); throws IllegalArgumentException; Build a file path relative to the current project, and create a File object.; An attempt will be made to create any required directories needed to create the file. ; ; The purpose is to reduce the lines of code needed to build a usable file in a QuPath ; script. ; A Groovy script showing this method in action:; ; File file = makeFileInProject(""export"", ""file.txt""); file.text = ""Some text here""; . Note that, if the file does not already exist, it will not be created by this method - ; only the directories leading to it.; Additionally, if the file refers to an existing directory then the directory will be ; returned - and will not be writable as a file. Parameters:; more - additional path components to append; Returns:; the file object",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:53593,avail,available,53593,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['avail'],['available']
Availability,"summarize). Optionally request that checkpoints are summarized in the toString() method. String; toString(). Returns a snapshot string representation of the Timeit's status. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. Timeit; public Timeit(). Method Details. start; public Timeit start(); throws UnsupportedOperationException; Start the Timeit and create a checkpoint with the default name.; ; Note that calling this method is not essential, because the Timeit will automatically ; be started when the first checkpoint is created. Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has previously been started; See Also:. start(String); checkpoint(). start; public Timeit start(String name); throws UnsupportedOperationException; Start the Timeit and create a checkpoint with the specified name.; ; Note that calling this method is not essential, because the Timeit will automatically ; be started when the first checkpoint is created. Parameters:; name - of the checkpoint; if null, a default name will be generated; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has previously been started; See Also:. start(); checkpoint(String). checkpointAndRun; public Timeit checkpointAndRun(Runnable runnable); throws UnsupportedOperationException; Create a checkpoint with the default name and immediately run the provided runnable.; ; Note that no checkpoint is made automatically after completion, ; so you should generally print the output immediately, create a new checkpoint, or call stop(). Parameters:; runnable - the runnable to run; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. checkpointAndRun; public Timeit checkpointAndRun(String name,; Runnable runnable); throws UnsupportedOperationException; Create a checkpoint and immediately run the provided Runnable.; ; Note",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:4414,checkpoint,checkpoint,4414,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,1,['checkpoint'],['checkpoint']
Availability,"t has already been applied to the Graphics2D as part of its AffineTransform, however; it may optionally be needed within the method e.g. to correct line thicknesses.; imageData - the ImageData associated with this overlay. If the overlay is being displayed on a viewer, this is the ImageData open ; within the viewer. Not all overlays require this, and it may be null.; paintCompletely - If true, the method is permitted to return without completely painting everything, for performance reasons. clearCache; public void clearCache(); Clear any cached tiles. stop; public void stop(); Stop the overlap, halting any pending tile requests. getLocationString; public String getLocationString(ImageData<BufferedImage> imageData,; double x,; double y,; int z,; int t); Description copied from interface: PathOverlay; Get a location string to display when showing a specified image.; ; The default implementation returns null.; If subclasses override this method, they must return quickly, as it may be used to determine text to display as the mouse ; moves over an image. Specified by:; getLocationString in interface PathOverlay; Overrides:; getLocationString in class AbstractOverlay; Parameters:; imageData - ; x - x-coordinate, in the image space (not the viewer component space); y - y-coordinate, in the image space (not the viewer component space); z - z-index for the region currently being viewed; t - t-index for the region currently being viewed; Returns:. getDefaultLocationString; public static String getDefaultLocationString(ImageServer<BufferedImage> server,; double x,; double y,; int z,; int t); Default method for getting a location string from an ImageServer using cached tiles.; If tiles are not cached, no string is returned.; ; May be used by classes implementing PathOverlay.getLocationString(ImageData, double, double, int, int). Parameters:; server - ; x - ; y - ; z - ; t - ; Returns:; location String based upon pixel values and cached tiles, or null if no String is available. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/overlays/PixelClassificationOverlay.html:11697,avail,available,11697,javadoc/docs/qupath/lib/gui/viewer/overlays/PixelClassificationOverlay.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/overlays/PixelClassificationOverlay.html,1,['avail'],['available']
Availability,"t the Timeit and create a checkpoint with the specified name. Timeit; stop(). Stop the Timeit. Timeit; summarizeCheckpoints(). Request that checkpoints are summarized in the toString() method. Timeit; summarizeCheckpoints(boolean summarize). Optionally request that checkpoints are summarized in the toString() method. String; toString(). Returns a snapshot string representation of the Timeit's status. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. Timeit; public Timeit(). Method Details. start; public Timeit start(); throws UnsupportedOperationException; Start the Timeit and create a checkpoint with the default name.; ; Note that calling this method is not essential, because the Timeit will automatically ; be started when the first checkpoint is created. Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has previously been started; See Also:. start(String); checkpoint(). start; public Timeit start(String name); throws UnsupportedOperationException; Start the Timeit and create a checkpoint with the specified name.; ; Note that calling this method is not essential, because the Timeit will automatically ; be started when the first checkpoint is created. Parameters:; name - of the checkpoint; if null, a default name will be generated; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has previously been started; See Also:. start(); checkpoint(String). checkpointAndRun; public Timeit checkpointAndRun(Runnable runnable); throws UnsupportedOperationException; Create a checkpoint with the default name and immediately run the provided runnable.; ; Note that no checkpoint is made automatically after completion, ; so you should generally print the output immediately, create a new checkpoint, or call stop(). Parameters:; runnable - the runnable to run; Returns:; this instance; Throws:; UnsupportedOperationException - if",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:4138,checkpoint,checkpoint,4138,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,1,['checkpoint'],['checkpoint']
Availability,"t typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Specified by:; classifyObjects in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; pathObjects - the objects to classify; resetExistingClass - ; Returns:; the number of objects whose classification was changed.; See Also:. ObjectClassifier.classifyObjects(ImageData, boolean); ObjectClassifier.getCompatibleObjects(ImageData). tryToClassify; protected boolean tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). tryToClassify; protected int tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier); Try to classify a batch of objects. Parameters:; pathObjects - ; server - ; downsample - ; classifier - ; Returns:; number of classified objects. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the co",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:4996,down,downsample,4996,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,1,['down'],['downsample']
Availability,"t value. static final Integer; MASK_GREEN. Mask for use when extracting the green component from a packed (A)RGB int value. static final Integer; MASK_RED. Mask for use when extracting the red component from a packed (A)RGB int value. static final Integer; RED. Packed int representing red. static final Integer; WHITE. Packed int representing white. static final Integer; YELLOW. Packed int representing yellow. Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static int; alpha(int argb). Extract the 8-bit alpha value from a packed ARGB value. static int; blue(int rgb). Extract the 8-bit blue value from a packed RGB value. static int; clip255(double val). Convert a double value to an int, flooring and clipping to the range 0-255. static int; do8BitRangeCheck(double v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(float v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(int v). Clip an input value to be an integer in the range 0-255. static int; green(int rgb). Extract the 8-bit green value from a packed RGB value. static int; makeRGB(int r,; int g,; int b). Deprecated.; Use packRGB(int, int, int) or packClippedRGB(int, int, int) instead. static int; makeRGBA(int r,; int g,; int b,; int a). Deprecated.; The naming and order of arguments is misleading. static int; makeScaledRGB(int rgb,; double scale). Scale the RGB channels for a color by a fixed amount. static int; packARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values. static int; packClippedARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values, clipping to the range 0-255. static int; packClippedRGB(int r,; int g,; int b). Make a packed RGB value from specified input values, clipping to the range 0-255. static int; packRGB(int r,; int g,; int b). Make a pac",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:2169,down,down,2169,javadoc/docs/qupath/lib/common/ColorTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html,1,['down'],['down']
Availability,"t, wait, wait. Method Details. getImageData; public ImageData<BufferedImage> getImageData(); Get the image data. Returns:. getServer; public ImageServer<BufferedImage> getServer(); Get the server. This is often the accessed from getImageData(), but in some cases it may be different; (e.g. if the processing should be applied to a transformed image). Returns:. getRegionRequest; public RegionRequest getRegionRequest(); Get the region request. Returns:. getTileRequest; public TileRequest getTileRequest(); Get the tile request, if available.; This should be used when the region request is derived at a specific tile resolution, because it is able to; provide more accurate tile coordinates without rounding errors. Returns:. getImage; public S getImage(); throws IOException; Get the image to process.; This may return a cached value, so it is important that it is not modified; by the caller. Returns:; Throws:; IOException. getMask; public T getMask(); throws IOException; Get the mask associated with the main ROI or the parent object, or null if no mask is available.; Note that the mask returned should correspond to the same region as getImage() - and not; the bounds of the ROI. Returns:; Throws:; IOException. getMask; public T getMask(ROI roi); throws IOException; Get the mask associated with any ROI, or null if no mask is available.; Note that the mask returned should correspond to the same region as getImage() - and not; the bounds of the ROI. Parameters:; roi - ; Returns:; Throws:; IOException. getParent; public PathObject getParent(); Get the parent object. Returns:; See Also:. getParentOrProxy(). getParentOrProxy; public PathObject getParentOrProxy(); Get the parent, or a proxy parent if one has been specified.; The proxy parent is used to provide a temporary parent object for tiled processing, when using the parent; directly may be problematic (e.g. because the region is too large). Returns:; See Also:. getParent(). builder; public static <S,; T> Parameters.Builder<S,T",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/Parameters.html:2704,mask,mask,2704,javadoc/docs/qupath/lib/experimental/pixels/Parameters.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/Parameters.html,3,"['avail', 'mask']","['available', 'mask']"
Availability,"t,; ROI roi,; RegionRequest request); Create a grayscale BufferedImage representing a mask for a specified ROI.; ; Pixels inside the ROI will be 255, pixels outside will be 0. Parameters:; width - width of the requested mask image; height - height of the requested mask image; roi - ROI for mask; request - region that the mask should correspond to, including the origin (x & y) and downsample factor to use.; Returns:. createROIMask; public static BufferedImage createROIMask(ROI roi,; double downsample); Create a ROI mask using the minimal bounding box for the ROI. Parameters:; roi - ; downsample - ; Returns:. createROIMask; public static BufferedImage createROIMask(int width,; int height,; ROI roi,; double xOrigin,; double yOrigin,; double downsample); Create a grayscale BufferedImage representing a mask for a specified ROI.; ; Pixels inside the ROI will be 255, pixels outside will be 0. Parameters:; width - width of the requested mask image; height - height of the requested mask image; roi - ROI for mask; xOrigin - pixel x coordinate of the top left of the region to include in the mask.; yOrigin - pixel y coordinate of the top left of the region to include in the mask.; downsample - downsample factor to use when generating the mask, i.e. the amount to scale.; Returns:. createROIMask; public static BufferedImage createROIMask(Shape shape,; double downsample); Create a Shape mask using the minimal bounding box for the Shape. Parameters:; shape - ; downsample - ; Returns:. createShapeMask; public static BufferedImage createShapeMask(int width,; int height,; Shape shape,; double xOrigin,; double yOrigin,; double downsample); Create a grayscale BufferedImage representing a mask for a specified ROI.; ; Pixels inside the ROI will be 255, pixels outside will be 0. Parameters:; width - width of the requested mask image; height - height of the requested mask image; shape - Shape for mask; xOrigin - pixel x coordinate of the top left of the region to include in the mask.; yOrig",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html:5250,mask,mask,5250,javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,4,['mask'],['mask']
Availability,"t; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height). Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Create a request for a region specified in terms of its bounding box, z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane). Create a request for a region specified in terms of its bounding box and ImagePlane. static RegionRequest; createInstance(String path,; double downsample,; Collection<? extends ROI> rois). Create a request that contains the pixels of the specified ROIs. static RegionRequest; createInstance(String path,; double downsample,; ImageRegion region). Create a request corresponding to a specified ImageRegion. static RegionRequest; createInstance(String path,; double downsample,; ROI roi). Create a request that contains the pixels of the specified ROI. static RegionRequest; createInstance(String path,; RegionRequest request). Create a request that matches another request but with a different path. static RegionRequest; createInstance(ImageServer<?> server). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). static RegionRequest; createInstance(ImageServer<?> server,; double downsample). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). boolean; equals(Object obj);  ; double; getDownsample(). Get the requested downsample factor, defining the resolution at which pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int widt",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:2174,down,downsample,2174,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,1,['down'],['downsample']
Availability,"tAndRun(String name,; Runnable runnable). Create a checkpoint and immediately run the provided Runnable. Timeit; checkpointAndRun(String name,; Runnable runnable,; int nIterations). Create a checkpoint and immediately run the provided Runnable nIterations times. List<Timeit.Checkpoint>; getCheckpoints(). Get an list of all the checkpoints. int; getMaxDecimalPlaces(). Get the maximum number of decimal places when reporting timings. static void; main(String[] args);  ; Timeit; maxDecimalPlaces(int maxDP). Set the maximum number of decimal places when reporting timings ; using seconds or minutes. Timeit; microseconds(). Report timings in microseconds. Timeit; milliseconds(). Report timings in milliseconds. Timeit; minutes(). Report timings in minutes. Timeit; nanoseconds(). Report timings in nanoseconds. Timeit; seconds(). Report timings in seconds. Timeit; start(). Start the Timeit and create a checkpoint with the default name. Timeit; start(String name). Start the Timeit and create a checkpoint with the specified name. Timeit; stop(). Stop the Timeit. Timeit; summarizeCheckpoints(). Request that checkpoints are summarized in the toString() method. Timeit; summarizeCheckpoints(boolean summarize). Optionally request that checkpoints are summarized in the toString() method. String; toString(). Returns a snapshot string representation of the Timeit's status. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. Timeit; public Timeit(). Method Details. start; public Timeit start(); throws UnsupportedOperationException; Start the Timeit and create a checkpoint with the default name.; ; Note that calling this method is not essential, because the Timeit will automatically ; be started when the first checkpoint is created. Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has previously been started; See Also:. start(String); checkpoint(). start; publi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:3162,checkpoint,checkpoint,3162,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,1,['checkpoint'],['checkpoint']
Availability,"tAutoCompletor() - Method in class qupath.lib.gui.scripting.languages.YamlLanguage;  ; getAutoCompletor() - Method in class qupath.lib.scripting.languages.ScriptLanguage. Get the ScriptAutoCompletor object that takes care of this language's auto-completion. getAutomateActions() - Method in class qupath.lib.gui.QuPathGUI. Get the automated actions associated with this QuPath instance. getAvailableFeatures(Collection<? extends PathObject>) - Static method in class qupath.lib.objects.PathObjectTools. Get a set containing the names of all measurements found in the measurement lists of a specified object collection. getAvailableLanguages() - Static method in class qupath.lib.gui.scripting.languages.ScriptLanguageProvider. Get the available script languages. getAvailablePathClasses() - Method in class qupath.lib.gui.QuPathGUI. Get an observable list of available PathClasses. getAvailableSyntaxes() - Static method in class qupath.lib.gui.scripting.syntax.ScriptSyntaxProvider. Get the available script syntaxes. getAvailableTools() - Method in class qupath.lib.gui.viewer.tools.ExtendedPathTool;  ; getAveragedPixelSize() - Method in class qupath.lib.images.servers.ImageServerMetadata. Get the averaged pixel size in microns, if available - or Double.NaN otherwise. getAveragedPixelSize() - Method in class qupath.lib.images.servers.PixelCalibration. Get an average of PixelCalibration.getPixelWidth() and PixelCalibration.getPixelHeight(). getAveragedPixelSizeMicrons() - Method in class qupath.lib.images.servers.PixelCalibration. Get the average of the pixel width and height in microns if possible, or Double.NaN if the pixel size is not available. getBackingListEntries() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Access the underlying entries, for which getEntries provides a filtered view. getBaseClass() - Method in class qupath.lib.objects.classes.PathClass. Get the 'base' class, i.e. getBaseDirectory(Project<?>) - Static method in class qupath.lib.pr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:333361,avail,available,333361,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"tImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, setMetadata, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getPixelCalibration, readBufferedImage, readRegion, readRegion. Constructor Details. ImageJServer; public ImageJServer(URI uri,; String... args); throws IOException; Constructor. Parameters:; uri - URI representing the local file or an ImageJ-compatible URL; args - optional arguments (not currently used); Throws:; IOException. Method Details. readPathObjects; public Collection<PathObject> readPathObjects(); Description copied from interface: PathObjectReader; Read a collection of objects from the source. Specified by:; readPathObjects in interface PathObjectReader; Returns:; a collection of objects, or empty list if no objects are available. dumpMetadata; public String dumpMetadata(); Get a String representing the image metadata.; ; Currently, this reflects the contents of the ImageJ 'Show info' command, which is tied to the 'current' slice ; and therefore not complete for all slices of a multichannel/multidimensional image.; This behavior may change in the future. Returns:; a String representing image metadata in ImageJ's own form. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specified by:; getURIs in interface Im",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html:3400,avail,available,3400,javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/images/servers/ImageJServer.html,1,['avail'],['available']
Availability,"tShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. r",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8349,down,downsample,8349,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,2,['down'],['downsample']
Availability,"tTableThumbnailsProperty(). Specify whether measurement tables should show thumbnail images by default or not. static BooleanProperty; showPointHullsProperty(). Show the convex hull for point annotations within the viewer. static BooleanProperty; showStartupMessageProperty(). Show a startup message when QuPath is launched. static BooleanProperty; showTMAOptionsProperty(). Flag to indicate that the TMA menu should be shown to the user - only relevant when working with Tissue Microarrays. static BooleanProperty; showToolBarBadgesProperty(). Show badges on the toolbar, e.g. static BooleanProperty; skipMissingCoresProperty(). Skip ('jump over') missing cores when navigating through TMA grids. static StringProperty; startupScriptProperty(). Path to a startup script that should be run immediately after QuPath's launch. static StringProperty; tableDelimiterProperty(). Delimiter to use when exporting tables. static DoubleProperty; tileCachePercentageProperty(). Requested percentage of available memory to use for tile caching. static DoubleProperty; tmaExportDownsampleProperty(). Default downsample factor to use when exporting TMA cores. static BooleanProperty; useCalibratedLocationStringProperty(). Show the cursor location on a viewer in calibrated units, rather than pixels. static BooleanProperty; usePixelSnappingProperty(). If true, pixels should be snapped to integer coordinates when using the drawing tools. static BooleanProperty; useRotateGesturesProperty(). Support rotate gestures for touchscreens and trackpads. static ObjectProperty<String>; userPathProperty(). A path where additional files may be stored, such as extensions and log files. static BooleanProperty; useScrollGesturesProperty(). Support scroll gestures for touchscreens and trackpads. static BooleanProperty; useSelectedColorProperty(). Use a specified color for highlighting selected objects in the viewer. static BooleanProperty; useSystemMenubarProperty(). Deprecated. static BooleanProperty; useTileBrushPr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html:22087,avail,available,22087,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,1,['avail'],['available']
Availability,"tThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice and timepoint. double; getDownsampleForResolution(int level). Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. ImageServerMetadata; getOriginalMetadata(). Get the original metadata read during creation of the server. String; getPath(). Get a String path that can uniquely identify this image. default PixelCalibration; getPixelCalibration(). Get the PixelCalibration object from the current metadata. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Get an array of downsample factors supported by the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. Collection<URI>; getURIs(). Get the URIs for images required for this server. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Test whether a region is empty, i.e. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. default T; readBufferedImage(RegionRequest request). Deprecated.; since v0.4.0. default T; readRegion(double downsa",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:3455,down,downsample,3455,javadoc/docs/qupath/lib/images/servers/ImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html,1,['down'],['downsample']
Availability,"tValues(DataBuffer buffer,; double val). Set all values in a DataBuffer. static void; swapRGBOrder(BufferedImage img,; String order). Swap the order of pixels in an RGB image. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. createROIMask; public static BufferedImage createROIMask(int width,; int height,; ROI roi,; RegionRequest request); Create a grayscale BufferedImage representing a mask for a specified ROI.; ; Pixels inside the ROI will be 255, pixels outside will be 0. Parameters:; width - width of the requested mask image; height - height of the requested mask image; roi - ROI for mask; request - region that the mask should correspond to, including the origin (x & y) and downsample factor to use.; Returns:. createROIMask; public static BufferedImage createROIMask(ROI roi,; double downsample); Create a ROI mask using the minimal bounding box for the ROI. Parameters:; roi - ; downsample - ; Returns:. createROIMask; public static BufferedImage createROIMask(int width,; int height,; ROI roi,; double xOrigin,; double yOrigin,; double downsample); Create a grayscale BufferedImage representing a mask for a specified ROI.; ; Pixels inside the ROI will be 255, pixels outside will be 0. Parameters:; width - width of the requested mask image; height - height of the requested mask image; roi - ROI for mask; xOrigin - pixel x coordinate of the top left of the region to include in the mask.; yOrigin - pixel y coordinate of the top left of the region to include in the mask.; downsample - downsample factor to use when generating the mask, i.e. the amount to scale.; Returns:. createROIMask; public static BufferedImage createROIMask(Shape shape,; double downsample); Create a Shape mask using the minimal bounding box for the Shape. Parameters:; shape - ; downsample - ; Returns:. createShapeMask; public static BufferedImage createShapeMask(int width,; int height,; Shape shape",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html:4897,down,downsample,4897,javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,1,['down'],['downsample']
Availability,"ta). Show a dialog to export object(s) to a GeoJSON file. static void; runObjectImport(QuPathGUI qupath,; ImageData<BufferedImage> imageData). Show a dialog to import object(s) from a file. static boolean; saveSnapshot(QuPathGUI qupath,; GuiTools.SnapshotType type). Save an image snapshot, prompting the user to select the output file. static void; selectAllObjects(ImageData<?> imageData). Select all objects (excluding the root object) in the imageData. static void; selectObjectsByClass(ImageData<?> imageData,; Class<? extends PathObject> cls). Select objects that are instances of a specified class, logging an appropriate method in the workflow. static boolean; selectObjectsByClassification(ImageData<?> imageData,; PathClass... pathClasses). Select objects by classification, logging the step (if performed) in the history workflow. static void; selectObjectsOnCurrentPlane(QuPathViewer viewer). Select all the objects on the current plane of the viewer. static void; setViewerDownsample(QuPathViewer viewer,; double downsample). Set the downsample factor for the specified viewer. static void; showAnnotationGridView(QuPathGUI qupath). Show a grid view for annotation objects. static void; showAnnotationMeasurementTable(QuPathGUI qupath,; ImageData<BufferedImage> imageData). Show a measurement table for all annotation objects. static void; showCellMeasurementTable(QuPathGUI qupath,; ImageData<BufferedImage> imageData). Show a measurement table for all cell objects. static void; showChannelViewer(QuPathViewer viewer). Show a channel viewer window associated with a specific viewer. static void; showDetectionMeasurementManager(QuPathGUI qupath,; ImageData<?> imageData). Show a simple dialog for viewing (and optionally removing) detection measurements. static void; showDetectionMeasurementTable(QuPathGUI qupath,; ImageData<BufferedImage> imageData). Show a measurement table for all detection objects. static void; showInstalledExtensions(QuPathGUI qupath). Show a dialog displaying",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/Commands.html:8510,down,downsample,8510,javadoc/docs/qupath/lib/gui/commands/Commands.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/Commands.html,1,['down'],['downsample']
Availability,"ta.ImageResolutionLevel level). Add a new level directly. ImageServerMetadata.ImageResolutionLevel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFullResolutionLevel(); Add the full-resolution image as a level of the pyramid.; It is not required that this form part of the pyramid in cases where this image pyramid might ; be used to provide a smaller overlay of a larger image, and not itself contain ; pixels at the highest resolution. Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(double downsample,; int levelWidth,; int levelHeight); Add a new level by providing a downsample value, width and height.; This avoids relying on any rounding decisions made when specifying the dimensions or downsample value only. Parameters:; downsample - ; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(int levelWidth,; int levelHeight); Add a new level",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:2669,down,downsample,2669,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,2,['down'],['downsample']
Availability,"tables should show thumbnail images by default or not. showMessageDialog(String, String) - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Show a standard message dialog. showMessageDialog(String, Node) - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Show a message dialog (OK button only), with the content contained within a Node. showMiniViewer(QuPathViewer) - Static method in class qupath.lib.gui.commands.Commands. Show a mini viewer window associated with a specific viewer. showNamesProperty() - Method in class qupath.lib.gui.viewer.OverlayOptions;  ; showNoImageError(String) - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Show an error message that no image is available. showNoImageError(String) - Static method in class qupath.lib.gui.tools.GuiTools. Show an error message that no image is available. showNoProjectError(String) - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Show an error message that no project is available. showNoProjectError(String) - Static method in class qupath.lib.gui.tools.GuiTools. Show an error message that no project is available. showOverviewProperty() - Method in class qupath.lib.gui.viewer.ViewerManager. Show the overview image. showOverviewProperty() - Method in class qupath.lib.gui.viewer.ViewerPlusDisplayOptions. Show the overview image. showParameterDialog(String, ParameterList) - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Show a (modal) dialog for a specified ParameterList. showParameterDialog(String, ParameterList) - Static method in class qupath.lib.gui.tools.GuiTools. Show a (modal) dialog for a specified ParameterList. showPixelClassificationProperty() - Method in class qupath.lib.gui.viewer.OverlayOptions;  ; showPlainMessage(String, String) - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Show a plain message. showPlainNotification(String, String) - Static method in class qupath.lib.gui.dialogs",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:968744,error,error,968744,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,2,"['avail', 'error']","['available', 'error']"
Availability,"tarted; See Also:. start(); checkpoint(String). checkpointAndRun; public Timeit checkpointAndRun(Runnable runnable); throws UnsupportedOperationException; Create a checkpoint with the default name and immediately run the provided runnable.; ; Note that no checkpoint is made automatically after completion, ; so you should generally print the output immediately, create a new checkpoint, or call stop(). Parameters:; runnable - the runnable to run; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. checkpointAndRun; public Timeit checkpointAndRun(String name,; Runnable runnable); throws UnsupportedOperationException; Create a checkpoint and immediately run the provided Runnable.; ; Note that no checkpoint is made automatically after completion, ; so you should generally print the output immediately, create a new checkpoint, or call stop(). Parameters:; name - the name of the checkpoint to create; runnable - the runnable to run; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. checkpointAndRun; public Timeit checkpointAndRun(String name,; Runnable runnable,; int nIterations); throws UnsupportedOperationException; Create a checkpoint and immediately run the provided Runnable nIterations times.; The purpose of this is to get better insights into the time required to run a self-contained block of code.; ; Note that no checkpoint is made automatically after completion of the final iteration, ; so you should generally print the output immediately, create a new checkpoint, or call stop(). Parameters:; name - base name of the checkpoint to create; the iteration number will be appended if nIterations > 1; runnable - the runnable to run; nIterations - the number of times to run the runnable; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. checkpoint; public Timeit checkpoint(); throws UnsupportedOperationExceptio",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:5559,checkpoint,checkpoint,5559,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,1,['checkpoint'],['checkpoint']
Availability,"tate the image by 90, 180 or 270 degrees. RotatedImageServer.Rotation. Enum for rotations in increments of 90 degrees. RunningStatistics. Helper class for computing basic statistics from values as they are added. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. SaveResourcePaneBuilder<T>. Small JavaFX pane to support saving object/pixel classifiers and density maps within a project in a standardized way. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. ScriptAttributes. Default attributes that can be set when running scripts. ScriptAutoCompletor. Interface for classes that implement auto-completion (e.g. ScriptEditor. Minimal interface for a script editor that the GUI can call. ScriptEditorControl<T>. Basic script editor control using JavaFX. ScriptLanguage. Abstract class to represent languages supported by the script editor. ScriptLanguageProvider. Class with static methods to fetch all the available ScriptLanguages. ScriptParameters. Class that stores key information that is useful for running scripts. ScriptParameters.Builder. Builder class for ScriptParameters. ScriptStyler. Interface for classes that apply some styling to a RichTextFX's CodeArea. ScriptStylerProvider. Class with static methods to fetch all the available ScriptStylers. ScriptSyntax. Interface for classes that apply some syntax formatting to an EditableText. ScriptSyntaxProvider. Class with static methods to fetch all the available ScriptSyntaxes. ScriptTab. Class representing a script tab (e.g. SelectableItem<T>. Helper class for managing items when only one of them may be selected. SelectedMeasurementTableView. Component to show measurements for a currently-selected object. ServerSelector. Helper class for selecting one image server out of a collection. ServerTools. Static methods helpful when dealing with ImageServers. ShapeFeaturesPlugin<T>. Add shape measurements. ShapeSimplifier. Helper m",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:51433,avail,available,51433,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['avail'],['available']
Availability,"tatic List<RegionRequest>; getTilesToRequest(ImageServer<?> server,; Shape clipShape,; double downsampleFactor,; int zPosition,; int tPosition,; List<RegionRequest> regions). Given ImageServer, determine the boundaries of the image tiles that would be needed to paint; a specified shape (defined by coordinates in the full-resolution image space). Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageRegionStoreHelpers; public ImageRegionStoreHelpers(). Method Details. getTilesToRequest; public static List<RegionRequest> getTilesToRequest(ImageServer<?> server,; Shape clipShape,; double downsampleFactor,; int zPosition,; int tPosition,; List<RegionRequest> regions); Given ImageServer, determine the boundaries of the image tiles that would be needed to paint; a specified shape (defined by coordinates in the full-resolution image space).; The downsampleFactor is used to determine the resolution at which to request the tiles. Parameters:; server - The ImageServer from which the tiles would be requested; clipShape - The requested shape, defined in the full-resolution image space; downsampleFactor - The downsampleFactor determining the resolution at which tiles should be requested; zPosition - The zPosition from which to request tiles; tPosition - The tPosition from which to request tiles; regions - regions The list to which requests should be added, or null if a new list should be created; Returns:; The list of requests - identical to the one provided as an input parameter, unless this was null. getTileRequest; public static RegionRequest getTileRequest(ImageServer<BufferedImage> server,; double x,; double y,; double downsampleFactor,; int zPosition,; int tPosition); Given an ImageServer, determine the boundaries of the image tile that contains specified x, y coordinates.; The downsampleFactor is used to determine the resolution at which to request the tiles. Para",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/stores/ImageRegionStoreHelpers.html:2278,down,downsampleFactor,2278,javadoc/docs/qupath/lib/gui/images/stores/ImageRegionStoreHelpers.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/stores/ImageRegionStoreHelpers.html,1,['down'],['downsampleFactor']
Availability,"tation, for all annotation classifications. static void; duplicateSelectedAnnotations(ImageData<?> imageData). Duplicate the selected annotations. static void; editSelectedAnnotation(QuPathGUI qupath). Prompt to edit the selected annotation by translation and rotation. static void; insertSelectedObjectsInHierarchy(ImageData<?> imageData). Insert the selected objects in the hierarchy, resolving positions accordingly. static void; launchTMADataViewer(QuPathGUI qupath). Open new window with the TMA data viewer. static void; makeInverseAnnotation(ImageData<?> imageData). Make an inverse annotation for the selected objects, storing the command in the history workflow. static void; mergeSelectedAnnotations(ImageData<?> imageData). Merge the currently-selected annotations for an image, replacing them with a single new annotation. static void; pasteFromClipboard(QuPathGUI qupath,; boolean addToCurrentPlane). Attempt to paste objects from the system clipboard to the current image, if available; ; otherwise, check for text on the clipboard and paste it into a new script editor tab. static void; promptToAddShapeFeatures(QuPathGUI qupath). Prompt to add shape features for selected objects. static boolean; promptToCreateProject(QuPathGUI qupath). Prompt the user to select an empty directory, and use this to create a new project and set it as active. static void; promptToDeleteObjects(ImageData<?> imageData,; Class<? extends PathObject> cls). Prompt to delete objects of a specified type, or all objects. static boolean; promptToEditClass(PathClass pathClass). Prompt to edit the name/color of a class. static void; promptToEstimateStainVectors(ImageData<BufferedImage> imageData). Prompt to estimate stain vectors for the specified image, using any current region of interest. static void; promptToExportImageRegion(QuPathViewer viewer,; boolean renderedImage). Prompt to export the current image region selected in the viewer. static boolean; promptToOpenProject(QuPathGUI qupath). Prompt ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/Commands.html:4648,avail,available,4648,javadoc/docs/qupath/lib/gui/commands/Commands.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/Commands.html,1,['avail'],['available']
Availability,"te(GitHubProject.GitHubRepo) - Static method in class qupath.lib.gui.extensions.UpdateChecker. Query the latest release from a GitHub repo. checkImageSupport(URI, String...) - Method in class qupath.imagej.images.servers.ImageJServerBuilder;  ; checkImageSupport(URI, String...) - Method in class qupath.lib.images.servers.bioformats.BioFormatsServerBuilder;  ; checkImageSupport(URI, String...) - Method in interface qupath.lib.images.servers.ImageServerBuilder. Check whether a URI is supported by this builder. checkImageSupport(URI, String...) - Method in class qupath.lib.images.servers.JsonImageServerBuilder;  ; checkImageSupport(URI, String...) - Method in class qupath.lib.images.servers.openslide.OpenslideServerBuilder;  ; checkMinVersion(String) - Static method in class qupath.lib.scripting.QP. Check whether the current QuPath version is ≥ the specified version. checkpoint() - Method in class qupath.lib.common.Timeit. Create a new checkpoint with a default name. checkpoint(String) - Method in class qupath.lib.common.Timeit. Create a new checkpoint with the specified name. checkpointAndRun(Runnable) - Method in class qupath.lib.common.Timeit. Create a checkpoint with the default name and immediately run the provided runnable. checkpointAndRun(String, Runnable) - Method in class qupath.lib.common.Timeit. Create a checkpoint and immediately run the provided Runnable. checkpointAndRun(String, Runnable, int) - Method in class qupath.lib.common.Timeit. Create a checkpoint and immediately run the provided Runnable nIterations times. checkType(URI) - Static method in class qupath.lib.images.servers.FileFormatInfo. Check the type of an image for a specified URI. checkVersionRange(String, String) - Static method in class qupath.lib.scripting.QP. Check whether the current QuPath version is ≥ the specified minimum version, and < the specified maximum. ChoiceParameter<S> - Class in qupath.lib.plugins.parameters. Parameter that supports a list of choices. choices - Variable in c",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:98891,checkpoint,checkpoint,98891,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['checkpoint'],['checkpoint']
Availability,"te; height - height of the rectangle to create; Returns:; a rectangle with the specified width and height and covered by the mask, or null if it was not possible to find a rectangle ; that meets this criterion; Throws:; IllegalArgumentException - if either the mask width or height is too small for the requested width and height; See Also:. createRandomRectangle(ROI, double, double, int, boolean, Random). createRandomRectangle; public static ROI createRandomRectangle(ROI mask,; double width,; double height,; int maxAttempts,; boolean permitErosion,; Random random); throws IllegalArgumentException; Create a randomly-located rectangle ROI with the specified width and height, constrained to fall within the provided mask ROI, ; using a specified maximum number of attempts. Parameters:; mask - region defining the area in which the rectangle can be located, including the image plane information; width - width of the rectangle to create; height - height of the rectangle to create; maxAttempts - the maximum number of attempts to make when attempting to fit the rectangle within the ROI; permitErosion - optionally make an additional attempt to locate a rectangle by eroding the mask and using the remaining ; region. For a non-square rectangle, this uses the length of the longest side for erosion - and therefore ; may exclude some possible rectangles from consideration.; random - random number generator to use for the initial attempts (may be null to use a default); Returns:; a rectangle with the specified width and height and covered by the mask, or null if it was not possible to find a rectangle ; that meets this criterion; Throws:; IllegalArgumentException - if either the mask width or height is too small for the requested width and height; See Also:. createRandomRectangle(ROI, double, double). areaContains; public static boolean areaContains(ROI pathROI,; double x,; double y); Returns true if pathROI is an area that contains x & y somewhere within it. Parameters:; pathROI - ;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiTools.html:19756,mask,mask,19756,javadoc/docs/qupath/lib/roi/RoiTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiTools.html,2,['mask'],['mask']
Availability,"ted percentage of available memory to use for tile caching. static DoubleProperty; tmaExportDownsample. Default downsample factor to use when exporting TMA cores. static BooleanProperty; useCalibratedLocationString. Show the cursor location on a viewer in calibrated units, rather than pixels. static BooleanProperty; usePixelSnapping. If true, pixels should be snapped to integer coordinates when using the drawing tools. static BooleanProperty; useRotateGestures. Support rotate gestures for touchscreens and trackpads. static ObjectProperty<String>; userPath. A path where additional files may be stored, such as extensions and log files. static BooleanProperty; useScrollGestures. Support scroll gestures for touchscreens and trackpads. static BooleanProperty; useSelectedColor. Use a specified color for highlighting selected objects in the viewer. static BooleanProperty; useSystemMenubar. Deprecated. static BooleanProperty; useTileBrush. Request that the brush tool automatically uses any available tiles, rather than creating 'circles' as normal. static BooleanProperty; useZoomGestures. Support zoom gestures for touchscreens and trackpads. static IntegerProperty; viewerBackgroundColor. Color to paint behind any image. static DoubleProperty; viewerGamma. Requested gamma value applied to the image in each viewer (for display only). static BooleanProperty; viewerInterpolateBilinear. Request that images are displayed in viewers using bilinear interpolation. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; PathPrefs.AutoUpdateType. Options for automatic updating checking of QuPath and/or extensions. static enum ; PathPrefs.DetectionTreeDisplayModes. Enum for different ways that detections can be displayed in lists and trees. static enum ; PathPrefs.FontSize. Enum to control font size. static enum ; PathPrefs.ImageTypeSetting. Enum defining how setting the image type should be handled for new images. Constructor Summary; Constructors. Co",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html:9379,avail,available,9379,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,1,['avail'],['available']
Availability,"teger>) - Method in class qupath.lib.images.servers.LabeledImageServer.Builder. Add multiple labels by classname, where the key represents a classname and the value ; represents the integer label that should be used for annotations of the given class. addLevel(double, int, int) - Method in class qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel.Builder. Add a new level by providing a downsample value, width and height. addLevel(int, int) - Method in class qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel.Builder. Add a new level based on level dimensions, estimating the corresponding downsample value as required. addLevel(ImageServerMetadata.ImageResolutionLevel) - Method in class qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel.Builder. Add a new level directly. addLevelByDownsample(double) - Method in class qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel.Builder. Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. addListener(PathObjectHierarchyListener) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Add a hierarchy change listener. addMeasurement(String, double) - Method in interface qupath.lib.measurements.MeasurementList. Deprecated.; v0.4.0 use MeasurementList.put(String, double) instead. addMeasurements(Collection<? extends PathObject>, String) - Method in class qupath.opencv.ml.pixel.PixelClassificationMeasurementManager. Add measurements to specified objects. addMeasurements(Collection<? extends PathObject>, PixelClassificationMeasurementManager, String) - Static method in class qupath.opencv.ml.pixel.PixelClassifierTools. Add measurements to specified objects from a PixelClassificationMeasurementManager. addMeasurementsToSelectedObjects(ImageData<BufferedImage>, PixelClassifier, String) - Static method in class qupath.opencv.ml.pixel.PixelClassifierTools. Add measurements to selected objects based upon the output o",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:20317,down,downsample,20317,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['down'],['downsample']
Availability,"tely run the provided runnable.; ; Note that no checkpoint is made automatically after completion, ; so you should generally print the output immediately, create a new checkpoint, or call stop(). Parameters:; runnable - the runnable to run; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. checkpointAndRun; public Timeit checkpointAndRun(String name,; Runnable runnable); throws UnsupportedOperationException; Create a checkpoint and immediately run the provided Runnable.; ; Note that no checkpoint is made automatically after completion, ; so you should generally print the output immediately, create a new checkpoint, or call stop(). Parameters:; name - the name of the checkpoint to create; runnable - the runnable to run; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. checkpointAndRun; public Timeit checkpointAndRun(String name,; Runnable runnable,; int nIterations); throws UnsupportedOperationException; Create a checkpoint and immediately run the provided Runnable nIterations times.; The purpose of this is to get better insights into the time required to run a self-contained block of code.; ; Note that no checkpoint is made automatically after completion of the final iteration, ; so you should generally print the output immediately, create a new checkpoint, or call stop(). Parameters:; name - base name of the checkpoint to create; the iteration number will be appended if nIterations > 1; runnable - the runnable to run; nIterations - the number of times to run the runnable; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. checkpoint; public Timeit checkpoint(); throws UnsupportedOperationException; Create a new checkpoint with a default name. Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. checkpoint; public Timeit checkpoint(String name); thr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:5719,checkpoint,checkpointAndRun,5719,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,3,['checkpoint'],"['checkpoint', 'checkpointAndRun']"
Availability,"tem.out.println(timeit);; ; . Finally, a Timeit can be used to repeatedly run the same code multiple times, and print the timings at the end.; ; ; var timeit = new Timeit(); .microseconds(); .checkpointAndRun(""Greeting"", () -> System.out.println(""Hello!""), 10); .summarizeCheckpoints(); .stop();; System.out.println(timeit);; ; . Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; Timeit.Checkpoint. Class representing a named checkpoint with a timestamp in nanoseconds. Constructor Summary; Constructors. Constructor; Description; Timeit();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Timeit; autoUnits();  ; Timeit; checkpoint(). Create a new checkpoint with a default name. Timeit; checkpoint(String name). Create a new checkpoint with the specified name. Timeit; checkpointAndRun(Runnable runnable). Create a checkpoint with the default name and immediately run the provided runnable. Timeit; checkpointAndRun(String name,; Runnable runnable). Create a checkpoint and immediately run the provided Runnable. Timeit; checkpointAndRun(String name,; Runnable runnable,; int nIterations). Create a checkpoint and immediately run the provided Runnable nIterations times. List<Timeit.Checkpoint>; getCheckpoints(). Get an list of all the checkpoints. int; getMaxDecimalPlaces(). Get the maximum number of decimal places when reporting timings. static void; main(String[] args);  ; Timeit; maxDecimalPlaces(int maxDP). Set the maximum number of decimal places when reporting timings ; using seconds or minutes. Timeit; microseconds(). Report timings in microseconds. Timeit; milliseconds(). Report timings in milliseconds. Timeit; minutes(). Report timings in minutes. Timeit; nanoseconds(). Report timings in nanoseconds. Timeit; seconds(). Report timings in seconds. Timeit; start(). Start the Timeit and create a checkpoint with the default name. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:2071,checkpoint,checkpoint,2071,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,1,['checkpoint'],['checkpoint']
Availability,"ter - ; Returns:. createUnmaskedObjectOutputHandler; static <S,; T,; U> OutputHandler<S,T,U> createUnmaskedObjectOutputHandler(OutputHandler.OutputToObjectConverter<S,T,U> converter); Create an output handler that can be used to add objects to the parent object.; This requires an OutputHandler.OutputToObjectConverter to convert the output to a list of objects.; ; This method does not apply any masking to the parent ROI, but assumed this has already been applied; elsewhere. Consequently, it can result in objects being created that extend beyond the ROI.; To avoid this, use createMaskAndSplitObjectOutputHandler(OutputToObjectConverter) or; #createMaskedObjectOutputHandler(OutputToObjectConverter)}. Type Parameters:; S - the image type; T - the mask type; U - the output type; Parameters:; converter - ; Returns:. createObjectOutputHandler; static <S,; T,; U> OutputHandler<S,T,U> createObjectOutputHandler(OutputHandler.OutputToObjectConverter<S,T,U> converter); Create an output handler that can be used to add objects to the parent object, applying the ROI mask.; This can result in objects with discontinuous ROIs.; This requires an OutputHandler.OutputToObjectConverter to convert the output to a list of objects. Type Parameters:; S - the image type; T - the mask type; U - the output type; Parameters:; converter - ; Returns:; See Also:. createMaskAndSplitObjectOutputHandler(OutputToObjectConverter). createMaskAndSplitObjectOutputHandler; static <S,; T,; U> OutputHandler<S,T,U> createMaskAndSplitObjectOutputHandler(OutputHandler.OutputToObjectConverter<S,T,U> converter); Create an output handler that can be used to add objects to the parent object, applying the ROI mask and; splitting objects with discontinuous ROIs.; This requires an OutputHandler.OutputToObjectConverter to convert the output to a list of objects. Type Parameters:; S - the image type; T - the mask type; U - the output type; Parameters:; converter - ; Returns:; See Also:. createObjectOutputHandler(OutputToO",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/OutputHandler.html:4855,mask,mask,4855,javadoc/docs/qupath/lib/experimental/pixels/OutputHandler.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/OutputHandler.html,1,['mask'],['mask']
Availability,"terChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.h",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1062920,down,downsample,1062920,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['down'],['downsample']
Availability,"ternal cache. T; getCachedTile(TileRequest tile). Get a cached tile, or null if the tile has not been cached. ImageChannel; getChannel(int channel). Request information for one channel (0-based index). T; getDefaultThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice and timepoint. double; getDownsampleForResolution(int level). Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. String; getPath(). Default implementation lazily calls createID() on demand. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Request the preferred downsamples from the image metadata. protected double; getThumbnailDownsampleFactor(int maxWidth,; int maxHeight);  ; TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Always returns false. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.l",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:2780,down,downsamples,2780,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,1,['down'],['downsamples']
Availability,"terpolation(ImageInterpolation); interpolationProperty(). Constructor Details. AbstractImageOverlay; protected AbstractImageOverlay(OverlayOptions options). Method Details. setInterpolation; public void setInterpolation(ImageInterpolation interpolation); Set the preferred method of interpolation to use for display. Parameters:; interpolation - . getInterpolation; public ImageInterpolation getInterpolation(); Get the preferred method of interpolation to use for display. Returns:. interpolationProperty; public ObjectProperty<ImageInterpolation> interpolationProperty(); The preferred method of interpolation to use for display. Returns:; See Also:. getInterpolation(); setInterpolation(ImageInterpolation). setInterpolation; protected void setInterpolation(Graphics2D g2d). paintOverlay; public void paintOverlay(Graphics2D g2d,; ImageRegion imageRegion,; double downsampleFactor,; ImageData<BufferedImage> imageData,; boolean paintCompletely); Description copied from interface: PathOverlay; Paint the overlay to a graphics object. The graphics object will have a transform applied to it, so the painting should; make use of coordinates in the original image space. Parameters:; g2d - Graphics2D object to which drawing should be performed. This should have any transform already applied to it.; imageRegion - The maximum image region that should be shown.; downsampleFactor - The downsample factor at which the overlay will be viewed. There is no need for rescaling according to; this value since it has already been applied to the Graphics2D as part of its AffineTransform, however; it may optionally be needed within the method e.g. to correct line thicknesses.; imageData - the ImageData associated with this overlay. If the overlay is being displayed on a viewer, this is the ImageData open ; within the viewer. Not all overlays require this, and it may be null.; paintCompletely - If true, the method is permitted to return without completely painting everything, for performance reasons. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/overlays/AbstractImageOverlay.html:3950,down,downsampleFactor,3950,javadoc/docs/qupath/lib/gui/viewer/overlays/AbstractImageOverlay.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/overlays/AbstractImageOverlay.html,2,['down'],"['downsample', 'downsampleFactor']"
Availability,"text - ; Returns:. warning; public static InfoMessage warning(String text); Create a warning message with static text. Parameters:; text - ; Returns:. warning; public static InfoMessage warning(ObservableValue<String> text,; ObservableNumberValue count); Create a warning message with a count. Parameters:; text - ; count - ; Returns:. warning; public static InfoMessage warning(ObservableNumberValue count); Create a warning message to show a count of warnings. Parameters:; count - ; Returns:. warning; public static InfoMessage warning(String text,; int count); Create a warning message with static text and a count. Parameters:; text - ; count - ; Returns:. error; public static InfoMessage error(ObservableValue<String> text); Create an error message. Parameters:; text - ; Returns:. error; public static InfoMessage error(String text); Create an error message with static text. Parameters:; text - ; Returns:. error; public static InfoMessage error(ObservableValue<String> text,; ObservableNumberValue count); Create an error message with a count. Parameters:; text - ; count - ; Returns:. error; public static InfoMessage error(String text,; int count); Create an error message with static text and a count. Parameters:; text - ; count - ; Returns:. error; public static InfoMessage error(ObservableNumberValue count); Create a error message to show a count of errors. Parameters:; count - ; Returns:. textProperty; public ReadOnlyStringProperty textProperty(); Read only property containing the message text. Returns:; See Also:. getText(). getText; public String getText(); Text of the message. Returns:. countProperty; public ReadOnlyObjectProperty<Number> countProperty(); Read only property containing any count associated with the text (may be null). Returns:; See Also:. getCount(). getCount; public int getCount(); Counts associated with the message, or -1 if the count is null. Returns:. getMessageType; public InfoMessage.MessageType getMessageType(); Type of the message. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/InfoMessage.html:5486,error,error,5486,javadoc/docs/qupath/lib/gui/actions/InfoMessage.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/InfoMessage.html,7,['error'],"['error', 'errors']"
Availability,"th 0 values in the mask will be skipped.; bounds - optional rectangle defining the bounds of the raster to search.; If not null, this is used with the (also optional) mask to restrict the pixels that are used.; This can give substantial performance improvements for small masked regions embedded in larger images.; Returns:; the updated histogram counts; See Also:. computeUnsignedIntHistogram(WritableRaster, long[], WritableRaster). computeArgMaxHistogram; public static long[] computeArgMaxHistogram(WritableRaster raster,; long[] counts,; WritableRaster rasterMask); Create a histogram that identifies the channels (bands) of an image with the maximum values according to the argmax criterion. Parameters:; raster - the multi-band raster containing values to check; counts - existing histogram if it should be updated, or null if a new histogram should be created. The length should ; match the number of bands in the raster.; rasterMask - optional single-channel mask; if not null, corresponding pixels with 0 values in the mask will be skipped; Returns:; See Also:. computeArgMaxHistogram(WritableRaster, long[], WritableRaster, Rectangle). computeArgMaxHistogram; public static long[] computeArgMaxHistogram(WritableRaster raster,; long[] counts,; WritableRaster rasterMask,; Rectangle bounds); Create a histogram that identifies the channels (bands) of an image with the maximum values according to the argmax criterion, ; with an optional bounding rectangle. Parameters:; raster - the multi-band raster containing values to check; counts - existing histogram if it should be updated, or null if a new histogram should be created. The length should ; match the number of bands in the raster.; rasterMask - optional single-channel mask; if not null, corresponding pixels with 0 values in the mask will be skipped; bounds - optional rectangle defining the bounds of the raster to search.; If not null, this is used with the (also optional) mask to restrict the pixels that are used.; This can g",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html:12329,mask,mask,12329,javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,2,['mask'],['mask']
Availability,"th painting PathObjects. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static Stroke; getCachedStroke(double thickness). Get a BasicStroke with the specified thickness. static void; paintConnections(PathObjectConnections connections,; PathObjectHierarchy hierarchy,; Graphics2D g2d,; Color color,; double downsampleFactor,; ImagePlane plane). Paint connections between objects (e.g. static void; paintHandles(List<Point2> handles,; Graphics2D g2d,; double minHandleSize,; double maxHandleSize,; Color colorStroke,; Color colorFill). Paint the handles onto a Graphics object, if we have a suitable (non-point) ROI. static void; paintHandles(RoiEditor roiEditor,; Graphics2D g2d,; double minHandleSize,; double maxHandleSize,; Color colorStroke,; Color colorFill). Paint the handles onto a Graphics object, if we have a suitable (non-point) ROI. static boolean; paintObject(PathObject pathObject,; Graphics2D g,; OverlayOptions overlayOptions,; PathObjectSelectionModel selectionModel,; double downsample). Paint an object (or, more precisely, its ROI). static void; paintShape(Shape shape,; Graphics2D g2d,; Color colorStroke,; Stroke stroke,; Color colorFill). Paint the specified shape with specified stroke and fill colors. static void; paintSpecifiedObjects(Graphics2D g2d,; Collection<? extends PathObject> pathObjects,; OverlayOptions overlayOptions,; PathObjectSelectionModel selectionModel,; double downsample). Paint the specified objects. static void; paintTMAGrid(Graphics2D g2d,; TMAGrid tmaGrid,; OverlayOptions overlayOptions,; PathObjectSelectionModel selectionModel,; double downsample). Paint the specified tissue microarray grid. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. paintSpecifiedObjects; public static void paintSpecifiedObjects(Graphics2D g2d,; Collection<? extends PathObject> pathObje",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/PathObjectPainter.html:1591,down,downsample,1591,javadoc/docs/qupath/lib/gui/viewer/PathObjectPainter.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/PathObjectPainter.html,1,['down'],['downsample']
Availability,"th,; int height,; int z,; int t); throws IOException; Read a 2D(+C) image region for a specified z-plane and timepoint.; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; z - index for the z-position; t - index for the timepoint; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest). readRegion; default T readRegion(double downsample,; int x,; int y,; int width,; int height); throws IOException; Read a 2D(+C) image region from the default ImagePlane (i.e. z and t are 0).; Coordinates and bounding box dimensions are in pixel units, at the full image resolution ; (i.e. when downsample = 1).; ; All channels are always returned. Parameters:; downsample - downsample factor for the region; x - x coordinate of the top left of the region bounding box; y - y coordinate of the top left of the region bounding box; width - bounding box width; height - bounding box height; Returns:; pixels for the region being requested; Throws:; IOException; Since:; v0.4.0; See Also:. readRegion(RegionRequest); readRegion(double, int, int, int, int, int, int). getServerType; String getServerType(); A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). Returns:. getAssociatedImageList; List<String> getAssociatedImageList(); Get a list of 'associated images', e.g. thumbnails or slide overview images.; ; Each associated image is simply a T that does not warrant (or require) a full ImageServer, and most likely would never be analyzed. Returns:; See Also:. getAssociatedImage(String). getAssociatedImage; T getAssociatedImage(String name);",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:10908,down,downsample,10908,javadoc/docs/qupath/lib/images/servers/ImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html,1,['down'],['downsample']
Availability,"th.lib.gui.scripting.languages.PropertiesLanguage;  ; getAutoCompletor() - Method in class qupath.lib.gui.scripting.languages.XmlLanguage;  ; getAutoCompletor() - Method in class qupath.lib.gui.scripting.languages.YamlLanguage;  ; getAutoCompletor() - Method in class qupath.lib.scripting.languages.ScriptLanguage. Get the ScriptAutoCompletor object that takes care of this language's auto-completion. getAutomateActions() - Method in class qupath.lib.gui.QuPathGUI. Get the automated actions associated with this QuPath instance. getAvailableFeatures(Collection<? extends PathObject>) - Static method in class qupath.lib.objects.PathObjectTools. Get a set containing the names of all measurements found in the measurement lists of a specified object collection. getAvailableLanguages() - Static method in class qupath.lib.gui.scripting.languages.ScriptLanguageProvider. Get the available script languages. getAvailablePathClasses() - Method in class qupath.lib.gui.QuPathGUI. Get an observable list of available PathClasses. getAvailableSyntaxes() - Static method in class qupath.lib.gui.scripting.syntax.ScriptSyntaxProvider. Get the available script syntaxes. getAvailableTools() - Method in class qupath.lib.gui.viewer.tools.ExtendedPathTool;  ; getAveragedPixelSize() - Method in class qupath.lib.images.servers.ImageServerMetadata. Get the averaged pixel size in microns, if available - or Double.NaN otherwise. getAveragedPixelSize() - Method in class qupath.lib.images.servers.PixelCalibration. Get an average of PixelCalibration.getPixelWidth() and PixelCalibration.getPixelHeight(). getAveragedPixelSizeMicrons() - Method in class qupath.lib.images.servers.PixelCalibration. Get the average of the pixel width and height in microns if possible, or Double.NaN if the pixel size is not available. getBackingListEntries() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Access the underlying entries, for which getEntries provides a filtered view. getBaseClass() - Meth",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:333228,avail,available,333228,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"th.lib.images.servers.ImageServerMetadata.ImageResolutionLevel. Get the downsample factor for this level. getDownsample() - Method in class qupath.lib.images.servers.TileRequest. Get the downsample value for this tile. getDownsample() - Method in class qupath.lib.regions.RegionRequest. Get the requested downsample factor, defining the resolution at which pixels should be returned. getDownsampleFactor() - Method in class qupath.lib.gui.viewer.QuPathViewer. Get the current downsample factor. getDownsampleFactor() - Method in interface qupath.lib.images.PathImage. Get the downsample factor originally used when obtaining the image from an ImageServer; will be 1 if the image is full-resolution. getDownsampleFactor(ImageServer<?>, double) - Static method in class qupath.lib.images.servers.ServerTools. Calculate a downsample factor for a server given a preferred pixel size. getDownsampleForLevel(int) - Method in class qupath.lib.images.servers.ImageServerMetadata. Get the downsample factor for a specific resolution level. getDownsampleForResolution(int) - Method in class qupath.lib.images.servers.AbstractImageServer;  ; getDownsampleForResolution(int) - Method in interface qupath.lib.images.servers.ImageServer. Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. getDummyColorModel(int) - Static method in class qupath.lib.color.ColorModelFactory. Get a dummy ColorModel instance. getEdgeMax() - Method in class qupath.lib.analysis.stats.Histogram. Get the maximum edge of the histogram. getEdgeMin() - Method in class qupath.lib.analysis.stats.Histogram. Get the minimum edge of the histogram. getEdgeRange() - Method in class qupath.lib.analysis.stats.Histogram. Get the histogram edge range, defined as the maximum edge - the minimum edge. getEigenvalues(boolean) - Method in interface qupath.opencv.tools.MultiscaleFeatures.Hessian. Get the eigenvalues, ranked from highes",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:386686,down,downsample,386686,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['down'],['downsample']
Availability,"th; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from int",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:11021,avail,available,11021,javadoc/docs/qupath/lib/roi/PointsROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html,1,['avail'],['available']
Availability,"thObject convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane); Create a PathObject for a specific ImageJ Roi. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to translate the Roi; should be Calibration.yOrigin if available, or 0 otherwise; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; plane - the specific plane to use for the QuPath ROI; if null, the ImageJ Roi position properties will be used instead, where possible; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, Function, ImagePlus). convertToPathObject; public static PathObject convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp); Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; downsampleFactor - the downsample factor used for rescaling (or 1.0 for no rescaling); creator - a function; imp - the ImagePlus associated with this Roi; it is used to determine the xOrigin, yOrigin and image plane; Returns:; a PathObject or null if no object could be created (e.g. the ImageJ roi is null or incompatible); Since:; v0.4.0; See Also:. convertToPathObject(Roi, double, double, double, Function, ImagePlane). convertToAnnotation; public static PathObject convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. Parameters:; roi - the ImageJ ROI; xOrigin - the x-origin to translate the Roi; should be Calibration.xOrigin if available, or 0 otherwise; yOrigin - the y-origin to ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:12774,down,downsampleFactor,12774,javadoc/docs/qupath/imagej/tools/IJTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html,1,['down'],['downsampleFactor']
Availability,"the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Retu",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9094,down,downsample,9094,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,2,['down'],['downsample']
Availability,"the end.; ; ; var timeit = new Timeit(); .microseconds(); .checkpointAndRun(""Greeting"", () -> System.out.println(""Hello!""), 10); .summarizeCheckpoints(); .stop();; System.out.println(timeit);; ; . Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; Timeit.Checkpoint. Class representing a named checkpoint with a timestamp in nanoseconds. Constructor Summary; Constructors. Constructor; Description; Timeit();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Timeit; autoUnits();  ; Timeit; checkpoint(). Create a new checkpoint with a default name. Timeit; checkpoint(String name). Create a new checkpoint with the specified name. Timeit; checkpointAndRun(Runnable runnable). Create a checkpoint with the default name and immediately run the provided runnable. Timeit; checkpointAndRun(String name,; Runnable runnable). Create a checkpoint and immediately run the provided Runnable. Timeit; checkpointAndRun(String name,; Runnable runnable,; int nIterations). Create a checkpoint and immediately run the provided Runnable nIterations times. List<Timeit.Checkpoint>; getCheckpoints(). Get an list of all the checkpoints. int; getMaxDecimalPlaces(). Get the maximum number of decimal places when reporting timings. static void; main(String[] args);  ; Timeit; maxDecimalPlaces(int maxDP). Set the maximum number of decimal places when reporting timings ; using seconds or minutes. Timeit; microseconds(). Report timings in microseconds. Timeit; milliseconds(). Report timings in milliseconds. Timeit; minutes(). Report timings in minutes. Timeit; nanoseconds(). Report timings in nanoseconds. Timeit; seconds(). Report timings in seconds. Timeit; start(). Start the Timeit and create a checkpoint with the default name. Timeit; start(String name). Start the Timeit and create a checkpoint with the specified name. Timeit; stop(). Stop the Timeit. Timeit",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:2215,checkpoint,checkpoint,2215,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,1,['checkpoint'],['checkpoint']
Availability,"the image space. Parameters:; x - x coordinate, related to getView(); y - y coordinate, related to getView(); pointDest - object in which to store the corresponding image point (will be set and returned if non-null); constrainToBounds - if true, clip the image coordinate computed from x and y to fit within the image bounds; Returns:; a Point2D referring to the pixel coordinate corresponding to the component coordinate defined by x and y;. imagePointToComponentPoint; public Point2D imagePointToComponentPoint(Point2D point,; Point2D pointDest,; boolean constrainToBounds); Convert a coordinate from the the full-resolution image into the corresponding pixel coordinate in the viewer - optionally constraining it to any viewer component bounds.; A point object can optionally be provided into which the location is written (may be the same as the image point object). Parameters:; point - ; pointDest - ; constrainToBounds - ; Returns:. centerImage; public void centerImage(); Center the current image in the viewer, while keeping the same downsample factor.; This does nothing if no image is currently open. getObjectClassificationString; public String getObjectClassificationString(double x,; double y); Get a string representing the object classification x & y location in the viewer component,; or an empty String if no object is found. Parameters:; x - x-coordinate in the component space (not image space); y - y-coordinate in the component space (not image space); Returns:; a String to display representing the object classification. getImageObjectClassificationString; public String getImageObjectClassificationString(double x,; double y); Get a string representing the object classification x & y location in the viewer component,; or an empty String if no object is found. Parameters:; x - x-coordinate in the image space (not the component/viewer space); y - y-coordinate in the image space (not the component/viewer space); Returns:; a String to display representing the object classi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html:32600,down,downsample,32600,javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,1,['down'],['downsample']
Availability,"the value of this parameter, constraining it to be within any lower and upper bounds if necessary. Parameters:; lastValue - ; Returns:. setDoubleLastValue; public abstract boolean setDoubleLastValue(double val); A class for setting the numeric value as a double (subclasses should convert this as needed). Parameters:; val - ; Returns:. isValidInput; public boolean isValidInput(S value); Numbers are considered valid if they are not NaN. Parameters:; value - ; Returns:; true if the value would be valid, false otherwise. setStringLastValue; public boolean setStringLastValue(Locale locale,; String value); Description copied from interface: Parameter; Set last value using a string; implementing classes may need to parse this. Parameters:; locale - ; value - ; Returns:. setHidden; public void setHidden(boolean hidden); Description copied from interface: Parameter; Mark that a parameter should not be displayed to a user.; This is useful, for example, if a parameter list changes the parameters to be displayed depending upon; the image available or current settings, e.g. using different parameters when the pixel size is known in microns. Specified by:; setHidden in interface Parameter<S>; Parameters:; hidden - . isHidden; public boolean isHidden(); Description copied from interface: Parameter; Test is the 'hidden' flag is set for the parameter. Specified by:; isHidden in interface Parameter<S>; Returns:. getDefaultValue; public S getDefaultValue(); Description copied from interface: Parameter; Get a default value to use if the Parameter has not been otherwise set. Specified by:; getDefaultValue in interface Parameter<S>; Returns:. getValue; public S getValue(); Description copied from interface: Parameter; Get the current set value (may be null). Specified by:; getValue in interface Parameter<S>; Returns:; See Also:. Parameter.setValue(S); Parameter.getValueOrDefault(). resetValue; public void resetValue(); Description copied from interface: Parameter; Set last value to null (",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html:5855,avail,available,5855,javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/NumericParameter.html,1,['avail'],['available']
Availability,"thod in class qupath.lib.gui.prefs.PathPrefs. Classification that should automatically be applied to all new annotations. autoSetDisplayRange(ChannelDisplayInfo) - Method in class qupath.lib.display.ImageDisplay. Automatically set the display range for a channel, using the default saturation defined in PathPrefs.autoBrightnessContrastSaturationPercentProperty(). autoSetDisplayRange(ChannelDisplayInfo, double) - Method in class qupath.lib.display.ImageDisplay. Automatically set the display range for a channel. autoUnits() - Method in class qupath.lib.common.Timeit;  ; autoUpdate - Variable in class qupath.lib.gui.panes.PreferencePane.AppearancePreferences;  ; autoUpdate - Variable in class qupath.lib.gui.panes.PreferencePane.GeneralPreferences;  ; autoUpdateCheckProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Check for updates when launching QuPath, if possible. availableChannels() - Method in class qupath.lib.display.ImageDisplay. ObservableList containing the channels currently available for display. availableFontsProperty() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Get a list of available fonts. availableStylesProperty() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Get the current available styles as an observable list. averageChannelProject() - Method in class qupath.lib.images.servers.TransformedServerBuilder. Perform an average (mean) projection of the channels. awaitCompletion() - Method in class qupath.lib.plugins.AbstractTaskRunner. Await the completion of currently-running tasks, notifying any listener if necessary. AwtTools - Class in qupath.lib.awt.common. A collection of static methods useful when working with AWT shapes and ImageRegions. B. backend(int) - Method in class qupath.opencv.dnn.OpenCVDnn.Builder. Specify the backend, e.g. backgroundColor - Variable in class qupath.lib.gui.panes.PreferencePane.ViewerPreferences;  ; backgroundColor(int, boolean) - Method in class qupath.lib.gui.im",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:51178,avail,available,51178,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"thod. getPixelValue(int, ColorTransformer.ColorTransformMethod, ColorDeconvolutionStains) - Static method in class qupath.lib.color.ColorTransformer. Get the value of a single packed RGB pixel after applying a specified color transform method, with color deconvolution stains provided. getPixelWidth() - Method in class qupath.lib.images.servers.PixelCalibration. Get the numeric value representing the pixel width, in the stored units. getPixelWidthMicrons() - Method in class qupath.lib.images.servers.ImageServerMetadata. Get the pixel width in microns, if available - or Double.NaN otherwise. getPixelWidthMicrons() - Method in class qupath.lib.images.servers.PixelCalibration. Get the pixel width in microns, or Double.NaN if this is unknown. getPixelWidthUnit() - Method in class qupath.lib.images.servers.PixelCalibration. Get a String representation of the preferred pixel width unit. getPlaceholderText() - Method in class qupath.lib.gui.panes.SimpleImageViewer. Get the placeholder text to show if no image is available. getPlainStyling(String) - Static method in class qupath.lib.gui.scripting.richtextfx.stylers.ScriptStylerProvider. Get simple styling that does not apply any classes. getPlane() - Method in class qupath.lib.images.servers.TileRequest. Deprecated.; v0.4.0 use TileRequest.getImagePlane() instead (changed for better consistency with other classes). getPlane() - Method in class qupath.lib.regions.ImageRegion. Deprecated.; v0.4.0 use ImageRegion.getImagePlane() instead (changed for better consistency with other classes). getPlane(int, int) - Static method in class qupath.lib.regions.ImagePlane. Returns an ImagePlus, where the z-slice and time point can be specified and ; channel is ignored (i.e. getPlane(ImageRegion) - Static method in class qupath.lib.regions.ImagePlane. Returns an ImagePlane with channel -1 and z and t set from an existing ImageRegion. getPlane(ROI) - Static method in class qupath.lib.regions.ImagePlane. Returns an ImagePlane with channel -1,",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:485502,avail,available,485502,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"through this editor. Returns:. ensureHandlesUpdated; public void ensureHandlesUpdated(); In the event that the current ROI has been modified elsewhere (which generally it shouldn't be); request the handles to be recomputed to avoid inconsistency. getHandles; public List<Point2> getHandles(); Get all the handles for the current ROI being edited, or an empty list if no handles are available. Returns:. hasROI; public boolean hasROI(); Returns true if this editor currently has a ROI. Returns:. getROI; public ROI getROI(); Retrieve the ROI currently being edited (may be null). Returns:. hasActiveHandle; public boolean hasActiveHandle(); Returns true if a handle is currently active, for example being reposition. Returns:; See Also:. getHandles(). resetActiveHandle; public void resetActiveHandle(); Ensure that no handle is active. requestNewHandle; public ROI requestNewHandle(double x,; double y); Request an updated ROI with a new handle inserted - useful e.g. when drawing a polygon. Parameters:; x - ; y - ; Returns:. grabHandle; public boolean grabHandle(double x,; double y,; double maxDist,; boolean shiftDown); Try to grab a ROI handle.; This will fail (return false, with an error logged) if isTranslating() returns true. Parameters:; x - ; y - ; maxDist - define the distance to search for the nearest handle; shiftDown - determined from a MouseEvent, this may optionally be used to control how the handle is modified ; (e.g. to enforce a square bounding box for a rectangle or ellipse).; Returns:. setActiveHandlePosition; public ROI setActiveHandlePosition(double x,; double y,; double minDisplacement,; boolean shiftDown); If a handle has been grabbed, update its displacement. Parameters:; x - ; y - ; minDisplacement - if > 0, smaller movements will be discarded to avoid unnecessary work.; shiftDown - determined from a MouseEvent, this may optionally be used to control how the handle is modified ; (e.g. to enforce a square bounding box for a rectangle or ellipse).; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiEditor.html:6389,error,error,6389,javadoc/docs/qupath/lib/roi/RoiEditor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiEditor.html,1,['error'],['error']
Availability,"tic TypeAdapterFactory; getServerBuilderFactory(). Get a TypeAdapterFactory to handle ServerBuilders. static ImageServer<BufferedImage>; pyramidalize(ImageServer<BufferedImage> server,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid. static ImageServer<BufferedImage>; pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServers; public ImageServers(). Method Details. getServerBuilderFactory; public static TypeAdapterFactory getServerBuilderFactory(); Get a TypeAdapterFactory to handle ServerBuilders. Returns:. pyramidalize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one resolution level); downsamples - optional array giving the downsamples of the new pyramid. If not provided,; Returns:. pyramidalizeTiled; public static ImageServer<BufferedImage> pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes.; This does not involve writing any new image, and may be rather processor and memory-intensive as high-resolution ; tiles must be accessed to fulfil low-resolution requests.; However, tile caching means that after tiles have b",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:3003,down,downsamples,3003,javadoc/docs/qupath/lib/images/servers/ImageServers.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html,1,['down'],['downsamples']
Availability,"tify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFullResolutionLevel(); Add the full-resolution image as a level of the pyramid.; It is not required that this form part of the pyramid in cases where this image pyramid might ; be used to provide a smaller overlay of a larger image, and not itself contain ; pixels at the highest resolution. Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(double downsample,; int levelWidth,; int levelHeight); Add a new level by providing a downsample value, width and height.; This avoids relying on any rounding decisions made when specifying the dimensions or downsample value only. Parameters:; downsample - ; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(int levelWidth,; int levelHeight); Add a new level based on level dimensions, estimating the corresponding downsample value as required. Parameters:; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(ImageServerMetadata.ImageResolutionLevel level); Add a new level directly. Parameters:; level - ; Returns:. build; public List<ImageServerMetadata.ImageResolutionLevel> build(); Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:3291,down,downsample,3291,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,5,['down'],['downsample']
Availability,"timings in microseconds. Timeit; milliseconds(). Report timings in milliseconds. Timeit; minutes(). Report timings in minutes. Timeit; nanoseconds(). Report timings in nanoseconds. Timeit; seconds(). Report timings in seconds. Timeit; start(). Start the Timeit and create a checkpoint with the default name. Timeit; start(String name). Start the Timeit and create a checkpoint with the specified name. Timeit; stop(). Stop the Timeit. Timeit; summarizeCheckpoints(). Request that checkpoints are summarized in the toString() method. Timeit; summarizeCheckpoints(boolean summarize). Optionally request that checkpoints are summarized in the toString() method. String; toString(). Returns a snapshot string representation of the Timeit's status. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. Timeit; public Timeit(). Method Details. start; public Timeit start(); throws UnsupportedOperationException; Start the Timeit and create a checkpoint with the default name.; ; Note that calling this method is not essential, because the Timeit will automatically ; be started when the first checkpoint is created. Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has previously been started; See Also:. start(String); checkpoint(). start; public Timeit start(String name); throws UnsupportedOperationException; Start the Timeit and create a checkpoint with the specified name.; ; Note that calling this method is not essential, because the Timeit will automatically ; be started when the first checkpoint is created. Parameters:; name - of the checkpoint; if null, a default name will be generated; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has previously been started; See Also:. start(); checkpoint(String). checkpointAndRun; public Timeit checkpointAndRun(Runnable runnable); throws UnsupportedOperationException; Create a checkpoint w",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:3829,checkpoint,checkpoint,3829,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,1,['checkpoint'],['checkpoint']
Availability,"ting the numeric value as a double (subclasses should convert this as needed). setDownsample(double) - Method in class qupath.lib.gui.commands.MiniViewers.MiniViewerManager. Set the downsample to use within the mini viewers. setDownsampleFactor(double) - Method in class qupath.lib.gui.viewer.QuPathViewer. Set the downsample factor for this viewer. setDownsampleFactor(double, double, double) - Method in class qupath.lib.gui.viewer.QuPathViewer. Set downsample factor, so that the specified coordinate in the image space is not shifted in the viewer afterwards. setDownsampleFactor(double, double, double, boolean) - Method in class qupath.lib.gui.viewer.QuPathViewer. Set downsample factor, so that the specified coordinate in the image space is not shifted in the viewer afterwards. setError() - Static method in class qupath.lib.gui.logging.LogManager. Set the root log level to LogLevel.ERROR. setErrorWriter(Writer) - Method in class qupath.lib.scripting.ScriptParameters.Builder. Set the main error writer. setExcludeOutsideRange(boolean) - Method in class qupath.lib.gui.tools.MeasurementMapper. Specify whether out-of-range values should be excluded. setExpandToWindow(boolean) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Control whether the image should be allowed to expand beyond its preferred width and height to fill the window. setFeatureOp(ImageDataOp) - Method in class qupath.process.gui.commands.ml.PixelClassifierTraining. Set the ImageDataOp used to calculate features. setFile(File) - Method in class qupath.lib.gui.viewer.recording.ViewTracker. Set the file for this ViewTracker. setFile(File) - Method in class qupath.lib.scripting.ScriptParameters.Builder;  ; setFilesOnly(boolean) - Method in class qupath.lib.images.servers.bioformats.BioFormatsServerOptions. Set whether Bio-Formats should support only local files (rather than any URL). setFillAnnotations(boolean) - Method in class qupath.lib.gui.viewer.OverlayOptions. Show annotation objects 'filled' in ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:925281,error,error,925281,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['error'],['error']
Availability,"tion. Type Parameters:; T - ; Parameters:; subtype - ; name - . builder; public static OpenCVDnn.Builder builder(String modelPath); Initiative building and configuring an OpenCVDnn.; ; Note that DnnModels.buildModel(DnnModelParams) should generally be used instead ; to create an arbitrary DnnModel, since it can potentially use different libraries ; or frameworks. Parameters:; modelPath - ; Returns:; See Also:. DnnModels.buildModel(DnnModelParams). isCudaAvailable; public static boolean isCudaAvailable(); Query whether CUDA is reported as available by OpenCV.; If it is, it will be used by default until setUseCuda(boolean) is used to turn if off. Returns:. setUseCuda; public static void setUseCuda(boolean requestUseCuda); Request that CUDA is used.; This will be ignored if isCudaAvailable() returns false, therefore the main purpose of ; this method is to disable the use of CUDA if it would otherwise be employed. Parameters:; requestUseCuda - . useCuda; public static boolean useCuda(); Returns true if CUDA is available and requested.; Classes that could potentially use CUDA should query this request before attempting to use it. Returns:; true if CUDA should be used, false otherwise. getOutputLayerNames; public static List<String> getOutputLayerNames(Net net); Get the names of all unconnected output layers. Parameters:; net - ; Returns:. getOutputLayers; public static Map<String,DnnShape> getOutputLayers(Net net,; DnnShape... inputShape); Get the names of all unconnected output layers. Parameters:; net - ; inputShape - ; Returns:. parseLayers; public static List<DnnTools.DNNLayer> parseLayers(Net net,; int width,; int height,; int channels,; int batchSize); Parse the layers for a Net, which allows inspection of names and sizes. Parameters:; net - the Net to parse; width - input width; height - input height; channels - input channels; batchSize - input batch size; Returns:. parseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:6270,avail,available,6270,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['avail'],['available']
Availability,"tionAccelerationProperty. getNavigationAccelerationProperty; public static boolean getNavigationAccelerationProperty(); Get whether to apply the navigation acceleration (& deceleration) effects or not. Returns:. skipMissingCoresProperty; public static BooleanProperty skipMissingCoresProperty(); Skip ('jump over') missing cores when navigating through TMA grids. Returns:; skipMissingCoresProperty. getSkipMissingCoresProperty; public static boolean getSkipMissingCoresProperty(); Return whether the viewer skips missing TMA cores when navigating TMA grids ; with arrow keys. Returns:. getShowAllRGBTransforms; public static boolean getShowAllRGBTransforms(); Request that all available color transforms are shown for RGB images. Returns:. scriptsPathProperty; public static StringProperty scriptsPathProperty(); Path to a directory containing scripts for quick-access through the user interface. Returns:. useTileBrushProperty; public static BooleanProperty useTileBrushProperty(); Request that the brush tool automatically uses any available tiles, rather than creating 'circles' as normal. Returns:. selectionModeProperty; public static BooleanProperty selectionModeProperty(); Convert drawing tools to select objects, rather than creating new objects. Returns:. clipROIsForHierarchyProperty; public static BooleanProperty clipROIsForHierarchyProperty(); Request ROIs to be clipped and inserted as the right place in the hierarchy when drawing ; (to prevent overlapping ROIs being created accidentally). Returns:. showExperimentalOptionsProperty; public static BooleanProperty showExperimentalOptionsProperty(); Flag to indicate that menu items marked 'experimental' should be shown to the user. Returns:. showTMAOptionsProperty; public static BooleanProperty showTMAOptionsProperty(); Flag to indicate that the TMA menu should be shown to the user - only relevant when working with Tissue Microarrays. Returns:. showLegacyOptionsProperty; public static BooleanProperty showLegacyOptionsProperty(",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html:49003,avail,available,49003,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,1,['avail'],['available']
Availability,"tionModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVModelObjectClassifier; public OpenCVModelObjectClassifier(PathObjectFilter filter,; OpenCVDnn model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is u",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html:3168,down,downsample,3168,javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html,1,['down'],['downsample']
Availability,"tional rectangle defining the bounds of the raster to search.; If not null, this is used with the (also optional) mask to restrict the pixels that are used.; This can give substantial performance improvements for small masked regions embedded in larger images.; Returns:; See Also:. computeArgMaxHistogram(WritableRaster, long[], WritableRaster). computeAboveThresholdCounts; public static long computeAboveThresholdCounts(WritableRaster raster,; int band,; double threshold,; WritableRaster rasterMask); Count the number of above-threshold pixels in a specified band of a raster, with optional mask. Parameters:; raster - the multi-band raster containing values to check; band - the band (channel) to consider; threshold - threshold value; pixels with values > threshold this will be counted; rasterMask - optional single-channel mask; if not null, corresponding pixels with 0 values in the mask will be skipped; Returns:; See Also:. computeAboveThresholdCounts(WritableRaster, int, double, WritableRaster, Rectangle). computeAboveThresholdCounts; public static long computeAboveThresholdCounts(WritableRaster raster,; int band,; double threshold,; WritableRaster rasterMask,; Rectangle bounds); Count the number of above-threshold pixels in a specified band of a raster, with optional mask and/or bounding rectangle. Parameters:; raster - the multi-band raster containing values to check; band - the band (channel) to consider; threshold - threshold value; pixels with values > threshold this will be counted; rasterMask - optional single-channel mask; if not null, corresponding pixels with 0 values in the mask will be skipped; bounds - optional rectangle defining the bounds of the raster to search.; If not null, this is used with the (also optional) mask to restrict the pixels that are used.; This can give substantial performance improvements for small masked regions embedded in larger images.; Returns:; See Also:. computeAboveThresholdCounts(WritableRaster, int, double, WritableRaster). ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html:14480,mask,mask,14480,javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,5,['mask'],"['mask', 'masked']"
Availability,"tions;  ; TMAScoreImporter. Helper class for importing data in connection with TMA slides. TMASummaryViewer; Deprecated.; since v0.4.0. ToolManager. Manage (drawing) tool selection in a QuPath UI. TransformedServerBuilder. Helper class for creating an ImageServer that applies one or more transforms to another (wrapped) ImageServer. TransformingImageServer<T>. An ImageServer implementation used to apply transforms to another ImageServer. UndoRedoManager. Helper class to add undo/redo support to QuPath. UpdateChecker. Helper class to query for updates using GitHub's web API. UpdateChecker.ReleaseVersion. Class to represent a release version. UpdateUrisCommand<T>. Fix broken URIs by using relative paths or prompting the user to select files. UriResource. Interface for objects that depend upon URIs. UriUpdater<T>. Helper class for updating URIs, for example whenever files have moved or projects have been transferred between computers. UriUpdater.SingleUriItem. Wrapper for a URI, providing access to a Path if available. UriUpdater.UriStatus. Enum representing the status of a URI, i.e. Urls. Class to return core QuPath URLs centrally. UserDirectoryManager. Helper class for managing a user directory, and associated subdirectories. Version. Helper class for working with semantic versioning. ViewerActions. Actions that interact with one or more viewers. ViewerManager. Class to manage multiple QuPathViewer instances in a UI region. ViewerPlusDisplayOptions. A group of properties determining what should be displayed for each viewer. ViewMenuActions;  ; ViewTracker. Default ViewTracker implementation. ViewTrackerControlPane. Panel for viewing ViewTracker controls. ViewTrackerDataMap. Class for storing the values of a data map as well as generating a proper BufferedImage with the appropriate pixel type. WandToolEventHandler. Wand tool, which acts rather like the brush - except that it expands regions ; (sometimes rather too eagerly?) based upon local pixel values. WandToolEventH",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:59785,avail,available,59785,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['avail'],['available']
Availability,"tionsMenu(QuPathGUI qupath,; Menu menu); Populate a Menu with standard options to operate on selected annotation objects. Parameters:; qupath - ; menu - ; Returns:. populateAnnotationsMenu; public static ContextMenu populateAnnotationsMenu(QuPathGUI qupath,; ContextMenu menu); Populate a ContextMenu with standard options to operate on selected annotation objects. Parameters:; qupath - ; menu - ; Returns:. installRangePrompt; public static void installRangePrompt(Slider slider); Install a mouse click listener to prompt the user to input min/max values for a slider. Parameters:; slider - ; See Also:. promptForSliderRange(Slider). promptForSliderRange; public static boolean promptForSliderRange(Slider slider); Prompt the user to input min/max values for a slider. Parameters:; slider - ; Returns:; true if the user may have made changes, false if they cancelled the dialog. getScaledRGBInstance; public static WritableImage getScaledRGBInstance(BufferedImage img,; int targetWidth,; int targetHeight); Get a scaled (RGB or ARGB) image, achieving reasonable quality even when scaling down by a considerably amount.; ; Code is based on https://today.java.net/article/2007/03/30/perils-imagegetscaledinstance. Parameters:; img - ; targetWidth - ; targetHeight - ; Returns:. createRecentItemsMenu; public static Menu createRecentItemsMenu(String menuTitle,; ObservableList<URI> recentItems,; Consumer<URI> consumer); Create a menu that displays recent items, stored in the form of URIs, using default text to show for the menu item. Parameters:; menuTitle - ; recentItems - ; consumer - ; Returns:. createRecentItemsMenu; public static Menu createRecentItemsMenu(String menuTitle,; ObservableList<URI> recentItems,; Consumer<URI> consumer,; Function<URI,String> menuitemText); Create a menu that displays recent items, stored in the form of URIs, customizing the text displayed for the menu items. Parameters:; menuTitle - ; recentItems - ; consumer - ; menuitemText - ; Returns:. promptForParentO",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tools/GuiTools.html:14902,down,down,14902,javadoc/docs/qupath/lib/gui/tools/GuiTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tools/GuiTools.html,1,['down'],['down']
Availability,"tln(timeit);; ; . Checkpoints can also be added to output times for individual stages:; ; var timeit = new Timeit();; timeit.checkpoint(""First checkpoint"");; // Do something; timeit.checkpoint(""Second checkpoint"");; // Do something else; timeit.stop();; System.out.println(timeit);; ; . Finally, a Timeit can be used to repeatedly run the same code multiple times, and print the timings at the end.; ; ; var timeit = new Timeit(); .microseconds(); .checkpointAndRun(""Greeting"", () -> System.out.println(""Hello!""), 10); .summarizeCheckpoints(); .stop();; System.out.println(timeit);; ; . Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; Timeit.Checkpoint. Class representing a named checkpoint with a timestamp in nanoseconds. Constructor Summary; Constructors. Constructor; Description; Timeit();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Timeit; autoUnits();  ; Timeit; checkpoint(). Create a new checkpoint with a default name. Timeit; checkpoint(String name). Create a new checkpoint with the specified name. Timeit; checkpointAndRun(Runnable runnable). Create a checkpoint with the default name and immediately run the provided runnable. Timeit; checkpointAndRun(String name,; Runnable runnable). Create a checkpoint and immediately run the provided Runnable. Timeit; checkpointAndRun(String name,; Runnable runnable,; int nIterations). Create a checkpoint and immediately run the provided Runnable nIterations times. List<Timeit.Checkpoint>; getCheckpoints(). Get an list of all the checkpoints. int; getMaxDecimalPlaces(). Get the maximum number of decimal places when reporting timings. static void; main(String[] args);  ; Timeit; maxDecimalPlaces(int maxDP). Set the maximum number of decimal places when reporting timings ; using seconds or minutes. Timeit; microseconds(). Report timings in microseconds. Timeit; milliseconds(). R",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:1876,checkpoint,checkpoint,1876,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,1,['checkpoint'],['checkpoint']
Availability,"tly compared to other ROI types with a new Geometry must be ; constructed and validated. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.roi.interfaces.ROI; ROI.RoiType. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; contains(double x,; double y). Test is the ROI contains specified x, y coordinates. ROI; duplicate(). Create a duplicate of the ROI. List<Point2>; getAllPoints(). Get a list of points representing the vertices of the ROI. double; getArea(). Get the area of this ROI. double; getBoundsHeight(). Returns the height of the ROI bounding box. double; getBoundsWidth(). Returns the width of the ROI bounding box. double; getBoundsX(). Returns the x coordinate for the top left of the ROI bounding box. double; getBoundsY(). Returns the y coordinate for the top left of the ROI bounding box. int; getC(). Get channel index, or -1 if the ROI relates to all available channels. double; getCentroidX(). Returns the x coordinate for the ROI centroid. double; getCentroidY(). Returns the y coordinate for the ROI centroid. ROI; getConvexHull(). Default implementation using JTS. Geometry; getGeometry(). Returns a org.locationtech.jts.geom.Geometry object. ImagePlane; getImagePlane(). Get the ImagePlane, which contains the values for c, z and t in a single object. double; getLength(). Get ROI length. int; getNumPoints(). Default implementation, calls ROI.getAllPoints() and then caches the result. String; getRoiName(). Get a String representation of the kind of ROI we have, ; e.g. ROI.RoiType; getRoiType(). Get the RoiType, used to distinguish between points, lines and areas. double; getScaledArea(double pixelWidth,; double pixelHeight). Get scaled area of the ROI, for use with calibrated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; g",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:1841,avail,available,1841,javadoc/docs/qupath/lib/roi/GeometryROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html,1,['avail'],['available']
Availability,"to append to the default logger. Returns:. setWriter; public ScriptParameters.Builder setWriter(Writer writer); Set the main output writer. Parameters:; writer - ; Returns:. setErrorWriter; public ScriptParameters.Builder setErrorWriter(Writer writer); Set the main error writer. Parameters:; writer - ; Returns:. setBatchSize; public ScriptParameters.Builder setBatchSize(int batch); Set the batch size for batch processing (default is 1). Parameters:; batch - ; Returns:. setBatchIndex; public ScriptParameters.Builder setBatchIndex(int ind); Set the current image index for batch processing (default is 0). Parameters:; ind - ; Returns:. setBatchSaveResult; public ScriptParameters.Builder setBatchSaveResult(boolean doSave); Specify whether the script that is running should save results or not. Parameters:; doSave - ; Returns:. setArgs; public ScriptParameters.Builder setArgs(String[] args); Set optional string args to pass to the script. Parameters:; args - ; Returns:. setProject; public ScriptParameters.Builder setProject(Project<?> project); Set the current project for the script. Parameters:; project - ; Returns:. setImageData; public ScriptParameters.Builder setImageData(ImageData<?> imageData); Set the current image data for the script. Parameters:; imageData - ; Returns:. doUpdateHierarchy; public ScriptParameters.Builder doUpdateHierarchy(boolean requestUpdate); Optionally request a hierarchy update event after running a script; (default is true for scripts that operate on image data). Parameters:; requestUpdate - ; Returns:. useCompiled; public ScriptParameters.Builder useCompiled(boolean useCompiled); Request that the script is compiled before being evaluated, ; or a previously compiled version is used where available. Parameters:; useCompiled - ; Returns:. build; public ScriptParameters build(); throws IllegalArgumentException; Build the ScriptParameters with the current options. Returns:; Throws:; IllegalArgumentException - if neither file nor script are set. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/ScriptParameters.Builder.html:5271,avail,available,5271,javadoc/docs/qupath/lib/scripting/ScriptParameters.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/ScriptParameters.Builder.html,1,['avail'],['available']
Availability,"to clear it in cases where available memory is low. getUniqueID() - Method in class qupath.lib.gui.images.stores.AbstractImageRenderer;  ; getUniqueID() - Method in class qupath.lib.gui.images.stores.ColorModelRenderer;  ; getUniqueID() - Method in interface qupath.lib.gui.images.stores.ImageRenderer. Get a unique key, which will be used for caching. getUnit() - Method in class qupath.lib.plugins.parameters.NumericParameter. Get the unit to display for this parameter (may be null if no unit is available). getUnmodifiableMetadataMap() - Method in class qupath.lib.objects.PathObject. Get an unmodifiable map of the metadata. getUpperBound() - Method in enum class qupath.lib.images.servers.PixelType. Get a number representing the maximum value permitted by this type. getUpperBound() - Method in class qupath.lib.plugins.parameters.NumericParameter. Retrieve the upper bound. getUri() - Method in class qupath.lib.gui.extensions.UpdateChecker.ReleaseVersion. Get a URI to download the release (may be null if no URI is available). getURI() - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder. Get the URI used by this builder. getURI() - Method in class qupath.lib.io.UriUpdater.SingleUriItem. Get the URI. getURI() - Method in interface qupath.lib.projects.Project. Get a URI that can be used when saving/reloading this project. getUris() - Method in interface qupath.lib.io.UriResource;  ; getURIs() - Method in class qupath.imagej.images.servers.ImageJServer;  ; getURIs() - Method in class qupath.lib.classifiers.pixel.PixelClassificationImageServer;  ; getURIs() - Method in class qupath.lib.gui.images.servers.PathHierarchyImageServer;  ; getURIs() - Method in class qupath.lib.gui.images.servers.RenderedImageServer;  ; getURIs() - Method in class qupath.lib.images.servers.bioformats.BioFormatsImageServer;  ; getURIs() - Method in interface qupath.lib.images.servers.ImageServer. Get the URIs for images required for this server. getURIs() - Method",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:543401,down,download,543401,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,2,"['avail', 'down']","['available', 'download']"
Availability,"to run; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. checkpointAndRun; public Timeit checkpointAndRun(String name,; Runnable runnable,; int nIterations); throws UnsupportedOperationException; Create a checkpoint and immediately run the provided Runnable nIterations times.; The purpose of this is to get better insights into the time required to run a self-contained block of code.; ; Note that no checkpoint is made automatically after completion of the final iteration, ; so you should generally print the output immediately, create a new checkpoint, or call stop(). Parameters:; name - base name of the checkpoint to create; the iteration number will be appended if nIterations > 1; runnable - the runnable to run; nIterations - the number of times to run the runnable; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. checkpoint; public Timeit checkpoint(); throws UnsupportedOperationException; Create a new checkpoint with a default name. Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. checkpoint; public Timeit checkpoint(String name); throws UnsupportedOperationException; Create a new checkpoint with the specified name. Parameters:; name - name of the checkpoint; if null, a default name will be generated; Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has already been stopped. stop; public Timeit stop(); throws UnsupportedOperationException; Stop the Timeit. Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit hasn't been started, or has already been stopped. autoUnits; public Timeit autoUnits(). nanoseconds; public Timeit nanoseconds(); Report timings in nanoseconds. Returns:; this instance. milliseconds; public Timeit milliseconds(); Report timings in milliseconds. Returns:; this instance. microseconds; public Timeit microseconds(); Report ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:6545,checkpoint,checkpoint,6545,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,3,['checkpoint'],['checkpoint']
Availability,"tolerance.; ; Objects will be merged if they a common boundary and have the same classification.; A small overlap tolerance is used to compensate for sub-pixel misalignment of tiles.; ; This is intended for post-processing a tile-based segmentation, where the tiling has been strictly enforced; (i.e. any objects have been clipped to non-overlapping tile boundaries). Parameters:; sharedBoundaryThreshold - minimum intersection-over-union (IoU) proportion of the possibly-clipped boundary; for merging; Returns:; an object merger that uses a shared boundary criterion; See Also:. createSharedTileBoundaryMerger(double, double). createSharedTileBoundaryMerger; public static ObjectMerger createSharedTileBoundaryMerger(double sharedBoundaryThreshold,; double overlapTolerance); Create an object merger that uses a shared boundary IoU criterion and overlap tolerance.; ; Objects will be merged if they share a common boundary and have the same classification.; A small overlap tolerance can be used to compensate for slight misalignment of tiles.; ; After identifying a common boundary line between ROIs, the ROI boundaries are intersected with the line,; and the two intersections are subsequently intersected with each other to determine the shared intersection.; The length of the shared intersection is then used to compute the intersection over union.; ; This is intended for post-processing a tile-based segmentation, where the tiling has been strictly enforced; (i.e. any objects have been clipped to non-overlapping tile boundaries). Parameters:; sharedBoundaryThreshold - minimum intersection-over-union (IoU) proportion of the possibly-clipped boundary; * for merging; overlapTolerance - amount of overlap allowed between objects, in pixels. If zero, the boundary must be; shared exactly. A typical value is 0.125, which allows for a small, sub-pixel overlap.; Returns:; an object merger that uses a shared boundary criterion and overlap tolerance. createSharedClassificationMerger; public sta",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:3644,toler,tolerance,3644,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,1,['toler'],['tolerance']
Availability,"topped. stop; public Timeit stop(); throws UnsupportedOperationException; Stop the Timeit. Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit hasn't been started, or has already been stopped. autoUnits; public Timeit autoUnits(). nanoseconds; public Timeit nanoseconds(); Report timings in nanoseconds. Returns:; this instance. milliseconds; public Timeit milliseconds(); Report timings in milliseconds. Returns:; this instance. microseconds; public Timeit microseconds(); Report timings in microseconds. Returns:; this instance. seconds; public Timeit seconds(); Report timings in seconds. Returns:; this instance. minutes; public Timeit minutes(); Report timings in minutes. Returns:; this instance. summarizeCheckpoints; public Timeit summarizeCheckpoints(); Request that checkpoints are summarized in the toString() method.; Currently, this means simply reporting the mean time per checkpoint. Returns:; this instance; See Also:. summarizeCheckpoints(boolean). summarizeCheckpoints; public Timeit summarizeCheckpoints(boolean summarize); Optionally request that checkpoints are summarized in the toString() method.; Currently, this means simply reporting the mean time per checkpoint. Parameters:; summarize - whether to summarize or not; Returns:; this instance; See Also:. summarizeCheckpoints(boolean). getMaxDecimalPlaces; public int getMaxDecimalPlaces(); Get the maximum number of decimal places when reporting timings. Returns:; See Also:. maxDecimalPlaces(int). maxDecimalPlaces; public Timeit maxDecimalPlaces(int maxDP); Set the maximum number of decimal places when reporting timings ; using seconds or minutes. Parameters:; maxDP - ; Returns:; this instance. getCheckpoints; public List<Timeit.Checkpoint> getCheckpoints(); Get an list of all the checkpoints. Returns:. toString; public String toString(); Returns a snapshot string representation of the Timeit's status. Overrides:; toString in class Object. main; public static void main(String[] args). ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:8192,checkpoint,checkpoints,8192,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,3,['checkpoint'],"['checkpoint', 'checkpoints']"
Availability,"tor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata.ImageResolutionLevel.Builder; addFullResolutionLevel(). Add the full-resolution image as a level of the pyramid. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(double downsample,; int levelWidth,; int levelHeight). Add a new level by providing a downsample value, width and height. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(int levelWidth,; int levelHeight). Add a new level based on level dimensions, estimating the corresponding downsample value as required. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(ImageServerMetadata.ImageResolutionLevel level). Add a new level directly. ImageServerMetadata.ImageResolutionLevel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFu",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:1906,down,downsample,1906,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,1,['down'],['downsample']
Availability,"tors. Constructor; Description; ProjectBrowser(QuPathGUI qupath). Constructor. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew);  ; Pane; getPane(). Get the Pane component for addition to a scene. void; refreshProject(). Refresh the current project, updating the displayed entries. boolean; setProject(Project<BufferedImage> project). Set the project. static boolean; syncProject(Project<?> project). Try to save a project, showing an error message if this fails. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ProjectBrowser; public ProjectBrowser(QuPathGUI qupath); Constructor. Parameters:; qupath - the current QuPath instance. Method Details. syncProject; public static boolean syncProject(Project<?> project); Try to save a project, showing an error message if this fails. Parameters:; project - ; Returns:. getPane; public Pane getPane(); Get the Pane component for addition to a scene. Returns:. setProject; public boolean setProject(Project<BufferedImage> project); Set the project. Parameters:; project - ; Returns:; true if the project is now set (even if unchanged), false if the project change was thwarted or cancelled. refreshProject; public void refreshProject(); Refresh the current project, updating the displayed entries.; Note that this must be called on the JavaFX Application thread.; If it is not, the request will be passed to the application thread ; (and therefore not processed immediately). changed; public void changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew). Specified by:; changed in interface ChangeListener<ImageData<BufferedImage>>. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/ProjectBrowser.html:1821,error,error,1821,javadoc/docs/qupath/lib/gui/panes/ProjectBrowser.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/ProjectBrowser.html,1,['error'],['error']
Availability,"tributes;  ; ScriptAutoCompletor - Interface in qupath.lib.scripting.languages. Interface for classes that implement auto-completion (e.g. ScriptEditor - Interface in qupath.lib.gui.scripting. Minimal interface for a script editor that the GUI can call. ScriptEditorControl<T> - Interface in qupath.lib.gui.scripting. Basic script editor control using JavaFX. ScriptingPreferences() - Constructor for class qupath.lib.gui.panes.PreferencePane.ScriptingPreferences;  ; ScriptLanguage - Class in qupath.lib.scripting.languages. Abstract class to represent languages supported by the script editor. ScriptLanguage(String, String) - Constructor for class qupath.lib.scripting.languages.ScriptLanguage. Default constructor for a ScriptLanguage. ScriptLanguage(String, Collection<String>) - Constructor for class qupath.lib.scripting.languages.ScriptLanguage. Default constructor for a ScriptLanguage. ScriptLanguageProvider - Class in qupath.lib.gui.scripting.languages. Class with static methods to fetch all the available ScriptLanguages. ScriptLanguageProvider() - Constructor for class qupath.lib.gui.scripting.languages.ScriptLanguageProvider;  ; ScriptParameters - Class in qupath.lib.scripting. Class that stores key information that is useful for running scripts. ScriptParameters.Builder - Class in qupath.lib.scripting. Builder class for ScriptParameters. scriptRunning() - Method in class qupath.lib.gui.scripting.DefaultScriptEditor. Observable value indicating whether a script is currently running or not. scriptsDirectoryProperty() - Method in class qupath.lib.gui.UserDirectoryManager. Read only property representing the shared scripts directory. scriptsPath - Variable in class qupath.lib.gui.panes.PreferencePane.ExtensionPreferences;  ; scriptsPath - Variable in class qupath.lib.gui.panes.PreferencePane.ScriptingPreferences;  ; scriptsPathProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Path to a directory containing scripts for quick-access through the user int",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:888832,avail,available,888832,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"tring> getMetadataMap(); Get an unmodifiable view of the underlying metadata map. Returns:. getMetadataKeys; Collection<String> getMetadataKeys(); Get an unmodifiable collection of the metadata map's keys. Returns:. getServerBuilder; ImageServerBuilder.ServerBuilder<T> getServerBuilder(); Get a ImageServerBuilder.ServerBuilder that can be used to open this image. Returns:. readImageData; ImageData<T> readImageData(); throws IOException; Read the ImageData associated with this entry, or create a new ImageData if none is currently present.; ; If the full data is not needed, but rather only the objects readHierarchy() can be much faster. Returns:; Throws:; IOException; See Also:. readHierarchy(). saveImageData; void saveImageData(ImageData<T> imageData); throws IOException; Save the ImageData for this entry using the default storage location for the project. Parameters:; imageData - ; Throws:; IOException. readHierarchy; PathObjectHierarchy readHierarchy(); throws IOException; Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. Returns:; Throws:; IOException; See Also:. readImageData(); hasImageData(). hasImageData; boolean hasImageData(); Check if this entry has saved ImageData already available. Returns:. getSummary; String getSummary(); Get a summary string representing this image entry. Returns:. getThumbnail; T getThumbnail(); throws IOException; Request a thumbnail for the image. Returns:; a thumbnail if one has already been set, otherwise null.; Throws:; IOException. setThumbnail; void setThumbnail(T img); throws IOException; Set a thumbnail for the image. This will replace any existing thumbnail. Parameters:; img - ; Throws:; IOException. getServerURIs; @Deprecated; default Collection<URI> getServerURIs(); throws IOException; Deprecated.; use instead UriResource.getURIs(). Get a collection of the URIs required by this project's ImageServer.; ; The purpose of this is to help query if they can be found. They might not b",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:6536,avail,available,6536,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,1,['avail'],['available']
Availability,"tring name,; Runnable runnable,; int nIterations). Create a checkpoint and immediately run the provided Runnable nIterations times. List<Timeit.Checkpoint>; getCheckpoints(). Get an list of all the checkpoints. int; getMaxDecimalPlaces(). Get the maximum number of decimal places when reporting timings. static void; main(String[] args);  ; Timeit; maxDecimalPlaces(int maxDP). Set the maximum number of decimal places when reporting timings ; using seconds or minutes. Timeit; microseconds(). Report timings in microseconds. Timeit; milliseconds(). Report timings in milliseconds. Timeit; minutes(). Report timings in minutes. Timeit; nanoseconds(). Report timings in nanoseconds. Timeit; seconds(). Report timings in seconds. Timeit; start(). Start the Timeit and create a checkpoint with the default name. Timeit; start(String name). Start the Timeit and create a checkpoint with the specified name. Timeit; stop(). Stop the Timeit. Timeit; summarizeCheckpoints(). Request that checkpoints are summarized in the toString() method. Timeit; summarizeCheckpoints(boolean summarize). Optionally request that checkpoints are summarized in the toString() method. String; toString(). Returns a snapshot string representation of the Timeit's status. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. Timeit; public Timeit(). Method Details. start; public Timeit start(); throws UnsupportedOperationException; Start the Timeit and create a checkpoint with the default name.; ; Note that calling this method is not essential, because the Timeit will automatically ; be started when the first checkpoint is created. Returns:; this instance; Throws:; UnsupportedOperationException - if the Timeit has previously been started; See Also:. start(String); checkpoint(). start; public Timeit start(String name); throws UnsupportedOperationException; Start the Timeit and create a checkpoint with the specified name",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:3276,checkpoint,checkpoints,3276,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,1,['checkpoint'],['checkpoints']
Availability,"troid is contained within a ROI. static double[]; extractMaskedPixels(Parameters<BufferedImage,BufferedImage> params,; int channel,; Function<PathObject,ROI> roiFunction). Extract the pixels from one channel of an image using the specified transform, and applying any ROI mask. static double[]; extractMaskedPixels(Parameters<BufferedImage,BufferedImage> params,; String channelName,; Function<PathObject,ROI> roiFunction). Extract the pixels from one channel of an image using the specified transform, and applying any ROI mask. static double[]; extractMaskedPixels(Parameters<BufferedImage,BufferedImage> params,; ColorTransforms.ColorTransform transform,; Function<PathObject,ROI> roiFunction). Extract the pixels from the image using the specified transform, and applying any ROI mask. static List<PathObject>; maskObject(ROI parentROI,; PathObject child). Apply a ROI mask to an object, ensuring that the child object's ROI does not extend beyond the mask. static List<PathObject>; maskObjectAndSplit(ROI parentROI,; PathObject child). Apply a ROI mask to an object, ensuring that the child object's ROI does not extend beyond the mask,; and splitting the child object's ROI to create multiple objects if it contains disjoint regions. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelProcessorUtils; public PixelProcessorUtils(). Method Details. extractMaskedPixels; public static double[] extractMaskedPixels(Parameters<BufferedImage,BufferedImage> params,; int channel,; Function<PathObject,ROI> roiFunction); throws IOException; Extract the pixels from one channel of an image using the specified transform, and applying any ROI mask. Parameters:; params - processor parameters; channel - number of the channel to extract (0-based index); roiFunction - the function used to select a ROI from an object (generally the main ROI or nucleus),; or null to use no ROI at all; Returns",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/PixelProcessorUtils.html:1863,mask,maskObjectAndSplit,1863,javadoc/docs/qupath/lib/experimental/pixels/PixelProcessorUtils.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/PixelProcessorUtils.html,1,['mask'],['maskObjectAndSplit']
Availability,"tructor Summary; Constructors. Constructor; Description; MorphologicalReconstruction();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ByteProcessor; binaryReconstruction(ByteProcessor bpMarker,; ByteProcessor bpMask,; boolean permitMaskChanges). Alternative morphological reconstruction (based on ImageJ's FloodFiller) suitable for binary images only. static ImageProcessor; closingByReconstruction(ImageProcessor ip,; double radius). Apply a morphological closing by reconstruction. static ImageProcessor; findRegionalMaxima(ImageProcessor ip,; float threshold,; boolean outputBinary). Find regional maxima using morphological reconstruction. static void; imposeMaxima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region maxima within a specified Roi, using morphological reconstruction. static void; imposeMaxima(FloatProcessor fp,; ImageProcessor ipMask). Ensure that a FloatProcessor only has region maxima within a specified mask, using morphological reconstruction. static void; imposeMinima(FloatProcessor fp,; Roi roi). Ensure that a FloatProcessor only has region minima within a specified Roi, using morphological reconstruction. static boolean; morphologicalReconstruction(ImageProcessor ipMarker,; ImageProcessor ipMask). Apply morphological operation using marker and mask images. static ImageProcessor; openingByReconstruction(ImageProcessor ip,; double radius). Apply opening by reconstruction, with the specified minimum filter radius. static boolean; validateMarkerMask(ImageProcessor ipMarker,; ImageProcessor ipMask). Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MorphologicalReconstruction; public MorphologicalReconstruction(). Method Details. bin",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html:1644,mask,mask,1644,javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/processing/MorphologicalReconstruction.html,1,['mask'],['mask']
Availability,"tructors. Constructor; Description; PixelProcessorUtils();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static boolean; containsCentroid(ROI roi,; PathObject child). Check whether a child object's centroid is contained within a ROI. static double[]; extractMaskedPixels(Parameters<BufferedImage,BufferedImage> params,; int channel,; Function<PathObject,ROI> roiFunction). Extract the pixels from one channel of an image using the specified transform, and applying any ROI mask. static double[]; extractMaskedPixels(Parameters<BufferedImage,BufferedImage> params,; String channelName,; Function<PathObject,ROI> roiFunction). Extract the pixels from one channel of an image using the specified transform, and applying any ROI mask. static double[]; extractMaskedPixels(Parameters<BufferedImage,BufferedImage> params,; ColorTransforms.ColorTransform transform,; Function<PathObject,ROI> roiFunction). Extract the pixels from the image using the specified transform, and applying any ROI mask. static List<PathObject>; maskObject(ROI parentROI,; PathObject child). Apply a ROI mask to an object, ensuring that the child object's ROI does not extend beyond the mask. static List<PathObject>; maskObjectAndSplit(ROI parentROI,; PathObject child). Apply a ROI mask to an object, ensuring that the child object's ROI does not extend beyond the mask,; and splitting the child object's ROI to create multiple objects if it contains disjoint regions. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelProcessorUtils; public PixelProcessorUtils(). Method Details. extractMaskedPixels; public static double[] extractMaskedPixels(Parameters<BufferedImage,BufferedImage> params,; int channel,; Function<PathObject,ROI> roiFunction); throws IOException; Extract the pixels from one channel of an image using the specified transform, and applyin",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/PixelProcessorUtils.html:1660,mask,mask,1660,javadoc/docs/qupath/lib/experimental/pixels/PixelProcessorUtils.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/PixelProcessorUtils.html,1,['mask'],['mask']
Availability,"ts that are valid. static ROI; combineROIs(ROI shape1,; ROI shape2,; RoiTools.CombineOp op). Combine two shape ROIs together. static Collection<? extends ROI>; computeTiledROIs(ROI parentROI,; ImmutableDimension sizePreferred,; ImmutableDimension sizeMax,; boolean fixedSize,; int overlap). Create a collection of tiled ROIs corresponding to a specified parentROI if it is larger than sizeMax, with optional overlaps. static ROI; createRandomRectangle(ImageRegion mask,; double width,; double height). Create a randomly-located rectangle ROI with the specified width and height, constrained to fall within the provided mask region. static ROI; createRandomRectangle(ImageRegion mask,; double width,; double height,; Random random). Create a randomly-located rectangle ROI with the specified width and height, constrained to fall within the provided mask region. static ROI; createRandomRectangle(ROI mask,; double width,; double height). Create a randomly-located rectangle ROI with the specified width and height, constrained to fall within the provided mask ROI. static ROI; createRandomRectangle(ROI mask,; double width,; double height,; int maxAttempts,; boolean permitErosion,; Random random). Create a randomly-located rectangle ROI with the specified width and height, constrained to fall within the provided mask ROI, ; using a specified maximum number of attempts. static ROI; difference(ROI roi1,; ROI roi2). Compute the difference between two ROIs. static ROI; fillHoles(ROI roi). Fill the holes of an Area ROI, or return the ROI unchanged if it contains no holes. static Area; getArea(ROI roi). Get an Area object representing a ROI. static double; getBoundaryDistance(ROI roi1,; ROI roi2). Get the Euclidean distance between the boundaries of two ROIs. static double; getBoundaryDistance(ROI roi1,; ROI roi2,; double pixelWidth,; double pixelHeight). Get the calibrated Euclidean distance between the boundaries of two ROIs using specified pixel sizes. static double; getCentroidDistance(",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiTools.html:2308,mask,mask,2308,javadoc/docs/qupath/lib/roi/RoiTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiTools.html,1,['mask'],['mask']
Availability,"ts...). TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. Collection<URI>; getURIs(). Get the URIs for images required for this server. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Test whether a region is empty, i.e. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. default T; readBufferedImage(RegionRequest request). Deprecated.; since v0.4.0. default T; readRegion(double downsample,; int x,; int y,; int width,; int height). Read a 2D(+C) image region from the default ImagePlane (i.e. default T; readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Read a 2D(+C) image region for a specified z-plane and timepoint. default T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. Methods inherited from interface java.lang.AutoCloseable; close. Method Details. getPath; String getPath(); Get a String path that can uniquely identify this image.; ; For most standard images, this should be a String representation of an absolute URI. ; If multiple images are stored within the same file, then this information should be encoded in the URI.; ; For images that are generated some other way (e.g. created dynamically) the path may not lend itself to ; a URI representation, but must still be unique so that it can be used for caching tiles. Returns:. getURIs; Collection<URI> getURIs(); Get the URIs for images required for this server. ; In the simplest case, this is a singleton list",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:4606,down,downsample,4606,javadoc/docs/qupath/lib/images/servers/ImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html,1,['down'],['downsample']
Availability,"turning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. String; toString();  . Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. create; public static <T> ObjectClassifier<T> create(OpenCVClassifiers.OpenCVStatModel model,; PathObjectFilter filter,; FeatureExtractor<T> extractor,; List<PathClass> pathClasses); Create a new ObjectClassifier that uses an OpenCVClassifiers.OpenCVStatModel for classification. Type Parameters:; T - generic type, which matches that of an ImageData; Parameters:; model - the OpenCVClassifiers.OpenCVStatModel used to apply the prediction; filter - a filter used to select objects from a hierarchy; extractor - a feature extractor to determine features for each object; pathClasses - available classifications; the order is important, and relates to the classification output; Returns:. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Returns:. classifyObjects; public int classifyObjects(ImageData<T> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is up to the caller to fire these events if required. Parameters:; imageData - data that may or may not be required for classification depending upon how features are extracted; path",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/objects/OpenCVMLClassifier.html:2631,avail,available,2631,javadoc/docs/qupath/opencv/ml/objects/OpenCVMLClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/objects/OpenCVMLClassifier.html,1,['avail'],['available']
Availability,"turns:. createROIMask; public static BufferedImage createROIMask(int width,; int height,; ROI roi,; double xOrigin,; double yOrigin,; double downsample); Create a grayscale BufferedImage representing a mask for a specified ROI.; ; Pixels inside the ROI will be 255, pixels outside will be 0. Parameters:; width - width of the requested mask image; height - height of the requested mask image; roi - ROI for mask; xOrigin - pixel x coordinate of the top left of the region to include in the mask.; yOrigin - pixel y coordinate of the top left of the region to include in the mask.; downsample - downsample factor to use when generating the mask, i.e. the amount to scale.; Returns:. createROIMask; public static BufferedImage createROIMask(Shape shape,; double downsample); Create a Shape mask using the minimal bounding box for the Shape. Parameters:; shape - ; downsample - ; Returns:. createShapeMask; public static BufferedImage createShapeMask(int width,; int height,; Shape shape,; double xOrigin,; double yOrigin,; double downsample); Create a grayscale BufferedImage representing a mask for a specified ROI.; ; Pixels inside the ROI will be 255, pixels outside will be 0. Parameters:; width - width of the requested mask image; height - height of the requested mask image; shape - Shape for mask; xOrigin - pixel x coordinate of the top left of the region to include in the mask.; yOrigin - pixel y coordinate of the top left of the region to include in the mask.; downsample - downsample factor to use when generating the mask, i.e. the amount to scale.; Returns:. ensureBufferedImageType; public static BufferedImage ensureBufferedImageType(BufferedImage img,; int requestedType); Convert a BufferedImage to have a specified type.; ; This makes use of Graphics2D.drawImage, which imposes limits on supported types ; (i.e. RGB or 8-bit grayscale), and is therefore not suitable for arbitrary type conversion.; ; A possible use is to ensure that a BGR/RGB/ARGB image is converted to the same r",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html:5942,down,downsample,5942,javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,2,"['down', 'mask']","['downsample', 'mask']"
Availability,"turns:. getServerBuilder; ImageServerBuilder.ServerBuilder<T> getServerBuilder(); Get a ImageServerBuilder.ServerBuilder that can be used to open this image. Returns:. readImageData; ImageData<T> readImageData(); throws IOException; Read the ImageData associated with this entry, or create a new ImageData if none is currently present.; ; If the full data is not needed, but rather only the objects readHierarchy() can be much faster. Returns:; Throws:; IOException; See Also:. readHierarchy(). saveImageData; void saveImageData(ImageData<T> imageData); throws IOException; Save the ImageData for this entry using the default storage location for the project. Parameters:; imageData - ; Throws:; IOException. readHierarchy; PathObjectHierarchy readHierarchy(); throws IOException; Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. Returns:; Throws:; IOException; See Also:. readImageData(); hasImageData(). hasImageData; boolean hasImageData(); Check if this entry has saved ImageData already available. Returns:. getSummary; String getSummary(); Get a summary string representing this image entry. Returns:. getThumbnail; T getThumbnail(); throws IOException; Request a thumbnail for the image. Returns:; a thumbnail if one has already been set, otherwise null.; Throws:; IOException. setThumbnail; void setThumbnail(T img); throws IOException; Set a thumbnail for the image. This will replace any existing thumbnail. Parameters:; img - ; Throws:; IOException. getServerURIs; @Deprecated; default Collection<URI> getServerURIs(); throws IOException; Deprecated.; use instead UriResource.getURIs(). Get a collection of the URIs required by this project's ImageServer.; ; The purpose of this is to help query if they can be found. They might not be ; e.g. if the images have been moved. Returns:; Throws:; IOException. updateServerURIs; @Deprecated; default boolean updateServerURIs(Map<URI,URI> replacements); throws IOException; Deprecated.; use instead ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:6709,avail,available,6709,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,1,['avail'],['available']
Availability,"turns:. hessianDeterminant; public MultiscaleFeatures.MultiscaleResultsBuilder hessianDeterminant(boolean calculate); Calculate the determinant of the Hessian matrix per pixel. Parameters:; calculate - ; Returns:. pixelCalibration; public MultiscaleFeatures.MultiscaleResultsBuilder pixelCalibration(PixelCalibration cal,; double downsampleXY); Set the pixel calibration, with optional x,y scaling.; ; If available, this will convert the units in which Gaussian sigma values are applied.; This helps apply an isotropic filtering more easily, by specifying a single sigma value ; and supplying the pixel calibration so that any differences in pixel dimensions is ; automatically adjusted for.; ; DownsampleXY may be further used to scale the pixel units, meaning that even when working ; with a downsampled image it is possible to pass the original PixelCalibration object ; and specify the level of downsampling (rather than need to create a new scaled PixelCalibration). Parameters:; cal - ; downsampleXY - ; Returns:; See Also:. sigmaXY(double); sigmaX(double); sigmaY(double); sigmaZ(double). sigmaXY; public MultiscaleFeatures.MultiscaleResultsBuilder sigmaXY(double sigma); Set all Gaussian sigma values (x, y) to the same value.; ; Note that this value is in pixels by default, or may be microns is supported ; by setting the pixel calibration. Parameters:; sigma - ; Returns:; See Also:. pixelCalibration(PixelCalibration, double); sigmaX(double); sigmaY(double). sigmaX; public MultiscaleFeatures.MultiscaleResultsBuilder sigmaX(double sigma); Set all Gaussian sigma values for the horizontal filter.; ; Note that this value is in pixels by default, or may be microns is supported ; by setting the pixel calibration. Parameters:; sigma - ; Returns:; See Also:. pixelCalibration(PixelCalibration, double); sigmaXY(double); sigmaY(double); sigmaZ(double). sigmaY; public MultiscaleFeatures.MultiscaleResultsBuilder sigmaY(double sigma); Set all Gaussian sigma values for the vertical filter.; ; ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/MultiscaleFeatures.MultiscaleResultsBuilder.html:6826,down,downsampleXY,6826,javadoc/docs/qupath/opencv/tools/MultiscaleFeatures.MultiscaleResultsBuilder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/MultiscaleFeatures.MultiscaleResultsBuilder.html,1,['down'],['downsampleXY']
Availability,"uPath_Send_Overlay_to_QuPath. java.lang.Object; qupathj.QuPath_Send_Overlay_to_QuPath. All Implemented Interfaces:; PlugIn. public class QuPath_Send_Overlay_to_QuPath; extends Object; implements PlugIn; ImageJ plugin for sending back all the ROIs on an ImageJ overlay to QuPath.; ; Optionally measure the ROIs first, and include the measurements as features. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; QuPath_Send_Overlay_to_QuPath();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static List<PathObject>; createObjectsFromROIs(ImagePlus imp,; Collection<? extends Roi> rois,; double downsample,; boolean asDetection,; boolean includeMeasurements,; ImagePlane plane). Turn an array of ImageJ ROIs into a list of QuPath PathObjects, optionally adding measurements as well. static List<PathObject>; createPathObjectsFromROIs(ImagePlus imp,; Roi[] rois,; ImageServer<?> server,; double downsample,; boolean asDetection,; boolean includeMeasurements,; ImagePlane plane). Deprecated.; use instead createObjectsFromROIs(ImagePlus, Collection, double, boolean, boolean, ImagePlane). void; run(String arg);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. QuPath_Send_Overlay_to_QuPath; public QuPath_Send_Overlay_to_QuPath(). Method Details. run; public void run(String arg). Specified by:; run in interface PlugIn. createPathObjectsFromROIs; @Deprecated; public static List<PathObject> createPathObjectsFromROIs(ImagePlus imp,; Roi[] rois,; ImageServer<?> server,; double downsample,; boolean asDetection,; boolean includeMeasurements,; ImagePlane plane); Deprecated.; use instead createObjectsFromROIs(ImagePlus, Collection, double, boolean, boolean, ImagePlane). Legacy method to turn an array of ImageJ ROIs into a list of QuPath PathObjects, optionally addi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupathj/QuPath_Send_Overlay_to_QuPath.html:1383,down,downsample,1383,javadoc/docs/qupathj/QuPath_Send_Overlay_to_QuPath.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupathj/QuPath_Send_Overlay_to_QuPath.html,1,['down'],['downsample']
Availability,"uble computeCoordinateDistance(Coordinate coord,; STRtree tree); Compute the distance to the nearest coordinate stored within an STRtree.; This assumes that all items in the tree are coordinates (and nothing else!). Parameters:; coord - the query coordinate; tree - the STRtree containing existing coordinates; Returns:; distance to the closest coordinate found in tree, or Double.POSITIVE_INFINITY is no coordinate is found; See Also:. createCoordinateCache(Collection). createCoordinateCache; public static STRtree createCoordinateCache(Collection<Coordinate> coords); Create an STRtree to enable nearest neighbor searching for a collection of coordinates. Parameters:; coords - the coordinates to insert into the tree; Returns:; the tree. computeDistance; public static double computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator); Compute the (unsigned) shortest distance from a coordinate to a target geometry, or zero if the coordinate occurs ; within. Parameters:; coord - the coordinate; geometry - the target geometry; locator - a locator created for the target Geometry or null; if available, computations may be faster; Returns:; See Also:. computeDistance(Coordinate, Geometry, PointOnGeometryLocator, boolean). computeDistance; public static double computeDistance(Coordinate coord,; Geometry geometry,; PointOnGeometryLocator locator,; boolean signedDistance); Compute the shortest distance from a coordinate to a target geometry.; This is primarily intended for computing distances for exterior coordinates, however a signed distance can ; optionally be returned for interior coordinates. Parameters:; coord - the coordinate; geometry - the target geometry; locator - a locator created for the target Geometry or null; if available, computations may be faster; signedDistance - if false, return 0 for coordinates occurring inside areas;; if true, return a negative value representing the distance to the boundary of the area; Returns:; Since:; v0.4.0. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html:11261,avail,available,11261,javadoc/docs/qupath/lib/analysis/DistanceTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/DistanceTools.html,2,['avail'],['available']
Availability,"uble downsample). Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height). Create a request for a region specified in terms of its bounding box, using the first z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Create a request for a region specified in terms of its bounding box, z-slice and time point. static RegionRequest; createInstance(String path,; double downsample,; int x,; int y,; int width,; int height,; ImagePlane plane). Create a request for a region specified in terms of its bounding box and ImagePlane. static RegionRequest; createInstance(String path,; double downsample,; Collection<? extends ROI> rois). Create a request that contains the pixels of the specified ROIs. static RegionRequest; createInstance(String path,; double downsample,; ImageRegion region). Create a request corresponding to a specified ImageRegion. static RegionRequest; createInstance(String path,; double downsample,; ROI roi). Create a request that contains the pixels of the specified ROI. static RegionRequest; createInstance(String path,; RegionRequest request). Create a request that matches another request but with a different path. static RegionRequest; createInstance(ImageServer<?> server). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). static RegionRequest; createInstance(ImageServer<?> server,; double downsample). Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point). boolean; equals(Object obj);  ; double; getDownsample(). Get the requested downsample factor, defining the resolution at which pixels should be returned. Str",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:2023,down,downsample,2023,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,1,['down'],['downsample']
Availability,"uble width,; Region... regions); Deprecated.; Set the min width property for the specified regions.; This can be especially useful when setting the width to Region.USE_PREF_SIZE, indicating ; that the region should not be shrunk beyond its preferred size. Parameters:; width - ; regions - . setMinHeight; public static void setMinHeight(double height,; Region... regions); Deprecated.; Set the min height property for the specified regions.; This can be especially useful when setting the height to Region.USE_PREF_SIZE, indicating ; that the region should not be shrunk beyond its preferred size. Parameters:; height - ; regions - . setFillWidth; public static void setFillWidth(Boolean doFill,; Node... nodes); Deprecated.; Set the GridPane.setFillWidth(Node, Boolean) property for specified nodes. Parameters:; doFill - ; nodes - . setToExpandGridPaneWidth; public static void setToExpandGridPaneWidth(Node... nodes); Deprecated.; Set constraints and max width values (where possible) so that the specified nodes ; fill all available horizontal space in a GridPane. Parameters:; nodes - . setToExpandGridPaneHeight; public static void setToExpandGridPaneHeight(Node... nodes); Deprecated.; Set constraints and max width values (where possible) so that the specified nodes ; fill all available vertical space in a GridPane. Parameters:; nodes - . setFillHeight; public static void setFillHeight(Boolean doFill,; Node... nodes); Deprecated.; Set the GridPane.setFillHeight(Node, Boolean) property for specified nodes. Parameters:; doFill - ; nodes - . createRowGrid; public static GridPane createRowGrid(Node... nodes); Deprecated.; Create a GridPane containing rows that resize similarly to Swing's GridLayout(). Parameters:; nodes - ; Returns:. createRowGridControls; public static GridPane createRowGridControls(Node... nodes); Deprecated.; Create a GridPane containing columns that resize similarly to Swing's GridLayout(),; while also resizing contained objects to have the corresponding widths",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tools/PaneTools.html:6669,avail,available,6669,javadoc/docs/qupath/lib/gui/tools/PaneTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tools/PaneTools.html,1,['avail'],['available']
Availability,"ublic class SimpleImageViewer; extends Object; A simple viewer for a single image, with options to save or copy.; ; This is primarily intended for RGB images, but can also be used for other types after; applying automatic brightness/contrast settings.; . This stores (and can be updated with) a BufferedImage or a JavaFX Image,; because both serve different purposes can be useful in different contexts.; . Since:; v0.5.0. Property Summary; Properties. Type; Property; Description; ReadOnlyObjectProperty<BufferedImage>; bufferedImage. Get a read-only property representing the buffered image. BooleanProperty; expandToWindow. Get the property indicating whether the image should grow to fill the window (while maintaining its; aspect ratio). ReadOnlyObjectProperty<String>; imageName. Get a read-only property indicating the name of the image. ReadOnlyObjectProperty<Image>; image. Get a read-only property representing the JavaFX image. StringProperty; placeholderText. Get the placeholder text to show if no image is available. DoubleProperty; saturationPercent. Get the percentage of any non-8-bit image that should be saturated when applying auto contrast settings. Constructor Summary; Constructors. Constructor; Description; SimpleImageViewer(). Create a new simple image viewer. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ReadOnlyObjectProperty<BufferedImage>; bufferedImageProperty(). Get a read-only property representing the buffered image. BooleanProperty; expandToWindowProperty(). Get the property indicating whether the image should grow to fill the window (while maintaining its; aspect ratio). BufferedImage; getBufferedImage(). Get the buffered image. boolean; getExpandToWindow(). Query whether the image is allowed to expand beyond its preferred width and height to fill the window. Image; getImage(). Get the JavaFX image. String; getName(). Get the name of the image. String; getPlaceholderText(). Get the placeholder tex",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html:1466,avail,available,1466,javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html,1,['avail'],['available']
Availability,"ublic DnnModelParams.Builder files(File... files); Specify the URIs as files. These will be appended to any existing URIs. Parameters:; files - ; Returns:. paths; public DnnModelParams.Builder paths(Path... paths); Specify the URIs as path objects. These will be appended to any existing URIs. Parameters:; paths - ; Returns:. URIs; public DnnModelParams.Builder URIs(URI... uris); Specify the URIs. These will be appended to any existing URIs. Parameters:; uris - ; Returns:. URIs; public DnnModelParams.Builder URIs(Collection<URI> uris); Specify the URIs as a collection. These will be appended to any existing URIs. Parameters:; uris - ; Returns:. lazyInitialize; public DnnModelParams.Builder lazyInitialize(boolean lazyInitialize); Optionally request lazy initialization. Parameters:; lazyInitialize - ; Returns:. framework; public DnnModelParams.Builder framework(String framework); Specify the deep learning framework that can use the model.; ; It is recommended to use one of the default names available as static variables; in DnnModelParams.; However, an extension might use some other unique identifier to ensure that it is ; used in preference to some other implementation. Parameters:; framework - ; Returns:. layout; public DnnModelParams.Builder layout(String layout); Specify a string representing the axes layout that the model expects as input.; This should follow the Bioimage Model Zoo spec, and include only the characters ""bixyczt"". Parameters:; layout - ; Returns:. inputShape; public DnnModelParams.Builder inputShape(long... shape); Specify the shape for a single input, with the default input name. Parameters:; shape - ; Returns:. input; public DnnModelParams.Builder input(String name,; long... shape); Specify the shape as a long array for a single input with a specified name. Parameters:; name - ; shape - ; Returns:. input; public DnnModelParams.Builder input(String name,; DnnShape shape); Specify the shape for a single input with a specified name. Parameters:; name",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html:3465,avail,available,3465,javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.Builder.html,1,['avail'],['available']
Availability,"uclei,; ImageProcessor ipCells,; Calibration cal,; double downsample,; ImagePlane plane). Convert integer labeled images into cell objects. static PathObject; convertToAnnotation(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create an annotation object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToAnnotation(Roi roi,; double downsampleFactor,; ImagePlus imp). Create an annotation object for a specific ImageJ Roi. static PathObject; convertToAnnotation(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToAnnotation(Roi, double, double, double, ImagePlane). static PathObject; convertToDetection(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane). Create a detection object for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToDetection(Roi roi,; double downsampleFactor,; ImagePlus imp). Create a detection object for a specific ImageJ Roi. static PathObject; convertToDetection(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; ImagePlane plane). Deprecated.; use instead convertToDetection(Roi, double, double, double, ImagePlane). static ImageProcessor; convertToFloatProcessor(SimpleImage image). Convert a SimpleImage to an ImageProcessor. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; Calibration cal,; double downsampleFactor). Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; T pathImage). Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. static Pat",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:2731,down,downsampleFactor,2731,javadoc/docs/qupath/imagej/tools/IJTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html,1,['down'],['downsampleFactor']
Availability,"ue(String name); Deprecated.; since v0.4.0; use get(String) instead. Get the measurement with the specified name. Parameters:; name - ; Returns:; the value, or Double.NaN if no measurement is available with the specified name. putMeasurement; @Deprecated; default void putMeasurement(String name,; double value); Deprecated.; since v0.4.0; replaced by put(String, double). Alternative method to call putMeasurement(String, double). Parameters:; name - ; value - . remove; default double remove(String name); Remove a named measurement. Parameters:; name - ; Returns:; the value that was removed, or Double.NaN if the value was not in the list; Since:; v0.4.0. putAll; default void putAll(Map<String,? extends Number> map); Put all the values from the specified map into this list. Parameters:; map - ; Since:; v0.4.0. putAll; default void putAll(MeasurementList list); Put all the values from the specified list into this one. Parameters:; list - ; Since:; v0.4.0. keySet; default Set<String> keySet(); Get all available names as a set. Returns:. getMeasurementNames; List<String> getMeasurementNames(); Get the names of all measurements currently in the list. Returns:. getMeasurementName; @Deprecated; String getMeasurementName(int ind); Deprecated.; since v0.4.0; using names is preferred over indexing but getMeasurementNames() can still be used. Get name for the measurement at the specified index in the list. Parameters:; ind - ; Returns:. getMeasurementValue; @Deprecated; double getMeasurementValue(int ind); Deprecated.; since v0.4.0; using get(String) is preferred over using an index. Get value for the measurement at the specified index in the list. Parameters:; ind - ; Returns:. get; double get(String name); Get value for the measurement with the specified name. Parameters:; name - ; Returns:; the measurement value, or Double.NaN if the measurement is not available; Since:; v0.4.0; See Also:. put(String, double). containsKey; boolean containsKey(String name); Returns true if this",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/measurements/MeasurementList.html:7305,avail,available,7305,javadoc/docs/qupath/lib/measurements/MeasurementList.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/measurements/MeasurementList.html,1,['avail'],['available']
Availability,"ues, ; into a 4-element int array. unpackRGB(int) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. unpackRGB(int, int[]) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. UNSET - Enum constant in enum class qupath.lib.images.ImageData.ImageType. Image type has not been set. unzippedExtensions(Path, String...) - Static method in class qupath.lib.io.PathIO. Get the extension of a file, or of all entries within a zip file. UPDATE - Variable in class qupath.lib.gui.actions.menus.HelpMenuActions.Actions;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewerPlus;  ; updateAvailableStyles() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Request that the list of available styles is updated. updateBounds(double, double) - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.l",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1061581,avail,available,1061581,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"uestImageTile(ImageServer<BufferedImage> server,; RegionRequest request,; Map<RegionRequest,BufferedImage> cache,; boolean ensureTileReturned). Request an image tile. protected boolean; stopWaiting(RegionRequest request);  ; protected void; workerComplete(qupath.lib.gui.images.stores.TileWorker<BufferedImage> worker). Every TileWorker should call this when the task is done!. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. paintTileBorders; protected static boolean paintTileBorders. tileListeners; protected List<TileListener<BufferedImage>> tileListeners. cache; protected Map<RegionRequest,BufferedImage> cache. thumbnailCache; protected Map<RegionRequest,BufferedImage> thumbnailCache. Method Details. paintRegionCompletely; public void paintRegionCompletely(ImageServer<BufferedImage> server,; Graphics g,; Shape clipShapeVisible,; int zPosition,; int tPosition,; double downsampleFactor,; ImageObserver observer,; ImageRenderer imageDisplay,; long timeoutMilliseconds); Similar to paintRegion, but wait until all the tiles have arrived (or abort if it is taking too long). Specified by:; paintRegionCompletely in interface ImageRegionRenderer; Parameters:; server - ; g - ; clipShapeVisible - ; zPosition - ; tPosition - ; downsampleFactor - ; observer - ; imageDisplay - ; timeoutMilliseconds - Timeout after which a request is made from the PathImageServer directly, rather than waiting for tile requests. paintRegion; public void paintRegion(ImageServer<BufferedImage> server,; Graphics g,; Shape clipShapeVisible,; int zPosition,; int tPosition,; double downsampleFactor,; BufferedImage imgThumbnail,; ImageObserver observer,; ImageRenderer imageDisplay); Description copied from interface: ImageRegionRenderer; Paint an image region. Specified by:; paintRegion in interface ImageRegionRenderer; Parameters:; server - the server representing the image that shown be painted; g - the",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/stores/DefaultImageRegionStore.html:4626,down,downsampleFactor,4626,javadoc/docs/qupath/lib/gui/images/stores/DefaultImageRegionStore.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/stores/DefaultImageRegionStore.html,1,['down'],['downsampleFactor']
Availability,"ui.Urls. Get the base URL for the QuPath documentation (independent of version). getDouble(int) - Method in interface qupath.lib.analysis.stats.ArrayWrappers.ArrayWrapper. Extract one entry from the array, converting to double as necessary. getDoubleParameterValue(String) - Method in class qupath.lib.plugins.parameters.ParameterList. Get a double parameter value (or its default) for the specified key. getDoubleValues(String) - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData;  ; getDoubleValues(String) - Method in interface qupath.lib.gui.measure.PathTableData. Get all double values for all items. getDownsample() - Method in class qupath.lib.gui.commands.MiniViewers.MiniViewerManager. Get the downsample used within the mini viewers. getDownsample() - Method in class qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel. Get the downsample factor for this level. getDownsample() - Method in class qupath.lib.images.servers.TileRequest. Get the downsample value for this tile. getDownsample() - Method in class qupath.lib.regions.RegionRequest. Get the requested downsample factor, defining the resolution at which pixels should be returned. getDownsampleFactor() - Method in class qupath.lib.gui.viewer.QuPathViewer. Get the current downsample factor. getDownsampleFactor() - Method in interface qupath.lib.images.PathImage. Get the downsample factor originally used when obtaining the image from an ImageServer; will be 1 if the image is full-resolution. getDownsampleFactor(ImageServer<?>, double) - Static method in class qupath.lib.images.servers.ServerTools. Calculate a downsample factor for a server given a preferred pixel size. getDownsampleForLevel(int) - Method in class qupath.lib.images.servers.ImageServerMetadata. Get the downsample factor for a specific resolution level. getDownsampleForResolution(int) - Method in class qupath.lib.images.servers.AbstractImageServer;  ; getDownsampleForResolution(int) - Method in interface qupath.lib.im",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:385893,down,downsample,385893,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['down'],['downsample']
Availability,"ui.actions.menus.ViewMenuActions.ZoomActions;  ; ZOOM_TO_FIT - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; ZOOM_TO_FIT - Variable in class qupath.lib.gui.actions.menus.ViewMenuActions.ZoomActions;  ; ZOOM_TO_FIT - Variable in class qupath.lib.gui.actions.ViewerActions;  ; zoomActions - Variable in class qupath.lib.gui.actions.menus.ViewMenuActions.Actions;  ; zoomIn() - Method in class qupath.lib.gui.viewer.QuPathViewer. Zoom in by one step. zoomIn(int) - Method in class qupath.lib.gui.viewer.QuPathViewer. Zoom in by a specified number of steps, where one 'step' indicates a minimal zoom increment. zoomOut() - Method in class qupath.lib.gui.viewer.QuPathViewer. Zoom out by one step. zoomOut(int) - Method in class qupath.lib.gui.viewer.QuPathViewer. Zoom out by a specified number of steps, where one 'step' indicates a minimal zoom increment. zoomToFit() - Method in class qupath.lib.gui.viewer.QuPathViewer. Request that the downsample is set to contain the entire image, and the image is centered in the viewer. zPositionProperty() - Method in class qupath.lib.gui.viewer.QuPathViewer. Current z-position for the z-slice currently visible in the viewer. zRange(int, int) - Method in class qupath.lib.images.writers.TileExporter. Define the range of Z-slices to process. zSlice(int) - Method in class qupath.lib.images.writers.ome.OMEPyramidWriter.Builder. Specify the z-slice to export. zSlices(int, int) - Method in class qupath.lib.images.writers.ome.OMEPyramidWriter.Builder. Specify the start (inclusive) and end (exclusive) z-slices. zSpacingCalibrated() - Method in class qupath.lib.images.servers.ImageServerMetadata. Returns true if z-spacing calibration information is available for the image. zSpacingMicrons(Number) - Method in class qupath.lib.images.servers.ImageServerMetadata.Builder. Specify the spacing between z-slices, in microns. zSpacingMicrons(Number) - Method in class qupath.lib.images.servers.PixelCalibration.Builder. Specify spacing",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1129849,down,downsample,1129849,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['down'],['downsample']
Availability,"uilder class to create PatchClassifierParams. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; PatchClassifierParams; build(). Build the patch classifier parameters. PatchClassifierParams.Builder; halo(int padding). Define a halo that is symmetric in x and y. PatchClassifierParams.Builder; halo(Padding halo). Define a halo using a padding object. PatchClassifierParams.Builder; inputChannels(int... channels). Define the input channels using (zero-based) channel numbers. PatchClassifierParams.Builder; inputChannels(String... channels). Define the input channels using channel names. PatchClassifierParams.Builder; inputChannels(Collection<? extends ColorTransforms.ColorTransform> channels). Define the input channels from a collection of color transforms. PatchClassifierParams.Builder; inputResolution(PixelCalibration cal). Define the input resolution using a pixel calibration object. PatchClassifierParams.Builder; inputResolution(PixelCalibration cal,; double downsample). Define the input resolution using a pixel calibration and a scaling factor. PatchClassifierParams.Builder; outputChannelType(ImageServerMetadata.ChannelType channelType). Define the channel type for the output. PatchClassifierParams.Builder; outputClasses(Map<Integer,PathClass> outputClasses). Define the classifications for the output as a map. PatchClassifierParams.Builder; outputClasses(PathClass... outputClasses). Define the classifications for the output as an array. PatchClassifierParams.Builder; outputClassNames(String... outputClasses). Define the classifications for the output as an array of classification names. PatchClassifierParams.Builder; outputClassNames(Map<Integer,String> outputClasses). Define the classifications for the output as a map with string values. PatchClassifierParams.Builder; patchSize(int patchSize). Define the requested square patch size. PatchClassifierParams.Builder; patchSize(int patchWidth,; int patchHeight). Define th",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html:1604,down,downsample,1604,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,1,['down'],['downsample']
Availability,"uilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion. Method Details. getInstanceLabels; public Map<PathObject,Integer> getInstanceLabels(); Get a mapping between objects and instance labels. Returns:; the instance label map, or an empty map if no objects are available or ; LabeledImageServer.Builder.useInstanceLabels() was not selected. getLabels; public Map<PathClass,Integer> getLabels(); Get an unmodifiable map of classifications and their corresponding labels.; Note that multiple classifications may use the same integer label. Returns:; a map of labels, or empty map if none are available or useInstanceLabels() was selected. getBoundaryLabels; public Map<PathClass,Integer> getBoundaryLabels(); Get an unmodifiable map of classifications and their corresponding boundary labels, if available.; Note that multiple classifications may use the same integer label. Returns:; a map of boundary labels, or empty map if none are available or useInstanceLabels() was selected. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an associated URI at all, whereas others ; may depend upon multiple URIs (e.g. if concatenating images).; ; Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see ImageServer.getBuilder(). Specifi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:4967,avail,available,4967,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,1,['avail'],['available']
Availability,"uilder. Specify the marker opacity. markerOpacity(double) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder. Specify the marker opacity. markerOpacity(double) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder. Specify the marker opacity. MASK_ALPHA - Static variable in class qupath.lib.common.ColorTools. Mask for use when extracting the alpha component from a packed ARGB int value. MASK_BLUE - Static variable in class qupath.lib.common.ColorTools. Mask for use when extracting the blue component from a packed (A)RGB int value. MASK_GREEN - Static variable in class qupath.lib.common.ColorTools. Mask for use when extracting the green component from a packed (A)RGB int value. MASK_RED - Static variable in class qupath.lib.common.ColorTools. Mask for use when extracting the red component from a packed (A)RGB int value. maskFunction(MaskSupplier<S, T>) - Method in class qupath.lib.experimental.pixels.Parameters.Builder. Function used to lazily create a mask corresponding to the image for a specified ROI. maskImageNames - Variable in class qupath.lib.gui.panes.PreferencePane.GeneralPreferences;  ; maskImageNamesProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Request that image names are hidden within the user interface. maskObject(ROI, PathObject) - Static method in class qupath.lib.experimental.pixels.PixelProcessorUtils. Apply a ROI mask to an object, ensuring that the child object's ROI does not extend beyond the mask. maskObjectAndSplit(ROI, PathObject) - Static method in class qupath.lib.experimental.pixels.PixelProcessorUtils. Apply a ROI mask to an object, ensuring that the child object's ROI does not extend beyond the mask,; and splitting the child object's ROI to create multiple objects if it contains disjoint regions. maskSupplier(MaskSupplier<S, T>) - Method in class qupath.lib.experimental.pixels.PixelProcessor.Builder. Set the mask supplier. MaskSupplier<S,T> - Interface in qupath.lib.experimental.pixels. A fun",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:672642,mask,mask,672642,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['mask'],['mask']
Availability,"uilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. createID; protected String createID(); Description copied from class: AbstractImageServer; Create a unique ID for the server, which can be returned as the default value of AbstractImageServer.getPath().; A suggested implementation is; . getClass().getName() + "": "" + URI + parameters; ; This will be called on demand whenever AbstractImageServer.getPath() is first required. Specified by:; createID in class AbstractImageServer<BufferedImage>; Returns:. readRegion; public BufferedImage readRegion(RegionRequest request); throws IOException; Description copied from interface: ImageServer; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some implementations may contain empty padding instead.; Therefore it is up to the caller to ensure that the requests are within range.; ; However, it is expected that any returnable region will be at least 1x1 pixel in size, even if via high downsampling ; one might otherwise expect a 0x0 image. This is consistent with the idea of pixels representing point samples ; rather than little squares.; ; Note: One should avoid returning null, as this cannot be stored as a value in some map implementations ; that may be used for caching. Specified by:; readRegion in interface ImageServer<BufferedImage>; Overrides:; readRegion in class TransformingImageServer<BufferedImage>; Parameters:; request - the region for which pixels are requ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/servers/ChannelDisplayTransformServer.html:4485,down,downsample,4485,javadoc/docs/qupath/lib/gui/images/servers/ChannelDisplayTransformServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/servers/ChannelDisplayTransformServer.html,1,['down'],['downsample']
Availability,"ul in combination with getBatchIndex() to write scripts that (for example); can adapt to whether they are the first or last to run in a batch. Returns:; See Also:. getBatchIndex(). getBatchIndex; public int getBatchIndex(); Get the index of the current image for batch processing, where 0 is the first and getBatchSize() - 1 ; is the last.; ; This is useful in combination with getBatchSize() to write scripts that (for example); can adapt to whether they are the first or last to run in a batch. Returns:; See Also:. getBatchSize(). getBatchSaveResult; public Boolean getBatchSaveResult(); Get whether changes to the image data should be saved. Returns:; true if changes should be saved after running the script, false if they should not or if it is unknown. getArgs; public String[] getArgs(); Get an optional array of string arguments passed to the script. Returns:. getWriter; public Writer getWriter(); Get the main writer for script output. Returns:. getErrorWriter; public Writer getErrorWriter(); Get the error writer for script output. Returns:. getDefaultImports; public List<Class<?>> getDefaultImports(); Get default imports that should be included with the script, where possible.; Not all languages may support adding default imports.; ; The purpose of this is to make scripting easier and more intuitive, resembling a ; macro language and without a need for the user to know much about QuPath's classes. Returns:; See Also:. getDefaultStaticImports(). useCompiled; public boolean useCompiled(); Request that any script should be compiled before being evaluated, ; and previously compiled versions reused when possible.; ; This is not always supported, but where it is it may improve performance; if the same script is evaluated many times.; It may also mean that any errors are caught earlier.; . Returns:. doUpdateHierarchy; public boolean doUpdateHierarchy(); Request whether to fire an update event for the object hierarchy, if an image data ; object is available.; ; The purpose of",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/ScriptParameters.html:4560,error,error,4560,javadoc/docs/qupath/lib/scripting/ScriptParameters.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/ScriptParameters.html,1,['error'],['error']
Availability,"uld show object IDs by default or not. showMeasurementTableThumbnails - Variable in class qupath.lib.gui.panes.PreferencePane.MeasurementPreferences;  ; showMeasurementTableThumbnailsProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Specify whether measurement tables should show thumbnail images by default or not. showMessageDialog(String, String) - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Show a standard message dialog. showMessageDialog(String, Node) - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Show a message dialog (OK button only), with the content contained within a Node. showMiniViewer(QuPathViewer) - Static method in class qupath.lib.gui.commands.Commands. Show a mini viewer window associated with a specific viewer. showNamesProperty() - Method in class qupath.lib.gui.viewer.OverlayOptions;  ; showNoImageError(String) - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Show an error message that no image is available. showNoImageError(String) - Static method in class qupath.lib.gui.tools.GuiTools. Show an error message that no image is available. showNoProjectError(String) - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Show an error message that no project is available. showNoProjectError(String) - Static method in class qupath.lib.gui.tools.GuiTools. Show an error message that no project is available. showOverviewProperty() - Method in class qupath.lib.gui.viewer.ViewerManager. Show the overview image. showOverviewProperty() - Method in class qupath.lib.gui.viewer.ViewerPlusDisplayOptions. Show the overview image. showParameterDialog(String, ParameterList) - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Show a (modal) dialog for a specified ParameterList. showParameterDialog(String, ParameterList) - Static method in class qupath.lib.gui.tools.GuiTools. Show a (modal) dialog for a specified ParameterList. showPixelClassificationP",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:968466,error,error,968466,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,2,"['avail', 'error']","['available', 'error']"
Availability,"ult saturation defined in PathPrefs.autoBrightnessContrastSaturationPercentProperty(). autoSetDisplayRange(ChannelDisplayInfo, double) - Method in class qupath.lib.display.ImageDisplay. Automatically set the display range for a channel. autoUnits() - Method in class qupath.lib.common.Timeit;  ; autoUpdate - Variable in class qupath.lib.gui.panes.PreferencePane.AppearancePreferences;  ; autoUpdate - Variable in class qupath.lib.gui.panes.PreferencePane.GeneralPreferences;  ; autoUpdateCheckProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Check for updates when launching QuPath, if possible. availableChannels() - Method in class qupath.lib.display.ImageDisplay. ObservableList containing the channels currently available for display. availableFontsProperty() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Get a list of available fonts. availableStylesProperty() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Get the current available styles as an observable list. averageChannelProject() - Method in class qupath.lib.images.servers.TransformedServerBuilder. Perform an average (mean) projection of the channels. awaitCompletion() - Method in class qupath.lib.plugins.AbstractTaskRunner. Await the completion of currently-running tasks, notifying any listener if necessary. AwtTools - Class in qupath.lib.awt.common. A collection of static methods useful when working with AWT shapes and ImageRegions. B. backend(int) - Method in class qupath.opencv.dnn.OpenCVDnn.Builder. Specify the backend, e.g. backgroundColor - Variable in class qupath.lib.gui.panes.PreferencePane.ViewerPreferences;  ; backgroundColor(int, boolean) - Method in class qupath.lib.gui.images.servers.RenderedImageServer.Builder. Specify a base color. backgroundColor(Color) - Method in class qupath.lib.gui.images.servers.RenderedImageServer.Builder. Specify a base color. backgroundLabel(int) - Method in class qupath.lib.images.servers.LabeledImageServer.Builder.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:51431,avail,available,51431,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"ultiscaleFeatures.MultiscaleResultsBuilder.FeatureMap; extends AbstractMap<MultiscaleFeatures.MultiscaleFeature,Mat>; implements Map<MultiscaleFeatures.MultiscaleFeature,Mat>; Helper map implementation that provides access to MultiscaleFeatures.Hessian if needed. Nested Class Summary. Nested classes/interfaces inherited from class java.util.AbstractMap; AbstractMap.SimpleEntry<K,V>, AbstractMap.SimpleImmutableEntry<K,V>. Nested classes/interfaces inherited from interface java.util.Map; Map.Entry<K,V>. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Set<Map.Entry<MultiscaleFeatures.MultiscaleFeature,Mat>>; entrySet();  ; MultiscaleFeatures.Hessian; getHessian(). Get the MultiscaleFeatures.Hessian associated with these features. Methods inherited from class java.util.AbstractMap; clear, clone, containsKey, containsValue, equals, get, hashCode, isEmpty, keySet, put, putAll, remove, size, toString, values. Methods inherited from class java.lang.Object; finalize, getClass, notify, notifyAll, wait, wait, wait. Methods inherited from interface java.util.Map; clear, compute, computeIfAbsent, computeIfPresent, containsKey, containsValue, equals, forEach, get, getOrDefault, hashCode, isEmpty, keySet, merge, put, putAll, putIfAbsent, remove, remove, replace, replace, replaceAll, size, values. Method Details. getHessian; public MultiscaleFeatures.Hessian getHessian(); Get the MultiscaleFeatures.Hessian associated with these features.; This may be used to request eigenvectors and eigenvalues.; ; Note: this will only be available if MultiscaleFeatures.MultiscaleResultsBuilder.retainHessian(boolean) has been set to true. Returns:; the Hessian if available, or null otherwise. entrySet; public Set<Map.Entry<MultiscaleFeatures.MultiscaleFeature,Mat>> entrySet(). Specified by:; entrySet in interface Map<MultiscaleFeatures.MultiscaleFeature,Mat>; Specified by:; entrySet in class AbstractMap<MultiscaleFeatures.MultiscaleFeature,Mat>. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/MultiscaleFeatures.MultiscaleResultsBuilder.FeatureMap.html:2364,avail,available,2364,javadoc/docs/qupath/opencv/tools/MultiscaleFeatures.MultiscaleResultsBuilder.FeatureMap.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/MultiscaleFeatures.MultiscaleResultsBuilder.FeatureMap.html,2,['avail'],['available']
Availability,"umRepaintSpacingMillis(). Return to processing all repainting requests. DoubleProperty; rotationProperty(). Return the rotation property of this viewer. void; selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected). Fired when the selected objects have changed. void; setActiveTool(PathTool tool). Set the active PathTool for input to this viewer. void; setBorderColor(Color color). Set the border color for this viewer. void; setCenterPixelLocation(double x,; double y). Set the image pixel to display in the center of the viewer (using image pixel coordinates at the full-resolution). void; setCursor(Cursor cursor). Set the requested cursor to display in this viewer. void; setCustomPixelLayerOverlay(PathOverlay pathOverlay). Optionally set a custom overlay to use for the pixel layer. void; setDoFasterRepaint(boolean fasterRepaint). Set flag to indicate that repaints should prefer speed over accuracy. void; setDownsampleFactor(double downsampleFactor). Set the downsample factor for this viewer. void; setDownsampleFactor(double downsampleFactor,; double cx,; double cy). Set downsample factor, so that the specified coordinate in the image space is not shifted in the viewer afterwards. void; setDownsampleFactor(double downsampleFactor,; double cx,; double cy,; boolean clipToMinMax). Set downsample factor, so that the specified coordinate in the image space is not shifted in the viewer afterwards. void; setGamma(double gamma). Set the gamma value for this viewer. void; setImageData(ImageData<BufferedImage> imageDataNew). Set the current image for this viewer. void; setMagnification(double magnification). Set the downsample factor based upon magnification values. void; setMinimumRepaintSpacingMillis(long repaintSpacingMillis). Prevent frequent repaints (temporarily) by setting a minimum time that must have elapsed; after the previous repaint for a new one to be triggered. void; setRotation(double theta). Set the",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html:11153,down,downsampleFactor,11153,javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,1,['down'],['downsampleFactor']
Availability,"ummary; Fields. Modifier and Type; Field; Description; static final String; TMA_DEARRAYING_DATA_EXTENSION;  . Constructor Summary; Constructors. Constructor; Description; TMADataIO();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static TMAGrid; importDearrayedTMAData(File file). Import a TMA grid from an exported TMA analysis file, i.e. static void; writeTMAData(File file,; ImageData<BufferedImage> imageData). Write TMA summary data, without any image export. static void; writeTMAData(File file,; ImageData<BufferedImage> imageData,; OverlayOptions overlayOptions,; double downsampleFactor). Write TMA data in a human-readable (and viewable) way, with JPEGs and TXT/CSV files. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. TMA_DEARRAYING_DATA_EXTENSION; public static final String TMA_DEARRAYING_DATA_EXTENSION. See Also:. Constant Field Values. Constructor Details. TMADataIO; public TMADataIO(). Method Details. writeTMAData; public static void writeTMAData(File file,; ImageData<BufferedImage> imageData); throws IOException; Write TMA summary data, without any image export. Parameters:; file - ; imageData - ; Throws:; IOException. writeTMAData; public static void writeTMAData(File file,; ImageData<BufferedImage> imageData,; OverlayOptions overlayOptions,; double downsampleFactor); throws IOException; Write TMA data in a human-readable (and viewable) way, with JPEGs and TXT/CSV files. Parameters:; file - ; imageData - ; overlayOptions - ; downsampleFactor - The downsample factor used for the TMA cores. If NaN, an automatic downsample value will be selected (>= 1). If <= 0, no cores are exported.; Throws:; IOException. importDearrayedTMAData; public static TMAGrid importDearrayedTMAData(File file); Import a TMA grid from an exported TMA analysis file, i.e. with extension "".qptma"". Parameters:; file - ; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tma/TMADataIO.html:2017,down,downsampleFactor,2017,javadoc/docs/qupath/lib/gui/tma/TMADataIO.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tma/TMADataIO.html,4,['down'],"['downsample', 'downsampleFactor']"
Availability,"ummary; Nested Classes. Modifier and Type; Class; Description; static class ; Timeit.Checkpoint. Class representing a named checkpoint with a timestamp in nanoseconds. Constructor Summary; Constructors. Constructor; Description; Timeit();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Timeit; autoUnits();  ; Timeit; checkpoint(). Create a new checkpoint with a default name. Timeit; checkpoint(String name). Create a new checkpoint with the specified name. Timeit; checkpointAndRun(Runnable runnable). Create a checkpoint with the default name and immediately run the provided runnable. Timeit; checkpointAndRun(String name,; Runnable runnable). Create a checkpoint and immediately run the provided Runnable. Timeit; checkpointAndRun(String name,; Runnable runnable,; int nIterations). Create a checkpoint and immediately run the provided Runnable nIterations times. List<Timeit.Checkpoint>; getCheckpoints(). Get an list of all the checkpoints. int; getMaxDecimalPlaces(). Get the maximum number of decimal places when reporting timings. static void; main(String[] args);  ; Timeit; maxDecimalPlaces(int maxDP). Set the maximum number of decimal places when reporting timings ; using seconds or minutes. Timeit; microseconds(). Report timings in microseconds. Timeit; milliseconds(). Report timings in milliseconds. Timeit; minutes(). Report timings in minutes. Timeit; nanoseconds(). Report timings in nanoseconds. Timeit; seconds(). Report timings in seconds. Timeit; start(). Start the Timeit and create a checkpoint with the default name. Timeit; start(String name). Start the Timeit and create a checkpoint with the specified name. Timeit; stop(). Stop the Timeit. Timeit; summarizeCheckpoints(). Request that checkpoints are summarized in the toString() method. Timeit; summarizeCheckpoints(boolean summarize). Optionally request that checkpoints are summarized in the toString() method. String; toString(). Returns a sn",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:2493,checkpoint,checkpoints,2493,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,1,['checkpoint'],['checkpoints']
Availability,"upath.lib.gui.charts.HistogramDisplay. All Implemented Interfaces:; ParameterChangeListener. public class HistogramDisplay; extends Object; implements ParameterChangeListener; Wrapper close to enable the generation and display of histograms relating to a data table.; Other UI controls are provided to enable selection of specific data columns for display in the histogram. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; HistogramDisplay(PathTableData<?> model,; boolean showTable). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; getNumBins(). Get the requested number of bins used for the histogram. Pane; getPane(). Get the pane containing the histogram and associated UI components, for addition to a scene. void; parameterChanged(ParameterList parameterList,; String key,; boolean isAdjusting). Notify listener that a parameter value has changed. void; refreshCombo(). Refresh the available measurements. void; refreshHistogram(). Refresh the currently-displayed histogram (e.g. void; setNumBins(int nBins). Set the number of bins for the histogram. void; showHistogram(String column). Show the histogram for a specified data column. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. HistogramDisplay; public HistogramDisplay(PathTableData<?> model,; boolean showTable); Constructor. Parameters:; model - the table data for histogramming; showTable - if true, include a measurement summary table along with the histogram. Method Details. refreshCombo; public void refreshCombo(); Refresh the available measurements. setNumBins; public void setNumBins(int nBins); Set the number of bins for the histogram. Parameters:; nBins - the number of bins to use. getNumBins; public int getNumBins(); Get the requested number of bins used for the histogram. Returns:. getPane; public Pan",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/HistogramDisplay.html:1400,avail,available,1400,javadoc/docs/qupath/lib/gui/charts/HistogramDisplay.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/HistogramDisplay.html,1,['avail'],['available']
Availability,"upath.lib.images.servers.bioformats.BioFormatsServerOptions. public class BioFormatsServerOptions; extends Object; Container for various options that can customize the behavior of the BioFormatsImageServer. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static String; ALLOW_MEMOIZATION_PROPERTY. System property controlling whether memoization is allowed or not. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static boolean; allowMemoization(). Check whether memoization should be allowed or not. boolean; bioformatsEnabled(). Returns true if Bio-Formats is enabled and may be used to read images. void; clearReaderOptions(). Clear all reader options, returning these to their defaults. boolean; getFilesOnly(). Returns true if Bio-Formats is restricted to support only local files, not other URLs. static BioFormatsServerOptions; getInstance(). Get the static instance of BioFormatsServerOptions, available to servers being constructed. int; getMemoizationTimeMillis(). Returns the number of milliseconds that must elapse when opening an image before a memoization file is generated. String; getPathMemoization(). Get the path to the directory where memoization files should be written, or null if no path is set. Map<String,String>; getReaderOptions(). Get a map representing additional arguments that should be passed to readers. Set<String>; getSkipAlwaysExtensions(). Query the set of file extensions for which Bio-Formats should not be used. Set<String>; getUseAlwaysExtensions(). Query the set of file extensions for which Bio-Formats should always be used. boolean; requestParallelization(). Returns true if multiple readers may be created for different threads, to enable parallel image reading. void; setBioformatsEnabled(boolean bioformatsEnabled). Set whether Bio-Formats should be enabled or disabled (in favor of other readers). void; setFilesOnly(boolean filesOnly). Set wheth",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html:1441,avail,available,1441,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsServerOptions.html,1,['avail'],['available']
Availability,"upath.process.gui.commands.ml.ClassificationResolution;  ; equalTo(String) - Method in class qupath.lib.classifiers.object.ObjectClassifiers.ClassifyByMeasurementBuilder. Set the classification (by name) for objects for which the specified measurement has a value exactly equal to the threshold. equalTo(PathClass) - Method in class qupath.lib.classifiers.object.ObjectClassifiers.ClassifyByMeasurementBuilder. Set the classification for objects for which the specified measurement has a value exactly equal to the threshold. error() - Method in class qupath.lib.gui.dialogs.Dialogs.Builder. Deprecated.; Create an error alert dialog. error(String) - Static method in class qupath.lib.gui.actions.InfoMessage. Create an error message with static text. error(String, int) - Static method in class qupath.lib.gui.actions.InfoMessage. Create an error message with static text and a count. error(ObservableNumberValue) - Static method in class qupath.lib.gui.actions.InfoMessage. Create a error message to show a count of errors. error(ObservableValue<String>) - Static method in class qupath.lib.gui.actions.InfoMessage. Create an error message. error(ObservableValue<String>, ObservableNumberValue) - Static method in class qupath.lib.gui.actions.InfoMessage. Create an error message with a count. ERROR - Enum constant in enum class qupath.lib.gui.actions.InfoMessage.MessageType. Error or exception. ERROR - Enum constant in enum class qupath.lib.gui.logging.LogManager.LogLevel. Error logging (only if something goes recognizably wrong). escapeFilePath(String) - Static method in class qupath.lib.common.GeneralTools. Escape backslashes in an absolute file path - useful when scripting. estimateAvailableMemory() - Static method in class qupath.lib.common.GeneralTools. Estimate the current available memory in bytes, based upon the JVM max and the memory currently used. estimateCellBoundary(Geometry, double, double) - Static method in class qupath.lib.objects.CellTools. Estimate a cell boundary ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:283490,error,error,283490,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,2,['error'],"['error', 'errors']"
Availability,"upplier. This is optional, but without it masks will be null. Parameters:; maskSupplier - ; Returns:. outputHandler; public PixelProcessor.Builder<S,T,U> outputHandler(OutputHandler<S,T,U> outputHandler); Set the output handler. This is optional, for cases where the processor does not make updates to the; parent object itself. Parameters:; outputHandler - ; Returns:. processor; public PixelProcessor.Builder<S,T,U> processor(Processor<S,T,U> processor); Set the processor. This is required to do any interesting work. Parameters:; processor - ; Returns:. padding; public PixelProcessor.Builder<S,T,U> padding(Padding padding); Set the padding to use when extracting regions.; Note that this is defined in pixels at the full image resolution, not the downsampled resolution. Parameters:; padding - ; Returns:. padding; public PixelProcessor.Builder<S,T,U> padding(int size); Set the padding to use when extracting regions, using a symmetric padding.; Note that this is defined in pixels at the full image resolution, not the downsampled resolution. Parameters:; size - ; Returns:. downsample; public PixelProcessor.Builder<S,T,U> downsample(double downsample); Set the downsample factor to use with requesting image regions. Parameters:; downsample - ; Returns:. pixelSize; public PixelProcessor.Builder<S,T,U> pixelSize(double pixelSize); Set the requested pixel size to use with requesting image regions.; This will be converted to a downsample factor based on the image calibration. Parameters:; pixelSize - ; Returns:. tiler; public PixelProcessor.Builder<S,T,U> tiler(Tiler tiler); Set a tiler to use. This is required for large regions, so that the image can be processed in tiles. Parameters:; tiler - ; Returns:. tile; public PixelProcessor.Builder<S,T,U> tile(int tileWidth,; int tileHeight); Set a default tiler to use, with a specified tile size. Parameters:; tileWidth - ; tileHeight - ; Returns:. merger; public PixelProcessor.Builder<S,T,U> merger(ObjectMerger merger); Set a merger to",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/PixelProcessor.Builder.html:3870,down,downsampled,3870,javadoc/docs/qupath/lib/experimental/pixels/PixelProcessor.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/PixelProcessor.Builder.html,1,['down'],['downsampled']
Availability,"upport scroll gestures for touchscreens and trackpads. Returns:. brushCreateNewObjectsProperty; public static BooleanProperty brushCreateNewObjectsProperty(); Create new objects by default when drawing with the Brush tool. The alternative is to append (discontinuous) regions to existing annotations. Returns:. brushScaleByMagProperty; public static BooleanProperty brushScaleByMagProperty(); Optionally scale the default brush tool diameter by the viewer magnification (downsample value). Returns:. brushDiameterProperty; public static IntegerProperty brushDiameterProperty(); Default brush tool diameter, in pixels. Returns:. returnToMoveModeProperty; public static BooleanProperty returnToMoveModeProperty(); Request that the GUI returns to using the PAN tool after a ROI is drawn.; This helps keep errant clicking under control, but not permitting new ROIs to be made without; explicitly activating a ROI too. Returns:. tileCachePercentageProperty; public static DoubleProperty tileCachePercentageProperty(); Requested percentage of available memory to use for tile caching. Returns:. useCalibratedLocationStringProperty; public static BooleanProperty useCalibratedLocationStringProperty(); Show the cursor location on a viewer in calibrated units, rather than pixels. Returns:. useSelectedColorProperty; public static BooleanProperty useSelectedColorProperty(); Use a specified color for highlighting selected objects in the viewer. Returns:. showPointHullsProperty; public static BooleanProperty showPointHullsProperty(); Show the convex hull for point annotations within the viewer. Returns:. multipointToolProperty; public static BooleanProperty multipointToolProperty(); Create multiple points within the same annotation when using the counting tool.; The alternative is to create a new annotation for each new point. Returns:. tmaExportDownsampleProperty; public static DoubleProperty tmaExportDownsampleProperty(); Default downsample factor to use when exporting TMA cores. Returns:. viewer",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html:56380,avail,available,56380,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,1,['avail'],['available']
Availability,"ur browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.images.stores; Interface ImageRegionRenderer. All Known Implementing Classes:; DefaultImageRegionStore. public interface ImageRegionRenderer; Interface for painting regions of an ImageServer onto a Graphics object. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; paintRegion(ImageServer<BufferedImage> server,; Graphics g,; Shape clipShapeVisible,; int zPosition,; int tPosition,; double downsampleFactor,; BufferedImage imgThumbnail,; ImageObserver observer,; ImageRenderer renderer). Paint an image region. void; paintRegionCompletely(ImageServer<BufferedImage> server,; Graphics g,; Shape clipShapeVisible,; int zPosition,; int tPosition,; double downsampleFactor,; ImageObserver observer,; ImageRenderer renderer,; long timeoutMilliseconds). Similar to paintRegion(ImageServer, Graphics, Shape, int, int, double, BufferedImage, ImageObserver, ImageRenderer), ; but wait until all the tiles have arrived (or abort if it is taking too long). Method Details. paintRegionCompletely; void paintRegionCompletely(ImageServer<BufferedImage> server,; Graphics g,; Shape clipShapeVisible,; int zPosition,; int tPosition,; double downsampleFactor,; ImageObserver observer,; ImageRenderer renderer,; long timeoutMilliseconds); Similar to paintRegion(ImageServer, Graphics, Shape, int, int, double, BufferedImage, ImageObserver, ImageRenderer), ; but wait until all the tiles have arrived (or abort if it is taking too long). Parameters:; server - the server representing the image that shown be painted; g - the graphics object upon which to paint; clipShapeVisible - the visible shape representing the area of the graphics object that",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/stores/ImageRegionRenderer.html:1090,down,downsampleFactor,1090,javadoc/docs/qupath/lib/gui/images/stores/ImageRegionRenderer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/stores/ImageRegionRenderer.html,1,['down'],['downsampleFactor']
Availability,"urement value that maps to the last color in the color mapper. setDisplayMinValue(double) - Method in class qupath.lib.gui.tools.MeasurementMapper. Set the measurement value that maps to the first color in the color mapper. setDisplayMode(HistogramChart.DisplayMode) - Method in class qupath.lib.gui.charts.HistogramChart. Set the histogram display mode. setDoFasterRepaint(boolean) - Method in class qupath.lib.gui.viewer.QuPathViewer. Set flag to indicate that repaints should prefer speed over accuracy. setDoubleLastValue(double) - Method in class qupath.lib.plugins.parameters.DoubleParameter;  ; setDoubleLastValue(double) - Method in class qupath.lib.plugins.parameters.IntParameter;  ; setDoubleLastValue(double) - Method in class qupath.lib.plugins.parameters.NumericParameter. A class for setting the numeric value as a double (subclasses should convert this as needed). setDownsample(double) - Method in class qupath.lib.gui.commands.MiniViewers.MiniViewerManager. Set the downsample to use within the mini viewers. setDownsampleFactor(double) - Method in class qupath.lib.gui.viewer.QuPathViewer. Set the downsample factor for this viewer. setDownsampleFactor(double, double, double) - Method in class qupath.lib.gui.viewer.QuPathViewer. Set downsample factor, so that the specified coordinate in the image space is not shifted in the viewer afterwards. setDownsampleFactor(double, double, double, boolean) - Method in class qupath.lib.gui.viewer.QuPathViewer. Set downsample factor, so that the specified coordinate in the image space is not shifted in the viewer afterwards. setError() - Static method in class qupath.lib.gui.logging.LogManager. Set the root log level to LogLevel.ERROR. setErrorWriter(Writer) - Method in class qupath.lib.scripting.ScriptParameters.Builder. Set the main error writer. setExcludeOutsideRange(boolean) - Method in class qupath.lib.gui.tools.MeasurementMapper. Specify whether out-of-range values should be excluded. setExpandToWindow(boolean) - Method in",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:924462,down,downsample,924462,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['down'],['downsample']
Availability,"ures - Variable in class qupath.lib.gui.panes.PreferencePane.ViewerPreferences;  ; useRotateGesturesProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Support rotate gestures for touchscreens and trackpads. userPathProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. A path where additional files may be stored, such as extensions and log files. useScrollGesturesProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Support scroll gestures for touchscreens and trackpads. useSelectedColor - Variable in class qupath.lib.gui.panes.PreferencePane.ObjectPreferences;  ; useSelectedColorProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Use a specified color for highlighting selected objects in the viewer. useSystemMenubarProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Deprecated. useTileBrushProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Request that the brush tool automatically uses any available tiles, rather than creating 'circles' as normal. useUniqueLabels() - Method in class qupath.lib.images.servers.LabeledImageServer.Builder. Deprecated.; in favor of LabeledImageServer.Builder.useInstanceLabels(). useZoomGestures - Variable in class qupath.lib.gui.panes.PreferencePane.ViewerPreferences;  ; useZoomGesturesProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Support zoom gestures for touchscreens and trackpads. V. validateMarkerMask(ImageProcessor, ImageProcessor) - Static method in class qupath.imagej.processing.MorphologicalReconstruction. Check that marker and mask images have the same size, and ensure that marker pixels are <= mask pixels, ; making this if necessary. value() - Element in annotation interface qupath.lib.gui.actions.annotations.ActionAccelerator. String form of an accelerator, compatible with KeyCombination.valueOf(String). value() - Element in annotation interface qupath.lib.gui.actions.annotations.ActionConfig. Key to external pro",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1075645,avail,available,1075645,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"urns:. getThreadPoolManager; public SharedThreadPoolManager getThreadPoolManager(); Get a SharedThreadPoolManager to help with submitting tasks in other threads.; A benefit of using this is that all the thread pools created will be shutdown when ; QuPath is exited. Returns:. getExtensionManager; public ExtensionManager getExtensionManager(); Get an ExtensionManager to facilitating working with extensions. Returns:. getViewerManager; public ViewerManager getViewerManager(); Get the viewer manager, which gives access to all the viewers available within this QuPath instance. Returns:. getAvailablePathClasses; public ObservableList<PathClass> getAvailablePathClasses(); Get an observable list of available PathClasses. Returns:. getDefaultDragDropListener; public DragDropImportListener getDefaultDragDropListener(); Get a reference to the default drag & drop listener, so this may be added to additional windows if needed. Returns:. resetAvailablePathClasses; public boolean resetAvailablePathClasses(); Populate the availablePathClasses with a default list. Returns:; true if changes were mad to the available classes, false otherwise. getAnalysisTabPane; public TabPane getAnalysisTabPane(); Access the main tab pane shown in the QuPath window.; This enables extensions to add or remove tabs - but be cautious!; ; Removing tabs can impact other functionality; If adding a tab, it is usually best to apply FXUtils.makeTabUndockable(Tab). Returns:. isStandalone; public boolean isStandalone(); Query whether this is a standalone QuPathGUI instance, as flagged during startup.; It can be important to know this so as to avoid calling System.exit(0) or similar, ; and bringing down some other application entirely. Returns:; true if this is a standalone QuPathGUI instance, false otherwise. getAllViewers; public ObservableList<QuPathViewer> getAllViewers(); Get an unmodifiable observable list of all viewers. Returns:; See Also:. ViewerManager.getAllViewers(). getViewer; public QuPathViewer get",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:17081,avail,availablePathClasses,17081,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['avail'],['availablePathClasses']
Availability,"use instead #detectionCentroidDistances(boolean). qupath.lib.scripting.QP.detectionToAnnotationDistances(). retained only for compatibility of v0.2.0 milestone releases; use instead #detectionToAnnotationDistances(boolean). qupath.lib.scripting.QP.getColorRGB(int...). Use instead QP.makeRGB(int, int, int) or QP.makeARGB(int, int, int, int). qupath.lib.scripting.QP.loadImageData(String, boolean). qupath.lib.scripting.QP.selectObjectsByMeasurement(ImageData<?>, String). qupath.opencv.dnn.DnnTools.registerDnnModel(Class<T>, String). since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. qupath.opencv.features.DelaunayTriangulation.getConnectedNodes(Collection<PathObject>, Collection<double[]>). qupath.opencv.ml.pixel.PixelClassificationMeasurementManager.getMeasurementValue(PathObject, String, boolean). use PixelClassificationMeasurementManager.getMeasurementValue(PathObject, String) or PixelClassificationMeasurementManager.getCachedMeasurementValue(PathObject, String) instead. qupath.opencv.ml.pixel.PixelClassificationMeasurementManager.getMeasurementValue(ROI, String, boolean). use PixelClassificationMeasurementManager.getMeasurementValue(ROI, String) or PixelClassificationMeasurementManager.getCachedMeasurementValue(ROI, String) instead. qupath.opencv.tools.OpenCVTools.getCircularStructuringElement(int). OpenCVTools.createDisk(int, boolean) gives more reliable shapes. qupath.opencv.tools.OpenCVTools.labelImage(Mat, Mat, int). Use OpenCVTools.label(Mat, Mat, int) instead. qupathj.QuPath_Send_Overlay_to_QuPath.createPathObjectsFromROIs(ImagePlus, Roi[], ImageServer<?>, double, boolean, boolean, ImagePlane). use instead QuPath_Send_Overlay_to_QuPath.createObjectsFromROIs(ImagePlus, Collection, double, boolean, boolean, ImagePlane). Deprecated Constructors. Constructor; Description; qupath.lib.gui.commands.MiniViewers.MiniViewerManager(QuPathViewer, Collection<? extends ChannelDisplayInfo>). use MiniViewers.createManager(QuPathViewer, Collection) instead. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/deprecated-list.html:14328,reliab,reliable,14328,javadoc/docs/deprecated-list.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/deprecated-list.html,1,['reliab'],['reliable']
Availability,"used to implement a 'command history'.; ; Where the WorkflowSteps contained in the Workflow are scriptable, then a ; script can be created automatically. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; Workflow();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addStep(WorkflowStep step). Append a new step to the end of the workflow, firing an update event. void; addSteps(Collection<WorkflowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size(). Total number of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructo",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:1693,avail,available,1693,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,1,['avail'],['available']
Availability,"ut all the values from the specified list into this one. Parameters:; list - ; Since:; v0.4.0. keySet; default Set<String> keySet(); Get all available names as a set. Returns:. getMeasurementNames; List<String> getMeasurementNames(); Get the names of all measurements currently in the list. Returns:. getMeasurementName; @Deprecated; String getMeasurementName(int ind); Deprecated.; since v0.4.0; using names is preferred over indexing but getMeasurementNames() can still be used. Get name for the measurement at the specified index in the list. Parameters:; ind - ; Returns:. getMeasurementValue; @Deprecated; double getMeasurementValue(int ind); Deprecated.; since v0.4.0; using get(String) is preferred over using an index. Get value for the measurement at the specified index in the list. Parameters:; ind - ; Returns:. get; double get(String name); Get value for the measurement with the specified name. Parameters:; name - ; Returns:; the measurement value, or Double.NaN if the measurement is not available; Since:; v0.4.0; See Also:. put(String, double). containsKey; boolean containsKey(String name); Returns true if this list contains a measurement with the specified name. Parameters:; name - ; Returns:; Since:; v0.4.0. isEmpty; boolean isEmpty(); Returns true if the list does not contain any measurements. Returns:. size; int size(); Returns the number of measurements in the list. Returns:. supportsDynamicMeasurements; @Deprecated; boolean supportsDynamicMeasurements(); Deprecated.; since v0.4.0; the initial implementation of dynamic measurements was never used. Returns true if the list supports dynamic measurements. ; Dynamic measurements can change their values, and in the interests of efficiency ; are not supported by all MeasurementList implementations.; ; Use of this is strongly discouraged. Returns:. close; void close(); Close the list. Depending on the implementation, the list may then adjust its internal storage to be; more efficient. Specified by:; close in interfa",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/measurements/MeasurementList.html:8168,avail,available,8168,javadoc/docs/qupath/lib/measurements/MeasurementList.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/measurements/MeasurementList.html,1,['avail'],['available']
Availability,"ution. int; getTileX(). Get the x-coordinate of the bounding box for this tile at the tile resolution. int; getTileY(). Get the y-coordinate of the bounding box for this tile at the tile resolution. int; getZ(). Get the z-slice index for this request. int; hashCode();  ; String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static TileRequest createInstance(ImageServer<?> server,; int level,; ImageRegion tileRegion); Create a new tile request for a specified region and resolution level of an image.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead ; to get the tiles that are actually available for an image. Parameters:; server - ; level - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). createInstance; public static TileRequest createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion); Create a new tile request for a specified region, downsample and resolution level.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead.; ; In cases where a new TileRequest is necessary, it is better to use createInstance(ImageServer, int, ImageRegion); where possible.; The current method exists for cases where a TileRequest is a useful data structure but it isn't ; associated with a specific image. Parameters:; path - ; level - ; downsample - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). getRegionRequest; public RegionRequest getRegionRequest(); Get the RegionRequest that this tile represents. Returns:. getDownsample; public double getDownsample(); Get the downsample value for this tile. Returns:. getLevel; public int getLevel(); Get the resolution level. Returns:. getImageX; public int getImageX(); Get the x-coordinate of the bounding box for this tile in the full resolution image.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:3797,down,downsample,3797,javadoc/docs/qupath/lib/images/servers/TileRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html,2,['down'],['downsample']
Availability,"utputHandler(OutputHandler.OutputToObjectConverter<S,T,U> converter); Create an output handler that can be used to add objects to the parent object, applying the ROI mask.; This can result in objects with discontinuous ROIs.; This requires an OutputHandler.OutputToObjectConverter to convert the output to a list of objects. Type Parameters:; S - the image type; T - the mask type; U - the output type; Parameters:; converter - ; Returns:; See Also:. createMaskAndSplitObjectOutputHandler(OutputToObjectConverter). createMaskAndSplitObjectOutputHandler; static <S,; T,; U> OutputHandler<S,T,U> createMaskAndSplitObjectOutputHandler(OutputHandler.OutputToObjectConverter<S,T,U> converter); Create an output handler that can be used to add objects to the parent object, applying the ROI mask and; splitting objects with discontinuous ROIs.; This requires an OutputHandler.OutputToObjectConverter to convert the output to a list of objects. Type Parameters:; S - the image type; T - the mask type; U - the output type; Parameters:; converter - ; Returns:; See Also:. createObjectOutputHandler(OutputToObjectConverter). consumeOutput; static <S,; T,; U> OutputHandler<S,T,U> consumeOutput(); Create a basic do-nothing output handler that consumes the output with no changes.; This returns true regardless of input, without doing anything further. Type Parameters:; S - ; T - ; U - ; Returns:. handleOutputMeasurements; static boolean handleOutputMeasurements(Parameters<?,?> params,; Map<String,? extends Number> output); Handle the output of a pixel processor by adding measurements to the path object. Parameters:; params - ; output - . handleOutputClassification; static boolean handleOutputClassification(Parameters<?,?> params,; PathClass output); Handle the output of a pixel processor by setting a PathClass. Parameters:; params - ; output - . handleOutputClassification; static boolean handleOutputClassification(Parameters<?,?> params,; String output); Handle the output of a pixel processor by ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/OutputHandler.html:5673,mask,mask,5673,javadoc/docs/qupath/lib/experimental/pixels/OutputHandler.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/OutputHandler.html,1,['mask'],['mask']
Availability,"v.tools.OpenCVTools. Get the sum of an image, across all pixels (regardless of channels), ignoring NaNs. SUM - Enum constant in enum class qupath.lib.analysis.heatmaps.DensityMaps.DensityMapType. No normalization; maps provide raw object counts in a defined radius. sumFilter(Mat, int) - Static method in class qupath.opencv.tools.OpenCVTools. Apply a circular 2D sum filter to all channels of an image, with symmetric boundary padding. sumFilter(Mat, int, int) - Static method in class qupath.opencv.tools.OpenCVTools. Apply a circular 2D sum filter to all channels of an image. summarize(Net, int, int, int) - Static method in class qupath.opencv.dnn.DnnTools. Create a (multiline) summary String for a Net, given the specified image input dimensions. summarizeCheckpoints() - Method in class qupath.lib.common.Timeit. Request that checkpoints are summarized in the Timeit.toString() method. summarizeCheckpoints(boolean) - Method in class qupath.lib.common.Timeit. Optionally request that checkpoints are summarized in the Timeit.toString() method. SummaryMeasurementTableCommand - Class in qupath.lib.gui.commands. Show a summary table for an object of a particular type (annotation, detection, TMA core...). SummaryMeasurementTableCommand(QuPathGUI) - Constructor for class qupath.lib.gui.commands.SummaryMeasurementTableCommand. Command to show a summary measurement table, for PathObjects of a specified type (e.g. supports2D() - Method in enum class qupath.opencv.tools.MultiscaleFeatures.MultiscaleFeature. Returns true if the feature can be computed for 2D images. supports3D() - Method in enum class qupath.opencv.tools.MultiscaleFeatures.MultiscaleFeature. Returns true if the feature can be computed for 3D images (z-stacks). supportsAutoUpdate() - Method in class qupath.opencv.ml.OpenCVClassifiers.BoostClassifier. Returns true (the default value). supportsAutoUpdate() - Method in class qupath.opencv.ml.OpenCVClassifiers.DTreesClassifier. Returns true (the default value). supportsAu",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1003873,checkpoint,checkpoints,1003873,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['checkpoint'],['checkpoints']
Availability,"vaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting; Class ScriptParameters. java.lang.Object; qupath.lib.scripting.ScriptParameters. public class ScriptParameters; extends Object; Class that stores key information that is useful for running scripts. Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; ScriptParameters.Builder. Builder class for ScriptParameters. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static ScriptParameters.Builder; builder(). Create a new builder for ScriptParameters. boolean; doUpdateHierarchy(). Request whether to fire an update event for the object hierarchy, if an image data ; object is available. String[]; getArgs(). Get an optional array of string arguments passed to the script. int; getBatchIndex(). Get the index of the current image for batch processing, where 0 is the first and getBatchSize() - 1 ; is the last. Boolean; getBatchSaveResult(). Get whether changes to the image data should be saved. int; getBatchSize(). Get the number of images being batch processed, or 1 if just a single image is being processed. List<Class<?>>; getDefaultImports(). Get default imports that should be included with the script, where possible. List<Class<?>>; getDefaultStaticImports(). Get default static imports that should be included with the script, where possible. Writer; getErrorWriter(). Get the error writer for script output. File; getFile(). Get the file where the script is located. ImageData<?>; getImageData(). Get the current ImageData that should be used with the script. Project<?>; getProject(). Get the current project that should",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/ScriptParameters.html:1080,avail,available,1080,javadoc/docs/qupath/lib/scripting/ScriptParameters.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/ScriptParameters.html,1,['avail'],['available']
Availability,"veObject(PathObject pathObject,; boolean keepChildren); Remove the specified object from the current PathObjectHierarchy, ; optionally keeping or removing descendant objects. Parameters:; pathObject - ; keepChildren - . removeObjects; public static void removeObjects(PathObject[] pathObjects,; boolean keepChildren); Remove the specified array of objects from the current PathObjectHierarchy, ; optionally keeping or removing descendant objects. Parameters:; pathObjects - ; keepChildren - . nObjects; public static int nObjects(); Get a count of the total number of objects in the current hierarchy. Returns:; See Also:. PathObjectHierarchy.nObjects(). removeObjects; public static void removeObjects(Collection<? extends PathObject> pathObjects,; boolean keepChildren); Remove the specified collection of objects from the current PathObjectHierarchy, ; optionally keeping or removing descendant objects. Parameters:; pathObjects - ; keepChildren - . isTMADearrayed; public static boolean isTMADearrayed(); Returns true if TMA cores are available. Returns:. clearAllObjects; public static void clearAllObjects(); Remove all the objects in the current PathObjectHierarchy, and clear the selection. See Also:. getCurrentHierarchy(). clearAllObjects; public static void clearAllObjects(Class<? extends PathObject> cls); Remove all the objects of a specified Java class. Parameters:; cls - the class, e.g. PathAnnotationObject.class, PathDetectionObject.class, or; null if all objects should be removed.; See Also:. getCurrentHierarchy(); PathObjectHierarchy.getObjects(java.util.Collection<qupath.lib.objects.PathObject>, java.lang.Class<? extends qupath.lib.objects.PathObject>). clearAnnotations; public static void clearAnnotations(); Remove all the annotation objects from the current PathObjectHierarchy. See Also:. getCurrentHierarchy(); clearAllObjects(). clearDetections; public static void clearDetections(); Remove all the detection objects from the current PathObjectHierarchy. See Also:. ge",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:59908,avail,available,59908,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['avail'],['available']
Availability,"ved data file within a particular viewer, optionally keeping the same ImageServer as is currently open. ReadOnlyObjectProperty<Project<BufferedImage>>; projectProperty(). Read-only property representing the currently-open project. boolean; promptToOpenImageFile(). Show a file chooser to open a new image in the current viewer. boolean; promptToOpenImageFileOrUri(). Show a dialog to open a new image in the current viewer, with support ; for entering a URL (rather than requiring a local file only). ReadOnlyBooleanProperty; readOnlyProperty(). Property indicating whether QuPath is in 'read-only' mode. void; refreshProject(). Refresh the project, updating the display if required. void; refreshTitle(). Refresh the title bar in the main QuPath window. void; requestAutomaticUpdateCheck(). Request an automated update check in a background thread. void; requestFullUpdateCheck(). Request a manual update check in a background thread. boolean; resetAvailablePathClasses(). Populate the availablePathClasses with a default list. boolean; runPlugin(PathPlugin<BufferedImage> plugin,; String arg,; boolean doInteractive). Run a plugin, interactively (i.e. Object; runScript(File file,; String script). Convenience method to execute a script. void; sendQuitRequest(). Request to quit QuPath. boolean; setAccelerator(String menuCommand,; String combo). Set an accelerator for the specified menu command. boolean; setAccelerator(MenuItem item,; KeyCombination combo). Set the accelerator for the specified menu item. boolean; setAccelerator(org.controlsfx.control.action.Action action,; KeyCombination combo). Set the accelerator for the specified action. void; setProject(Project<BufferedImage> project). Set the active project, triggering any necessary GUI updates. void; setReadOnly(boolean readOnly). Specify whether QuPath should be in 'read-only' mode. void; setScriptEditor(ScriptEditor scriptEditor). Set a new ScriptEditor, which will be used from now on. BooleanProperty; showAnalysisPaneProperty",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:9214,avail,availablePathClasses,9214,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['avail'],['availablePathClasses']
Availability,"vel,; ImageRegion tileRegion); Create a new tile request for a specified region and resolution level of an image.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead ; to get the tiles that are actually available for an image. Parameters:; server - ; level - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). createInstance; public static TileRequest createInstance(String path,; int level,; double downsample,; ImageRegion tileRegion); Create a new tile request for a specified region, downsample and resolution level.; ; Most of the time this should not be needed: use ImageServer.getTileRequestManager() instead.; ; In cases where a new TileRequest is necessary, it is better to use createInstance(ImageServer, int, ImageRegion); where possible.; The current method exists for cases where a TileRequest is a useful data structure but it isn't ; associated with a specific image. Parameters:; path - ; level - ; downsample - ; tileRegion - ; Returns:; See Also:. createInstance(ImageServer, int, ImageRegion). getRegionRequest; public RegionRequest getRegionRequest(); Get the RegionRequest that this tile represents. Returns:. getDownsample; public double getDownsample(); Get the downsample value for this tile. Returns:. getLevel; public int getLevel(); Get the resolution level. Returns:. getImageX; public int getImageX(); Get the x-coordinate of the bounding box for this tile in the full resolution image. Returns:. getImageY; public int getImageY(); Get the y-coordinate of the bounding box for this tile in the full resolution image. Returns:. getImageWidth; public int getImageWidth(); Get the width of the bounding box for this tile in the full resolution image. Returns:. getImageHeight; public int getImageHeight(); Get the height of the bounding box for this tile in the full resolution image. Returns:. getTileX; public int getTileX(); Get the x-coordinate of the bounding box for this tile at the tile res",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html:4312,down,downsample,4312,javadoc/docs/qupath/lib/images/servers/TileRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/TileRequest.html,1,['down'],['downsample']
Availability,"vel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Parameters:; fullWidth - full-resolution image width; fullHeight - full-resolution image height. Method Details. addLevelByDownsample; public ImageServerMetadata.ImageResolutionLevel.Builder addLevelByDownsample(double downsample); Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. Parameters:; downsample - ; Returns:. addFullResolutionLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addFullResolutionLevel(); Add the full-resolution image as a level of the pyramid.; It is not required that this form part of the pyramid in cases where this image pyramid might ; be used to provide a smaller overlay of a larger image, and not itself contain ; pixels at the highest resolution. Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(double downsample,; int levelWidth,; int levelHeight); Add a new level by providing a downsample value, width and height.; This avoids relying on any rounding decisions made when specifying the dimensions or downsample value only. Parameters:; downsample - ; levelWidth - ; levelHeight - ; Returns:. addLevel; public ImageServerMetadata.ImageResolutionLevel.Builder addLevel(int levelWidth,; int levelHeight); Add a new level based on level dimensions, estimating the corresponding downsample value as required. Paramete",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:2799,down,downsample,2799,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,1,['down'],['downsample']
Availability,"ventHandler;  ; MOVE - Static variable in class qupath.lib.gui.viewer.tools.PathTools. Move tool. MOVE_TOOL - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; MOVE_TOOL - Variable in class qupath.lib.gui.ToolManager;  ; MoveToolEventHandler - Class in qupath.lib.gui.viewer.tools.handlers. The MoveTool is used for quite a lot of things, movement-related:; movement around an image (panning), moving ROIs (translating) and moving individual; 'handles' of ROIs (resizing/reshaping). MoveToolEventHandler() - Constructor for class qupath.lib.gui.viewer.tools.handlers.MoveToolEventHandler;  ; MoveToolEventHandler.ViewerMover - Class in qupath.lib.gui.viewer.tools.handlers. Helper class for panning a QuPathViewer (reasonably) smoothly. multiChannel(String, List<ColorTransforms.ColorTransform>, Function<double[][], Double>) - Static method in class qupath.lib.experimental.pixels.MeasurementProcessor.Measurements. Create a new object measurement that requires multiple channels as input, using the main ROI of the object; as a mask. multiChannel(String, List<ColorTransforms.ColorTransform>, Function<double[][], Double>, Function<PathObject, ROI>) - Static method in class qupath.lib.experimental.pixels.MeasurementProcessor.Measurements. Create a new object measurement that requires multiple channels as input. multichannelOutput(boolean) - Method in class qupath.lib.images.servers.LabeledImageServer.Builder. If true, the output image consists of multiple binary images concatenated as different channels, ; so that the channel number relates to a classification. MULTICLASS_PROBABILITY - Enum constant in enum class qupath.lib.images.servers.ImageServerMetadata.ChannelType. Each channel represents a probability value, where each pixel is potentially part of multiple classes. multiply(double...) - Static method in class qupath.opencv.ops.ImageOps.Core. Multiply all pixels by a constant. multiply(Mat, double) - Static method in class qupath.opencv.tools.GroovyCV.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:700598,mask,mask,700598,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['mask'],['mask']
Availability,"verPath(File file); throws FileNotFoundException,; IOException,; ClassNotFoundException; Deprecated.; This was useful in QuPath v0.1.2 and earlier, since all information to construct a server was stored within its path. ; In v0.2 and later, the server path is in general not sufficient to construct a server, and this method lingers ; only for backwards compatibility. It will be removed in a later version. Read the server path from a serialized file, if present. This is assumed to be the first line within the file. Parameters:; file - ; Returns:; The server path that is stored within the file, or null if no path could be found.; Throws:; IOException; FileNotFoundException; ClassNotFoundException; See Also:. extractServerBuilder(Path). extractServerBuilder; public static <T>; ImageServerBuilder.ServerBuilder<T> extractServerBuilder(Path file); throws IOException; Extract a ImageServerBuilder.ServerBuilder from a serialized .qpdata file. Parameters:; file - ; Returns:; Throws:; IOException - if there is an error creating a ImageServerBuilder.ServerBuilder, or the file is not a valid QuPath data file.; Since:; 0.3. createObjectInputStream; public static final ObjectInputStream createObjectInputStream(InputStream stream); throws IOException; Create a new ObjectInputStream, setting the default ObjectInputFilter for core QuPath-related ; and Java classes only. Parameters:; stream - ; Returns:; Throws:; IOException. readImageData; public static <T> ImageData<T> readImageData(InputStream stream,; ImageData<T> imageData,; ImageServer<T> server,; Class<T> cls); throws IOException; Read ImageData from an InputStream into an existing ImageData object, or creating a new one if required. Parameters:; stream - ; imageData - ; server - an ImageServer to use rather than any that might be stored within the serialized data. Should be null to use the serialized path to build a new server.; The main purpose of this is to make it possible to open ImageData where the original image location ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/PathIO.html:6821,error,error,6821,javadoc/docs/qupath/lib/io/PathIO.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/PathIO.html,1,['error'],['error']
Availability,"vision. getPathObjects() - Method in class qupath.lib.io.FeatureCollection. Get the objects being wrapped. getPathObjects() - Method in class qupath.lib.objects.DefaultPathObjectConnectionGroup;  ; getPathObjects() - Method in interface qupath.lib.objects.PathObjectConnectionGroup. Get an unmodifiable collection containing all the PathObjects contained within this group. getPathObjects() - Method in class qupath.opencv.features.DelaunayTriangulation;  ; getPathObjectsForRegion(ImageRegion) - Method in class qupath.lib.objects.DefaultPathObjectConnectionGroup;  ; getPathObjectsForRegion(ImageRegion) - Method in interface qupath.lib.objects.PathObjectConnectionGroup. Get all the objects with connections that may intersect the specified region. getPenManager() - Static method in class qupath.lib.gui.viewer.tools.QuPathPenManager. Get the current PenInputManager. getPixelCalibration() - Method in interface qupath.lib.images.PathImage. Get the PixelCalibration representing actual pixel sizes in this image, with downsampling applied if necessary. getPixelCalibration() - Method in interface qupath.lib.images.servers.ImageServer. Get the PixelCalibration object from the current metadata. getPixelCalibration() - Method in class qupath.lib.images.servers.ImageServerMetadata. Get a PixelCalibration object representing the pixel size information for this metadata object. getPixelCalibration() - Method in class qupath.process.gui.commands.ml.ClassificationResolution. Get the PixelCalibration used to apply this resolution. getPixelClassificationRegionFilter() - Method in class qupath.lib.gui.viewer.OverlayOptions;  ; getPixelClassificationServer(ImageData<BufferedImage>) - Method in class qupath.lib.gui.viewer.overlays.PixelClassificationOverlay. Get the ImageServer that would be used by this overlay for the specified ImageData. getPixelClassifiers() - Method in interface qupath.lib.projects.Project. Get a manager for pixel classifiers saved within this project. getPixelHeight() ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:481935,down,downsampling,481935,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['down'],['downsampling']
Availability,"w ImageServerMetadata object that takes an existing metadata object as a starting point, ; but allows individual properties to be overridden. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata; build(). Build an ImageServerMetadata. ImageServerMetadata.Builder; channels(Collection<ImageChannel> channels). Specify the image channels. ImageServerMetadata.Builder; channelType(ImageServerMetadata.ChannelType type). Specify the interpretation of channels. ImageServerMetadata.Builder; classificationLabels(Map<Integer,PathClass> classificationLabels). Specify the interpretation of classification labels. ImageServerMetadata.Builder; height(int height). Specify the full-resolution image height. ImageServerMetadata.Builder; levels(Collection<ImageServerMetadata.ImageResolutionLevel> levels). Specify resolution levels, where the largest image should come first. ImageServerMetadata.Builder; levelsFromDownsamples(double... downsamples). Specify downsample values for pyramidal levels. ImageServerMetadata.Builder; magnification(double magnification). Specify a magnification value for the highest-resolution image. ImageServerMetadata.Builder; maxValue(Number val). Specify the maximum value supported by this image. ImageServerMetadata.Builder; minValue(Number val). Specify the minimum value supported by this image. ImageServerMetadata.Builder; name(String name). Specify the image name. ImageServerMetadata.Builder; pixelSizeMicrons(Number pixelWidthMicrons,; Number pixelHeightMicrons). Specify the pixel sizes, in microns. ImageServerMetadata.Builder; pixelType(PixelType pixelType). Specify the bit-depth of the image. ImageServerMetadata.Builder; preferredTileSize(int tileWidth,; int tileHeight). Specify the preferred tile height and width. ImageServerMetadata.Builder; rgb(boolean isRGB). Specify that the image stores pixels in (A)RGB form. ImageServerMetadata.Builder; sizeT(int sizeT). Specify the number of time po",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html:2005,down,downsamples,2005,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.Builder.html,1,['down'],['downsamples']
Availability,"w their legends with circular/square markers... setLineWidth(double) - Method in class qupath.lib.gui.charts.ChartThresholdPane. Set the threshold line width. setLivePrediction(boolean) - Method in class qupath.lib.gui.viewer.overlays.PixelClassificationOverlay. Turn on or off live prediction. setLocationStringFunction(AbstractOverlay.LocationStringFunction) - Method in class qupath.lib.gui.viewer.overlays.AbstractOverlay. Set a custom function to calculate a location string for the overlay. setLocked(boolean) - Method in class qupath.lib.objects.PathObject. Set locked status, if possible. setLocked(boolean) - Method in class qupath.lib.objects.PathROIObject. Set locked flag, indicating that the object ROI should not be modified. setLUTColor(int, int, int) - Method in class qupath.lib.display.DirectServerChannelInfo. Set the 'maximum' color, which defines the lookup table to use. setMagnification(double) - Method in class qupath.lib.gui.viewer.QuPathViewer. Set the downsample factor based upon magnification values. setMaskImageNames(boolean) - Method in interface qupath.lib.projects.Project. Request that entries return masked image names, rather than the 'true' image names. setMaxDisplay(float) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; setMaxDisplay(float) - Method in interface qupath.lib.display.ChannelDisplayInfo.ModifiableChannelDisplayInfo. Set the max display value for this channel. setMaxHeight(double, Region...) - Static method in class qupath.lib.gui.tools.PaneTools. Deprecated.; Set the max height property for the specified regions. setMaxThreads(int) - Method in class qupath.lib.gui.viewer.overlays.PixelClassificationOverlay. Set the maximum number of threads that may be used during live prediction. setMaxWidth(double, Region...) - Static method in class qupath.lib.gui.tools.PaneTools. Deprecated.; Set the max width property for the specified regions. setMeasurementMapper(MeasurementMapper) - Method in class qupath.lib.gui.viewer.Over",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:933718,down,downsample,933718,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['down'],['downsample']
Availability,"wapNameAndClass(PathObject pathObject,; boolean includeColor); Swap the name and PathClass of an object.; This can be used as a simple way to preserve a classification that might be required later. Parameters:; pathObject - the object to adjust; includeColor - optionally set the color of the object to the color of the classification. parseTMALabelString; public static String[] parseTMALabelString(String labelString); Parse a string input representing potential TMA core labels.; This can be a space-separated list, or an ascending or descending numeric or alphabetic range.; ; Examples:; ; ""A-H""; ""1-9""; ""H-A""; ""A B D E"". Parameters:; labelString - ; Returns:. getSupportedObjects; public static Collection<? extends PathObject> getSupportedObjects(Collection<? extends PathObject> availableObjects,; Collection<Class<? extends PathObject>> supportedClasses); From a collection of available objects, extract those that are instances of specified supported classes. Parameters:; availableObjects - ; supportedClasses - ; Returns:. getROI; public static ROI getROI(PathObject pathObject,; boolean preferNucleus); Get the ROI for a PathObject, with a preference for the nucleus ROI of a cell. Parameters:; pathObject - ; preferNucleus - ; Returns:. getNucleusOrMainROI; public static ROI getNucleusOrMainROI(PathObject pathObject); Get the nucleus ROI for a cell, or the main ROI if no nucleus is found.; This is equivalent to getROI(pathObject, true), but avoids the mysterious boolean flag to make; code more readable. Parameters:; pathObject - ; Returns:; Since:; v0.5.0; See Also:. getNucleusROI(PathObject). getNucleusROI; public static ROI getNucleusROI(PathObject pathObject); Get the nucleus ROI for a cell, or null if the input is not a cell or no nucleus is found. Parameters:; pathObject - ; Returns:; Since:; v0.5.0; See Also:. getNucleusOrMainROI(PathObject). getDescendantObjects; public static Collection<PathObject> getDescendantObjects(PathObject pathObject,; Collection<PathObject> ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:31289,avail,availableObjects,31289,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['avail'],['availableObjects']
Availability,"when the task is done!. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. paintTileBorders; protected static boolean paintTileBorders. tileListeners; protected List<TileListener<BufferedImage>> tileListeners. cache; protected Map<RegionRequest,BufferedImage> cache. thumbnailCache; protected Map<RegionRequest,BufferedImage> thumbnailCache. Method Details. paintRegionCompletely; public void paintRegionCompletely(ImageServer<BufferedImage> server,; Graphics g,; Shape clipShapeVisible,; int zPosition,; int tPosition,; double downsampleFactor,; ImageObserver observer,; ImageRenderer imageDisplay,; long timeoutMilliseconds); Similar to paintRegion, but wait until all the tiles have arrived (or abort if it is taking too long). Specified by:; paintRegionCompletely in interface ImageRegionRenderer; Parameters:; server - ; g - ; clipShapeVisible - ; zPosition - ; tPosition - ; downsampleFactor - ; observer - ; imageDisplay - ; timeoutMilliseconds - Timeout after which a request is made from the PathImageServer directly, rather than waiting for tile requests. paintRegion; public void paintRegion(ImageServer<BufferedImage> server,; Graphics g,; Shape clipShapeVisible,; int zPosition,; int tPosition,; double downsampleFactor,; BufferedImage imgThumbnail,; ImageObserver observer,; ImageRenderer imageDisplay); Description copied from interface: ImageRegionRenderer; Paint an image region. Specified by:; paintRegion in interface ImageRegionRenderer; Parameters:; server - the server representing the image that shown be painted; g - the graphics object upon which to paint; clipShapeVisible - the visible shape representing the area of the graphics object that should be filled; zPosition - the z-stack position; tPosition - the timepoint position; downsampleFactor - the downsample factor; imgThumbnail - a thumbnail image; if not null, this will be used to 'fill the gaps'; observer - an ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/stores/DefaultImageRegionStore.html:4979,down,downsampleFactor,4979,javadoc/docs/qupath/lib/gui/images/stores/DefaultImageRegionStore.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/stores/DefaultImageRegionStore.html,1,['down'],['downsampleFactor']
Availability,"with a PixelProcessor. Since:; v0.5.0. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; Parameters.Builder<S,T>. Builder class for Parameters. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static <S,; T> Parameters.Builder<S,T>; builder(). Create a new builder for parameters. S; getImage(). Get the image to process. ImageData<BufferedImage>; getImageData(). Get the image data. T; getMask(). Get the mask associated with the main ROI or the parent object, or null if no mask is available. T; getMask(ROI roi). Get the mask associated with any ROI, or null if no mask is available. PathObject; getParent(). Get the parent object. PathObject; getParentOrProxy(). Get the parent, or a proxy parent if one has been specified. RegionRequest; getRegionRequest(). Get the region request. ImageServer<BufferedImage>; getServer(). Get the server. TileRequest; getTileRequest(). Get the tile request, if available. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getImageData; public ImageData<BufferedImage> getImageData(); Get the image data. Returns:. getServer; public ImageServer<BufferedImage> getServer(); Get the server. This is often the accessed from getImageData(), but in some cases it may be different; (e.g. if the processing should be applied to a transformed image). Returns:. getRegionRequest; public RegionRequest getRegionRequest(); Get the region request. Returns:. getTileRequest; public TileRequest getTileRequest(); Get the tile request, if available.; This should be used when the region request is derived at a specific tile resolution, because it is able to; provide more accurate tile coordinates without rounding errors. Returns:. getImage; public S getImage(); throws IOException; Get the image to process.; This may return a cached value, so it is important t",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/Parameters.html:1584,avail,available,1584,javadoc/docs/qupath/lib/experimental/pixels/Parameters.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/Parameters.html,1,['avail'],['available']
Availability,"with the text (may be null). ReadOnlyStringProperty; text. Read only property containing the message text. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; InfoMessage.MessageType. The type of message, which can be used for styling. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ReadOnlyObjectProperty<Number>; countProperty(). Read only property containing any count associated with the text (may be null). static InfoMessage; error(String text). Create an error message with static text. static InfoMessage; error(String text,; int count). Create an error message with static text and a count. static InfoMessage; error(ObservableNumberValue count). Create a error message to show a count of errors. static InfoMessage; error(ObservableValue<String> text). Create an error message. static InfoMessage; error(ObservableValue<String> text,; ObservableNumberValue count). Create an error message with a count. int; getCount(). Counts associated with the message, or -1 if the count is null. InfoMessage.MessageType; getMessageType(). Type of the message. String; getText(). Text of the message. static InfoMessage; info(String text). Create an information message with static text. static InfoMessage; info(String text,; int count). Create an information message with static text and a count. static InfoMessage; info(ObservableNumberValue count). Create a information message to show a count of messages. static InfoMessage; info(ObservableValue<String> text). Create an information message. static InfoMessage; info(ObservableValue<String> text,; ObservableNumberValue count). Create an information message with a count. ReadOnlyStringProperty; textProperty(). Read only property containing the message text. static InfoMessage; warning(String text). Create a warning message with static text. static InfoMessage; warning(String text,; int count). Create a warning message with static tex",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/InfoMessage.html:1671,error,error,1671,javadoc/docs/qupath/lib/gui/actions/InfoMessage.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/InfoMessage.html,1,['error'],['error']
Availability,"wnsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelType, getPreferredDownsamples, getThumbnailDownsampleFactor, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, toString. Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getTileRequestManager, getWidth, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion. Method Details. getInstanceLabels; public Map<PathObject,Integer> getInstanceLabels(); Get a mapping between objects and instance labels. Returns:; the instance label map, or an empty map if no objects are available or ; LabeledImageServer.Builder.useInstanceLabels() was not selected. getLabels; public Map<PathClass,Integer> getLabels(); Get an unmodifiable map of classifications and their corresponding labels.; Note that multiple classifications may use the same integer label. Returns:; a map of labels, or empty map if none are available or useInstanceLabels() was selected. getBoundaryLabels; public Map<PathClass,Integer> getBoundaryLabels(); Get an unmodifiable map of classifications and their corresponding boundary labels, if available.; Note that multiple classifications may use the same integer label. Returns:; a map of boundary labels, or empty map if none are available or useInstanceLabels() was selected. createServerBuilder; protected ImageServerBuilder.ServerBuilder<BufferedImage> createServerBuilder(); Returns null (does not support ServerBuilders). Specified by:; createServerBuilder in class AbstractImageServer<BufferedImage>; Returns:. getURIs; public Collect",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html:4434,avail,available,4434,javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.html,1,['avail'],['available']
Availability,"wnsamples); Specify downsample factors to use in the final pyramid.; ; Note that the downsample values provided will be sorted in ascending order. Parameters:; downsamples - ; Returns:; this builder. dyadicDownsampling; public OMEPyramidWriter.Builder dyadicDownsampling(); Downsample by factors of 2.; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double scale); Downsample by specific increasing factor each time (e.g. if scale == 2, then downsamples will be 1, 2, 4, 8...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; scale - ; Returns:; this builder; See Also:. scaledDownsampling(double). scaledDownsampling; public OMEPyramidWriter.Builder scaledDownsampling(double minDownsample,; double scale); Downsample by specific increasing factor each time, with a specified initial downsample value ; (e.g. if scale == 2, then downsamples will be minDownsample, minDownsample*2, minDownsample*4...).; ; Note that the highest downsample value will depend on the tile size, ; so the tile size should be set first. Parameters:; minDownsample - the starting downsample, defining the highest-resolution image (usually 1.0); scale - the scale used to define successive downsamples; Returns:; this builder; See Also:. scaledDownsampling(double). channels; public OMEPyramidWriter.Builder channels(int... channels); Override default of writing all channels in their original order to be able to specify which ; channels are output, and in which order. Parameters:; channels - zero-based channel indices for all channels that should be exported, in the desired export order.; Returns:; this builder. build; public OMEPyramidWriter.OMEPyramidSeries build(); Create an OMEPyramidWriter.OMEPyramidSeries to write the OME-TIFF. Returns",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html:10820,down,downsample,10820,javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/writers/ome/OMEPyramidWriter.Builder.html,1,['down'],['downsample']
Availability,"workflow.DefaultScriptableWorkflowStep;  ; equals(Object) - Method in class qupath.lib.regions.ImagePlane;  ; equals(Object) - Method in class qupath.lib.regions.ImageRegion;  ; equals(Object) - Method in class qupath.lib.regions.RegionRequest;  ; equals(Object) - Method in class qupath.opencv.tools.LocalNormalization.SmoothingScale;  ; equals(Object) - Method in class qupath.process.gui.commands.ml.BoundaryStrategy;  ; equals(Object) - Method in class qupath.process.gui.commands.ml.ClassificationResolution;  ; equalTo(String) - Method in class qupath.lib.classifiers.object.ObjectClassifiers.ClassifyByMeasurementBuilder. Set the classification (by name) for objects for which the specified measurement has a value exactly equal to the threshold. equalTo(PathClass) - Method in class qupath.lib.classifiers.object.ObjectClassifiers.ClassifyByMeasurementBuilder. Set the classification for objects for which the specified measurement has a value exactly equal to the threshold. error() - Method in class qupath.lib.gui.dialogs.Dialogs.Builder. Deprecated.; Create an error alert dialog. error(String) - Static method in class qupath.lib.gui.actions.InfoMessage. Create an error message with static text. error(String, int) - Static method in class qupath.lib.gui.actions.InfoMessage. Create an error message with static text and a count. error(ObservableNumberValue) - Static method in class qupath.lib.gui.actions.InfoMessage. Create a error message to show a count of errors. error(ObservableValue<String>) - Static method in class qupath.lib.gui.actions.InfoMessage. Create an error message. error(ObservableValue<String>, ObservableNumberValue) - Static method in class qupath.lib.gui.actions.InfoMessage. Create an error message with a count. ERROR - Enum constant in enum class qupath.lib.gui.actions.InfoMessage.MessageType. Error or exception. ERROR - Enum constant in enum class qupath.lib.gui.logging.LogManager.LogLevel. Error logging (only if something goes recognizably wrong). esc",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:283031,error,error,283031,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['error'],['error']
Availability,"ws inspection of names and sizes. Parameters:; net - the Net to parse; width - input width; height - input height; channels - input channels; batchSize - input batch size; Returns:. parseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a StringVector. Parameters:; vector - ; Returns:. parseShape; public static List<DnnShape> parseShape(MatShapeVector vector); Extract Mat dimensions from a MatShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Othe",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:7943,down,downsample,7943,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['down'],['downsample']
Availability,"wser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.common; Class Timeit. java.lang.Object; qupath.lib.common.Timeit. public class Timeit; extends Object; Helper class to time code execution.; It is designed to be particularly useful when scripting.; The main timing report is implemented as timeit.toString() so that it can easily be printed.; ; A simple use is to start the timer before running code and print it at the end:; ; var timeit = new Timeit().start();; // Do something; timeit.stop(); // Optional - we can also print at any time; System.out.println(timeit);; ; . Checkpoints can also be added to output times for individual stages:; ; var timeit = new Timeit();; timeit.checkpoint(""First checkpoint"");; // Do something; timeit.checkpoint(""Second checkpoint"");; // Do something else; timeit.stop();; System.out.println(timeit);; ; . Finally, a Timeit can be used to repeatedly run the same code multiple times, and print the timings at the end.; ; ; var timeit = new Timeit(); .microseconds(); .checkpointAndRun(""Greeting"", () -> System.out.println(""Hello!""), 10); .summarizeCheckpoints(); .stop();; System.out.println(timeit);; ; . Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; Timeit.Checkpoint. Class representing a named checkpoint with a timestamp in nanoseconds. Constructor Summary; Constructors. Constructor; Description; Timeit();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Timeit; autoUnits();  ; Timeit; checkpoint(). Create a new checkpoint with a default name. Timeit; checkpoint(String name). Create a new checkpoint with the specified name. Timeit; checkpointAndRun(Runnable runnable)",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:1028,checkpoint,checkpoint,1028,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,2,['checkpoint'],['checkpoint']
Availability,"wser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.parameters; Class ChoiceParameter<S>. java.lang.Object; qupath.lib.plugins.parameters.ChoiceParameter<S>. Type Parameters:; S - . All Implemented Interfaces:; Serializable, Parameter<S>. public class ChoiceParameter<S>; extends Object; Parameter that supports a list of choices.; ; May be displayed as a drop-down list. Author:; Pete Bankhead; See Also:. Serialized Form. Field Summary; Fields. Modifier and Type; Field; Description; protected List<S>; choices;  ; protected S; lastValue;  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Parameter<S>; duplicate(). Create a new Parameter with the same text and value. List<S>; getChoices(). Get a list of available choices. S; getDefaultValue(). Get a default value to use if the Parameter has not been otherwise set. String; getHelpText(). Get a description of the meaning of the Parameter; may be displayed e.g. String; getPrompt(). Get some prompt text that may be displayed to a user. S; getValue(). Get the current set value (may be null). S; getValueOrDefault(). Get the current set value, or any default if no value has been set. boolean; hasHelpText(). Query whether getHelpText() returns a meaningful String (as opposed to null). boolean; isHidden(). Test is the 'hidden' flag is set for the parameter. boolean; isValidInput(S value). Query if a specified value would be valid for this parameter. void; resetValue(). Set last value to null (so default can be used). void; setHidden(boolean hidden). Mark that a parameter should not be displayed to a user. boolean; setStringLastValue(Locale locale,; String value). This will only work for string choices... boolean; setValue(S value). Set the Param",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html:1067,avail,available,1067,javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ChoiceParameter.html,1,['avail'],['available']
Availability,"xelType.; ; Note, OpenCV has no matching type for PixelType.UINT32. In this case a signed 32-bit int ; type will be returned, and a warning logged. Parameters:; pixelType - the QuPath pixel type; Returns:; the closest OpenCV pixel type; Throws:; IllegalArgumentException - if the PixelType is unknown. apply; public static void apply(Mat mat,; DoubleUnaryOperator operator); Apply an operation to the pixels of an image.; ; No type conversion is applied; it is recommended to use floating point images, or otherwise check ; that clipping, rounding and non-finite values are handled as expected. Parameters:; mat - image; operator - operator to apply to pixels of the image, in-place. createMask; public static Mat createMask(Mat mat,; DoublePredicate predicate,; double trueValue,; double falseValue); Create a mask by applying a predicate to pixel values. Parameters:; mat - the input image; predicate - the predicate to apply to each pixel; trueValue - the value to include in the mask for pixels that match the predicate; falseValue - the value to include in the mask for pixels that do not match the predicate; Returns:; the mask; See Also:. createBinaryMask(Mat, DoublePredicate). createBinaryMask; public static Mat createBinaryMask(Mat mat,; DoublePredicate predicate); Create a binary mask (0, 255 values) by applying a predicate to pixel values. Parameters:; mat - the input image; predicate - the predicate to apply to each pixel; Returns:; the mask; See Also:. createMask(Mat, DoublePredicate, double, double). replaceValues; public static void replaceValues(Mat mat,; double originalValue,; double newValue); Replace a specific value in an array.; ; If the value to replace is NaN, use instead replaceNaNs(Mat, double). Parameters:; mat - array; originalValue - value to replace; newValue - value to include in the output; See Also:. replaceNaNs(Mat, double); fill(Mat, Mat, double). replaceNaNs; public static void replaceNaNs(Mat mat,; double newValue); Replace NaNs in a floating point ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/OpenCVTools.html:15212,mask,mask,15212,javadoc/docs/qupath/opencv/tools/OpenCVTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/OpenCVTools.html,3,['mask'],['mask']
Availability,"xels. isCircle(double, double) - Method in class qupath.lib.roi.EllipseROI. Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. isCompatible(String, int, String) - Method in interface qupath.lib.scripting.languages.AutoCompletions.Completion. Test if this completion is compatible with the provided text. isCompatible(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Check if an image display is 'compatible' with this one. isCompatibleMetadata(ImageServerMetadata) - Method in class qupath.lib.images.servers.ImageServerMetadata. Returns true if a specified ImageServerMetadata is compatible with this one, that is it has the same path and dimensions; (but possibly different pixel sizes, magnifications etc.). isComplete() - Method in class qupath.lib.plugins.ParallelTileObject. Returns true if setComplete() has been called. isCudaAvailable() - Static method in class qupath.opencv.dnn.DnnTools. Query whether CUDA is reported as available by OpenCV. isDAB(StainVector) - Static method in class qupath.lib.color.ColorDeconvolutionStains. Check if the name of a StainVector is ""dab"" or ""d"" (ignoring case). isDefaultStyle() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Check if the default JavaFX style is used. isDerivedClass() - Method in class qupath.lib.objects.classes.PathClass. Returns true if #getParentClass() != null. isDerivedFrom(PathClass) - Method in class qupath.lib.objects.classes.PathClass. Returns true if this class, or any ancestor class, is equal to the specified parent class. isDetection() - Method in class qupath.lib.objects.PathObject. Returns true if the object is a detection. isDirectory(String) - Static method in class qupath.lib.scripting.QP. Query if a file path corresponds to a directory. isDynamic() - Method in interface qupath.lib.measurements.Measurement. Deprecated. isEditable() - Method in class qupath.lib.objects.PathDetectionObject. Always returns false - d",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:617852,avail,available,617852,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"xists and is a directory, false otherwise. getProjectEntry; public static ProjectImageEntry<BufferedImage> getProjectEntry(); Get the project entry for the currently-open image within the current project, ; or null if no project/image is open. Returns:. getProjectEntryMetadataValue; public static String getProjectEntryMetadataValue(String key); Get the metadata value from the current project entry for the specified key, ; or null if no such metadata value exists (or no project entry is open). Parameters:; key - ; Returns:. getCurrentHierarchy; public static PathObjectHierarchy getCurrentHierarchy(); Get the PathObjectHierarchy of the current ImageData. Returns:; See Also:. getCurrentImageData(). getCurrentServer; public static ImageServer<?> getCurrentServer(); Get the ImageServer of the current ImageData. Returns:; See Also:. getCurrentImageData(). getCurrentImageName; public static String getCurrentImageName(); Get the name of the current image.; ; This first checks the name associated with getProjectEntry(), if available.; If no name is found (e.g. because no project is in use, then the name is extracted ; from the metadata of getCurrentServer().; If this is also missing, then null is returned. Returns:; Since:; v0.4.0; See Also:. getCurrentImageNameWithoutExtension(). getCurrentImageNameWithoutExtension; public static String getCurrentImageNameWithoutExtension(); Get the name of the current image, removing any file extension.; Equivalent to; ; var name = GeneralTools.getNameWithoutExtension(getCurrentName());; . Returns:; Since:; v0.4.0; See Also:. getCurrentImageName(). getSelectedObjects; public static Collection<PathObject> getSelectedObjects(); Get the selected objects within the current PathObjectHierarchy.; ; Note: this implementation returns the selected objects directly. The returned collection ; may not be modifiable. Returns:; See Also:. getCurrentHierarchy(). getSelectedObject; public static PathObject getSelectedObject(); Get the primary selected obje",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:56368,avail,available,56368,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['avail'],['available']
Availability,"y be printed.; ; A simple use is to start the timer before running code and print it at the end:; ; var timeit = new Timeit().start();; // Do something; timeit.stop(); // Optional - we can also print at any time; System.out.println(timeit);; ; . Checkpoints can also be added to output times for individual stages:; ; var timeit = new Timeit();; timeit.checkpoint(""First checkpoint"");; // Do something; timeit.checkpoint(""Second checkpoint"");; // Do something else; timeit.stop();; System.out.println(timeit);; ; . Finally, a Timeit can be used to repeatedly run the same code multiple times, and print the timings at the end.; ; ; var timeit = new Timeit(); .microseconds(); .checkpointAndRun(""Greeting"", () -> System.out.println(""Hello!""), 10); .summarizeCheckpoints(); .stop();; System.out.println(timeit);; ; . Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; Timeit.Checkpoint. Class representing a named checkpoint with a timestamp in nanoseconds. Constructor Summary; Constructors. Constructor; Description; Timeit();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Timeit; autoUnits();  ; Timeit; checkpoint(). Create a new checkpoint with a default name. Timeit; checkpoint(String name). Create a new checkpoint with the specified name. Timeit; checkpointAndRun(Runnable runnable). Create a checkpoint with the default name and immediately run the provided runnable. Timeit; checkpointAndRun(String name,; Runnable runnable). Create a checkpoint and immediately run the provided Runnable. Timeit; checkpointAndRun(String name,; Runnable runnable,; int nIterations). Create a checkpoint and immediately run the provided Runnable nIterations times. List<Timeit.Checkpoint>; getCheckpoints(). Get an list of all the checkpoints. int; getMaxDecimalPlaces(). Get the maximum number of decimal places when reporting timings. static void; main(St",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:1611,checkpoint,checkpoint,1611,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,1,['checkpoint'],['checkpoint']
Availability,"y classification from a server to a collection of objects. Parameters:; classifierServer - an ImageServer with output type; pathObjects - ; preferNucleusROI - . getClassification; public static int getClassification(ImageServer<BufferedImage> server,; int x,; int y,; int z,; int t); throws IOException; Request the classification for a specific pixel.; ; If the output for the server is ImageServerMetadata.ChannelType.PROBABILITY and only one channel is available, ; the return value will be -1 if the probability is less than 0.5 (or 127.5 if 8-bit). Parameters:; server - ; x - ; y - ; z - ; t - ; Returns:; Throws:; IOException. classifyCellsByCentroid; public static void classifyCellsByCentroid(ImageData<BufferedImage> imageData,; PixelClassifier classifier,; boolean preferNucleusROI); Classify cells according to the prediction of the pixel corresponding to the cell centroid using a PixelClassifier. Parameters:; imageData - the ImageData containing the cells; classifier - the classifier; preferNucleusROI - whether to use the nucleus ROI (if available) rather than the cell ROI. classifyDetectionsByCentroid; public static void classifyDetectionsByCentroid(ImageData<BufferedImage> imageData,; PixelClassifier classifier); Classify detections according to the prediction of the pixel corresponding to the detection centroid using a PixelClassifier.; If the detections are cells, the nucleus ROI is used where possible. Parameters:; imageData - the ImageData containing the cells; classifier - the classifier. classifyObjectsByCentroid; public static void classifyObjectsByCentroid(ImageData<BufferedImage> imageData,; PixelClassifier classifier,; Collection<PathObject> pathObjects,; boolean preferNucleusROI); Classify objects according to the prediction of the pixel corresponding to the object's ROI centroid using a PixelClassifier. Parameters:; imageData - the ImageData containing the cells; classifier - the classifier; pathObjects - the objects to classify; preferNucleusROI - use",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/pixel/PixelClassifierTools.html:18374,avail,available,18374,javadoc/docs/qupath/opencv/ml/pixel/PixelClassifierTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/pixel/PixelClassifierTools.html,1,['avail'],['available']
Availability,"y run the same code multiple times, and print the timings at the end.; ; ; var timeit = new Timeit(); .microseconds(); .checkpointAndRun(""Greeting"", () -> System.out.println(""Hello!""), 10); .summarizeCheckpoints(); .stop();; System.out.println(timeit);; ; . Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; Timeit.Checkpoint. Class representing a named checkpoint with a timestamp in nanoseconds. Constructor Summary; Constructors. Constructor; Description; Timeit();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Timeit; autoUnits();  ; Timeit; checkpoint(). Create a new checkpoint with a default name. Timeit; checkpoint(String name). Create a new checkpoint with the specified name. Timeit; checkpointAndRun(Runnable runnable). Create a checkpoint with the default name and immediately run the provided runnable. Timeit; checkpointAndRun(String name,; Runnable runnable). Create a checkpoint and immediately run the provided Runnable. Timeit; checkpointAndRun(String name,; Runnable runnable,; int nIterations). Create a checkpoint and immediately run the provided Runnable nIterations times. List<Timeit.Checkpoint>; getCheckpoints(). Get an list of all the checkpoints. int; getMaxDecimalPlaces(). Get the maximum number of decimal places when reporting timings. static void; main(String[] args);  ; Timeit; maxDecimalPlaces(int maxDP). Set the maximum number of decimal places when reporting timings ; using seconds or minutes. Timeit; microseconds(). Report timings in microseconds. Timeit; milliseconds(). Report timings in milliseconds. Timeit; minutes(). Report timings in minutes. Timeit; nanoseconds(). Report timings in nanoseconds. Timeit; seconds(). Report timings in seconds. Timeit; start(). Start the Timeit and create a checkpoint with the default name. Timeit; start(String name). Start the Timeit and create a checkpoint wit",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html:2155,checkpoint,checkpointAndRun,2155,javadoc/docs/qupath/lib/common/Timeit.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Timeit.html,1,['checkpoint'],['checkpointAndRun']
Availability,"y the pixel sizes, in microns. pixelSizeMicrons(Number, Number) - Method in class qupath.lib.images.servers.PixelCalibration.Builder. Specify the pixel width and height in microns (the most common calibration value). pixelSnapping - Variable in class qupath.lib.gui.panes.PreferencePane.DrawingPreferences;  ; pixelType(String) - Method in class qupath.lib.images.writers.ome.OMEPyramidWriter.Builder. Specify the output PixelType as a String, e.g. pixelType(PixelType) - Method in class qupath.lib.images.servers.bioformats.OMEPixelParser.Builder;  ; pixelType(PixelType) - Method in class qupath.lib.images.servers.ImageServerMetadata.Builder. Specify the bit-depth of the image. pixelType(PixelType) - Method in class qupath.lib.images.writers.ome.OMEPyramidWriter.Builder. Specify the output PixelType. PixelType - Enum Class in qupath.lib.images.servers. Image bit-depths and types. placeholderTextProperty() - Method in class qupath.lib.gui.panes.SimpleImageViewer. Get the placeholder text to show if no image is available. PLAIN - Static variable in class qupath.lib.gui.scripting.richtextfx.stylers.ScriptStylerProvider. Plain styler (no highlighting). PLAIN - Static variable in class qupath.lib.gui.scripting.syntax.ScriptSyntaxProvider;  ; PlainLanguage - Class in qupath.lib.gui.scripting.languages. Class for the representation of plain text in QuPath. PlainLanguage() - Constructor for class qupath.lib.gui.scripting.languages.PlainLanguage. Constructor for a simple Plain Language. PlainStyler - Class in qupath.lib.gui.scripting.richtextfx.stylers. Styling for plain text (which really means no styling). PLANAR - Enum constant in enum class qupath.lib.images.writers.ome.OMEPyramidWriter.ChannelExportType. Channels are stored as separate image planes ('PLANARCONFIG_SEPARATE'). PLAYBACK_PLAY - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; pluginCompleted(String) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:768697,avail,available,768697,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['avail'],['available']
Availability,"y the tile relevant for processing. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. imageData; public Parameters.Builder<S,T> imageData(ImageData<BufferedImage> imageData); Set the image data. Parameters:; imageData - ; Returns:. server; public Parameters.Builder<S,T> server(ImageServer<BufferedImage> server); Set the server. This is optional, for cases when processing should be applied to a different image; from that stored in the image data. Parameters:; server - ; Returns:. region; public Parameters.Builder<S,T> region(RegionRequest region); Specify the region to use for processing. Parameters:; region - ; Returns:; See Also:. tile(TileRequest). tile; public Parameters.Builder<S,T> tile(TileRequest tile); Specify the tile relevant for processing.; If the regions are available as tile requests, these should be used instead of region requests -; because they enable more accurate contour tracing across tile boundaries. Parameters:; tile - ; Returns:; See Also:. region(RegionRequest). imageFunction; public Parameters.Builder<S,T> imageFunction(ImageSupplier<S> function); Function used ot lazily read the image. Parameters:; function - ; Returns:. maskFunction; public Parameters.Builder<S,T> maskFunction(MaskSupplier<S,T> function); Function used to lazily create a mask corresponding to the image for a specified ROI. Parameters:; function - ; Returns:. parent; public Parameters.Builder<S,T> parent(PathObject parent); Set the parent object. Parameters:; parent - ; Returns:. parentProxy; public Parameters.Builder<S,T> parentProxy(PathObject parentProxy); Optionally set a temporary object to use as a parent.; This is useful for tiled processing, when the parent object may be too large to process in a single region. Parameters:; parentProxy - ; Returns:. build; public Parameters<S,T> build(); Build the parameters. Returns",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/Parameters.Builder.html:2599,avail,available,2599,javadoc/docs/qupath/lib/experimental/pixels/Parameters.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/Parameters.Builder.html,1,['avail'],['available']
Availability,"yBand to define the colormap associated with an image band (channel). createBand(String, int, double, double) - Static method in class qupath.lib.color.ColorModels. Create a ColorModels.DisplayBand to define the colormap associated with an image band (channel). createBand(String, int, double, double, double) - Static method in class qupath.lib.analysis.heatmaps.ColorModels. Create a ColorModels.DisplayBand to define the colormap associated with an image band (channel). createBand(String, int, double, double, double) - Static method in class qupath.lib.color.ColorModels. Create a ColorModels.DisplayBand to define the colormap associated with an image band (channel). createBelow(int, double) - Static method in class qupath.lib.analysis.images.ContourTracing.ChannelThreshold. Create a threshold to select values less than or equal to a specified threshold. createBinaryMask(Mat, DoublePredicate) - Static method in class qupath.opencv.tools.OpenCVTools. Create a binary mask (0, 255 values) by applying a predicate to pixel values. createBrushEventHandler() - Static method in class qupath.lib.gui.viewer.tools.handlers.PathToolEventHandlers;  ; createBufferedImageMaskSupplier() - Static method in interface qupath.lib.experimental.pixels.MaskSupplier. Create a image supplier that returns a buffered image. createBufferedImageSupplier() - Static method in interface qupath.lib.experimental.pixels.ImageSupplier. Create a image supplier that returns a buffered image. createButton(Action) - Static method in class qupath.lib.gui.actions.ActionTools. Create a button from an action, showing both the text and graphic if available. createButtonPane(QuPathGUI, ObjectExpression<ImageData<BufferedImage>>, ObjectExpression<DensityMaps.DensityMapBuilder>, StringExpression, ObjectExpression<PixelClassificationOverlay>, boolean) - Static method in class qupath.process.gui.commands.density.DensityMapUI. Create a pane containing standardized buttons associated with processing a density map (find",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:163522,mask,mask,163522,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['mask'],['mask']
Availability,"yMapBuilder; Throws:; IllegalArgumentException - if the density map cannot be found. locateFile; public static String locateFile(String nameOrPath); throws IOException; Locate a specified file based upon its name or path, with a search depth of 4.; This first checks if the provided path is to a file that already exists.; If it is not, then it searches recursively within the current project (if available) ; up to a fixed search depth for a file with the same name. Parameters:; nameOrPath - the original name or path; Returns:; the identified file path, or the original file path if no update was found or required; Throws:; IOException; See Also:. UriUpdater.locateFile(String, int, Path...). locateFile; public static String locateFile(String nameOrPath,; int searchDepth); throws IOException; Locate a specified file based upon its name or path.; This first checks if the provided path is to a file that already exists.; If it is not, then it searches recursively within the current project (if available) ; up to a specified search depth for a file with the same name. Parameters:; nameOrPath - the original name or path; searchDepth - how deep to search subdirectories recursively; Returns:; the identified file path, or the original file path if no update was found or required; Throws:; IOException; See Also:. UriUpdater.locateFile(String, int, Path...). findDensityMapHotspots; public static void findDensityMapHotspots(String densityMapName,; int channel,; int numHotspots,; double minCounts,; boolean deleteExisting,; boolean peaksOnly); throws IOException; Find hotspots in a density map for the current image. Parameters:; densityMapName - name of the density map builder, see loadDensityMap(String); channel - channel number (usually 0); numHotspots - the maximum number of hotspots to generate within each selected object; minCounts - the minimum value in the 'counts' channel; this is used to avoid generating hotspots in areas with few objects; deleteExisting - if true, similar a",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:133291,avail,available,133291,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['avail'],['available']
Availability,"yers. RenderedImageServer.Builder; overlayOpacity(double opacity). Specify the opacity for overlay layers. RenderedImageServer.Builder; renderer(ImageRenderer renderer). Specify the ImageRenderer that controls conversion to RGB. RenderedImageServer.Builder; settings(ImageDisplaySettings settings). Specify the ImageDisplaySettings that control conversion to RGB. RenderedImageServer.Builder; store(DefaultImageRegionStore store). Specify the region store used to paint the underlying image. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(QuPathViewer viewer); Create a rendered image server build using viewer defaults. Parameters:; viewer - . Builder; public Builder(ImageData<BufferedImage> imageData); Create a rendered image server for the specified ImageData;. Parameters:; imageData - . Method Details. downsamples; public RenderedImageServer.Builder downsamples(double... downsamples); Specify downsamples; this is especially important for 'thick' objects (annotations, TMA cores); because the downsamples define the resolutions at which these will be rendered. Parameters:; downsamples - ; Returns:. display; @Deprecated; public RenderedImageServer.Builder display(ImageDisplay display); Deprecated.; use renderer(ImageRenderer) instead (since an ImageDisplay is also an ImageRenderer. Specify the ImageDisplay that controls conversion to RGB. Parameters:; display - ; Returns:. settings; public RenderedImageServer.Builder settings(ImageDisplaySettings settings); Specify the ImageDisplaySettings that control conversion to RGB.; This will only be applied if no renderer has been set. Parameters:; settings - ; Returns:; Since:; v0.5.0; See Also:. renderer(ImageRenderer). renderer; public RenderedImageServer.Builder renderer(ImageRenderer renderer); Specify the ImageRenderer that controls conversion to RGB. Parameters:; renderer - ; Returns:; See Als",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/servers/RenderedImageServer.Builder.html:3054,down,downsamples,3054,javadoc/docs/qupath/lib/gui/images/servers/RenderedImageServer.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/servers/RenderedImageServer.Builder.html,1,['down'],['downsamples']
Availability,"ypeAdapterFactory for ImageServers, optionally including metadata in the serialized ; form of the server. static ImageServerBuilder.UriImageSupport<BufferedImage>; getImageSupport(URI uri,; String... args). Get the ImageServerBuilder.UriImageSupport that is best able to open the specified image with optional args. static ImageServerBuilder.UriImageSupport<BufferedImage>; getImageSupport(ImageServerBuilder<BufferedImage> builder,; URI uri,; String... args). Get the ImageServerBuilder.UriImageSupport associated with an ImageServerBuilder, or null if the builder does not support the image. static TypeAdapterFactory; getServerBuilderFactory(). Get a TypeAdapterFactory to handle ServerBuilders. static ImageServer<BufferedImage>; pyramidalize(ImageServer<BufferedImage> server,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid. static ImageServer<BufferedImage>; pyramidalizeTiled(ImageServer<BufferedImage> server,; int tileWidth,; int tileHeight,; double... downsamples). Wrap an ImageServer to dynamically generate a pyramid, using specified tile sizes. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServers; public ImageServers(). Method Details. getServerBuilderFactory; public static TypeAdapterFactory getServerBuilderFactory(); Get a TypeAdapterFactory to handle ServerBuilders. Returns:. pyramidalize; public static ImageServer<BufferedImage> pyramidalize(ImageServer<BufferedImage> server,; double... downsamples); Wrap an ImageServer to dynamically generate a pyramid. This does not involve writing any new image, ; and may be rather processor and memory-intensive as high-resolution tiles must be accessed to fulfil ; low-resolution requests. However, tile caching means that after tiles have been accessed once perceived ; performance can be considerably improved. Parameters:; server - the server to wrap (typically having only one r",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html:2433,down,downsamples,2433,javadoc/docs/qupath/lib/images/servers/ImageServers.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServers.html,1,['down'],['downsamples']
Availability,"| ; Constr | ; Method. SEARCH. Package qupath.lib.gui.scripting.syntax; Class ScriptSyntaxProvider. java.lang.Object; qupath.lib.gui.scripting.syntax.ScriptSyntaxProvider. public class ScriptSyntaxProvider; extends Object; Class with static methods to fetch all the available ScriptSyntaxes. Since:; v0.4.0; Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final ScriptSyntax; GROOVY;  ; static final ScriptSyntax; JSON;  ; static final ScriptSyntax; PLAIN;  ; static final ScriptSyntax; PROPERTIES;  ; static final ScriptSyntax; PYTHON;  ; static final ScriptSyntax; XML;  ; static final ScriptSyntax; YAML;  . Constructor Summary; Constructors. Constructor; Description; ScriptSyntaxProvider();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static Collection<ScriptSyntax>; getAvailableSyntaxes(). Get the available script syntaxes. static ScriptSyntax; getSyntaxFromName(String name). Get a script syntax from a specified language name. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. GROOVY; public static final ScriptSyntax GROOVY. XML; public static final ScriptSyntax XML. YAML; public static final ScriptSyntax YAML. JSON; public static final ScriptSyntax JSON. PLAIN; public static final ScriptSyntax PLAIN. PROPERTIES; public static final ScriptSyntax PROPERTIES. PYTHON; public static final ScriptSyntax PYTHON. Constructor Details. ScriptSyntaxProvider; public ScriptSyntaxProvider(). Method Details. getAvailableSyntaxes; public static Collection<ScriptSyntax> getAvailableSyntaxes(); Get the available script syntaxes. Returns:. getSyntaxFromName; public static ScriptSyntax getSyntaxFromName(String name); Get a script syntax from a specified language name.; If no specific syntax is found, then a general-purpose (plain) syntax will be returned. Parameters:; name - ; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/scripting/syntax/ScriptSyntaxProvider.html:2016,avail,available,2016,javadoc/docs/qupath/lib/gui/scripting/syntax/ScriptSyntaxProvider.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/scripting/syntax/ScriptSyntaxProvider.html,1,['avail'],['available']
Availability,"| ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerProvider. java.lang.Object; qupath.lib.images.servers.ImageServerProvider. public class ImageServerProvider; extends Object; Service provider for creating ImageServers from a given path - which may be a file path or URL.; ; This class is responsible for hunting through potential ImageServerBuilders, ranked by support level, to find the first that works. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ImageServerProvider();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> ImageServer<T>; buildServer(String path,; Class<T> cls,; String... args). Attempt to create ImageServer<T> from the specified path and arguments. static <T> Map<RegionRequest,T>; getCache(Class<T> cls). Get the cache in use for image tiles of a specific type. static List<ImageServerBuilder<?>>; getInstalledImageServerBuilders(). Request all available ImageServerBuilders. static <T> List<ImageServerBuilder<T>>; getInstalledImageServerBuilders(Class<T> imageClass). Request all available ImageServerBuilders supporting a given image class. static <T> ImageServerBuilder.UriImageSupport<T>; getPreferredUriImageSupport(Class<T> cls,; String path,; String... args). Get the preferred ImageServerBuilder.UriImageSupport for a specified image path. static URI; legacyPathToURI(String path). Method to help with converting legacy image paths to URIs. static <T> void; setCache(Map<RegionRequest,T> cache,; Class<T> cls). Set the cache to be used for image tiles of a specific type. static void; setServiceLoader(ServiceLoader<ImageServerBuilder> newLoader). Replace the default service loader with another. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageServerProvider; public ImageServerProvider(). Method Details. setCache; public stat",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html:1306,avail,available,1306,javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerProvider.html,1,['avail'],['available']
Availability," ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerMetadata.ImageResolutionLevel.Builder. java.lang.Object; qupath.lib.images.servers.ImageServerMetadata.ImageResolutionLevel.Builder. Enclosing class:; ImageServerMetadata.ImageResolutionLevel. public static class ImageServerMetadata.ImageResolutionLevel.Builder; extends Object; Builder to create a list of ImageServerMetadata.ImageResolutionLevel to represent pyramidal resolutions. Constructor Summary; Constructors. Constructor; Description; Builder(int fullWidth,; int fullHeight). Constructor to help build a list of ImageServerMetadata.ImageResolutionLevel objects to represent pyramidal resolutions. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServerMetadata.ImageResolutionLevel.Builder; addFullResolutionLevel(). Add the full-resolution image as a level of the pyramid. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(double downsample,; int levelWidth,; int levelHeight). Add a new level by providing a downsample value, width and height. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(int levelWidth,; int levelHeight). Add a new level based on level dimensions, estimating the corresponding downsample value as required. ImageServerMetadata.ImageResolutionLevel.Builder; addLevel(ImageServerMetadata.ImageResolutionLevel level). Add a new level directly. ImageServerMetadata.ImageResolutionLevel.Builder; addLevelByDownsample(double downsample). Add a new level, calculating dimensions using a downsample factor applied to the full-resolution image. List<ImageServerMetadata.ImageResolutionLevel>; build(). Build a list of ImageResolutionLevels, which can be used with an ImageServerMetadata object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(int fullWidth,; int fullHeight); Cons",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html:1322,down,downsample,1322,javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerMetadata.ImageResolutionLevel.Builder.html,1,['down'],['downsample']
Availability," ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.utils; Class ObjectMerger. java.lang.Object; qupath.lib.objects.utils.ObjectMerger. public class ObjectMerger; extends Object; Helper class for merging objects using different criteria.; ; This is designed to be used for post-processing a segmentation, to help resolve tile boundaries. Since:; v0.5.0. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static ObjectMerger; createSharedClassificationMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold). Create an object merger that uses a shared boundary IoU criterion and default overlap tolerance. static ObjectMerger; createSharedTileBoundaryMerger(double sharedBoundaryThreshold,; double overlapTolerance). Create an object merger that uses a shared boundary IoU criterion and overlap tolerance. static ObjectMerger; createTouchingMerger(). Create an object merger that can merge together any objects with similar ROIs (e.g. List<PathObject>; merge(Collection<? extends PathObject> pathObjects). Calculate the result of applying the merging strategy to the input objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. merge; public List<PathObject> merge(Collection<? extends PathObject> pathObjects); Calculate the result of applying the merging strategy to the input objects.; ; The output list will contain the same number of objects or fewer.; Objects that are not merged will be returned unchanged, while objects that are merged will be replaced by a new; objects with a new ROI.; ; New objects will be assigned new IDs.; Classifications will be preserved, but other measurements and properties will not be.; ; No guarantees are made abo",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html:1283,toler,tolerance,1283,javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/utils/ObjectMerger.html,1,['toler'],['tolerance']
Availability," <T> T showChoiceDialog(String title,; String message,; T[] choices,; T defaultChoice); Deprecated.; Show a choice dialog with an array of choices (selection from ComboBox or similar). Type Parameters:; T - ; Parameters:; title - dialog title; message - dialog prompt; choices - array of available options; defaultChoice - initial selected option; Returns:; chosen option, or null if the user cancels the dialog. showChoiceDialog; public static <T> T showChoiceDialog(String title,; String message,; Collection<T> choices,; T defaultChoice); Deprecated.; Show a choice dialog with a collection of choices (selection from ComboBox or similar). Type Parameters:; T - ; Parameters:; title - dialog title; message - dialog prompt; choices - list of available options; defaultChoice - initial selected option; Returns:; chosen option, or null if the user cancels the dialog. showErrorMessage; public static void showErrorMessage(String title,; Throwable e); Deprecated.; Show an error message, displaying the localized message of a Throwable. Parameters:; title - ; e - . showErrorNotification; public static void showErrorNotification(String title,; Throwable e); Deprecated.; Show an error notification, displaying the localized message of a Throwable. Parameters:; title - ; e - . showErrorNotification; public static void showErrorNotification(String title,; String message); Deprecated.; Show an error notification. Parameters:; title - ; message - . showWarningNotification; public static void showWarningNotification(String title,; String message); Deprecated.; Show a warning notification. Parameters:; title - ; message - . showInfoNotification; public static void showInfoNotification(String title,; String message); Deprecated.; Show an info notification. Parameters:; title - ; message - . showPlainNotification; public static void showPlainNotification(String title,; String message); Deprecated.; Show a plain notification. Parameters:; title - ; message - . showNoImageError; public static v",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/dialogs/Dialogs.html:8805,error,error,8805,javadoc/docs/qupath/lib/gui/dialogs/Dialogs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/dialogs/Dialogs.html,1,['error'],['error']
Availability," name,; boolean createMenu). Get a reference to an existing menu from the main QuPath menubar, optionally creating a new menu if it is not present. MenuBar; getMenuBar(). Get the menubar for the main QuPath application. OverlayActions; getOverlayActions(). Get the actions associated with the viewer overlay options. OverlayOptions; getOverlayOptions(). Return the global OverlayOptions instance, used to control display within viewers by default. PreferencePane; getPreferencePane(). Get a reference to the PreferencePane. Project<BufferedImage>; getProject(). Get the value of projectProperty(). ScriptEditor; getScriptEditor(). Get a reference to the current ScriptEditor (which may or may not be open at the moment). Stage; getStage(). Get the main QuPath stage. SharedThreadPoolManager; getThreadPoolManager(). Get a SharedThreadPoolManager to help with submitting tasks in other threads. ToolBar; getToolBar(). Get the main toolbar. ToolManager; getToolManager(). Get the ToolManager that handles available and selected tools. UndoRedoManager; getUndoRedoManager(). Get the UndoRedoManager, which can be useful if needing to clear it in cases where available memory is low. static Version; getVersion(). Get the current QuPath version. QuPathViewer; getViewer(). Get the currently active viewer. ViewerActions; getViewerActions(). Get the associations associated with QuPath image viewers. ViewerManager; getViewerManager(). Get the viewer manager, which gives access to all the viewers available within this QuPath instance. ReadOnlyObjectProperty<ImageData<BufferedImage>>; imageDataProperty(). Read-only property containing the image open within the currently-active viewer. void; installActions(Collection<? extends org.controlsfx.control.action.Action> actions). Install the specified actions. MenuItem; installCommand(String menuPath,; Runnable runnable). Install a new command in QuPath. MenuItem; installGroovyCommand(String menuPath,; File file). Install a Groovy script as a new comman",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:5657,avail,available,5657,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['avail'],['available']
Availability," tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier); Try to classify a batch of objects. Parameters:; pathObjects - ; server - ; downsample - ; classifier - ; Returns:; number of classified objects. getMissingFeatures; public Map<String,Integer> getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:5860,avail,available,5860,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,1,['avail'],['available']
Availability," void exportObjectsToGeoJson(Collection<? extends PathObject> pathObjects,; String path,; String option,; String... additionalOptions); throws IOException; Export specified objects to an output file as GeoJSON. Parameters:; pathObjects - ; path - ; option - ; additionalOptions - ; Throws:; IOException. exportObjectsToGeoJson; public static void exportObjectsToGeoJson(Collection<? extends PathObject> pathObjects,; String path,; PathIO.GeoJsonExportOptions... options); throws IOException; Export specified objects to an output file as GeoJSON. Parameters:; pathObjects - ; path - ; options - ; Throws:; IOException. importObjectsFromFile; public static boolean importObjectsFromFile(String path); throws FileNotFoundException,; IllegalArgumentException,; IOException,; ClassNotFoundException; Import all PathObjects from the given file. ; IllegalArgumentException is thrown if the file is not compatible. ; FileNotFoundException is thrown if the file is not found. ; IOException is thrown if an error occurs while reading the file. ; ClassNotFoundException should never occur naturally (except through a change in the code). Parameters:; path - ; Returns:; success; Throws:; FileNotFoundException; IllegalArgumentException; ClassNotFoundException; IOException. deselectAll; public static void deselectAll(); Clear the selection for the current hierarchy, so that no objects of any kind are selected. deselectAll; public static void deselectAll(PathObjectHierarchy hierarchy); Clear the selection, so that no objects of any kind are selected. Parameters:; hierarchy - . getPathClass; public static PathClass getPathClass(String name); Get a PathClass with the specified name. Parameters:; name - ; Returns:. getPathClass; public static PathClass getPathClass(String name,; Integer rgb); Get a PathClass with the specified name and color.; ; Note that only one instance of any PathClass can exist at any time, therefore any existing ; PathClass with the same description will always be returned inste",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:93616,error,error,93616,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['error'],['error']
Availability," | ; Method. SEARCH. Package qupath.lib.gui.actions; Class InfoMessage. java.lang.Object; qupath.lib.gui.actions.InfoMessage. public class InfoMessage; extends Object; An informative message that should be shown to the user. Property Summary; Properties. Type; Property; Description; ReadOnlyObjectProperty<Number>; count. Read only property containing any count associated with the text (may be null). ReadOnlyStringProperty; text. Read only property containing the message text. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; InfoMessage.MessageType. The type of message, which can be used for styling. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ReadOnlyObjectProperty<Number>; countProperty(). Read only property containing any count associated with the text (may be null). static InfoMessage; error(String text). Create an error message with static text. static InfoMessage; error(String text,; int count). Create an error message with static text and a count. static InfoMessage; error(ObservableNumberValue count). Create a error message to show a count of errors. static InfoMessage; error(ObservableValue<String> text). Create an error message. static InfoMessage; error(ObservableValue<String> text,; ObservableNumberValue count). Create an error message with a count. int; getCount(). Counts associated with the message, or -1 if the count is null. InfoMessage.MessageType; getMessageType(). Type of the message. String; getText(). Text of the message. static InfoMessage; info(String text). Create an information message with static text. static InfoMessage; info(String text,; int count). Create an information message with static text and a count. static InfoMessage; info(ObservableNumberValue count). Create a information message to show a count of messages. static InfoMessage; info(ObservableValue<String> text). Create an information message. static InfoMessage; inf",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/InfoMessage.html:1300,error,error,1300,javadoc/docs/qupath/lib/gui/actions/InfoMessage.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/InfoMessage.html,1,['error'],['error']
Availability,"   ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.experimental.pixels; Class MeasurementProcessor.Measurements. java.lang.Object; qupath.lib.experimental.pixels.MeasurementProcessor.Measurements. Enclosing class:; MeasurementProcessor. public static class MeasurementProcessor.Measurements; extends Object; Methods to create custom measurements. Constructor Summary; Constructors. Constructor; Description; Measurements();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static MeasurementProcessor.CustomMeasurement<BufferedImage,BufferedImage>; multiChannel(String name,; List<ColorTransforms.ColorTransform> transforms,; Function<double[][],Double> function). Create a new object measurement that requires multiple channels as input, using the main ROI of the object; as a mask. static MeasurementProcessor.CustomMeasurement<BufferedImage,BufferedImage>; multiChannel(String name,; List<ColorTransforms.ColorTransform> transforms,; Function<double[][],Double> function,; Function<PathObject,ROI> roiFunction). Create a new object measurement that requires multiple channels as input. static MeasurementProcessor.CustomMeasurement<BufferedImage,BufferedImage>; singleChannel(String name,; ColorTransforms.ColorTransform transform,; Function<double[],Double> function). Create a new object measurement that requires one channel as input, using the main ROI of the object; as a mask. static MeasurementProcessor.CustomMeasurement<BufferedImage,BufferedImage>; singleChannel(String name,; ColorTransforms.ColorTransform transform,; Function<double[],Double> function,; Function<PathObject,ROI> roiFunction). Create a new object measurement that requires one channel as input. Methods inherited from class java.lang.Object; ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/MeasurementProcessor.Measurements.html:1147,mask,mask,1147,javadoc/docs/qupath/lib/experimental/pixels/MeasurementProcessor.Measurements.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/MeasurementProcessor.Measurements.html,1,['mask'],['mask']
Deployability," (and therefore don't include them in the output); ; if false, consider them to be outside and include them in the output; Returns:; a filtered list of the input object containing those considered outside the region; Since:; v0.4.0; See Also:. findObjectsOutsideRegion(Collection, ImageRegion, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object, and any descendant objects. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:21602,update,updatePlane,21602,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['update'],['updatePlane']
Deployability," - Static method in class qupath.lib.analysis.images.ContourTracing.ChannelThreshold. Create a threshold to select values greater than or equal to a specified threshold. createAction(Runnable) - Static method in class qupath.lib.gui.actions.ActionTools. Create an action whose event handler calls a runnable. createAction(Runnable, String) - Static method in class qupath.lib.gui.actions.ActionTools. Create an action whose event handler calls a runnable, with a specified name. createAllFullImageAnnotations(boolean) - Static method in class qupath.lib.scripting.QP. Create annotation around the full image for the current image, on all z-slices and timepoints. createAllFullImageAnnotations(ImageData<?>, boolean) - Static method in class qupath.lib.scripting.QP. Create annotation around the full image for the specified image, on all z-slices and timepoints. createAllMenuActions(QuPathGUI) - Static method in class qupath.lib.gui.actions.menus.Menus. Create a collection of all the actions that should be installed in QuPath's main menubar. createAllRequests(ImageServer<?>, double) - Static method in class qupath.lib.regions.RegionRequest. Create requests for the full width and height of an ImageServer, for all planes (z-slices and time points). createAnnotationConverter() - Static method in class qupath.lib.experimental.pixels.ImageJProcessor. Create an OutputHandler.OutputToObjectConverter that attempts to convert the output; into annotation objects. createAnnotationConverter() - Static method in class qupath.lib.experimental.pixels.OpenCVProcessor. Create an OutputHandler.OutputToObjectConverter that attempts to convert the output; into annotation objects. createAnnotationConverter(Map<? extends Number, String>) - Static method in class qupath.lib.experimental.pixels.OpenCVProcessor. Create an OutputHandler.OutputToObjectConverter that attempts to convert the output; into annotation objects. createAnnotationObject(ROI) - Static method in class qupath.lib.objects.PathObjects",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:157427,install,installed,157427,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installed']
Deployability," ChannelDisplayInfo that determines colors based upon a single value for each pixel.; This is able to supply the underlying values as a float array. Author:; Pete Bankhead. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.display.ChannelDisplayInfo; ChannelDisplayInfo.ModifiableChannelDisplayInfo. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; float; getValue(BufferedImage img,; int x,; int y). Extract the value for a single pixel of an image. float[]; getValues(BufferedImage img,; int x,; int y,; int w,; int h,; float[] array). Extract values for a square of pixels from an image. boolean; isMutable(). Check if getValue(BufferedImage, int, int) returns fixed values, or if they are dependent on ; other properties of the ImageData. Methods inherited from interface qupath.lib.display.ChannelDisplayInfo; doesSomething, getColor, getMaxAllowed, getMaxDisplay, getMethod, getMinAllowed, getMinDisplay, getName, getRGB, getRGB, getValueAsString, isAdditive, isBrightnessContrastRescaled, updateRGBAdditive, updateRGBAdditive. Method Details. getValue; float getValue(BufferedImage img,; int x,; int y); Extract the value for a single pixel of an image. Parameters:; img - the image; x - x-coordinate of the pixel; y - y-coordinate of the pixel; Returns:; the value of the pixel. getValues; float[] getValues(BufferedImage img,; int x,; int y,; int w,; int h,; float[] array); Extract values for a square of pixels from an image. Parameters:; img - the image; x - x-coordinate of the top left corner of the region to extract; y - y-coordinate of the top left corner of the region to extract; w - width of the region to extract; h - height of the region to extract; array - optional array that may be used to store the output values; Returns:; array of values. isMutable; boolean isMutable(); Check if getValue(BufferedImage, int, int) returns fixed values, or if they are dependent on ; other properties of ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/SingleChannelDisplayInfo.html:1655,update,updateRGBAdditive,1655,javadoc/docs/qupath/lib/display/SingleChannelDisplayInfo.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/SingleChannelDisplayInfo.html,2,['update'],['updateRGBAdditive']
Deployability," Classes:; DirectServerChannelInfo. public interface ChannelDisplayInfo; Interface used to control the display of single channels of image data, where; 'single channel' means one value per pixel (in Java's parlance, one band for the; SampleModel). This applies not only to the 'default' channels in an image -; e.g. red, green and blue for an RGB image - but also to 'derived' channels computed; by a transformation, e.g. color deconvolution.; ; The primary uses are:; ; to extract floating point pixel values for the channel from a BufferedImage; (either directly, or via some color transformation that may involve; more than one channel/band from the BufferedImage); to generate RGB pixel values suitable for visualizing the raw channel values; extracted above, including the storage of any lookup tables required; to store min/max display values, which influence the lookup table mapping to RGB; (i.e. to store brightness/contrast values); to update an existing RGB value, to facilitate creating composite images that depict; the values of multiple channels in a single, merged visualization; . As such, its uses lie somewhere between Java's SampleModel and ColorModel classes.; ; Its reason for existing is that sometimes we need to be able to adjust the display of channels; individually and to create merges - particularly in the case of fluorescence images - but; to simplify whole slide image support we need to be able to do this on-the-fly.; Switching the ColorModel for an existing BufferedImage is somewhat awkward, and when caching; image tiles we want to be able to keep the original ColorModels intact - otherwise ColorModels; for recently-seen tiles might be different from the ColorModels of tiles that have been in the cache; for longer, even though they were read from the same image servers. Furthermore, 'unknown' image types; (i.e. not standard RGB/BGR/single-channel images) don't always behave nicely with Graphics objects; if we want to paint or scale them.; ; Using the Chann",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html:1460,update,update,1460,javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html,1,['update'],['update']
Deployability," Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.commands.display; Class BrightnessContrastChannelPane. java.lang.Object; javafx.scene.Node; javafx.scene.Parent; javafx.scene.layout.Region; javafx.scene.layout.Pane; javafx.scene.layout.BorderPane; qupath.lib.gui.commands.display.BrightnessContrastChannelPane. All Implemented Interfaces:; Styleable, EventTarget. public class BrightnessContrastChannelPane; extends BorderPane; A pane responsible for the display and selection of channels from an image display.; This uses a table to display the channels, and allows the user to adjust the selection of channels - as well as names; and colors. Property Summary; Properties. Type; Property; Description; ReadOnlyObjectProperty<ChannelDisplayInfo>; currentChannel. Get the currently-selected channel. BooleanProperty; disableToggleMenuItems. Property to disable options to toggle the visibility of channels. ObjectProperty<ImageDisplay>; imageDisplay. Property for the image display that should be shown and managed by this pane. Properties inherited from class javafx.scene.layout.BorderPane; bottom, center, left, right, top. Properties inherited from class javafx.scene.layout.Region; background, border, cacheShape, centerShape, height, insets, maxHeight, maxWidth, minHeight, minWidth, opaqueInsets, padding, prefHeight, prefWidth, scaleShape, shape, snapToPixel, width. Properties inherited from class javafx.scene.Parent; needsLayout. Properties inherited from class javafx.scene.Node; accessibleHelp, accessibleRoleDescription, accessibleRole, accessibleText, blendMode, boundsInLocal, boundsInParent, cacheHint, cache, clip, cursor, depthTest, disabled, disable, effectiveNodeOrientation, effect, eventDispatcher, focused, focusTraversable, focusVisible, focusWithin, hover, id, inputMethodRequests, layoutBounds, layoutX, layoutY, localToParentTransform, localToSc",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html:1189,toggle,toggle,1189,javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html,1,['toggle'],['toggle']
Deployability," Get the version of the OpenSlide library. getLineCommentString() - Method in interface qupath.lib.gui.scripting.syntax.ScriptSyntax. Get the String that represents the start of a comment line. getLineObjects(Collection<T>) - Static method in class qupath.lib.objects.PathObjectTools. Get a list of objects with line ROIs from a collection of objects. getLineWidth() - Method in class qupath.lib.gui.charts.ChartThresholdPane. Get the threshold line width. getLivePrediction() - Method in class qupath.lib.gui.viewer.overlays.PixelClassificationOverlay. Query whether live prediction is turned on. getLoadedExtensions() - Method in class qupath.lib.gui.ExtensionManager;  ; getLocalizationDirectoryPath() - Method in class qupath.lib.gui.UserDirectoryManager. Get the path to where localization property files should be written. getLocalizedResourceManager() - Static method in class qupath.lib.gui.localization.QuPathResources. Get a localized resource manager, which can be used to manage localized strings,; and update these whenever the locale preferences are updated. getLocationString(ImageData<BufferedImage>, double, double, int, int) - Method in class qupath.lib.gui.viewer.overlays.AbstractOverlay;  ; getLocationString(ImageData<BufferedImage>, double, double, int, int) - Method in interface qupath.lib.gui.viewer.overlays.AbstractOverlay.LocationStringFunction. See PathOverlay.getLocationString(ImageData, double, double, int, int). getLocationString(ImageData<BufferedImage>, double, double, int, int) - Method in interface qupath.lib.gui.viewer.overlays.PathOverlay. Get a location string to display when showing a specified image. getLocationString(ImageData<BufferedImage>, double, double, int, int) - Method in class qupath.lib.gui.viewer.overlays.PixelClassificationOverlay;  ; getLocationStringFunction() - Method in class qupath.lib.gui.viewer.overlays.AbstractOverlay;  ; getLogDirectoryPath() - Method in class qupath.lib.gui.UserDirectoryManager. Get the path to where log fi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:429173,update,update,429173,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,2,['update'],"['update', 'updated']"
Deployability," Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.extensions; Interface QuPathExtension. All Known Implementing Classes:; BioFormatsOptionsExtension, IJExtension, OpenSlideExtension, ProcessingExtension, RichScriptEditorExtension, SvgExtension. public interface QuPathExtension; Simple interface for QuPath extensions.; ; This allows dynamic discovery of new extensions. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. default Version; getQuPathVersion(). Get a QuPath version for which this extension was written. default Version; getVersion(). Get the version of the current extension. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Method Details. installExtension; void installExtension(QuPathGUI qupath); Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; String getName(); A readable name for the extension. Returns:. getDescription; String getDescription(); A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Returns:. getQuPathVersion; default Version getQuPathVersion(); Get a QuPath version for which this extension was written.; ; This is used to provide an explanation if the extension could not be loaded.; It has a default implementation that returns Version.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/extensions/QuPathExtension.html:1138,install,installExtension,1138,javadoc/docs/qupath/lib/gui/extensions/QuPathExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/extensions/QuPathExtension.html,1,['install'],['installExtension']
Deployability," IJExtension (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.gui; Class IJExtension. java.lang.Object; qupath.imagej.gui.IJExtension. All Implemented Interfaces:; QuPathExtension. public class IJExtension; extends Object; implements QuPathExtension; QuPath extension & associated static helper methods used to support integration of ImageJ with QuPath. Author:; Pete Bankhead. Property Summary; Properties. Type; Property; Description; static StringProperty; imageJPath. Property representing the path to a local ImageJ installation, or null if no path has been set. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; IJExtension.IJExtensionCommands. Commands to install with the ImageJ extension. Constructor Summary; Constructors. Constructor; Description; IJExtension();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static Overlay; extractOverlay(PathObjectHierarchy hierarchy,; RegionRequest request,; OverlayOptions options,; Predicate<PathObject> filter). Extract an ImageJ overlay for the specified region. static PathImage<ImagePlus>; extractROI(ImageServer<BufferedImage> server,; PathObject pathObject,; RegionRequest request,; boolean setROI). Similar to extractROI(ImageServer, ROI, RegionRequest, boolean), except that the title of the ImagePlus is set according to the parent object type (which is used to get the ROI). static PathImage<ImagePlus>; extractROI(ImageServer<BufferedImage> server,; ROI pathROI,; RegionRequest request,; boolean setROI). Extract a region of interest from an image as an ImageJ ImagePlus. static PathImage<ImagePlus>; extractROIWithOverlay(ImageServer<Buffer",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:991,install,install,991,javadoc/docs/qupath/imagej/gui/IJExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html,1,['install'],['install']
Deployability," Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method is intended for cases where the batch size should be greater than one; for a batch size of one, predict(Mat) can; be used instead. Specified by:; batchPredict in interface DnnModel; Parameters:; mats - ; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:4080,patch,patch,4080,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,2,['patch'],"['patch', 'patches']"
Deployability," Method. SEARCH. Package qupath.opencv.ops; Interface ImageDataOp. All Superinterfaces:; UriResource. public interface ImageDataOp; extends UriResource; Request pixels from an image, potentially applying further transforms. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; ImageDataOp; appendOps(ImageOp... ops). Append one or more additional ImageOps sequentially. Mat; apply(ImageData<BufferedImage> imageData,; RegionRequest request). Apply the operation to the requested region of the image. List<ImageChannel>; getChannels(ImageData<BufferedImage> imageData). Get appropriate channels to reflect the output of this transform, given the input. PixelType; getOutputType(PixelType inputType). Get the output pixel type. boolean; supportsImage(ImageData<BufferedImage> imageData). Query whether this transform can be applied to the specified image. Methods inherited from interface qupath.lib.io.UriResource; getUris, getURIs, updateUris, updateURIs. Method Details. apply; Mat apply(ImageData<BufferedImage> imageData,; RegionRequest request); throws IOException; Apply the operation to the requested region of the image.; ; The data and region are provided, rather than specified pixels, because the operation might require ; additional information available within the ImageData, and optionally adjust the request ; (e.g. to incorporate padding to remove boundary artifacts).; ; Note for implementers: Any such padding must be removed from the output before it is returned. Parameters:; imageData - ; request - ; Returns:; Throws:; IOException. supportsImage; boolean supportsImage(ImageData<BufferedImage> imageData); Query whether this transform can be applied to the specified image.; Reasons why it may not be include the type or channel number being incompatible. Parameters:; imageData - ; Returns:. getChannels; List<ImageChannel> getChannels(ImageData<BufferedImage> imageData); Get appropriate channels to refle",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageDataOp.html:1313,update,updateUris,1313,javadoc/docs/qupath/opencv/ops/ImageDataOp.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageDataOp.html,2,['update'],"['updateURIs', 'updateUris']"
Deployability," PathObject> pathObjects,; ImageRegion region,; int minZ,; int maxZ,; int minT,; int maxT,; boolean ignoreIntersecting); Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and timepoints. Parameters:; pathObjects - input objects to check; region - 2D region; minZ - minimum z for the region (inclusive); maxZ - maximum z for the region (exclusive); minT - minimum t for the region (inclusive); maxT - maximum t for the region (exclusive); ignoreIntersecting - if true, consider objects that overlap the region boundary to be inside (and therefore don't include them in the output); ; if false, consider them to be outside and include them in the output; Returns:; a filtered list of the input object containing those considered outside the region; Since:; v0.4.0; See Also:. findObjectsOutsideRegion(Collection, ImageRegion, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object, and any descendant objects. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROI",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:20932,update,updatePlaneRecursive,20932,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,2,['update'],['updatePlaneRecursive']
Deployability," PathPlugin that requires a list of (user-adjustable) parameters. PathIO. Primary class for loading/saving ImageData objects. PathIO.GeoJsonExportOptions. Options to customize the export of PathObjects as GeoJSON. PathObject. Fundamental object of interest in QuPath. PathObjectConnectionGroup. Interface defining a basic structure to represent relationships between PathObjects that do not fit with ; the parent-child idea of the PathObjectHierarchy. PathObjectConnections. Data structure for storing multiple PathObjectConnectionGroups. PathObjectFilter. Enumeration of filters (predicates) that can be used to select objects based on their type. PathObjectGridView. Grid display of objects. PathObjectGridView.GridDisplaySize;  ; PathObjectHierarchy. A basic hierarchy in which to store PathObjects. PathObjectHierarchyEvent. An event class for passing on information about modifications to a PathObjectHierarchy. PathObjectHierarchyEvent.HierarchyEventType. Enum representing different ways in which the hierarchy may have been updated. PathObjectHierarchyListener. A listener for modifications to a PathObjectHierarchy (i.e. PathObjectHierarchyView. Component for showing a tree-based view of the object hierarchy. PathObjectLabels. Create standardized ListCell and TreeCell instances for displaying a PathObject, ; or a generic pane to use elsewhere. PathObjectLabels.PathObjectMiniPane. Manage a small pane that can be used to display a PathObject. PathObjectPainter. Static methods to assist with painting PathObjects. PathObjectPredicates. Classes to define JSON-serializable Predicates for PathObjects. PathObjectPredicates.PathObjectPredicate. A JSON-serializable Predicate for use with PathObjects. PathObjectReader. Interface for classes capable of reading PathObjects from some source. PathObjects. Helper class to create PathObject. PathObjectSelectionListener. A listener to selection changes within a PathObjectSelectionModel. PathObjectSelectionModel. Model for handling selection of",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:39829,update,updated,39829,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['update'],['updated']
Deployability," PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TaskRunnerFX; public TaskRunnerFX(QuPathGUI qupath); Constructor. Parameters:; qupath - the QuPath instance. TaskRunnerFX; public TaskRunnerFX(QuPathGUI qupath,; int nThreads); Constructor specifying the number of threads. Parameters:; qupath - the QuPath instance; nThreads - the number of threads to use. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Overrides:; runTasks in class AbstractTaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Description copied from class: AbstractTaskRunner; Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or SwingUtilities.invokeLater). Overrides:; postProcess in class AbstractTaskRunner; Parameters:; tasks - . ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/TaskRunnerFX.html:2873,update,update,2873,javadoc/docs/qupath/lib/gui/TaskRunnerFX.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/TaskRunnerFX.html,1,['update'],['update']
Deployability," ROIs. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects). Given a collection of objects with area ROIs, split these using dividing lines extracted from objects; with line ROIs. static boolean; standardizeClassifications(Collection<PathObject> pathObjects). Standardize the classifications for a collection of objects. static boolean; standardizeClassifications(Collection<PathObject> pathObjects,; Comparator<String> comparator). Standardize the classifications for a collection of objects. static void; swapNameAndClass(PathObject pathObject,; boolean includeColor). Swap the name and PathClass of an object. static void; toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Toggle the 'locked' status of specified objects. static void; toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy). Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. static PathObject; transformObject(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements). Create a transformed version of a PathObject with a new ID. static PathObject; transformObject(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create a transformed version of a PathObject, optionally with a new ID. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements). Create (optionally) transformed versions of the PathObject and all its descendants, recursively. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create (optionally) transformed versions of the PathObject and all its descendants, recursively, optionally assigning; new IDs to the created objects. static void; unlockObjects(PathObjectHierarc",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:13378,update,update,13378,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['update'],['update']
Deployability," Static method in class qupath.lib.gui.scripting.QPEx. Export TMA summary data for the current image. exportTMAData(ImageData<BufferedImage>, String, double) - Static method in class qupath.lib.gui.scripting.QPEx. Export TMA summary data for the specified image. ExportTrainingRegionsCommand - Class in qupath.process.gui.commands. Command to help export training regions as labelled images to train AI algorithms elsewhere. ExportTrainingRegionsCommand(QuPathGUI) - Constructor for class qupath.process.gui.commands.ExportTrainingRegionsCommand. Constructor. exportType(Class<? extends PathObject>) - Method in class qupath.lib.gui.tools.MeasurementExporter. Specify what type of object should be exported. ExtendedPathTool - Class in qupath.lib.gui.viewer.tools;  ; ExtensionClassLoader - Class in qupath.lib.gui. ClassLoader for loading QuPath extensions and other jars from the user directory. ExtensionControlPane - Class in qupath.lib.gui. Borderpane that displays extensions, with options to remove,; open containing folder, update, where possible. ExtensionManager - Class in qupath.lib.gui. Manage loading extensions for a QuPathGUI instance. ExtensionPreferences() - Constructor for class qupath.lib.gui.panes.PreferencePane.ExtensionPreferences;  ; EXTENSIONS - Variable in class qupath.lib.gui.actions.menus.ExtensionsMenuActions.Actions;  ; EXTENSIONS_ONLY - Enum constant in enum class qupath.lib.gui.prefs.PathPrefs.AutoUpdateType. Check for extensions on GitHub only (not new QuPath releases). extensionsDirectoryProperty() - Method in class qupath.lib.gui.UserDirectoryManager. Read only property representing the extensions directory. ExtensionsMenuActions - Class in qupath.lib.gui.actions.menus;  ; ExtensionsMenuActions.Actions - Class in qupath.lib.gui.actions.menus;  ; extract(int...) - Static method in class qupath.opencv.ops.ImageOps.Channels. Extract or rearrange channels by index. EXTRACT_REGION - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons; ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:292670,update,update,292670,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability," Static method in class qupath.opencv.ml.BioimageIoTools. Attempt to build a DnnModel that follows this spec as closely as possible. builder() - Static method in class qupath.lib.experimental.pixels.Parameters. Create a new builder for parameters. builder() - Static method in class qupath.lib.experimental.pixels.PixelProcessor. Create a new builder to construct a PixelProcessor. builder() - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Create a new builder to generate a custom dialog. builder() - Static method in class qupath.lib.scripting.ScriptParameters. Create a new builder for ScriptParameters. builder() - Static method in class qupath.opencv.dnn.DnnModelParams. Create a new params builder, with default values. builder() - Static method in class qupath.opencv.ml.FeaturePreprocessor. Create a FeaturePreprocessor.Builder to build a custom FeaturePreprocessor. builder() - Static method in class qupath.opencv.ml.PatchClassifierParams. Create a builder to generate new patch classifier params. builder(int) - Static method in class qupath.lib.objects.utils.Tiler. Create a new builder to generate square tiles. builder(int, int) - Static method in class qupath.lib.objects.utils.Tiler. Create a new builder to generate rectangular tiles. builder(String) - Static method in class qupath.opencv.dnn.DnnTools. Initiative building and configuring an OpenCVDnn. builder(String) - Static method in class qupath.opencv.dnn.OpenCVDnn. Create a new builder. builder(Collection<? extends MeasurementProcessor.CustomMeasurement<BufferedImage, BufferedImage>>) - Static method in class qupath.lib.experimental.pixels.MeasurementProcessor. Create a new builder for a PixelProcessor that can make custom measurements for an image object. builder(DensityMaps.DensityMapBuilder) - Static method in class qupath.lib.analysis.heatmaps.DensityMaps. Create a new DensityMaps.DensityMapBuilder initialized with the same properties as an existing builder. builder(Processor<ImagePlus, I",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:73184,patch,patch,73184,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability," Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.commands; Class UpdateUrisCommand<T extends UriResource>. java.lang.Object; qupath.lib.gui.commands.UpdateUrisCommand<T>. Type Parameters:; T - . public class UpdateUrisCommand<T extends UriResource>; extends Object; Fix broken URIs by using relative paths or prompting the user to select files.; This is intended to handle cases where files or projects have changed location, so that links need to be updated. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T extends UriResource>int; promptToUpdateUris(Collection<T> items,; URI basePrevious,; URI baseCurrent,; boolean onlyPromptIfMissing). Show dialog prompting the user to update URIs for missing files. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. promptToUpdateUris; public static <T extends UriResource> int promptToUpdateUris(Collection<T> items,; URI basePrevious,; URI baseCurrent,; boolean onlyPromptIfMissing); throws IOException; Show dialog prompting the user to update URIs for missing files.; Optionally provide previous and current base URIs. If not null, these will be used to relativize paths when searching for potential replacements URIs.; Usually, these correspond to the current and previous paths for a project. Type Parameters:; T - ; Parameters:; items - the items containing URIs to check; basePrevious - optional previous base path; baseCurrent - optional current base path; onlyPromptIfMissing - only show a dialog if any URIs correspond to missing files; Returns:; the number of changes made, or -1 if the user cancelled the dialog.; Throws:; IOException - if there was a problem accessing the URIs. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/UpdateUrisCommand.html:1476,update,update,1476,javadoc/docs/qupath/lib/gui/commands/UpdateUrisCommand.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/UpdateUrisCommand.html,1,['update'],['update']
Deployability," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2097,update,updateProgress,2097,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,5,['update'],"['update', 'updateProgress', 'updated']"
Deployability," a collection of objects to measure. Parameters:; imageData - the ImageData, required to determine many dynamic measurements; pathObjects - the objects to measure ('rows' in the table). setPixelLayer; public static void setPixelLayer(ImageData<BufferedImage> imageData,; ImageServer<BufferedImage> layerServer); Set an ImageServer as a property in the ImageData.; This is intended for use as a temporary (non-persistent) property, used by ObservableMeasurementTableData to create live measurements.; ; Note that this method is subject to change (in location and behavior). Parameters:; imageData - ; layerServer - server to return the pixel layer data; if null, the property will be removed. getPixelLayer; public static ImageServer<BufferedImage> getPixelLayer(ImageData<?> imageData); Request the pixel layer from an ImageData.; ; Note that this method is subject to change (in location and behavior). Parameters:; imageData - ; Returns:. updateMeasurementList; public void updateMeasurementList(); Update the entire measurement list for the current objects. See Also:. setImageData(ImageData, Collection). setPredicate; public void setPredicate(Predicate<? super PathObject> predicate); Set a predicate used to filter the rows of the table. Parameters:; predicate - . refreshEntries; public void refreshEntries(); Refresh the measurement values. createNumericMeasurement; @Deprecated; public Binding<Number> createNumericMeasurement(PathObject pathObject,; String column); Deprecated.; Create a specific numeric measurement.; ; Warning! This binding is not guaranteed to update its value automatically upon changes to the ; underlying object or data. Parameters:; pathObject - ; column - ; Returns:. createStringMeasurement; @Deprecated; public Binding<String> createStringMeasurement(PathObject pathObject,; String column); Deprecated.; Create a specific String measurement.; ; Warning! This binding is not guaranteed to update its value automatically upon changes to the ; underlying object or d",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/measure/ObservableMeasurementTableData.html:4772,update,updateMeasurementList,4772,javadoc/docs/qupath/lib/gui/measure/ObservableMeasurementTableData.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/measure/ObservableMeasurementTableData.html,2,['update'],['updateMeasurementList']
Deployability," a full image to the specified path. The writer will be determined based on the file extension. Parameters:; server - ; path - ; Throws:; IOException. writeImage; public static void writeImage(BufferedImage img,; String path); throws IOException; Write an image to the specified path. The writer will be determined based on the file extension. Parameters:; img - ; path - ; Throws:; IOException. detectionCentroidDistances; public static void detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest detection with each valid, not-ignored classification and add ; the result to the detection measurement list. Parameters:; imageData - ; splitClassNames - ; See Also:. DistanceTools.detectionCentroidDistances(ImageData, boolean). detectionCentroidDistances; @Deprecated; public static void detectionCentroidDistances(); Deprecated.; retained only for compatibility of v0.2.0 milestone releases; use instead #detectionCentroidDistances(boolean). Compute the distance for all detection object centroids to the closest detection with each valid, not-ignored classification and add ; the result to the detection measurement list for the current ImageData - without splitting class names. See Also:. DistanceTools.detectionCentroidDistances(ImageData, boolean). detectionCentroidDistances; public static void detectionCentroidDistances(boolean splitClassNames); Compute the distance for all detection object centroids to the closest detection with each valid, not-ignored classification and add ; the result to the detection measurement list for the current ImageData. Parameters:; splitClassNames - ; See Also:. DistanceTools.detectionCentroidDistances(ImageData, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ign",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:108067,release,releases,108067,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['release'],['releases']
Deployability," a function to perform the task of PathOverlay.getLocationString(ImageData, double, double, int, int). AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. AbstractTileableImageServer. Abstract ImageServer for BufferedImages that internally breaks up requests into constituent tiles. ActionAccelerator. Annotation used to specify a preferred accelerator for an an action. ActionConfig. Annotation indicating the a key in the external resources file containing ; the menu, text and (optional) description. ActionIcon. Default icon for an action. ActionMenu. Annotation indicating the menu path where an action should be installed. ActionMethod. Annotation indicating that a method should be converted to an Action if possible. ActionTools. Helper methods for generating and configuring Actions and UI elements. ActionTools.ActionBuilder. Builder class for custom Action objects. AffineTransformImageServer. ImageServer that dynamically applies an AffineTransform to an existing ImageServer. AffineTransforms. Helper class for working with affine transforms. AnalyzeMenuActions;  ; AnnotationPane. Component for displaying annotations within the active image. AreaROI. Implementation of an arbitrary area ROI - which could contain disjointed or hollow regions. ArrayWrappers. Simple wrappers for primitive arrays that returns values as doubles. ArrayWrappers.ArrayWrapper. Simple wrapper for an array or list, enabling values to be returned as doubles. AutoCompletions. Class to deal with script auto-completions. AutoCompletions.Completion. A single completion. AutoCompletions.CompletionTokeni",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:2184,install,installed,2184,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['install'],['installed']
Deployability," a model spec.; This encapsulates some key information QuPath needs for building a model in a way that can ; be modified and updated according to user requirements. Parameters:; model - the model spec to initialize the parameters; inputOps - optional additional preprocessing ops to apply, before any in the model spec are added; Returns:. buildPatchClassifierParams; public static PatchClassifierParams buildPatchClassifierParams(qupath.bioimageio.spec.BioimageIoSpec.BioimageIoModel modelSpec,; int preferredTileWidth,; int preferredTileHeight,; ImageOp... inputOps); Create an instance of PatchClassifierParams from a model spec.; This encapsulates some key information QuPath needs for building a model in a way that can ; be modified and updated according to user requirements. Parameters:; modelSpec - the model spec to initialize the parameters; preferredTileWidth - preferred tile width, or -1 to automatically determine this; the width will be updated based on the spec; preferredTileHeight - preferred tile height, or -1 to automatically determine this; the height will be updated based on the spec; inputOps - optional additional preprocessing ops to apply, before any in the model spec are added; Returns:. transformsToOp; public static ImageOp transformsToOp(Collection<? extends qupath.bioimageio.spec.BioimageIoSpec.Processing> transforms); Create an ImageOp that applies the specified transforms sequentially.; ; Important!; This method is experimental and subject to change in future versions.; ; Not all Bioimage Model Zoo transforms are supported ; by QuPath ops, and ops are generally per tile whereas model zoo transforms ; sometimes require global statistics (e.g. for normalization).; ; This method will make an attempt to return a suitable op, but it may ; not be able to incorporate all steps. Parameters:; transforms - ; Returns:. transformToOp; public static ImageOp transformToOp(qupath.bioimageio.spec.BioimageIoSpec.Processing transform); Create an ImageOp that applies ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/BioimageIoTools.html:3577,update,updated,3577,javadoc/docs/qupath/opencv/ml/BioimageIoTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/BioimageIoTools.html,2,['update'],['updated']
Deployability," a new ID. static PathObject; transformObject(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create a transformed version of a PathObject, optionally with a new ID. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements). Create (optionally) transformed versions of the PathObject and all its descendants, recursively. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create (optionally) transformed versions of the PathObject and all its descendants, recursively, optionally assigning; new IDs to the created objects. static void; unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'unlocked'. static void; unlockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. static PathObject; updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane). Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object, and any descendant objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectTools; public PathObjectTools(). Method Details. hasPointROI; public static boolean hasPointROI(PathObject pathObject); Returns true if a PathObject has a Point ROI. Parameters:; pathObject",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:14593,update,update,14593,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['update'],['update']
Deployability," addPathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). boolean; addPathObjects(Collection<? extends PathObject> pathObjects). Deprecated.; since v0.4.0; use addObjects(Collection) instead. boolean; addPathObjectWithoutUpdate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObje",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:3832,update,update,3832,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,1,['update'],['update']
Deployability," an ImageData. String; getStringValue(PathObject pathObject,; String column). Get a string representation of the value. String; getStringValue(PathObject pathObject,; String column,; int decimalPlaces). Get a string value, converting to a fixed number of decimal places if the column is numeric. boolean; isNumericMeasurement(String name). Query whether a named measurement returns a numeric value only. boolean; isStringMeasurement(String name). Query whether a named measurement returns a String value only. void; refreshEntries(). Refresh the measurement values. void; setImageData(ImageData<?> imageData,; Collection<? extends PathObject> pathObjects). Set the ImageData and a collection of objects to measure. static void; setPixelLayer(ImageData<BufferedImage> imageData,; ImageServer<BufferedImage> layerServer). Set an ImageServer as a property in the ImageData. void; setPredicate(Predicate<? super PathObject> predicate). Set a predicate used to filter the rows of the table. void; updateMeasurementList(). Update the entire measurement list for the current objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. NAME_OBJECT_ID; public static final String NAME_OBJECT_ID; The name used for the Object ID column. See Also:. Constant Field Values. Constructor Details. ObservableMeasurementTableData; public ObservableMeasurementTableData(). Method Details. setImageData; public void setImageData(ImageData<?> imageData,; Collection<? extends PathObject> pathObjects); Set the ImageData and a collection of objects to measure. Parameters:; imageData - the ImageData, required to determine many dynamic measurements; pathObjects - the objects to measure ('rows' in the table). setPixelLayer; public static void setPixelLayer(ImageData<BufferedImage> imageData,; ImageServer<BufferedImage> layerServer); Set an ImageServer as a property in the ImageData.; This is intended for use as a t",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/measure/ObservableMeasurementTableData.html:3217,update,updateMeasurementList,3217,javadoc/docs/qupath/lib/gui/measure/ObservableMeasurementTableData.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/measure/ObservableMeasurementTableData.html,1,['update'],['updateMeasurementList']
Deployability," black to the 'pure' color specified,; but without actually generating the LUT. DirectServerChannelInfo(ImageData<BufferedImage>, int) - Constructor for class qupath.lib.display.DirectServerChannelInfo. Constructor. disabled(boolean) - Method in class qupath.lib.gui.actions.ActionTools.ActionBuilder. Set the disabled property of the action. disabled(ObservableValue<Boolean>) - Method in class qupath.lib.gui.actions.ActionTools.ActionBuilder. Bind the disabled property of the action to an ObservableValue, bidirectionally if possible. disableGammaAdjustmentProperty() - Method in class qupath.lib.gui.commands.display.BrightnessContrastSliderPane. Prevent gamma from being adjusted. disableMinMaxAdjustmentProperty() - Method in class qupath.lib.gui.commands.display.BrightnessContrastSliderPane. Prevent the min and max sliders from being adjusted. disableToggleMenuItemsProperty() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Property to disable options to toggle the visibility of channels. disableUpdatesProperty() - Method in class qupath.lib.gui.panes.AnnotationPane. Property that may be used to prevent updates on every hierarchy or selection change event. disableUpdatesProperty() - Method in class qupath.lib.gui.panes.PathObjectHierarchyView. Property that may be used to prevent updates on every hierarchy or selection change event. display(ImageDisplay) - Method in class qupath.lib.gui.images.servers.RenderedImageServer.Builder. Deprecated.; use RenderedImageServer.Builder.renderer(ImageRenderer) instead (since an ImageDisplay is also an ImageRenderer. displayMode() - Method in class qupath.lib.display.ImageDisplay. Get the value of ImageDisplay.useInvertedBackgroundProperty(). displayModeProperty() - Method in class qupath.lib.gui.charts.HistogramChart. Property to control how the histogram is displayed, either using areas or bars. DisplaySettingUtils - Class in qupath.lib.display.settings. Utility class for working with image display",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:262104,toggle,toggle,262104,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['toggle'],['toggle']
Deployability," boolean; equals(Object obj);  ; double; getDownsample(). Get the requested downsample factor, defining the resolution at which pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:3842,update,updateDownsample,3842,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,1,['update'],['updateDownsample']
Deployability," boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public ColorMaps(). Method Details. installColorMaps; public static boolean installColorMaps(Path... paths); Install colormaps from the specified paths. Parameters:; paths - optional paths containing either .tsv files containing colormaps, or directories that contain such .tsv files.; Returns:; true if changes were made, false otherwise. installColorMaps; public static boolean installColorMaps(ColorMaps.ColorMap... colorMaps); Install colormaps. Parameters:; colorMaps - one or more colormaps.; Returns:; true if changes were made, false otherwise. getColors; public static int[] getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert); Get an array of packed RGB values for a specific colormap. Parameters:; map - the colormap providing colors; nValues - the number of colors to extract; doInvert - if true, reverse the order of the colors; Returns:; an int array of length nValues. getDefaultColorMap; public static ColorMaps.ColorMap getDefaultColorMap(); Get a default, general-purpose ColorMaps.ColorMap. Returns:; See Also:. setDefaultColorMap(ColorMap). setDefaultColorMap; public static void setDefaultColorMap(ColorMaps.ColorMap colorMap); Set the default ColorMaps.ColorMap. Parameters:; colorMap - ; See Also:. getDefaultColorMap(). getColorMaps; public static Map<String,ColorMaps.ColorMap> getColorMaps(); Get an unmodifiable map representing al",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:2746,install,installColorMaps,2746,javadoc/docs/qupath/lib/color/ColorMaps.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html,2,['install'],['installColorMaps']
Deployability," boolean swapRB,; boolean crop). Create an OpenCV blob from a batch of Mats with optional scaling, resizing and cropping. static Mat; blobFromImages(Mat... mats). Create an OpenCV blob from one or more mats. static Mat; blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. static OpenCVDnn.Builder; builder(String modelPath). Initiative building and configuring an OpenCVDnn. static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the n",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:2057,patch,patch,2057,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability," calibrated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. int; nVertices(). Get the total number of vertices in the polygon. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. nVertices; public int nVertices(); Get the total number of vertices in the polygon. Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolygonROI.html:3326,update,updatePlane,3326,javadoc/docs/qupath/lib/roi/PolygonROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolygonROI.html,1,['update'],['updatePlane']
Deployability," changes can then be requred from the UriResource. Parameters:; uris - ; Returns:. wrap; public static UriResource wrap(Collection<URI> uris); Wrap one or more URIs in a UriResource so they can be updated together.; Note that the collection is not used directly. Any changes should be accessed from the ; UriResource. Parameters:; uris - ; Returns:. locateFile; public static URI locateFile(URI uri,; int searchDepth,; Path... searchPaths); throws IOException; Attempt to update a URI to find an existing file using the specified search paths. Parameters:; uri - the URI to search for; searchDepth - the depth of the search (i.e. how many subdirectories); searchPaths - the base directories to search, in order; Returns:; a new URI corresponding to an existing file with the same name, ; or the original URI if no replacement was found or required; Throws:; IOException. locateFile; public static String locateFile(String path,; int searchDepth,; Path... searchPaths); throws IOException; Attempt to update a file using the specified search paths. Parameters:; path - the path to a file that may or may not exist; searchDepth - the depth of the search (i.e. how many subdirectories); searchPaths - the base directories to search, in order; Returns:; the path to a file with the same name as 'path' that does exist, ; or path unchanged if no existing file could be found.; Throws:; IOException. fixUris; public static int fixUris(UriResource resource,; Project<?> project); Attempt to fix any broken paths by updating URIs based upon the current project. Parameters:; resource - the resource to update; project - ; Returns:; number of URIs that were updated. searchDepth; public UriUpdater<T> searchDepth(int maxDepth); Maximum search depth when using searchDepth(int) to match filenames in directories and subdirectories. Parameters:; maxDepth - ; Returns:. relative; public UriUpdater<T> relative(URI uriOriginal,; URI uriCurrent); Identify replacements for missing URIs by relativizing URI.; This is",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html:6048,update,update,6048,javadoc/docs/qupath/lib/io/UriUpdater.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html,1,['update'],['update']
Deployability," class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageData<BufferedImage>>) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath that takes the current ImageData as input. installInfoMessage(Action, ObjectExpression<InfoMessage>) - Static method in class qupath.lib.gui.actions.ActionTools. Install an optional info message to the action. installRangePrompt(Slider) - Static method in class qupath.lib.gui.tools.GuiTools. Install a mouse click listener to prompt the user to input min/max values for a slider. installStyles(Collection<File>) - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Handle installing CSS files (which can be used to style QuPath). installTool(PathTool, KeyCodeCombination) - Method in class qupath.lib.gui.ToolManager. Install a new tool for interacting with viewers. INT16 - Enum constant in enum class qupath.lib.images.servers.PixelType. 16-bit signed integer. INT32 - Enum constant in enum class qupath.lib.images.servers.PixelType. 32-bit signed integer. INT8 - Enum constant in enum class qupath.lib.images.servers.PixelType. 8-bit signed integer. INTENSITY_FEATURES - Variable in class qupath.lib.gui.actions.menus.AnalyzeMenuActions.Actions;  ; IntensityFeaturesPlugi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:608861,install,installInfoMessage,608861,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installInfoMessage']
Deployability," class qupath.lib.gui.commands.TMACommands. Prompt to export summary TMA data for a specific image to a directory. promptToImportImages(QuPathGUI, String...) - Static method in class qupath.lib.gui.commands.ProjectCommands. Show prompt for the user to select images to import into the current project in QuPath, choosing a suitable ImageServerBuilder. promptToImportImages(QuPathGUI, ImageServerBuilder<BufferedImage>, String...) - Static method in class qupath.lib.gui.commands.ProjectCommands. Show prompt for the user to select images to import into the current project in QuPath. promptToImportLegacyProject(QuPathGUI) - Static method in class qupath.lib.gui.commands.ProjectCommands. Prompt the user to select a legacy project file, and then import the images into ; the current project. promptToImportObjects(PathObjectHierarchy, Collection<? extends PathObject>) - Static method in class qupath.lib.gui.commands.InteractiveObjectImporter. Import a collection of objects to an object hierarchy, prompting to confirm and asking whether to update IDs. promptToImportObjectsFromFile(ImageData<BufferedImage>, File) - Static method in class qupath.lib.gui.commands.InteractiveObjectImporter. Prompt to import objects read from a file. promptToImportObjectsProjectEntry(ImageData<BufferedImage>, ProjectImageEntry<?>) - Static method in class qupath.lib.gui.commands.InteractiveObjectImporter. Prompt to import objects from a project entry. promptToImportTMAData(ImageData<?>) - Static method in class qupath.lib.gui.commands.TMACommands. Prompt to import TMA data for the specified image data. promptToOpenImageFile() - Method in class qupath.lib.gui.QuPathGUI. Show a file chooser to open a new image in the current viewer. promptToOpenImageFileOrUri() - Method in class qupath.lib.gui.QuPathGUI. Show a dialog to open a new image in the current viewer, with support ; for entering a URL (rather than requiring a local file only). promptToOpenProject(QuPathGUI) - Static method in class qupath.lib",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:793896,update,update,793896,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability," clusters. classifySelected(String) - Static method in class qupath.lib.scripting.QP. Set the classification of the selected objects in the current hierarchy. classifySelected(PathObjectHierarchy, String) - Static method in class qupath.lib.scripting.QP. Set the classification of the selected objects. clear() - Method in interface qupath.lib.gui.scripting.EditableText. Request clear the contents of the control. clear() - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; clear() - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; clear() - Method in class qupath.lib.gui.UndoRedoManager. Clear all undo/redo stacks (useful when memory is low). clear() - Method in interface qupath.lib.measurements.MeasurementList. Remove all the measurements from the list. clear() - Method in class qupath.lib.objects.PathObjectConnections. Clear all existing connections. clear() - Method in class qupath.lib.plugins.workflow.Workflow. Remove all steps, firing an update event if the workflow was not previously empty. CLEAR_ANNOTATIONS - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.DeleteActions;  ; CLEAR_CORES - Variable in class qupath.lib.gui.actions.menus.TMAMenuActions.Actions;  ; CLEAR_DETECTIONS - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.DeleteActions;  ; CLEAR_HIERARCHY - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.DeleteActions;  ; clearAll() - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Remove all objects from the hierarchy. clearAllObjects() - Static method in class qupath.lib.scripting.QP. Remove all the objects in the current PathObjectHierarchy, and clear the selection. clearAllObjects(Class<? extends PathObject>) - Static method in class qupath.lib.scripting.QP. Remove all the objects of a specified Java class. clearAnnotationMeasurements() - Static method in class qupath.lib.scripting.QP. Clear the measurement lists for all annotations in the current hie",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:106190,update,update,106190,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability," command - the command to run; Returns:; an Action with appropriate properties set. createImageDataAction; public org.controlsfx.control.action.Action createImageDataAction(Consumer<ImageData<BufferedImage>> command,; String name); Create an Action that depends upon an ImageData.; When the action is invoked, it will be passed the current QuPathViewer as a parameter.; The action will also be disabled if no viewer is present. Parameters:; command - the command to run; name - text of the action; Returns:; an Action with appropriate properties set. createProjectAction; public org.controlsfx.control.action.Action createProjectAction(Consumer<Project<BufferedImage>> command); Create an Action that depends upon a Project.; When the action is invoked, it will be passed the current Project as a parameter.; The action will also be disabled if no image data is present. Parameters:; command - the command to run; Returns:; an Action with appropriate properties set. installActions; public void installActions(Collection<? extends org.controlsfx.control.action.Action> actions); Install the specified actions. It is assumed that these have been configured via ActionTools, ; and therefore have sufficient information associated with them (including a menu path). Parameters:; actions - . getCommonActions; public CommonActions getCommonActions(); Get the common actions associated with this QuPath instance. Returns:. getAutomateActions; public AutomateActions getAutomateActions(); Get the automated actions associated with this QuPath instance. Returns:. lookupActionByText; public org.controlsfx.control.action.Action lookupActionByText(String text); Search for an action based upon its text (name) property. Parameters:; text - the text to search for; Returns:; the action, if found, or null otherwise. lookupMenuItem; public MenuItem lookupMenuItem(String menuPath); Search for a menu item based upon its path. Parameters:; menuPath - path to the menu item, in the form ""Main menu>Submenu>Name; R",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:33944,install,installActions,33944,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,2,['install'],['installActions']
Deployability," data for the specified image. Parameters:; imageData - the image containing TMA data to export; path - path to the export directory; downsampleFactor - downsample applied to each TMA core image; Throws:; IOException. getQuPath; public static QuPathGUI getQuPath(); Get the current QuPath instance. Returns:. getCurrentViewer; public static QuPathViewer getCurrentViewer(); Get the active viewer in the current QuPath instance. Returns:; an active viewer, or null if no viewer is active in QuPath currently. locateFile; public static String locateFile(String nameOrPath); throws IOException; Locate a specified file based upon its name or path, with a search depth of 4.; This first checks if the provided path is to a file that already exists.; If it is not, then it searches recursively within the current project or ; user directory (if available) up to a fixed search depth for a file with the same name. Parameters:; nameOrPath - the original name or path; Returns:; the identified file path, or the original file path if no update was found or required; Throws:; IOException; See Also:. UriUpdater.locateFile(String, int, Path...). locateFile; public static String locateFile(String nameOrPath,; int searchDepth); throws IOException; Locate a specified file based upon its name or path.; This first checks if the provided path is to a file that already exists.; If it is not, then it searches recursively within the current project or ; user directory (if available) up to a specified search depth for a file with the same name. Parameters:; nameOrPath - the original name or path; searchDepth - how deep to search subdirectories recursively; Returns:; the identified file path, or the original file path if no update was found or required; Throws:; IOException; See Also:. UriUpdater.locateFile(String, int, Path...). runPlugin; public static boolean runPlugin(String className,; ImageData<?> imageData,; String args); throws InterruptedException. Throws:; InterruptedException. runPlugin; pub",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/scripting/QPEx.html:13965,update,update,13965,javadoc/docs/qupath/lib/gui/scripting/QPEx.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/scripting/QPEx.html,1,['update'],['update']
Deployability," double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled v",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:6527,update,updatePlane,6527,javadoc/docs/qupath/lib/roi/EllipseROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html,1,['update'],['updatePlane']
Deployability," enableBioformats - Variable in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension.BioFormatsPreferences;  ; enableFreehand - Variable in class qupath.lib.gui.panes.PreferencePane.ViewerPreferences;  ; enableFreehandToolsProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Enable polygon/polyline tools to support 'freehand' mode; this means that if the ROI is ; started by dragging, then it will end by lifting the mouse (rather than requiring a double-click). ensureBufferedImage(Image) - Static method in class qupath.lib.awt.common.BufferedImageTools. Convert an Image to a BufferedImage if necessary, or return the original image unchanged ; if it is already a BufferedImage. ensureBufferedImageType(BufferedImage, int) - Static method in class qupath.lib.awt.common.BufferedImageTools. Convert a BufferedImage to have a specified type. ensureContinuous(Mat, boolean) - Static method in class qupath.opencv.tools.OpenCVTools. Ensure a Mat is continuous, creating a copy of the data if necessary. ensureCursorType(Cursor) - Method in class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler. Ensure that the specified cursor is set in the current viewer. ensureCursorType(Cursor) - Method in class qupath.lib.gui.viewer.tools.handlers.MoveToolEventHandler. Ensure that the specified cursor is set in the current viewer. ensureCursorType(Cursor) - Method in class qupath.process.gui.WandToolEventHandler. Ensure that the specified cursor is set in the current viewer. ensureDuplicatableGlyph(Glyph) - Static method in class qupath.lib.gui.tools.GuiTools. Ensure that a Glyph is 'duplicatable', without losing its key properties. ensureDuplicatableGlyph(Glyph, boolean) - Static method in class qupath.lib.gui.tools.GuiTools. Ensure that a Glyph is 'duplicatable', optionally retaining any fill. ensureHandlesUpdated() - Method in class qupath.lib.roi.RoiEditor. In the event that the current ROI has been modified elsewhere (which generally it shouldn't ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:278541,continuous,continuous,278541,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['continuous'],['continuous']
Deployability," extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; alwaysPromptForObjects, getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. SubcellularDetection; public SubcellularDetection(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information tha",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html:2953,update,update,2953,javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/detect/cells/SubcellularDetection.html,1,['update'],['update']
Deployability," false) when there is no data. setHierarchy(PathObjectHierarchy) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Set the contents of this hierarchy to be the same as that of another hierarchy. setID(UUID) - Method in class qupath.lib.objects.PathObject. Set the ID for this object. setImageData(ImageData<?>) - Method in class qupath.lib.scripting.ScriptParameters.Builder. Set the current image data for the script. setImageData(ImageData<?>, Collection<? extends PathObject>) - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Set the ImageData and a collection of objects to measure. setImageData(ImageData<BufferedImage>) - Method in class qupath.lib.gui.viewer.QuPathViewer. Set the current image for this viewer. setImageData(ImageData<BufferedImage>, boolean) - Method in class qupath.lib.display.ImageDisplay. Set the ImageData to a new value. setImageJPath(String) - Static method in class qupath.imagej.gui.IJExtension. Set the path for a local ImageJ installation, if required. setImageName(String) - Method in interface qupath.lib.projects.ProjectImageEntry. Set the image name for this project entry. setImageName(ImageServer<?>, String) - Static method in class qupath.lib.images.servers.ServerTools. Set the name property of the metadata for an ImageServer. setImageType - Variable in class qupath.lib.gui.panes.PreferencePane.GeneralPreferences;  ; setImageType(String) - Static method in class qupath.lib.scripting.QP. Set the image type for the current image data, using a String to represent the enum ImageData.ImageType. setImageType(ImageData.ImageType) - Method in class qupath.lib.images.ImageData. Set the image type. setImageType(ImageData.ImageType) - Static method in class qupath.lib.scripting.QP. Set the image type for the current image data. setInfo() - Static method in class qupath.lib.gui.logging.LogManager. Set the root log level to DEBUG. setInputFile(File) - Method in class qupath.lib.gui.tma.TMASummaryViewer. Deprecate",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:929710,install,installation,929710,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installation']
Deployability," filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating objects have changed, and may still be changing. Parameters:; source - ; pathObjects - ; isChanging - is true, listeners may choose not to respond until an event is fired with isChanging false. fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source,; PathObject pathObject); Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. Parameters:; source - ; pathObject - . fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source); Fire a hierarchy update indicating the hierarchy structure has changed.; This is often a good choice of event if multiple changes may have occurred, of i",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:20430,update,update,20430,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,1,['update'],['update']
Deployability," form of URIs, customizing the text displayed for the menu items. static org.controlsfx.glyphfont.Glyph; ensureDuplicatableGlyph(org.controlsfx.glyphfont.Glyph glyph). Ensure that a Glyph is 'duplicatable', without losing its key properties. static org.controlsfx.glyphfont.Glyph; ensureDuplicatableGlyph(org.controlsfx.glyphfont.Glyph glyph,; boolean useFill). Ensure that a Glyph is 'duplicatable', optionally retaining any fill. static ImageData.ImageType; estimateImageType(ImageServer<BufferedImage> server,; BufferedImage imgThumbnail). Make a semi-educated guess at the image type of a PathImageServer. static String; getMagnificationString(QuPathViewer viewer). Get an appropriate String to represent the magnification of the image currently in the viewer. static WritableImage; getScaledRGBInstance(BufferedImage img,; int targetWidth,; int targetHeight). Get a scaled (RGB or ARGB) image, achieving reasonable quality even when scaling down by a considerably amount. static void; installRangePrompt(Slider slider). Install a mouse click listener to prompt the user to input min/max values for a slider. static BufferedImage; makeFullScreenshot(). Make a BufferedImage snapshot of the full screen. static BufferedImage; makeSnapshot(). Make a BufferedImage snapshot of the current GUI. static BufferedImage; makeSnapshot(QuPathGUI qupath,; GuiTools.SnapshotType type). Make a snapshot (image) showing what is currently displayed in a QuPath window; or the active viewer within QuPath, as determined by the SnapshotType. static BufferedImage; makeSnapshot(QuPathGUI qupath,; QuPathViewer viewer,; GuiTools.SnapshotType type). Make a snapshot (image) showing what is currently displayed in a QuPath window; or the specified viewer, as determined by the SnapshotType. static WritableImage; makeSnapshotFX(QuPathGUI qupath,; GuiTools.SnapshotType type). Make a snapshot as a JavaFX Image, using the current viewer if a viewer is required. static WritableImage; makeSnapshotFX(QuPathGUI qupath,; ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tools/GuiTools.html:2791,install,installRangePrompt,2791,javadoc/docs/qupath/lib/gui/tools/GuiTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tools/GuiTools.html,1,['install'],['installRangePrompt']
Deployability," getClass, notify, notifyAll, wait, wait, wait. Field Details. COMPARATOR_MAJOR; public static final Comparator<Version> COMPARATOR_MAJOR; Compare major versions only. COMPARATOR_MAJOR_MINOR; public static final Comparator<Version> COMPARATOR_MAJOR_MINOR; Compare major then minor versions. COMPARATOR_MAJOR_MINOR_PATCH; public static final Comparator<Version> COMPARATOR_MAJOR_MINOR_PATCH; Compare major then minor then patch versions (ignoring suffixes). COMPARATOR_FULL; public static final Comparator<Version> COMPARATOR_FULL; Compare full version, including any suffixes. UNKNOWN; public static final Version UNKNOWN; Constant representing any unknown version. Method Details. getMajor; public int getMajor(); Get the major version number (X.0.0). Returns:. getMinor; public int getMinor(); Get the minor version number (0.X.0). Returns:. getPatch; public int getPatch(); Get the patch version number (0.0.X). Returns:. getSuffix; public String getSuffix(); Get the (optional) suffix, which may be appended at the end of the version ; number to indicate a pre-release (0.0.0-X). Returns:. hasSuffix; public boolean hasSuffix(); Returns true if the version has a suffix, which typically indicates that it ; does not refer to a final stable version. Returns:. toString; public String toString(). Overrides:; toString in class Object. parse; public static Version parse(String versionString); throws IllegalArgumentException; Parse a Version object representing a semantic version number from a String.; ; The version should be in the form x.y.z or x.y.z-additional, where additional ; should be a dot-separated patch version identifier. In the case that it is hyphen-separated, the hyphens will ; be replaced by dots. Parameters:; versionString - the version String to be parsed; Returns:; a Version parsed from this string, or UNKNOWN if the string is null or blank.; Throws:; IllegalArgumentException - if no version could be parsed from the String. compareTo; public int compareTo(Version o). S",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html:3476,release,release,3476,javadoc/docs/qupath/lib/common/Version.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html,1,['release'],['release']
Deployability," getMean; public Scalar getMean(); Get means which should be subtracted for preprocessing. Returns:; the mean value if specified, or null if OpenCV's default should be used (likely to be zero); See Also:. getScale(). getModelUri; public URI getModelUri(); Get the path to the model. Returns:. getConfigUri; public URI getConfigUri(); Get the path to the model configuration, if required. Returns:. getFramework; public String getFramework(); Get the framework used to create the model. Returns:. builder; public static OpenCVDnn.Builder builder(String pathModel); Create a new builder. Parameters:; pathModel - ; Returns:. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. getBlobFunction; public BlobFunction<Mat> getBlobFunction(); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or onl",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:5692,update,updateURIs,5692,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,2,['update'],['updateURIs']
Deployability," in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - M",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1065045,update,updatePlane,1065045,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updatePlane']
Deployability," inputResolution; public PatchClassifierParams.Builder inputResolution(PixelCalibration cal,; double downsample); Define the input resolution using a pixel calibration and a scaling factor. Parameters:; cal - input calibration; if null, a default calibration will be used; downsample - scaling factor (1.0 to use the calibration directly); Returns:. inputResolution; public PatchClassifierParams.Builder inputResolution(PixelCalibration cal); Define the input resolution using a pixel calibration object. Parameters:; cal - ; Returns:. halo; public PatchClassifierParams.Builder halo(int padding); Define a halo that is symmetric in x and y. Parameters:; padding - padding value, to be added both before and after rows and columns.; Returns:; See Also:. halo(Padding). halo; public PatchClassifierParams.Builder halo(Padding halo); Define a halo using a padding object. Parameters:; halo - ; Returns:; See Also:. halo(int). patchSize; public PatchClassifierParams.Builder patchSize(int patchSize); Define the requested square patch size. Parameters:; patchSize - width and height of the patch; Returns:. patchSize; public PatchClassifierParams.Builder patchSize(int patchWidth,; int patchHeight); Define the requested patch size. Parameters:; patchWidth - requested patch width; patchHeight - requested patch height; Returns:. preprocessing; public PatchClassifierParams.Builder preprocessing(ImageOp... preprocessingOps); Define the preprocessing steps from an array.; Note that any existing preprocessing steps in the builder will ; be replaced by those provided here. Parameters:; preprocessingOps - ; Returns:. preprocessing; public PatchClassifierParams.Builder preprocessing(Collection<? extends ImageOp> preprocessingOps); Define the preprocessing steps from a collection.; Note that any existing preprocessing steps in the builder will ; be replaced by those provided here. Parameters:; preprocessingOps - ; Returns:. prediction; public PatchClassifierParams.Builder prediction(ImageOp predict",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html:5382,patch,patchSize,5382,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,3,['patch'],"['patch', 'patchSize']"
Deployability," int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgum",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9729,patch,patch,9729,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability," interface qupath.lib.display.ChannelDisplayInfo. Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static method in class qupath.lib.analysis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriResource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriRes",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1067180,update,updateStatus,1067180,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateStatus']
Deployability," is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.gui.prefs; Enum Class PathPrefs.AutoUpdateType. java.lang.Object; java.lang.Enum<PathPrefs.AutoUpdateType>; qupath.lib.gui.prefs.PathPrefs.AutoUpdateType. All Implemented Interfaces:; Serializable, Comparable<PathPrefs.AutoUpdateType>, Constable. Enclosing class:; PathPrefs. public static enum PathPrefs.AutoUpdateType; extends Enum<PathPrefs.AutoUpdateType>; Options for automatic updating checking of QuPath and/or extensions. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; EXTENSIONS_ONLY. Check for extensions on GitHub only (not new QuPath releases). NONE. Don't check for any updates automatically. QUPATH_AND_EXTENSIONS. Check for QuPath and extensions on GitHub. QUPATH_ONLY. Check for QuPath updates only. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static PathPrefs.AutoUpdateType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathPrefs.AutoUpdateType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. QUPATH_ONLY; public static final PathPrefs.AutoUpdateType QUPATH_ONLY; Check for QuPath updates only. QUPATH_AND_EXTENSIONS; public static fi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html:1075,release,releases,1075,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html,1,['release'],['releases']
Deployability," java.lang.Object; qupath.lib.gui.images.stores.AbstractImageRenderer. All Implemented Interfaces:; ImageRenderer. Direct Known Subclasses:; ImageDisplay. public abstract class AbstractImageRenderer; extends Object; implements ImageRenderer; Abstract ImageRenderer, which adds a timestamp variable. Field Summary; Fields. Modifier and Type; Field; Description; protected long; timestamp. Timestamp variable; this should be updated by implementing classes. Constructor Summary; Constructors. Constructor; Description; AbstractImageRenderer();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; long; getLastChangeTimestamp(). Timestamp of the last change (probably in milliseconds). String; getUniqueID(). Get a unique key, which will be used for caching. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.images.stores.ImageRenderer; applyTransforms. Field Details. timestamp; protected long timestamp; Timestamp variable; this should be updated by implementing classes. Constructor Details. AbstractImageRenderer; public AbstractImageRenderer(). Method Details. getLastChangeTimestamp; public long getLastChangeTimestamp(); Description copied from interface: ImageRenderer; Timestamp of the last change (probably in milliseconds).; ; This can be used to identify when the status has changed. Specified by:; getLastChangeTimestamp in interface ImageRenderer; Returns:. getUniqueID; public String getUniqueID(); Description copied from interface: ImageRenderer; Get a unique key, which will be used for caching.; ; The only requirement is that the key is unique for the ImageRenderer in its ; current state. It is suggested to base it on the full class name, a counter for instances ; of this class, and a timestamp derived from the last change. Specified by:; getUniqueID in interface ImageRenderer; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/stores/AbstractImageRenderer.html:1530,update,updated,1530,javadoc/docs/qupath/lib/gui/images/stores/AbstractImageRenderer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/stores/AbstractImageRenderer.html,1,['update'],['updated']
Deployability," method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageData<BufferedImage>>) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath that takes the current ImageData as input. installInfoMessage(Action, ObjectExpression<InfoMessage>) - Static method in class qupath.lib.gui.actions.ActionTools. Install an optional info message to the action. installRangePrompt(Slider) - Static method in class qupath.lib.gui.tools.GuiTools. Install a mouse click listener to prompt the user to input min/max values for a slider. installStyles(Collection<File>) - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Handle installing CSS files (which can be used to style QuPath). installTool(PathTool, KeyCodeCombination) - Method in class qupath.lib.gui.ToolManager. Install a new tool for interacting with viewers. INT16 - Enum constant in enum class qupath.lib.images.servers.PixelType. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:608541,install,installGroovyCommand,608541,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installGroovyCommand']
Deployability," method in class qupath.lib.objects.PathObjectTools. Get all the objects in a collection that are outside a defined region. findObjectsOutsideRegion(Collection<? extends PathObject>, ImageRegion, int, int, int, int, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and timepoints. findRegionalMaxima(ImageProcessor, float, boolean) - Static method in class qupath.imagej.processing.MorphologicalReconstruction. Find regional maxima using morphological reconstruction. findRegionalMaxima(Mat) - Static method in class qupath.opencv.tools.OpenCVTools. Get the regional maxima within a Mat, providing the output as a labeled image. finishTranslation() - Method in class qupath.lib.roi.RoiEditor. Notify the editor that translation should end. fireHierarchyChangedEvent(Object) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating the hierarchy structure has changed. fireHierarchyChangedEvent(Object, PathObject) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. fireHierarchyUpdate() - Static method in class qupath.lib.scripting.QP. Trigger an update for the current hierarchy. fireHierarchyUpdate(PathObjectHierarchy) - Static method in class qupath.lib.scripting.QP. Trigger an update for the specified hierarchy. fireImageDataChanged(ImageData<BufferedImage>, ImageData<BufferedImage>) - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; fireObjectClassificationsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object classifications have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.Pat",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:308680,update,update,308680,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability," new ActionTools.ActionBuilder. actionBuilder; public static ActionTools.ActionBuilder actionBuilder(Consumer<ActionEvent> handler); Create an ActionTools.ActionBuilder with the specified event handler. Parameters:; handler - ; Returns:; a new ActionTools.ActionBuilder. createMenuItem; public static MenuItem createMenuItem(org.controlsfx.control.action.Action action); Create a menu item from an action.; This stores a reference to the action as a property of the menu item. Parameters:; action - the action from which to construct the menu item; Returns:; a new MenuItem configured according to the action. createCheckMenuItem; public static MenuItem createCheckMenuItem(org.controlsfx.control.action.Action action,; ToggleGroup group); Create a menu item from an action that makes use of a selected property.; This stores a reference to the action as a property of the menu item. Parameters:; action - the action from which to construct the menu item; group - a toggle group to associate with the action; if present, a radio menu item will be returned; Returns:; a new MenuItem configured according to the action. createCheckMenuItem; public static MenuItem createCheckMenuItem(org.controlsfx.control.action.Action action); Create a menu item from an action that makes use of a selected property.; This stores a reference to the action as a property of the menu item. Parameters:; action - the action from which to construct the menu item; Returns:; a new MenuItem configured according to the action. createCheckBox; public static CheckBox createCheckBox(org.controlsfx.control.action.Action action); Create a checkbox from an action.; This stores a reference to the action as a property of the checkbox. Parameters:; action - the action from which to construct the checkbox; Returns:; a new CheckBox configured according to the action. createToggleButtonWithGraphicOnly; public static ToggleButton createToggleButtonWithGraphicOnly(org.controlsfx.control.action.Action action); Create a toggle b",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html:10935,toggle,toggle,10935,javadoc/docs/qupath/lib/gui/actions/ActionTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html,1,['toggle'],['toggle']
Deployability," notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); Total number of steps in the workflow. Returns:. isEmpty; public boolean isEmpty(); Returns true if the workflow does not contain any steps. Returns:. clear; public void clear(); Remove all steps, firing an update event if the workflow was not previously empty. fireWorkflowUpdatedEvent; protected void fireWorkflowUpdatedEvent(). addWorkflowListener; public void addWorkflowListener(WorkflowListener listener); Add a listener for changes to the workflow. Parameters:; listener - . removeWorkflowListener; public void removeWorkflowListener(WorkflowListener listener); Remove a listener for changes to the workflow. Parameters:; listener - . createScript; public String createScript(); Generate a script from the current workflow steps.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:3649,update,update,3649,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,1,['update'],['update']
Deployability," object. <T extends Number>Charts.BarChartBuilder; series(String name,; Collection<? extends String> x,; Collection<T> y). Create a bar chart using collections of numeric values. <T> Charts.BarChartBuilder; series(String name,; Collection<? extends T> collection,; Function<T,PathClass> xFun). Plot values extracted from objects within a specified collection. Charts.BarChartBuilder; series(String name,; Collection<XYChart.Data<String,Number>> data). Create a bar chart from existing data plots. <T extends Number>Charts.BarChartBuilder; series(String name,; Map<String,T> data). Create a bar chart using a map of String values and associated numeric values. Stage; show(). Add the chart to a stage, and show it in the Application thread. Charts.BarChartBuilder; size(double width,; double height). Set the preferred size of the chart. Charts.BarChartBuilder; title(String title). Specify the chart title. Stage; toStage(). Add the chart to a stage, but do not show it. protected void; updateChart(BarChart<String,Number> chart). Method that applies properties of this builder to the chart. Charts.BarChartBuilder; viewer(QuPathViewer viewer). Specify a viewer. Charts.BarChartBuilder; width(double width). Set the preferred width of the chart. Charts.BarChartBuilder; windowTitle(String title). Title to use for the window, if the chart is shown. Charts.BarChartBuilder; xLabel(String label). Specify the x-axis label. Charts.BarChartBuilder; yAxisMax(double upperBound). Set the upper bound for the y-axis. Charts.BarChartBuilder; yAxisMin(double lowerBound). Set the lower bound for the y-axis. Charts.BarChartBuilder; yAxisRange(double lowerBound,; double upperBound). Set the lower and upper bounds for the y-axis. Charts.BarChartBuilder; yLabel(String label). Specify the y-axis label. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. xLabel; protected String xLabel. yLabel; protected St",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/Charts.BarChartBuilder.html:3829,update,updateChart,3829,javadoc/docs/qupath/lib/gui/charts/Charts.BarChartBuilder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/Charts.BarChartBuilder.html,1,['update'],['updateChart']
Deployability," of any kind are selected. static void; deselectAll(PathObjectHierarchy hierarchy). Clear the selection, so that no objects of any kind are selected. static void; detectionCentroidDistances(). Deprecated.; retained only for compatibility of v0.2.0 milestone releases; use instead #detectionCentroidDistances(boolean). static void; detectionCentroidDistances(boolean splitClassNames). Compute the distance for all detection object centroids to the closest detection with each valid, not-ignored classification and add ; the result to the detection measurement list for the current ImageData. static void; detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest detection with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(). Deprecated.; retained only for compatibility of v0.2.0 milestone releases; use instead #detectionToAnnotationDistances(boolean). static void; detectionToAnnotationDistances(boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list for the current ImageData. static void; detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistancesSigned(boolean splitClassNames). Compute the signed distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list for the current ImageData. static void; detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames). Compute the sig",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:13842,release,releases,13842,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['release'],['releases']
Deployability," pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:3975,update,updatePath,3975,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,1,['update'],['updatePath']
Deployability," public static RoiEditor createInstance(); Create a new RoiEditor. Returns:. setROI; public void setROI(ROI roi); Set the active ROI, stopping any ROI translation currently in progress. Parameters:; roi - . setROI; public void setROI(ROI roi,; boolean stopTranslating); Set the active ROI, optionally stopping any ROI translation currently in progress. Parameters:; roi - ; stopTranslating - if true, then any ROI currently being translated will have its translation completed.; Normally this should be true, but it may be false if the new ROI being set is part of the same translation event. startTranslation; public boolean startTranslation(double x,; double y,; boolean snapToPixel); Returns true if the current ROI is translatable, and at the end of this call the translation has started. Parameters:; x - ; y - ; snapToPixel - if true, request that translations snap to pixel coordinates; Returns:. updateTranslation; public ROI updateTranslation(double x,; double y,; ImageRegion constrainRegion); Update a ROI by translation, optionally constraining its movement within a specified boundary.; ; Returns the same ROI if translation was not possible, or the translation resulted in no movement,; of if isTranslating() returns false.; Otherwise returns a translated version of the ROI;. Parameters:; x - ; y - ; constrainRegion - ; Returns:. finishTranslation; public boolean finishTranslation(); Notify the editor that translation should end. Returns:; true if there is any displacement between the current and starting translation points, false otherwise. isTranslating; public boolean isTranslating(); Query if a ROI is currently being translated through this editor. Returns:. ensureHandlesUpdated; public void ensureHandlesUpdated(); In the event that the current ROI has been modified elsewhere (which generally it shouldn't be); request the handles to be recomputed to avoid inconsistency. getHandles; public List<Point2> getHandles(); Get all the handles for the current ROI being edited, ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiEditor.html:4450,update,updateTranslation,4450,javadoc/docs/qupath/lib/roi/RoiEditor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiEditor.html,2,['update'],['updateTranslation']
Deployability," qupath.lib.display.DirectServerChannelInfo. Constructor. disabled(boolean) - Method in class qupath.lib.gui.actions.ActionTools.ActionBuilder. Set the disabled property of the action. disabled(ObservableValue<Boolean>) - Method in class qupath.lib.gui.actions.ActionTools.ActionBuilder. Bind the disabled property of the action to an ObservableValue, bidirectionally if possible. disableGammaAdjustmentProperty() - Method in class qupath.lib.gui.commands.display.BrightnessContrastSliderPane. Prevent gamma from being adjusted. disableMinMaxAdjustmentProperty() - Method in class qupath.lib.gui.commands.display.BrightnessContrastSliderPane. Prevent the min and max sliders from being adjusted. disableToggleMenuItemsProperty() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Property to disable options to toggle the visibility of channels. disableUpdatesProperty() - Method in class qupath.lib.gui.panes.AnnotationPane. Property that may be used to prevent updates on every hierarchy or selection change event. disableUpdatesProperty() - Method in class qupath.lib.gui.panes.PathObjectHierarchyView. Property that may be used to prevent updates on every hierarchy or selection change event. display(ImageDisplay) - Method in class qupath.lib.gui.images.servers.RenderedImageServer.Builder. Deprecated.; use RenderedImageServer.Builder.renderer(ImageRenderer) instead (since an ImageDisplay is also an ImageRenderer. displayMode() - Method in class qupath.lib.display.ImageDisplay. Get the value of ImageDisplay.useInvertedBackgroundProperty(). displayModeProperty() - Method in class qupath.lib.gui.charts.HistogramChart. Property to control how the histogram is displayed, either using areas or bars. DisplaySettingUtils - Class in qupath.lib.display.settings. Utility class for working with image display and image display settings objects. DisplaySettingUtils() - Constructor for class qupath.lib.display.settings.DisplaySettingUtils;  ; displayToSettings(ImageD",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:262256,update,updates,262256,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updates']
Deployability," related to a specified image region has been updated. updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static method in class qupath.lib.analysis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriResource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuil",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1066911,update,updateServerMetadata,1066911,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateServerMetadata']
Deployability," requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. cr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:4055,update,updated,4055,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,1,['update'],['updated']
Deployability," selection changes. removeProperty(String) - Method in class qupath.lib.images.ImageData. Remove a specified property. removePropertyChangeListener(PropertyChangeListener) - Method in class qupath.lib.images.ImageData. Remove a property change listener. removeRow(QuPathViewer) - Method in class qupath.lib.gui.viewer.ViewerManager. Try to remove the row containing the specified viewer, notifying the user if this isn't possible. removeSmallAreas(ByteProcessor, double, boolean) - Static method in class qupath.imagej.processing.RoiLabeling. Remove objects having small areas, defined in terms of pixels. removeSmallPieces(ROI, double, double) - Static method in class qupath.lib.roi.RoiTools. Remove small fragments and fill small holes of an area ROI. removeStep(int) - Method in class qupath.lib.plugins.workflow.Workflow. Remove a single step, identified by its list index. removeStep(WorkflowStep) - Method in class qupath.lib.plugins.workflow.Workflow. Remove a single step, firing an update event if the step was successfully removed. removeSteps(Collection<WorkflowStep>) - Method in class qupath.lib.plugins.workflow.Workflow. Remove a collection of steps, firing an update event if the workflow was changed. removeTextAppendableFX(TextAppendable) - Static method in class qupath.lib.gui.logging.LogManager. Deregister a TextAppendable so that it will no longer be informed of logging events. removeTileListener(TileListener<BufferedImage>) - Method in class qupath.lib.gui.images.stores.DefaultImageRegionStore;  ; removeViewerListener(QuPathViewerListener) - Method in class qupath.lib.gui.viewer.QuPathViewer. Remove a viewer listener. removeWorkflowListener(WorkflowListener) - Method in class qupath.lib.plugins.workflow.Workflow. Remove a listener for changes to the workflow. RenderedImageServer - Class in qupath.lib.gui.images.servers. An ImageServer that can display a rendered image, with optional overlays. RenderedImageServer.Builder - Class in qupath.lib.gui.images.servers. Bu",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:851886,update,update,851886,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability," sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). Returns true if the ROI bounds have zero width and height. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. default ROI; scale(double scaleX,; double scaleY). Create a scaled version of this ROI. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Method Details. getRoiName; String getRoiName(); Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Returns:. getC; int getC(); Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Returns:. getT; int getT(); Get time point index.; ; Default is 0 if the image it relates to is not a time series. Returns:. getZ; int getZ(); Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Returns:. getImagePlane; ImagePlane getImagePlane(); Get the ImagePlane, which contains the values for c, z and t in a single object. Returns:. getCentroidX; double getCentroidX(); Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; double getCentroidY(); Returns the y coordinate for the ROI centroid. Returns:. getBoundsX; double getBoundsX(); Returns the x",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html:3518,update,updatePlane,3518,javadoc/docs/qupath/lib/roi/interfaces/ROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html,1,['update'],['updatePlane']
Deployability," specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; script - the Groovy script to run; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, File). installImageDataCommand; public MenuItem installImageDataCommand(String menuPath,; Consumer<ImageData<BufferedImage>> command); Install a new command in QuPath that takes the current ImageData as input.; The command will only be enabled when an image is available. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; command - the command to run; Returns:; the MenuItem for the command; See Also:. installCommand(String, Runnable). installCommand; public MenuItem installCommand(String menuPath,; Runnable runnable); Install a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; runnable - the command to run; Returns:; the MenuItem for the command. This can be further customized if needed. runScript; public Object runScript(File file,; String script); throws ScriptException,; IllegalArgumentException; Convenience method to execute a script.; Either a script file or the text of the script must be provided, or both.; ; If only the script text is given, the language is assumed to be Groovy. Parameters:; file - the file containing the script to run; script - the script to run; Returns:; result of the script execution; Throws:; ScriptException; IllegalArgumentException - if both file and script are null. getPreferencePane; public Preference",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:22415,install,installCommand,22415,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,2,['install'],['installCommand']
Deployability," specified replacement (may be null). replaceLastStep(WorkflowStep) - Method in class qupath.lib.plugins.workflow.Workflow. Replace the most recently added step with this one. replaceNaNs(double) - Static method in class qupath.opencv.ops.ImageOps.Core. Create an op that replaces NaNs with a specified value. replaceNaNs(Mat, double) - Static method in class qupath.opencv.tools.OpenCVTools. Replace NaNs in a floating point array. replaceSelection(String) - Method in interface qupath.lib.gui.scripting.EditableText. Insert the specified text, replacing any existing selection. replaceSelection(String) - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; replaceSelection(String) - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; replaceValues(Mat, double, double) - Static method in class qupath.opencv.tools.OpenCVTools. Replace a specific value in an array. requestAutomaticUpdateCheck() - Method in class qupath.lib.gui.QuPathGUI. Request an automated update check in a background thread. requestCancelDirection(boolean) - Method in class qupath.lib.gui.viewer.QuPathViewer. Requests that the viewer cancels either the x- or y-axis direction. requestDecelerate() - Method in class qupath.lib.gui.viewer.QuPathViewer. Request that a viewer decelerate any existing panning smoothly. requestedPixelSize(double) - Method in class qupath.lib.images.writers.TileExporter. Define resolution as a pixel size in calibrated units. requestFocus() - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; requestFocus() - Method in interface qupath.lib.gui.scripting.ScriptEditorControl. Request that the control is focused. requestFocus() - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; requestFollowCaret() - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; requestFollowCaret() - Method in interface qupath.lib.gui.scripting.ScriptEditorControl. Request that the X and Y scrolls are adjusted to ensure the caret i",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:856453,update,update,856453,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability," split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects). Given a collection of objects with area ROIs, split these using dividing lines extracted from objects; with line ROIs. static boolean; standardizeClassifications(Collection<PathObject> pathObjects). Standardize the classifications for a collection of objects. static boolean; standardizeClassifications(Collection<PathObject> pathObjects,; Comparator<String> comparator). Standardize the classifications for a collection of objects. static void; swapNameAndClass(PathObject pathObject,; boolean includeColor). Swap the name and PathClass of an object. static void; toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Toggle the 'locked' status of specified objects. static void; toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy). Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. static PathObject; transformObject(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements). Create a transformed version of a PathObject with a new ID. static PathObject; transformObject(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create a transformed version of a PathObject, optionally with a new ID. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements). Create (optionally) transformed versions of the PathObject and all its descendants, recursively. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create (optionally) transformed versions of the PathObject and all its descendants, recursively, option",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:13260,toggle,toggleSelectedObjectsLocked,13260,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['toggle'],['toggleSelectedObjectsLocked']
Deployability," static URI; locateFile(URI uri,; int searchDepth,; Path... searchPaths). Attempt to update a URI to find an existing file using the specified search paths. UriUpdater<T>; makeReplacement(URI originalItem,; URI updatedItem). Add a single replacement to the replacement map. UriUpdater<T>; relative(URI uriOriginal,; URI uriCurrent). Identify replacements for missing URIs by relativizing URI. UriUpdater<T>; relative(Path pathOriginal,; Path pathCurrent). Identify replacements for missing URIs by relativizing paths. UriUpdater<T>; searchDepth(int maxDepth). Maximum search depth when using searchDepth(int) to match filenames in directories and subdirectories. UriUpdater<T>; searchPath(Path path). Search for filenames that match missing URIs, recursively up to the depth specified by searchDepth(int). static UriResource; wrap(URI... uris). Wrap one or more URIs in a UriResource so they can be updated together. static UriResource; wrap(Collection<URI> uris). Wrap one or more URIs in a UriResource so they can be updated together. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. create; public static <T extends UriResource> UriUpdater<T> create(T resource); throws IOException; Create a new UriUpdater to support updating URIs for a single UriResource. Parameters:; resource - ; Returns:; Throws:; IOException. create; public static <T extends UriResource> UriUpdater<T> create(Collection<T> resources); throws IOException; Create a new UriUpdater to support updating URIs for one or more UriResource objects. Parameters:; resources - ; Returns:; Throws:; IOException. create; public static <T extends UriResource> UriUpdater<T> create(Collection<T> resources,; Collection<UriUpdater.SingleUriItem> items,; Map<UriUpdater.SingleUriItem,UriUpdater.SingleUriItem> replacements); throws IOException; Create a new UriUpdater using the specified collections.; The main use of this is as a co",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html:3439,update,updated,3439,javadoc/docs/qupath/lib/io/UriUpdater.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html,1,['update'],['updated']
Deployability," suitable title to use. data; public Charts.PieChartBuilder data(Map<?,? extends Number> data); Specify data for the pie chart as a map.; Keys refer to categories, and values are numeric determining the size of the corresponding slice. Parameters:; data - the data map to show; Returns:; this builder. convertToPercentages; public Charts.PieChartBuilder convertToPercentages(boolean doConvert); Request that pie chart values are converted to percentages for tooltips. Parameters:; doConvert - ; Returns:. tooltips; public Charts.PieChartBuilder tooltips(boolean showTooltips); Request tooltips to be shown when the cursor hovers over the pie chart. Parameters:; showTooltips - ; Returns:. addSlice; public Charts.PieChartBuilder addSlice(Object name,; Number value); Add a slice to the pie. Parameters:; name - object the slice represents; value - number that determines the proportion of the pie for the given slice; Returns:; this builder. updateChart; protected void updateChart(PieChart chart); Method that applies properties of this builder to the chart.; Each subclass should call the method in the parent class to ensure its properties ; have been applied. Parameters:; chart - . title; public Charts.PieChartBuilder title(String title); Specify the chart title. Parameters:; title - the title to display; Returns:; this builder. legend; public Charts.PieChartBuilder legend(boolean show); Specify whether the legend should be shown or not. Parameters:; show - if true, show the legend; otherwise hide the legend; Returns:; this builder. legend; public Charts.PieChartBuilder legend(String side); Specify the side of the chart where the legend should be shown.; Valid values are ""top"", ""bottom"", ""left"", ""right"". ; ; Any other value (including null) will result in the legend being hidden. Parameters:; side - the side where the legend should be shown; Returns:; this builder. legend; public Charts.PieChartBuilder legend(Side side); Specify the side of the chart where the legend should be sh",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/Charts.PieChartBuilder.html:4772,update,updateChart,4772,javadoc/docs/qupath/lib/gui/charts/Charts.PieChartBuilder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/Charts.PieChartBuilder.html,2,['update'],['updateChart']
Deployability," the data type, i.e. 256 or 65536.; No size checking is performed, therefore if non-null it must be sufficiently large for the data type.; rasterMask - optional single-channel mask; if not null, corresponding pixels with 0 values in the mask will be skipped.; bounds - optional rectangle defining the bounds of the raster to search.; If not null, this is used with the (also optional) mask to restrict the pixels that are used.; This can give substantial performance improvements for small masked regions embedded in larger images.; Returns:; the updated histogram counts; See Also:. computeUnsignedIntHistogram(WritableRaster, long[], WritableRaster). computeArgMaxHistogram; public static long[] computeArgMaxHistogram(WritableRaster raster,; long[] counts,; WritableRaster rasterMask); Create a histogram that identifies the channels (bands) of an image with the maximum values according to the argmax criterion. Parameters:; raster - the multi-band raster containing values to check; counts - existing histogram if it should be updated, or null if a new histogram should be created. The length should ; match the number of bands in the raster.; rasterMask - optional single-channel mask; if not null, corresponding pixels with 0 values in the mask will be skipped; Returns:; See Also:. computeArgMaxHistogram(WritableRaster, long[], WritableRaster, Rectangle). computeArgMaxHistogram; public static long[] computeArgMaxHistogram(WritableRaster raster,; long[] counts,; WritableRaster rasterMask,; Rectangle bounds); Create a histogram that identifies the channels (bands) of an image with the maximum values according to the argmax criterion, ; with an optional bounding rectangle. Parameters:; raster - the multi-band raster containing values to check; counts - existing histogram if it should be updated, or null if a new histogram should be created. The length should ; match the number of bands in the raster.; rasterMask - optional single-channel mask; if not null, corresponding pixels with ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html:12175,update,updated,12175,javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,1,['update'],['updated']
Deployability," the path for a local ImageJ installation, if required. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Property Details. imageJPath; public static StringProperty imageJPathProperty; Property representing the path to a local ImageJ installation, or null if no path has been set. See Also:. getImageJPath(); setImageJPath(String); imageJPathProperty(). Constructor Details. IJExtension; public IJExtension(). Method Details. setImageJPath; public static void setImageJPath(String path); Set the path for a local ImageJ installation, if required. This can be used to help load external ImageJ plugins. Parameters:; path - . getImageJPath; public static String getImageJPath(); Get the path for a local ImageJ installation, if set. Returns:. imageJPathProperty; public static StringProperty imageJPathProperty(); Property representing the path to a local ImageJ installation, or null if no path has been set. Returns:; See Also:. getImageJPath(); setImageJPath(String). getImageJInstance; public static ImageJ getImageJInstance(); Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). Returns:; an ImageJ instance, or null if ImageJ could not be started. extractROI; public static PathImage<ImagePlus> extractROI(ImageServer<BufferedImage> server,; ROI pathROI,; RegionRequest request,; boolean setROI); throws IOException; Extract a region of interest from an image as an ImageJ ImagePlus. Parameters:; server - the image; pathROI - ; request - ; setROI - true if a ROI should be converted to the closest matching ImageJ Roi & set on the image, false otherwise; Returns:; an ImagePlus wrapped in a PathImage to give additional calibration information; Throws:; IOException. extractROI; public static PathImage<ImagePlus> extractROI(ImageServer<BufferedImage> server,; PathObject pathObject,; Reg",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:4127,install,installation,4127,javadoc/docs/qupath/imagej/gui/IJExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html,1,['install'],['installation']
Deployability," the requested ObjectClassifier; Throws:; IllegalArgumentException - if the classifier cannot be found. loadDensityMap; public static DensityMaps.DensityMapBuilder loadDensityMap(String name); throws IllegalArgumentException; Load a density map for a project or file path. Parameters:; name - the name of the density map within the current project, or file path to a density map to load from disk.; Returns:; the requested DensityMaps.DensityMapBuilder; Throws:; IllegalArgumentException - if the density map cannot be found. locateFile; public static String locateFile(String nameOrPath); throws IOException; Locate a specified file based upon its name or path, with a search depth of 4.; This first checks if the provided path is to a file that already exists.; If it is not, then it searches recursively within the current project (if available) ; up to a fixed search depth for a file with the same name. Parameters:; nameOrPath - the original name or path; Returns:; the identified file path, or the original file path if no update was found or required; Throws:; IOException; See Also:. UriUpdater.locateFile(String, int, Path...). locateFile; public static String locateFile(String nameOrPath,; int searchDepth); throws IOException; Locate a specified file based upon its name or path.; This first checks if the provided path is to a file that already exists.; If it is not, then it searches recursively within the current project (if available) ; up to a specified search depth for a file with the same name. Parameters:; nameOrPath - the original name or path; searchDepth - how deep to search subdirectories recursively; Returns:; the identified file path, or the original file path if no update was found or required; Throws:; IOException; See Also:. UriUpdater.locateFile(String, int, Path...). findDensityMapHotspots; public static void findDensityMapHotspots(String densityMapName,; int channel,; int numHotspots,; double minCounts,; boolean deleteExisting,; boolean peaksOnly); throws ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:132879,update,update,132879,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['update'],['update']
Deployability," to support updating URIs for one or more UriResource objects. static <T extends UriResource>UriUpdater<T>; create(Collection<T> resources,; Collection<UriUpdater.SingleUriItem> items,; Map<UriUpdater.SingleUriItem,UriUpdater.SingleUriItem> replacements). Create a new UriUpdater using the specified collections. static <T extends UriResource>UriUpdater<T>; create(T resource). Create a new UriUpdater to support updating URIs for a single UriResource. static int; fixUris(UriResource resource,; Project<?> project). Attempt to fix any broken paths by updating URIs based upon the current project. Collection<UriUpdater.SingleUriItem>; getItems(UriUpdater.UriStatus status). Get all items with the specified status, or all items is status is null. Collection<UriUpdater.SingleUriItem>; getMissingItems(). Get all missing items. Map<URI,URI>; getReplacements(). Get a map of all replacements. static String; locateFile(String path,; int searchDepth,; Path... searchPaths). Attempt to update a file using the specified search paths. static URI; locateFile(URI uri,; int searchDepth,; Path... searchPaths). Attempt to update a URI to find an existing file using the specified search paths. UriUpdater<T>; makeReplacement(URI originalItem,; URI updatedItem). Add a single replacement to the replacement map. UriUpdater<T>; relative(URI uriOriginal,; URI uriCurrent). Identify replacements for missing URIs by relativizing URI. UriUpdater<T>; relative(Path pathOriginal,; Path pathCurrent). Identify replacements for missing URIs by relativizing paths. UriUpdater<T>; searchDepth(int maxDepth). Maximum search depth when using searchDepth(int) to match filenames in directories and subdirectories. UriUpdater<T>; searchPath(Path path). Search for filenames that match missing URIs, recursively up to the depth specified by searchDepth(int). static UriResource; wrap(URI... uris). Wrap one or more URIs in a UriResource so they can be updated together. static UriResource; wrap(Collection<URI> uris). Wrap o",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html:2373,update,update,2373,javadoc/docs/qupath/lib/io/UriUpdater.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html,1,['update'],['update']
Deployability," transformToOp(BioimageIoSpec.Processing) - Static method in class qupath.opencv.ml.BioimageIoTools. Create an ImageOp that applies the specified transforms, if possible. translate(double, double) - Method in class qupath.lib.roi.AreaROI;  ; translate(double, double) - Method in class qupath.lib.roi.EllipseROI;  ; translate(double, double) - Method in class qupath.lib.roi.GeometryROI;  ; translate(double, double) - Method in interface qupath.lib.roi.interfaces.ROI. Create a translated version of this ROI. translate(double, double) - Method in class qupath.lib.roi.LineROI;  ; translate(double, double) - Method in class qupath.lib.roi.PointsROI;  ; translate(double, double) - Method in class qupath.lib.roi.PolygonROI;  ; translate(double, double) - Method in class qupath.lib.roi.PolylineROI;  ; translate(double, double) - Method in class qupath.lib.roi.RectangleROI;  ; translate(int, int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. translateAllObjects(double, double) - Static method in class qupath.lib.scripting.QP. Translate (move) the ROIs of all objects in the current object hierarchy. translateAllObjects(PathObjectHierarchy, double, double) - Static method in class qupath.lib.scripting.QP. Translate (move) the ROIs of all objects in the specified object hierarchy. TRANSLUCENT_BLACK - Static variable in class qupath.lib.color.ColorToolsAwt. Black, with 50% opacity. TRANSLUCENT_BLACK_FX - Static variable in class qupath.lib.gui.tools.ColorToolsFX. Black with opacity at 50%. TRANSLUCENT_WHITE - Static variable in class qupath.lib.color.ColorToolsAwt. White, with 50% opacity. TRANSLUCENT_WHITE_FX - Static variable in class qupath.lib.gui.tools.ColorToolsFX. White with opacity at 50%. TRANSPARENT - Static variable in class qupath.lib.images.servers.ImageChannel. Special color indicating pixel values for a channel indicate levels of transparency. tryToClassify(List<",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1053490,update,updated,1053490,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability," void; changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew);  ; BooleanProperty; disableUpdatesProperty(). Property that may be used to prevent updates on every hierarchy or selection change event. Pane; getPane(). Get the pane for display. void; hierarchyChanged(PathObjectHierarchyEvent event). Notify listeners of a change in the hierarchy or its objects. void; selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected). Fired when the selected objects have changed. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. disableUpdates; public BooleanProperty disableUpdatesProperty; Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the table being updated even when ; it is not visible to the user. See Also:. disableUpdatesProperty(). Constructor Details. PathObjectHierarchyView; public PathObjectHierarchyView(QuPathGUI qupath); Constructor. Parameters:; qupath - the current QuPath instance. PathObjectHierarchyView; public PathObjectHierarchyView(QuPathGUI qupath,; ObservableValue<ImageData<BufferedImage>> imageDataProperty); Constructor. Parameters:; qupath - the current QuPath instance; imageDataProperty - the ImageData to display. Method Details. getPane; public Pane getPane(); Get the pane for display. Returns:. disableUpdatesProperty; public BooleanProperty disableUpdatesProperty(); Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the table being updated even when ; it is not visible to the user. Returns:. selectedPathObjectChanged; public void selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previo",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html:2390,update,updated,2390,javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html,1,['update'],['updated']
Deployability," when there is no data. void; setShowTickLabels(boolean showTickLabels). Request that tick labels are visible or not for both x and y axis. Methods inherited from class javafx.scene.chart.AreaChart; createSymbolsProperty, dataItemAdded, dataItemChanged, dataItemRemoved, getClassCssMetaData, getCreateSymbols, getCssMetaData, layoutPlotChildren, seriesAdded, seriesChanged, seriesRemoved, setCreateSymbols, updateAxisRange. Methods inherited from class javafx.scene.chart.XYChart; alternativeColumnFillVisibleProperty, alternativeRowFillVisibleProperty, currentDisplayedExtraValueProperty, currentDisplayedXValueProperty, currentDisplayedYValueProperty, dataProperty, getCurrentDisplayedExtraValue, getCurrentDisplayedXValue, getCurrentDisplayedYValue, getData, getDisplayedDataIterator, getDisplayedSeriesIterator, getPlotChildren, getVerticalGridLinesVisible, getXAxis, getYAxis, horizontalGridLinesVisibleProperty, horizontalZeroLineVisibleProperty, isAlternativeColumnFillVisible, isAlternativeRowFillVisible, isHorizontalGridLinesVisible, isHorizontalZeroLineVisible, isVerticalZeroLineVisible, layoutChartChildren, removeDataItemFromDisplay, removeSeriesFromDisplay, setAlternativeColumnFillVisible, setAlternativeRowFillVisible, setCurrentDisplayedExtraValue, setCurrentDisplayedXValue, setCurrentDisplayedYValue, setData, setHorizontalGridLinesVisible, setHorizontalZeroLineVisible, setVerticalGridLinesVisible, setVerticalZeroLineVisible, updateLegend, verticalGridLinesVisibleProperty, verticalZeroLineVisibleProperty. Methods inherited from class javafx.scene.chart.Chart; animate, animatedProperty, computeMinHeight, computeMinWidth, computePrefHeight, computePrefWidth, getAnimated, getChartChildren, getLegend, getLegendSide, getTitle, getTitleSide, isLegendVisible, layoutChildren, legendProperty, legendSideProperty, legendVisibleProperty, requestChartLayout, setAnimated, setLegend, setLegendSide, setLegendVisible, setTitle, setTitleSide, shouldAnimate, titleProperty, titleSideProp",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/HistogramChart.html:7664,update,updateLegend,7664,javadoc/docs/qupath/lib/gui/charts/HistogramChart.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/HistogramChart.html,1,['update'],['updateLegend']
Deployability," which to construct the menu item; Returns:; a new MenuItem configured according to the action. createCheckBox; public static CheckBox createCheckBox(org.controlsfx.control.action.Action action); Create a checkbox from an action.; This stores a reference to the action as a property of the checkbox. Parameters:; action - the action from which to construct the checkbox; Returns:; a new CheckBox configured according to the action. createToggleButtonWithGraphicOnly; public static ToggleButton createToggleButtonWithGraphicOnly(org.controlsfx.control.action.Action action); Create a toggle button from an action, showing only the graphic and not any text.; This stores a reference to the action as a property of the toggle button. Parameters:; action - ; Returns:. createToggleButton; public static ToggleButton createToggleButton(org.controlsfx.control.action.Action action); Create a toggle button from an action, showing both the text and graphic if available.; This stores a reference to the action as a property of the toggle button. Parameters:; action - ; Returns:. createButton; public static Button createButton(org.controlsfx.control.action.Action action); Create a button from an action, showing both the text and graphic if available.; This stores a reference to the action as a property of the button. Parameters:; action - the action from which to construct the button; Returns:; a new Button configured according to the action. createButtonWithGraphicOnly; public static Button createButtonWithGraphicOnly(org.controlsfx.control.action.Action action); Create a button from an action, showing only the graphic and not any text.; This stores a reference to the action as a property of the button. Parameters:; action - the action from which to construct the button; Returns:; a new Button configured according to the action. createSelectableAction; public static org.controlsfx.control.action.Action createSelectableAction(ObservableValue<Boolean> property,; String name,; Node icon,; Key",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html:12402,toggle,toggle,12402,javadoc/docs/qupath/lib/gui/actions/ActionTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html,1,['toggle'],['toggle']
Deployability," with others. Returns:. isBrightnessContrastRescaled; boolean isBrightnessContrastRescaled(); Returns true if rescaling according to min & max display levels is applied, false if the full display range is used. Returns:. getValueAsString; String getValueAsString(BufferedImage img,; int x,; int y); Get a string representation of a pixel's value.; This might be a single number, or 3 numbers for an RGB image where the channel includes all values. Parameters:; img - ; x - ; y - ; Returns:. getRGB; int getRGB(BufferedImage img,; int x,; int y,; ChannelDisplayMode mode); Get the RGB value that would be used to display a particular pixel. Parameters:; img - ; x - ; y - ; mode - ; Returns:. getRGB; int[] getRGB(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode); Get the RGB values that would be used to display all the pixels of an image. Parameters:; img - ; rgb - ; mode - ; Returns:. updateRGBAdditive; int updateRGBAdditive(BufferedImage img,; int x,; int y,; int rgb,; ChannelDisplayMode mode); Update an existing pixel (packed RGB) additively using the color used to display a specified one. Parameters:; img - ; x - ; y - ; rgb - ; mode - ; Returns:. updateRGBAdditive; void updateRGBAdditive(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode); Update an array of existing pixels (packed RGB) additively using the colors to display a specified image.; May throw an UnsupportedOperationException if isAdditive() returns false;. Parameters:; img - ; rgb - ; mode - . doesSomething; boolean doesSomething(); Returns true if this does something - anything - and false otherwise.; For example, this will return false if we have an RGB image with no transformations of any kind applied (e.g. brightness/contrast). Returns:. getColor; Integer getColor(); Predominate color used when this ChannelDisplayInfo uses a Color LUT (e.g. Color.RED for a red channel).; Returns null if there is no appropriate color choice, or the image is RGB. Returns:. getMethod; default ColorTransformer.Colo",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html:7606,update,updateRGBAdditive,7606,javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html,2,['update'],['updateRGBAdditive']
Deployability," within this jar, because it is matched to the QuPath version. static StringProperty; imageJPathProperty(). Property representing the path to a local ImageJ installation, or null if no path has been set. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. static void; setImageJPath(String path). Set the path for a local ImageJ installation, if required. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Property Details. imageJPath; public static StringProperty imageJPathProperty; Property representing the path to a local ImageJ installation, or null if no path has been set. See Also:. getImageJPath(); setImageJPath(String); imageJPathProperty(). Constructor Details. IJExtension; public IJExtension(). Method Details. setImageJPath; public static void setImageJPath(String path); Set the path for a local ImageJ installation, if required. This can be used to help load external ImageJ plugins. Parameters:; path - . getImageJPath; public static String getImageJPath(); Get the path for a local ImageJ installation, if set. Returns:. imageJPathProperty; public static StringProperty imageJPathProperty(); Property representing the path to a local ImageJ installation, or null if no path has been set. Returns:; See Also:. getImageJPath(); setImageJPath(String). getImageJInstance; public static ImageJ getImageJInstance(); Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). Returns:; an ImageJ instance, or null if ImageJ could not be started. extractROI; public static PathImage<ImagePlus> extractROI(ImageServer<BufferedImage> server,; ROI pathROI,; RegionRequest request,; boolean setROI); throws IOException; Extract a region of interest from an image as an ImageJ ImagePlus. Parameters:; server - the image; pathROI - ; request - ; setROI - t",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:3786,install,installation,3786,javadoc/docs/qupath/imagej/gui/IJExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html,1,['install'],['installation']
Deployability,"  ; PASTE - Variable in class qupath.lib.gui.actions.menus.EditMenuActions.Actions;  ; PASTE_TO_PLANE - Variable in class qupath.lib.gui.actions.menus.EditMenuActions.Actions;  ; pasteAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; pasteAndEscapeAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; pasteFromClipboard(QuPathGUI, boolean) - Static method in class qupath.lib.gui.commands.Commands. Attempt to paste objects from the system clipboard to the current image, if available; ; otherwise, check for text on the clipboard and paste it into a new script editor tab. pasteFromClipboard(ScriptEditorControl<?>, boolean) - Static method in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; PatchClassifierParams - Class in qupath.opencv.ml. Parameters required to build a classifier that operates on an image patch. PatchClassifierParams.Builder - Class in qupath.opencv.ml. Builder class to create PatchClassifierParams. patchSize(int) - Method in class qupath.opencv.ml.PatchClassifierParams.Builder. Define the requested square patch size. patchSize(int, int) - Method in class qupath.opencv.ml.PatchClassifierParams.Builder. Define the requested patch size. PathAnnotationObject - Class in qupath.lib.objects. An annotation PathObject. PathAnnotationObject() - Constructor for class qupath.lib.objects.PathAnnotationObject. Default constructor. PathCellObject - Class in qupath.lib.objects. A subclass of a PathDetectionObject, which also supports storing an (optional) extra ROI to represent ; the cell nucleus. PathCellObject() - Constructor for class qupath.lib.objects.PathCellObject. Default constructor. PathClass - Class in qupath.lib.objects.classes. Representation of an object's classification - which can be defined using any unique string; identifier (e.g. PathClass.StandardPathClasses - Class in qupath.lib.objects.classes. Enum representing standard classifications. PathClassFactory - Class in qupath.lib.objects.classes. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:751424,patch,patchSize,751424,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patchSize']
Deployability,"  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static method in class qupath.lib.analysis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateSe",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1065999,update,updateRGBAdditive,1065999,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateRGBAdditive']
Deployability,"(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode). Get the RGB values that would be used to display all the pixels of an image. int; getRGB(BufferedImage img,; int x,; int y,; ChannelDisplayMode mode). Get the RGB value that would be used to display a particular pixel. String; getValueAsString(BufferedImage img,; int x,; int y). Get a string representation of a pixel's value. boolean; isAdditive(). Returns true if this channel can be used additively to create a composite image display;; returns false if this channel wants all the color information to itself, so can't be displayed with others. boolean; isBrightnessContrastRescaled(). Returns true if rescaling according to min & max display levels is applied, false if the full display range is used. void; updateRGBAdditive(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode). Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. int; updateRGBAdditive(BufferedImage img,; int x,; int y,; int rgb,; ChannelDisplayMode mode). Update an existing pixel (packed RGB) additively using the color used to display a specified one. Method Details. getName; String getName(); Get the channel name. This may also be returned by the toString() method. Returns:. getMinDisplay; float getMinDisplay(); Get the min display value.; This is used to control the brightness/contrast when painting. Returns:. getMaxDisplay; float getMaxDisplay(); Get the max display value.; This is used to control the brightness/contrast when painting. Returns:. getMinAllowed; float getMinAllowed(); Get the min allowed display value.; This is only a hint. Returns:. getMaxAllowed; float getMaxAllowed(); Get the max allowed display value.; This is only a hint. Returns:. isAdditive; boolean isAdditive(); Returns true if this channel can be used additively to create a composite image display;; returns false if this channel wants all the color information to itself, so can't be displayed with others. Returns",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html:5689,update,updateRGBAdditive,5689,javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html,1,['update'],['updateRGBAdditive']
Deployability,"(PathObject). since v0.4.0, replaced by PathObject.removeChildObject(PathObject). qupath.lib.objects.PathObject.removePathObjects(Collection<PathObject>). since v0.4.0, replaced by PathObject.removeChildObjects(Collection). qupath.lib.objects.PathObject.setColorRGB(Integer). since v0.4.0, use PathObject.setColor(Integer) instead. qupath.lib.objects.PathObjectTools.containsObject(PathObject, PathObject). qupath.lib.objects.PathObjectTools.containsROI(ROI, ROI). qupath.lib.objects.PathROIObject.isEditable(). since v0.4.0. qupath.lib.plugins.parameters.ParameterList.getParameterListJSON(Map<String, ?>, String). use ParameterList.convertToJson(Map) instead. qupath.lib.plugins.parameters.ParameterList.getParameterListJSON(ParameterList, String). use ParameterList.convertToJson(ParameterList) instead. qupath.lib.projects.ProjectImageEntry.getServerURIs(). use instead UriResource.getURIs(). qupath.lib.projects.ProjectImageEntry.updateServerURIs(Map<URI, URI>). use instead UriResource.updateURIs(Map). qupath.lib.regions.ImageRegion.getPlane(). v0.4.0 use ImageRegion.getImagePlane() instead (changed for better consistency with other classes). qupath.lib.roi.AreaROI.duplicate(). qupath.lib.roi.EllipseROI.duplicate(). qupath.lib.roi.interfaces.ROI.duplicate(). qupath.lib.roi.LineROI.duplicate(). qupath.lib.roi.PointsROI.duplicate(). qupath.lib.roi.PolygonROI.duplicate(). qupath.lib.roi.PolylineROI.duplicate(). qupath.lib.roi.RectangleROI.duplicate(). qupath.lib.scripting.QP.buildServer(String, Class<T>, String...). In the usual case where BufferedImage is the class, use QP.buildServer(String, String...) instead ; because it handles default args. qupath.lib.scripting.QP.createSelectAllObject(boolean). v0.4.0 use QP.createFullImageAnnotation(boolean) instead. qupath.lib.scripting.QP.createSelectAllObject(boolean, int, int). v0.4.0 use QP.createFullImageAnnotation(boolean, int, int) instead. qupath.lib.scripting.QP.detectionCentroidDistances(). retained only for compatibility of ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/deprecated-list.html:11905,update,updateURIs,11905,javadoc/docs/deprecated-list.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/deprecated-list.html,1,['update'],['updateURIs']
Deployability,"(PixelCalibration cal,; double downsample); Define the input resolution using a pixel calibration and a scaling factor. Parameters:; cal - input calibration; if null, a default calibration will be used; downsample - scaling factor (1.0 to use the calibration directly); Returns:. inputResolution; public PatchClassifierParams.Builder inputResolution(PixelCalibration cal); Define the input resolution using a pixel calibration object. Parameters:; cal - ; Returns:. halo; public PatchClassifierParams.Builder halo(int padding); Define a halo that is symmetric in x and y. Parameters:; padding - padding value, to be added both before and after rows and columns.; Returns:; See Also:. halo(Padding). halo; public PatchClassifierParams.Builder halo(Padding halo); Define a halo using a padding object. Parameters:; halo - ; Returns:; See Also:. halo(int). patchSize; public PatchClassifierParams.Builder patchSize(int patchSize); Define the requested square patch size. Parameters:; patchSize - width and height of the patch; Returns:. patchSize; public PatchClassifierParams.Builder patchSize(int patchWidth,; int patchHeight); Define the requested patch size. Parameters:; patchWidth - requested patch width; patchHeight - requested patch height; Returns:. preprocessing; public PatchClassifierParams.Builder preprocessing(ImageOp... preprocessingOps); Define the preprocessing steps from an array.; Note that any existing preprocessing steps in the builder will ; be replaced by those provided here. Parameters:; preprocessingOps - ; Returns:. preprocessing; public PatchClassifierParams.Builder preprocessing(Collection<? extends ImageOp> preprocessingOps); Define the preprocessing steps from a collection.; Note that any existing preprocessing steps in the builder will ; be replaced by those provided here. Parameters:; preprocessingOps - ; Returns:. prediction; public PatchClassifierParams.Builder prediction(ImageOp predictionOp); Define the prediction image op, to be applied after preproces",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html:5461,patch,patchSize,5461,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,2,['patch'],"['patch', 'patchSize']"
Deployability,") - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1063080,update,updateHistogram,1063080,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateHistogram']
Deployability,") - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressM",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1064833,update,updatePlane,1064833,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updatePlane']
Deployability,") - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update th",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1062613,update,updateDefaults,1062613,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateDefaults']
Deployability,") - Static method in class qupath.lib.images.writers.ImageWriterTools. Get a list of compatible ImageWriters for a specific image class. getCompatibleWriters(ImageServer<T>, String) - Static method in class qupath.lib.images.writers.ImageWriterTools. Get a list of compatible ImageWriters compatible with a specific server. getCompletions(String, int) - Method in class qupath.lib.gui.scripting.completors.DefaultAutoCompletor;  ; getCompletions(String, int) - Method in interface qupath.lib.scripting.languages.ScriptAutoCompletor. Get a list of possible auto-completions for the given text ; with the caret at the specified position. getCompletionText() - Method in interface qupath.lib.scripting.languages.AutoCompletions.Completion. Get the text that should be inserted for the full completion. getConfigPath() - Static method in class qupath.lib.gui.prefs.PathPrefs. Try to get the path to the config file. getConfigUri() - Method in class qupath.opencv.dnn.OpenCVDnn. Get the path to the model configuration, if required. getConnectedClusters() - Method in class qupath.opencv.features.DelaunayTriangulation. Get a list of PathObjects that are connected to each other in this triangulation. getConnectedNodes(Collection<PathObject>, Collection<double[]>) - Method in class qupath.opencv.features.DelaunayTriangulation. Deprecated. getConnectedNodes(PathObject, Collection<PathObject>) - Method in class qupath.opencv.features.DelaunayTriangulation. Get all the PathObjects immediately connected to the specified object, adding the points into a collection (or creating a new one). getConnectedObjects(PathObject) - Method in class qupath.lib.objects.DefaultPathObjectConnectionGroup;  ; getConnectedObjects(PathObject) - Method in interface qupath.lib.objects.PathObjectConnectionGroup. Get all the connections to a specified PathObject stored in this group. getConnectedObjects(PathObject) - Method in class qupath.opencv.features.DelaunayTriangulation;  ; getConnectionGroups() - Method in cl",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:360350,configurat,configuration,360350,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['configurat'],['configuration']
Deployability,"). Create a MaskSupplier that returns an OpenCV Mat. static <S,; T> OutputHandler.OutputToObjectConverter<S,T,Mat>; createObjectConverter(BiFunction<ROI,Number,PathObject> creator). Create an OutputHandler.OutputToObjectConverter to convert Mat binary or labeled images; to path objects, optionally using the label number. static <S,; T> OutputHandler.OutputToObjectConverter<S,T,Mat>; createObjectConverter(Function<ROI,PathObject> creator). Create an OutputHandler.OutputToObjectConverter to convert Mat binary or labeled images; to path objects. static <S,; T> OutputHandler.OutputToObjectConverter<S,T,Mat>; createObjectConverter(Function<ROI,PathObject> creator,; Map<? extends Number,String> classificationMap). Create an OutputHandler.OutputToObjectConverter to convert Mat labeled images to; path objects, optionally setting the classification. static <S,; T,; U> Processor<S,T,U>; wrapInPointerScope(Processor<S,T,U> processor). Wrap a processor in a second processor that uses a PointerScope to ensure that pointers are released; (except for any output). Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenCVProcessor; public OpenCVProcessor(). Method Details. createDetectionOutputHandler; public static <S,; T> OutputHandler<S,T,Mat> createDetectionOutputHandler(); Create an OutputHandler that attempts to convert the output into detection objects. Returns:. createDetectionOutputHandler; public static <S,; T> OutputHandler<S,T,Mat> createDetectionOutputHandler(Map<? extends Number,String> classificationMap); Create an OutputHandler that attempts to convert the output into detection objects. Parameters:; classificationMap - a map used to convert labels into classifications; Returns:. createAnnotationOutputHandler; public static <S,; T> OutputHandler<S,T,Mat> createAnnotationOutputHandler(); Create an OutputHandler that attempts to convert the output into annotation ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/OpenCVProcessor.html:3715,release,released,3715,javadoc/docs/qupath/lib/experimental/pixels/OpenCVProcessor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/OpenCVProcessor.html,1,['release'],['released']
Deployability,"). Notify listeners of a change in the hierarchy or its objects. boolean; isBrightfield(). Returns true if the image type is set to brightfield. boolean; isChanged(). Returns true if changes have been recorded since the last time this object was notified that it was saved. boolean; isFluorescence(). Returns true if the image type is set to fluorescence. Object; removeProperty(String key). Remove a specified property. void; removePropertyChangeListener(PropertyChangeListener listener). Remove a property change listener. void; setChanged(boolean isChanged). Set isChanged() status. void; setColorDeconvolutionStains(ColorDeconvolutionStains stains). Set the color deconvolution stain vectors for the current image type. void; setImageType(ImageData.ImageType type). Set the image type. void; setLastSavedPath(String path,; boolean resetChanged). Set the last path used to save this object;. Object; setProperty(String key,; Object value). Set a property. String; toString();  ; void; updateServerMetadata(ImageServerMetadata newMetadata). Update the ImageServer metadata. void; workflowUpdated(Workflow workflow). Called whenever a Workflow has been updated in some way, such as a new step added. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. ImageData; public ImageData(ImageServer<T> server,; PathObjectHierarchy hierarchy,; ImageData.ImageType type); Create a new ImageData with a specified object hierarchy and type. Parameters:; server - ; hierarchy - ; type - . ImageData; public ImageData(ImageServer<T> server,; ImageData.ImageType type); Create a new ImageData with a specified type and creating a new object hierarchy. Parameters:; server - ; type - . ImageData; public ImageData(ImageServer<T> server,; PathObjectHierarchy hierarchy); Create a new ImageData with ImageType.UNKNOWN. Parameters:; server - ; hierarchy - . ImageData; public ImageData(ImageServer<T> server); Create a ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/ImageData.html:3877,update,updateServerMetadata,3877,javadoc/docs/qupath/lib/images/ImageData.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/ImageData.html,1,['update'],['updateServerMetadata']
Deployability,"). Try to launch a browser window for a specified URL. boolean; openSavedData(QuPathViewer viewer,; File file,; boolean keepExistingServer,; boolean promptToSaveChanges). Open a saved data file within a particular viewer, optionally keeping the same ImageServer as is currently open. ReadOnlyObjectProperty<Project<BufferedImage>>; projectProperty(). Read-only property representing the currently-open project. boolean; promptToOpenImageFile(). Show a file chooser to open a new image in the current viewer. boolean; promptToOpenImageFileOrUri(). Show a dialog to open a new image in the current viewer, with support ; for entering a URL (rather than requiring a local file only). ReadOnlyBooleanProperty; readOnlyProperty(). Property indicating whether QuPath is in 'read-only' mode. void; refreshProject(). Refresh the project, updating the display if required. void; refreshTitle(). Refresh the title bar in the main QuPath window. void; requestAutomaticUpdateCheck(). Request an automated update check in a background thread. void; requestFullUpdateCheck(). Request a manual update check in a background thread. boolean; resetAvailablePathClasses(). Populate the availablePathClasses with a default list. boolean; runPlugin(PathPlugin<BufferedImage> plugin,; String arg,; boolean doInteractive). Run a plugin, interactively (i.e. Object; runScript(File file,; String script). Convenience method to execute a script. void; sendQuitRequest(). Request to quit QuPath. boolean; setAccelerator(String menuCommand,; String combo). Set an accelerator for the specified menu command. boolean; setAccelerator(MenuItem item,; KeyCombination combo). Set the accelerator for the specified menu item. boolean; setAccelerator(org.controlsfx.control.action.Action action,; KeyCombination combo). Set the accelerator for the specified action. void; setProject(Project<BufferedImage> project). Set the active project, triggering any necessary GUI updates. void; setReadOnly(boolean readOnly). Specify whether QuPa",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:9040,update,update,9040,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['update'],['update']
Deployability,"). qupath.lib.objects.PathObject.removePathObject(PathObject). since v0.4.0, replaced by PathObject.removeChildObject(PathObject). qupath.lib.objects.PathObject.removePathObjects(Collection<PathObject>). since v0.4.0, replaced by PathObject.removeChildObjects(Collection). qupath.lib.objects.PathObject.setColorRGB(Integer). since v0.4.0, use PathObject.setColor(Integer) instead. qupath.lib.objects.PathObjectTools.containsObject(PathObject, PathObject). qupath.lib.objects.PathObjectTools.containsROI(ROI, ROI). qupath.lib.objects.PathROIObject.isEditable(). since v0.4.0. qupath.lib.plugins.parameters.ParameterList.getParameterListJSON(Map<String, ?>, String). use ParameterList.convertToJson(Map) instead. qupath.lib.plugins.parameters.ParameterList.getParameterListJSON(ParameterList, String). use ParameterList.convertToJson(ParameterList) instead. qupath.lib.projects.ProjectImageEntry.getServerURIs(). use instead UriResource.getURIs(). qupath.lib.projects.ProjectImageEntry.updateServerURIs(Map<URI, URI>). use instead UriResource.updateURIs(Map). qupath.lib.regions.ImageRegion.getPlane(). v0.4.0 use ImageRegion.getImagePlane() instead (changed for better consistency with other classes). qupath.lib.roi.AreaROI.duplicate(). qupath.lib.roi.EllipseROI.duplicate(). qupath.lib.roi.interfaces.ROI.duplicate(). qupath.lib.roi.LineROI.duplicate(). qupath.lib.roi.PointsROI.duplicate(). qupath.lib.roi.PolygonROI.duplicate(). qupath.lib.roi.PolylineROI.duplicate(). qupath.lib.roi.RectangleROI.duplicate(). qupath.lib.scripting.QP.buildServer(String, Class<T>, String...). In the usual case where BufferedImage is the class, use QP.buildServer(String, String...) instead ; because it handles default args. qupath.lib.scripting.QP.createSelectAllObject(boolean). v0.4.0 use QP.createFullImageAnnotation(boolean) instead. qupath.lib.scripting.QP.createSelectAllObject(boolean, int, int). v0.4.0 use QP.createFullImageAnnotation(boolean, int, int) instead. qupath.lib.scripting.QP.detectionCentroi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/deprecated-list.html:11848,update,updateServerURIs,11848,javadoc/docs/deprecated-list.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/deprecated-list.html,1,['update'],['updateServerURIs']
Deployability,", URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource. Update the specified URIs. updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.DnnObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVDnn;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVModelObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.opencv.ops.ImageOp. Default implementation makes no changes; classes should override this if necessary. UpdateUrisCommand<T> - Class in qupath.lib.gui.commands. Fix broken URIs by using relative paths or prompting the user to select files. updateZ(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated z value. updatingConstrainingObjects(QuPathViewer, double, double, Collection<PathObject>) - Method in class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler. New annotations can be constrained while they are being drawn, to avoid overlaps with existing annotations; or to ensure they are drawn within a parent annotation. updatingConstrainingObjects(QuPathViewer, double, double, Collection<PathObject>) - Method in class qupath.lib.gui.viewer.tools.handlers.MoveToolEventHandler. New annotations can be constrained while they are being drawn, to avoid overlaps with existing annotations; or to ensure they are drawn within a parent annotation. updatingConstrainingObjects(QuPathViewer, double, double, Collection<PathObject>) - Method in class qupath.process.gui.WandToolEventHandler. New annotations can be constrained while they are being drawn, to avoid overlaps with existing",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1068781,update,updateZ,1068781,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateZ']
Deployability,", WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; String getDescription(); Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Parameters:; taskRunner - ; arg - ; Returns:. getLastResultsDescription; String getLastResultsDescription(); (Optional) short one-line description of the results, e.g. to say how many objects detected.; GUIs may choose to display this on a label during interactive processing. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:2763,update,update,2763,javadoc/docs/qupath/lib/plugins/PathPlugin.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html,1,['update'],['update']
Deployability,",; OverlayOptions options). Extract an image region as an ImagePlus, optionally setting ImageJ Rois corresponding to QuPath objects. String; getDescription(). A short description of the extension for displaying in the main GUI. static Image; getImageJIcon(int width,; int height). Try to read the ImageJ icon from its jar. static ImageJ; getImageJInstance(). Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). static String; getImageJPath(). Get the path for a local ImageJ installation, if set. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. static StringProperty; imageJPathProperty(). Property representing the path to a local ImageJ installation, or null if no path has been set. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. static void; setImageJPath(String path). Set the path for a local ImageJ installation, if required. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Property Details. imageJPath; public static StringProperty imageJPathProperty; Property representing the path to a local ImageJ installation, or null if no path has been set. See Also:. getImageJPath(); setImageJPath(String); imageJPathProperty(). Constructor Details. IJExtension; public IJExtension(). Method Details. setImageJPath; public static void setImageJPath(String path); Set the path for a local ImageJ installation, if required. This can be used to help load external ImageJ plugins. Parameters:; path - . getImageJPath; public static String getImageJPath(); Get the path for a local ImageJ installation, if set. Returns:. imageJPathProperty; public static StringProperty imageJPathProperty(); Property representing the path to a l",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:3118,install,installation,3118,javadoc/docs/qupath/imagej/gui/IJExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html,1,['install'],['installation']
Deployability,"- Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(Im",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1063532,update,updateMeasurementList,1063532,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateMeasurementList']
Deployability,"- Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; insertQPExImportAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; insertQPImportAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; insertSelectedObjectsInHierarchy(ImageData<?>) - Static method in class qupath.lib.gui.commands.Commands. Insert the selected objects in the hierarchy, resolving positions accordingly. insertText(int, String) - Method in interface qupath.lib.gui.scripting.EditableText. Request inserting the specified text. insertText(int, String) - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; insertText(int, String) - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; installActions(Collection<? extends Action>) - Method in class qupath.lib.gui.QuPathGUI. Install the specified actions. installColorMaps(Path...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps from the specified paths. installColorMaps(ColorMaps.ColorMap...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps. installCommand(String, Runnable) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath. installDefaultFeatureClassificationBuilder(ImageDataTransformerBuilder) - Static method in class qupath.process.gui.commands.ml.PixelClassifierPane. Add to the list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the ext",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:607049,install,installColorMaps,607049,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installColorMaps']
Deployability,"-identity) transform is specified. clipToROI; public static List<ROI> clipToROI(ROI parent,; Collection<? extends ROI> rois); Intersect a collection of ROIs with a single parent ROI, returning all results that are valid.; Where possible, ROIs are returned unchanged. Parameters:; parent - the parent ROI, used to define the clip boundary; rois - a collection of ROIs that should be intersected with parent; Returns:; list of intersected ROIs; this may be shorter than rois if some lie completely outside parent. fillHoles; public static ROI fillHoles(ROI roi); Fill the holes of an Area ROI, or return the ROI unchanged if it contains no holes. Parameters:; roi - ; Returns:. removeSmallPieces; public static ROI removeSmallPieces(ROI roi,; double minAreaPixels,; double minHoleAreaPixels); Remove small fragments and fill small holes of an area ROI. Parameters:; roi - the ROI to refine; minAreaPixels - the minimum size of a fragment to retain; minHoleAreaPixels - the minimum size of a hole to retain, or -1 if all holes should be retained; Returns:; an updated ROI - which may be empty if the modifications caused the ROI to disappear; See Also:. GeometryTools.refineAreas(Geometry, double, double). getCircularity; public static double getCircularity(ROI roi); Get circularity measurement for Area ROIs, calculated as 4 * PI * (area / perimeter^2).; Non-area ROIs return Double.NaN.; ; This ranges between 0 (for a line) and 1 (for a circle). Note that the pixel (i.e. not scaled) areas and perimeters are used. Parameters:; roi - the ROI to measure; Returns:; a circularity value, between 0 (a line) and 1 (a perfect circle). getCircularity; public static double getCircularity(ROI roi,; double pixelWidth,; double pixelHeight); Get circularity measurement for area ROIs, with optional pixel calibration, calculated as 4 * PI * (area / perimeter^2).; Non-area ROIs return Double.NaN.; ; This ranges between 0 (for a line) and 1 (for a circle). This version optionally allows non-square pixels t",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiTools.html:10597,update,updated,10597,javadoc/docs/qupath/lib/roi/RoiTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiTools.html,1,['update'],['updated']
Deployability,". AbstractDnnModel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class AbstractDnnModel<T>. java.lang.Object; qupath.opencv.dnn.AbstractDnnModel<T>. Type Parameters:; T - . All Implemented Interfaces:; AutoCloseable, DnnModel. Direct Known Subclasses:; OpenCVDnn. public abstract class AbstractDnnModel<T>; extends Object; implements DnnModel; Wrapper for a deep learning model in a pipeline using OpenCV.; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format,; and the output back into one or more Mats.; ; This provides convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the pre",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:676,pipeline,pipeline,676,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,1,['pipeline'],['pipeline']
Deployability,". AbstractImageRenderer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.images.stores; Class AbstractImageRenderer. java.lang.Object; qupath.lib.gui.images.stores.AbstractImageRenderer. All Implemented Interfaces:; ImageRenderer. Direct Known Subclasses:; ImageDisplay. public abstract class AbstractImageRenderer; extends Object; implements ImageRenderer; Abstract ImageRenderer, which adds a timestamp variable. Field Summary; Fields. Modifier and Type; Field; Description; protected long; timestamp. Timestamp variable; this should be updated by implementing classes. Constructor Summary; Constructors. Constructor; Description; AbstractImageRenderer();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; long; getLastChangeTimestamp(). Timestamp of the last change (probably in milliseconds). String; getUniqueID(). Get a unique key, which will be used for caching. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.images.stores.ImageRenderer; applyTransforms. Field Details. timestamp; protected long timestamp; Timestamp variable; this should be updated by implementing classes. Constructor Details. AbstractImageRenderer; public AbstractImageRenderer(). Method Details. getLastChangeTimestamp; public long getLastChangeTimestamp(); Description copied from interface: ImageRenderer; Timestamp of the last change (probably in milliseconds).; ; This can be used to identify when the status has changed. Specified by:; getLastChangeTimestamp in interface ImageRenderer; Returns:. getUniqueID; public String getUniqueID()",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/stores/AbstractImageRenderer.html:825,update,updated,825,javadoc/docs/qupath/lib/gui/images/stores/AbstractImageRenderer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/stores/AbstractImageRenderer.html,1,['update'],['updated']
Deployability,". ActionMenu (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Field; Required; Optional. Detail:. Field; Element. Summary: ; Field | ; Required | ; Optional. Detail: ; Field | ; Element. SEARCH. Package qupath.lib.gui.actions.annotations; Annotation Interface ActionMenu. @Documented; @Retention(RUNTIME); @Target({TYPE,METHOD,FIELD}); public @interface ActionMenu; Annotation indicating the menu path where an action should be installed.; This may be used by QuPath to be able to assign the action automatically to the correct place, ; in the absence of further information. Required Element Summary; Required Elements. Modifier and Type; Required Element; Description; String[]; value. Menu path, in the form ""Menu>Submenu>Command name"". Element Details. value; String[] value; Menu path, in the form ""Menu>Submenu>Command name"". Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/annotations/ActionMenu.html:530,install,installed,530,javadoc/docs/qupath/lib/gui/actions/annotations/ActionMenu.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/annotations/ActionMenu.html,1,['install'],['installed']
Deployability,". All Classes and Interfaces (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. SEARCH. All Classes and Interfaces. All Classes and InterfacesInterfacesClassesEnum ClassesException ClassesAnnotation Interfaces. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractDnnModel<T>. Wrapper for a deep learning model in a pipeline using OpenCV. AbstractImageOverlay. Abstract PathOverlay with additional properties relevant when drawing BufferedImages. AbstractImageRenderer. Abstract ImageRenderer, which adds a timestamp variable. AbstractImageServer<T>. Abstract implementation of ImageServer providing some common functionality. AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractObjectClassifier<T>. Abstract class to help with the creation of object classifiers. AbstractOverlay. Abstract class to help with implementing PathOverlays. AbstractOverlay.LocationStringFunction. Define a function to perform the task of PathOverlay.getLocationString(ImageData, double, double, int, int). AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. AbstractTileableImageServer. Abstract ImageServer for BufferedImages that internally breaks up requests into constituent tiles. ActionAccelerator. Annotation used to specify a preferred accelerator for an an action. ActionConfig. Annotation indicating the a key in the external re",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:541,pipeline,pipeline,541,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['pipeline'],['pipeline']
Deployability,". AnnotationPane (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.panes; Class AnnotationPane. java.lang.Object; qupath.lib.gui.panes.AnnotationPane. All Implemented Interfaces:; EventListener, ChangeListener<ImageData<BufferedImage>>, PathObjectHierarchyListener, PathObjectSelectionListener. public class AnnotationPane; extends Object; implements PathObjectSelectionListener, ChangeListener<ImageData<BufferedImage>>, PathObjectHierarchyListener; Component for displaying annotations within the active image.; ; Also shows the PathClass list. Author:; Pete Bankhead. Property Summary; Properties. Type; Property; Description; BooleanProperty; disableUpdates. Property that may be used to prevent updates on every hierarchy or selection change event. Constructor Summary; Constructors. Constructor; Description; AnnotationPane(QuPathGUI qupath). Constructor. AnnotationPane(QuPathGUI qupath,; ObservableValue<ImageData<BufferedImage>> imageDataProperty). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew);  ; BooleanProperty; disableUpdatesProperty(). Property that may be used to prevent updates on every hierarchy or selection change event. Pane; getPane(). Get the pane for display. void; hierarchyChanged(PathObjectHierarchyEvent event). Notify listeners of a change in the hierarchy or its objects. void; selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected). Fired when the selected objects have changed. Methods inherite",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html:985,update,updates,985,javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html,1,['update'],['updates']
Deployability,". DensityMapDialog (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.process.gui.commands.density; Class DensityMapDialog. java.lang.Object; qupath.process.gui.commands.density.DensityMapDialog. public class DensityMapDialog; extends Object; Dialog for interactively generating a custom density map. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; DensityMapDialog(QuPathGUI qupath). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; deregister(). Deregister listeners. Stage; getStage(). Get the stage. boolean; updateDefaults(ImageData<BufferedImage> imageData). Update default parameters with a specified ImageData. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DensityMapDialog; public DensityMapDialog(QuPathGUI qupath); Constructor. Parameters:; qupath - . Method Details. updateDefaults; public boolean updateDefaults(ImageData<BufferedImage> imageData); Update default parameters with a specified ImageData.; This can be called before showing the dialog to give better starting values. Parameters:; imageData - ; Returns:. deregister; public void deregister(); Deregister listeners. This should be called when the stage is closed if it will not be used again. getStage; public Stage getStage(); Get the stage. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/process/gui/commands/density/DensityMapDialog.html:897,update,updateDefaults,897,javadoc/docs/qupath/process/gui/commands/density/DensityMapDialog.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/process/gui/commands/density/DensityMapDialog.html,3,['update'],['updateDefaults']
Deployability,". DnnModel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface DnnModel. All Superinterfaces:; AutoCloseable. All Known Implementing Classes:; AbstractDnnModel, OpenCVDnn. public interface DnnModel; extends AutoCloseable; General interface for implementing a deep learning model in a pipeline using OpenCV.; ; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format, ; and the output back into one or more Mats.; ; Implementations should provide convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. If only a single input and output are required, then only predict(Mat); needs to be implemented.; ; Note: This was originally implemented in QuPath v0.3.0, but simplified for; QuPath v0.5.0. It no longer takes a generic parameter or requires; 'blob' and 'prediction' functions to be defined.; This makes it easier to implement, and also to handle memory management.; If you want the old behavior, see AbstractDnnModel. Since:; 0.5.0; Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_INPUT_NAME. Default input layer name. static final String; DEFAULT_OUTPUT_NAME. Default output layer name. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default List<Mat>; batchPredict(List<? extends Mat> mats). Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. default",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html:581,pipeline,pipeline,581,javadoc/docs/qupath/opencv/dnn/DnnModel.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModel.html,1,['pipeline'],['pipeline']
Deployability,". DnnModelParams (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnModelParams. java.lang.Object; qupath.opencv.dnn.DnnModelParams. public class DnnModelParams; extends Object; Parameters to build a DnnModel.; These are used via DnnModels.buildModel(DnnModelParams).; ; Many parameters are optional.; However as many as are available should be set, to maximize the chances ; of a DnnModelBuilder being available to build a model from the parameters.; ; Warning! The API for this class is unstable; it is likely to change in ; future releases. Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; DnnModelParams.Builder. Builder for DnnModelParams. Field Summary; Fields. Modifier and Type; Field; Description; static final String; FRAMEWORK_MXNET. Default name to identify MXNet. static final String; FRAMEWORK_ONNX_RUNTIME. Default name to identify ONNX Runtime. static final String; FRAMEWORK_OPENCV_DNN. Default name to identify OpenCV DNN. static final String; FRAMEWORK_PYTORCH. Default name to identify PyTorch. static final String; FRAMEWORK_TENSORFLOW. Default name to identify TensorFlow. static final String; FRAMEWORK_TF_LITE. Default name to identify TensorFlow Lite. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static DnnModelParams.Builder; builder(). Create a new params builder, with default values. static DnnModelParams.Builder; builder(DnnModelParams params). Create a new params builder, initialized with the values from existing ; params. String; getFramework(). Get the name of the deep learning framework that may be used. Map<Str",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html:831,release,releases,831,javadoc/docs/qupath/opencv/dnn/DnnModelParams.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnModelParams.html,1,['release'],['releases']
Deployability,". DnnObjectClassifier (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class DnnObjectClassifier. java.lang.Object; qupath.lib.classifiers.object.AbstractObjectClassifier<BufferedImage>; qupath.opencv.dnn.DnnObjectClassifier. All Implemented Interfaces:; ObjectClassifier<BufferedImage>, UriResource. public class DnnObjectClassifier; extends AbstractObjectClassifier<BufferedImage>; implements UriResource; Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN.; ; Warning! This implementation is likely to change in the future. Author:; Pete Bankhead. Field Summary. Fields inherited from interface qupath.lib.classifiers.object.ObjectClassifier; PROJECT_LOCATION. Constructor Summary; Constructors. Constructor; Description; DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; doubl",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:726,patch,patch-based,726,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,1,['patch'],['patch-based']
Deployability,". ExtensionControlPane (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui; Class ExtensionControlPane. java.lang.Object; javafx.scene.Node; javafx.scene.Parent; javafx.scene.layout.Region; javafx.scene.layout.Pane; javafx.scene.layout.VBox; qupath.lib.gui.ExtensionControlPane. All Implemented Interfaces:; Styleable, EventTarget. public class ExtensionControlPane; extends VBox; Borderpane that displays extensions, with options to remove,; open containing folder, update, where possible. Property Summary. Properties inherited from class javafx.scene.layout.VBox; alignment, fillWidth, spacing. Properties inherited from class javafx.scene.layout.Region; background, border, cacheShape, centerShape, height, insets, maxHeight, maxWidth, minHeight, minWidth, opaqueInsets, padding, prefHeight, prefWidth, scaleShape, shape, snapToPixel, width. Properties inherited from class javafx.scene.Parent; needsLayout. Properties inherited from class javafx.scene.Node; accessibleHelp, accessibleRoleDescription, accessibleRole, accessibleText, blendMode, boundsInLocal, boundsInParent, cacheHint, cache, clip, cursor, depthTest, disabled, disable, effectiveNodeOrientation, effect, eventDispatcher, focused, focusTraversable, focusVisible, focusWithin, hover, id, inputMethodRequests, layoutBounds, layoutX, layoutY, localToParentTransform, localToSceneTransform, managed, mouseTransparent, nodeOrientation, onContextMenuRequested, onDragDetected, onDragDone, onDragDropped, onDragEntered, onDragExited, onDragOver, onInputMethodTextChanged, onKeyPressed, onKeyReleased, onKeyTyped, onMouseClicked, onMouseDragEntered, onMouseDragExited, onMouseDragged, onMouseDragOver, onMouseDragReleased, onMouseEntered, onMouseExited, o",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ExtensionControlPane.html:750,update,update,750,javadoc/docs/qupath/lib/gui/ExtensionControlPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ExtensionControlPane.html,1,['update'],['update']
Deployability,". ExtensionsMenuActions.Actions (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.actions.menus; Class ExtensionsMenuActions.Actions. java.lang.Object; qupath.lib.gui.actions.menus.ExtensionsMenuActions.Actions. Enclosing class:; ExtensionsMenuActions. @ActionMenu(""Menu.Extensions""); public class ExtensionsMenuActions.Actions; extends Object. Field Summary; Fields. Modifier and Type; Field; Description; final org.controlsfx.control.action.Action; EXTENSIONS;  ; final org.controlsfx.control.action.Action; SEP_1;  . Constructor Summary; Constructors. Constructor; Description; Actions();  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. EXTENSIONS; @ActionConfig(""Action.Extensions.installed""); public final org.controlsfx.control.action.Action EXTENSIONS. SEP_1; @ActionMenu(""""); public final org.controlsfx.control.action.Action SEP_1. Constructor Details. Actions; public Actions(). ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/menus/ExtensionsMenuActions.Actions.html:1095,install,installed,1095,javadoc/docs/qupath/lib/gui/actions/menus/ExtensionsMenuActions.Actions.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/menus/ExtensionsMenuActions.Actions.html,1,['install'],['installed']
Deployability,". Get the base URL for the QuPath documentation, specifically for this software version. static final String; getVersionedDocsUrl(String relative). Get the base URL for the QuPath documentation for this software version, including ; a relative component to link to a specific page (without leading slash). static final String; getYouTubeUrl(). Get a URL pointing to the QuPath YouTube channel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Urls; public Urls(). Method Details. getDocsUrl; public static final String getDocsUrl(); Get the base URL for the QuPath documentation (independent of version). Returns:. getVersionedDocsUrl; public static final String getVersionedDocsUrl(); Get the base URL for the QuPath documentation, specifically for this software version. Returns:. getVersionedDocsUrl; public static final String getVersionedDocsUrl(String relative); Get the base URL for the QuPath documentation for this software version, including ; a relative component to link to a specific page (without leading slash). Parameters:; relative - ; Returns:. getCitationUrl; public static final String getCitationUrl(); Get a URL pointing to a page that explains how to cite this version of QuPath in a publication. Returns:. getInstallationUrl; public static final String getInstallationUrl(); Get a URL pointing to a page that explains how to install this version of QuPath. Returns:. getYouTubeUrl; public static final String getYouTubeUrl(); Get a URL pointing to the QuPath YouTube channel. Returns:. getGitHubRepoUrl; public static final String getGitHubRepoUrl(); Get a URL pointing to the main QuPath GitHub repo. Returns:. getGitHubIssuesUrl; public static final String getGitHubIssuesUrl(); Get a URL pointing to the main GitHub issues page. Returns:. getUserForumUrl; public static final String getUserForumUrl(); Get a URL pointing to the main QuPath user forum. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/Urls.html:2935,install,install,2935,javadoc/docs/qupath/lib/gui/Urls.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/Urls.html,1,['install'],['install']
Deployability,. GitHubProject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.extensions; Interface GitHubProject. public interface GitHubProject; Helper class to represent a project hosted on GitHub.; May be used in combination with UpdateChecker to query new releases. Nested Class Summary; Nested Classes. Modifier and Type; Interface; Description; static class ; GitHubProject.GitHubRepo. Helper class to represent a GitHub repository. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; GitHubProject.GitHubRepo; getRepository(). Get the GitHub repository associated with the project. Method Details. getRepository; GitHubProject.GitHubRepo getRepository(); Get the GitHub repository associated with the project. Returns:. ,MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/extensions/GitHubProject.html:534,release,releases,534,javadoc/docs/qupath/lib/gui/extensions/GitHubProject.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/extensions/GitHubProject.html,1,['release'],['releases']
Deployability,". GroovyCV (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.tools; Class GroovyCV. java.lang.Object; qupath.opencv.tools.GroovyCV. public class GroovyCV; extends Object; Category class for enhanced Groovy scripting with OpenCV.; ; See https://docs.groovy-lang.org/latest/html/api/groovy/lang/Category.html; ; Warning! This is experimental and likely to change between QuPath releases.; Use with caution and discuss on http://forum.image.sc/tag/qupath. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; GroovyCV();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static Mat; abs(Mat mat). Compute the absolute value of all elements in an array. static Mat; and(Mat m1,; Mat m2). Compute the bitwise AND of two arrays. static <T> T; asType(ImagePlus imp,; Class<T> cls). Helper method to convert an ImagePlus to a Mat or ImageProcessor; using Groovy's 'as' syntax. static <T> T; asType(ImageProcessor ip,; Class<T> cls). Helper method to convert an ImageProcessor to a Mat using Groovy's 'as' syntax. static <T> T; asType(BufferedImage img,; Class<T> cls). Helper method to convert a BufferedImage to a Mat, ImageProcessor or ImagePlus ; using Groovy's 'as' syntax. static <T> T; asType(Number n,; Class<T> cls). Helper function to convert a Number to a Mat or Scalar using Groovy's 'as' syntax. static <T> T; asType(Mat mat,; Class<T> cls). Helper method to convert a Mat to a BufferedImage, ImagePlus, ImageProcessor, ; double or float array using Groovy's 'as' syntax. static Mat; bitwiseNegate(Mat m1). Compute the bitwise NOT of an array. static Mat; clip(Mat mat,; double min,; double max). Clip values of a Mat to be withi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/GroovyCV.html:660,release,releases,660,javadoc/docs/qupath/opencv/tools/GroovyCV.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/GroovyCV.html,1,['release'],['releases']
Deployability,". IJExtension (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.gui; Class IJExtension. java.lang.Object; qupath.imagej.gui.IJExtension. All Implemented Interfaces:; QuPathExtension. public class IJExtension; extends Object; implements QuPathExtension; QuPath extension & associated static helper methods used to support integration of ImageJ with QuPath. Author:; Pete Bankhead. Property Summary; Properties. Type; Property; Description; static StringProperty; imageJPath. Property representing the path to a local ImageJ installation, or null if no path has been set. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; IJExtension.IJExtensionCommands. Commands to install with the ImageJ extension. Constructor Summary; Constructors. Constructor; Description; IJExtension();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static Overlay; extractOverlay(PathObjectHierarchy hierarchy,; RegionRequest request,; OverlayOptions options,; Predicate<PathObject> filter). Extract an ImageJ overlay for the specified region. static PathImage<ImagePlus>; extractROI(ImageServer<BufferedImage> server,; PathObject pathObject,; RegionRequest request,; boolean setROI). Similar to extractROI(ImageServer, ROI, RegionRequest, boolean), except that the title of the ImagePlus is set according to the parent object type (which is used to get the ROI). static PathImage<ImagePlus>; extractROI(ImageServer<BufferedImage> server,; ROI pathROI,; RegionRequest request,; boolean setROI). Extract a region of interest from an image as an ImageJ ImagePlus. static PathImage<ImagePlus>; extractROIWithOverlay(ImageServer<Buffe",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:605,integrat,integration,605,javadoc/docs/qupath/imagej/gui/IJExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html,2,"['install', 'integrat']","['installation', 'integration']"
Deployability,. IJExtension.IJExtensionCommands (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.imagej.gui; Class IJExtension.IJExtensionCommands. java.lang.Object; qupath.imagej.gui.IJExtension.IJExtensionCommands. Enclosing class:; IJExtension. public static class IJExtension.IJExtensionCommands; extends Object; Commands to install with the ImageJ extension. Field Summary; Fields. Modifier and Type; Field; Description; final org.controlsfx.control.action.Action; actionCellDetection;  ; final org.controlsfx.control.action.Action; actionCellMembraneDetection. Deprecated. final org.controlsfx.control.action.Action; actionDoG;  ; final org.controlsfx.control.action.Action; actionExtractRegion;  ; final org.controlsfx.control.action.Action; actionImportROIs;  ; final org.controlsfx.control.action.Action; actionMacroRunner;  ; final org.controlsfx.control.action.Action; actionPixelCount. Deprecated. final org.controlsfx.control.action.Action; actionPlugins;  ; final org.controlsfx.control.action.Action; actionPositiveCellDetection;  ; final org.controlsfx.control.action.Action; actionSimpleTissueDetection. Deprecated. final org.controlsfx.control.action.Action; actionSLIC;  ; final org.controlsfx.control.action.Action; actionSnapshot;  ; final org.controlsfx.control.action.Action; actionSubcellularDetection. Deprecated. final org.controlsfx.control.action.Action; actionTiles;  ; final org.controlsfx.control.action.Action; SEP_0;  ; final org.controlsfx.control.action.Action; SEP_1;  ; final org.controlsfx.control.action.Action; SEP_2;  ; final org.controlsfx.control.action.Action; SEP_2B;  ; final org.controlsfx.control.action.Action; SEP_3;  ; final org.controlsfx.control.action.Action; SEP_4;  . Method Summar,MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html:593,install,install,593,javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.IJExtensionCommands.html,1,['install'],['install']
Deployability,". ImageServerBuilder.AbstractServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageServerBuilder.AbstractServerBuilder<T>. java.lang.Object; qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder<T>. Type Parameters:; T - . All Implemented Interfaces:; ImageServerBuilder.ServerBuilder<T>. Direct Known Subclasses:; ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public abstract static class ImageServerBuilder.AbstractServerBuilder<T>; extends Object; implements ImageServerBuilder.ServerBuilder<T>; Abstract ServerBuilder implementation that handles metadata. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. protected abstract ImageServer<T>; buildOriginal();  ; protected ImageServerMetadata; getMetadata();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder; getURIs, updateURIs. Method Details. buildOriginal; protected abstract ImageServer<T> buildOriginal(); throws Exception. Throws:; Exception. getMetadata; protected ImageServerMetadata getMetadata(). build; public ImageServer<T> build(); throws Exception; Description copied from interface: ImageServerBuilder.ServerBuilder; Build a new ImageServer instance. Specified by:; build in interface ImageServerBuilder.ServerBuilder<T>; Returns:; Throws:; Exception. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html:1457,update,updateURIs,1457,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.AbstractServerBuilder.html,1,['update'],['updateURIs']
Deployability,". ImageServerBuilder.ServerBuilder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Interface ImageServerBuilder.ServerBuilder<T>. Type Parameters:; T - . All Known Implementing Classes:; ImageServerBuilder.AbstractServerBuilder, ImageServerBuilder.DefaultImageServerBuilder. Enclosing interface:; ImageServerBuilder<T>. public static interface ImageServerBuilder.ServerBuilder<T>; Interface that defines a class encapsulating all that is required to build an ImageServer.; ; Instances should be sufficiently lightweight that they can be easily serialized to/from JSON ; for storage within projects.; ; Instances should also be immutable. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; ImageServer<T>; build(). Build a new ImageServer instance. Collection<URI>; getURIs(). Get a list of URIs required by this builder. ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Method Details. build; ImageServer<T> build(); throws Exception; Build a new ImageServer instance. Returns:; Throws:; Exception. getURIs; Collection<URI> getURIs(); Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. updateURIs(Map). updateURIs; ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. getURIs(). ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html:1207,update,updateURIs,1207,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.ServerBuilder.html,7,['update'],"['updateMap', 'updateURIs']"
Deployability,". MeasurementList (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.measurements; Interface MeasurementList. All Superinterfaces:; AutoCloseable, Serializable. public interface MeasurementList; extends Serializable, AutoCloseable; Interface defining a feature measurement list, consisting of key value pairs.; ; To help enable efficiency for large sets of PathObjects requiring measurement lists,; only String keys and numeric values are included.; ; QuPath v0.4.0: MeasurementList was updated to have more map-like behavior, ; while still using primitive values. In particular, addMeasurement(String, double) ; was deprecated and now simply defers to put(String, double).; ; Additionally, the wordy putMeasurement(String, double) and getMeasurementValue(String) ; were deprecated in favor of put(String, double) and get(String) - which do the same thing, ; but with more familiar syntax. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Interface; Description; static enum ; MeasurementList.MeasurementListType. Enum representing different types of measurement list, with different priorities regarding ; flexibility and efficiency. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; default boolean; addMeasurement(String name,; double value). Deprecated.; v0.4.0 use put(String, double) instead. default Map<String,Number>; asMap(). Get a map view of this measurements list. void; clear(). Remove all the measurements from the list. void; close(). Close the list. boolean; containsKey(String name). Returns true if this list contains a measurement with the specified name. default boolean; containsName",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/measurements/MeasurementList.html:767,update,updated,767,javadoc/docs/qupath/lib/measurements/MeasurementList.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/measurements/MeasurementList.html,1,['update'],['updated']
Deployability,". MeasurementMapPane (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.panes; Class MeasurementMapPane. java.lang.Object; qupath.lib.gui.panes.MeasurementMapPane. public class MeasurementMapPane; extends Object; Component used for displaying measurement maps, whereby detection objects are recolored ; according to measurement values. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; MeasurementMapPane(QuPathGUI qupath). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; Pane; getPane(). Get the pane, which can be added to a scene for display. void; updateMeasurements(). Update the measurements according to the current image. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MeasurementMapPane; public MeasurementMapPane(QuPathGUI qupath); Constructor. Parameters:; qupath - the current QuPath instance. Method Details. getPane; public Pane getPane(); Get the pane, which can be added to a scene for display. Returns:. updateMeasurements; public void updateMeasurements(); Update the measurements according to the current image. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/MeasurementMapPane.html:937,update,updateMeasurements,937,javadoc/docs/qupath/lib/gui/panes/MeasurementMapPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/MeasurementMapPane.html,3,['update'],['updateMeasurements']
Deployability,". Menus (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.actions.menus; Class Menus. java.lang.Object; qupath.lib.gui.actions.menus.Menus. public class Menus; extends Object; Generate actions for installation in QuPath's main menubar. Constructor Summary; Constructors. Constructor; Description; Menus();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static Collection<org.controlsfx.control.action.Action>; createAllMenuActions(QuPathGUI qupath). Create a collection of all the actions that should be installed in QuPath's main menubar. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Menus; public Menus(). Method Details. createAllMenuActions; public static Collection<org.controlsfx.control.action.Action> createAllMenuActions(QuPathGUI qupath); Create a collection of all the actions that should be installed in QuPath's main menubar.; The actions are configured for installation through QuPathGUI.installActions(Collection). Parameters:; qupath - ; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/menus/Menus.html:482,install,installation,482,javadoc/docs/qupath/lib/gui/actions/menus/Menus.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/menus/Menus.html,5,['install'],"['installActions', 'installation', 'installed']"
Deployability,". Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static PathPrefs.AutoUpdateType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathPrefs.AutoUpdateType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. QUPATH_ONLY; public static final PathPrefs.AutoUpdateType QUPATH_ONLY; Check for QuPath updates only. QUPATH_AND_EXTENSIONS; public static final PathPrefs.AutoUpdateType QUPATH_AND_EXTENSIONS; Check for QuPath and extensions on GitHub. EXTENSIONS_ONLY; public static final PathPrefs.AutoUpdateType EXTENSIONS_ONLY; Check for extensions on GitHub only (not new QuPath releases). NONE; public static final PathPrefs.AutoUpdateType NONE; Don't check for any updates automatically. Method Details. values; public static PathPrefs.AutoUpdateType[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static PathPrefs.AutoUpdateType valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of the enum constant to be returned.; Returns:; the enum constant with the specified name; Throws:; IllegalArgumentException - if this enum class has no constant with the specified name; NullPointerException - if the argument is null. toString; public String toString(). ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html:2280,release,releases,2280,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html,1,['release'],['releases']
Deployability,". MiniViewers (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.commands; Class MiniViewers. java.lang.Object; qupath.lib.gui.commands.MiniViewers. public class MiniViewers; extends Object; Command to open a small viewer window, which displays a detail from ; the current image depending on where the cursor is over the image.; ; In QuPath <= v0.1.2, this gave a single QuPathViewer that updated its display ; based on a main viewer. Now, it has been rewritten to provide a more efficient paintable ; canvas (not a full QuPathViewer) and is capable of showing separated color channels. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; MiniViewers.MiniViewerManager. A manager for one or more mini-viewers, where the 'more' means a separate viewer per channel. Constructor Summary; Constructors. Constructor; Description; MiniViewers();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static MiniViewers.MiniViewerManager; createManager(QuPathViewer viewer). Create a MiniViewers.MiniViewerManager associated with a specified viewer. static MiniViewers.MiniViewerManager; createManager(QuPathViewer viewer,; Collection<? extends ChannelDisplayInfo> channels). Create a MiniViewers.MiniViewerManager displaying multiple channels and ; associated with a specified viewer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MiniViewers; public MiniViewers(). Method Details. createManager; public static MiniViewers.MiniViewerManager createManager(QuPathViewer viewer); Create a MiniViewers",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/MiniViewers.html:673,update,updated,673,javadoc/docs/qupath/lib/gui/commands/MiniViewers.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/MiniViewers.html,1,['update'],['updated']
Deployability,". Modifier and Type; Method; Description; ReadOnlyObjectProperty<ChannelDisplayInfo>; currentChannelProperty(). Get the currently-selected channel. ReadOnlyBooleanProperty; currentChannelVisible(). Read-only property indicating whether the currently-selected channel is visible,; i.e. BooleanProperty; disableToggleMenuItemsProperty(). Property to disable options to toggle the visibility of channels. MultipleSelectionModel<ChannelDisplayInfo>; getSelectionModel(). Get the selection model for the channels. ObjectProperty<ImageDisplay>; imageDisplayProperty(). Property for the image display that should be shown and managed by this pane. boolean; isEmpty(). Query if the table is empty, i.e. void; setHideChannel(ChannelDisplayInfo channel). Request that the specified channel is hidden. void; setShowChannel(ChannelDisplayInfo channel). Request that the specified channel is shown. void; toggleShowHideChannel(ChannelDisplayInfo channel). Toggle the visibility of the specified channel. void; updateTable(). Ensure the table is up-to-date. Methods inherited from class javafx.scene.layout.BorderPane; bottomProperty, centerProperty, clearConstraints, computeMinHeight, computeMinWidth, computePrefHeight, computePrefWidth, getAlignment, getBottom, getCenter, getContentBias, getLeft, getMargin, getRight, getTop, layoutChildren, leftProperty, rightProperty, setAlignment, setBottom, setCenter, setLeft, setMargin, setRight, setTop, topProperty. Methods inherited from class javafx.scene.layout.Pane; getChildren. Methods inherited from class javafx.scene.layout.Region; backgroundProperty, borderProperty, cacheShapeProperty, centerShapeProperty, computeMaxHeight, computeMaxWidth, getBackground, getBorder, getClassCssMetaData, getCssMetaData, getHeight, getInsets, getMaxHeight, getMaxWidth, getMinHeight, getMinWidth, getOpaqueInsets, getPadding, getPrefHeight, getPrefWidth, getShape, getUserAgentStylesheet, getWidth, heightProperty, insetsProperty, isCacheShape, isCenterShape, isResizable, ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html:4353,update,updateTable,4353,javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html,1,['update'],['updateTable']
Deployability,". ObjectMeasurements (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.analysis.features; Class ObjectMeasurements. java.lang.Object; qupath.lib.analysis.features.ObjectMeasurements. public class ObjectMeasurements; extends Object; Experimental class to generate object measurements.; ; May very well be moved, removed or refactored in a future release... Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ObjectMeasurements.Compartments. Cell compartments. static enum ; ObjectMeasurements.Measurements. Requested intensity measurements. static enum ; ObjectMeasurements.ShapeFeatures. Standard measurements that may be computed from shapes. Constructor Summary; Constructors. Constructor; Description; ObjectMeasurements();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; addIntensityMeasurements(ImageServer<BufferedImage> server,; PathObject pathObject,; double downsample,; Collection<ObjectMeasurements.Measurements> measurements,; Collection<ObjectMeasurements.Compartments> compartments). Measure all channels of an image for one individual object or cell. static void; addShapeMeasurements(Collection<? extends PathObject> pathObjects,; PixelCalibration cal,; ObjectMeasurements.ShapeFeatures... features). Add shape measurements for multiple objects. static void; addShapeMeasurements(PathObject pathObject,; PixelCalibration cal,; ObjectMeasurements.ShapeFeatures... features). Add shape measurements for one object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/features/ObjectMeasurements.html:626,release,release,626,javadoc/docs/qupath/lib/analysis/features/ObjectMeasurements.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/features/ObjectMeasurements.html,1,['release'],['release']
Deployability,". ObjectsMenuActions.LockActions (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.actions.menus; Class ObjectsMenuActions.LockActions. java.lang.Object; qupath.lib.gui.actions.menus.ObjectsMenuActions.LockActions. Enclosing class:; ObjectsMenuActions. public class ObjectsMenuActions.LockActions; extends Object. Field Summary; Fields. Modifier and Type; Field; Description; final org.controlsfx.control.action.Action; LOCK_SELECTED_OBJECTS;  ; final org.controlsfx.control.action.Action; TOGGLE_SELECTED_OBJECTS_LOCKED;  ; final org.controlsfx.control.action.Action; UNLOCK_SELECTED_OBJECTS;  . Constructor Summary; Constructors. Constructor; Description; LockActions();  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. LOCK_SELECTED_OBJECTS; @ActionConfig(""Action.Objects.Lock.lockSelected""); @ActionAccelerator(""shortcut+shift+k""); public final org.controlsfx.control.action.Action LOCK_SELECTED_OBJECTS. UNLOCK_SELECTED_OBJECTS; @ActionConfig(""Action.Objects.Lock.unlockSelected""); @ActionAccelerator(""shortcut+alt+k""); public final org.controlsfx.control.action.Action UNLOCK_SELECTED_OBJECTS. TOGGLE_SELECTED_OBJECTS_LOCKED; @ActionConfig(""Action.Objects.Lock.toggleSelected""); @ActionAccelerator(""shortcut+k""); public final org.controlsfx.control.action.Action TOGGLE_SELECTED_OBJECTS_LOCKED. Constructor Details. LockActions; public LockActions(). ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/menus/ObjectsMenuActions.LockActions.html:1576,toggle,toggleSelected,1576,javadoc/docs/qupath/lib/gui/actions/menus/ObjectsMenuActions.LockActions.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/menus/ObjectsMenuActions.LockActions.html,1,['toggle'],['toggleSelected']
Deployability,". OpenCVModelObjectClassifier (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Class OpenCVModelObjectClassifier. java.lang.Object; qupath.lib.classifiers.object.AbstractObjectClassifier<BufferedImage>; qupath.opencv.dnn.OpenCVModelObjectClassifier. All Implemented Interfaces:; ObjectClassifier<BufferedImage>, UriResource. public class OpenCVModelObjectClassifier; extends AbstractObjectClassifier<BufferedImage>; implements UriResource; Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN.; ; Warning! This implementation may change in the future. Author:; Pete Bankhead. Field Summary. Fields inherited from interface qupath.lib.classifiers.object.ObjectClassifier; PROJECT_LOCATION. Constructor Summary; Constructors. Constructor; Description; OpenCVModelObjectClassifier(PathObjectFilter filter,; OpenCVDnn model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected boolean; tryToClassify(ClassificationModel model,; PathObject pathObj",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html:758,patch,patch-based,758,javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html,1,['patch'],['patch-based']
Deployability,". PatchClassifierParams (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.ml; Class PatchClassifierParams. java.lang.Object; qupath.opencv.ml.PatchClassifierParams. public class PatchClassifierParams; extends Object; Parameters required to build a classifier that operates on an image patch.; ; This is typically used to create a PixelClassifier.; It can also be used to create an ObjectClassifier that takes image patches as input ; (rather that features extracted from object ROIs or measurement lists). Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; PatchClassifierParams.Builder. Builder class to create PatchClassifierParams. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static PatchClassifierParams.Builder; builder(). Create a builder to generate new patch classifier params. static PatchClassifierParams.Builder; builder(PatchClassifierParams params). Create a builder to generate new patch classifier params, ; initialized with the values from an existing parameter object. static PixelClassifier; buildPixelClassifier(PatchClassifierParams params). Build a pixel classifier using these parameters. Padding; getHalo(). Get the 'halo' around the output. List<ColorTransforms.ColorTransform>; getInputChannels(). Get the channels to extract from the image as input to the model. PixelCalibration; getInputResolution(). Get the requested input resolution for the image. ImageServerMetadata.ChannelType; getOutputChannelType(). Get the requested output channel type. Map<Integer,PathClass>; getOutputClasses(). Get the classifications for the output. int; g",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html:569,patch,patch,569,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,2,['patch'],"['patch', 'patches']"
Deployability,". PatchClassifierParams.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.ml; Class PatchClassifierParams.Builder. java.lang.Object; qupath.opencv.ml.PatchClassifierParams.Builder. Enclosing class:; PatchClassifierParams. public static class PatchClassifierParams.Builder; extends Object; Builder class to create PatchClassifierParams. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; PatchClassifierParams; build(). Build the patch classifier parameters. PatchClassifierParams.Builder; halo(int padding). Define a halo that is symmetric in x and y. PatchClassifierParams.Builder; halo(Padding halo). Define a halo using a padding object. PatchClassifierParams.Builder; inputChannels(int... channels). Define the input channels using (zero-based) channel numbers. PatchClassifierParams.Builder; inputChannels(String... channels). Define the input channels using channel names. PatchClassifierParams.Builder; inputChannels(Collection<? extends ColorTransforms.ColorTransform> channels). Define the input channels from a collection of color transforms. PatchClassifierParams.Builder; inputResolution(PixelCalibration cal). Define the input resolution using a pixel calibration object. PatchClassifierParams.Builder; inputResolution(PixelCalibration cal,; double downsample). Define the input resolution using a pixel calibration and a scaling factor. PatchClassifierParams.Builder; outputChannelType(ImageServerMetadata.ChannelType channelType). Define the channel type for the output. PatchClassifierParams.Builder; outputClasses(Map<Integer,PathClass> outputClasses). Define the classifications for the output as a map. PatchClassifierParams.Builder; output",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html:771,patch,patch,771,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,1,['patch'],['patch']
Deployability,". PathObjectHierarchyEvent (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Class PathObjectHierarchyEvent. java.lang.Object; qupath.lib.objects.hierarchy.events.PathObjectHierarchyEvent. public class PathObjectHierarchyEvent; extends Object; An event class for passing on information about modifications to a PathObjectHierarchy. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; PathObjectHierarchyEvent.HierarchyEventType. Enum representing different ways in which the hierarchy may have been updated. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent; createObjectAddedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject,; PathObject pathObjectAdded). Create a hierarchy event indicated objects were added. static PathObjectHierarchyEvent; createObjectRemovedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject,; PathObject pathObjectRemoved). Create a hierarchy event indicating objects were removed. static PathObjectHierarchyEvent; createObjectsChangedEvent(Object source,; PathObjectHierarchy hierarchy,; PathObjectHierarchyEvent.HierarchyEventType type,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Create a hierarchy event indicating objects have changed in a way consistent with the specified event type. static PathObjectHierarchyEvent; createStructureChangeEvent(Object source,; PathObjectHierarchy hierarchy,; PathObject parentObject). Create a hierarchy event indicating that the hierarchy structure has been changed. List<PathObject>; getC",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html:869,update,updated,869,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.html,1,['update'],['updated']
Deployability,". PathObjectHierarchyEvent.HierarchyEventType (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.objects.hierarchy.events; Enum Class PathObjectHierarchyEvent.HierarchyEventType. java.lang.Object; java.lang.Enum<PathObjectHierarchyEvent.HierarchyEventType>; qupath.lib.objects.hierarchy.events.PathObjectHierarchyEvent.HierarchyEventType. All Implemented Interfaces:; Serializable, Comparable<PathObjectHierarchyEvent.HierarchyEventType>, Constable. Enclosing class:; PathObjectHierarchyEvent. public static enum PathObjectHierarchyEvent.HierarchyEventType; extends Enum<PathObjectHierarchyEvent.HierarchyEventType>; Enum representing different ways in which the hierarchy may have been updated. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; ADDED. An object has been added. CHANGE_CLASSIFICATION. A change was made to one or more object classifications. CHANGE_MEASUREMENTS. A change was made to one or more object measurements. CHANGE_OTHER. A change was made to one or more objects that is more complex than the other changes allow for. OTHER_STRUCTURE_CHANGE. A more complex structural change was made than simply either adding or removing objects. REMOVED. An object has been removed. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PathObjectHierarchyEvent.HierarchyEventType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathObjectHierarchyEvent.HierarchyEventType[]; values(). Returns an array containing the constants of this enum cl",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html:999,update,updated,999,javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/PathObjectHierarchyEvent.HierarchyEventType.html,1,['update'],['updated']
Deployability,". PathObjectHierarchyView (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.panes; Class PathObjectHierarchyView. java.lang.Object; qupath.lib.gui.panes.PathObjectHierarchyView. All Implemented Interfaces:; EventListener, ChangeListener<ImageData<BufferedImage>>, PathObjectHierarchyListener, PathObjectSelectionListener. public class PathObjectHierarchyView; extends Object; implements ChangeListener<ImageData<BufferedImage>>, PathObjectSelectionListener, PathObjectHierarchyListener; Component for showing a tree-based view of the object hierarchy. Author:; Pete Bankhead. Property Summary; Properties. Type; Property; Description; BooleanProperty; disableUpdates. Property that may be used to prevent updates on every hierarchy or selection change event. Constructor Summary; Constructors. Constructor; Description; PathObjectHierarchyView(QuPathGUI qupath). Constructor. PathObjectHierarchyView(QuPathGUI qupath,; ObservableValue<ImageData<BufferedImage>> imageDataProperty). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew);  ; BooleanProperty; disableUpdatesProperty(). Property that may be used to prevent updates on every hierarchy or selection change event. Pane; getPane(). Get the pane for display. void; hierarchyChanged(PathObjectHierarchyEvent event). Notify listeners of a change in the hierarchy or its objects. void; selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected). Fired when the selected objects have ch",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html:990,update,updates,990,javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html,1,['update'],['updates']
Deployability,". PixelClassifierPane (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.process.gui.commands.ml; Class PixelClassifierPane. java.lang.Object; qupath.process.gui.commands.ml.PixelClassifierPane. public class PixelClassifierPane; extends Object; Main user interface for interactively training a PixelClassifier. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; PixelClassifierPane(QuPathGUI qupath). Constructor. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static boolean; installDefaultFeatureClassificationBuilder(qupath.process.gui.commands.ml.ImageDataTransformerBuilder builder). Add to the list of default feature calculator builders that will be available when ; this pane is opened. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PixelClassifierPane; public PixelClassifierPane(QuPathGUI qupath); Constructor. Parameters:; qupath - the current QuPathGUI that will be used for interactive training. Method Details. installDefaultFeatureClassificationBuilder; public static boolean installDefaultFeatureClassificationBuilder(qupath.process.gui.commands.ml.ImageDataTransformerBuilder builder); Add to the list of default feature calculator builders that will be available when ; this pane is opened.; ; This provides a mechanism to install additional feature calculators.; ; Note that the builder will only be added if it is not already present. Parameters:; builder - the builder to be installed; Returns:; true if the builder was added, false otherwise. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/process/gui/commands/ml/PixelClassifierPane.html:839,install,installDefaultFeatureClassificationBuilder,839,javadoc/docs/qupath/process/gui/commands/ml/PixelClassifierPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/process/gui/commands/ml/PixelClassifierPane.html,5,['install'],"['install', 'installDefaultFeatureClassificationBuilder', 'installed']"
Deployability,". PredictionFunction (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.dnn; Interface PredictionFunction<T>. Type Parameters:; T - . public interface PredictionFunction<T>; Prediction function, typically used with a deep learning framework.; ; The primary intention of this interface is to provide a means to integrate machine learning libraries ; into existing QuPath pipelines that use OpenCV for processing (e.g. object or pixel classification).; ; Note that, where possible, implementations should support JSON serialization via Gson if they are ; intended to support serialization. Author:; Pete Bankhead; See Also:. BlobFunction; DnnModel; GsonTools. Field Summary; Fields. Modifier and Type; Field; Description; static final String; DEFAULT_INPUT_NAME. Default name to use for single input. static final String; DEFAULT_OUTPUT_NAME. Default name to use for single output. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; Map<String,DnnShape>; getInputs(). Get the required inputs. Map<String,DnnShape>; getOutputs(DnnShape... inputShapes). Get the output names mapped to the output shapes. default Map<String,T>; predict(Map<String,T> input). Call a function that takes one or more inputs to produce zero or more outputs. T; predict(T input). Call a function that takes a single input and provides a single output. Field Details. DEFAULT_INPUT_NAME; static final String DEFAULT_INPUT_NAME; Default name to use for single input. See Also:. Constant Field Values. DEFAULT_OUTPUT_NAME; static final String DEFAULT_OUTPUT_NAME; Default name to use for single output. See Also:. Constant Field Values. Method Details. predict; default Map<String,T>",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/PredictionFunction.html:593,integrat,integrate,593,javadoc/docs/qupath/opencv/dnn/PredictionFunction.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/PredictionFunction.html,2,"['integrat', 'pipeline']","['integrate', 'pipelines']"
Deployability,". QuPathResources (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.localization; Class QuPathResources. java.lang.Object; qupath.lib.gui.localization.QuPathResources. public class QuPathResources; extends Object; Load strings from the default resource bundle. Since:; v0.5.0; Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; QuPathResources();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static qupath.fx.localization.LocalizedResourceManager; getLocalizedResourceManager(). Get a localized resource manager, which can be used to manage localized strings,; and update these whenever the locale preferences are updated. static String; getString(String key). Get a string from the main ResourceBundle used for the QuPath user interface. static String; getString(String bundle,; String key);  ; static boolean; hasBundleForLocale(String bundle,; Locale locale);  ; static boolean; hasDefaultBundleForLocale(Locale locale);  ; static boolean; hasString(String key);  ; static boolean; hasString(String bundleName,; String key);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. QuPathResources; public QuPathResources(). Method Details. getLocalizedResourceManager; public static qupath.fx.localization.LocalizedResourceManager getLocalizedResourceManager(); Get a localized resource manager, which can be used to manage localized strings,; and update these whenever the locale preferences are updated. Returns:. getString; public static String getString(String key); Get a string from the main ResourceBundle us",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/localization/QuPathResources.html:941,update,update,941,javadoc/docs/qupath/lib/gui/localization/QuPathResources.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/localization/QuPathResources.html,2,['update'],"['update', 'updated']"
Deployability,". Returns:. getPixelCalibration; default PixelCalibration getPixelCalibration(); Get the PixelCalibration object from the current metadata. Returns:. getCachedTile; T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! This method should be used very cautiously, as it is permitted to return the tile stored internally ; in the cache for performance. This must not be modified by any code requesting the tile. Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. readBufferedImage; @Deprecated; default T readBufferedImage(RegionRequest request); throws IOException; Deprecated.; since v0.4.0. Implementations of ImageServer should override readRegion(RegionRequest) instead.; This method will be removed in a future release; it exists now only to maintain compatibility with QuPath ; extensions that have not yet been updated to use the newer method. Legacy method to request pixels for a RegionRequest, now replaced by readRegion(RegionRequest).; This method is deprecated; if the generic parameter <T> represented ; anything other than a BufferedImage then its name became misleading. Parameters:; request - the region for which pixels are requested; Returns:; pixels for the region being requested; Throws:; IOException. readRegion; default T readRegion(RegionRequest request); throws IOException; Read a 2D(+C) image region for a specified RegionRequest.; Coordinates and bounding box dimensions from the request are in pixel units, ; at the full image resolution (i.e. when downsample = 1).; ; All channels are always returned.; ; No specific checking is guaranteed to ensure that the request is valid, e.g. if it extends beyond the image; boundary then it is likely (but not certain) that the returned image will be cropped accordingly - ; but some impleme",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:7979,release,release,7979,javadoc/docs/qupath/lib/images/servers/ImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html,2,"['release', 'update']","['release', 'updated']"
Deployability,. ScriptParameters.Builder (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting; Class ScriptParameters.Builder. java.lang.Object; qupath.lib.scripting.ScriptParameters.Builder. Enclosing class:; ScriptParameters. public static class ScriptParameters.Builder; extends Object; Builder class for ScriptParameters. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ScriptParameters; build(). Build the ScriptParameters with the current options. ScriptParameters.Builder; doUpdateHierarchy(boolean requestUpdate). Optionally request a hierarchy update event after running a script; (default is true for scripts that operate on image data). ScriptParameters.Builder; setArgs(String[] args). Set optional string args to pass to the script. ScriptParameters.Builder; setBatchIndex(int ind). Set the current image index for batch processing (default is 0). ScriptParameters.Builder; setBatchSaveResult(boolean doSave). Specify whether the script that is running should save results or not. ScriptParameters.Builder; setBatchSize(int batch). Set the batch size for batch processing (default is 1). ScriptParameters.Builder; setDefaultImports(Collection<Class<?>> imports);  ; ScriptParameters.Builder; setDefaultStaticImports(Collection<Class<?>> imports);  ; ScriptParameters.Builder; setErrorWriter(Writer writer). Set the main error writer. ScriptParameters.Builder; setFile(File file);  ; ScriptParameters.Builder; setImageData(ImageData<?> imageData). Set the current image data for the script. ScriptParameters.Builder; setProject(Project<?> project). Set the current project for the script. ScriptParameters.Builder; setScript(String script);  ; ScriptParameters.B,MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/ScriptParameters.Builder.html:880,update,update,880,javadoc/docs/qupath/lib/scripting/ScriptParameters.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/ScriptParameters.Builder.html,1,['update'],['update']
Deployability,". SimpleImageViewer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.panes; Class SimpleImageViewer. java.lang.Object; qupath.lib.gui.panes.SimpleImageViewer. public class SimpleImageViewer; extends Object; A simple viewer for a single image, with options to save or copy.; ; This is primarily intended for RGB images, but can also be used for other types after; applying automatic brightness/contrast settings.; . This stores (and can be updated with) a BufferedImage or a JavaFX Image,; because both serve different purposes can be useful in different contexts.; . Since:; v0.5.0. Property Summary; Properties. Type; Property; Description; ReadOnlyObjectProperty<BufferedImage>; bufferedImage. Get a read-only property representing the buffered image. BooleanProperty; expandToWindow. Get the property indicating whether the image should grow to fill the window (while maintaining its; aspect ratio). ReadOnlyObjectProperty<String>; imageName. Get a read-only property indicating the name of the image. ReadOnlyObjectProperty<Image>; image. Get a read-only property representing the JavaFX image. StringProperty; placeholderText. Get the placeholder text to show if no image is available. DoubleProperty; saturationPercent. Get the percentage of any non-8-bit image that should be saturated when applying auto contrast settings. Constructor Summary; Constructors. Constructor; Description; SimpleImageViewer(). Create a new simple image viewer. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ReadOnlyObjectProperty<BufferedImage>; bufferedImageProperty(). Get a read-only property representing the buffered image. BooleanProperty; expandToWindowProperty(). Ge",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html:725,update,updated,725,javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html,1,['update'],['updated']
Deployability,. TMACommands (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.commands; Class TMACommands. java.lang.Object; qupath.lib.gui.commands.TMACommands. public class TMACommands; extends Object; Helper class implementing simple 'single-method' commands related to tissue microarrays for easy inclusion in the GUI. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMACommands();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; installDragAndDropHandler(QuPathGUI qupath). Command to install a drag and drop file handler for exported TMA data. static boolean; promptToAddColumnAfterSelected(ImageData<?> imageData). Prompt to add a column to a TMA grid after the column containing the currently-selected object. static boolean; promptToAddColumnBeforeSelected(ImageData<?> imageData). Prompt to add a column to a TMA grid before the column containing the currently-selected object. static void; promptToAddNoteToSelectedCores(ImageData<?> imageData). Prompt to type a node to associate with the selected TMA cores. static boolean; promptToAddRowAfterSelected(ImageData<?> imageData). Prompt to add a row to a TMA grid after the row containing the currently-selected object. static boolean; promptToAddRowBeforeSelected(ImageData<?> imageData). Prompt to add a row to a TMA grid before the row containing the currently-selected object. static boolean; promptToCreateTMAGrid(ImageData<?> imageData). Prompt the user to manually create a new TMA grid. static boolean; promptToDeleteTMAGridColumn(ImageData<?> imageData). Prompt to delete a column from a TMA grid. static boolean; promptToDeleteTMAGridRow(ImageData<?> image,MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/TMACommands.html:809,install,installDragAndDropHandler,809,javadoc/docs/qupath/lib/gui/commands/TMACommands.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/TMACommands.html,2,['install'],"['install', 'installDragAndDropHandler']"
Deployability,". TMASummaryViewer (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.tma; Class TMASummaryViewer. java.lang.Object; qupath.lib.gui.tma.TMASummaryViewer. @Deprecated; public class TMASummaryViewer; extends Object; Deprecated.; since v0.4.0. Standalone viewer for looking at TMA summary results.; ; Important! This was used a lot when QuPath was released back in 2016,; but has not been properly maintained ever since.; It is now marked as deprecated, and may be removed or replaced in the future. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TMASummaryViewer(Stage stage). Deprecated.; Constructor. Method Summary. All MethodsInstance MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; Stage; getStage(). Deprecated.; Get the stage for display. void; setInputFile(File file). Deprecated.; Set the input file for the summary viewer. void; setTMAEntriesFromImageData(ImageData<BufferedImage> imageData). Deprecated.; Set the TMA entries from the TMACoreObjects of a specific ImageData. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TMASummaryViewer; public TMASummaryViewer(Stage stage); Deprecated.; Constructor. Parameters:; stage - stage that should be used for this TMA summary viewer. If null, a new stage will be created. Method Details. getStage; public Stage getStage(); Deprecated.; Get the stage for display. Returns:. setTMAEntriesFromImageData; public void setTMAEntriesFromImageData(ImageData<BufferedImage> imageData); Deprecated.; Set the TMA entries from the TMACoreObjects of a specific ImageData. Parameters:; image",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tma/TMASummaryViewer.html:629,release,released,629,javadoc/docs/qupath/lib/gui/tma/TMASummaryViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tma/TMASummaryViewer.html,1,['release'],['released']
Deployability,". UpdateChecker (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.extensions; Class UpdateChecker. java.lang.Object; qupath.lib.gui.extensions.UpdateChecker. public class UpdateChecker; extends Object; Helper class to query for updates using GitHub's web API. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; UpdateChecker.ReleaseVersion. Class to represent a release version. Constructor Summary; Constructors. Constructor; Description; UpdateChecker();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static UpdateChecker.ReleaseVersion; checkForUpdate(). Query the most recent QuPath release on GitHub. static UpdateChecker.ReleaseVersion; checkForUpdate(GitHubProject.GitHubRepo repository). Query the latest release from a GitHub repo. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. UpdateChecker; public UpdateChecker(). Method Details. checkForUpdate; public static UpdateChecker.ReleaseVersion checkForUpdate(); throws URISyntaxException,; IOException,; InterruptedException; Query the most recent QuPath release on GitHub. Returns:; the latest release version, or null if this could not be determined; Throws:; URISyntaxException; IOException; InterruptedException. checkForUpdate; public static UpdateChecker.ReleaseVersion checkForUpdate(GitHubProject.GitHubRepo repository); throws URISyntaxException,; IOException,; InterruptedException; Query the latest release from a GitHub repo. Parameters:; repository - ; Returns:; Throws:; URISyntaxException; IOException; InterruptedException. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/extensions/UpdateChecker.html:513,update,updates,513,javadoc/docs/qupath/lib/gui/extensions/UpdateChecker.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/extensions/UpdateChecker.html,7,"['release', 'update']","['release', 'updates']"
Deployability,". UpdateChecker.ReleaseVersion (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.extensions; Class UpdateChecker.ReleaseVersion. java.lang.Object; qupath.lib.gui.extensions.UpdateChecker.ReleaseVersion. Enclosing class:; UpdateChecker. public static class UpdateChecker.ReleaseVersion; extends Object; Class to represent a release version. Used to provide an update link, if available. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static UpdateChecker.ReleaseVersion; create(String name,; Version version,; URI uri). Create a new UpdateChecker.ReleaseVersion. String; getName(). Get the release name (any text). URI; getUri(). Get a URI to download the release (may be null if no URI is available). Version; getVersion(). Get the semantic version. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. getName; public String getName(); Get the release name (any text). Returns:. getVersion; public Version getVersion(); Get the semantic version. Returns:. getUri; public URI getUri(); Get a URI to download the release (may be null if no URI is available). Returns:. create; public static UpdateChecker.ReleaseVersion create(String name,; Version version,; URI uri); Create a new UpdateChecker.ReleaseVersion. Parameters:; name - a user-friendly name for the project; version - semantic version; uri - URI for downloading the release (may be null); Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/extensions/UpdateChecker.ReleaseVersion.html:608,release,release,608,javadoc/docs/qupath/lib/gui/extensions/UpdateChecker.ReleaseVersion.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/extensions/UpdateChecker.ReleaseVersion.html,7,"['release', 'update']","['release', 'update']"
Deployability,". UpdateUrisCommand (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.commands; Class UpdateUrisCommand<T extends UriResource>. java.lang.Object; qupath.lib.gui.commands.UpdateUrisCommand<T>. Type Parameters:; T - . public class UpdateUrisCommand<T extends UriResource>; extends Object; Fix broken URIs by using relative paths or prompting the user to select files.; This is intended to handle cases where files or projects have changed location, so that links need to be updated. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T extends UriResource>int; promptToUpdateUris(Collection<T> items,; URI basePrevious,; URI baseCurrent,; boolean onlyPromptIfMissing). Show dialog prompting the user to update URIs for missing files. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. promptToUpdateUris; public static <T extends UriResource> int promptToUpdateUris(Collection<T> items,; URI basePrevious,; URI baseCurrent,; boolean onlyPromptIfMissing); throws IOException; Show dialog prompting the user to update URIs for missing files.; Optionally provide previous and current base URIs. If not null, these will be used to relativize paths when searching for potential replacements URIs.; Usually, these correspond to the current and previous paths for a project. Type Parameters:; T - ; Parameters:; items - the items containing URIs to check; basePrevious - optional previous base path; baseCurrent - optional current base path; onlyPromptIfMissing - only show a dialog if any URIs correspond to missing files; Returns:; the num",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/UpdateUrisCommand.html:757,update,updated,757,javadoc/docs/qupath/lib/gui/commands/UpdateUrisCommand.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/UpdateUrisCommand.html,1,['update'],['updated']
Deployability,". Urls (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui; Class Urls. java.lang.Object; qupath.lib.gui.Urls. public final class Urls; extends Object; Class to return core QuPath URLs centrally.; ; One benefit of this is that it gives one location to update to point to versioned documentation. Since:; v0.5.0; Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; Urls();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static final String; getCitationUrl(). Get a URL pointing to a page that explains how to cite this version of QuPath in a publication. static final String; getDocsUrl(). Get the base URL for the QuPath documentation (independent of version). static final String; getGitHubIssuesUrl(). Get a URL pointing to the main GitHub issues page. static final String; getGitHubRepoUrl(). Get a URL pointing to the main QuPath GitHub repo. static final String; getInstallationUrl(). Get a URL pointing to a page that explains how to install this version of QuPath. static final String; getUserForumUrl(). Get a URL pointing to the main QuPath user forum. static final String; getVersionedDocsUrl(). Get the base URL for the QuPath documentation, specifically for this software version. static final String; getVersionedDocsUrl(String relative). Get the base URL for the QuPath documentation for this software version, including ; a relative component to link to a specific page (without leading slash). static final String; getYouTubeUrl(). Get a URL pointing to the QuPath YouTube channel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait,",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/Urls.html:535,update,update,535,javadoc/docs/qupath/lib/gui/Urls.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/Urls.html,1,['update'],['update']
Deployability,". Version (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.common; Class Version. java.lang.Object; qupath.lib.common.Version. All Implemented Interfaces:; Comparable<Version>. public class Version; extends Object; implements Comparable<Version>; Helper class for working with semantic versioning.; ; This should be in the form major.minor.patch.; An optional suffix is also permitted to indicate a pre-release, alpha, beta or milestone version,; in the form major.minor.patch-suffix, where the suffix may contain any alphanumeric characters or periods.; ; Implementation note: No checking is currently performed to ensure any suffix conforms to semantic ; versioning standards - however this behavior may change. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final Comparator<Version>; COMPARATOR_FULL. Compare full version, including any suffixes. static final Comparator<Version>; COMPARATOR_MAJOR. Compare major versions only. static final Comparator<Version>; COMPARATOR_MAJOR_MINOR. Compare major then minor versions. static final Comparator<Version>; COMPARATOR_MAJOR_MINOR_PATCH. Compare major then minor then patch versions (ignoring suffixes). static final Version; UNKNOWN. Constant representing any unknown version. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compareTo(Version o);  ; boolean; equals(Object obj);  ; int; getMajor(). Get the major version number (X.0.0). int; getMinor(). Get the minor version number (0.X.0). int; getPatch(). Get the patch version number (0.0.X). String; getSuffix(). Get the (optional) suffix, which may be appended at the end of the version ; numb",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html:622,patch,patch,622,javadoc/docs/qupath/lib/common/Version.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html,3,"['patch', 'release']","['patch', 'patch-suffix', 'release']"
Deployability,". WebViews (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.tools; Class WebViews. java.lang.Object; qupath.lib.gui.tools.WebViews. public class WebViews; extends Object; Helper class for creating a WebView in a standardized way. Since:; v0.4.0; Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WebViews();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; bindUserStylesheetToStyle(WebEngine engine). Bind the WebEngine.userStyleSheetLocationProperty() to a stylesheet determined based on QuPath's ; current style (e.g. static WebView; create(boolean bindStylesheetToStyle). Create a new WebView. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. WebViews; public WebViews(). Method Details. create; public static WebView create(boolean bindStylesheetToStyle); Create a new WebView. Parameters:; bindStylesheetToStyle - if true, update the user stylesheet location for the WebEngine automatically based on; the current QuPath style (e.g. dark mode); Returns:; Since:; v0.4.0; See Also:. bindUserStylesheetToStyle(WebEngine). bindUserStylesheetToStyle; public static void bindUserStylesheetToStyle(WebEngine engine); Bind the WebEngine.userStyleSheetLocationProperty() to a stylesheet determined based on QuPath's ; current style (e.g. light or dark mode, serif or sans-serif fonts). Parameters:; engine - . ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tools/WebViews.html:1327,update,update,1327,javadoc/docs/qupath/lib/gui/tools/WebViews.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tools/WebViews.html,1,['update'],['update']
Deployability,". WorkflowListener (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Interface WorkflowListener. All Known Implementing Classes:; ImageData, WorkflowCommandLogView. public interface WorkflowListener; Interface for listening to changes in Workflows, e.g. adding/removing steps. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; workflowUpdated(Workflow workflow). Called whenever a Workflow has been updated in some way, such as a new step added. Method Details. workflowUpdated; void workflowUpdated(Workflow workflow); Called whenever a Workflow has been updated in some way, such as a new step added. Parameters:; workflow - . ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html:779,update,updated,779,javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/WorkflowListener.html,2,['update'],['updated']
Deployability,". boolean; addPathObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate). Deprecated.; since v0.4.0; use addObjectBelowParent(PathObject, PathObject, boolean). void; addPathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). boolean; addPathObjects(Collection<? extends PathObject> pathObjects). Deprecated.; since v0.4.0; use addObjects(Collection) instead. boolean; addPathObjectWithoutUpdate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean i",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:3608,update,update,3608,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,1,['update'],['update']
Deployability,". expandToWindowProperty; public BooleanProperty expandToWindowProperty(); Get the property indicating whether the image should grow to fill the window (while maintaining its; aspect ratio).; If false, the image will grow no larger than its preferred width and height. Returns:; See Also:. getExpandToWindow(); setExpandToWindow(boolean). getExpandToWindow; public boolean getExpandToWindow(); Query whether the image is allowed to expand beyond its preferred width and height to fill the window.; If false, the image will grow no larger than its preferred width and height. Returns:. setExpandToWindow; public void setExpandToWindow(boolean limit); Control whether the image should be allowed to expand beyond its preferred width and height to fill the window.; If false, the image will grow no larger than its preferred width and height. Parameters:; limit - . getStage; public Stage getStage(); Get the stage used to display the image. Returns:. updateImage; public void updateImage(String name,; Image image); Update the image using a JavaFX image. Parameters:; name - ; image - . resetImage; public void resetImage(); Remove the image. updateImage; public void updateImage(String name,; BufferedImage img); Update the image using a buffered image. Parameters:; name - ; img - . imageNameProperty; public ReadOnlyObjectProperty<String> imageNameProperty(); Get a read-only property indicating the name of the image. Returns:. getName; public String getName(); Get the name of the image. Returns:. imageProperty; public ReadOnlyObjectProperty<Image> imageProperty(); Get a read-only property representing the JavaFX image. Returns:; See Also:. getImage(). getImage; public Image getImage(); Get the JavaFX image. Returns:. bufferedImageProperty; public ReadOnlyObjectProperty<BufferedImage> bufferedImageProperty(); Get a read-only property representing the buffered image. Returns:; See Also:. getBufferedImage(). getBufferedImage; public BufferedImage getBufferedImage(); Get the buffered image.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html:7451,update,updateImage,7451,javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html,2,['update'],['updateImage']
Deployability,". getStage; public Stage getStage(); Get the main QuPath stage. Returns:. refreshTitle; public void refreshTitle(); Refresh the title bar in the main QuPath window. getDisplayedImageName; public String getDisplayedImageName(ImageData<BufferedImage> imageData); Get the image name to display for a specified image.; This can be used to determine a name to display in the title bar, for example. Parameters:; imageData - ; Returns:. getBuildString; public static String getBuildString(); Get a String representing the QuPath version & build time. Returns:. getVersion; public static Version getVersion(); Get the current QuPath version. Returns:. imageDataProperty; public ReadOnlyObjectProperty<ImageData<BufferedImage>> imageDataProperty(); Read-only property containing the image open within the currently-active viewer.; To change the open image data, you should do so directly within the viewer. Returns:; See Also:. getImageData(). setProject; public void setProject(Project<BufferedImage> project); Set the active project, triggering any necessary GUI updates. Parameters:; project - . refreshProject; public void refreshProject(); Refresh the project, updating the display if required.; This can be called whenever the project has changed (e.g. by adding or removing items). projectProperty; public ReadOnlyObjectProperty<Project<BufferedImage>> projectProperty(); Read-only property representing the currently-open project. Returns:; See Also:. getProject(); setProject(Project). getProject; public Project<BufferedImage> getProject(); Get the value of projectProperty(). Returns:. getImageData; public ImageData<BufferedImage> getImageData(); Get the value of imageDataProperty(). Returns:. viewerProperty; public ReadOnlyObjectProperty<QuPathViewer> viewerProperty(); Property representing the viewer currently active. Returns:; See Also:. getViewer(). closeViewer; public boolean closeViewer(QuPathViewer viewer); Close the image within a viewer, prompting to save changes if necessary. Par",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:30720,update,updates,30720,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['update'],['updates']
Deployability,". int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createIn",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:4084,update,updateT,4084,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,1,['update'],['updateT']
Deployability,". protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is u",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:3089,patch,patch,3089,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,2,['patch'],['patch']
Deployability,. qupath.imagej.gui (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.imagej.gui. package qupath.imagej.gui. User interface commands and extensions linking ImageJ and QuPath. Classes. Class; Description; IJExtension. QuPath extension & associated static helper methods used to support integration of ImageJ with QuPath. IJExtension.IJExtensionCommands. Commands to install with the ImageJ extension. ImageJMacroRunner. QuPath plugin for running ImageJ macros & returning detected regions. ,MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-summary.html:536,integrat,integration,536,javadoc/docs/qupath/imagej/gui/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/package-summary.html,2,"['install', 'integrat']","['install', 'integration']"
Deployability,". qupath.lib.gui.actions.annotations (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.gui.actions.annotations. package qupath.lib.gui.actions.annotations. Annotations that can be used to configure actions. Related Packages. Package; Description; qupath.lib.gui.actions. Classes to manage Actions. qupath.lib.gui.actions.menus. Classes to store actions that correspond to QuPath's main menus. Annotation Interfaces. Class; Description; ActionAccelerator. Annotation used to specify a preferred accelerator for an an action. ActionConfig. Annotation indicating the a key in the external resources file containing ; the menu, text and (optional) description. ActionIcon. Default icon for an action. ActionMenu. Annotation indicating the menu path where an action should be installed. ActionMethod. Annotation indicating that a method should be converted to an Action if possible. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/annotations/package-summary.html:1026,install,installed,1026,javadoc/docs/qupath/lib/gui/actions/annotations/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/annotations/package-summary.html,1,['install'],['installed']
Deployability,. qupath.lib.gui.actions.menus (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.gui.actions.menus. package qupath.lib.gui.actions.menus. Classes to store actions that correspond to QuPath's main menus.; ; Representing the menus in this way is intended to make it easier to find core functionality. Related Packages. Package; Description; qupath.lib.gui.actions. Classes to manage Actions. qupath.lib.gui.actions.annotations. Annotations that can be used to configure actions. All Classes and InterfacesInterfacesClasses. Class; Description; AnalyzeMenuActions;  ; AutomateMenuActions;  ; ClassifyMenuActions;  ; EditMenuActions;  ; ExtensionsMenuActions;  ; FileMenuActions;  ; HelpMenuActions;  ; MeasureMenuActions;  ; MenuActions. Common interface to define the contents of a menu in terms of actions. Menus. Generate actions for installation in QuPath's main menubar. ObjectsMenuActions;  ; TMAMenuActions;  ; ViewMenuActions;  . ,MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/menus/package-summary.html:1089,install,installation,1089,javadoc/docs/qupath/lib/gui/actions/menus/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/menus/package-summary.html,1,['install'],['installation']
Deployability,. qupath.lib.gui.extensions (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.gui.extensions. package qupath.lib.gui.extensions. Interface to define QuPath extensions. Related Packages. Package; Description; qupath.lib.gui. The main QuPath user interface. All Classes and InterfacesInterfacesClasses. Class; Description; GitHubProject. Helper class to represent a project hosted on GitHub. GitHubProject.GitHubRepo. Helper class to represent a GitHub repository. QuPathExtension. Simple interface for QuPath extensions. Subcommand. A subcommand for the command line interface. UpdateChecker. Helper class to query for updates using GitHub's web API. UpdateChecker.ReleaseVersion. Class to represent a release version. ,MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/extensions/package-summary.html:873,update,updates,873,javadoc/docs/qupath/lib/gui/extensions/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/extensions/package-summary.html,2,"['release', 'update']","['release', 'updates']"
Deployability,". qupath.lib.objects.hierarchy.events (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.objects.hierarchy.events. package qupath.lib.objects.hierarchy.events. Events triggered when the hierarchy changes, such as objects being added, removed or reclassified. Related Packages. Package; Description; qupath.lib.objects.hierarchy. Classes to represent the object hierarchy. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; PathObjectHierarchyEvent. An event class for passing on information about modifications to a PathObjectHierarchy. PathObjectHierarchyEvent.HierarchyEventType. Enum representing different ways in which the hierarchy may have been updated. PathObjectHierarchyListener. A listener for modifications to a PathObjectHierarchy (i.e. PathObjectSelectionListener. A listener to selection changes within a PathObjectSelectionModel. PathObjectSelectionModel. Model for handling selection of single and multiple PathObjects. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/package-summary.html:932,update,updated,932,javadoc/docs/qupath/lib/objects/hierarchy/events/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/events/package-summary.html,1,['update'],['updated']
Deployability,". qupath.opencv.dnn (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.opencv.dnn. package qupath.opencv.dnn. QuPath classes to use OpenCV's DNN module. Related Packages. Package; Description; qupath.opencv. Detection plugins using OpenCV. qupath.opencv.features. Classes for feature calculation using OpenCV. qupath.opencv.io. Support for serializing and deserializing OpenCV objects. qupath.opencv.ml. QuPath classes to apply machine learning to pixels and objects using OpenCV. qupath.opencv.ops. Image operations, implemented with OpenCV. qupath.opencv.tools. Additional processing methods for use with OpenCV Mats. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDnnModel<T>. Wrapper for a deep learning model in a pipeline using OpenCV. BlobFunction<T>. Convert OpenCV Mats into blobs (tensors) for use with a deep learning framework. DnnModel. General interface for implementing a deep learning model in a pipeline using OpenCV. DnnModelBuilder. Builder to create a DnnModel from DnnModelParams. DnnModelParams. Parameters to build a DnnModel. DnnModelParams.Builder. Builder for DnnModelParams. DnnModels. Helper class for building new DnnModels. DnnObjectClassifier. Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN. DnnShape. Helper class to represent input and output shapes associated with PredictionFunction. DnnTools. Tools for working with OpenCV's DNN module. DnnTools.DNNLayer. Helper class to summarize a DNN layer. OpenCVDnn. Wrapper for an OpenCV Net, including essential metadata about how it should be used. OpenCVDnn.Builder. Helper class to build an OpenCVDnn. OpenCVDnn.ModelType. Enum representing different classes of Model supported by OpenCV. Ope",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/package-summary.html:1007,pipeline,pipeline,1007,javadoc/docs/qupath/opencv/dnn/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/package-summary.html,1,['pipeline'],['pipeline']
Deployability,. qupathj (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupathj. package qupathj. ImageJ plugins to install within QuPath's embedded ImageJ instance to enable exchanging ROIs and objects. Classes. Class; Description; QuPath_Send_Overlay_to_QuPath. ImageJ plugin for sending back all the ROIs on an ImageJ overlay to QuPath. QuPath_Send_ROI_to_QuPath. ImageJ plugin for sending back the active ROI from ImageJ to QuPath. ,MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupathj/package-summary.html:348,install,install,348,javadoc/docs/qupathj/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupathj/package-summary.html,1,['install'],['install']
Deployability,". showTMAMeasurementTable; public static void showTMAMeasurementTable(QuPathGUI qupath,; ImageData<BufferedImage> imageData); Show a measurement table for all TMA core objects. Parameters:; qupath - the QuPath instance; imageData - the image data for which to show measurements. promptToEstimateStainVectors; public static void promptToEstimateStainVectors(ImageData<BufferedImage> imageData); Prompt to estimate stain vectors for the specified image, using any current region of interest. Parameters:; imageData - the image data for which stain vectors should be estimated. promptToExportImageRegion; public static void promptToExportImageRegion(QuPathViewer viewer,; boolean renderedImage); Prompt to export the current image region selected in the viewer. Parameters:; viewer - the viewer containing the image to export; renderedImage - if true, export the rendered (RGB) image rather than original pixel values. showInstalledExtensions; public static void showInstalledExtensions(QuPathGUI qupath); Show a dialog displaying the extensions installed for a specified QuPath instance. Parameters:; qupath - the QuPath instance. showDetectionMeasurementManager; public static void showDetectionMeasurementManager(QuPathGUI qupath,; ImageData<?> imageData); Show a simple dialog for viewing (and optionally removing) detection measurements. Parameters:; qupath - ; imageData - . resetTMAMetadata; public static boolean resetTMAMetadata(ImageData<?> imageData); Reset TMA metadata, if available. Parameters:; imageData - ; Returns:; true if changes were made, false otherwise. createSingleStageAction; public static org.controlsfx.control.action.Action createSingleStageAction(Supplier<Stage> supplier); Create a command that generates a persistent single dialog on demand.; A reference to the dialog can be retained, so that if the command is called again ; either the original dialog is shown and/or brought to the front. Parameters:; supplier - supplier function to generate the dialog on demand; Re",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/Commands.html:14245,install,installed,14245,javadoc/docs/qupath/lib/gui/commands/Commands.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/Commands.html,1,['install'],['installed']
Deployability,". static Version; getVersion(). Get the current QuPath version. QuPathViewer; getViewer(). Get the currently active viewer. ViewerActions; getViewerActions(). Get the associations associated with QuPath image viewers. ViewerManager; getViewerManager(). Get the viewer manager, which gives access to all the viewers available within this QuPath instance. ReadOnlyObjectProperty<ImageData<BufferedImage>>; imageDataProperty(). Read-only property containing the image open within the currently-active viewer. void; installActions(Collection<? extends org.controlsfx.control.action.Action> actions). Install the specified actions. MenuItem; installCommand(String menuPath,; Runnable runnable). Install a new command in QuPath. MenuItem; installGroovyCommand(String menuPath,; File file). Install a Groovy script as a new command in QuPath. MenuItem; installGroovyCommand(String menuPath,; String script). Install a Groovy script as a new command in QuPath. MenuItem; installImageDataCommand(String menuPath,; Consumer<ImageData<BufferedImage>> command). Install a new command in QuPath that takes the current ImageData as input. boolean; isReadOnly(). Query whether QuPath is in 'read-only' mode. boolean; isStandalone(). Query whether this is a standalone QuPathGUI instance, as flagged during startup. static void; launchInstanceFromSwing(). Static method to launch QuPath from within a Swing/AWT application. Object; lookupAccelerator(String combo). Get the action or menu item associated with an accelerator. Object; lookupAccelerator(KeyCombination combo). Get the action or menu item associated with an key combination. org.controlsfx.control.action.Action; lookupActionByText(String text). Search for an action based upon its text (name) property. MenuItem; lookupMenuItem(String menuPath). Search for a menu item based upon its path. boolean; openImage(QuPathViewer viewer,; String pathNew);  ; boolean; openImage(QuPathViewer viewer,; String pathNew,; boolean prompt,; boolean includeURLs). Open ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:6795,install,installImageDataCommand,6795,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['install'],['installImageDataCommand']
Deployability,". updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static method in class qupath.lib.analysis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriResource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource. Update the specified URIs. updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.DnnObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1067331,update,updateT,1067331,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateT']
Deployability,". updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource. Update the specified URIs. updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.DnnObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVDnn;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVModelObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.opencv.ops.ImageOp. Default implementation makes no changes; classes should override this if necessary. UpdateUrisCommand<T> - Class in qupath.lib.gui.commands. Fix broken URIs by using relative paths or prompting the user to select files. updateZ(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated z value. updatingConstrainingObjects(QuPathViewer, double, double, Collection<PathObject>) - Method in class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler. New annotations can be constrained while they are being drawn, to avoid overlaps with existing annotations; or to ensure they are drawn within a parent annotation. updatingConstrainingObjects(QuPathViewer, double, double, Collection<PathObject>) - Meth",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1068316,update,updateURIs,1068316,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateURIs']
Deployability,".) - Method in interface qupath.opencv.dnn.BlobFunction. Convert one or more mats to a blob. toEncodedURI(String) - Static method in class qupath.lib.common.GeneralTools. Try to convert a path to an encoded URI. toFriendlyString() - Method in enum class qupath.lib.images.writers.ome.OMEPyramidWriter.CompressionType. Get a friendlier string representation. TOGGLE_SELECTED_OBJECTS_LOCKED - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.LockActions;  ; TOGGLE_SYNCHRONIZE_VIEWERS - Variable in class qupath.lib.gui.actions.ViewerActions;  ; toggleObjectsLocked(PathObjectHierarchy, Collection<? extends PathObject>) - Static method in class qupath.lib.objects.PathObjectTools. Toggle the 'locked' status of specified objects. toggleSelectedObjectsLocked(PathObjectHierarchy) - Static method in class qupath.lib.objects.PathObjectTools. Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. toggleShowHideChannel(ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Toggle the visibility of the specified channel. toJSON(boolean) - Method in class qupath.lib.display.ImageDisplay. Create a JSON representation of the main components of the current display. toJTS(AffineTransform) - Static method in class qupath.lib.awt.common.AffineTransforms. Create a Java Topology Suite affine transformation from a Java affine transform. TOOLBAR_ICON_SIZE - Static variable in class qupath.lib.gui.QuPathGUI. Icon size to use in the main QuPath toolbar. ToolManager - Class in qupath.lib.gui. Manage (drawing) tool selection in a QuPath UI. tooltip(ObservableValue<String>) - Method in class qupath.process.gui.commands.ui.SaveResourcePaneBuilder. Text to include in any tooltip. tooltips(boolean) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder. Request tooltips to be shown when the cursor hovers over the pie chart. TOP_CENTER - Enum constant in enum class qupath.lib.ob",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1034728,toggle,toggleShowHideChannel,1034728,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['toggle'],['toggleShowHideChannel']
Deployability,".0). int; getMinor(). Get the minor version number (0.X.0). int; getPatch(). Get the patch version number (0.0.X). String; getSuffix(). Get the (optional) suffix, which may be appended at the end of the version ; number to indicate a pre-release (0.0.0-X). int; hashCode();  ; boolean; hasSuffix(). Returns true if the version has a suffix, which typically indicates that it ; does not refer to a final stable version. static Version; parse(String versionString). Parse a Version object representing a semantic version number from a String. String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. COMPARATOR_MAJOR; public static final Comparator<Version> COMPARATOR_MAJOR; Compare major versions only. COMPARATOR_MAJOR_MINOR; public static final Comparator<Version> COMPARATOR_MAJOR_MINOR; Compare major then minor versions. COMPARATOR_MAJOR_MINOR_PATCH; public static final Comparator<Version> COMPARATOR_MAJOR_MINOR_PATCH; Compare major then minor then patch versions (ignoring suffixes). COMPARATOR_FULL; public static final Comparator<Version> COMPARATOR_FULL; Compare full version, including any suffixes. UNKNOWN; public static final Version UNKNOWN; Constant representing any unknown version. Method Details. getMajor; public int getMajor(); Get the major version number (X.0.0). Returns:. getMinor; public int getMinor(); Get the minor version number (0.X.0). Returns:. getPatch; public int getPatch(); Get the patch version number (0.0.X). Returns:. getSuffix; public String getSuffix(); Get the (optional) suffix, which may be appended at the end of the version ; number to indicate a pre-release (0.0.0-X). Returns:. hasSuffix; public boolean hasSuffix(); Returns true if the version has a suffix, which typically indicates that it ; does not refer to a final stable version. Returns:. toString; public String toString(). Overrides:; toString in class Object. parse; public static Version parse(S",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html:2832,patch,patch,2832,javadoc/docs/qupath/lib/common/Version.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html,1,['patch'],['patch']
Deployability,".Action; POINTS_TOOL;  ; final org.controlsfx.control.action.Action; POLYGON_TOOL;  ; final org.controlsfx.control.action.Action; POLYLINE_TOOL;  ; final org.controlsfx.control.action.Action; RECTANGLE_TOOL;  ; final org.controlsfx.control.action.Action; SELECTION_MODE;  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static ToolManager; create(). Create a new instance. PathTool; getPreviousSelectedTool(). Get the value of selectedToolProperty(). PathTool; getSelectedTool(). Get the value of selectedToolProperty(). org.controlsfx.control.action.Action; getSelectionModeAction(). Return the action associated with 'selection mode'. org.controlsfx.control.action.Action; getToolAction(PathTool tool). Get the action that corresponds to a specific PathTool, creating a new action if one does not already exist. ObservableList<PathTool>; getTools(). Get a read-only list of all available tools. boolean; installTool(PathTool tool,; KeyCodeCombination accelerator). Install a new tool for interacting with viewers. boolean; isToolSwitchingEnabled(). Returns true if the user is able to activate another PathTool, false otherwise. BooleanProperty; lockSelectedToolProperty(). Property to request that the selected tool be locked. ReadOnlyObjectProperty<PathTool>; previousSelectedToolProperty(). Property storing the previous tool that was selected. ReadOnlyObjectProperty<PathTool>; selectedToolProperty(). Property containing the currently-selected PathTool. void; setSelectedTool(PathTool tool). Programmatically select the active PathTool. void; setToolSwitchingEnabled(boolean enabled). Toggle whether the user is permitted to switch to a new active PathTool. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. selectedTool; public ReadOnlyObjectProperty<PathTool> selectedToolProperty; Property containing the currently",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ToolManager.html:2212,install,installTool,2212,javadoc/docs/qupath/lib/gui/ToolManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ToolManager.html,1,['install'],['installTool']
Deployability,".Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor for a PluginRunner that send progress to a log. Parameters:; nThreads - the number of threads to use when running tasks. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:1435,update,update,1435,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,2,['update'],['update']
Deployability,".QP. Trigger an update for the specified hierarchy. fireImageDataChanged(ImageData<BufferedImage>, ImageData<BufferedImage>) - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; fireObjectClassificationsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object classifications have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating objects have changed. fireObjectsChangedEvent(Object, Collection<? extends PathObject>, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating objects have changed, and may still be changing. fireVisibleRegionChangedEvent(Shape) - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; fireWorkflowUpdatedEvent() - Method in class qupath.lib.plugins.workflow.Workflow;  ; fitCorePolygonToGrid(Polygon, double, int, int) - Static method in class qupath.imagej.detect.dearray.TMADearrayer. Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid. fixUris(UriResource, Project<?>) - Static method in class qupath.lib.io.UriUpdater. Attempt to fix any broken paths by updating URIs based upon the current project. FLAT - Enum constant in enum class qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. Flat cap. flatness(double) - Method in class qupath.lib.roi.GeometryTools.GeometryConverter.Buil",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:310159,update,update,310159,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,".QuPathViewer. Request that a viewer decelerate any existing panning smoothly. requestedPixelSize(double) - Method in class qupath.lib.images.writers.TileExporter. Define resolution as a pixel size in calibrated units. requestFocus() - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; requestFocus() - Method in interface qupath.lib.gui.scripting.ScriptEditorControl. Request that the control is focused. requestFocus() - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; requestFollowCaret() - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; requestFollowCaret() - Method in interface qupath.lib.gui.scripting.ScriptEditorControl. Request that the X and Y scrolls are adjusted to ensure the caret is visible. requestFullUpdateCheck() - Method in class qupath.lib.gui.QuPathGUI. Request a manual update check in a background thread. requestHierarchyUpdate() - Method in class qupath.lib.plugins.AbstractPlugin. Optionally request a hierarchy update after the tasks have run. requestImageTile(ImageServer<BufferedImage>, RegionRequest, Map<RegionRequest, BufferedImage>, boolean) - Method in class qupath.lib.gui.images.stores.DefaultImageRegionStore. Request an image tile. requestLazyInitialize() - Method in class qupath.opencv.dnn.DnnModelParams. Request that any model is loaded lazily on demand. requestNewHandle(double, double) - Method in class qupath.lib.roi.RoiEditor. Request an updated ROI with a new handle inserted - useful e.g. requestParallelization() - Method in class qupath.lib.images.servers.bioformats.BioFormatsServerOptions. Returns true if multiple readers may be created for different threads, to enable parallel image reading. requestParentClipping(MouseEvent) - Method in class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler. Query whether parent clipping should be applied. requestParentClipping(MouseEvent) - Method in class qupath.lib.gui.viewer.tools.handlers.MoveToolEventHandler. Query whether pare",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:857703,update,update,857703,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,".display.settings. A simple class to store the main information needed by QuPath to display an image,; in a JSON-friendly form. ImageDisplaySettings() - Constructor for class qupath.lib.display.settings.ImageDisplaySettings;  ; imageExtension(String) - Method in class qupath.lib.images.writers.TileExporter. Specify a file extension for the original pixels, which determines the export file format. imageFunction(ImageSupplier<S>) - Method in class qupath.lib.experimental.pixels.Parameters.Builder. Function used ot lazily read the image. ImageInterpolation - Enum Class in qupath.lib.gui.viewer. Supported interpolation methods when displaying images. ImageJMacroRunner - Class in qupath.imagej.gui. QuPath plugin for running ImageJ macros & returning detected regions. ImageJMacroRunner(QuPathGUI) - Constructor for class qupath.imagej.gui.ImageJMacroRunner. Constructor. imageJPathProperty() - Static method in class qupath.imagej.gui.IJExtension. Property representing the path to a local ImageJ installation, or null if no path has been set. ImageJProcessor - Class in qupath.lib.experimental.pixels. Class to generate a PixelProcessor when using ImageJ for the primary image representation. ImageJProcessor() - Constructor for class qupath.lib.experimental.pixels.ImageJProcessor;  ; ImageJServer - Class in qupath.imagej.images.servers. ImageServer that uses ImageJ's image-reading capabilities. ImageJServer(URI, String...) - Constructor for class qupath.imagej.images.servers.ImageJServer. Constructor. ImageJServerBuilder - Class in qupath.imagej.images.servers. Builder for ImageServers that use ImageJ to read images. ImageJServerBuilder() - Constructor for class qupath.imagej.images.servers.ImageJServerBuilder;  ; imageList(List<ProjectImageEntry<BufferedImage>>) - Method in class qupath.lib.gui.tools.MeasurementExporter. Specify the list of images (ProjectImageEntry) to export. imageNameProperty() - Method in class qupath.lib.gui.panes.SimpleImageViewer. Get a read-only propert",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:590253,install,installation,590253,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installation']
Deployability,".experimental.pixels.PixelProcessor.Builder. Set the image supplier. ImageSupplier<S> - Interface in qupath.lib.experimental.pixels. A functional interface for supplying an image region for processing. imageToMat(BufferedImage) - Static method in class qupath.opencv.tools.OpenCVTools. Convert a BufferedImage to an OpenCV Mat. imageToMatBGR(BufferedImage, boolean) - Static method in class qupath.opencv.tools.OpenCVTools. Extract 8-bit unsigned pixels from a BufferedImage as a multichannel BGR(A) Mat. imageToMatRGB(BufferedImage, boolean) - Static method in class qupath.opencv.tools.OpenCVTools. Extract 8-bit unsigned pixels from a BufferedImage as a multichannel RGB(A) Mat. imageTypeSettingProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Specify how setting the image type should be handled for images when they are opened for the first time. imageUpdated - Variable in class qupath.lib.gui.viewer.QuPathViewer. Flag used to indicate that the image was updated for a repaint (otherwise it's assumed only the overlay may have changed). ImageWriter<T> - Interface in qupath.lib.images.writers. Interface for defining class that can write images. ImageWriterTools - Class in qupath.lib.images.writers. Static methods to access ImageWriter objects and write images. ImageWriterTools() - Constructor for class qupath.lib.images.writers.ImageWriterTools;  ; IMMUNE_CELLS - Enum constant in enum class qupath.lib.objects.classes.PathClassFactory.StandardPathClasses. Deprecated.; Immune cell classification. IMMUNE_CELLS - Static variable in class qupath.lib.objects.classes.PathClass.StandardPathClasses. Immune cell classification. ImmutableDimension - Class in qupath.lib.geom. An immutable alternative to Java's AWT Dimension. IMPORT_IMAGES - Variable in class qupath.lib.gui.actions.menus.FileMenuActions.ProjectActions;  ; IMPORT_IMAGES_LEGACY - Variable in class qupath.lib.gui.actions.menus.FileMenuActions.ProjectActions;  ; importDearrayedTMAData(File) - Static method i",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:597412,update,updated,597412,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability,".lib.gui.QuPathGUI. Install a new command in QuPath. installDefaultFeatureClassificationBuilder(ImageDataTransformerBuilder) - Static method in class qupath.process.gui.commands.ml.PixelClassifierPane. Add to the list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageData<BufferedImage>>) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath that takes the current ImageData as input. installInfoMessage(Action, ObjectExpression<InfoMessage>) - Static method in class qupath.lib.gui.actions.ActionTools. Install an optional info message to the action. installRangePrompt(Slider) - Static method in class qupath.lib.gui.tools.GuiTools. Install a mouse click listener to prompt the user to input min/max values for a slider. installStyles(Collec",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:608207,install,installExtension,608207,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installExtension']
Deployability,".objects.FindConvexHullDetectionsPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.RefineAnnotationsPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.ShapeFeaturesPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.SmoothFeaturesPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.SplitAnnotationsPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.opencv.features.DelaunayClusteringPlugin;  ; getParentOrProxy() - Method in class qupath.lib.experimental.pixels.Parameters. Get the parent, or a proxy parent if one has been specified. getPatch() - Method in class qupath.lib.common.Version. Get the patch version number (0.0.X). getPatchHeight() - Method in class qupath.opencv.ml.PatchClassifierParams. Get the height of a patch, in pixels. getPatchWidth() - Method in class qupath.opencv.ml.PatchClassifierParams. Get the width of a patch, in pixels. getPath() - Method in class qupath.lib.images.servers.AbstractImageServer. Default implementation lazily calls AbstractImageServer.createID() on demand. getPath() - Method in interface qupath.lib.images.servers.ImageServer. Get a String path that can uniquely identify this image. getPath() - Method in class qupath.lib.io.UriUpdater.SingleUriItem. Get the Path corresponding to the URI, or none if the URI does not refer to a file. getPath() - Method in interface qupath.lib.projects.Project. Get a path to this project, or null if this project is not on a local file system. getPath() - Method in class qupath.lib.regions.RegionRequest. Get the requested ImageServer path, used as an identifier. getPathClass() - Method in class qupath.lib.objects.PathObject. Get the classification of the object. getPathClass() - Method in class qupath.lib.objects.PathROIObject;  ;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:477393,patch,patch,477393,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,".objects.RefineAnnotationsPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.ShapeFeaturesPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.SmoothFeaturesPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.SplitAnnotationsPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.opencv.features.DelaunayClusteringPlugin;  ; getParentOrProxy() - Method in class qupath.lib.experimental.pixels.Parameters. Get the parent, or a proxy parent if one has been specified. getPatch() - Method in class qupath.lib.common.Version. Get the patch version number (0.0.X). getPatchHeight() - Method in class qupath.opencv.ml.PatchClassifierParams. Get the height of a patch, in pixels. getPatchWidth() - Method in class qupath.opencv.ml.PatchClassifierParams. Get the width of a patch, in pixels. getPath() - Method in class qupath.lib.images.servers.AbstractImageServer. Default implementation lazily calls AbstractImageServer.createID() on demand. getPath() - Method in interface qupath.lib.images.servers.ImageServer. Get a String path that can uniquely identify this image. getPath() - Method in class qupath.lib.io.UriUpdater.SingleUriItem. Get the Path corresponding to the URI, or none if the URI does not refer to a file. getPath() - Method in interface qupath.lib.projects.Project. Get a path to this project, or null if this project is not on a local file system. getPath() - Method in class qupath.lib.regions.RegionRequest. Get the requested ImageServer path, used as an identifier. getPathClass() - Method in class qupath.lib.objects.PathObject. Get the classification of the object. getPathClass() - Method in class qupath.lib.objects.PathROIObject;  ; getPathClass() - Method in class qupath.lib.objects.PathRootObject;  ; getPathClass(String) - Static method in ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:477504,patch,patch,477504,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,".opencv.ml.PatchClassifierParams.Builder. Define the postprocessing steps from an array. power(double) - Static method in class qupath.opencv.ops.ImageOps.Core. Raise every pixel element to a power. power(Mat, double) - Static method in class qupath.opencv.tools.GroovyCV. Raise elements of an array to a specified power. predict(Map<String, Mat>) - Method in class qupath.opencv.dnn.AbstractDnnModel. Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. predict(Map<String, Mat>) - Method in interface qupath.opencv.dnn.DnnModel. Prediction function that can take multiple inputs. predict(Map<String, T>) - Method in interface qupath.opencv.dnn.PredictionFunction. Call a function that takes one or more inputs to produce zero or more outputs. predict(Mat) - Method in class qupath.opencv.dnn.AbstractDnnModel. Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. predict(Mat) - Method in interface qupath.opencv.dnn.DnnModel. Prediction function that takes a single input and gives a single output. predict(Mat, Mat, Mat) - Method in class qupath.opencv.ml.OpenCVClassifiers.BoostClassifier. Default implementation calling. predict(Mat, Mat, Mat) - Method in class qupath.opencv.ml.OpenCVClassifiers.DTreesClassifier. Default implementation calling. predict(Mat, Mat, Mat) - Method in class qupath.opencv.ml.OpenCVClassifiers.EMClusterer. Default implementation calling. predict(Mat, Mat, Mat) - Method in class qupath.opencv.ml.OpenCVClassifiers.LogisticRegressionClassifier. Default implementation calling. predict(Mat, Mat, Mat) - Method in class qupath.opencv.ml.OpenCVClassifiers.NormalBayesClassifierCV. Default implementation calling. predict(Mat, Mat, Mat) - Method in class qupath.opencv.ml.OpenCVClassifiers.RTreesClassifier. Default implementation calling. predict(Mat, Mat, Mat) - Me",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:775599,patch,patch,775599,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,"/no/cancel dialog. DilateAnnotationPlugin<T>. Plugin to create new annotations by expanding the size of existing annotations. DilateAnnotationPlugin.LineCap. Line cap to use for annotation expansion. DirectServerChannelInfo. ChannelInfo intended for use with a single or multichannel image (possibly fluorescence); where the pixel's value is used to scale a single color according to a specified display range according to the following rules:; ; If the pixel's value is >= maxDisplay, the pure color is used.; If the pixel's value is <= minDisplay, the black is used.; Otherwise, a scaled version of the color is used; ; ; The end result is like having a lookup table (LUT) that stretches from black to the 'pure' color specified,; but without actually generating the LUT. DisplaySettingUtils. Utility class for working with image display and image display settings objects. DistanceTools. Static methods for calculating distances between objects. DnnModel. General interface for implementing a deep learning model in a pipeline using OpenCV. DnnModelBuilder. Builder to create a DnnModel from DnnModelParams. DnnModelParams. Parameters to build a DnnModel. DnnModelParams.Builder. Builder for DnnModelParams. DnnModels. Helper class for building new DnnModels. DnnObjectClassifier. Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN. DnnShape. Helper class to represent input and output shapes associated with PredictionFunction. DnnTools. Tools for working with OpenCV's DNN module. DnnTools.DNNLayer. Helper class to summarize a DNN layer. DocGenerator. Command line tool to export icons and markdown documentation for QuPath commands. DoGSuperpixelsPlugin. A simple superpixel-generating command based upon applying ImageJ's watershed transform to the; absolute values of a Difference-of-Gaussians filtered image. DoubleParameter. Parameter to represent a floating point numeric value. DragDropImportListener. Drag and drop support for main QuPath application",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:15167,pipeline,pipeline,15167,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['pipeline'],['pipeline']
Deployability,"8-bit image. Stage; getStage(). Get the stage used to display the image. ReadOnlyObjectProperty<String>; imageNameProperty(). Get a read-only property indicating the name of the image. ReadOnlyObjectProperty<Image>; imageProperty(). Get a read-only property representing the JavaFX image. StringProperty; placeholderTextProperty(). Get the placeholder text to show if no image is available. void; resetImage(). Remove the image. DoubleProperty; saturationPercentProperty(). Get the percentage of any non-8-bit image that should be saturated when applying auto contrast settings. void; setExpandToWindow(boolean limit). Control whether the image should be allowed to expand beyond its preferred width and height to fill the window. void; setPlaceholderText(String placeholder). Set the placeholder text to show if no image is available. void; setSaturationPercent(double percent). Set the percentage of pixels to use when applying auto contrast settings to a non-8-bit image. void; updateImage(String name,; BufferedImage img). Update the image using a buffered image. void; updateImage(String name,; Image image). Update the image using a JavaFX image. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. placeholderText; public StringProperty placeholderTextProperty; Get the placeholder text to show if no image is available. See Also:. getPlaceholderText(); setPlaceholderText(String); placeholderTextProperty(). saturationPercent; public DoubleProperty saturationPercentProperty; Get the percentage of any non-8-bit image that should be saturated when applying auto contrast settings. See Also:. getSaturationPercent(); setSaturationPercent(double); saturationPercentProperty(). expandToWindow; public BooleanProperty expandToWindowProperty; Get the property indicating whether the image should grow to fill the window (while maintaining its; aspect ratio).; If false, the image will grow no",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html:3578,update,updateImage,3578,javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html,1,['update'],['updateImage']
Deployability,"; Method. SEARCH. Package qupath.lib.gui; Class Urls. java.lang.Object; qupath.lib.gui.Urls. public final class Urls; extends Object; Class to return core QuPath URLs centrally.; ; One benefit of this is that it gives one location to update to point to versioned documentation. Since:; v0.5.0; Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; Urls();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static final String; getCitationUrl(). Get a URL pointing to a page that explains how to cite this version of QuPath in a publication. static final String; getDocsUrl(). Get the base URL for the QuPath documentation (independent of version). static final String; getGitHubIssuesUrl(). Get a URL pointing to the main GitHub issues page. static final String; getGitHubRepoUrl(). Get a URL pointing to the main QuPath GitHub repo. static final String; getInstallationUrl(). Get a URL pointing to a page that explains how to install this version of QuPath. static final String; getUserForumUrl(). Get a URL pointing to the main QuPath user forum. static final String; getVersionedDocsUrl(). Get the base URL for the QuPath documentation, specifically for this software version. static final String; getVersionedDocsUrl(String relative). Get the base URL for the QuPath documentation for this software version, including ; a relative component to link to a specific page (without leading slash). static final String; getYouTubeUrl(). Get a URL pointing to the QuPath YouTube channel. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Urls; public Urls(). Method Details. getDocsUrl; public static final String getDocsUrl(); Get the base URL for the QuPath documentation (independent of version). Returns:. getVersionedDocsUrl; public static final String getVersionedDocsUrl(); Get the base URL for the QuPa",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/Urls.html:1311,install,install,1311,javadoc/docs/qupath/lib/gui/Urls.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/Urls.html,1,['install'],['install']
Deployability,"; double downsample). Set the downsample factor for the specified viewer. static void; showAnnotationGridView(QuPathGUI qupath). Show a grid view for annotation objects. static void; showAnnotationMeasurementTable(QuPathGUI qupath,; ImageData<BufferedImage> imageData). Show a measurement table for all annotation objects. static void; showCellMeasurementTable(QuPathGUI qupath,; ImageData<BufferedImage> imageData). Show a measurement table for all cell objects. static void; showChannelViewer(QuPathViewer viewer). Show a channel viewer window associated with a specific viewer. static void; showDetectionMeasurementManager(QuPathGUI qupath,; ImageData<?> imageData). Show a simple dialog for viewing (and optionally removing) detection measurements. static void; showDetectionMeasurementTable(QuPathGUI qupath,; ImageData<BufferedImage> imageData). Show a measurement table for all detection objects. static void; showInstalledExtensions(QuPathGUI qupath). Show a dialog displaying the extensions installed for a specified QuPath instance. static void; showMiniViewer(QuPathViewer viewer). Show a mini viewer window associated with a specific viewer. static void; showScriptEditor(QuPathGUI qupath). Show the script editor, or bring the window to the front if it is already open. static void; showScriptInterpreter(QuPathGUI qupath). Show a script interpreter window for a Qupath instance. static void; showTMACoreGridView(QuPathGUI qupath). Show a grid view for TMA core objects. static void; showTMAMeasurementTable(QuPathGUI qupath,; ImageData<BufferedImage> imageData). Show a measurement table for all TMA core objects. static void; showViewTracker(QuPathGUI qupath). Show a dialog to track the viewed region of an image. static void; showWorkflowScript(QuPathGUI qupath,; ImageData<?> imageData). Show the QuPath script editor with a script corresponding to the command history of a specified image. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/Commands.html:9501,install,installed,9501,javadoc/docs/qupath/lib/gui/commands/Commands.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/Commands.html,1,['install'],['installed']
Deployability,"; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolylineROI.html:8409,update,updatePlane,8409,javadoc/docs/qupath/lib/roi/PolylineROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolylineROI.html,2,['update'],['updatePlane']
Deployability,"; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. RichScriptEditorExtension; public RichScriptEditorExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/scripting/richtextfx/RichScriptEditorExtension.html:2143,install,installExtension,2143,javadoc/docs/qupath/lib/gui/scripting/richtextfx/RichScriptEditorExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/scripting/richtextfx/RichScriptEditorExtension.html,1,['install'],['installExtension']
Deployability,"; locationFontSize - Variable in class qupath.lib.gui.panes.PreferencePane.ViewerPreferences;  ; locationFontSizeProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Preferred font size for the location text in the viewer. locationUpdated - Variable in class qupath.lib.gui.viewer.QuPathViewer. Flag used to indicate that the visible region in the viewer has changed. LOCK_SELECTED_OBJECTS - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.LockActions;  ; lockActions - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.Actions;  ; LockActions() - Constructor for class qupath.lib.gui.actions.menus.ObjectsMenuActions.LockActions;  ; lockObjects(PathObjectHierarchy, Collection<? extends PathObject>) - Static method in class qupath.lib.objects.PathObjectTools. Set specified objects to be 'locked'. lockSelectedObjects(PathObjectHierarchy) - Static method in class qupath.lib.objects.PathObjectTools. Set selected objects to be 'locked', firing an update event if the status of any object is changed. lockSelectedToolProperty() - Method in class qupath.lib.gui.ToolManager. Property to request that the selected tool be locked. log() - Static method in class qupath.opencv.ops.ImageOps.Core. Create an op that returns the natural logarithm of values. LOG_DELIMITER - Static variable in class qupath.lib.gui.viewer.recording.ViewTracker;  ; LOG_VIEWER - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; LOGARITHM - Enum constant in enum class qupath.lib.gui.charts.HistogramChart.CountsTransformMode. Natural logarithm of raw bin counts. logDirectoryProperty() - Method in class qupath.lib.gui.UserDirectoryManager. Read only property representing the log file directory. LoggingTools - Class in qupath.lib.scripting;  ; LoggingTools() - Constructor for class qupath.lib.scripting.LoggingTools;  ; logLevel - Variable in class qupath.lib.gui.panes.PreferencePane.GeneralPreferences;  ; LogManager - Class in qupath.lib.gui.lo",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:658030,update,update,658030,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"; long[] counts,; WritableRaster rasterMask,; Rectangle bounds); Compute the full histogram for a raster containing 8-bit or 16-bit unsigned integer values, optionally restricted to a bounding rectangle. Parameters:; raster - the raster containing the data for the histogram; if not TYPE_BYTE or TYPE_USHORT an IllegalArgumentException will be thrown; counts - histogram counts; if null, a new array will be created. Its must be sufficient for the data type, i.e. 256 or 65536.; No size checking is performed, therefore if non-null it must be sufficiently large for the data type.; rasterMask - optional single-channel mask; if not null, corresponding pixels with 0 values in the mask will be skipped.; bounds - optional rectangle defining the bounds of the raster to search.; If not null, this is used with the (also optional) mask to restrict the pixels that are used.; This can give substantial performance improvements for small masked regions embedded in larger images.; Returns:; the updated histogram counts; See Also:. computeUnsignedIntHistogram(WritableRaster, long[], WritableRaster). computeArgMaxHistogram; public static long[] computeArgMaxHistogram(WritableRaster raster,; long[] counts,; WritableRaster rasterMask); Create a histogram that identifies the channels (bands) of an image with the maximum values according to the argmax criterion. Parameters:; raster - the multi-band raster containing values to check; counts - existing histogram if it should be updated, or null if a new histogram should be created. The length should ; match the number of bands in the raster.; rasterMask - optional single-channel mask; if not null, corresponding pixels with 0 values in the mask will be skipped; Returns:; See Also:. computeArgMaxHistogram(WritableRaster, long[], WritableRaster, Rectangle). computeArgMaxHistogram; public static long[] computeArgMaxHistogram(WritableRaster raster,; long[] counts,; WritableRaster rasterMask,; Rectangle bounds); Create a histogram that identifies th",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html:11690,update,updated,11690,javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,1,['update'],['updated']
Deployability,"; true if changes should be saved after running the script, false if they should not or if it is unknown. getArgs; public String[] getArgs(); Get an optional array of string arguments passed to the script. Returns:. getWriter; public Writer getWriter(); Get the main writer for script output. Returns:. getErrorWriter; public Writer getErrorWriter(); Get the error writer for script output. Returns:. getDefaultImports; public List<Class<?>> getDefaultImports(); Get default imports that should be included with the script, where possible.; Not all languages may support adding default imports.; ; The purpose of this is to make scripting easier and more intuitive, resembling a ; macro language and without a need for the user to know much about QuPath's classes. Returns:; See Also:. getDefaultStaticImports(). useCompiled; public boolean useCompiled(); Request that any script should be compiled before being evaluated, ; and previously compiled versions reused when possible.; ; This is not always supported, but where it is it may improve performance; if the same script is evaluated many times.; It may also mean that any errors are caught earlier.; . Returns:. doUpdateHierarchy; public boolean doUpdateHierarchy(); Request whether to fire an update event for the object hierarchy, if an image data ; object is available.; ; The purpose of this is to avoid requiring the caller to fire a hierarchy update as ; boilerplate at the end of a script. Returns:. getDefaultStaticImports; public List<Class<?>> getDefaultStaticImports(); Get default static imports that should be included with the script, where possible.; Not all languages may support adding default imports.; ; The purpose of this is to make scripting easier and more intuitive, resembling a ; macro language and without a need for the user to know much about QuPath's classes. Returns:; See Also:. getDefaultImports(). builder; public static ScriptParameters.Builder builder(); Create a new builder for ScriptParameters. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/ScriptParameters.html:5451,update,update,5451,javadoc/docs/qupath/lib/scripting/ScriptParameters.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/ScriptParameters.html,2,['update'],['update']
Deployability,"; void; changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew);  ; BooleanProperty; disableUpdatesProperty(). Property that may be used to prevent updates on every hierarchy or selection change event. Pane; getPane(). Get the pane for display. void; hierarchyChanged(PathObjectHierarchyEvent event). Notify listeners of a change in the hierarchy or its objects. void; selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected). Fired when the selected objects have changed. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. disableUpdates; public BooleanProperty disableUpdatesProperty; Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the list being updated even when ; it is not visible to the user. See Also:. disableUpdatesProperty(). Constructor Details. AnnotationPane; public AnnotationPane(QuPathGUI qupath); Constructor. Parameters:; qupath - current QuPath instance. AnnotationPane; public AnnotationPane(QuPathGUI qupath,; ObservableValue<ImageData<BufferedImage>> imageDataProperty); Constructor. Parameters:; qupath - current QuPath instance.; imageDataProperty - the current ImageData. Method Details. disableUpdatesProperty; public BooleanProperty disableUpdatesProperty(); Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the list being updated even when ; it is not visible to the user. Returns:. getPane; public Pane getPane(); Get the pane for display. Returns:. selectedPathObjectChanged; public void selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected); ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html:2366,update,updated,2366,javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html,1,['update'],['updated']
Deployability,";  ; installActions(Collection<? extends Action>) - Method in class qupath.lib.gui.QuPathGUI. Install the specified actions. installColorMaps(Path...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps from the specified paths. installColorMaps(ColorMaps.ColorMap...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps. installCommand(String, Runnable) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath. installDefaultFeatureClassificationBuilder(ImageDataTransformerBuilder) - Static method in class qupath.process.gui.commands.ml.PixelClassifierPane. Add to the list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageData<BufferedImage>>) - Method in class qupath.lib.gui.QuPathGUI. Install a new c",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:607786,install,installExtension,607786,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installExtension']
Deployability,"<PathObject> allSelected). Fired when the selected objects have changed. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. disableUpdates; public BooleanProperty disableUpdatesProperty; Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the list being updated even when ; it is not visible to the user. See Also:. disableUpdatesProperty(). Constructor Details. AnnotationPane; public AnnotationPane(QuPathGUI qupath); Constructor. Parameters:; qupath - current QuPath instance. AnnotationPane; public AnnotationPane(QuPathGUI qupath,; ObservableValue<ImageData<BufferedImage>> imageDataProperty); Constructor. Parameters:; qupath - current QuPath instance.; imageDataProperty - the current ImageData. Method Details. disableUpdatesProperty; public BooleanProperty disableUpdatesProperty(); Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the list being updated even when ; it is not visible to the user. Returns:. getPane; public Pane getPane(); Get the pane for display. Returns:. selectedPathObjectChanged; public void selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected); Description copied from interface: PathObjectSelectionListener; Fired when the selected objects have changed. Specified by:; selectedPathObjectChanged in interface PathObjectSelectionListener; Parameters:; pathObjectSelected - the primary selected object; previousObject - the previous primary selected object; allSelected - all currently selected objects (including the primary). changed; public void changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew). Speci",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html:2941,update,updates,2941,javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html,1,['update'],['updates']
Deployability,"All Implemented Interfaces:; Externalizable, Serializable. public class Workflow; extends Object; implements Externalizable; A collection of steps that relate to how an image has been - or should be - processed.; ; This can also be used to implement a 'command history'.; ; Where the WorkflowSteps contained in the Workflow are scriptable, then a ; script can be created automatically. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; Workflow();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addStep(WorkflowStep step). Append a new step to the end of the workflow, firing an update event. void; addSteps(Collection<WorkflowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size().",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:1420,update,update,1420,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,1,['update'],['update']
Deployability,"Annotation(boolean, int, int) instead. static void; createTMAGrid(String hLabels,; String vLabels,; boolean rowFirst,; double diameterCalibrated). Create a new regular TMAGrid and set it as active on the hierarchy for the current image. static void; createTMAGrid(ImageData<?> imageData,; String hLabels,; String vLabels,; boolean rowFirst,; double diameterCalibrated). Create a new regular TMAGrid and set it as active on the hierarchy for an image. static String; describe(Class<?> cls). List the fields and methods of a specified class. static String; describe(Object o). List the fields and methods of a specified object. static void; deselectAll(). Clear the selection for the current hierarchy, so that no objects of any kind are selected. static void; deselectAll(PathObjectHierarchy hierarchy). Clear the selection, so that no objects of any kind are selected. static void; detectionCentroidDistances(). Deprecated.; retained only for compatibility of v0.2.0 milestone releases; use instead #detectionCentroidDistances(boolean). static void; detectionCentroidDistances(boolean splitClassNames). Compute the distance for all detection object centroids to the closest detection with each valid, not-ignored classification and add ; the result to the detection measurement list for the current ImageData. static void; detectionCentroidDistances(ImageData<?> imageData,; boolean splitClassNames). Compute the distance for all detection object centroids to the closest detection with each valid, not-ignored classification and add ; the result to the detection measurement list. static void; detectionToAnnotationDistances(). Deprecated.; retained only for compatibility of v0.2.0 milestone releases; use instead #detectionToAnnotationDistances(boolean). static void; detectionToAnnotationDistances(boolean splitClassNames). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measureme",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:13125,release,releases,13125,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['release'],['releases']
Deployability,"B(int, int[]) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. UNSET - Enum constant in enum class qupath.lib.images.ImageData.ImageType. Image type has not been set. unzippedExtensions(Path, String...) - Static method in class qupath.lib.io.PathIO. Get the extension of a file, or of all entries within a zip file. UPDATE - Variable in class qupath.lib.gui.actions.menus.HelpMenuActions.Actions;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewerPlus;  ; updateAvailableStyles() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Request that the list of available styles is updated. updateBounds(double, double) - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1061791,update,updateChart,1061791,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateChart']
Deployability,"Builder<S,T,U>; tile(int tileWidth,; int tileHeight). Set a default tiler to use, with a specified tile size. PixelProcessor.Builder<S,T,U>; tiler(Tiler tiler). Set a tiler to use. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Builder; public Builder(). Method Details. imageSupplier; public PixelProcessor.Builder<S,T,U> imageSupplier(ImageSupplier<S> imageSupplier); Set the image supplier. This is required if the processor is to have access to pixels. Parameters:; imageSupplier - ; Returns:. maskSupplier; public PixelProcessor.Builder<S,T,U> maskSupplier(MaskSupplier<S,T> maskSupplier); Set the mask supplier. This is optional, but without it masks will be null. Parameters:; maskSupplier - ; Returns:. outputHandler; public PixelProcessor.Builder<S,T,U> outputHandler(OutputHandler<S,T,U> outputHandler); Set the output handler. This is optional, for cases where the processor does not make updates to the; parent object itself. Parameters:; outputHandler - ; Returns:. processor; public PixelProcessor.Builder<S,T,U> processor(Processor<S,T,U> processor); Set the processor. This is required to do any interesting work. Parameters:; processor - ; Returns:. padding; public PixelProcessor.Builder<S,T,U> padding(Padding padding); Set the padding to use when extracting regions.; Note that this is defined in pixels at the full image resolution, not the downsampled resolution. Parameters:; padding - ; Returns:. padding; public PixelProcessor.Builder<S,T,U> padding(int size); Set the padding to use when extracting regions, using a symmetric padding.; Note that this is defined in pixels at the full image resolution, not the downsampled resolution. Parameters:; size - ; Returns:. downsample; public PixelProcessor.Builder<S,T,U> downsample(double downsample); Set the downsample factor to use with requesting image regions. Parameters:; downsample - ; Returns:. pixelSize; pu",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/PixelProcessor.Builder.html:3134,update,updates,3134,javadoc/docs/qupath/lib/experimental/pixels/PixelProcessor.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/PixelProcessor.Builder.html,1,['update'],['updates']
Deployability,"CellBoundary(Geometry geomNucleus,; double distance,; double nucleusScale). Estimate a cell boundary using Geometry objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CellTools; public CellTools(). Method Details. constrainCellByScaledNucleus; public static PathCellObject constrainCellByScaledNucleus(PathCellObject cell,; double nucleusScaleFactor,; boolean keepMeasurements); Constrain a cell boundary to fall within a maximum region, determined by scaling the nucleus ROI by a fixed scale factor ; about its centroid.; This can be used to create more biologically plausible cell boundaries in cases where the initial boundary estimates may be ; too large. Parameters:; cell - original cell object; nucleusScaleFactor - scale factor by which the nucleus should be expanded to defined maximum cell size; keepMeasurements - if true, retain the measurements of the original cell if creating a new cell; if false, discard existing measurements; Returns:; the updated cell object, or the original cell object either if its boundary falls within the specified limit or it lacks both boundary and nucleus ROIs. constrainCellOverlaps; public static List<PathObject> constrainCellOverlaps(Collection<? extends PathObject> cells); Adjust cell boundary ROIs to be non-overlapping, by assigning overlaps to the cell with the closest nucleus.; Results are returned as a new list of cells. Parameters:; cells - input cells; Returns:; a new list of cells, potentially containing some of the original cells and other adjusted cells. detectionsToCells; public static List<PathObject> detectionsToCells(Collection<? extends PathObject> detections,; double distance,; double nucleusScale); Create cell objects by expanding the (nucleus) ROIs from existing detections to approximate the full cell boundary. Parameters:; detections - the detection objects from which to create the cells; these define ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/CellTools.html:2796,update,updated,2796,javadoc/docs/qupath/lib/objects/CellTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/CellTools.html,1,['update'],['updated']
Deployability,"Change the width of output tiles. Timeit - Class in qupath.lib.common. Helper class to time code execution. Timeit() - Constructor for class qupath.lib.common.Timeit;  ; Timeit.Checkpoint - Class in qupath.lib.common. Class representing a named checkpoint with a timestamp in nanoseconds. timePoint(int) - Method in class qupath.lib.images.writers.ome.OMEPyramidWriter.Builder. Specify a single timepoint to be written from a time series. timepoints(TimeUnit, double...) - Method in class qupath.lib.images.servers.ImageServerMetadata.Builder. Specify the time unit and individual time points. timepoints(TimeUnit, double...) - Method in class qupath.lib.images.servers.PixelCalibration.Builder. Specify timepoints and units. timePoints(int, int) - Method in class qupath.lib.images.writers.ome.OMEPyramidWriter.Builder. Specify a range of timepoints to be written from a time series. timestamp - Variable in class qupath.lib.gui.images.stores.AbstractImageRenderer. Timestamp variable; this should be updated by implementing classes. TINY - Enum constant in enum class qupath.lib.gui.commands.PathObjectGridView.GridDisplaySize;  ; TINY - Enum constant in enum class qupath.lib.gui.prefs.PathPrefs.FontSize;  ; title - Variable in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; title - Variable in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; title - Variable in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; title(String) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder. Specify the chart title. title(String) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder. Specify the chart title. title(String) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder. Specify the chart title. title(String) - Method in class qupath.lib.gui.dialogs.Dialogs.Builder. Deprecated.; Specify the dialog title. title(String) - Method in class qupath.lib.gui.FileCopier. Title for any dialog. title(String) - Method in class qupath.process.gui.com",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1029113,update,updated,1029113,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability,"Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses(). Get a collection of possible parent objects that the plugin could have. boolean; runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractInteractivePlugin; getLoggableParameters, getParameterList, parseArgument. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. IntensityFeaturesPlugin; public IntensityFeaturesPlugin(). Method Details. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<BufferedImage> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<BufferedImage>; Parameters:; imageData - ; parentObject - ; tasks - . getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<BufferedImage> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information tha",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html:3509,update,update,3509,javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/algorithms/IntensityFeaturesPlugin.html,1,['update'],['update']
Deployability,"Collection<UriUpdater.SingleUriItem> items,; Map<UriUpdater.SingleUriItem,UriUpdater.SingleUriItem> replacements); throws IOException; Create a new UriUpdater using the specified collections.; The main use of this is as a convenience to build a UI using observable collections. Parameters:; resources - collection of resources that may include URIs; items - collection containing all the distinct URIs from resources, each as a UriUpdater.SingleUriItem. ; Note that this collection will be regenerated, so any existing items in the collection will be removed.; replacements - map used to store any replacements identified by the UriUpdater. Note that any existing contents will be discarded.; Returns:; Throws:; IOException. wrap; public static UriResource wrap(URI... uris); Wrap one or more URIs in a UriResource so they can be updated together.; Any changes can then be requred from the UriResource. Parameters:; uris - ; Returns:. wrap; public static UriResource wrap(Collection<URI> uris); Wrap one or more URIs in a UriResource so they can be updated together.; Note that the collection is not used directly. Any changes should be accessed from the ; UriResource. Parameters:; uris - ; Returns:. locateFile; public static URI locateFile(URI uri,; int searchDepth,; Path... searchPaths); throws IOException; Attempt to update a URI to find an existing file using the specified search paths. Parameters:; uri - the URI to search for; searchDepth - the depth of the search (i.e. how many subdirectories); searchPaths - the base directories to search, in order; Returns:; a new URI corresponding to an existing file with the same name, ; or the original URI if no replacement was found or required; Throws:; IOException. locateFile; public static String locateFile(String path,; int searchDepth,; Path... searchPaths); throws IOException; Attempt to update a file using the specified search paths. Parameters:; path - the path to a file that may or may not exist; searchDepth - the depth of the sea",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html:5245,update,updated,5245,javadoc/docs/qupath/lib/io/UriUpdater.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html,1,['update'],['updated']
Deployability,"CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion re",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1367,update,updateProgress,1367,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,1,['update'],['updateProgress']
Deployability,"Constructors. Constructor; Description; OpenCVModelObjectClassifier(PathObjectFilter filter,; OpenCVDnn model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected boolean; tryToClassify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVModelObjectClassifier; public OpenCVModelObjectClassifier(PathObjectFilter filter,; OpenCVDnn model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html:2111,update,updateURIs,2111,javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html,1,['update'],['updateURIs']
Deployability,"Dearrayer. Static methods used by the TMA dearrayer plugin. TMADearrayerPluginIJ. Plugin for automatically dearraying tissue microarrays (TMAs). TMAExplorer. The aim of this is to enable the exploration of TMA data from multiple images in a project. TMAGrid. Interface defining a (rectangular) TMA grid. TMAGridOverlay. An overlay capable of painting a TMA Grid. TMAMenuActions;  ; TMAScoreImporter. Helper class for importing data in connection with TMA slides. TMASummaryViewer; Deprecated.; since v0.4.0. ToolManager. Manage (drawing) tool selection in a QuPath UI. TransformedServerBuilder. Helper class for creating an ImageServer that applies one or more transforms to another (wrapped) ImageServer. TransformingImageServer<T>. An ImageServer implementation used to apply transforms to another ImageServer. UndoRedoManager. Helper class to add undo/redo support to QuPath. UpdateChecker. Helper class to query for updates using GitHub's web API. UpdateChecker.ReleaseVersion. Class to represent a release version. UpdateUrisCommand<T>. Fix broken URIs by using relative paths or prompting the user to select files. UriResource. Interface for objects that depend upon URIs. UriUpdater<T>. Helper class for updating URIs, for example whenever files have moved or projects have been transferred between computers. UriUpdater.SingleUriItem. Wrapper for a URI, providing access to a Path if available. UriUpdater.UriStatus. Enum representing the status of a URI, i.e. Urls. Class to return core QuPath URLs centrally. UserDirectoryManager. Helper class for managing a user directory, and associated subdirectories. Version. Helper class for working with semantic versioning. ViewerActions. Actions that interact with one or more viewers. ViewerManager. Class to manage multiple QuPathViewer instances in a UI region. ViewerPlusDisplayOptions. A group of properties determining what should be displayed for each viewer. ViewMenuActions;  ; ViewTracker. Default ViewTracker implementation. ViewTracker",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:59396,release,release,59396,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['release'],['release']
Deployability,"Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. g",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:2285,patch,patches,2285,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,1,['patch'],['patches']
Deployability,"DisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static method in class qupath.lib.analysis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriResource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in inter",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1067163,update,updateURIs,1067163,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateURIs']
Deployability,"Event(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object classifications have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating objects have changed. fireObjectsChangedEvent(Object, Collection<? extends PathObject>, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating objects have changed, and may still be changing. fireVisibleRegionChangedEvent(Shape) - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; fireWorkflowUpdatedEvent() - Method in class qupath.lib.plugins.workflow.Workflow;  ; fitCorePolygonToGrid(Polygon, double, int, int) - Static method in class qupath.imagej.detect.dearray.TMADearrayer. Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid. fixUris(UriResource, Project<?>) - Static method in class qupath.lib.io.UriUpdater. Attempt to fix any broken paths by updating URIs based upon the current project. FLAT - Enum constant in enum class qupath.lib.plugins.objects.DilateAnnotationPlugin.LineCap. Flat cap. flatness(double) - Method in class qupath.lib.roi.GeometryTools.GeometryConverter.Builder. Specify the flatness for any operation where a PathIterator is required. flatten(Mat) - Static method in class qupath.opencv.tools.GroovyCV. Flatten a Mat to give a single column. FLOAT - Enum constant in enu",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:310359,update,update,310359,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"Extension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageData<BufferedImage>>) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath that takes the current ImageData as input. installInfoMessage(Action, ObjectExpression<InfoMessage>) - Static method in class qupath.lib.gui.actions.ActionTools. Install an optional info message to the action. installRangePrompt(Slider) - Static method in class qupath.lib.gui.tools.GuiTools. Install a mouse click listener to prompt the user to input min/max values for a slider. installStyles(Collection<File>) - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Handle installing CSS files (which can be used to style QuPath). installTool(PathTool, KeyCodeCombination) - Method in class qupath.lib.gui.ToolManager. Install a new tool for interacting with viewers. INT16 - Enum constant in enum class qupath.lib.images.servers.PixelType. 16-bit signed integer. INT32 - Enum constant in enum class qupath.lib.images.servers.PixelType. 32-bit signed integer. INT8 - Enum constant in enum class qupath.lib.images.servers.PixelType. 8-bit signed integer. INTENSITY_FEATURES - Variable in class qupath.lib.gui.actions.menus.AnalyzeMenuActions.Actions;  ; IntensityFeaturesPlugin - Class in qupath.lib.algorithms. Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles. IntensityFeaturesPlugin() - Constructor for class qupath.lib.algorithms.IntensityFeaturesPlugin;  ; InteractiveObjectImporter - Class in qupath.lib.gui.commands. Static methods to import object(s) from different sources. INTERLEAVED - Enum constant in enum class qupath.l",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:609304,install,installing,609304,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installing']
Deployability,"Function<ROI, PathObject>) - Static method in class qupath.opencv.dnn.DnnTools. Apply a detection model to generate rectangles surrounding distinct structures. detect(DetectionModel, ImageServer<BufferedImage>, RegionRequest, IntFunction<PathClass>, Function<ROI, PathObject>) - Static method in class qupath.opencv.dnn.DnnTools. Apply a detection model to generate rectangles surrounding distinct structures. DetectCytokeratinCV - Class in qupath.opencv. Simple command to detect tumor regions stained with cytokeratin. DetectCytokeratinCV() - Constructor for class qupath.opencv.DetectCytokeratinCV;  ; detection() - Method in class qupath.opencv.dnn.OpenCVDnn.Builder. Set the model type to be OpenCVDnn.ModelType.DETECTION. DETECTION - Enum constant in enum class qupath.opencv.dnn.OpenCVDnn.ModelType. Refers to DetectionModel. detectionCentroidDistances() - Static method in class qupath.lib.scripting.QP. Deprecated.; retained only for compatibility of v0.2.0 milestone releases; use instead #detectionCentroidDistances(boolean). detectionCentroidDistances(boolean) - Static method in class qupath.lib.scripting.QP. Compute the distance for all detection object centroids to the closest detection with each valid, not-ignored classification and add ; the result to the detection measurement list for the current ImageData. detectionCentroidDistances(ImageData<?>, boolean) - Static method in class qupath.lib.analysis.DistanceTools. Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. detectionCentroidDistances(ImageData<?>, boolean) - Static method in class qupath.lib.scripting.QP. Compute the distance for all detection object centroids to the closest detection with each valid, not-ignored classification and add ; the result to the detection measurement list. detectionCentroidDistances2D(ImageData<?>) - Static method in class qupath.lib.gui.commands.Comman",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:252882,release,releases,252882,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['release'],['releases']
Deployability,"GUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageData<BufferedImage>>) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath that takes the current ImageData as input. installInfoMessage(Action, ObjectExpression<InfoMessage>) - Static method in class qupath.lib.gui.actions.ActionTools. Install an optional info message to the action. installRangePrompt(Slider) - Static method in class qupath.lib.gui.tools.GuiTools. Install a mouse click listener to prompt the user to input min/max values for a slider. installStyles(Collection<File>) - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Handle installing CSS files (which can be used to style QuPath). installTool(PathTool, KeyCodeCombination) - Method in class qupath.lib.gui.ToolManager. Install a new tool for interacting with viewers. INT16 - Enum constant in enum class qupath.lib.images.servers.PixelType. 16-bit signed integer. INT32 - Enum constant in enum class qupath.lib.images.servers.PixelType. 32-bit signed integer. INT8 - Enum constant in enum class qupath.lib.images.servers.PixelType. 8-bit signed integer. INTENSITY_FEATURES - Variable in class qupath.lib.gui.actions.menus.AnalyzeMenuActions.Actions;  ; IntensityFeaturesPlugin - Class in qupath.lib.algorithms. Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles. IntensityFeaturesPlugin() - Constructor for class qupath.lib.algorithms.IntensityFeaturesPlugin;  ; InteractiveObjectImporter - Class in qupath.lib.gui.commands. Static meth",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:609199,install,installStyles,609199,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installStyles']
Deployability,"HelpMenuActions.Actions;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewerPlus;  ; updateAvailableStyles() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Request that the list of available styles is updated. updateBounds(double, double) - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1062275,release,release,1062275,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['release'],['release']
Deployability,"I defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static meth",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1065760,update,updateProgress,1065760,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateProgress']
Deployability,"I.duplicate(). qupath.lib.roi.interfaces.ROI.duplicate(). qupath.lib.roi.LineROI.duplicate(). qupath.lib.roi.PointsROI.duplicate(). qupath.lib.roi.PolygonROI.duplicate(). qupath.lib.roi.PolylineROI.duplicate(). qupath.lib.roi.RectangleROI.duplicate(). qupath.lib.scripting.QP.buildServer(String, Class<T>, String...). In the usual case where BufferedImage is the class, use QP.buildServer(String, String...) instead ; because it handles default args. qupath.lib.scripting.QP.createSelectAllObject(boolean). v0.4.0 use QP.createFullImageAnnotation(boolean) instead. qupath.lib.scripting.QP.createSelectAllObject(boolean, int, int). v0.4.0 use QP.createFullImageAnnotation(boolean, int, int) instead. qupath.lib.scripting.QP.detectionCentroidDistances(). retained only for compatibility of v0.2.0 milestone releases; use instead #detectionCentroidDistances(boolean). qupath.lib.scripting.QP.detectionToAnnotationDistances(). retained only for compatibility of v0.2.0 milestone releases; use instead #detectionToAnnotationDistances(boolean). qupath.lib.scripting.QP.getColorRGB(int...). Use instead QP.makeRGB(int, int, int) or QP.makeARGB(int, int, int, int). qupath.lib.scripting.QP.loadImageData(String, boolean). qupath.lib.scripting.QP.selectObjectsByMeasurement(ImageData<?>, String). qupath.opencv.dnn.DnnTools.registerDnnModel(Class<T>, String). since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. qupath.opencv.features.DelaunayTriangulation.getConnectedNodes(Collection<PathObject>, Collection<double[]>). qupath.opencv.ml.pixel.PixelClassificationMeasurementManager.getMeasurementValue(PathObject, String, boolean). use PixelClassificationMeasurementManager.getMeasurementValue(PathObject, String) or PixelClassificationMeasurementManager.getCachedMeasurementValue(PathObject, String) instead. qupath.opencv.ml.pixel.PixelClassificationMeasurementManager.getMeasurementValue(ROI, String, boolean). use PixelClassificationMeasurementManager.getMeasurementValue(ROI, String) or ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/deprecated-list.html:13100,release,releases,13100,javadoc/docs/deprecated-list.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/deprecated-list.html,1,['release'],['releases']
Deployability,"I>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource. Update the specified URIs. updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.DnnObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVDnn;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVModelObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.opencv.ops.ImageOp. Default implementation makes no changes; classes should override this if necessary. UpdateUrisCommand<T> - Class in qupath.lib.gui.commands. Fix broken URIs by using relative paths or prompting the user to select files. updateZ(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated z value. updatingConstrainingObjects(QuPathViewer, double, double, Collection<PathObject>) - Method in class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler. New annotations can be constrained while they are being drawn, to avoid overlaps with existing annotations; or to ensure they are drawn within a parent annotation. updatingConstrainingObjects(QuPathViewer, double, double, Collection<PathObject>) - Method in class qupath.lib.gui.viewer.tools.handlers.MoveToolEventHandler. New annotations can be constrained while they are being drawn, to avoid overlaps with existing annotations; or to ensure they are drawn within a parent annotation. updatingConstrainingObjects(QuPathViewer, double, double, Collection<PathObject>) - Method in class qupath.process.gui.WandToolEventHandler. New annotations can be constrained while they are being drawn, to avoid overlaps with existing annotations; or to ensure they are drawn within a parent annotation. UriResource",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1068901,update,updated,1068901,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability,"Image(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1064302,update,updated,1064302,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability,"ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice,",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:4258,update,updated,4258,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,1,['update'],['updated']
Deployability,"ImageRegion region); Intersect to the specified 2D region, ignoring z and t. Parameters:; region - the region defining the x, y, width and height of the maximum permitted bounding box.; Returns:; the clipped RegionRequest, which may be this if no clipping is required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Retu",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9356,update,updateT,9356,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,3,['update'],"['updateT', 'updated']"
Deployability,"Infos and ChannelDisplayMode. Parameters:; imgInput - the input image to transform; imgOutput - optional output image (must be the same size as the input image, and RGB); selectedChannels - the channels to use; mode - the mode used to determine RGB colors for each channel; Returns:; an RGB image determined by transforming the input image using the specified channels. getTransformedValueAsString; public String getTransformedValueAsString(BufferedImage img,; int x,; int y); Get a string representation of a transformed pixel value, using the currently-selected channels. Parameters:; img - image providing the value; x - x-coordinate of the pixel; y - y-coordinate of the pixels; Returns:; a String representation of the pixel's transformed value. autoSetDisplayRange; public void autoSetDisplayRange(ChannelDisplayInfo info); Automatically set the display range for a channel, using the default saturation defined in PathPrefs.autoBrightnessContrastSaturationPercentProperty(). Parameters:; info - channel to update. autoSetDisplayRange; public void autoSetDisplayRange(ChannelDisplayInfo info,; double saturation); Automatically set the display range for a channel. Parameters:; info - channel to update; saturation - proportion of pixels that may be saturated, i.e. have the max/min display values (between 0.0 and 1.0). getHistogram; public Histogram getHistogram(ChannelDisplayInfo info); Returns a histogram for a ChannelInfo, or none if no histogram is available (e.g. the channel is RGB). Parameters:; info - ; Returns:. toJSON; public String toJSON(boolean prettyPrint); Create a JSON representation of the main components of the current display. Parameters:; prettyPrint - ; Returns:. isCompatible; public boolean isCompatible(ImageDisplay display); Check if an image display is 'compatible' with this one.; Compatible means that they have the same number of channels, and the same channel names.; This may be used p. Parameters:; display - ; Returns:. updateFromDisplay; public boolean u",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/ImageDisplay.html:14578,update,update,14578,javadoc/docs/qupath/lib/display/ImageDisplay.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/ImageDisplay.html,1,['update'],['update']
Deployability,"Instance MethodsConcrete Methods. Modifier and Type; Method; Description; protected ImageServer<T>; buildOriginal();  ; static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. static <T> ImageServerBuilder.ServerBuilder<T>; createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args). Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). boolean; equals(Object obj);  ; String[]; getArgs(). Get the args array. URI; getURI(). Get the URI used by this builder. Collection<URI>; getURIs(). Get a list of URIs required by this builder. int; hashCode();  ; String; toString();  ; ImageServerBuilder.ServerBuilder<T>; updateURIs(Map<URI,URI> updateMap). Update the URIs required by this builder. Methods inherited from class qupath.lib.images.servers.ImageServerBuilder.AbstractServerBuilder; build, getMetadata. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:2071,update,updateURIs,2071,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,2,['update'],"['updateMap', 'updateURIs']"
Deployability,"Left, onSwipeRight, onSwipeUp, onTouchMoved, onTouchPressed, onTouchReleased, onTouchStationary, onZoomFinished, onZoom, onZoomStarted, opacity, parent, pickOnBounds, pressed, rotate, rotationAxis, scaleX, scaleY, scaleZ, scene, style, translateX, translateY, translateZ, viewOrder, visible. Field Summary. Fields inherited from class javafx.scene.layout.Region; USE_COMPUTED_SIZE, USE_PREF_SIZE. Fields inherited from class javafx.scene.Node; BASELINE_OFFSET_SAME_AS_HEIGHT. Constructor Summary; Constructors. Constructor; Description; BrightnessContrastChannelPane();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ReadOnlyObjectProperty<ChannelDisplayInfo>; currentChannelProperty(). Get the currently-selected channel. ReadOnlyBooleanProperty; currentChannelVisible(). Read-only property indicating whether the currently-selected channel is visible,; i.e. BooleanProperty; disableToggleMenuItemsProperty(). Property to disable options to toggle the visibility of channels. MultipleSelectionModel<ChannelDisplayInfo>; getSelectionModel(). Get the selection model for the channels. ObjectProperty<ImageDisplay>; imageDisplayProperty(). Property for the image display that should be shown and managed by this pane. boolean; isEmpty(). Query if the table is empty, i.e. void; setHideChannel(ChannelDisplayInfo channel). Request that the specified channel is hidden. void; setShowChannel(ChannelDisplayInfo channel). Request that the specified channel is shown. void; toggleShowHideChannel(ChannelDisplayInfo channel). Toggle the visibility of the specified channel. void; updateTable(). Ensure the table is up-to-date. Methods inherited from class javafx.scene.layout.BorderPane; bottomProperty, centerProperty, clearConstraints, computeMinHeight, computeMinWidth, computePrefHeight, computePrefWidth, getAlignment, getBottom, getCenter, getContentBias, getLeft, getMargin, getRight, getTop, layoutChildren, leftProperty, rightProperty, setAli",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html:3723,toggle,toggle,3723,javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html,1,['toggle'],['toggle']
Deployability,"Listener; Show logged commands, and optionally generate a script. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; WorkflowCommandLogView(QuPathGUI qupath). Construct a view to display the workflow for the currently-active ImageData within a running QuPath instance. WorkflowCommandLogView(QuPathGUI qupath,; Workflow workflow). Construct a view displaying a static workflow (i.e. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew);  ; protected BorderPane; createPane();  ; Pane; getPane(). Get the pane to add to a scene. static void; showScript(ScriptEditor scriptEditor,; Workflow workflow). Show a script in the script editor based on the specified workflow. void; workflowUpdated(Workflow workflow). Called whenever a Workflow has been updated in some way, such as a new step added. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. WorkflowCommandLogView; public WorkflowCommandLogView(QuPathGUI qupath); Construct a view to display the workflow for the currently-active ImageData within a running QuPath instance. Parameters:; qupath - . WorkflowCommandLogView; public WorkflowCommandLogView(QuPathGUI qupath,; Workflow workflow); Construct a view displaying a static workflow (i.e. not dependent on any particular ImageData). Parameters:; qupath - ; workflow - . Method Details. getPane; public Pane getPane(); Get the pane to add to a scene. Returns:. createPane; protected BorderPane createPane(). showScript; public static void showScript(ScriptEditor scriptEditor,; Workflow workflow); Show a script in the script editor based on the specified workflow. Parameters:; scriptEditor - ; workflow - . workflowUpdated; public voi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/WorkflowCommandLogView.html:1659,update,updated,1659,javadoc/docs/qupath/lib/gui/panes/WorkflowCommandLogView.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/WorkflowCommandLogView.html,1,['update'],['updated']
Deployability,"Mats are unchanged.; This resembles Math.floor(double) except that non-finite values are left unchanged. Parameters:; mat - . round; public static void round(Mat mat); Round values in a floating point Mat.; Non-floating point Mats are unchanged.; This resembles Math.round(double) except that non-finite values are left unchanged. Parameters:; mat - . ceil; public static void ceil(Mat mat); Ceil values in a floating point Mat.; Non-floating point Mats are unchanged.; This resembles Math.ceil(double) except that non-finite values are left unchanged. Parameters:; mat - . ensureContinuous; public static Mat ensureContinuous(Mat mat,; boolean inPlace); Ensure a Mat is continuous, creating a copy of the data if necessary.; ; This can be necessary before calls to AbstractArray.createBuffer() or AbstractArray.createIndexer() for ; simpler interpretation of the results. Parameters:; mat - input Mat, which may or may not be continuous; inPlace - if true, set mat to contain the cloned data if required; Returns:; the original mat unchanged if it is already continuous, or cloned data that is continuous if required; See Also:. Mat.isContinuous(). vConcat; public static Mat vConcat(Collection<? extends Mat> mats,; Mat dest); Vertical concatenation for a Mat.; May be more convenient than OpenCV's built-in approach. Parameters:; mats - mats to concatenate; dest - optional destination (may be null); Returns:; merged Mat, which will be the same as dest if provided. hConcat; public static Mat hConcat(Collection<? extends Mat> mats,; Mat dest); Horizontal concatenation for a Mat.; May be more convenient than OpenCV's built-in approach. Parameters:; mats - mats to concatenate; dest - optional destination (may be null); Returns:; merged Mat, which will be the same as dest if provided. applyToChannels; public static void applyToChannels(Mat input,; Consumer<Mat> fun); Apply a method that modifies a Mat in-place to all ; channels of the Mat, merging the result and storing the result in-place.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/OpenCVTools.html:18641,continuous,continuous,18641,javadoc/docs/qupath/opencv/tools/OpenCVTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/OpenCVTools.html,3,['continuous'],['continuous']
Deployability,"Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static RunningStatistics; computeRunningStatistics(double[] values). Create a RunningStatistics object using all the values from a specified array. static RunningStatistics; computeRunningStatistics(SimpleImage img). Compute running statistics using all pixels from a SimpleImage. static void; computeRunningStatistics(SimpleImage img,; SimpleImage imgLabels,; List<RunningStatistics> statsList). Calculate RunningStatistics for each label > 0 in an image, up to a maximum of statsList.size(). static List<RunningStatistics>; createRunningStatisticsList(int n). Create a list of n (empty) RunningStatistics objects. static double[]; getQuartiles(double[] scores). Determine thresholds for dividing an array of double values into quartiles. static double[]; getTertiles(double[] scores). Determine thresholds for dividing an array of double values into tertiles. static void; updateRunningStatistics(RunningStatistics stats,; SimpleImage img). Add all pixels from a SimpleImage to an existing RunningStatistics object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. StatisticsHelper; public StatisticsHelper(). Method Details. computeRunningStatistics; public static RunningStatistics computeRunningStatistics(SimpleImage img); Compute running statistics using all pixels from a SimpleImage. Parameters:; img - ; Returns:. updateRunningStatistics; public static void updateRunningStatistics(RunningStatistics stats,; SimpleImage img); Add all pixels from a SimpleImage to an existing RunningStatistics object. Parameters:; stats - ; img - . createRunningStatisticsList; public static List<RunningStatistics> createRunningStatisticsList(int n); Create a list of n (empty) RunningStatistics objects. Parameters:; n - ; Returns:. computeRunningStatistics; public static RunningStatistics compu",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/stats/StatisticsHelper.html:1681,update,updateRunningStatistics,1681,javadoc/docs/qupath/lib/analysis/stats/StatisticsHelper.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/stats/StatisticsHelper.html,1,['update'],['updateRunningStatistics']
Deployability,"Method; Description; void; changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew);  ; protected BorderPane; createPane();  ; Pane; getPane(). Get the pane to add to a scene. static void; showScript(ScriptEditor scriptEditor,; Workflow workflow). Show a script in the script editor based on the specified workflow. void; workflowUpdated(Workflow workflow). Called whenever a Workflow has been updated in some way, such as a new step added. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. WorkflowCommandLogView; public WorkflowCommandLogView(QuPathGUI qupath); Construct a view to display the workflow for the currently-active ImageData within a running QuPath instance. Parameters:; qupath - . WorkflowCommandLogView; public WorkflowCommandLogView(QuPathGUI qupath,; Workflow workflow); Construct a view displaying a static workflow (i.e. not dependent on any particular ImageData). Parameters:; qupath - ; workflow - . Method Details. getPane; public Pane getPane(); Get the pane to add to a scene. Returns:. createPane; protected BorderPane createPane(). showScript; public static void showScript(ScriptEditor scriptEditor,; Workflow workflow); Show a script in the script editor based on the specified workflow. Parameters:; scriptEditor - ; workflow - . workflowUpdated; public void workflowUpdated(Workflow workflow); Description copied from interface: WorkflowListener; Called whenever a Workflow has been updated in some way, such as a new step added. Specified by:; workflowUpdated in interface WorkflowListener; Parameters:; workflow - . changed; public void changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew). Specified by:; changed in interface ChangeListener<ImageData<BufferedImage>>. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/WorkflowCommandLogView.html:2791,update,updated,2791,javadoc/docs/qupath/lib/gui/panes/WorkflowCommandLogView.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/WorkflowCommandLogView.html,1,['update'],['updated']
Deployability,"ODE); @ActionConfig(""Tools.selectionMode""); public final org.controlsfx.control.action.Action SELECTION_MODE. Method Details. create; public static ToolManager create(); Create a new instance. Returns:. getTools; public ObservableList<PathTool> getTools(); Get a read-only list of all available tools.; If you wish to add a new one, use installTool(PathTool, KeyCodeCombination). Returns:. selectedToolProperty; public ReadOnlyObjectProperty<PathTool> selectedToolProperty(); Property containing the currently-selected PathTool.; If this needs to be changed, use setSelectedTool(PathTool) to ensure that ; isToolSwitchingEnabled() has an effect. Returns:; See Also:. getSelectedTool(); setSelectedTool(PathTool). lockSelectedToolProperty; public BooleanProperty lockSelectedToolProperty(); Property to request that the selected tool be locked.; Calls to setSelectedTool(PathTool) are discarded until the tool is unlocked. Returns:. installTool; public boolean installTool(PathTool tool,; KeyCodeCombination accelerator); Install a new tool for interacting with viewers. Parameters:; tool - the tool to add; accelerator - an optional accelerator (may be null); Returns:; true if the tool was added, false otherwise (e.g. if the tool had already been added). setSelectedTool; public void setSelectedTool(PathTool tool); Programmatically select the active PathTool.; This may fail if isToolSwitchingEnabled() returns false. Parameters:; tool - . getSelectedTool; public PathTool getSelectedTool(); Get the value of selectedToolProperty(). Returns:. getPreviousSelectedTool; public PathTool getPreviousSelectedTool(); Get the value of selectedToolProperty(). Returns:. previousSelectedToolProperty; public ReadOnlyObjectProperty<PathTool> previousSelectedToolProperty(); Property storing the previous tool that was selected.; This is useful for commands that might want to quickly toggle between tools. Returns:; See Also:. getPreviousSelectedTool(). setToolSwitchingEnabled; public void setToolSwitching",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ToolManager.html:6091,install,installTool,6091,javadoc/docs/qupath/lib/gui/ToolManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ToolManager.html,2,['install'],['installTool']
Deployability,"OException; Save the ImageData for this entry using the default storage location for the project. Parameters:; imageData - ; Throws:; IOException. readHierarchy; PathObjectHierarchy readHierarchy(); throws IOException; Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. Returns:; Throws:; IOException; See Also:. readImageData(); hasImageData(). hasImageData; boolean hasImageData(); Check if this entry has saved ImageData already available. Returns:. getSummary; String getSummary(); Get a summary string representing this image entry. Returns:. getThumbnail; T getThumbnail(); throws IOException; Request a thumbnail for the image. Returns:; a thumbnail if one has already been set, otherwise null.; Throws:; IOException. setThumbnail; void setThumbnail(T img); throws IOException; Set a thumbnail for the image. This will replace any existing thumbnail. Parameters:; img - ; Throws:; IOException. getServerURIs; @Deprecated; default Collection<URI> getServerURIs(); throws IOException; Deprecated.; use instead UriResource.getURIs(). Get a collection of the URIs required by this project's ImageServer.; ; The purpose of this is to help query if they can be found. They might not be ; e.g. if the images have been moved. Returns:; Throws:; IOException. updateServerURIs; @Deprecated; default boolean updateServerURIs(Map<URI,URI> replacements); throws IOException; Deprecated.; use instead UriResource.updateURIs(Map). Update the URIs for the server (optional operation). Parameters:; replacements - a map with current URIs as keys, and desired URIs as values.; Returns:; true if changes were made; Throws:; IOException. getMetadataSummaryString; default String getMetadataSummaryString(); Get a formatted string representation of the metadata map's contents. Returns:. getImages; ResourceManager.Manager<ImageServer<T>> getImages(); Access additional images associated with the project entry, e.g. pixel classifications or; aligned slides. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:7534,update,updateServerURIs,7534,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,3,['update'],"['updateServerURIs', 'updateURIs']"
Deployability,"PathObjects(Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Insert a collection of objects into the hierarchy, firing a change event on completion. insertPixelClassifiersAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; insertQPExImportAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; insertQPImportAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; insertSelectedObjectsInHierarchy(ImageData<?>) - Static method in class qupath.lib.gui.commands.Commands. Insert the selected objects in the hierarchy, resolving positions accordingly. insertText(int, String) - Method in interface qupath.lib.gui.scripting.EditableText. Request inserting the specified text. insertText(int, String) - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; insertText(int, String) - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; installActions(Collection<? extends Action>) - Method in class qupath.lib.gui.QuPathGUI. Install the specified actions. installColorMaps(Path...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps from the specified paths. installColorMaps(ColorMaps.ColorMap...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps. installCommand(String, Runnable) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath. installDefaultFeatureClassificationBuilder(ImageDataTransformerBuilder) - Static method in class qupath.process.gui.commands.ml.PixelClassifierPane. Add to the list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:606806,install,installActions,606806,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installActions']
Deployability,"Plugin, DelaunayClusteringPlugin, DetectCytokeratinCV, DilateAnnotationPlugin, DoGSuperpixelsPlugin, FillAnnotationHolesPlugin, FindConvexHullDetectionsPlugin, HaralickFeaturesPlugin, ImageJMacroRunner, IntensityFeaturesPlugin, LocalBinaryPatternsPlugin, PositiveCellDetection, PositivePixelCounterIJ, RefineAnnotationsPlugin, ShapeFeaturesPlugin, SimpleTissueDetection2, SLICSuperpixelsPlugin, SmoothFeaturesPlugin, SplitAnnotationsPlugin, SubcellularDetection, TileClassificationsToAnnotationsPlugin, TilerPlugin, TMADearrayerPluginIJ, WatershedCellDetection, WatershedCellMembraneDetection, WatershedNucleiCV. public interface PathPlugin<T>; Primary interface for defining a 'plugin' command.; ; Although the interface is very basic, developers wanting to create new plugins should general start ; by modifying an existing plugin that does something similar.; ; By paying attention to the type hierarchy and making use of the most appropriate interfaces/abstract classes, ; it is possible to get quite a bit of functionality 'for free', including scriptability and parallelization ; with appropriate calls to update the object hierarchy. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; String; getDescription(). Get a brief description of the plugin's purpose & operation. String; getLastResultsDescription(). (Optional) short one-line description of the results, e.g. String; getName(). Get the name of the plugin for display. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Method Details. getName; String getName(); Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; String getDescription(); Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; boolean run",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html:1730,update,update,1730,javadoc/docs/qupath/lib/plugins/PathPlugin.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathPlugin.html,1,['update'],['update']
Deployability,"Prefs.FontSize;  ; MEMBRANE - Enum constant in enum class qupath.lib.analysis.features.ObjectMeasurements.Compartments. Cell boundary, with interior removed. memoizationTimeMillis - Variable in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension.BioFormatsPreferences;  ; MEMORY_MONITORY - Variable in class qupath.lib.gui.actions.menus.ViewMenuActions.Actions;  ; memoryReport(CharSequence) - Static method in class qupath.opencv.tools.OpenCVTools. Create a brief report on memory use, based on JavaCPP's Pointer class. menu() - Element in annotation interface qupath.lib.gui.actions.annotations.ActionConfig;  ; MenuActions - Interface in qupath.lib.gui.actions.menus. Common interface to define the contents of a menu in terms of actions. menuPathProperty() - Method in class qupath.lib.gui.tools.CommandFinderTools.CommandEntry. Property corresponding to CommandFinderTools.CommandEntry.getMenuPath(). Menus - Class in qupath.lib.gui.actions.menus. Generate actions for installation in QuPath's main menubar. Menus() - Constructor for class qupath.lib.gui.actions.menus.Menus;  ; menusToMarkdown() - Static method in class qupath.lib.gui.tools.CommandFinderTools. Create a markdown representation of the menus for inclusion in the documentation, ; using the current QuPath instance. menusToMarkdown(QuPathGUI, Writer) - Static method in class qupath.lib.gui.tools.CommandFinderTools. Write a markdown representation of the menus for inclusion in the documentation. MenuTools - Class in qupath.lib.gui.tools. Static methods to help with creating and populating JavaFX menus. MenuTools() - Constructor for class qupath.lib.gui.tools.MenuTools;  ; merge(Collection<? extends PathObject>) - Method in class qupath.lib.objects.utils.ObjectMerger. Calculate the result of applying the merging strategy to the input objects. MERGE_SELECTED - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.AnnotationActions;  ; mergeAnnotations(Collection<PathObject>) - Static metho",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:686516,install,installation,686516,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installation']
Deployability,"Property; Property for the image data currently being displayed within this viewer. See Also:. getImageData(); setImageData(ImageData); imageDataProperty(). gamma; public DoubleProperty gammaProperty; Get the gamma property for this viewer.; By default, this is bound to PathPrefs.viewerGammaProperty(). See Also:. getGamma(); setGamma(double); gammaProperty(). rotation; public DoubleProperty rotationProperty; Return the rotation property of this viewer. See Also:. getRotation(); setRotation(double); rotationProperty(). zPosition; public IntegerProperty zPositionProperty; Current z-position for the z-slice currently visible in the viewer. See Also:. getZPosition(); setZPosition(int); zPositionProperty(). tPosition; public IntegerProperty tPositionProperty; Current t-position for the timepoint currently visible in the viewer. See Also:. getTPosition(); setTPosition(int); tPositionProperty(). Field Details. imageUpdated; protected boolean imageUpdated; Flag used to indicate that the image was updated for a repaint (otherwise it's assumed only the overlay may have changed). locationUpdated; protected boolean locationUpdated; Flag used to indicate that the visible region in the viewer has changed. Constructor Details. QuPathViewer; public QuPathViewer(DefaultImageRegionStore regionStore,; OverlayOptions overlayOptions); Create a new viewer. Parameters:; regionStore - store used to tile caching; overlayOptions - overlay options to control the viewer display. Method Details. getView; public Pane getView(); Get the main JavaFX component representing this viewer.; This is what should be added to a scene. Returns:. setMinimumRepaintSpacingMillis; public void setMinimumRepaintSpacingMillis(long repaintSpacingMillis); Prevent frequent repaints (temporarily) by setting a minimum time that must have elapsed; after the previous repaint for a new one to be triggered.; (Repaint requests that come in between are simply disregarded for performance.); ; When finished, it's necessary to c",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html:14842,update,updated,14842,javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,1,['update'],['updated']
Deployability,"QuPathGUI) - Static method in class qupath.lib.gui.commands.PathObjectGridView. Create a grid view for TMA core objects. createTMAGrid(String, String, boolean, double) - Static method in class qupath.lib.scripting.QP. Create a new regular TMAGrid and set it as active on the hierarchy for the current image. createTMAGrid(String, String, boolean, double, ImageRegion) - Static method in class qupath.lib.objects.PathObjectTools. Create a new regular TMAGrid, fit within a specified region. createTMAGrid(ImageData<?>, String, String, boolean, double) - Static method in class qupath.lib.scripting.QP. Create a new regular TMAGrid and set it as active on the hierarchy for an image. createToggleButton(Action) - Static method in class qupath.lib.gui.actions.ActionTools. Create a toggle button from an action, showing both the text and graphic if available. createToggleButtonWithGraphicOnly(Action) - Static method in class qupath.lib.gui.actions.ActionTools. Create a toggle button from an action, showing only the graphic and not any text. createTool(EventHandler<MouseEvent>, String, Node) - Static method in class qupath.lib.gui.viewer.tools.PathTools. Create a tool from the specified MouseEvent handler. createTool(EventType<T>, EventHandler<T>, String, Node) - Static method in class qupath.lib.gui.viewer.tools.PathTools. Create a tool from the specified event handler. createTouchingMerger() - Static method in class qupath.lib.objects.utils.ObjectMerger. Create an object merger that can merge together any objects with similar ROIs (e.g. createTracedGeometry(Raster, double, double, int, RegionRequest) - Static method in class qupath.lib.analysis.images.ContourTracing. Create a traced geometry from a raster. createTracedGeometry(SimpleImage, double, double, RegionRequest) - Static method in class qupath.lib.analysis.images.ContourTracing. Create a traced geometry from a SimpleImage. createTracedROI(Raster, double, double, int, RegionRequest) - Static method in class qupath.lib.anal",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:231257,toggle,toggle,231257,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['toggle'],['toggle']
Deployability,"QuPathGUI. Install the specified actions. installColorMaps(Path...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps from the specified paths. installColorMaps(ColorMaps.ColorMap...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps. installCommand(String, Runnable) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath. installDefaultFeatureClassificationBuilder(ImageDataTransformerBuilder) - Static method in class qupath.process.gui.commands.ml.PixelClassifierPane. Add to the list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageData<BufferedImage>>) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath that takes the current ImageData as input. installInfoMessage(Actio",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:607866,install,installExtension,607866,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installExtension']
Deployability,"RIs for one or more UriResource objects. Parameters:; resources - ; Returns:; Throws:; IOException. create; public static <T extends UriResource> UriUpdater<T> create(Collection<T> resources,; Collection<UriUpdater.SingleUriItem> items,; Map<UriUpdater.SingleUriItem,UriUpdater.SingleUriItem> replacements); throws IOException; Create a new UriUpdater using the specified collections.; The main use of this is as a convenience to build a UI using observable collections. Parameters:; resources - collection of resources that may include URIs; items - collection containing all the distinct URIs from resources, each as a UriUpdater.SingleUriItem. ; Note that this collection will be regenerated, so any existing items in the collection will be removed.; replacements - map used to store any replacements identified by the UriUpdater. Note that any existing contents will be discarded.; Returns:; Throws:; IOException. wrap; public static UriResource wrap(URI... uris); Wrap one or more URIs in a UriResource so they can be updated together.; Any changes can then be requred from the UriResource. Parameters:; uris - ; Returns:. wrap; public static UriResource wrap(Collection<URI> uris); Wrap one or more URIs in a UriResource so they can be updated together.; Note that the collection is not used directly. Any changes should be accessed from the ; UriResource. Parameters:; uris - ; Returns:. locateFile; public static URI locateFile(URI uri,; int searchDepth,; Path... searchPaths); throws IOException; Attempt to update a URI to find an existing file using the specified search paths. Parameters:; uri - the URI to search for; searchDepth - the depth of the search (i.e. how many subdirectories); searchPaths - the base directories to search, in order; Returns:; a new URI corresponding to an existing file with the same name, ; or the original URI if no replacement was found or required; Throws:; IOException. locateFile; public static String locateFile(String path,; int searchDepth,; Path... s",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html:5026,update,updated,5026,javadoc/docs/qupath/lib/io/UriUpdater.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html,1,['update'],['updated']
Deployability,"Read an OpenCV Mat from a Numpy .npy file. readMat(Path, boolean) - Static method in class qupath.opencv.tools.NumpyTools. Read an OpenCV Mat from a Numpy .npy file, optionally squeezing singleton dimensions. readObjects(File) - Static method in class qupath.lib.io.PathIO. Read a list of PathObject from a file. readObjects(Path) - Static method in class qupath.lib.io.PathIO. Read a list of PathObject from a file. readObjectsFromClipboard(ImageData<BufferedImage>) - Static method in class qupath.lib.gui.commands.InteractiveObjectImporter. Try to read objects from the system clipboard. readObjectsFromGeoJSON(InputStream) - Static method in class qupath.lib.io.PathIO. Read a list of PathObject from an input stream. readOnlyProperty() - Method in class qupath.lib.gui.QuPathGUI. Property indicating whether QuPath is in 'read-only' mode. readPatch(ImageServer<BufferedImage>, ROI, double, int, int) - Static method in class qupath.opencv.dnn.DnnTools. Read an image patch, optionally with a fixed size and using zero-padding if required. readPatch(ImageServer<BufferedImage>, ROI, double, int, int, int) - Static method in class qupath.opencv.dnn.DnnTools. Read an image patch, optionally with a fixed size. readPathObjects() - Method in class qupath.imagej.images.servers.ImageJServer;  ; readPathObjects() - Method in class qupath.lib.gui.images.servers.ChannelDisplayTransformServer;  ; readPathObjects() - Method in interface qupath.lib.objects.PathObjectReader. Read a collection of objects from the source. readPoints(File) - Static method in class qupath.lib.io.PointIO. Read a list of point annotations from a file. readPoints(InputStream) - Static method in class qupath.lib.io.PointIO. Read a list of point annotations from a stream. readPointsObjectList(File) - Static method in class qupath.lib.io.PointIO. Deprecated. readRegion(double, int, int, int, int) - Method in interface qupath.lib.images.servers.ImageServer. Read a 2D(+C) image region from the default ImagePlane (i.e. re",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:826217,patch,patch,826217,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,"SnapToPixel, layoutInArea, layoutInArea, layoutInArea, layoutInArea, maxHeight, maxHeightProperty, maxWidth, maxWidthProperty, minHeight, minHeightProperty, minWidth, minWidthProperty, opaqueInsetsProperty, paddingProperty, positionInArea, positionInArea, prefHeight, prefHeightProperty, prefWidth, prefWidthProperty, resize, scaleShapeProperty, setBackground, setBorder, setCacheShape, setCenterShape, setHeight, setMaxHeight, setMaxSize, setMaxWidth, setMinHeight, setMinSize, setMinWidth, setOpaqueInsets, setPadding, setPrefHeight, setPrefSize, setPrefWidth, setScaleShape, setShape, setSnapToPixel, setWidth, shapeProperty, snappedBottomInset, snappedLeftInset, snappedRightInset, snappedTopInset, snapPosition, snapPositionX, snapPositionY, snapSize, snapSizeX, snapSizeY, snapSpace, snapSpaceX, snapSpaceY, snapToPixelProperty, widthProperty. Methods inherited from class javafx.scene.Parent; getBaselineOffset, getChildrenUnmodifiable, getManagedChildren, getStylesheets, isNeedsLayout, layout, lookup, needsLayoutProperty, queryAccessibleAttribute, requestParentLayout, setNeedsLayout, updateBounds. Methods inherited from class javafx.scene.Node; accessibleHelpProperty, accessibleRoleDescriptionProperty, accessibleRoleProperty, accessibleTextProperty, addEventFilter, addEventHandler, applyCss, autosize, blendModeProperty, boundsInLocalProperty, boundsInParentProperty, buildEventDispatchChain, cacheHintProperty, cacheProperty, clipProperty, computeAreaInScreen, contains, contains, cursorProperty, depthTestProperty, disabledProperty, disableProperty, effectiveNodeOrientationProperty, effectProperty, eventDispatcherProperty, executeAccessibleAction, fireEvent, focusedProperty, focusTraversableProperty, focusVisibleProperty, focusWithinProperty, getAccessibleHelp, getAccessibleRole, getAccessibleRoleDescription, getAccessibleText, getBlendMode, getBoundsInLocal, getBoundsInParent, getCacheHint, getClip, getCursor, getDepthTest, getEffect, getEffectiveNodeOrientation, getEventDi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ExtensionControlPane.html:4970,update,updateBounds,4970,javadoc/docs/qupath/lib/gui/ExtensionControlPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ExtensionControlPane.html,3,['update'],['updateBounds']
Deployability,"TMACoreObject(double, double, double, double, boolean, ImagePlane) - Static method in class qupath.lib.objects.PathObjects. Create a TMA core object with an ellipse ROI. createTmaCoreView(QuPathGUI) - Static method in class qupath.lib.gui.commands.PathObjectGridView. Create a grid view for TMA core objects. createTMAGrid(String, String, boolean, double) - Static method in class qupath.lib.scripting.QP. Create a new regular TMAGrid and set it as active on the hierarchy for the current image. createTMAGrid(String, String, boolean, double, ImageRegion) - Static method in class qupath.lib.objects.PathObjectTools. Create a new regular TMAGrid, fit within a specified region. createTMAGrid(ImageData<?>, String, String, boolean, double) - Static method in class qupath.lib.scripting.QP. Create a new regular TMAGrid and set it as active on the hierarchy for an image. createToggleButton(Action) - Static method in class qupath.lib.gui.actions.ActionTools. Create a toggle button from an action, showing both the text and graphic if available. createToggleButtonWithGraphicOnly(Action) - Static method in class qupath.lib.gui.actions.ActionTools. Create a toggle button from an action, showing only the graphic and not any text. createTool(EventHandler<MouseEvent>, String, Node) - Static method in class qupath.lib.gui.viewer.tools.PathTools. Create a tool from the specified MouseEvent handler. createTool(EventType<T>, EventHandler<T>, String, Node) - Static method in class qupath.lib.gui.viewer.tools.PathTools. Create a tool from the specified event handler. createTouchingMerger() - Static method in class qupath.lib.objects.utils.ObjectMerger. Create an object merger that can merge together any objects with similar ROIs (e.g. createTracedGeometry(Raster, double, double, int, RegionRequest) - Static method in class qupath.lib.analysis.images.ContourTracing. Create a traced geometry from a raster. createTracedGeometry(SimpleImage, double, double, RegionRequest) - Static method in class q",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:231067,toggle,toggle,231067,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['toggle'],['toggle']
Deployability,"UI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageData<BufferedImage>>) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath that takes the current ImageData as input. installInfoMessage(Action, ObjectExpression<InfoMessage>) - Static method in class qupath.lib.gui.actions.ActionTools. Install an optional info message to the action. installRangePrompt(Slider) - Static method in class qupath.lib.gui.tools.GuiTools. Install a mouse click listener to prompt the user to input min/max values for a slider. installStyles(Collection<File>) - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Handle installing CSS files (which can be used to style QuPath). installTool(PathTool, KeyCodeCombination) - Method in class qupath.lib.gui.ToolManager. Install a new tool for interacting with viewers. INT16 - Enum constant in enum class qupath.lib.images.servers.PixelType. 16-bit signed integer. INT32 - Enum constant in enum class qupath.lib.images.servers.PixelType. 32-bit signed integer. INT8 - Enum constant in enum ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:608674,install,installImageDataCommand,608674,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installImageDataCommand']
Deployability,"VDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVDnn; public OpenCVDnn(). Method Details. buildNet; public Net buildNet(); Build the OpenCV Net. This is a lower-level function than buildModel(), which provides ; more options to query the network architecture but does not incorporate any preprocessing steps. Returns:. buildModel; public <T extends Model> T buildModel(OpenCVDnn.ModelType type); Build a model, specifying the OpenCVDnn.ModelType. Type Parameters:; T - ; Parameters:; type - ; Returns:; See Also:. buildModel(). buildModel; public <T extends Model> T buildModel(); Build a model. The return type is determined by the OpenCVDnn.ModelType. Type Parameters:; T - ; Returns:; See Also:. buildModel(ModelType). initializeModel; public void initializeModel(Model model); Initialize the model with the same preprocessing defined here (i.e. input size, mean, scale, crop, swapRB). Parameters:; model - . getName; public String getName(); Get a user-readable name for this model, or null if no name",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:3426,update,updateUris,3426,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,1,['update'],['updateUris']
Deployability,"Version>. public class Version; extends Object; implements Comparable<Version>; Helper class for working with semantic versioning.; ; This should be in the form major.minor.patch.; An optional suffix is also permitted to indicate a pre-release, alpha, beta or milestone version,; in the form major.minor.patch-suffix, where the suffix may contain any alphanumeric characters or periods.; ; Implementation note: No checking is currently performed to ensure any suffix conforms to semantic ; versioning standards - however this behavior may change. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final Comparator<Version>; COMPARATOR_FULL. Compare full version, including any suffixes. static final Comparator<Version>; COMPARATOR_MAJOR. Compare major versions only. static final Comparator<Version>; COMPARATOR_MAJOR_MINOR. Compare major then minor versions. static final Comparator<Version>; COMPARATOR_MAJOR_MINOR_PATCH. Compare major then minor then patch versions (ignoring suffixes). static final Version; UNKNOWN. Constant representing any unknown version. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compareTo(Version o);  ; boolean; equals(Object obj);  ; int; getMajor(). Get the major version number (X.0.0). int; getMinor(). Get the minor version number (0.X.0). int; getPatch(). Get the patch version number (0.0.X). String; getSuffix(). Get the (optional) suffix, which may be appended at the end of the version ; number to indicate a pre-release (0.0.0-X). int; hashCode();  ; boolean; hasSuffix(). Returns true if the version has a suffix, which typically indicates that it ; does not refer to a final stable version. static Version; parse(String versionString). Parse a Version object representing a semantic version number from a String. String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wa",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html:1447,patch,patch,1447,javadoc/docs/qupath/lib/common/Version.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html,1,['patch'],['patch']
Deployability,"ace defining a style that may be applied to QuPath. Constructor Summary; Constructors. Constructor; Description; QuPathStyleManager();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ObservableList<QuPathStyleManager.Fonts>; availableFontsProperty(). Get a list of available fonts. static ObservableList<QuPathStyleManager.StyleOption>; availableStylesProperty(). Get the current available styles as an observable list. static ObjectProperty<QuPathStyleManager.Fonts>; fontProperty(). Get the current selected font. static boolean; installStyles(Collection<File> list). Handle installing CSS files (which can be used to style QuPath). static boolean; isDefaultStyle(). Check if the default JavaFX style is used. static void; refresh(). Refresh the current style. static ObjectProperty<QuPathStyleManager.StyleOption>; selectedStyleProperty(). Get the current selected style. static void; updateAvailableStyles(). Request that the list of available styles is updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. availableStyles; public static ObservableList<QuPathStyleManager.StyleOption> availableStylesProperty; Get the current available styles as an observable list.; The list is unmodifiable, since any changes should be made via adding/removing files in UserDirectoryManager.getCssStylesPath(). See Also:. availableStylesProperty(). selectedStyle; public static ObjectProperty<QuPathStyleManager.StyleOption> selectedStyleProperty; Get the current selected style. See Also:. selectedStyleProperty(). availableFonts; public static ObservableList<QuPathStyleManager.Fonts> availableFontsProperty; Get a list of available fonts.; The list is unmodifiable, since this is primarily used to overcome issues with the default font on macOS ; by changing the font family. More fine-grained changes can be made via css. See Also:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html:2365,update,updated,2365,javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,1,['update'],['updated']
Deployability,"addShapeMeasurements(PathObject pathObject,; PixelCalibration cal,; ObjectMeasurements.ShapeFeatures... features); Add shape measurements for one object. If this is a cell, measurements will be made for both the ; nucleus and cell boundary where possible. Parameters:; pathObject - the object for which measurements should be added; cal - pixel calibration, used to determine units and scaling; features - specific features to add; if empty, all available shape features will be added. addShapeMeasurements; public static void addShapeMeasurements(Collection<? extends PathObject> pathObjects,; PixelCalibration cal,; ObjectMeasurements.ShapeFeatures... features); Add shape measurements for multiple objects. If any of these objects is a cell, measurements will be made for both the ; nucleus and cell boundary where possible. Parameters:; pathObjects - the objects for which measurements should be added; cal - pixel calibration, used to determine units and scaling; features - specific features to add; if empty, all available shape features will be added. addIntensityMeasurements; public static void addIntensityMeasurements(ImageServer<BufferedImage> server,; PathObject pathObject,; double downsample,; Collection<ObjectMeasurements.Measurements> measurements,; Collection<ObjectMeasurements.Compartments> compartments); throws IOException; Measure all channels of an image for one individual object or cell.; All compartments are measured where possible (nucleus, cytoplasm, membrane and full cell).; ; Note: This implementation is likely to change in the future, to enable neighboring cells to be ; measured more efficiently. Parameters:; server - the server containing the pixels (and channels) to be measured; pathObject - the cell to measure (the MeasurementList will be updated); downsample - resolution at which to request pixels; measurements - requested measurements to make; compartments - the cell compartments to measure; ignored if the object is not a cell; Throws:; IOException. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/features/ObjectMeasurements.html:3890,update,updated,3890,javadoc/docs/qupath/lib/analysis/features/ObjectMeasurements.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/features/ObjectMeasurements.html,1,['update'],['updated']
Deployability,"ages.servers.SparseImageServer.Builder. Build a new SparseImageServer. build() - Method in class qupath.lib.images.servers.TransformedServerBuilder. Get the ImageServer that applies all the requested transforms. build() - Method in class qupath.lib.images.writers.ome.OMEPyramidWriter.Builder. Create an OMEPyramidWriter.OMEPyramidSeries to write the OME-TIFF. build() - Method in class qupath.lib.objects.utils.Tiler.Builder. Build a tiler object with the current settings. build() - Method in class qupath.lib.roi.GeometryTools.GeometryConverter.Builder. Build a new converter with the specified parameters. build() - Method in class qupath.lib.scripting.ScriptParameters.Builder. Build the ScriptParameters with the current options. build() - Method in class qupath.opencv.dnn.DnnModelParams.Builder. Build the params. build() - Method in class qupath.opencv.dnn.OpenCVDnn.Builder. Build a new OpenCVDnn. build() - Method in class qupath.opencv.ml.PatchClassifierParams.Builder. Build the patch classifier parameters. build() - Method in class qupath.process.gui.commands.ui.SaveResourcePaneBuilder. Build the pane. build(List<Mat>) - Method in class qupath.opencv.tools.MultiscaleFeatures.MultiscaleResultsBuilder. Calculate results as a list of maps connecting features and Mats for all slices of a z-stack. build(List<Mat>, int) - Method in class qupath.opencv.tools.MultiscaleFeatures.MultiscaleResultsBuilder. Calculate results for a map of features and Mats for one slice of a z-stack. build(Mat) - Method in class qupath.opencv.tools.MultiscaleFeatures.MultiscaleResultsBuilder. Calculate results for a single Mat. build(Mat, boolean) - Method in class qupath.opencv.ml.FeaturePreprocessor.Builder. Build a FeaturePreprocessor. buildClassifier(ImageData<BufferedImage>) - Method in class qupath.lib.analysis.heatmaps.DensityMaps.DensityMapBuilder. Build a PixelClassifier for a density map using the current parameters and the specified ImageData. buildDnnModel(BioimageIoSpec.BioimageIoMode",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:71166,patch,patch,71166,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,"al ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Speci",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:9385,update,updatePlane,9385,javadoc/docs/qupath/lib/roi/GeometryROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html,1,['update'],['updatePlane']
Deployability,"alibration; getInputResolution(). Get the requested input resolution for the image. ImageServerMetadata.ChannelType; getOutputChannelType(). Get the requested output channel type. Map<Integer,PathClass>; getOutputClasses(). Get the classifications for the output. int; getPatchHeight(). Get the height of a patch, in pixels. int; getPatchWidth(). Get the width of a patch, in pixels. List<ImageOp>; getPostprocessing(). Get any postprocessing steps that should be applied after prediction. ImageOp; getPredictionOp(). Get the image op used for prediction only. List<ImageOp>; getPreprocessing(). Get any preprocessing steps that should be applied. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getInputChannels; public List<ColorTransforms.ColorTransform> getInputChannels(); Get the channels to extract from the image as input to the model. Returns:. getPatchWidth; public int getPatchWidth(); Get the width of a patch, in pixels. Returns:. getPatchHeight; public int getPatchHeight(); Get the height of a patch, in pixels. Returns:. getHalo; public Padding getHalo(); Get the 'halo' around the output.; This can be used to determine appropriate padding to ; avoid tile boundary artifacts. ; Can be null or empty. Returns:. getInputResolution; public PixelCalibration getInputResolution(); Get the requested input resolution for the image. Returns:. getOutputChannelType; public ImageServerMetadata.ChannelType getOutputChannelType(); Get the requested output channel type. Returns:. getOutputClasses; public Map<Integer,PathClass> getOutputClasses(); Get the classifications for the output.; Keys to the map are generally channel numbers of the output ; (zero-based), or could be labels in a single-channel labeled image. Returns:. getPreprocessing; public List<ImageOp> getPreprocessing(); Get any preprocessing steps that should be applied. Returns:. getPredictionOp; public ImageOp getP",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html:2754,patch,patch,2754,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,1,['patch'],['patch']
Deployability,"all objects).; Generated with a UUID for uniqueness, and because it should not be serialized. ANY_POSITIVE_CLASS; public static final PathClass ANY_POSITIVE_CLASS; Accept any positive classification, including 1+, 2+, 3+.; Generated with a UUID for uniqueness, and because it should not be serialized. Constructor Details. DensityMapUI; public DensityMapUI(). Method Details. createSaveDensityMapPane; public static Pane createSaveDensityMapPane(ObjectExpression<Project<BufferedImage>> project,; ObjectExpression<DensityMaps.DensityMapBuilder> densityMap,; StringProperty savedName); Create a pane that can be used to save a DensityMaps.DensityMapBuilder, with standardized display and prompts. Parameters:; project - ; densityMap - ; savedName - ; Returns:. createButtonPane; public static Pane createButtonPane(QuPathGUI qupath,; ObjectExpression<ImageData<BufferedImage>> imageData,; ObjectExpression<DensityMaps.DensityMapBuilder> builder,; StringExpression densityMapName,; ObjectExpression<PixelClassificationOverlay> overlay,; boolean enableUnsavedButton); Create a pane containing standardized buttons associated with processing a density map (find hotspots, threshold, export map).; ; Note that because density maps need to reflect the current hierarchy, but should be relatively fast to compute (at low resolution), ; the full density map is generated upon request. Parameters:; qupath - QuPathGUI instance, used to identify viewers; imageData - expression returning the ImageData to use; builder - expression returning the DensityMaps.DensityMapBuilder to use; densityMapName - name of the density map, if it has been saved (otherwise null). This is used for writing workflow steps.; overlay - optional overlay; if present, this could be used by commands to update display (e.g. by temporarily setting a color model).; enableUnsavedButton - add button to enable buttons even if no name is available (indicating the map has not been saved).; Returns:; a pane that may be added to a stage. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/process/gui/commands/density/DensityMapUI.html:3693,update,update,3693,javadoc/docs/qupath/process/gui/commands/density/DensityMapUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/process/gui/commands/density/DensityMapUI.html,1,['update'],['update']
Deployability,"als, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Returns:. predict; public Map<String,Mat> predict(Map<String,Mat> blobs); Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; blobs - ; Returns:. predict; public Mat predict(Mat mat); Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat.; ; Note that this only supports a batch size of 1. For larger batches or more control, getBlobFunction(String) and; getPredictionFunction() should be used directly. Specified by:; predict in interface DnnModel; Parameters:; mat - ; Returns:. batchPredict; public List<Mat> batchPredict(List<? extends Mat> mats); Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats.; This method ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:3620,patch,patches,3620,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,1,['patch'],['patches']
Deployability,"ame as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region); Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating objects have changed, and may still be changing. Parameters:; source - ; pathObjects - ; isChanging - is true, listeners may choose not to respond until an event is fired with isChanging false. fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source,; PathObject pathObject); Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. Parameters:; source - ; pathOb",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:20194,update,update,20194,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,1,['update'],['update']
Deployability,"anProperty disableUpdatesProperty; Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the table being updated even when ; it is not visible to the user. See Also:. disableUpdatesProperty(). Constructor Details. PathObjectHierarchyView; public PathObjectHierarchyView(QuPathGUI qupath); Constructor. Parameters:; qupath - the current QuPath instance. PathObjectHierarchyView; public PathObjectHierarchyView(QuPathGUI qupath,; ObservableValue<ImageData<BufferedImage>> imageDataProperty); Constructor. Parameters:; qupath - the current QuPath instance; imageDataProperty - the ImageData to display. Method Details. getPane; public Pane getPane(); Get the pane for display. Returns:. disableUpdatesProperty; public BooleanProperty disableUpdatesProperty(); Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the table being updated even when ; it is not visible to the user. Returns:. selectedPathObjectChanged; public void selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected); Description copied from interface: PathObjectSelectionListener; Fired when the selected objects have changed. Specified by:; selectedPathObjectChanged in interface PathObjectSelectionListener; Parameters:; pathObjectSelected - the primary selected object; previousObject - the previous primary selected object; allSelected - all currently selected objects (including the primary). changed; public void changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew). Specified by:; changed in interface ChangeListener<ImageData<BufferedImage>>. hierarchyChanged; public void hierarchyChanged(PathObjectHierarchyEvent event); Description copied from interface: PathObjectHierarchyLis",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html:3204,update,updated,3204,javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html,1,['update'],['updated']
Deployability,"anged(). Returns true if changes have been recorded since the last time this object was notified that it was saved. boolean; isFluorescence(). Returns true if the image type is set to fluorescence. Object; removeProperty(String key). Remove a specified property. void; removePropertyChangeListener(PropertyChangeListener listener). Remove a property change listener. void; setChanged(boolean isChanged). Set isChanged() status. void; setColorDeconvolutionStains(ColorDeconvolutionStains stains). Set the color deconvolution stain vectors for the current image type. void; setImageType(ImageData.ImageType type). Set the image type. void; setLastSavedPath(String path,; boolean resetChanged). Set the last path used to save this object;. Object; setProperty(String key,; Object value). Set a property. String; toString();  ; void; updateServerMetadata(ImageServerMetadata newMetadata). Update the ImageServer metadata. void; workflowUpdated(Workflow workflow). Called whenever a Workflow has been updated in some way, such as a new step added. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. ImageData; public ImageData(ImageServer<T> server,; PathObjectHierarchy hierarchy,; ImageData.ImageType type); Create a new ImageData with a specified object hierarchy and type. Parameters:; server - ; hierarchy - ; type - . ImageData; public ImageData(ImageServer<T> server,; ImageData.ImageType type); Create a new ImageData with a specified type and creating a new object hierarchy. Parameters:; server - ; type - . ImageData; public ImageData(ImageServer<T> server,; PathObjectHierarchy hierarchy); Create a new ImageData with ImageType.UNKNOWN. Parameters:; server - ; hierarchy - . ImageData; public ImageData(ImageServer<T> server); Create a new ImageData with ImageType.UNKNOWN and a new PathObjectHierarchy. Parameters:; server - . Method Details. getHistoryWorkflow; public Workflow getHistoryWorkf",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/ImageData.html:4043,update,updated,4043,javadoc/docs/qupath/lib/images/ImageData.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/ImageData.html,1,['update'],['updated']
Deployability,"anged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). getSuitableName; public static String getSuitableName(Class<? extends PathObject> cls,; boolean makePlural); Get a user-friendly name for a specific type of PathObject, based on its Java class. Parameters:; cls - ; makePlural - ; Returns:. containsObject; @Deprecated; public static boolean containsObject(PathObject parentObject,; PathObject childObject); Deprecated.; Test whether the ROI associated with one object can completely the ROI of a second object.; Returns false if either ROI is null. Parameters:; parentObject - ; childObject - ; Returns:. isAncestor; public static boolean isAncestor(PathObject pathObject,; PathObject possibleAncestor); Query if one object is the ancestor of another. Parameters:; pathObject - ; possibleAncestor - ; Returns:. getTMACoreObjects; public static List<TMACoreObject> getTMACoreObjects(PathObjectHierarchy hierarchy,; boolean includeMissingCores); Extract a list of TMA cores from an object hierarchy. If no cores are pre",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:22938,update,updatePlaneRecursive,22938,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['update'],['updatePlaneRecursive']
Deployability,"ant. div(Mat, Mat) - Static method in class qupath.opencv.tools.GroovyCV. Per-element division of two arrays. divide(double...) - Static method in class qupath.opencv.ops.ImageOps.Core. Divide all pixels by a constant. dnn(DnnModel, int, int, Padding, String...) - Static method in class qupath.opencv.ops.ImageOps.ML. Apply a DnnModel to pixels to generate a prediction. DnnModel - Interface in qupath.opencv.dnn. General interface for implementing a deep learning model in a pipeline using OpenCV. DnnModelBuilder - Interface in qupath.opencv.dnn. Builder to create a DnnModel from DnnModelParams. DnnModelParams - Class in qupath.opencv.dnn. Parameters to build a DnnModel. DnnModelParams.Builder - Class in qupath.opencv.dnn. Builder for DnnModelParams. DnnModels - Class in qupath.opencv.dnn. Helper class for building new DnnModels. DnnModels() - Constructor for class qupath.opencv.dnn.DnnModels;  ; DnnObjectClassifier - Class in qupath.opencv.dnn. Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN. DnnObjectClassifier(PathObjectFilter, DnnModel, List<PathClass>, int, int, double) - Constructor for class qupath.opencv.dnn.DnnObjectClassifier. Constructor. DnnShape - Class in qupath.opencv.dnn. Helper class to represent input and output shapes associated with PredictionFunction. DnnTools - Class in qupath.opencv.dnn. Tools for working with OpenCV's DNN module. DnnTools() - Constructor for class qupath.opencv.dnn.DnnTools;  ; DnnTools.DNNLayer - Class in qupath.opencv.dnn. Helper class to summarize a DNN layer. do8BitRangeCheck(double) - Static method in class qupath.lib.common.ColorTools. Clip an input value to be an integer in the range 0-255 (with rounding down). do8BitRangeCheck(float) - Static method in class qupath.lib.common.ColorTools. Clip an input value to be an integer in the range 0-255 (with rounding down). do8BitRangeCheck(int) - Static method in class qupath.lib.common.ColorTools. Clip an input value to be an integer in the",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:266285,patch,patch-based,266285,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch-based']
Deployability,"ape. Constant to represent an unknown dimension length. UNKNOWN_SHAPE - Static variable in class qupath.opencv.dnn.DnnShape. Constant to represent an unknown shape. UNKNOWN_SIZE - Static variable in class qupath.opencv.dnn.DnnShape. Constant to represent an unknown size (i.e. unlimitedDatapoints() - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder. Show all datapoints, without subsampling, even when this may cause performance issues. UNLOCK_SELECTED_OBJECTS - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.LockActions;  ; UNLOCKED - Enum constant in enum class qupath.lib.objects.PathObjectFilter. Accept any object that is 'unlocked'. unlockObjects(PathObjectHierarchy, Collection<? extends PathObject>) - Static method in class qupath.lib.objects.PathObjectTools. Set specified objects to be 'unlocked'. unlockSelectedObjects(PathObjectHierarchy) - Static method in class qupath.lib.objects.PathObjectTools. Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. unmanageMenuBar(MenuBar) - Static method in class qupath.lib.gui.prefs.SystemMenuBar. Do not manage the system menubar status for the given menubar. unpackARGB(int) - Static method in class qupath.lib.common.ColorTools. Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. unpackARGB(int, int[]) - Static method in class qupath.lib.common.ColorTools. Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. unpackRGB(int) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. unpackRGB(int, int[]) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. UNSET - Enum constant in enum class qupath.lib.images.ImageData.ImageType. Image type has not been set. unzip",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1060071,update,update,1060071,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"arPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. suggestNeighbor; public boolean suggestNeighbor(ParallelTileObject pto); Register a neighboring tile, if it intersects with the bounds of this one. Parameters:; pto - ; Returns:. updateStatus; public void updateStatus(ParallelTileObject.Status status); Notify the object if it is currently being processed.; ; This is used to update how it is displayed (here implemented using a classification). Parameters:; status - . getStatus; public ParallelTileObject.Status getStatus(); Get the current status (pending, processing or done). Returns:. isProcessing; public boolean isProcessing(); Returns true if setIsProcessing(true) has recently been called. Returns:. isComplete; public boolean isComplete(); Returns true if setComplete() has been called. Returns:. setComplete; public void setComplete(boolean wasCancelled); Notify the tile that its processing is done.; ; This both changes its display color, and triggers a check to see if overlaps with; detections made in adjacent tiles can be resolved. Parameters:; wasCancelled - . resolveOverlaps; public void resolveOverlaps(); Request that the tile object attempts to resolve overlaps with its neighboring tiles. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:3523,update,updateStatus,3523,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,3,['update'],"['update', 'updateStatus']"
Deployability,"aralickFeaturesPlugin. Plugin for calculating Haralick texture features, within or around detections or tiles. HelpMenuActions;  ; HierarchyOverlay. An overlay capable of painting a PathObjectHierarchy, except for any ; TMA grid (which is handled by TMAGridOverlay). Histogram. Class for storing histogram data & basic statistics. HistogramChart. JavaFX chart for displaying histograms. HistogramChart.CountsTransformMode. Enum to specify how the counts are displayed. HistogramChart.DisplayMode. Display mode for the histogram. HistogramChart.HistogramData. Helper class for representing data that may be visualized with a HistogramChart. HistogramDisplay. Wrapper close to enable the generation and display of histograms relating to a data table. HtmlRenderer. Marker interface that indicates an executable language renders HTML. IconFactory. Factory class for creating icons. IconFactory.PathIcons. Default icons for QuPath commands. IJExtension. QuPath extension & associated static helper methods used to support integration of ImageJ with QuPath. IJExtension.IJExtensionCommands. Commands to install with the ImageJ extension. IJTools. Collection of static methods to help with using ImageJ with QuPath. ImageChannel. The name and display color for a single image channel. ImageData<T>. Class that brings together the main data in connection with the analysis of a single image. ImageData.ImageType. Enum representing possible image types. ImageDataOp. Request pixels from an image, potentially applying further transforms. ImageDataServer<T>. An ImageServer that wraps an ImageData. ImageDetailsPane. A panel used for displaying basic info about an image, e.g. ImageDisplay. Class used to look after the color transforms that may be applied to an image,; including brightness/contrast settings. ImageDisplaySettings. A simple class to store the main information needed by QuPath to display an image,; in a JSON-friendly form. ImageInterpolation. Supported interpolation methods when displaying ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:21362,integrat,integration,21362,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['integrat'],['integration']
Deployability,"arameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been u",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1064973,update,updatePlane,1064973,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updatePlane']
Deployability,"arameters:; minDisplay - ; See Also:. ImageDisplay. setMaxDisplay; public void setMaxDisplay(float maxDisplay); Description copied from interface: ChannelDisplayInfo.ModifiableChannelDisplayInfo; Set the max display value for this channel.; Note that it is *strongly* advised to use ImageDisplay.setMinMaxDisplay instead ; since this helps ensure that the ImageDisplay fires appropriate events etc. Specified by:; setMaxDisplay in interface ChannelDisplayInfo.ModifiableChannelDisplayInfo; Parameters:; maxDisplay - ; See Also:. ImageDisplay. getMinAllowed; public float getMinAllowed(); Description copied from interface: ChannelDisplayInfo; Get the min allowed display value.; This is only a hint. Specified by:; getMinAllowed in interface ChannelDisplayInfo; Returns:. getMaxAllowed; public float getMaxAllowed(); Description copied from interface: ChannelDisplayInfo; Get the max allowed display value.; This is only a hint. Specified by:; getMaxAllowed in interface ChannelDisplayInfo; Returns:. getMinDisplay; public float getMinDisplay(); Description copied from interface: ChannelDisplayInfo; Get the min display value.; This is used to control the brightness/contrast when painting. Specified by:; getMinDisplay in interface ChannelDisplayInfo; Returns:. getMaxDisplay; public float getMaxDisplay(); Description copied from interface: ChannelDisplayInfo; Get the max display value.; This is used to control the brightness/contrast when painting. Specified by:; getMaxDisplay in interface ChannelDisplayInfo; Returns:. updateRGBAdditive; public int updateRGBAdditive(BufferedImage img,; int x,; int y,; int rgb,; ChannelDisplayMode mode); Description copied from interface: ChannelDisplayInfo; Update an existing pixel (packed RGB) additively using the color used to display a specified one. Specified by:; updateRGBAdditive in interface ChannelDisplayInfo; Parameters:; img - ; x - ; y - ; rgb - ; mode - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html:13694,update,updateRGBAdditive,13694,javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html,3,['update'],['updateRGBAdditive']
Deployability,"archy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Update the displayed progress, and optionally inform the",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1064902,update,updatePlane,1064902,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updatePlane']
Deployability,"arize the pixel found below the most recent known mouse location, ; or """" if the mouse is outside this viewer. Parameters:; useCalibratedUnits - If true, microns will be used rather than pixels (if known).; Returns:. getHierarchy; public PathObjectHierarchy getHierarchy(); Get the object hierarchy for the current image data, or null if no image data is available. Returns:. addViewerListener; public void addViewerListener(QuPathViewerListener listener); Add a viewer listener. Parameters:; listener - . removeViewerListener; public void removeViewerListener(QuPathViewerListener listener); Remove a viewer listener. Parameters:; listener - . setCenterPixelLocation; public void setCenterPixelLocation(double x,; double y); Set the image pixel to display in the center of the viewer (using image pixel coordinates at the full-resolution). Parameters:; x - ; y - . centerROI; public void centerROI(ROI roi); Center the specified ROI in the viewer. Parameters:; roi - . updateAffineTransform; protected void updateAffineTransform(). setRotation; public void setRotation(double theta); Set the rotation; angle in radians. Parameters:; theta - . isRotated; public boolean isRotated(); Returns true if viewer.getRotation() != 0. Returns:; isRotated. getRotation; public double getRotation(); Get the current rotation; angle in radians. Returns:; rotation in radians. rotationProperty; public DoubleProperty rotationProperty(); Return the rotation property of this viewer. Returns:; rotation property; See Also:. getRotation(); setRotation(double). tileAvailable; public void tileAvailable(String serverPath,; ImageRegion region,; BufferedImage tile); Description copied from interface: TileListener; Notify a listener that an image tile has been received read & is available. Specified by:; tileAvailable in interface TileListener<BufferedImage>; Parameters:; serverPath - ; region - ; tile - . forceOverlayUpdate; public void forceOverlayUpdate(); Force the overlay displaying detections and annotations",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html:34648,update,updateAffineTransform,34648,javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,2,['update'],['updateAffineTransform']
Deployability,"as been set. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. static void; setImageJPath(String path). Set the path for a local ImageJ installation, if required. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Property Details. imageJPath; public static StringProperty imageJPathProperty; Property representing the path to a local ImageJ installation, or null if no path has been set. See Also:. getImageJPath(); setImageJPath(String); imageJPathProperty(). Constructor Details. IJExtension; public IJExtension(). Method Details. setImageJPath; public static void setImageJPath(String path); Set the path for a local ImageJ installation, if required. This can be used to help load external ImageJ plugins. Parameters:; path - . getImageJPath; public static String getImageJPath(); Get the path for a local ImageJ installation, if set. Returns:. imageJPathProperty; public static StringProperty imageJPathProperty(); Property representing the path to a local ImageJ installation, or null if no path has been set. Returns:; See Also:. getImageJPath(); setImageJPath(String). getImageJInstance; public static ImageJ getImageJInstance(); Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). Returns:; an ImageJ instance, or null if ImageJ could not be started. extractROI; public static PathImage<ImagePlus> extractROI(ImageServer<BufferedImage> server,; ROI pathROI,; RegionRequest request,; boolean setROI); throws IOException; Extract a region of interest from an image as an ImageJ ImagePlus. Parameters:; server - the image; pathROI - ; request - ; setROI - true if a ROI should be converted to the closest matching ImageJ Roi & set on the image, false otherwise; Returns:; an ImagePlus wrapped in a PathImage to give additional calibration informati",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:3975,install,installation,3975,javadoc/docs/qupath/imagej/gui/IJExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html,1,['install'],['installation']
Deployability,"ased, setOnRotate, setOnRotationFinished, setOnRotationStarted, setOnScroll, setOnScrollFinished, setOnScrollStarted, setOnSwipeDown, setOnSwipeLeft, setOnSwipeRight, setOnSwipeUp, setOnTouchMoved, setOnTouchPressed, setOnTouchReleased, setOnTouchStationary, setOnZoom, setOnZoomFinished, setOnZoomStarted, setOpacity, setPickOnBounds, setPressed, setRotate, setRotationAxis, setScaleX, setScaleY, setScaleZ, setStyle, setTranslateX, setTranslateY, setTranslateZ, setUserData, setViewOrder, setVisible, snapshot, snapshot, startDragAndDrop, startFullDrag, styleProperty, toBack, toFront, toString, translateXProperty, translateYProperty, translateZProperty, usesMirroring, viewOrderProperty, visibleProperty. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface javafx.css.Styleable; getStyleableNode. Property Details. disableToggleMenuItems; public BooleanProperty disableToggleMenuItemsProperty; Property to disable options to toggle the visibility of channels. See Also:. disableToggleMenuItemsProperty(). currentChannel; public ReadOnlyObjectProperty<ChannelDisplayInfo> currentChannelProperty; Get the currently-selected channel.; This is not necessarily showing in the image; see #currentChannelVisible() for that. See Also:. currentChannelProperty(). imageDisplay; public ObjectProperty<ImageDisplay> imageDisplayProperty; Property for the image display that should be shown and managed by this pane. See Also:. imageDisplayProperty(). Constructor Details. BrightnessContrastChannelPane; public BrightnessContrastChannelPane(). Method Details. disableToggleMenuItemsProperty; public BooleanProperty disableToggleMenuItemsProperty(); Property to disable options to toggle the visibility of channels. Returns:. currentChannelVisible; public ReadOnlyBooleanProperty currentChannelVisible(); Read-only property indicating whether the currently-selected channel is visible,; i.e. it is par",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html:12664,toggle,toggle,12664,javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html,1,['toggle'],['toggle']
Deployability,"ass qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; insertText(int, String) - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; installActions(Collection<? extends Action>) - Method in class qupath.lib.gui.QuPathGUI. Install the specified actions. installColorMaps(Path...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps from the specified paths. installColorMaps(ColorMaps.ColorMap...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps. installCommand(String, Runnable) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath. installDefaultFeatureClassificationBuilder(ImageDataTransformerBuilder) - Static method in class qupath.process.gui.commands.ml.PixelClassifierPane. Add to the list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new comma",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:607636,install,install,607636,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['install']
Deployability,"ass; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.logging; Class LogManager. java.lang.Object; qupath.lib.gui.logging.LogManager. public class LogManager; extends Object; Manage logging levels. Author:; Pete Bankhead. Property Summary; Properties. Type; Property; Description; static ObjectProperty<LogManager.LogLevel>; rootLogLevel. Property representing the current requested root log level. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; LogManager.LogLevel. Available log levels. Constructor Summary; Constructors. Constructor; Description; LogManager();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; addTextAppendableFX(TextAppendable component). Register a TextAppendable that will be accept logging events and be updated on the JavaFX Application thread. static LogManager.LogLevel; getRootLogLevel(). Set the root log level, as set by this manager. static void; logToFile(File file). Request logging to the specified file. static void; removeTextAppendableFX(TextAppendable component). Deregister a TextAppendable so that it will no longer be informed of logging events. static ObjectProperty<LogManager.LogLevel>; rootLogLevelProperty(). Property representing the current requested root log level. static void; setAll(). Set the root log level to LogLevel.ALL. static void; setDebug(). Set the root log level to DEBUG. static void; setError(). Set the root log level to LogLevel.ERROR. static void; setInfo(). Set the root log level to DEBUG. static void; setOff(). Set the root log level to LogLevel.OFF. static void; setRootLogLevel(LogManager.LogLevel level). Set the root log level. static void; setTrace(). Set the root log level to LogLevel.TRACE. static void; setWarn(). Set the root log le",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/logging/LogManager.html:1132,update,updated,1132,javadoc/docs/qupath/lib/gui/logging/LogManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/logging/LogManager.html,1,['update'],['updated']
Deployability,"ass pathClass,; boolean retainIntensityClass). Helper class to store an object prior to reclassifying it. Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass,; double probability). Helper class to store an object prior to reclassifying it, including a classification probability. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; apply(). Apply the stored classification. PathObject; getPathObject(). Get the stored PathObject for which the PathClass may be set. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Reclassifier; public Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass); Helper class to store an object prior to reclassifying it. Parameters:; pathObject - ; pathClass - ; retainIntensityClass - of we have a single-level or two-level PathClass, with the second element an intensity classification, ; optionally retain this and only update the base class. Reclassifier; public Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass,; double probability); Helper class to store an object prior to reclassifying it, including a classification probability. Parameters:; pathObject - an object whose classification may be set by a subsequent call to apply(); pathClass - the classification that may be applied to pathObject; retainIntensityClass - of we have a single-level or two-level PathClass, with the second element an intensity classification, ; optionally retain this and only update the base class.; probability - optional classification probability value to store in the object (may be Double.NaN if this should be ignored). Method Details. apply; public boolean apply(); Apply the stored classification. Returns:; true if the classification for the object changed, false otherwise. getPathObject; public",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html:2009,update,update,2009,javadoc/docs/qupath/lib/objects/classes/Reclassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html,1,['update'],['update']
Deployability,"aster rasterMask); Create a histogram that identifies the channels (bands) of an image with the maximum values according to the argmax criterion. Parameters:; raster - the multi-band raster containing values to check; counts - existing histogram if it should be updated, or null if a new histogram should be created. The length should ; match the number of bands in the raster.; rasterMask - optional single-channel mask; if not null, corresponding pixels with 0 values in the mask will be skipped; Returns:; See Also:. computeArgMaxHistogram(WritableRaster, long[], WritableRaster, Rectangle). computeArgMaxHistogram; public static long[] computeArgMaxHistogram(WritableRaster raster,; long[] counts,; WritableRaster rasterMask,; Rectangle bounds); Create a histogram that identifies the channels (bands) of an image with the maximum values according to the argmax criterion, ; with an optional bounding rectangle. Parameters:; raster - the multi-band raster containing values to check; counts - existing histogram if it should be updated, or null if a new histogram should be created. The length should ; match the number of bands in the raster.; rasterMask - optional single-channel mask; if not null, corresponding pixels with 0 values in the mask will be skipped; bounds - optional rectangle defining the bounds of the raster to search.; If not null, this is used with the (also optional) mask to restrict the pixels that are used.; This can give substantial performance improvements for small masked regions embedded in larger images.; Returns:; See Also:. computeArgMaxHistogram(WritableRaster, long[], WritableRaster). computeAboveThresholdCounts; public static long computeAboveThresholdCounts(WritableRaster raster,; int band,; double threshold,; WritableRaster rasterMask); Count the number of above-threshold pixels in a specified band of a raster, with optional mask. Parameters:; raster - the multi-band raster containing values to check; band - the band (channel) to consider; threshold",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html:12945,update,updated,12945,javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,1,['update'],['updated']
Deployability,"at translation should end. fireHierarchyChangedEvent(Object) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating the hierarchy structure has changed. fireHierarchyChangedEvent(Object, PathObject) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. fireHierarchyUpdate() - Static method in class qupath.lib.scripting.QP. Trigger an update for the current hierarchy. fireHierarchyUpdate(PathObjectHierarchy) - Static method in class qupath.lib.scripting.QP. Trigger an update for the specified hierarchy. fireImageDataChanged(ImageData<BufferedImage>, ImageData<BufferedImage>) - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; fireObjectClassificationsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object classifications have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating objects have changed. fireObjectsChangedEvent(Object, Collection<? extends PathObject>, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating objects have changed, and may still be changing. fireVisibleRegionChangedEvent(Shape) - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; fireWorkflowUp",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:309516,update,update,309516,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"ata<?>, Number, Number, Number) - Static method in class qupath.lib.scripting.QP. Set the metadata for an ImageServer to have the required pixel sizes and z-spacing. setPlaceholderText(String) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Set the placeholder text to show if no image is available. setPredicate(Predicate<? super PathObject>) - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Set a predicate used to filter the rows of the table. setPreferredOverlayColor(Color) - Method in class qupath.lib.gui.viewer.overlays.AbstractOverlay. Set a preferred overlay color, which the overlay may or may not make use of. setProject(Project<?>) - Method in class qupath.lib.scripting.ScriptParameters.Builder. Set the current project for the script. setProject(Project<BufferedImage>) - Method in class qupath.lib.gui.panes.ProjectBrowser. Set the project. setProject(Project<BufferedImage>) - Method in class qupath.lib.gui.QuPathGUI. Set the active project, triggering any necessary GUI updates. setProperty(String, Object) - Method in class qupath.lib.images.ImageData. Set a property. setRange(double, double) - Method in class qupath.lib.plugins.parameters.NumericParameter. Set the upper and lower bounds. setReaderOptions(Map<String, String>) - Method in class qupath.lib.images.servers.bioformats.BioFormatsServerOptions. Set additional arguments that should be passed to readers. setReadOnly(boolean) - Method in class qupath.lib.gui.QuPathGUI. Specify whether QuPath should be in 'read-only' mode. setRecording(boolean) - Method in class qupath.lib.gui.viewer.recording.ViewTracker. Set the recording property of this ViewTracker. setRenderer(ImageRenderer) - Method in class qupath.lib.gui.viewer.overlays.PixelClassificationOverlay. Set the ImageRenderer to be used with this overlay. setRequestedDataFileVersion(int) - Static method in class qupath.lib.io.PathIO. Set the requested version for .qpdata files. setRequestParallelization(boolean) - Method ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:942658,update,updates,942658,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updates']
Deployability,"ate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). getSuitableName; public static String getSuitableName(Class<? extends PathObject> cls,; boolean makePlural); Get a user-friendly name for a specific type of PathObject, based on its Java class. Parameters:; cls - ; makePlural - ; Returns:. containsObject; @Deprecated; public static boolean containsObject(PathObject parentObject,; PathObject childObject); Deprecated.; Test whether the ROI associated with one object can",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:22419,update,updated,22419,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,2,['update'],"['updatePlaneRecursive', 'updated']"
Deployability,"ate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened list containing all PathObjects in the hierarchy (including from the root object). Collection<Pat",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:4202,update,update,4202,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,1,['update'],['update']
Deployability,"ateFile(String path,; int searchDepth,; Path... searchPaths). Attempt to update a file using the specified search paths. static URI; locateFile(URI uri,; int searchDepth,; Path... searchPaths). Attempt to update a URI to find an existing file using the specified search paths. UriUpdater<T>; makeReplacement(URI originalItem,; URI updatedItem). Add a single replacement to the replacement map. UriUpdater<T>; relative(URI uriOriginal,; URI uriCurrent). Identify replacements for missing URIs by relativizing URI. UriUpdater<T>; relative(Path pathOriginal,; Path pathCurrent). Identify replacements for missing URIs by relativizing paths. UriUpdater<T>; searchDepth(int maxDepth). Maximum search depth when using searchDepth(int) to match filenames in directories and subdirectories. UriUpdater<T>; searchPath(Path path). Search for filenames that match missing URIs, recursively up to the depth specified by searchDepth(int). static UriResource; wrap(URI... uris). Wrap one or more URIs in a UriResource so they can be updated together. static UriResource; wrap(Collection<URI> uris). Wrap one or more URIs in a UriResource so they can be updated together. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. create; public static <T extends UriResource> UriUpdater<T> create(T resource); throws IOException; Create a new UriUpdater to support updating URIs for a single UriResource. Parameters:; resource - ; Returns:; Throws:; IOException. create; public static <T extends UriResource> UriUpdater<T> create(Collection<T> resources); throws IOException; Create a new UriUpdater to support updating URIs for one or more UriResource objects. Parameters:; resources - ; Returns:; Throws:; IOException. create; public static <T extends UriResource> UriUpdater<T> create(Collection<T> resources,; Collection<UriUpdater.SingleUriItem> items,; Map<UriUpdater.SingleUriItem,UriUpdater.SingleUriItem> repl",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html:3319,update,updated,3319,javadoc/docs/qupath/lib/io/UriUpdater.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html,1,['update'],['updated']
Deployability,"atePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds; protected void updateBounds(double x,; double y). isEmpty; public boolean isEmpty(); A Points ROI is empty if it contains no points (*not* if its bounds have no width or height...; since this would occur for a single-point ROI). Specified by:; isEmpty in interface ROI; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. toString; public String toString(). getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape complete",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:4553,update,updateBounds,4553,javadoc/docs/qupath/lib/roi/PointsROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html,2,['update'],['updateBounds']
Deployability,"ateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static method in class qupath.lib.analysis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriResource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource. Update the specified URIs. updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.DnnObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVDnn;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVModelObjectClassifier;  ; u",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1067468,update,updateTable,1067468,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateTable']
Deployability,"ated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. int; nVertices(). Get the number of vertices used to represent this area. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. nVertices; public int nVertices(); Get the number of vertices used to represent this area. There is some 'fuzziness' to the meaning of this, since; curved regions will be flattened and the same complex areas may be represented in different ways - nevertheless; it provides some measure of the 'complexity' of the area. Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:4127,update,updatePlane,4127,javadoc/docs/qupath/lib/roi/AreaROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html,1,['update'],['updatePlane']
Deployability,"atic method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. unpackRGB(int, int[]) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. UNSET - Enum constant in enum class qupath.lib.images.ImageData.ImageType. Image type has not been set. unzippedExtensions(Path, String...) - Static method in class qupath.lib.io.PathIO. Get the extension of a file, or of all entries within a zip file. UPDATE - Variable in class qupath.lib.gui.actions.menus.HelpMenuActions.Actions;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewerPlus;  ; updateAvailableStyles() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Request that the list of available styles is updated. updateBounds(double, double) - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1061610,update,updateBounds,1061610,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateBounds']
Deployability,"ator(). Create an action indicating that a separator should be added (e.g. static ToggleButton; createToggleButton(org.controlsfx.control.action.Action action). Create a toggle button from an action, showing both the text and graphic if available. static ToggleButton; createToggleButtonWithGraphicOnly(org.controlsfx.control.action.Action action). Create a toggle button from an action, showing only the graphic and not any text. static org.controlsfx.control.action.Action; getActionProperty(MenuItem item). Retrieve an Action stored within the properties of a menu item, or null if no action is found. static org.controlsfx.control.action.Action; getActionProperty(Node node). Retrieve an Action stored within the properties of a node, or null if no action is found. static List<org.controlsfx.control.action.Action>; getAnnotatedActions(Object obj). Actions can be parsed from the accessible (usually public) fields of any object, as well as methods annotated with ActionMethod. static void; installInfoMessage(org.controlsfx.control.action.Action action,; ObjectExpression<InfoMessage> message). Install an optional info message to the action. static boolean; isSelectable(org.controlsfx.control.action.Action action). Specify that an Action has a meaningful 'selected' status. static void; parseAnnotations(org.controlsfx.control.action.Action action,; AnnotatedElement element). Parse annotations relating to an action, updating the properties of the action. static void; parseAnnotations(org.controlsfx.control.action.Action action,; AnnotatedElement element,; String baseMenu). Parse annotations relating to an action, updating the properties of the action with an optional base menu. static void; putActionProperty(MenuItem node,; org.controlsfx.control.action.Action action). Add an Action to the properties of a MenuItem, so that it may be retrieved later. static void; putActionProperty(Node node,; org.controlsfx.control.action.Action action). Add an Action to the properties of a Node, ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html:5154,install,installInfoMessage,5154,javadoc/docs/qupath/lib/gui/actions/ActionTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html,1,['install'],['installInfoMessage']
Deployability,"available styles as an observable list.; The list is unmodifiable, since any changes should be made via adding/removing files in UserDirectoryManager.getCssStylesPath(). See Also:. availableStylesProperty(). selectedStyle; public static ObjectProperty<QuPathStyleManager.StyleOption> selectedStyleProperty; Get the current selected style. See Also:. selectedStyleProperty(). availableFonts; public static ObservableList<QuPathStyleManager.Fonts> availableFontsProperty; Get a list of available fonts.; The list is unmodifiable, since this is primarily used to overcome issues with the default font on macOS ; by changing the font family. More fine-grained changes can be made via css. See Also:. availableFontsProperty(). font; public static ObjectProperty<QuPathStyleManager.Fonts> fontProperty; Get the current selected font. See Also:. fontProperty(). Constructor Details. QuPathStyleManager; public QuPathStyleManager(). Method Details. updateAvailableStyles; public static void updateAvailableStyles(); Request that the list of available styles is updated.; It makes sense to call this when a new user directory has been set, so that a check for CSS files ; can be performed. installStyles; public static boolean installStyles(Collection<File> list); Handle installing CSS files (which can be used to style QuPath). Parameters:; list - list of css files; Returns:. refresh; public static void refresh(); Refresh the current style.; This should not normally be required, but may be useful during startup to ensure ; that the style is properly set at the appropriate time. isDefaultStyle; public static boolean isDefaultStyle(); Check if the default JavaFX style is used. Returns:; true if the default style is used, false otherwise. availableStylesProperty; public static ObservableList<QuPathStyleManager.StyleOption> availableStylesProperty(); Get the current available styles as an observable list.; The list is unmodifiable, since any changes should be made via adding/removing files in UserDi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html:3591,update,updateAvailableStyles,3591,javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,3,['update'],"['updateAvailableStyles', 'updated']"
Deployability,"awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCe",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RectangleROI.html:6943,update,updatePlane,6943,javadoc/docs/qupath/lib/roi/RectangleROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RectangleROI.html,2,['update'],['updatePlane']
Deployability,"axDepth - ; Returns:. relative; public UriUpdater<T> relative(URI uriOriginal,; URI uriCurrent); Identify replacements for missing URIs by relativizing URI.; This is generally used to make corrections whenever a project has been moved. Parameters:; uriOriginal - the previous path (usually for the project); uriCurrent - the current path; Returns:. relative; public UriUpdater<T> relative(Path pathOriginal,; Path pathCurrent); Identify replacements for missing URIs by relativizing paths.; This is generally used to make corrections whenever a project has been moved. Parameters:; pathOriginal - the previous path (usually for the project); pathCurrent - the current path; Returns:. searchPath; public UriUpdater<T> searchPath(Path path); Search for filenames that match missing URIs, recursively up to the depth specified by searchDepth(int). Parameters:; path - the base directory within which to search; Returns:; See Also:. searchDepth(int). makeReplacement; public UriUpdater<T> makeReplacement(URI originalItem,; URI updatedItem); Add a single replacement to the replacement map. Parameters:; originalItem - current URI for a missing resource; updatedItem - updated URI to use instead; Returns:. getReplacements; public Map<URI,URI> getReplacements(); Get a map of all replacements. Returns:. applyReplacements; public int applyReplacements(); throws IOException; Apply all current replacements, updating the UriResource objects. Returns:; Throws:; IOException. countMissing; public int countMissing(); Get a count of the items flagged as missing. Returns:. countReplacements; public int countReplacements(); Get a count of the number of replacements for missing items. Returns:. getMissingItems; public Collection<UriUpdater.SingleUriItem> getMissingItems(); Get all missing items. Returns:. getItems; public Collection<UriUpdater.SingleUriItem> getItems(UriUpdater.UriStatus status); Get all items with the specified status, or all items is status is null. Parameters:; status - ; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html:7908,update,updatedItem,7908,javadoc/docs/qupath/lib/io/UriUpdater.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html,3,['update'],"['updated', 'updatedItem']"
Deployability,"ayMode; getDisplayMode(). Get the histogram display mode. boolean; getHideIfEmpty(). Query whether the chart is automatically hidden (visibility set to false) when there is no data. ObservableList<HistogramChart.HistogramData>; getHistogramData(). Get all histogram data objects. BooleanProperty; hideIfEmptyProperty(). Property controlling whether the chart should be hidden if there is no data. void; setCountsTransform(HistogramChart.CountsTransformMode mode). Set the current counts transform. void; setDisplayMode(HistogramChart.DisplayMode mode). Set the histogram display mode. void; setHideIfEmpty(boolean doHide). Request that the chart is automatically hidden (visibility set to false) when there is no data. void; setShowTickLabels(boolean showTickLabels). Request that tick labels are visible or not for both x and y axis. Methods inherited from class javafx.scene.chart.AreaChart; createSymbolsProperty, dataItemAdded, dataItemChanged, dataItemRemoved, getClassCssMetaData, getCreateSymbols, getCssMetaData, layoutPlotChildren, seriesAdded, seriesChanged, seriesRemoved, setCreateSymbols, updateAxisRange. Methods inherited from class javafx.scene.chart.XYChart; alternativeColumnFillVisibleProperty, alternativeRowFillVisibleProperty, currentDisplayedExtraValueProperty, currentDisplayedXValueProperty, currentDisplayedYValueProperty, dataProperty, getCurrentDisplayedExtraValue, getCurrentDisplayedXValue, getCurrentDisplayedYValue, getData, getDisplayedDataIterator, getDisplayedSeriesIterator, getPlotChildren, getVerticalGridLinesVisible, getXAxis, getYAxis, horizontalGridLinesVisibleProperty, horizontalZeroLineVisibleProperty, isAlternativeColumnFillVisible, isAlternativeRowFillVisible, isHorizontalGridLinesVisible, isHorizontalZeroLineVisible, isVerticalZeroLineVisible, layoutChartChildren, removeDataItemFromDisplay, removeSeriesFromDisplay, setAlternativeColumnFillVisible, setAlternativeRowFillVisible, setCurrentDisplayedExtraValue, setCurrentDisplayedXValue, setCurrentDi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/HistogramChart.html:6623,update,updateAxisRange,6623,javadoc/docs/qupath/lib/gui/charts/HistogramChart.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/HistogramChart.html,1,['update'],['updateAxisRange']
Deployability,"ayed with others. boolean; isBrightnessContrastRescaled(). Returns true if rescaling according to min & max display levels is applied, false if the full display range is used. boolean; isMutable(). Check if SingleChannelDisplayInfo.getValue(BufferedImage, int, int) returns fixed values, or if they are dependent on ; other properties of the ImageData. void; setLUTColor(int r,; int g,; int b). Set the 'maximum' color, which defines the lookup table to use. void; setMaxDisplay(float maxDisplay). Set the max display value for this channel. void; setMinDisplay(float minDisplay). Set the min display value for this channel. void; setMinMaxAllowed(float minAllowed,; float maxAllowed). Set the maximum permissible range for the image display. String; toString();  ; void; updateRGBAdditive(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode). Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. int; updateRGBAdditive(BufferedImage img,; int x,; int y,; int rgb,; ChannelDisplayMode mode). Update an existing pixel (packed RGB) additively using the color used to display a specified one. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.display.ChannelDisplayInfo; getMaxAllowed, getMaxDisplay, getMethod, getMinAllowed, getMinDisplay, isBrightnessContrastRescaled, updateRGBAdditive. Field Details. df; protected static final DecimalFormat df. CM_GRAYSCALE; protected static final IndexColorModel CM_GRAYSCALE. CM_GRAYSCALE_INVERTED; protected static final IndexColorModel CM_GRAYSCALE_INVERTED. minAllowed; protected float minAllowed. maxAllowed; protected float maxAllowed. minDisplay; protected float minDisplay. maxDisplay; protected float maxDisplay. clipToAllowed; protected boolean clipToAllowed. Constructor Details. DirectServerChannelInfo; public DirectServerChannelInfo(ImageData<BufferedImage> imageData,;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html:4708,update,updateRGBAdditive,4708,javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html,1,['update'],['updateRGBAdditive']
Deployability,"ayoutInArea, layoutInArea, layoutInArea, layoutInArea, maxHeight, maxHeightProperty, maxWidth, maxWidthProperty, minHeight, minHeightProperty, minWidth, minWidthProperty, opaqueInsetsProperty, paddingProperty, positionInArea, positionInArea, prefHeight, prefHeightProperty, prefWidth, prefWidthProperty, resize, scaleShapeProperty, setBackground, setBorder, setCacheShape, setCenterShape, setHeight, setMaxHeight, setMaxSize, setMaxWidth, setMinHeight, setMinSize, setMinWidth, setOpaqueInsets, setPadding, setPrefHeight, setPrefSize, setPrefWidth, setScaleShape, setShape, setSnapToPixel, setWidth, shapeProperty, snappedBottomInset, snappedLeftInset, snappedRightInset, snappedTopInset, snapPosition, snapPositionX, snapPositionY, snapSize, snapSizeX, snapSizeY, snapSpace, snapSpaceX, snapSpaceY, snapToPixelProperty, widthProperty. Methods inherited from class javafx.scene.Parent; getBaselineOffset, getChildren, getChildrenUnmodifiable, getManagedChildren, getStylesheets, isNeedsLayout, layout, lookup, needsLayoutProperty, queryAccessibleAttribute, requestLayout, requestParentLayout, setNeedsLayout, updateBounds. Methods inherited from class javafx.scene.Node; accessibleHelpProperty, accessibleRoleDescriptionProperty, accessibleRoleProperty, accessibleTextProperty, addEventFilter, addEventHandler, applyCss, autosize, blendModeProperty, boundsInLocalProperty, boundsInParentProperty, buildEventDispatchChain, cacheHintProperty, cacheProperty, clipProperty, computeAreaInScreen, contains, contains, cursorProperty, depthTestProperty, disabledProperty, disableProperty, effectiveNodeOrientationProperty, effectProperty, eventDispatcherProperty, executeAccessibleAction, fireEvent, focusedProperty, focusTraversableProperty, focusVisibleProperty, focusWithinProperty, getAccessibleHelp, getAccessibleRole, getAccessibleRoleDescription, getAccessibleText, getBlendMode, getBoundsInLocal, getBoundsInParent, getCacheHint, getClip, getContentBias, getCursor, getDepthTest, getEffect, getEffect",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/HistogramChart.html:9808,update,updateBounds,9808,javadoc/docs/qupath/lib/gui/charts/HistogramChart.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/HistogramChart.html,1,['update'],['updateBounds']
Deployability,"b.gui.viewer.QuPathViewer; imageUpdated, locationUpdated. Constructor Summary; Constructors. Constructor; Description; QuPathViewerPlus(DefaultImageRegionStore regionStore,; OverlayOptions overlayOptions,; ViewerPlusDisplayOptions viewerDisplayOptions). Create a new viewer. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; closeViewer(). Request that this viewer is closed. void; initializeForServer(ImageServer<BufferedImage> server);  ; boolean; isLocationVisible(). Returns true if the cursor location is visible, false otherwise. boolean; isOverviewVisible(). Returns true if the image overview is visible, false otherwise. boolean; isScalebarVisible(). Returns true if the scalebar is visible, false otherwise. void; repaintEntireImage(). Request that the entire image is repainted, including the thumbnail. void; setSlidersPosition(boolean down). Sets the Z and T sliders' position to allow space for command bar. protected void; updateAffineTransform();  . Methods inherited from class qupath.lib.gui.viewer.QuPathViewer; addViewerListener, centerImage, centerROI, componentContains, componentPointToImagePoint, componentPointToImagePoint, fireImageDataChanged, fireVisibleRegionChangedEvent, forceOverlayUpdate, gammaProperty, getActiveTool, getAllSelectedObjects, getAllThumbnails, getBorderColor, getCenterPixelX, getCenterPixelY, getCurrentROI, getCursor, getCustomOverlayLayers, getCustomPixelLayerOverlay, getDefaultZoomFactor, getDisplayedClipShape, getDisplayedRegionShape, getDownsampleFactor, getFullLocationString, getFullMagnification, getGamma, getGammaOp, getHierarchy, getImageData, getImageDisplay, getImageObjectClassificationString, getImagePlane, getImageRegionStore, getMagnification, getMaxDownsample, getMaxROIHandleSize, getMinDownsample, getMousePosition, getObjectClassificationString, getOverlayLayers, getOverlayOptions, getRenderer, getRGBThumbnail, getROIEditor, getRotation, getSelectedObject, getServer,",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewerPlus.html:1963,update,updateAffineTransform,1963,javadoc/docs/qupath/lib/gui/viewer/QuPathViewerPlus.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewerPlus.html,1,['update'],['updateAffineTransform']
Deployability,"b.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in interface qupath.lib.displ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1065192,update,updatePlaneRecursive,1065192,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updatePlaneRecursive']
Deployability,"batch processing for the current thread. loadImageData; @Deprecated; public static ImageData<BufferedImage> loadImageData(String path,; boolean setBatchData); throws IOException; Deprecated.; Load ImageData from a file. Parameters:; path - path to the file containing ImageData.; setBatchData - if true, the setBatchImageData(ImageData) will be called if the loading is successful.; Returns:; Throws:; IOException; See Also:. setBatchImageData(qupath.lib.images.ImageData<java.awt.image.BufferedImage>). fireHierarchyUpdate; public static void fireHierarchyUpdate(); Trigger an update for the current hierarchy.; ; This should be called after any (non-standard) modifications are made to the hierarchy ; to ensure that all listeners are notified (including for any GUI).; ; It is common to call it at the end of any script that does any direct modification of objects ; (e.g. adding/removing measurements, setting classifications). fireHierarchyUpdate; public static void fireHierarchyUpdate(PathObjectHierarchy hierarchy); Trigger an update for the specified hierarchy.; ; This should be called after any (non-standard) modifications are made to the hierarchy ; to ensure that all listeners are notified (including for any GUI).; ; It is common to call it at the end of any script that does any direct modification of objects ; (e.g. adding/removing measurements, setting classifications). Parameters:; hierarchy - . getColorRGB; @Deprecated; public static Integer getColorRGB(int... v); Deprecated.; Use instead makeRGB(int, int, int) or makeARGB(int, int, int, int). Create a new packed-int representation of an RGB color.; . Parameters:; v - A value between 0 and 255. If a single value is give, the result will be; a shade of gray (RGB all with that value). Otherwise, 3 or 4 values may be given to generate ; either an RGB or RGBA color. Note: values are expected in order RGBA, but Java's packed ints are really ARGB.; Returns:. makeRGB; public static Integer makeRGB(int r,; int g,; int b); Ma",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:49186,update,update,49186,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['update'],['update']
Deployability,"be); request the handles to be recomputed to avoid inconsistency. boolean; finishTranslation(). Notify the editor that translation should end. List<Point2>; getHandles(). Get all the handles for the current ROI being edited, or an empty list if no handles are available. ROI; getROI(). Retrieve the ROI currently being edited (may be null). boolean; grabHandle(double x,; double y,; double maxDist,; boolean shiftDown). Try to grab a ROI handle. boolean; hasActiveHandle(). Returns true if a handle is currently active, for example being reposition. boolean; hasROI(). Returns true if this editor currently has a ROI. boolean; isTranslating(). Query if a ROI is currently being translated through this editor. ROI; requestNewHandle(double x,; double y). Request an updated ROI with a new handle inserted - useful e.g. void; resetActiveHandle(). Ensure that no handle is active. ROI; setActiveHandlePosition(double x,; double y,; double minDisplacement,; boolean shiftDown). If a handle has been grabbed, update its displacement. void; setROI(ROI roi). Set the active ROI, stopping any ROI translation currently in progress. void; setROI(ROI roi,; boolean stopTranslating). Set the active ROI, optionally stopping any ROI translation currently in progress. boolean; startTranslation(double x,; double y,; boolean snapToPixel). Returns true if the current ROI is translatable, and at the end of this call the translation has started. ROI; updateTranslation(double x,; double y,; ImageRegion constrainRegion). Update a ROI by translation, optionally constraining its movement within a specified boundary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. createInstance; public static RoiEditor createInstance(); Create a new RoiEditor. Returns:. setROI; public void setROI(ROI roi); Set the active ROI, stopping any ROI translation currently in progress. Parameters:; roi - . setROI; public void se",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiEditor.html:2778,update,update,2778,javadoc/docs/qupath/lib/roi/RoiEditor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiEditor.html,1,['update'],['update']
Deployability,"bject> detections,; double distance,; double nucleusScale); Create cell objects by expanding the (nucleus) ROIs from existing detections to approximate the full cell boundary. Parameters:; detections - the detection objects from which to create the cells; these define the nuclei; distance - the maximum distance (in pixels) to expand each nucleus; nucleusScale - the maximum size of the cell relative to the nucleus (ignored if ≤ 1).; Returns:; cell objects derived from the supplied detections. This may have fewer entries if not all detections could be used successfully. estimateCellBoundary; public static Geometry estimateCellBoundary(Geometry geomNucleus,; double distance,; double nucleusScale); Estimate a cell boundary using Geometry objects.; This avoids the need to create ROI or PathObject first. Parameters:; geomNucleus - Geometry representing the cell nucleus; distance - distance to expand the nucleus, in pixels; nucleusScale - optional maximum expansion distance defined in terms of scaling the nucleus ROI about its centroid; ignored if ≤ 1; Returns:; a Geometry providing a cell boundary estimate. constrainCellByNucleusDistance; public static PathCellObject constrainCellByNucleusDistance(PathCellObject cell,; double distance,; boolean keepMeasurements); Constrain a cell boundary to fall within a maximum region, determined by buffering the convex hull of the nucleus ROI by a fixed distance.; This can be used to create more biologically plausible cell boundaries in cases where the initial boundary estimates may be ; too large. Parameters:; cell - original cell object; distance - distance (in pixels) by which the nucleus should be expanded to defined maximum cell size; keepMeasurements - if true, retain the measurements of the original cell if creating a new cell; if false, discard existing measurements; Returns:; the updated cell object, or the original cell object either if its boundary falls within the specified limit or it lacks both boundary and nucleus ROIs. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/CellTools.html:5303,update,updated,5303,javadoc/docs/qupath/lib/objects/CellTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/CellTools.html,1,['update'],['updated']
Deployability,"bjectHierarchyView; extends Object; implements ChangeListener<ImageData<BufferedImage>>, PathObjectSelectionListener, PathObjectHierarchyListener; Component for showing a tree-based view of the object hierarchy. Author:; Pete Bankhead. Property Summary; Properties. Type; Property; Description; BooleanProperty; disableUpdates. Property that may be used to prevent updates on every hierarchy or selection change event. Constructor Summary; Constructors. Constructor; Description; PathObjectHierarchyView(QuPathGUI qupath). Constructor. PathObjectHierarchyView(QuPathGUI qupath,; ObservableValue<ImageData<BufferedImage>> imageDataProperty). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew);  ; BooleanProperty; disableUpdatesProperty(). Property that may be used to prevent updates on every hierarchy or selection change event. Pane; getPane(). Get the pane for display. void; hierarchyChanged(PathObjectHierarchyEvent event). Notify listeners of a change in the hierarchy or its objects. void; selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected). Fired when the selected objects have changed. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. disableUpdates; public BooleanProperty disableUpdatesProperty; Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the table being updated even when ; it is not visible to the user. See Also:. disableUpdatesProperty(). Constructor Details. PathObjectHierarchyView; public PathObjectHierarchyView(QuPathGUI qupath); Constructor. Parameters:; qupath - the current QuPat",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html:1618,update,updates,1618,javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html,1,['update'],['updates']
Deployability,"bjects; public Collection<PathObject> getTileObjects(); Get all tile objects in the hierarchy. Returns:. getDetectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy (including sub-classes of detections). Returns:. getAnnotationObjects; public Collection<PathObject> getAnnotationObjects(); Get all annotation objects in the hierarchy. Returns:. getObjects; public Collection<PathObject> getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class.; Note that this method returns the root object, unless it has been filtered out. Parameters:; pathObjects - ; cls - ; Returns:. updateObject; public void updateObject(PathObject pathObject,; boolean isChanging); Update an object that is already in the hierarchy (e.g. because its ROI has changed). Parameters:; pathObject - the object to update; isChanging - if true, indicate that the object is still being changed.; Some listeners may delay processing in expectation of an update event where isChanging is false. getFlattenedObjectList; public List<PathObject> getFlattenedObjectList(List<PathObject> list); Get a flattened list containing all PathObjects in the hierarchy (including from the root object).; ; To get a flattened list containing all PathObjects without the root object, one can run the following:; getFlattenedObjectList(null).stream().filter(p -> !p.isRootObject()).toList(). Or, since v0.4.0, just use getAllObjects(boolean) instead. Parameters:; list - ; Returns:; Since:; getAllObjects(boolean). getAllObjects; public Collection<PathObject> getAllObjects(boolean includeRoot); Get all the objects in the hierarchy, optionally including the root object. Parameters:; includeRoot - ; Returns:; Since:; v0.4.0. nObjects; public int nObjects(); Number of objects in the hierarchy, excluding the root. Returns:. setHierarchy; public void se",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:16891,update,update,16891,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,1,['update'],['update']
Deployability,"ble list. static ObjectProperty<QuPathStyleManager.Fonts>; font. Get the current selected font. static ObjectProperty<QuPathStyleManager.StyleOption>; selectedStyle. Get the current selected style. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; QuPathStyleManager.Fonts. Available font families. static interface ; QuPathStyleManager.StyleOption. Interface defining a style that may be applied to QuPath. Constructor Summary; Constructors. Constructor; Description; QuPathStyleManager();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ObservableList<QuPathStyleManager.Fonts>; availableFontsProperty(). Get a list of available fonts. static ObservableList<QuPathStyleManager.StyleOption>; availableStylesProperty(). Get the current available styles as an observable list. static ObjectProperty<QuPathStyleManager.Fonts>; fontProperty(). Get the current selected font. static boolean; installStyles(Collection<File> list). Handle installing CSS files (which can be used to style QuPath). static boolean; isDefaultStyle(). Check if the default JavaFX style is used. static void; refresh(). Refresh the current style. static ObjectProperty<QuPathStyleManager.StyleOption>; selectedStyleProperty(). Get the current selected style. static void; updateAvailableStyles(). Request that the list of available styles is updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. availableStyles; public static ObservableList<QuPathStyleManager.StyleOption> availableStylesProperty; Get the current available styles as an observable list.; The list is unmodifiable, since any changes should be made via adding/removing files in UserDirectoryManager.getCssStylesPath(). See Also:. availableStylesProperty(). selectedStyle; public static ObjectProperty<QuPathStyleManager.StyleOption> selectedStylePr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html:1939,install,installStyles,1939,javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,1,['install'],['installStyles']
Deployability,"ble name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. Version; getVersion(). Get the version of the current extension. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ProcessingExtension; public ProcessingExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getVersion; public Version getVersion(); Description copied from interface: QuPathExtension; Get the version of the current extension. Specified by:; getVersion in interface QuPathExtension; Returns:; See Also:. GeneralTools.getPackageVersion(Class). getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/process/gui/ProcessingExtension.html:2227,install,installExtension,2227,javadoc/docs/qupath/process/gui/ProcessingExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/process/gui/ProcessingExtension.html,1,['install'],['installExtension']
Deployability,"ble). scale; default ROI scale(double scaleX,; double scaleY); Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. The scaling uses 0,0 as the origin. Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; Returns:; See Also:. scale(double, double, double, double). getArea; double getArea(); Get the area of this ROI. For lines and points this returns 0. Returns:; See Also:. getScaledArea(double, double). getScaledArea; double getScaledArea(double pixelWidth,; double pixelHeight); Get scaled area of the ROI, for use with calibrated pixel sizes. Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. getArea(). getLength; double getLength(); Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Returns:; See Also:. getScaledLength(double, double). getScaledLength; double getScaledLength(double pixelWidth,; double pixelHeight); Get the scaled length, for use with calibrated pixel sizes. Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. getLength(). getConvexHull; ROI getConvexHull(); Get a ROI representing the convex hull of this ROI.; This should be the smallest convex shape that contains all the ROI points. Returns:. getSolidity; double getSolidity(); Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Returns:. contains; boolean contains(double x,; double y); Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where isArea() returns true. ; All other ROIs (points, lines) return false. Parameters:; x - ; y - ; Returns:. updatePlane; ROI updatePlane(ImagePlane plane); Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Parameters:; plane - the new plane to use; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html:8902,update,updatePlane,8902,javadoc/docs/qupath/lib/roi/interfaces/ROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/interfaces/ROI.html,2,['update'],['updatePlane']
Deployability,"box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise. segment; public static Mat segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation model; server - the image; request - the region; Returns:; a Mat containing the segmentation results; Throws:; IOException - if the input image could not be read. segment; public static Mat segment(SegmentationModel model,; Mat ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:11947,patch,patch,11947,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.ext.openslide; Class OpenSlideExtension. java.lang.Object; qupath.ext.openslide.OpenSlideExtension. All Implemented Interfaces:; QuPathExtension. @PrefCategory(""category.openslide""); public class OpenSlideExtension; extends Object; implements QuPathExtension. Field Summary; Fields. Modifier and Type; Field; Description; StringProperty; openslidePathProperty;  . Constructor Summary; Constructors. Constructor; Description; OpenSlideExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getQuPathVersion, getVersion. Field Details. openslidePathProperty; @DirectoryPref(""pref.openslide.path""); public StringProperty openslidePathProperty. Constructor Details. OpenSlideExtension; public OpenSlideExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathE",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/ext/openslide/OpenSlideExtension.html:1054,install,installExtension,1054,javadoc/docs/qupath/ext/openslide/OpenSlideExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/ext/openslide/OpenSlideExtension.html,1,['install'],['installExtension']
Deployability,"c interface ImageOp; extends UriResource; An operation that may be applied to a Mat.; ; This is intended to apply simple transforms to an image (e.g. color transforms, channel extraction, filtering, normalization), ; which may impact the number and type of image channels - but not other aspects of the image, with the exception of removing any padding.; ; Operations may be chained. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; Mat; apply(Mat input). Apply operation to the image. default List<ImageChannel>; getChannels(List<ImageChannel> channels). Get appropriate channels to reflect the output of this transform. default PixelType; getOutputType(PixelType inputType). Get the output pixel type. default Padding; getPadding(). Get the padding requested for this operation. default Collection<URI>; getURIs(). Default implementation returns an empty list; classes should override this if necessary. default boolean; updateURIs(Map<URI,URI> replacements). Default implementation makes no changes; classes should override this if necessary. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Method Details. apply; Mat apply(Mat input); Apply operation to the image. The input may be modified (and the operation applied in-place), ; therefore should be duplicated if a copy is required to be kept.; ; Note that any non-empty padding will be removed, potentially giving an output image smaller than ; the input. If this is not desirable use ImageOps.padAndApply(ImageOp, Mat). Parameters:; input - input image; Returns:; output image, which may be the same as the input image; See Also:. getPadding(); ImageOps.padAndApply(ImageOp, Mat, int); ImageOps.padAndApply(ImageOp, Mat). getPadding; default Padding getPadding(); Get the padding requested for this operation.; ; The default is to return Padding.empty().; ; Subclasses that perform neighborhood operations should override this.; If the paddin",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOp.html:1450,update,updateURIs,1450,javadoc/docs/qupath/opencv/ops/ImageOp.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOp.html,1,['update'],['updateURIs']
Deployability,"cationLabels(Map<Integer, PathClass>) - Method in class qupath.lib.classifiers.pixel.PixelClassifierMetadata.Builder. Specify classification labels. classificationLabels(Map<Integer, PathClass>) - Method in class qupath.lib.images.servers.ImageServerMetadata.Builder. Specify the interpretation of classification labels. classificationLabelsToChannels(Map<Integer, PathClass>, boolean) - Static method in class qupath.lib.images.servers.ServerTools. Create a list of channels from classification labels. ClassificationResolution - Class in qupath.process.gui.commands.ml. Wrapper for a PixelCalibration to be used to define classifier resolution. classifications(Collection<? extends PathObject>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder. Plot two measurements against one another for the specified objects. classify(ClassificationModel, PathObject, Mat, IntFunction<PathClass>, String) - Static method in class qupath.opencv.dnn.DnnTools. Apply a classification model to an existing image patch to classify an object. classify(ClassificationModel, PathObject, ImageServer<BufferedImage>, double, int, int, IntFunction<PathClass>, String) - Static method in class qupath.opencv.dnn.DnnTools. Apply a classification model to an image patch to classify an object. classify(ClassificationModel, PathObject, ImageServer<BufferedImage>, double, IntFunction<PathClass>, String) - Static method in class qupath.opencv.dnn.DnnTools. Apply a classification model to an image patch to classify an object. ClassifyByMeasurementBuilder(String) - Constructor for class qupath.lib.classifiers.object.ObjectClassifiers.ClassifyByMeasurementBuilder. Constructor. classifyCellsByCentroid(ImageData<BufferedImage>, PixelClassifier, boolean) - Static method in class qupath.opencv.ml.pixel.PixelClassifierTools. Classify cells according to the prediction of the pixel corresponding to the cell centroid using a PixelClassifier. classifyDetectionsByCentroid(String) - Static method in class qupath.l",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:101611,patch,patch,101611,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,"ce(). Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). static String; getImageJPath(). Get the path for a local ImageJ installation, if set. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. static StringProperty; imageJPathProperty(). Property representing the path to a local ImageJ installation, or null if no path has been set. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. static void; setImageJPath(String path). Set the path for a local ImageJ installation, if required. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Property Details. imageJPath; public static StringProperty imageJPathProperty; Property representing the path to a local ImageJ installation, or null if no path has been set. See Also:. getImageJPath(); setImageJPath(String); imageJPathProperty(). Constructor Details. IJExtension; public IJExtension(). Method Details. setImageJPath; public static void setImageJPath(String path); Set the path for a local ImageJ installation, if required. This can be used to help load external ImageJ plugins. Parameters:; path - . getImageJPath; public static String getImageJPath(); Get the path for a local ImageJ installation, if set. Returns:. imageJPathProperty; public static StringProperty imageJPathProperty(); Property representing the path to a local ImageJ installation, or null if no path has been set. Returns:; See Also:. getImageJPath(); setImageJPath(String). getImageJInstance; public static ImageJ getImageJInstance(); Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). Returns:; an ImageJ instance, or null if ImageJ could not be started. extractROI; public ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:3500,install,installation,3500,javadoc/docs/qupath/imagej/gui/IJExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html,1,['install'],['installation']
Deployability,"ch depth of 4.; This first checks if the provided path is to a file that already exists.; If it is not, then it searches recursively within the current project or ; user directory (if available) up to a fixed search depth for a file with the same name. Parameters:; nameOrPath - the original name or path; Returns:; the identified file path, or the original file path if no update was found or required; Throws:; IOException; See Also:. UriUpdater.locateFile(String, int, Path...). locateFile; public static String locateFile(String nameOrPath,; int searchDepth); throws IOException; Locate a specified file based upon its name or path.; This first checks if the provided path is to a file that already exists.; If it is not, then it searches recursively within the current project or ; user directory (if available) up to a specified search depth for a file with the same name. Parameters:; nameOrPath - the original name or path; searchDepth - how deep to search subdirectories recursively; Returns:; the identified file path, or the original file path if no update was found or required; Throws:; IOException; See Also:. UriUpdater.locateFile(String, int, Path...). runPlugin; public static boolean runPlugin(String className,; ImageData<?> imageData,; String args); throws InterruptedException. Throws:; InterruptedException. runPlugin; public static boolean runPlugin(String className,; String args); throws InterruptedException. Throws:; InterruptedException. createTaskRunner; public static TaskRunner createTaskRunner(); Create a task runner with the default number of threads defined by ThreadTools.getParallelism().; This will either be interactive (if QuPath is running, and the current image is open or headless. Returns:. createTaskRunner; public static TaskRunner createTaskRunner(int nThreads); Create a task runner with the specified number of threads.; This will either be interactive (if QuPath is running, and the current image is open or headless. Parameters:; nThreads - number of",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/scripting/QPEx.html:14652,update,update,14652,javadoc/docs/qupath/lib/gui/scripting/QPEx.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/scripting/QPEx.html,1,['update'],['update']
Deployability,"chInstanceFromSwing(); Static method to launch QuPath from within a Swing/AWT application.; ; This aims to handle several things:; ; initializing JavaFX in the appropriate thread; flagging that shutting down QuPath should not terminate the JVM; showing the QuPath UI window. This can potentially be used from other environments (e.g. MATLAB, Fiji, Python).; Afterwards, calls to getInstance() will return the QuPath instance as soon as it is available.; However, note that depending upon the thread from which this method is called, the QuPath instance may not ; be available until some time after the method returns.; ; If there is already an instance of QuPath running, this requests that it is made visible - but otherwise does nothing. requestAutomaticUpdateCheck; public void requestAutomaticUpdateCheck(); Request an automated update check in a background thread.; This will use the user preferences to determine whether or how to check for updates ; (i.e. if the preferences have disabled an update check, then it will not be run). See Also:. requestFullUpdateCheck(). requestFullUpdateCheck; public void requestFullUpdateCheck(); Request a manual update check in a background thread.; This should perform the check if possible, regardless of the user preferences. See Also:. requestAutomaticUpdateCheck(). showAnalysisPaneProperty; public BooleanProperty showAnalysisPaneProperty(). Returns:; the showAnalysisPane property. uiBlocked; public ObservableValue<Boolean> uiBlocked(); Observable value indicating that the user interface is/should be blocked.; This happens when a plugin or script is running. Returns:. openInBrowser; public static boolean openInBrowser(String url); Try to launch a browser window for a specified URL. Parameters:; url - the URL to open in the browser; Returns:; true if this was (as far as we know...) successful, and false otherwise; Since:; v0.5.0 (renamed from launchInBrowserWindow(String}. getToolManager; public ToolManager getToolManager(); Get the ToolMan",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:15007,update,update,15007,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['update'],['update']
Deployability,"cing contours in a labelled image. static Mat; createDisk(int radius,; boolean doMean). Create a disk filter. static Mat; createMask(Mat mat,; DoublePredicate predicate,; double trueValue,; double falseValue). Create a mask by applying a predicate to pixel values. static List<PathObject>; createObjects(Mat matLabels,; RegionRequest region,; int minLabel,; int maxLabel,; BiFunction<ROI,Number,PathObject> creator). Create objects by tracing contours in a labelled image. static Map<Number,ROI>; createROIs(Mat matLabels,; RegionRequest region,; int minLabel,; int maxLabel). Convert integer labels into ROIs. static Mat; crop(Mat mat,; int x,; int y,; int width,; int height). Crop a region from a Mat based on its bounding box, returning a new image (not a subregion). static Mat; crop(Mat mat,; Padding padding). Crop a region from a Mat by stripping off padding, returning a new image (not a subregion). static Mat; ensureContinuous(Mat mat,; boolean inPlace). Ensure a Mat is continuous, creating a copy of the data if necessary. static double[]; extractDoubles(Mat mat). Extract pixels as a double array. static float[]; extractFloats(Mat mat). Extract pixels as a float array. static double[]; extractMaskedDoubles(Mat input,; Mat mask,; int channel). Extract pixels from an image using a mask, limited to the specified channel index. static float[]; extractMaskedFloats(Mat input,; Mat mask,; int channel). Extract pixels from an image using a mask, limited to the specified channel index. static double[]; extractPixels(Mat mat,; double[] pixels). Extract pixels as a double array. static float[]; extractPixels(Mat mat,; float[] pixels). Extract pixels as a float[] array. static List<Mat>; extractZStack(ImageServer<BufferedImage> server,; RegionRequest request). Extract a list of Mats, where each Mat corresponds to a z-slice, for all available z-slices of a region. static List<Mat>; extractZStack(ImageServer<BufferedImage> server,; RegionRequest request,; int zMin,; int zMax). Extra",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/OpenCVTools.html:3873,continuous,continuous,3873,javadoc/docs/qupath/opencv/tools/OpenCVTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/OpenCVTools.html,1,['continuous'],['continuous']
Deployability,"cked.; Calls to setSelectedTool(PathTool) are discarded until the tool is unlocked. Returns:. installTool; public boolean installTool(PathTool tool,; KeyCodeCombination accelerator); Install a new tool for interacting with viewers. Parameters:; tool - the tool to add; accelerator - an optional accelerator (may be null); Returns:; true if the tool was added, false otherwise (e.g. if the tool had already been added). setSelectedTool; public void setSelectedTool(PathTool tool); Programmatically select the active PathTool.; This may fail if isToolSwitchingEnabled() returns false. Parameters:; tool - . getSelectedTool; public PathTool getSelectedTool(); Get the value of selectedToolProperty(). Returns:. getPreviousSelectedTool; public PathTool getPreviousSelectedTool(); Get the value of selectedToolProperty(). Returns:. previousSelectedToolProperty; public ReadOnlyObjectProperty<PathTool> previousSelectedToolProperty(); Property storing the previous tool that was selected.; This is useful for commands that might want to quickly toggle between tools. Returns:; See Also:. getPreviousSelectedTool(). setToolSwitchingEnabled; public void setToolSwitchingEnabled(boolean enabled); Toggle whether the user is permitted to switch to a new active PathTool.; This can be used to lock a tool temporarily. Parameters:; enabled - . isToolSwitchingEnabled; public boolean isToolSwitchingEnabled(); Returns true if the user is able to activate another PathTool, false otherwise. Returns:. getToolAction; public org.controlsfx.control.action.Action getToolAction(PathTool tool); Get the action that corresponds to a specific PathTool, creating a new action if one does not already exist. Parameters:; tool - ; Returns:. getSelectionModeAction; public org.controlsfx.control.action.Action getSelectionModeAction(); Return the action associated with 'selection mode'.; This can be used to create UI components that toggle selection mode on and off. Returns:; See Also:. PathPrefs.selectionModeProperty(). ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ToolManager.html:7036,toggle,toggle,7036,javadoc/docs/qupath/lib/gui/ToolManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ToolManager.html,2,['toggle'],['toggle']
Deployability,"class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static method in class qupath.lib.analysis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriResource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource. Update the specified URIs. updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.DnnObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVDnn;  ; updateURIs(Map<URI, URI>) - Method in c",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1067451,update,updated,1067451,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability,"class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static method in class qupath.lib.analysis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriR",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1066124,update,updateRGBAdditive,1066124,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateRGBAdditive']
Deployability,"classification labels. ClassificationResolution - Class in qupath.process.gui.commands.ml. Wrapper for a PixelCalibration to be used to define classifier resolution. classifications(Collection<? extends PathObject>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder. Plot two measurements against one another for the specified objects. classify(ClassificationModel, PathObject, Mat, IntFunction<PathClass>, String) - Static method in class qupath.opencv.dnn.DnnTools. Apply a classification model to an existing image patch to classify an object. classify(ClassificationModel, PathObject, ImageServer<BufferedImage>, double, int, int, IntFunction<PathClass>, String) - Static method in class qupath.opencv.dnn.DnnTools. Apply a classification model to an image patch to classify an object. classify(ClassificationModel, PathObject, ImageServer<BufferedImage>, double, IntFunction<PathClass>, String) - Static method in class qupath.opencv.dnn.DnnTools. Apply a classification model to an image patch to classify an object. ClassifyByMeasurementBuilder(String) - Constructor for class qupath.lib.classifiers.object.ObjectClassifiers.ClassifyByMeasurementBuilder. Constructor. classifyCellsByCentroid(ImageData<BufferedImage>, PixelClassifier, boolean) - Static method in class qupath.opencv.ml.pixel.PixelClassifierTools. Classify cells according to the prediction of the pixel corresponding to the cell centroid using a PixelClassifier. classifyDetectionsByCentroid(String) - Static method in class qupath.lib.scripting.QP. Classify detections according to the prediction of the pixel corresponding to the detection centroid using a PixelClassifier. classifyDetectionsByCentroid(PixelClassifier) - Static method in class qupath.lib.scripting.QP. Classify detections according to the prediction of the pixel corresponding to the detection centroid using a PixelClassifier. classifyDetectionsByCentroid(ImageData<BufferedImage>, PixelClassifier) - Static method in class qupath.opencv.ml.p",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:102087,patch,patch,102087,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,"crete Methods. Modifier and Type; Method; Description; String; toString();  ; static PathPrefs.AutoUpdateType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathPrefs.AutoUpdateType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. QUPATH_ONLY; public static final PathPrefs.AutoUpdateType QUPATH_ONLY; Check for QuPath updates only. QUPATH_AND_EXTENSIONS; public static final PathPrefs.AutoUpdateType QUPATH_AND_EXTENSIONS; Check for QuPath and extensions on GitHub. EXTENSIONS_ONLY; public static final PathPrefs.AutoUpdateType EXTENSIONS_ONLY; Check for extensions on GitHub only (not new QuPath releases). NONE; public static final PathPrefs.AutoUpdateType NONE; Don't check for any updates automatically. Method Details. values; public static PathPrefs.AutoUpdateType[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static PathPrefs.AutoUpdateType valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of the enum constant to be returned.; Returns:; the enum constant with the specified name; Throws:; IllegalArgumentException - if this enum class has no constant with the specified name; NullPointerException - if the argument is null. toString; public String toString(). Overrides:; toString in class Enum<PathPrefs.AutoUpdateType>. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html:2368,update,updates,2368,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html,1,['update'],['updates']
Deployability,"cripting.EditableText. Request inserting the specified text. insertText(int, String) - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; insertText(int, String) - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; installActions(Collection<? extends Action>) - Method in class qupath.lib.gui.QuPathGUI. Install the specified actions. installColorMaps(Path...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps from the specified paths. installColorMaps(ColorMaps.ColorMap...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps. installCommand(String, Runnable) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath. installDefaultFeatureClassificationBuilder(ImageDataTransformerBuilder) - Static method in class qupath.process.gui.commands.ml.PixelClassifierPane. Add to the list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyComman",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:607526,install,installDragAndDropHandler,607526,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installDragAndDropHandler']
Deployability,"cription; HaralickFeatureComputer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static HaralickFeatures; measureHaralick(SimpleImage ip,; SimpleImage bpMask,; int nBins,; double minValue,; double maxValue,; int d). Compute mean Haralick features from a SimpleImage, with optional masking. static CoocurranceMatrices; updateCooccurrenceMatrices(CoocurranceMatrices matrices,; SimpleImage ip,; SimpleImage bpMask,; int nBins,; double minValue,; double maxValue,; int d). Update existing CoocurranceMatrices with the values in a SimpleImage. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. HaralickFeatureComputer; public HaralickFeatureComputer(). Method Details. measureHaralick; public static HaralickFeatures measureHaralick(SimpleImage ip,; SimpleImage bpMask,; int nBins,; double minValue,; double maxValue,; int d); Compute mean Haralick features from a SimpleImage, with optional masking. Parameters:; ip - input image; bpMask - binary mask (may be null); nBins - number of bins in co-occurrence matrix; minValue - minimum value for binning in the co-occurrence matrix; maxValue - maximum value for binning in the co-occurrence matrix; d - separation between pixels considered adjacent, usually 1; Returns:. updateCooccurrenceMatrices; public static CoocurranceMatrices updateCooccurrenceMatrices(CoocurranceMatrices matrices,; SimpleImage ip,; SimpleImage bpMask,; int nBins,; double minValue,; double maxValue,; int d); Update existing CoocurranceMatrices with the values in a SimpleImage. Parameters:; matrices - ; ip - input image; bpMask - binary mask (may be null); nBins - number of bins in co-occurrence matrix; minValue - minimum value for binning in the co-occurrence matrix; maxValue - maximum value for binning in the co-occurrence matrix; d - separation between pixels considered adjacent, usually 1; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/features/HaralickFeatureComputer.html:2048,update,updateCooccurrenceMatrices,2048,javadoc/docs/qupath/lib/analysis/features/HaralickFeatureComputer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/features/HaralickFeatureComputer.html,2,['update'],['updateCooccurrenceMatrices']
Deployability,"ct, and any descendant objects. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). getSuitableName; public static String getSuitableName(Class<? extends PathObject> cls,; boolean makePlural); Get a user-friendly ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:22100,update,updatePlaneRecursive,22100,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['update'],['updatePlaneRecursive']
Deployability,"ct,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create (optionally) transformed versions of the PathObject and all its descendants, recursively, optionally assigning; new IDs to the created objects. static void; unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'unlocked'. static void; unlockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. static PathObject; updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane). Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object, and any descendant objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectTools; public PathObjectTools(). Method Details. hasPointROI; public static boolean hasPointROI(PathObject pathObject); Returns true if a PathObject has a Point ROI. Parameters:; pathObject - ; Returns:. countObjectsWithClass; public static int countObjectsWithClass(Collection<? extends PathObject> pathObjects,; PathClass pathClass,; boolean useBaseClass); Count the number of PathObjects in a collection with a specified class or base class. Parameters:; pathObjects - ; pathClass - ; useBaseClass - ; Returns:. getObjectsOfClass; public static List<PathObject> getObjectsOfClass(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get the PathObjects in a collection tha",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:15051,update,updatePlaneRecursive,15051,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['update'],['updatePlaneRecursive']
Deployability,"ctor for class qupath.lib.gui.tma.TMASummaryViewer. Deprecated.; Constructor. toBlob(Mat...) - Method in interface qupath.opencv.dnn.BlobFunction. Convert one or more mats to a blob. toEncodedURI(String) - Static method in class qupath.lib.common.GeneralTools. Try to convert a path to an encoded URI. toFriendlyString() - Method in enum class qupath.lib.images.writers.ome.OMEPyramidWriter.CompressionType. Get a friendlier string representation. TOGGLE_SELECTED_OBJECTS_LOCKED - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.LockActions;  ; TOGGLE_SYNCHRONIZE_VIEWERS - Variable in class qupath.lib.gui.actions.ViewerActions;  ; toggleObjectsLocked(PathObjectHierarchy, Collection<? extends PathObject>) - Static method in class qupath.lib.objects.PathObjectTools. Toggle the 'locked' status of specified objects. toggleSelectedObjectsLocked(PathObjectHierarchy) - Static method in class qupath.lib.objects.PathObjectTools. Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. toggleShowHideChannel(ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Toggle the visibility of the specified channel. toJSON(boolean) - Method in class qupath.lib.display.ImageDisplay. Create a JSON representation of the main components of the current display. toJTS(AffineTransform) - Static method in class qupath.lib.awt.common.AffineTransforms. Create a Java Topology Suite affine transformation from a Java affine transform. TOOLBAR_ICON_SIZE - Static variable in class qupath.lib.gui.QuPathGUI. Icon size to use in the main QuPath toolbar. ToolManager - Class in qupath.lib.gui. Manage (drawing) tool selection in a QuPath UI. tooltip(ObservableValue<String>) - Method in class qupath.process.gui.commands.ui.SaveResourcePaneBuilder. Text to include in any tooltip. tooltips(boolean) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder. Request tooltips to be shown when the",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1034675,update,update,1034675,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"currently being displayed within thie viewer. getImageData() - Method in class qupath.lib.scripting.ScriptParameters. Get the current ImageData that should be used with the script. getImageData() - Method in interface qupath.opencv.ops.ImageDataServer. Get the ImageData wrapped by the ImageDataServer. getImageDisplay() - Method in class qupath.lib.gui.viewer.QuPathViewer. Get the ImageDisplay object used to determine how the image is converted to RGB for display. getImageHeight() - Method in class qupath.lib.images.servers.TileRequest. Get the height of the bounding box for this tile in the full resolution image. getImageJIcon(int, int) - Static method in class qupath.imagej.gui.IJExtension. Try to read the ImageJ icon from its jar. getImageJInstance() - Static method in class qupath.imagej.gui.IJExtension. Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). getImageJPath() - Static method in class qupath.imagej.gui.IJExtension. Get the path for a local ImageJ installation, if set. getImageList() - Method in class qupath.lib.gui.tools.MeasurementExporter. Returns the list of images (ProjectImageEntry). getImageList() - Method in interface qupath.lib.projects.Project. Get a list of image entries for the project. getImageName() - Method in interface qupath.lib.projects.ProjectImageEntry. Get a name that may be used for this entry. getImageObjectClassificationString(double, double) - Method in class qupath.lib.gui.viewer.QuPathViewer. Get a string representing the object classification x & y location in the viewer component,; or an empty String if no object is found. getImagePlane() - Method in class qupath.lib.analysis.DelaunayTools.Subdivision. Get the ImagePlane for this subdivision. getImagePlane() - Method in class qupath.lib.gui.viewer.QuPathViewer. Get the ImagePlane currently being displayed, including z and t positions. getImagePlane() - Method in class qupath.lib.images.servers.TileRequest. Get the ImagePlane for this request. g",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:406164,install,installation,406164,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installation']
Deployability,"d assuming unit spacing for all dimensions. distanceToAnnotations2D(ImageData<?>, boolean) - Static method in class qupath.lib.gui.commands.Commands. Compute the distance between all detections and the closest annotation, for all annotation classifications. DistanceTools - Class in qupath.lib.analysis. Static methods for calculating distances between objects. DistanceTools() - Constructor for class qupath.lib.analysis.DistanceTools;  ; div(Mat, double) - Static method in class qupath.opencv.tools.GroovyCV. Divide array elements by a constant. div(Mat, Mat) - Static method in class qupath.opencv.tools.GroovyCV. Per-element division of two arrays. divide(double...) - Static method in class qupath.opencv.ops.ImageOps.Core. Divide all pixels by a constant. dnn(DnnModel, int, int, Padding, String...) - Static method in class qupath.opencv.ops.ImageOps.ML. Apply a DnnModel to pixels to generate a prediction. DnnModel - Interface in qupath.opencv.dnn. General interface for implementing a deep learning model in a pipeline using OpenCV. DnnModelBuilder - Interface in qupath.opencv.dnn. Builder to create a DnnModel from DnnModelParams. DnnModelParams - Class in qupath.opencv.dnn. Parameters to build a DnnModel. DnnModelParams.Builder - Class in qupath.opencv.dnn. Builder for DnnModelParams. DnnModels - Class in qupath.opencv.dnn. Helper class for building new DnnModels. DnnModels() - Constructor for class qupath.opencv.dnn.DnnModels;  ; DnnObjectClassifier - Class in qupath.opencv.dnn. Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN. DnnObjectClassifier(PathObjectFilter, DnnModel, List<PathClass>, int, int, double) - Constructor for class qupath.opencv.dnn.DnnObjectClassifier. Constructor. DnnShape - Class in qupath.opencv.dnn. Helper class to represent input and output shapes associated with PredictionFunction. DnnTools - Class in qupath.opencv.dnn. Tools for working with OpenCV's DNN module. DnnTools() - Constructor for class qupath.op",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:265777,pipeline,pipeline,265777,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['pipeline'],['pipeline']
Deployability,"d upon its name or path, with a search depth of 4.; This first checks if the provided path is to a file that already exists.; If it is not, then it searches recursively within the current project (if available) ; up to a fixed search depth for a file with the same name. Parameters:; nameOrPath - the original name or path; Returns:; the identified file path, or the original file path if no update was found or required; Throws:; IOException; See Also:. UriUpdater.locateFile(String, int, Path...). locateFile; public static String locateFile(String nameOrPath,; int searchDepth); throws IOException; Locate a specified file based upon its name or path.; This first checks if the provided path is to a file that already exists.; If it is not, then it searches recursively within the current project (if available) ; up to a specified search depth for a file with the same name. Parameters:; nameOrPath - the original name or path; searchDepth - how deep to search subdirectories recursively; Returns:; the identified file path, or the original file path if no update was found or required; Throws:; IOException; See Also:. UriUpdater.locateFile(String, int, Path...). findDensityMapHotspots; public static void findDensityMapHotspots(String densityMapName,; int channel,; int numHotspots,; double minCounts,; boolean deleteExisting,; boolean peaksOnly); throws IOException; Find hotspots in a density map for the current image. Parameters:; densityMapName - name of the density map builder, see loadDensityMap(String); channel - channel number (usually 0); numHotspots - the maximum number of hotspots to generate within each selected object; minCounts - the minimum value in the 'counts' channel; this is used to avoid generating hotspots in areas with few objects; deleteExisting - if true, similar annotations will be deleted from the image; peaksOnly - if true, hotspots will only be generated at intensity peaks in the density map; Throws:; IOException. findDensityMapHotspots; public static voi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:133548,update,update,133548,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['update'],['update']
Deployability,"date the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. up",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1064614,update,updatePlane,1064614,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updatePlane']
Deployability,"date(). Optionally request a hierarchy update after the tasks have run. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName. Constructor Details. AbstractPlugin; public AbstractPlugin(). Method Details. getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy update after the tasks have run.; Default implementation returns true. Returns:. parseArgument; protected abstract boolean parseArgument(ImageData<T> imageData,; String arg); Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; multiple threads (via a PluginRunner) to complete their tasks. Parameters:; imageData - ; arg - ; Returns:. getParentObjects; protected abstract Collection<? extends PathObject> getParentObjects(ImageData<T> imageData); Get ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:3414,update,update,3414,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,1,['update'],['update']
Deployability,"dater.SingleUriItem> replacements). Create a new UriUpdater using the specified collections. static <T extends UriResource>UriUpdater<T>; create(T resource). Create a new UriUpdater to support updating URIs for a single UriResource. static int; fixUris(UriResource resource,; Project<?> project). Attempt to fix any broken paths by updating URIs based upon the current project. Collection<UriUpdater.SingleUriItem>; getItems(UriUpdater.UriStatus status). Get all items with the specified status, or all items is status is null. Collection<UriUpdater.SingleUriItem>; getMissingItems(). Get all missing items. Map<URI,URI>; getReplacements(). Get a map of all replacements. static String; locateFile(String path,; int searchDepth,; Path... searchPaths). Attempt to update a file using the specified search paths. static URI; locateFile(URI uri,; int searchDepth,; Path... searchPaths). Attempt to update a URI to find an existing file using the specified search paths. UriUpdater<T>; makeReplacement(URI originalItem,; URI updatedItem). Add a single replacement to the replacement map. UriUpdater<T>; relative(URI uriOriginal,; URI uriCurrent). Identify replacements for missing URIs by relativizing URI. UriUpdater<T>; relative(Path pathOriginal,; Path pathCurrent). Identify replacements for missing URIs by relativizing paths. UriUpdater<T>; searchDepth(int maxDepth). Maximum search depth when using searchDepth(int) to match filenames in directories and subdirectories. UriUpdater<T>; searchPath(Path path). Search for filenames that match missing URIs, recursively up to the depth specified by searchDepth(int). static UriResource; wrap(URI... uris). Wrap one or more URIs in a UriResource so they can be updated together. static UriResource; wrap(Collection<URI> uris). Wrap one or more URIs in a UriResource so they can be updated together. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html:2631,update,updatedItem,2631,javadoc/docs/qupath/lib/io/UriUpdater.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html,1,['update'],['updatedItem']
Deployability,"der for generating a custom scatter plot. baseClassification(PathClass...) - Static method in class qupath.lib.objects.PathObjectPredicates. Predicate that returns true if an object has any of the specified base classifications, regardless of any subclassification. BATCH_INDEX - Static variable in class qupath.lib.scripting.ScriptAttributes. Index of the current run when batch processing (starting at 0). BATCH_LAST - Static variable in class qupath.lib.scripting.ScriptAttributes. Boolean flag to indicate if the current script is the last in a batch. BATCH_SAVE - Static variable in class qupath.lib.scripting.ScriptAttributes. Boolean flag to indicate whether changes to the image data should automatically be saved. BATCH_SIZE - Static variable in class qupath.lib.scripting.ScriptAttributes. Size of the current batch processing batch. batchPredict(List<? extends Mat>) - Method in class qupath.opencv.dnn.AbstractDnnModel. Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. batchPredict(List<? extends Mat>) - Method in interface qupath.opencv.dnn.DnnModel. Prediction function that can take a batch of inputs and gives a corresponding; batch of outputs. beautify(String) - Method in interface qupath.lib.gui.scripting.syntax.ScriptSyntax. Beautifies the specified text, according to the syntax. beautifySourceAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; below(String) - Method in class qupath.lib.classifiers.object.ObjectClassifiers.ClassifyByMeasurementBuilder. Set the classification (by name) for objects for which the specified measurement has a value below the threshold. below(PathClass) - Method in class qupath.lib.classifiers.object.ObjectClassifiers.ClassifyByMeasurementBuilder. Set the classification for objects for which the specified measurement has a value below the threshold. belowEquals(String) - Method in class qupath.lib.classifiers.object.ObjectCla",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:53910,patch,patches,53910,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patches']
Deployability,"difier and Type; Method; Description; static List<PathObject>; readPoints(File file). Read a list of point annotations from a file. static List<PathObject>; readPoints(InputStream stream). Read a list of point annotations from a stream. static List<PathObject>; readPointsObjectList(File file). Deprecated. static void; writePoints(File file,; Collection<? extends PathObject> pathObjects). Write a list of point annotations to a file. static void; writePoints(OutputStream stream,; Collection<? extends PathObject> pathObjects). Write a list of point annotations to a stream. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PointIO; public PointIO(). Method Details. readPoints; public static List<PathObject> readPoints(InputStream stream); throws IOException; Read a list of point annotations from a stream. Parameters:; stream - ; Returns:; list of PathObjects; Throws:; IOException. readPoints; public static List<PathObject> readPoints(File file); throws IOException; Read a list of point annotations from a file. Parameters:; file - ; Returns:; list of PathObjects; Throws:; IOException. writePoints; public static void writePoints(OutputStream stream,; Collection<? extends PathObject> pathObjects); throws IOException; Write a list of point annotations to a stream. Parameters:; stream - ; pathObjects - ; Throws:; IOException. writePoints; public static void writePoints(File file,; Collection<? extends PathObject> pathObjects); throws IOException; Write a list of point annotations to a file. Parameters:; file - ; pathObjects - ; Throws:; IOException. readPointsObjectList; @Deprecated; public static List<PathObject> readPointsObjectList(File file); throws ZipException,; IOException; Deprecated.; Read a list of point annotations from a file. Not recommended for use (will be removed in future releases). Parameters:; file - ; Returns:; Throws:; ZipException; IOException. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/PointIO.html:2636,release,releases,2636,javadoc/docs/qupath/lib/io/PointIO.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/PointIO.html,1,['release'],['releases']
Deployability,"dler. EditableText. Interface for objects that manage editable text, including a caret position and selection. EditMenuActions;  ; EllipseROI. ROI implementing a circle, or (unrotated) ellipse. EmptyParameter. Parameter that doesn't actually store any value, but might contain some ; useful text (or a title) that may need to be displayed. EstimateStainVectors. Code for estimating stain vectors automatically from an image, or to launch an editor for visually/interactively modifying stain vectors. ExecutableLanguage. Functional interface for scripting languages that are runnable (e.g. ExportObjectsCommand. Command to export object(s) in GeoJSON format to an output file. ExportTrainingRegionsCommand. Command to help export training regions as labelled images to train AI algorithms elsewhere. ExtendedPathTool;  ; ExtensionClassLoader. ClassLoader for loading QuPath extensions and other jars from the user directory. ExtensionControlPane. Borderpane that displays extensions, with options to remove,; open containing folder, update, where possible. ExtensionManager. Manage loading extensions for a QuPathGUI instance. ExtensionsMenuActions;  ; FeatureCollection. Class to wrap a collection of objects to indicate they should be export as a GeoJSON ""FeatureCollection"". FeatureExtractor<T>. Interface for extracting features from PathObjects for the purpose of object classification. FeatureExtractors. Helper class for extracting features from objects, used along with ObjectClassifiers. FeaturePreprocessor. Create a preprocessor for an image or training matrix. FeaturePreprocessor.Builder. Builder to create a custom FeaturePreprocessor. FileCopier. Copy files to an output directory, prompting the user if necessary. FileFormatInfo. Helper class that, given a path, determines some basic file format information without enlisting; the help of an external library or performing extensive parsing of the data. FileFormatInfo.ImageCheckType. Interface defining some basic image metadata that",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:17333,update,update,17333,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['update'],['update']
Deployability,"dth,; double pixelHeight). Get scaled area of the ROI, for use with calibrated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Field Details. x; protected double x. y; protected double y. x2; protected double x2. y2; protected double y2. Method Details. contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getNumPoi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RectangleROI.html:3407,update,updatePlane,3407,javadoc/docs/qupath/lib/roi/RectangleROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RectangleROI.html,1,['update'],['updatePlane']
Deployability,"dth,; double pixelHeight). Get scaled area of the ROI, for use with calibrated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns th",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:3588,update,updatePlane,3588,javadoc/docs/qupath/lib/roi/GeometryROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html,1,['update'],['updatePlane']
Deployability,"dth,; double pixelHeight). Get scaled area of the ROI, for use with calibrated pixel sizes. double; getScaledLength(double pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). Returns a java.awt.Shape representing this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getCentroidX; public double getCentroidX(); The centroid for a Polyline here is represented by the centroid of its bounding box. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); The centroid for a Polyline here is represented by the centroid of its bounding box. Specified by:; getCentroidY in interface ROI; Returns:. getBoundsX; public double getBoundsX(); Description copied from interface: ROI; Returns the x ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolylineROI.html:3337,update,updatePlane,3337,javadoc/docs/qupath/lib/roi/PolylineROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolylineROI.html,1,['update'],['updatePlane']
Deployability,"dy exists for the given path, it will be removed.; script - the Groovy script to run; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, File). installImageDataCommand; public MenuItem installImageDataCommand(String menuPath,; Consumer<ImageData<BufferedImage>> command); Install a new command in QuPath that takes the current ImageData as input.; The command will only be enabled when an image is available. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; command - the command to run; Returns:; the MenuItem for the command; See Also:. installCommand(String, Runnable). installCommand; public MenuItem installCommand(String menuPath,; Runnable runnable); Install a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; runnable - the command to run; Returns:; the MenuItem for the command. This can be further customized if needed. runScript; public Object runScript(File file,; String script); throws ScriptException,; IllegalArgumentException; Convenience method to execute a script.; Either a script file or the text of the script must be provided, or both.; ; If only the script text is given, the language is assumed to be Groovy. Parameters:; file - the file containing the script to run; script - the script to run; Returns:; result of the script execution; Throws:; ScriptException; IllegalArgumentException - if both file and script are null. getPreferencePane; public PreferencePane getPreferencePane(); Get a reference to the PreferencePane.; ; This can be used by extensions to add in their own",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:22590,install,installed,22590,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['install'],['installed']
Deployability,"e ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anythin",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9875,patch,patch,9875,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"e current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.P",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1063983,update,updateParameterList,1063983,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateParameterList']
Deployability,"e elapsed; after the previous repaint for a new one to be triggered. void; setRotation(double theta). Set the rotation; angle in radians. void; setSelectedObject(PathObject pathObject). Set selected object in the current hierarchy, without centering the viewer. void; setSelectedObject(PathObject pathObject,; boolean addToSelected). Set selected object in the current hierarchy, without centering the viewer. void; setSpaceDown(boolean spaceDown). Notify this viewer that the isSpaceDown status should be changed. void; setTPosition(int tPosition). Set the requested time point to be visible. void; setZPosition(int zPos). Set the requested z-slice to be visible. void; tileAvailable(String serverPath,; ImageRegion region,; BufferedImage tile). Notify a listener that an image tile has been received read & is available. String; toString();  ; IntegerProperty; tPositionProperty(). Current t-position for the timepoint currently visible in the viewer. protected void; updateAffineTransform();  ; protected void; updateCursor();  ; void; zoomIn(). Zoom in by one step. void; zoomIn(int nSteps). Zoom in by a specified number of steps, where one 'step' indicates a minimal zoom increment. void; zoomOut(). Zoom out by one step. void; zoomOut(int nSteps). Zoom out by a specified number of steps, where one 'step' indicates a minimal zoom increment. void; zoomToFit(). Request that the downsample is set to contain the entire image, and the image is centered in the viewer. IntegerProperty; zPositionProperty(). Current z-position for the z-slice currently visible in the viewer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Property Details. imageData; public ReadOnlyObjectProperty<ImageData<BufferedImage>> imageDataProperty; Property for the image data currently being displayed within this viewer. See Also:. getImageData(); setImageData(ImageData); imageDataProperty(). gamma; public DoubleProperty gammaProperty",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html:13006,update,updateAffineTransform,13006,javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,2,['update'],"['updateAffineTransform', 'updateCursor']"
Deployability,"e extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageData<BufferedImage>>) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath that takes the current ImageData as input. installInfoMessage(Action, ObjectExpression<InfoMessage>) - Static method in class qupath.lib.gui.actions.ActionTools. Install an optional info message to the action. installRangePrompt(Slider) - Static method in class qupath.lib.gui.tools.GuiTools. Install a mouse click listener to prompt the user to input min/max values for a slider. installStyles(Collection<File>) - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Handle installing CSS files (which can be used to style QuPath). installTool(PathTool, KeyCodeCombination) - Method in class qupath.lib.gui.ToolManager. Install a new tool for interacting with viewers. INT16 - Enum constant in enum class qupath.lib.images.servers.PixelType. 16-bit signed integer. INT32 - Enum constant in enum class qupath.lib.images.servers.PixelType. 32-bit signed integer. INT8 - Enum constant in enum class qupath.lib.images.servers.PixelType. 8-bit signed integer. INTENSITY_FEATURES - Variable in class qupath.lib.gui.actions.menus.AnalyzeMenuActions.Actions;  ; IntensityFeaturesPlugin - Class in qupath.lib.algorithms. Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:609028,install,installRangePrompt,609028,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installRangePrompt']
Deployability,"e input resolution using a pixel calibration and a scaling factor. Parameters:; cal - input calibration; if null, a default calibration will be used; downsample - scaling factor (1.0 to use the calibration directly); Returns:. inputResolution; public PatchClassifierParams.Builder inputResolution(PixelCalibration cal); Define the input resolution using a pixel calibration object. Parameters:; cal - ; Returns:. halo; public PatchClassifierParams.Builder halo(int padding); Define a halo that is symmetric in x and y. Parameters:; padding - padding value, to be added both before and after rows and columns.; Returns:; See Also:. halo(Padding). halo; public PatchClassifierParams.Builder halo(Padding halo); Define a halo using a padding object. Parameters:; halo - ; Returns:; See Also:. halo(int). patchSize; public PatchClassifierParams.Builder patchSize(int patchSize); Define the requested square patch size. Parameters:; patchSize - width and height of the patch; Returns:. patchSize; public PatchClassifierParams.Builder patchSize(int patchWidth,; int patchHeight); Define the requested patch size. Parameters:; patchWidth - requested patch width; patchHeight - requested patch height; Returns:. preprocessing; public PatchClassifierParams.Builder preprocessing(ImageOp... preprocessingOps); Define the preprocessing steps from an array.; Note that any existing preprocessing steps in the builder will ; be replaced by those provided here. Parameters:; preprocessingOps - ; Returns:. preprocessing; public PatchClassifierParams.Builder preprocessing(Collection<? extends ImageOp> preprocessingOps); Define the preprocessing steps from a collection.; Note that any existing preprocessing steps in the builder will ; be replaced by those provided here. Parameters:; preprocessingOps - ; Returns:. prediction; public PatchClassifierParams.Builder prediction(ImageOp predictionOp); Define the prediction image op, to be applied after preprocessing ; and before postprocessing. Parameters:; predict",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html:5514,patch,patchSize,5514,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,1,['patch'],['patchSize']
Deployability,"e process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the curr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1513,update,updateProgress,1513,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,1,['update'],['updateProgress']
Deployability,"e shown. Returns:; true if the image was opened, false otherwise. openImage; public boolean openImage(QuPathViewer viewer,; String pathNew); throws IOException. Throws:; IOException. openImage; public boolean openImage(QuPathViewer viewer,; String pathNew,; boolean prompt,; boolean includeURLs); throws IOException; Open a new whole slide image server, or ImageData.; If the path is the same as a currently-open server, do nothing. Parameters:; viewer - the viewer into which the image should be opened; pathNew - ; prompt - if true, give the user the opportunity to cancel opening if a whole slide server is already set; includeURLs - if true, any prompt should support URL input and not only a file chooser; Returns:; true if the server was set for this GUI, false otherwise; Throws:; IOException. installGroovyCommand; public MenuItem installGroovyCommand(String menuPath,; File file); Install a Groovy script as a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; file - the Groovy script to run; note that this will be reloaded each time it is required; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, String). installGroovyCommand; public MenuItem installGroovyCommand(String menuPath,; String script); Install a Groovy script as a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; script - the Groovy script to run; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, File). installImageDataCommand; public MenuItem installImageDataCommand(Stri",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:20832,install,installed,20832,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['install'],['installed']
Deployability,"e, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. disableUpdates; public BooleanProperty disableUpdatesProperty; Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the list being updated even when ; it is not visible to the user. See Also:. disableUpdatesProperty(). Constructor Details. AnnotationPane; public AnnotationPane(QuPathGUI qupath); Constructor. Parameters:; qupath - current QuPath instance. AnnotationPane; public AnnotationPane(QuPathGUI qupath,; ObservableValue<ImageData<BufferedImage>> imageDataProperty); Constructor. Parameters:; qupath - current QuPath instance.; imageDataProperty - the current ImageData. Method Details. disableUpdatesProperty; public BooleanProperty disableUpdatesProperty(); Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the list being updated even when ; it is not visible to the user. Returns:. getPane; public Pane getPane(); Get the pane for display. Returns:. selectedPathObjectChanged; public void selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected); Description copied from interface: PathObjectSelectionListener; Fired when the selected objects have changed. Specified by:; selectedPathObjectChanged in interface PathObjectSelectionListener; Parameters:; pathObjectSelected - the primary selected object; previousObject - the previous primary selected object; allSelected - all currently selected objects (including the primary). changed; public void changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew). Specified by:; changed in interface ChangeListener<ImageData<BufferedImage>>. hierarchyChanged; public void hierarchyChanged(PathObjectHierarchyEven",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html:3065,update,updated,3065,javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html,1,['update'],['updated']
Deployability,"e, snapshot, snapshot, startDragAndDrop, startFullDrag, styleProperty, toBack, toFront, toString, translateXProperty, translateYProperty, translateZProperty, usesMirroring, viewOrderProperty, visibleProperty. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface javafx.css.Styleable; getStyleableNode. Property Details. doLogCounts; public BooleanProperty doLogCountsProperty; Property to control whether the histogram shows pixel counts, or the natural logarithm of the counts. See Also:. doLogCountsProperty(). minValue; public DoubleProperty minValueProperty; The minimum value displayed on the histogram.; This can be used to interactively control min/max display values from the histogram directly. See Also:. minValueProperty(). maxValue; public DoubleProperty maxValueProperty; The maximum value displayed on the histogram.; This can be used to interactively control min/max display values from the histogram directly. See Also:. maxValueProperty(). Constructor Details. BrightnessContrastHistogramPane; public BrightnessContrastHistogramPane(). Method Details. doLogCountsProperty; public BooleanProperty doLogCountsProperty(); Property to control whether the histogram shows pixel counts, or the natural logarithm of the counts. Returns:. minValueProperty; public DoubleProperty minValueProperty(); The minimum value displayed on the histogram.; This can be used to interactively control min/max display values from the histogram directly. Returns:. maxValueProperty; public DoubleProperty maxValueProperty(); The maximum value displayed on the histogram.; This can be used to interactively control min/max display values from the histogram directly. Returns:. updateHistogram; public void updateHistogram(ImageDisplay imageDisplay,; ChannelDisplayInfo channelSelected); Update the histogram to show the data for the given channel. Parameters:; imageDisplay - ; channelSelected - . ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastHistogramPane.html:13211,update,updateHistogram,13211,javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastHistogramPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastHistogramPane.html,2,['update'],['updateHistogram']
Deployability,"e. boolean; isAdditive(). Returns true if this channel can be used additively to create a composite image display;; returns false if this channel wants all the color information to itself, so can't be displayed with others. boolean; isBrightnessContrastRescaled(). Returns true if rescaling according to min & max display levels is applied, false if the full display range is used. boolean; isMutable(). Check if SingleChannelDisplayInfo.getValue(BufferedImage, int, int) returns fixed values, or if they are dependent on ; other properties of the ImageData. void; setLUTColor(int r,; int g,; int b). Set the 'maximum' color, which defines the lookup table to use. void; setMaxDisplay(float maxDisplay). Set the max display value for this channel. void; setMinDisplay(float minDisplay). Set the min display value for this channel. void; setMinMaxAllowed(float minAllowed,; float maxAllowed). Set the maximum permissible range for the image display. String; toString();  ; void; updateRGBAdditive(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode). Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. int; updateRGBAdditive(BufferedImage img,; int x,; int y,; int rgb,; ChannelDisplayMode mode). Update an existing pixel (packed RGB) additively using the color used to display a specified one. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.display.ChannelDisplayInfo; getMaxAllowed, getMaxDisplay, getMethod, getMinAllowed, getMinDisplay, isBrightnessContrastRescaled, updateRGBAdditive. Field Details. df; protected static final DecimalFormat df. CM_GRAYSCALE; protected static final IndexColorModel CM_GRAYSCALE. CM_GRAYSCALE_INVERTED; protected static final IndexColorModel CM_GRAYSCALE_INVERTED. minAllowed; protected float minAllowed. maxAllowed; protected float maxAllowed. minDisplay; protected float minDisp",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html:4521,update,updateRGBAdditive,4521,javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html,1,['update'],['updateRGBAdditive']
Deployability,"e; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.commands; Class InteractiveObjectImporter. java.lang.Object; qupath.lib.gui.commands.InteractiveObjectImporter. public final class InteractiveObjectImporter; extends Object; Static methods to import object(s) from different sources. Author:; Melvin Gelbard, Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final String; MIME_TYPE_GEOJSON. Mime type for GeoJson. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static DataFormat; getGeoJsonDataFormat(). Get a DataFormat suitable for storing GeoJSON data on a clipboard. static boolean; promptToImportObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Import a collection of objects to an object hierarchy, prompting to confirm and asking whether to update IDs. static boolean; promptToImportObjectsFromFile(ImageData<BufferedImage> imageData,; File file). Prompt to import objects read from a file. static boolean; promptToImportObjectsProjectEntry(ImageData<BufferedImage> imageData,; ProjectImageEntry<?> entry). Prompt to import objects from a project entry. static boolean; promptToPasteObjectsFromClipboard(ImageData<BufferedImage> imageData). Prompt to paste objects from the system clipboard, if possible. static List<PathObject>; readObjectsFromClipboard(ImageData<BufferedImage> imageData). Try to read objects from the system clipboard. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. MIME_TYPE_GEOJSON; public static final String MIME_TYPE_GEOJSON; Mime type for GeoJson. See Also:. Constant Field Values. Method Details. getGeoJsonDataFormat; public static DataFormat getGeoJsonDataForma",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/InteractiveObjectImporter.html:1185,update,update,1185,javadoc/docs/qupath/lib/gui/commands/InteractiveObjectImporter.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/InteractiveObjectImporter.html,1,['update'],['update']
Deployability,"eData - ; layerServer - server to return the pixel layer data; if null, the property will be removed. getPixelLayer; public static ImageServer<BufferedImage> getPixelLayer(ImageData<?> imageData); Request the pixel layer from an ImageData.; ; Note that this method is subject to change (in location and behavior). Parameters:; imageData - ; Returns:. updateMeasurementList; public void updateMeasurementList(); Update the entire measurement list for the current objects. See Also:. setImageData(ImageData, Collection). setPredicate; public void setPredicate(Predicate<? super PathObject> predicate); Set a predicate used to filter the rows of the table. Parameters:; predicate - . refreshEntries; public void refreshEntries(); Refresh the measurement values. createNumericMeasurement; @Deprecated; public Binding<Number> createNumericMeasurement(PathObject pathObject,; String column); Deprecated.; Create a specific numeric measurement.; ; Warning! This binding is not guaranteed to update its value automatically upon changes to the ; underlying object or data. Parameters:; pathObject - ; column - ; Returns:. createStringMeasurement; @Deprecated; public Binding<String> createStringMeasurement(PathObject pathObject,; String column); Deprecated.; Create a specific String measurement.; ; Warning! This binding is not guaranteed to update its value automatically upon changes to the ; underlying object or data. Parameters:; pathObject - ; column - ; Returns:. isStringMeasurement; public boolean isStringMeasurement(String name); Query whether a named measurement returns a String value only. Parameters:; name - the measurement name; Returns:; true if the measurement returns a String (only), false otherwise. isNumericMeasurement; public boolean isNumericMeasurement(String name); Query whether a named measurement returns a numeric value only. Parameters:; name - the measurement name; Returns:; true if the measurement returns a number, false otherwise. getMeasurementNames; public ReadOnlyLi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/measure/ObservableMeasurementTableData.html:5405,update,update,5405,javadoc/docs/qupath/lib/gui/measure/ObservableMeasurementTableData.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/measure/ObservableMeasurementTableData.html,1,['update'],['update']
Deployability,"eLutProperty() is turned on.; This is useful to develop more intuitive interfaces and prevent surprises when switching to grayscale mode.; ; Settings this value does not have any immediate effect on whether channels are selected or not, but rather it; is only used when switching to grayscale mode. Returns:; Since:; v0.5.0; See Also:. getSwitchToGrayscaleChannel(); setSwitchToGrayscaleChannel(ChannelDisplayInfo). setSwitchToGrayscaleChannel; public void setSwitchToGrayscaleChannel(ChannelDisplayInfo channel); Set the value of switchToGrayscaleChannelProperty(). Parameters:; channel - ; Since:; v0.5.0. getSwitchToGrayscaleChannel; public ChannelDisplayInfo getSwitchToGrayscaleChannel(); Get the value of switchToGrayscaleChannelProperty(). Returns:; Since:; v0.5.0. setMinMaxDisplay; public void setMinMaxDisplay(ChannelDisplayInfo info,; float minDisplay,; float maxDisplay); Set the min/max display values for a specified ChannelDisplayInfo.; ; The benefit of calling this method is that it will update the ImageData metadata if appropriate. Parameters:; info - ; minDisplay - ; maxDisplay - . saveChannelColorProperties; public void saveChannelColorProperties(); Save color channels in the ImageData properties. This lets them be deserialized later. selectedChannels; public ObservableList<ChannelDisplayInfo> selectedChannels(); ObservableList containing the channels currently selected for display. Returns:; See Also:. availableChannels(). availableChannels; public ObservableList<ChannelDisplayInfo> availableChannels(); ObservableList containing the channels currently available for display. Returns:; See Also:. selectedChannels(). setChannelSelected; public void setChannelSelected(ChannelDisplayInfo channel,; boolean selected); Set the selection of a channel on or off.; ; If a channel's isAdditive() method returns false, all other selected channels will be cleared.; Otherwise, other selected channels will be cleared if they are non-additive - but kept if they are additive; (an",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/ImageDisplay.html:11119,update,update,11119,javadoc/docs/qupath/lib/display/ImageDisplay.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/ImageDisplay.html,1,['update'],['update']
Deployability,"eViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant o",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1064316,update,updatePlane,1064316,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updatePlane']
Deployability,"ecified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolygonROI.html:7199,update,updatePlane,7199,javadoc/docs/qupath/lib/roi/PolygonROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolygonROI.html,1,['update'],['updatePlane']
Deployability,"ect. Specified by:; getShape in interface ROI; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Returns:. isEmpty; public boolean isEmpty(); True if the bounding",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RectangleROI.html:7154,update,updatePlane,7154,javadoc/docs/qupath/lib/roi/RectangleROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RectangleROI.html,1,['update'],['updatePlane']
Deployability,"ect; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. disableUpdates; public BooleanProperty disableUpdatesProperty; Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the table being updated even when ; it is not visible to the user. See Also:. disableUpdatesProperty(). Constructor Details. PathObjectHierarchyView; public PathObjectHierarchyView(QuPathGUI qupath); Constructor. Parameters:; qupath - the current QuPath instance. PathObjectHierarchyView; public PathObjectHierarchyView(QuPathGUI qupath,; ObservableValue<ImageData<BufferedImage>> imageDataProperty); Constructor. Parameters:; qupath - the current QuPath instance; imageDataProperty - the ImageData to display. Method Details. getPane; public Pane getPane(); Get the pane for display. Returns:. disableUpdatesProperty; public BooleanProperty disableUpdatesProperty(); Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the table being updated even when ; it is not visible to the user. Returns:. selectedPathObjectChanged; public void selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected); Description copied from interface: PathObjectSelectionListener; Fired when the selected objects have changed. Specified by:; selectedPathObjectChanged in interface PathObjectSelectionListener; Parameters:; pathObjectSelected - the primary selected object; previousObject - the previous primary selected object; allSelected - all currently selected objects (including the primary). changed; public void changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew). Specified by:; changed in interface ChangeListener<ImageData<BufferedIma",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html:3079,update,updates,3079,javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html,1,['update'],['updates']
Deployability,"ectedObjectsInHierarchy(ImageData<?>) - Static method in class qupath.lib.gui.commands.Commands. Insert the selected objects in the hierarchy, resolving positions accordingly. insertText(int, String) - Method in interface qupath.lib.gui.scripting.EditableText. Request inserting the specified text. insertText(int, String) - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; insertText(int, String) - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; installActions(Collection<? extends Action>) - Method in class qupath.lib.gui.QuPathGUI. Install the specified actions. installColorMaps(Path...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps from the specified paths. installColorMaps(ColorMaps.ColorMap...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps. installCommand(String, Runnable) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath. installDefaultFeatureClassificationBuilder(ImageDataTransformerBuilder) - Static method in class qupath.process.gui.commands.ml.PixelClassifierPane. Add to the list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; in",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:607271,install,installDefaultFeatureClassificationBuilder,607271,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installDefaultFeatureClassificationBuilder']
Deployability,"ection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and sizes. static List<DnnShape>; parseShape(MatShapeVector vector). Extract Mat dimensions from a MatShapeVector. static List<String>; parseStrings(StringVector vector). Extract Strings from a StringVector. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height). Read an image patch, optionally with a fixed size and using zero-padding if required. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding). Read an image patch, optionally with a fixed size. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. static Mat; segment(SegmentationModel model,; Mat input,; Mat output). Apply a segmentation model to an image region. static Mat; segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request). Apply a segmentation model to an image region. static void; setUseCuda(boolean requestUseCuda). Request that CUDA is used. static String; summarize(Net net,; int width,; int height,; int nChannels). Create a (multiline) summary String for a Net, given the specified image input dimensions. static boolean; useCuda(). Returns true if CUDA is available and requested. Methods inherited",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:3765,patch,patch,3765,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"ects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened list containing all PathObjects in the hierarchy (including from the root object). Collection<PathObject>; getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all objects in the hierarchy, optionally filtering to return",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:4364,update,update,4364,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,1,['update'],['update']
Deployability,"ed key. Parameters:; key - ; Returns:; Throws:; IllegalArgumentException - if no integer parameter exists for the specified key. getStringParameterValue; public String getStringParameterValue(String key); Get a String parameter value (or its default) for the specified key. Parameters:; key - ; Returns:; Throws:; IllegalArgumentException - if no String parameter exists for the specified key. getChoiceParameterValue; public Object getChoiceParameterValue(String key); Get a choice parameter value (or its default) for the specified key. Parameters:; key - ; Returns:; Throws:; IllegalArgumentException - if no choice parameter exists for the specified key. removeParameter; public Parameter<?> removeParameter(String key); Remove a parameter from this list. Parameters:; key - ; Returns:. removeEmptyParameters; public boolean removeEmptyParameters(); Remove all empty parameters from this list. Returns:. updateParameterList; public static void updateParameterList(ParameterList params,; Map<String,String> mapNew,; Locale locale); Update a ParameterList with the values specified in a map. Parameters:; params - ; mapNew - ; locale - The Locale to use for any parsing required. equalParameters; public static boolean equalParameters(ParameterList params1,; ParameterList params2); Check whether two parameter lists contain the same parameters with the same values (or defaults, if no values are set).; ; Note: 'hidden' status is ignored for parameters. Parameters:; params1 - ; params2 - ; Returns:; true if the two lists contain the same parameters, and return the same results for getValueOrDefault() for all matching parameters. getParameterListJSON; @Deprecated; public static String getParameterListJSON(ParameterList params,; String delimiter); Deprecated.; use convertToJson(ParameterList) instead. Get a JSON representation of a ParameterList's contents.; ; Note that the current Locale will not be applied to format numbers, and a decimal point will always be used. Parameters:; params -",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html:11710,update,updateParameterList,11710,javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html,2,['update'],['updateParameterList']
Deployability,"ed(boolean enabled). Toggle whether the user is permitted to switch to a new active PathTool. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. selectedTool; public ReadOnlyObjectProperty<PathTool> selectedToolProperty; Property containing the currently-selected PathTool.; If this needs to be changed, use setSelectedTool(PathTool) to ensure that ; isToolSwitchingEnabled() has an effect. See Also:. getSelectedTool(); setSelectedTool(PathTool); selectedToolProperty(). lockSelectedTool; public BooleanProperty lockSelectedToolProperty; Property to request that the selected tool be locked.; Calls to setSelectedTool(PathTool) are discarded until the tool is unlocked. See Also:. lockSelectedToolProperty(). previousSelectedTool; public ReadOnlyObjectProperty<PathTool> previousSelectedToolProperty; Property storing the previous tool that was selected.; This is useful for commands that might want to quickly toggle between tools. See Also:. getPreviousSelectedTool(); previousSelectedToolProperty(). Field Details. MOVE_TOOL; @ActionAccelerator(""m""); @ActionConfig(""Tools.move""); public final org.controlsfx.control.action.Action MOVE_TOOL. RECTANGLE_TOOL; @ActionAccelerator(""r""); @ActionConfig(""Tools.rectangle""); public final org.controlsfx.control.action.Action RECTANGLE_TOOL. ELLIPSE_TOOL; @ActionAccelerator(""o""); @ActionConfig(""Tools.ellipse""); public final org.controlsfx.control.action.Action ELLIPSE_TOOL. POLYGON_TOOL; @ActionAccelerator(""p""); @ActionConfig(""Tools.polygon""); public final org.controlsfx.control.action.Action POLYGON_TOOL. POLYLINE_TOOL; @ActionAccelerator(""v""); @ActionConfig(""Tools.polyline""); public final org.controlsfx.control.action.Action POLYLINE_TOOL. BRUSH_TOOL; @ActionAccelerator(""b""); @ActionConfig(""Tools.brush""); public final org.controlsfx.control.action.Action BRUSH_TOOL. LINE_TOOL; @ActionAccelerator(""l""); @ActionConfig(value=""Tools.line"",; ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ToolManager.html:3895,toggle,toggle,3895,javadoc/docs/qupath/lib/gui/ToolManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ToolManager.html,1,['toggle'],['toggle']
Deployability,"edExtensions(Path, String...) - Static method in class qupath.lib.io.PathIO. Get the extension of a file, or of all entries within a zip file. UPDATE - Variable in class qupath.lib.gui.actions.menus.HelpMenuActions.Actions;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewerPlus;  ; updateAvailableStyles() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Request that the list of available styles is updated. updateBounds(double, double) - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different di",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1062071,update,updates,1062071,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updates']
Deployability,"ehavior may change. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final Comparator<Version>; COMPARATOR_FULL. Compare full version, including any suffixes. static final Comparator<Version>; COMPARATOR_MAJOR. Compare major versions only. static final Comparator<Version>; COMPARATOR_MAJOR_MINOR. Compare major then minor versions. static final Comparator<Version>; COMPARATOR_MAJOR_MINOR_PATCH. Compare major then minor then patch versions (ignoring suffixes). static final Version; UNKNOWN. Constant representing any unknown version. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compareTo(Version o);  ; boolean; equals(Object obj);  ; int; getMajor(). Get the major version number (X.0.0). int; getMinor(). Get the minor version number (0.X.0). int; getPatch(). Get the patch version number (0.0.X). String; getSuffix(). Get the (optional) suffix, which may be appended at the end of the version ; number to indicate a pre-release (0.0.0-X). int; hashCode();  ; boolean; hasSuffix(). Returns true if the version has a suffix, which typically indicates that it ; does not refer to a final stable version. static Version; parse(String versionString). Parse a Version object representing a semantic version number from a String. String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. COMPARATOR_MAJOR; public static final Comparator<Version> COMPARATOR_MAJOR; Compare major versions only. COMPARATOR_MAJOR_MINOR; public static final Comparator<Version> COMPARATOR_MAJOR_MINOR; Compare major then minor versions. COMPARATOR_MAJOR_MINOR_PATCH; public static final Comparator<Version> COMPARATOR_MAJOR_MINOR_PATCH; Compare major then minor then patch versions (ignoring suffixes). COMPARATOR_FULL; public static final Comparator<Version> COMPARATOR_FULL; Compare full version, including an",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html:2022,release,release,2022,javadoc/docs/qupath/lib/common/Version.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html,1,['release'],['release']
Deployability,"eight - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to a",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8795,patch,patch,8795,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"eld Summary; Fields. Modifier and Type; Field; Description; StringProperty; openslidePathProperty;  . Constructor Summary; Constructors. Constructor; Description; OpenSlideExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getQuPathVersion, getVersion. Field Details. openslidePathProperty; @DirectoryPref(""pref.openslide.path""); public StringProperty openslidePathProperty. Constructor Details. OpenSlideExtension; public OpenSlideExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/ext/openslide/OpenSlideExtension.html:1591,install,installExtension,1591,javadoc/docs/qupath/ext/openslide/OpenSlideExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/ext/openslide/OpenSlideExtension.html,3,['install'],['installExtension']
Deployability,"emantic version number from a String. String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. COMPARATOR_MAJOR; public static final Comparator<Version> COMPARATOR_MAJOR; Compare major versions only. COMPARATOR_MAJOR_MINOR; public static final Comparator<Version> COMPARATOR_MAJOR_MINOR; Compare major then minor versions. COMPARATOR_MAJOR_MINOR_PATCH; public static final Comparator<Version> COMPARATOR_MAJOR_MINOR_PATCH; Compare major then minor then patch versions (ignoring suffixes). COMPARATOR_FULL; public static final Comparator<Version> COMPARATOR_FULL; Compare full version, including any suffixes. UNKNOWN; public static final Version UNKNOWN; Constant representing any unknown version. Method Details. getMajor; public int getMajor(); Get the major version number (X.0.0). Returns:. getMinor; public int getMinor(); Get the minor version number (0.X.0). Returns:. getPatch; public int getPatch(); Get the patch version number (0.0.X). Returns:. getSuffix; public String getSuffix(); Get the (optional) suffix, which may be appended at the end of the version ; number to indicate a pre-release (0.0.0-X). Returns:. hasSuffix; public boolean hasSuffix(); Returns true if the version has a suffix, which typically indicates that it ; does not refer to a final stable version. Returns:. toString; public String toString(). Overrides:; toString in class Object. parse; public static Version parse(String versionString); throws IllegalArgumentException; Parse a Version object representing a semantic version number from a String.; ; The version should be in the form x.y.z or x.y.z-additional, where additional ; should be a dot-separated patch version identifier. In the case that it is hyphen-separated, the hyphens will ; be replaced by dots. Parameters:; versionString - the version String to be parsed; Returns:; a Version parsed from this string, or UNKNOWN if the string is null or blank.; Thro",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html:3296,patch,patch,3296,javadoc/docs/qupath/lib/common/Version.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html,1,['patch'],['patch']
Deployability,"ements(ImageData<?>, Collection<? extends PathObject>, String, String...) - Static method in class qupath.lib.scripting.QP. Add shape measurements to the specified objects. addShapeMeasurements(ImageData<?>, Collection<? extends PathObject>, ObjectMeasurements.ShapeFeatures...) - Static method in class qupath.lib.scripting.QP. Add shape measurements to the specified objects. addShapeMeasurements(PathObject, PixelCalibration, ObjectMeasurements.ShapeFeatures...) - Static method in class qupath.lib.analysis.features.ObjectMeasurements. Add shape measurements for one object. addSingleImageToProject(Project<BufferedImage>, ImageServer<BufferedImage>, ImageData.ImageType) - Static method in class qupath.lib.gui.commands.ProjectCommands. Add a single image to a project. addSlice(Object, Number) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder. Add a slice to the pie. addStep(WorkflowStep) - Method in class qupath.lib.plugins.workflow.Workflow. Append a new step to the end of the workflow, firing an update event. addSteps(Collection<WorkflowStep>) - Method in class qupath.lib.plugins.workflow.Workflow. Append multiple steps to the end of the workflow, firing a single update event. addStringParameter(String, String, String) - Method in class qupath.lib.plugins.parameters.ParameterList. Add a String parameter. addStringParameter(String, String, String, String) - Method in class qupath.lib.plugins.parameters.ParameterList. Add a String parameter, with help text. addTextAppendableFX(TextAppendable) - Static method in class qupath.lib.gui.logging.LogManager. Register a TextAppendable that will be accept logging events and be updated on the JavaFX Application thread. addThreshold(double) - Method in class qupath.lib.gui.charts.ChartThresholdPane. Add a threshold value. addThreshold(double, Color) - Method in class qupath.lib.gui.charts.ChartThresholdPane. Add a threshold value with its display color. addThreshold(ObservableNumberValue) - Method in class qupath.lib.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:30296,update,update,30296,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"en channel for RGB images. BLUE; public static final ImageChannel BLUE; Default blue channel for RGB images. Method Details. getInstance; public static ImageChannel getInstance(String name,; Integer color); Get a channel instance with the specified name and color. Parameters:; name - Name for the channel - this must not be null.; color - Color as a packed (A)RGB value.; Returns:. getChannelList; public static List<ImageChannel> getChannelList(String... names); Convert an array of channel names into a list of ImageChannel using default colors. Parameters:; names - the names of the channels; Returns:; a list of ImageChannel, where channel names are taken from the input array. toString; public String toString(). Overrides:; toString in class Object. getDefaultChannelColor; public static Integer getDefaultChannelColor(int channel); Get the default color for a specified channel, for use when no channel colors are already known.; ; Note that the exact colors returned may differ in future releases, and it is not guaranteed that all colors ; will be unique. If the colors must be exactly reproducible then it is better to specify them rather than to; depend on this method. Parameters:; channel - ; Returns:. getDefaultRGBChannels; public static List<ImageChannel> getDefaultRGBChannels(); Get default channel list for RGB images. Returns:. getDefaultChannelList; public static List<ImageChannel> getDefaultChannelList(int nChannels); Get default channel list for an image with a specified number of channels.; This is useful whenever no further channel name or color information is available. Parameters:; nChannels - ; Returns:. isTransparent; public boolean isTransparent(); Check if the color is 'transparent'; this is used for background/ignored channels. Returns:. getName; public String getName(); Name of the output channel. Returns:. getColor; public Integer getColor(); Color used to display the output channel. Returns:. hashCode; public int hashCode(). Overrides:; hashCode in clas",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html:3410,release,releases,3410,javadoc/docs/qupath/lib/images/servers/ImageChannel.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html,1,['release'],['releases']
Deployability,"ence to the action as a property of the menu item. Parameters:; action - the action from which to construct the menu item; Returns:; a new MenuItem configured according to the action. createCheckBox; public static CheckBox createCheckBox(org.controlsfx.control.action.Action action); Create a checkbox from an action.; This stores a reference to the action as a property of the checkbox. Parameters:; action - the action from which to construct the checkbox; Returns:; a new CheckBox configured according to the action. createToggleButtonWithGraphicOnly; public static ToggleButton createToggleButtonWithGraphicOnly(org.controlsfx.control.action.Action action); Create a toggle button from an action, showing only the graphic and not any text.; This stores a reference to the action as a property of the toggle button. Parameters:; action - ; Returns:. createToggleButton; public static ToggleButton createToggleButton(org.controlsfx.control.action.Action action); Create a toggle button from an action, showing both the text and graphic if available.; This stores a reference to the action as a property of the toggle button. Parameters:; action - ; Returns:. createButton; public static Button createButton(org.controlsfx.control.action.Action action); Create a button from an action, showing both the text and graphic if available.; This stores a reference to the action as a property of the button. Parameters:; action - the action from which to construct the button; Returns:; a new Button configured according to the action. createButtonWithGraphicOnly; public static Button createButtonWithGraphicOnly(org.controlsfx.control.action.Action action); Create a button from an action, showing only the graphic and not any text.; This stores a reference to the action as a property of the button. Parameters:; action - the action from which to construct the button; Returns:; a new Button configured according to the action. createSelectableAction; public static org.controlsfx.control.action.Action",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html:12264,toggle,toggle,12264,javadoc/docs/qupath/lib/gui/actions/ActionTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html,1,['toggle'],['toggle']
Deployability,"ent PathObjectHierarchy. See Also:. getCurrentHierarchy(); clearAllObjects(). clearTMAGrid; public static void clearTMAGrid(); Remove the TMA grid from the current PathObjectHierarchy. See Also:. getCurrentHierarchy(). addShapeMeasurements; public static void addShapeMeasurements(String... features); Add the specified shape measurements to the current selected objects of the current image.; If no features are specified, all will be added. Parameters:; features - . addShapeMeasurements; public static void addShapeMeasurements(ImageData<?> imageData,; Collection<? extends PathObject> pathObjects,; String feature,; String... additionalFeatures); Add shape measurements to the specified objects.; ; Note addShapeMeasurements(ImageData, Collection, ShapeFeatures...) can be used without specifying any features.; This method requires at least one feature so as to have a distinct method signature. Parameters:; imageData - the image to which the objects belong. This is used to determine pixel calibration and to fire an update event. May be null.; pathObjects - the objects that should be measured; feature - first feature to add; additionalFeatures - optional array of Strings specifying the features to add. addShapeMeasurements; public static void addShapeMeasurements(ImageData<?> imageData,; Collection<? extends PathObject> pathObjects,; ObjectMeasurements.ShapeFeatures... features); Add shape measurements to the specified objects. Parameters:; imageData - the image to which the objects belong. This is used to determine pixel calibration and to fire an update event. May be null.; pathObjects - the objects that should be measured; features - the specific features to add. If none are specified, all available features will be added. setChannelNames; public static void setChannelNames(String... names); Set the channel names for the current ImageData. Parameters:; names - ; See Also:. setChannelNames(ImageData, String...). setChannelNames; public static void setChannelNames(ImageData",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:61856,update,update,61856,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['update'],['update']
Deployability,"entObjects(ImageData<T> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Runnable>; getTasks(ImageData<T> imageData). Get a collection of tasks to perform. protected abstract boolean; parseArgument(ImageData<T> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. protected void; postprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called immediately after running any generated tasks. protected void; preprocess(TaskRunner taskRunner,; ImageData<T> imageData). Called after parsing the argument String, and immediately before creating & running any generated tasks. protected static <T> boolean; rearrangeByStride(Collection<T> input,; T[] output,; int stride). Test method for rearranging a collection so that entries are interleaved with a regularity given by stride. protected boolean; requestHierarchyUpdate(). Optionally request a hierarchy update after the tasks have run. boolean; runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg). Run the plugin. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.plugins.PathPlugin; getDescription, getLastResultsDescription, getName. Constructor Details. AbstractPlugin; public AbstractPlugin(). Method Details. getTasks; protected Collection<Runnable> getTasks(ImageData<T> imageData); Get a collection of tasks to perform.; ; This will be called from runPlugin(TaskRunner, ImageData, String) after a call to parseArgument(ImageData, String). The default implementation simply calls getParentObjects(ImageData), then addRunnableTasks(ImageData, PathObject, List); for every parent object that was returned. Parameters:; imageData - ; Returns:. requestHierarchyUpdate; protected boolean requestHierarchyUpdate(); Optionally request a hierarchy updat",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:2419,update,update,2419,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,1,['update'],['update']
Deployability,"epresenting this ROI, if possible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. double; getX1(). Get the first x co-ordinate (start of the line). double; getX2(). Get the second x co-ordinate (end of the line). double; getY1(). Get the first y co-ordinate (start of the line). double; getY2(). Get the second y co-ordinate (end of the line). int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from i",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:3491,update,updatePlane,3491,javadoc/docs/qupath/lib/roi/LineROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html,1,['update'],['updatePlane']
Deployability,"epth of the search (i.e. how many subdirectories); searchPaths - the base directories to search, in order; Returns:; a new URI corresponding to an existing file with the same name, ; or the original URI if no replacement was found or required; Throws:; IOException. locateFile; public static String locateFile(String path,; int searchDepth,; Path... searchPaths); throws IOException; Attempt to update a file using the specified search paths. Parameters:; path - the path to a file that may or may not exist; searchDepth - the depth of the search (i.e. how many subdirectories); searchPaths - the base directories to search, in order; Returns:; the path to a file with the same name as 'path' that does exist, ; or path unchanged if no existing file could be found.; Throws:; IOException. fixUris; public static int fixUris(UriResource resource,; Project<?> project); Attempt to fix any broken paths by updating URIs based upon the current project. Parameters:; resource - the resource to update; project - ; Returns:; number of URIs that were updated. searchDepth; public UriUpdater<T> searchDepth(int maxDepth); Maximum search depth when using searchDepth(int) to match filenames in directories and subdirectories. Parameters:; maxDepth - ; Returns:. relative; public UriUpdater<T> relative(URI uriOriginal,; URI uriCurrent); Identify replacements for missing URIs by relativizing URI.; This is generally used to make corrections whenever a project has been moved. Parameters:; uriOriginal - the previous path (usually for the project); uriCurrent - the current path; Returns:. relative; public UriUpdater<T> relative(Path pathOriginal,; Path pathCurrent); Identify replacements for missing URIs by relativizing paths.; This is generally used to make corrections whenever a project has been moved. Parameters:; pathOriginal - the previous path (usually for the project); pathCurrent - the current path; Returns:. searchPath; public UriUpdater<T> searchPath(Path path); Search for filenames that mat",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html:6642,update,update,6642,javadoc/docs/qupath/lib/io/UriUpdater.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html,2,['update'],"['update', 'updated']"
Deployability,"er - Class in qupath.lib.gui.charts. Builder for creating scatter charts. ChartThresholdPane - Class in qupath.lib.gui.charts. Pane that can be used to contain an XYChart, adding adjustable thresholds to be displayed. ChartThresholdPane(XYChart<Number, Number>) - Constructor for class qupath.lib.gui.charts.ChartThresholdPane. Note: xAxis and yAxis must be instances of NumberAxis. ChartTools - Class in qupath.lib.gui.charts. Collection of static methods to help when working with JavaFX charts, ; and adapting these for QuPath's purposes. ChartTools() - Constructor for class qupath.lib.gui.charts.ChartTools;  ; CHECK_URIS - Variable in class qupath.lib.gui.actions.menus.FileMenuActions.ProjectActions;  ; checkExtensions(String, String...) - Static method in class qupath.lib.common.GeneralTools. Check whether a path ends with one of a number of specified extensions (case insensitive). checkForUpdate() - Static method in class qupath.lib.gui.extensions.UpdateChecker. Query the most recent QuPath release on GitHub. checkForUpdate(GitHubProject.GitHubRepo) - Static method in class qupath.lib.gui.extensions.UpdateChecker. Query the latest release from a GitHub repo. checkImageSupport(URI, String...) - Method in class qupath.imagej.images.servers.ImageJServerBuilder;  ; checkImageSupport(URI, String...) - Method in class qupath.lib.images.servers.bioformats.BioFormatsServerBuilder;  ; checkImageSupport(URI, String...) - Method in interface qupath.lib.images.servers.ImageServerBuilder. Check whether a URI is supported by this builder. checkImageSupport(URI, String...) - Method in class qupath.lib.images.servers.JsonImageServerBuilder;  ; checkImageSupport(URI, String...) - Method in class qupath.lib.images.servers.openslide.OpenslideServerBuilder;  ; checkMinVersion(String) - Static method in class qupath.lib.scripting.QP. Check whether the current QuPath version is ≥ the specified version. checkpoint() - Method in class qupath.lib.common.Timeit. Create a new checkpoint with ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:97881,release,release,97881,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['release'],['release']
Deployability,"er and Type; Method; Description; static RoiEditor; createInstance(). Create a new RoiEditor. void; ensureHandlesUpdated(). In the event that the current ROI has been modified elsewhere (which generally it shouldn't be); request the handles to be recomputed to avoid inconsistency. boolean; finishTranslation(). Notify the editor that translation should end. List<Point2>; getHandles(). Get all the handles for the current ROI being edited, or an empty list if no handles are available. ROI; getROI(). Retrieve the ROI currently being edited (may be null). boolean; grabHandle(double x,; double y,; double maxDist,; boolean shiftDown). Try to grab a ROI handle. boolean; hasActiveHandle(). Returns true if a handle is currently active, for example being reposition. boolean; hasROI(). Returns true if this editor currently has a ROI. boolean; isTranslating(). Query if a ROI is currently being translated through this editor. ROI; requestNewHandle(double x,; double y). Request an updated ROI with a new handle inserted - useful e.g. void; resetActiveHandle(). Ensure that no handle is active. ROI; setActiveHandlePosition(double x,; double y,; double minDisplacement,; boolean shiftDown). If a handle has been grabbed, update its displacement. void; setROI(ROI roi). Set the active ROI, stopping any ROI translation currently in progress. void; setROI(ROI roi,; boolean stopTranslating). Set the active ROI, optionally stopping any ROI translation currently in progress. boolean; startTranslation(double x,; double y,; boolean snapToPixel). Returns true if the current ROI is translatable, and at the end of this call the translation has started. ROI; updateTranslation(double x,; double y,; ImageRegion constrainRegion). Update a ROI by translation, optionally constraining its movement within a specified boundary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. createInstance; public stat",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiEditor.html:2539,update,updated,2539,javadoc/docs/qupath/lib/roi/RoiEditor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiEditor.html,1,['update'],['updated']
Deployability,"er calls a runnable, with a specified name. Parameters:; command - the runnable to call; name - the name of the action, set as the text property; Returns:; a new Action. createAction; public static org.controlsfx.control.action.Action createAction(Runnable command); Create an action whose event handler calls a runnable. Parameters:; command - the runnable to call; Returns:; a new Action. createSelectableCommandAction; public static <T>; org.controlsfx.control.action.Action createSelectableCommandAction(SelectableItem<T> command,; String name,; Node icon,; KeyCombination accelerator). createSelectableCommandAction; public static <T>; org.controlsfx.control.action.Action createSelectableCommandAction(SelectableItem<T> command,; ObservableValue<String> name,; ObservableValue<Node> icon,; KeyCombination accelerator). createSelectableCommandAction; public static <T>; org.controlsfx.control.action.Action createSelectableCommandAction(SelectableItem<T> command,; String name); Create an action from a selectable icon. Type Parameters:; T - ; Parameters:; command - item to which the action's selected property should be bound; name - text to include in the action; Returns:. createSelectableCommandAction; public static <T>; org.controlsfx.control.action.Action createSelectableCommandAction(SelectableItem<T> command). createSelectableCommandAction; public static org.controlsfx.control.action.Action createSelectableCommandAction(ObservableBooleanValue value). installInfoMessage; public static void installInfoMessage(org.controlsfx.control.action.Action action,; ObjectExpression<InfoMessage> message); Install an optional info message to the action.; If the provided object expression is not empty, a badge will be added to nodes created from the action; and display the tooltip provided by the expression. Parameters:; action - the action to which the message should be added; message - an expression that can return a message; the expression should not be null, but the message can be. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html:16478,install,installInfoMessage,16478,javadoc/docs/qupath/lib/gui/actions/ActionTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html,2,['install'],['installInfoMessage']
Deployability,"erBuilder) - Static method in class qupath.process.gui.commands.ml.PixelClassifierPane. Add to the list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageData<BufferedImage>>) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath that takes the current ImageData as input. installInfoMessage(Action, ObjectExpression<InfoMessage>) - Static method in class qupath.lib.gui.actions.ActionTools. Install an optional info message to the action. installRangePrompt(Slider) - Static method in class qupath.lib.gui.tools.GuiTools. Install a mouse click listener to prompt the user to input min/max values for a slider. installStyles(Collection<File>) - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Handle installing CSS files (which ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:608321,install,installExtension,608321,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installExtension']
Deployability,"erChartBuilder; series(String name,; Collection<? extends Number> x,; Collection<? extends Number> y). Create a scatterplot using collections of numeric values. <T> Charts.ScatterChartBuilder; series(String name,; Collection<? extends T> collection,; Function<T,Number> xFun,; Function<T,Number> yFun). Plot values extracted from objects within a specified collection. Charts.ScatterChartBuilder; series(String name,; Collection<XYChart.Data<Number,Number>> data). Create a scatterplot from existing data plots. Stage; show(). Add the chart to a stage, and show it in the Application thread. Charts.ScatterChartBuilder; size(double width,; double height). Set the preferred size of the chart. Charts.ScatterChartBuilder; title(String title). Specify the chart title. Stage; toStage(). Add the chart to a stage, but do not show it. Charts.ScatterChartBuilder; unlimitedDatapoints(). Show all datapoints, without subsampling, even when this may cause performance issues. protected void; updateChart(ScatterChart<Number,Number> chart). Method that applies properties of this builder to the chart. Charts.ScatterChartBuilder; viewer(QuPathViewer viewer). Specify a viewer. Charts.ScatterChartBuilder; width(double width). Set the preferred width of the chart. Charts.ScatterChartBuilder; windowTitle(String title). Title to use for the window, if the chart is shown. Charts.ScatterChartBuilder; xAxisMax(double upperBound). Set the upper bound for the x-axis. Charts.ScatterChartBuilder; xAxisMin(double lowerBound). Set the lower bound for the x-axis. Charts.ScatterChartBuilder; xAxisRange(double lowerBound,; double upperBound). Set the lower and upper bounds for the x-axis. Charts.ScatterChartBuilder; xLabel(String label). Specify the x-axis label. Charts.ScatterChartBuilder; yAxisMax(double upperBound). Set the upper bound for the y-axis. Charts.ScatterChartBuilder; yAxisMin(double lowerBound). Set the lower bound for the y-axis. Charts.ScatterChartBuilder; yAxisRange(double lowerBound,; doub",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/Charts.ScatterChartBuilder.html:4320,update,updateChart,4320,javadoc/docs/qupath/lib/gui/charts/Charts.ScatterChartBuilder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/Charts.ScatterChartBuilder.html,1,['update'],['updateChart']
Deployability,"erMetadata.Builder. Specify the interpretation of classification labels. classificationLabelsToChannels(Map<Integer, PathClass>, boolean) - Static method in class qupath.lib.images.servers.ServerTools. Create a list of channels from classification labels. ClassificationResolution - Class in qupath.process.gui.commands.ml. Wrapper for a PixelCalibration to be used to define classifier resolution. classifications(Collection<? extends PathObject>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder. Plot two measurements against one another for the specified objects. classify(ClassificationModel, PathObject, Mat, IntFunction<PathClass>, String) - Static method in class qupath.opencv.dnn.DnnTools. Apply a classification model to an existing image patch to classify an object. classify(ClassificationModel, PathObject, ImageServer<BufferedImage>, double, int, int, IntFunction<PathClass>, String) - Static method in class qupath.opencv.dnn.DnnTools. Apply a classification model to an image patch to classify an object. classify(ClassificationModel, PathObject, ImageServer<BufferedImage>, double, IntFunction<PathClass>, String) - Static method in class qupath.opencv.dnn.DnnTools. Apply a classification model to an image patch to classify an object. ClassifyByMeasurementBuilder(String) - Constructor for class qupath.lib.classifiers.object.ObjectClassifiers.ClassifyByMeasurementBuilder. Constructor. classifyCellsByCentroid(ImageData<BufferedImage>, PixelClassifier, boolean) - Static method in class qupath.opencv.ml.pixel.PixelClassifierTools. Classify cells according to the prediction of the pixel corresponding to the cell centroid using a PixelClassifier. classifyDetectionsByCentroid(String) - Static method in class qupath.lib.scripting.QP. Classify detections according to the prediction of the pixel corresponding to the detection centroid using a PixelClassifier. classifyDetectionsByCentroid(PixelClassifier) - Static method in class qupath.lib.scripting.QP. Classify",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:101854,patch,patch,101854,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,"erarchy. Insert a collection of objects into the hierarchy, firing a change event on completion. insertPixelClassifiersAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; insertQPExImportAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; insertQPImportAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; insertSelectedObjectsInHierarchy(ImageData<?>) - Static method in class qupath.lib.gui.commands.Commands. Insert the selected objects in the hierarchy, resolving positions accordingly. insertText(int, String) - Method in interface qupath.lib.gui.scripting.EditableText. Request inserting the specified text. insertText(int, String) - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; insertText(int, String) - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; installActions(Collection<? extends Action>) - Method in class qupath.lib.gui.QuPathGUI. Install the specified actions. installColorMaps(Path...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps from the specified paths. installColorMaps(ColorMaps.ColorMap...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps. installCommand(String, Runnable) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath. installDefaultFeatureClassificationBuilder(ImageDataTransformerBuilder) - Static method in class qupath.process.gui.commands.ml.PixelClassifierPane. Add to the list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:606926,install,installColorMaps,606926,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installColorMaps']
Deployability,"erarchyUpdate() - Static method in class qupath.lib.scripting.QP. Trigger an update for the current hierarchy. fireHierarchyUpdate(PathObjectHierarchy) - Static method in class qupath.lib.scripting.QP. Trigger an update for the specified hierarchy. fireImageDataChanged(ImageData<BufferedImage>, ImageData<BufferedImage>) - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; fireObjectClassificationsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object classifications have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating objects have changed. fireObjectsChangedEvent(Object, Collection<? extends PathObject>, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating objects have changed, and may still be changing. fireVisibleRegionChangedEvent(Shape) - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; fireWorkflowUpdatedEvent() - Method in class qupath.lib.plugins.workflow.Workflow;  ; fitCorePolygonToGrid(Polygon, double, int, int) - Static method in class qupath.imagej.detect.dearray.TMADearrayer. Given a polygon representing TMA core centroids in any order, fit this to a coordinate grid. fixUris(UriResource, Project<?>) - Static method in class qupath.lib.io.UriUpdater. Attempt to fix any broken paths by updating URIs based upon the current pr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:309956,update,update,309956,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"ers within QuPath. qupath.lib.gui.extensions. Interface to define QuPath extensions. qupath.lib.gui.localization;  ; qupath.lib.gui.logging. Support for logging. qupath.lib.gui.measure. Classes related to extracting, calculating and displaying measurements. qupath.lib.gui.panes. Panes used to display information in the QuPath interface. qupath.lib.gui.prefs. Custom preferences. qupath.lib.gui.scripting. Scripting through the QuPath interface. qupath.lib.gui.tma. Display, summarize and query tissue microarray analysis results. qupath.lib.gui.tools. Assorted helper classes for the QuPath interface. qupath.lib.gui.viewer. QuPath image viewing and display. Classes. Class; Description; BuildInfo. Basic version information about the current QuPath build. ColorMapCanvas. Canvas to show the range of a ColorMap (i.e. ExtensionClassLoader. ClassLoader for loading QuPath extensions and other jars from the user directory. ExtensionControlPane. Borderpane that displays extensions, with options to remove,; open containing folder, update, where possible. ExtensionManager. Manage loading extensions for a QuPathGUI instance. FileCopier. Copy files to an output directory, prompting the user if necessary. JavadocViewer. Command to show javadocs in a WebView. QuPathApp. Launcher application to start QuPath. QuPathGUI. Main GUI for QuPath, written using JavaFX. SelectableItem<T>. Helper class for managing items when only one of them may be selected. SharedThreadPoolManager. Manager to simplify submitting short tasks in background threads using a shared ExecutorService. TaskRunnerFX. Plugin runner that takes care of showing progress (in the appropriate thread) using JavaFX components. ToolManager. Manage (drawing) tool selection in a QuPath UI. UndoRedoManager. Helper class to add undo/redo support to QuPath. Urls. Class to return core QuPath URLs centrally. UserDirectoryManager. Helper class for managing a user directory, and associated subdirectories. WelcomeStage. Welcome page when la",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/package-summary.html:1721,update,update,1721,javadoc/docs/qupath/lib/gui/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/package-summary.html,1,['update'],['update']
Deployability,"ers:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:52022,toggle,toggleSelectedObjectsLocked,52022,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,3,"['toggle', 'update']","['toggleSelectedObjectsLocked', 'update']"
Deployability,"ertText(int, String) - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; installActions(Collection<? extends Action>) - Method in class qupath.lib.gui.QuPathGUI. Install the specified actions. installColorMaps(Path...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps from the specified paths. installColorMaps(ColorMaps.ColorMap...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps. installCommand(String, Runnable) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath. installDefaultFeatureClassificationBuilder(ImageDataTransformerBuilder) - Static method in class qupath.process.gui.commands.ml.PixelClassifierPane. Add to the list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageDa",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:607696,install,installExtension,607696,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installExtension']
Deployability,"erwise. isTranslating; public boolean isTranslating(); Query if a ROI is currently being translated through this editor. Returns:. ensureHandlesUpdated; public void ensureHandlesUpdated(); In the event that the current ROI has been modified elsewhere (which generally it shouldn't be); request the handles to be recomputed to avoid inconsistency. getHandles; public List<Point2> getHandles(); Get all the handles for the current ROI being edited, or an empty list if no handles are available. Returns:. hasROI; public boolean hasROI(); Returns true if this editor currently has a ROI. Returns:. getROI; public ROI getROI(); Retrieve the ROI currently being edited (may be null). Returns:. hasActiveHandle; public boolean hasActiveHandle(); Returns true if a handle is currently active, for example being reposition. Returns:; See Also:. getHandles(). resetActiveHandle; public void resetActiveHandle(); Ensure that no handle is active. requestNewHandle; public ROI requestNewHandle(double x,; double y); Request an updated ROI with a new handle inserted - useful e.g. when drawing a polygon. Parameters:; x - ; y - ; Returns:. grabHandle; public boolean grabHandle(double x,; double y,; double maxDist,; boolean shiftDown); Try to grab a ROI handle.; This will fail (return false, with an error logged) if isTranslating() returns true. Parameters:; x - ; y - ; maxDist - define the distance to search for the nearest handle; shiftDown - determined from a MouseEvent, this may optionally be used to control how the handle is modified ; (e.g. to enforce a square bounding box for a rectangle or ellipse).; Returns:. setActiveHandlePosition; public ROI setActiveHandlePosition(double x,; double y,; double minDisplacement,; boolean shiftDown); If a handle has been grabbed, update its displacement. Parameters:; x - ; y - ; minDisplacement - if > 0, smaller movements will be discarded to avoid unnecessary work.; shiftDown - determined from a MouseEvent, this may optionally be used to control how the ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiEditor.html:6115,update,updated,6115,javadoc/docs/qupath/lib/roi/RoiEditor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiEditor.html,1,['update'],['updated']
Deployability,"er viewer,; File file,; boolean keepExistingServer,; boolean promptToSaveChanges). Open a saved data file within a particular viewer, optionally keeping the same ImageServer as is currently open. ReadOnlyObjectProperty<Project<BufferedImage>>; projectProperty(). Read-only property representing the currently-open project. boolean; promptToOpenImageFile(). Show a file chooser to open a new image in the current viewer. boolean; promptToOpenImageFileOrUri(). Show a dialog to open a new image in the current viewer, with support ; for entering a URL (rather than requiring a local file only). ReadOnlyBooleanProperty; readOnlyProperty(). Property indicating whether QuPath is in 'read-only' mode. void; refreshProject(). Refresh the project, updating the display if required. void; refreshTitle(). Refresh the title bar in the main QuPath window. void; requestAutomaticUpdateCheck(). Request an automated update check in a background thread. void; requestFullUpdateCheck(). Request a manual update check in a background thread. boolean; resetAvailablePathClasses(). Populate the availablePathClasses with a default list. boolean; runPlugin(PathPlugin<BufferedImage> plugin,; String arg,; boolean doInteractive). Run a plugin, interactively (i.e. Object; runScript(File file,; String script). Convenience method to execute a script. void; sendQuitRequest(). Request to quit QuPath. boolean; setAccelerator(String menuCommand,; String combo). Set an accelerator for the specified menu command. boolean; setAccelerator(MenuItem item,; KeyCombination combo). Set the accelerator for the specified menu item. boolean; setAccelerator(org.controlsfx.control.action.Action action,; KeyCombination combo). Set the accelerator for the specified action. void; setProject(Project<BufferedImage> project). Set the active project, triggering any necessary GUI updates. void; setReadOnly(boolean readOnly). Specify whether QuPath should be in 'read-only' mode. void; setScriptEditor(ScriptEditor scriptEditor). Set ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:9126,update,update,9126,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['update'],['update']
Deployability,"es. Modifier and Type; Class; Description; class ; SvgExtension.SvgActions;  . Constructor Summary; Constructors. Constructor; Description; SvgExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. SvgExtension; public SvgExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns th",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/extension/svg/SvgExtension.html:1539,install,installExtension,1539,javadoc/docs/qupath/lib/extension/svg/SvgExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/extension/svg/SvgExtension.html,2,['install'],['installExtension']
Deployability,"es.servers.ImageServerMetadata. Get the number of resolution levels. nMissingValues() - Method in class qupath.lib.analysis.stats.Histogram. Number of NaNs in the input array. NO - Enum constant in enum class qupath.lib.gui.dialogs.Dialogs.DialogButton. Deprecated.; ""No"" option. nObjects() - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Number of objects in the hierarchy, excluding the root. nObjects() - Static method in class qupath.lib.scripting.QP. Get a count of the total number of objects in the current hierarchy. nObserved() - Method in class qupath.lib.analysis.stats.survival.KaplanMeierData. Get the number of observed (not censored) events. NONE - Enum constant in enum class qupath.lib.classifiers.Normalization. Do not normalize features. NONE - Enum constant in enum class qupath.lib.extension.svg.SvgTools.SvgBuilder.ImageIncludeType. Do not include images. NONE - Enum constant in enum class qupath.lib.gui.prefs.PathPrefs.AutoUpdateType. Don't check for any updates automatically. NONE - Enum constant in enum class qupath.lib.gui.prefs.PathPrefs.DetectionTreeDisplayModes. Do not show detections. NONE - Enum constant in enum class qupath.lib.gui.prefs.PathPrefs.ImageTypeSetting. Do not set the image type. NONE - Enum constant in enum class qupath.opencv.tools.LocalNormalization.NormalizationType. No local normalization. nonModal() - Method in class qupath.lib.gui.dialogs.Dialogs.Builder. Deprecated.; Specify that the dialog should be non-modal. Normalization - Enum Class in qupath.lib.classifiers. Methods for normalizing features. normalize(Mat, Normalizer) - Static method in class qupath.opencv.ml.objects.features.Preprocessing. Apply a Normalizer to new training data samples. normalize(Normalization) - Method in class qupath.opencv.ml.FeaturePreprocessor.Builder. Define normalization type. Normalize() - Constructor for class qupath.opencv.ops.ImageOps.Normalize;  ; NORMALIZED - Enum constant in enum class qupath.lib.gui.charts.HistogramCha",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:712080,update,updates,712080,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updates']
Deployability,"esource.getURIs(). String; getSummary(). Get a summary string representing this image entry. T; getThumbnail(). Request a thumbnail for the image. boolean; hasImageData(). Check if this entry has saved ImageData already available. String; putMetadataValue(String key,; String value). Store a metadata value. PathObjectHierarchy; readHierarchy(). Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. ImageData<T>; readImageData(). Read the ImageData associated with this entry, or create a new ImageData if none is currently present. String; removeMetadataValue(String key). Remove a metadata value. void; saveImageData(ImageData<T> imageData). Save the ImageData for this entry using the default storage location for the project. void; setDescription(String description). Set the description. void; setImageName(String name). Set the image name for this project entry. void; setThumbnail(T img). Set a thumbnail for the image. default boolean; updateServerURIs(Map<URI,URI> replacements). Deprecated.; use instead UriResource.updateURIs(Map). Methods inherited from interface qupath.lib.io.UriResource; getUris, getURIs, updateUris, updateURIs. Method Details. getID; String getID(); Get a unique ID to represent this entry. Returns:. setImageName; void setImageName(String name); Set the image name for this project entry. Parameters:; name - . getImageName; String getImageName(); Get a name that may be used for this entry.; ; This may be derived automatically from the server path, or set explicitly to be something else. ; It may also be randomized to support blinded analysis. Returns:; See Also:. getOriginalImageName(); Project.setMaskImageNames(boolean); Project.getMaskImageNames(). getOriginalImageName; String getOriginalImageName(); Get the original image name, without any randomization. Most UI elements should prefer getImageName() to ; ensure that the randomization does its job. Returns:. getEntryPath; Path getEntryPath(); Get a path to t",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:3105,update,updateServerURIs,3105,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,1,['update'],['updateServerURIs']
Deployability,"esource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource. Update the specified URIs. updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.DnnObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVDnn;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVModelObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.opencv.ops.ImageOp. Default implementation makes no changes; classes should override this if necessary. UpdateUrisCommand<T> - Class in qupath.lib.gui.commands. Fix broken URIs by using relative paths or prompting the user to select files. updateZ(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated z value. updatingConstrainingObjects(QuPathViewer, double, double, Collection<PathObject>) - Method in class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler. New annotations can be constrained while they are being drawn, to avoid overl",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1068128,update,updateURIs,1068128,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateURIs']
Deployability,"ess. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> pathObjects). Given a collection of objects, split the objects with area ROIs using dividing lines extracted from the objects; with line ROIs. static Map<PathObject,List<PathObject>>; splitAreasByLines(Collection<? extends PathObject> areaObjects,; Collection<? extends PathObject> lineObjects). Given a collection of objects with area ROIs, split these using dividing lines extracted from objects; with line ROIs. static boolean; standardizeClassifications(Collection<PathObject> pathObjects). Standardize the classifications for a collection of objects. static boolean; standardizeClassifications(Collection<PathObject> pathObjects,; Comparator<String> comparator). Standardize the classifications for a collection of objects. static void; swapNameAndClass(PathObject pathObject,; boolean includeColor). Swap the name and PathClass of an object. static void; toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Toggle the 'locked' status of specified objects. static void; toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy). Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. static PathObject; transformObject(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements). Create a transformed version of a PathObject with a new ID. static PathObject; transformObject(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create a transformed version of a PathObject, optionally with a new ID. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements). Create (optionally) transformed versions of the PathObject and all its descendants, recursively. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean cop",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:13099,toggle,toggleObjectsLocked,13099,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['toggle'],['toggleObjectsLocked']
Deployability,"essing.MorphologicalReconstruction. Find regional maxima using morphological reconstruction. findRegionalMaxima(Mat) - Static method in class qupath.opencv.tools.OpenCVTools. Get the regional maxima within a Mat, providing the output as a labeled image. finishTranslation() - Method in class qupath.lib.roi.RoiEditor. Notify the editor that translation should end. fireHierarchyChangedEvent(Object) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating the hierarchy structure has changed. fireHierarchyChangedEvent(Object, PathObject) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. fireHierarchyUpdate() - Static method in class qupath.lib.scripting.QP. Trigger an update for the current hierarchy. fireHierarchyUpdate(PathObjectHierarchy) - Static method in class qupath.lib.scripting.QP. Trigger an update for the specified hierarchy. fireImageDataChanged(ImageData<BufferedImage>, ImageData<BufferedImage>) - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; fireObjectClassificationsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object classifications have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating objects have changed",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:309185,update,update,309185,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"est that the list of available styles is updated. updateBounds(double, double) - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Met",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1062541,update,updateCursor,1062541,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateCursor']
Deployability,"etectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy (including sub-classes of detections). Returns:. getAnnotationObjects; public Collection<PathObject> getAnnotationObjects(); Get all annotation objects in the hierarchy. Returns:. getObjects; public Collection<PathObject> getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class.; Note that this method returns the root object, unless it has been filtered out. Parameters:; pathObjects - ; cls - ; Returns:. updateObject; public void updateObject(PathObject pathObject,; boolean isChanging); Update an object that is already in the hierarchy (e.g. because its ROI has changed). Parameters:; pathObject - the object to update; isChanging - if true, indicate that the object is still being changed.; Some listeners may delay processing in expectation of an update event where isChanging is false. getFlattenedObjectList; public List<PathObject> getFlattenedObjectList(List<PathObject> list); Get a flattened list containing all PathObjects in the hierarchy (including from the root object).; ; To get a flattened list containing all PathObjects without the root object, one can run the following:; getFlattenedObjectList(null).stream().filter(p -> !p.isRootObject()).toList(). Or, since v0.4.0, just use getAllObjects(boolean) instead. Parameters:; list - ; Returns:; Since:; getAllObjects(boolean). getAllObjects; public Collection<PathObject> getAllObjects(boolean includeRoot); Get all the objects in the hierarchy, optionally including the root object. Parameters:; includeRoot - ; Returns:; Since:; v0.4.0. nObjects; public int nObjects(); Number of objects in the hierarchy, excluding the root. Returns:. setHierarchy; public void setHierarchy(PathObjectHierarchy hierarchy); Set the contents of this hierarchy to be the same as that of anot",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:17028,update,update,17028,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,1,['update'],['update']
Deployability,"ethod; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. SvgExtension; public SvgExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/extension/svg/SvgExtension.html:1979,install,installExtension,1979,javadoc/docs/qupath/lib/extension/svg/SvgExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/extension/svg/SvgExtension.html,1,['install'],['installExtension']
Deployability,"ethod; Description; static PatchClassifierParams.Builder; builder(). Create a builder to generate new patch classifier params. static PatchClassifierParams.Builder; builder(PatchClassifierParams params). Create a builder to generate new patch classifier params, ; initialized with the values from an existing parameter object. static PixelClassifier; buildPixelClassifier(PatchClassifierParams params). Build a pixel classifier using these parameters. Padding; getHalo(). Get the 'halo' around the output. List<ColorTransforms.ColorTransform>; getInputChannels(). Get the channels to extract from the image as input to the model. PixelCalibration; getInputResolution(). Get the requested input resolution for the image. ImageServerMetadata.ChannelType; getOutputChannelType(). Get the requested output channel type. Map<Integer,PathClass>; getOutputClasses(). Get the classifications for the output. int; getPatchHeight(). Get the height of a patch, in pixels. int; getPatchWidth(). Get the width of a patch, in pixels. List<ImageOp>; getPostprocessing(). Get any postprocessing steps that should be applied after prediction. ImageOp; getPredictionOp(). Get the image op used for prediction only. List<ImageOp>; getPreprocessing(). Get any preprocessing steps that should be applied. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getInputChannels; public List<ColorTransforms.ColorTransform> getInputChannels(); Get the channels to extract from the image as input to the model. Returns:. getPatchWidth; public int getPatchWidth(); Get the width of a patch, in pixels. Returns:. getPatchHeight; public int getPatchHeight(); Get the height of a patch, in pixels. Returns:. getHalo; public Padding getHalo(); Get the 'halo' around the output.; This can be used to determine appropriate padding to ; avoid tile boundary artifacts. ; Can be null or empty. Returns:. getInputResolution; public Pixe",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html:2097,patch,patch,2097,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,1,['patch'],['patch']
Deployability,"evels is applied, false if the full display range is used. Returns:. getValueAsString; String getValueAsString(BufferedImage img,; int x,; int y); Get a string representation of a pixel's value.; This might be a single number, or 3 numbers for an RGB image where the channel includes all values. Parameters:; img - ; x - ; y - ; Returns:. getRGB; int getRGB(BufferedImage img,; int x,; int y,; ChannelDisplayMode mode); Get the RGB value that would be used to display a particular pixel. Parameters:; img - ; x - ; y - ; mode - ; Returns:. getRGB; int[] getRGB(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode); Get the RGB values that would be used to display all the pixels of an image. Parameters:; img - ; rgb - ; mode - ; Returns:. updateRGBAdditive; int updateRGBAdditive(BufferedImage img,; int x,; int y,; int rgb,; ChannelDisplayMode mode); Update an existing pixel (packed RGB) additively using the color used to display a specified one. Parameters:; img - ; x - ; y - ; rgb - ; mode - ; Returns:. updateRGBAdditive; void updateRGBAdditive(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode); Update an array of existing pixels (packed RGB) additively using the colors to display a specified image.; May throw an UnsupportedOperationException if isAdditive() returns false;. Parameters:; img - ; rgb - ; mode - . doesSomething; boolean doesSomething(); Returns true if this does something - anything - and false otherwise.; For example, this will return false if we have an RGB image with no transformations of any kind applied (e.g. brightness/contrast). Returns:. getColor; Integer getColor(); Predominate color used when this ChannelDisplayInfo uses a Color LUT (e.g. Color.RED for a red channel).; Returns null if there is no appropriate color choice, or the image is RGB. Returns:. getMethod; default ColorTransformer.ColorTransformMethod getMethod(); Get the ColorTransformer.ColorTransformMethod associated with this channel, or null; if no method is relevant. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html:7877,update,updateRGBAdditive,7877,javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html,2,['update'],['updateRGBAdditive']
Deployability,"existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriResource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource. Update the specified URIs. updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.DnnObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVDnn;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVModelObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.opencv.ops.ImageOp. Default implementation makes no changes; classes should override this if necessary. UpdateUrisCommand<T> - Class in qupath.lib.gui.commands. Fix broken URIs by using relative paths or prompting the user to select files. updateZ(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivale",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1067859,update,updateURIs,1067859,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateURIs']
Deployability,"extraction, filtering, normalization), ; which may impact the number and type of image channels - but not other aspects of the image, with the exception of removing any padding.; ; Operations may be chained. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; Mat; apply(Mat input). Apply operation to the image. default List<ImageChannel>; getChannels(List<ImageChannel> channels). Get appropriate channels to reflect the output of this transform. default PixelType; getOutputType(PixelType inputType). Get the output pixel type. default Padding; getPadding(). Get the padding requested for this operation. default Collection<URI>; getURIs(). Default implementation returns an empty list; classes should override this if necessary. default boolean; updateURIs(Map<URI,URI> replacements). Default implementation makes no changes; classes should override this if necessary. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Method Details. apply; Mat apply(Mat input); Apply operation to the image. The input may be modified (and the operation applied in-place), ; therefore should be duplicated if a copy is required to be kept.; ; Note that any non-empty padding will be removed, potentially giving an output image smaller than ; the input. If this is not desirable use ImageOps.padAndApply(ImageOp, Mat). Parameters:; input - input image; Returns:; output image, which may be the same as the input image; See Also:. getPadding(); ImageOps.padAndApply(ImageOp, Mat, int); ImageOps.padAndApply(ImageOp, Mat). getPadding; default Padding getPadding(); Get the padding requested for this operation.; ; The default is to return Padding.empty().; ; Subclasses that perform neighborhood operations should override this.; If the padding is non-empty, it will be removed when apply(Mat) is called - ; and so the Mat that is output will be smaller than the Mat that was input. Returns:; the padding requested by th",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOp.html:1642,update,updateUris,1642,javadoc/docs/qupath/opencv/ops/ImageOp.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOp.html,1,['update'],['updateUris']
Deployability,"ey). Get a integer parameter value (or its default) for the specified key. Map<String,Object>; getKeyValueParameters(boolean includeHidden). Returns a map of keys and their corresponding parameter values. static String; getParameterListJSON(Map<String,?> map,; String delimiter). Deprecated.; use convertToJson(Map) instead. static String; getParameterListJSON(ParameterList params,; String delimiter). Deprecated.; use convertToJson(ParameterList) instead. Map<String,Parameter<?>>; getParameters(). Returns a map of keys and their corresponding parameters. String; getStringParameterValue(String key). Get a String parameter value (or its default) for the specified key. boolean; removeEmptyParameters(). Remove all empty parameters from this list. Parameter<?>; removeParameter(String key). Remove a parameter from this list. void; setHiddenParameters(boolean hidden,; String... keys). Set the 'hidden' flag for parameters with the specified keys. static void; updateParameterList(ParameterList params,; Map<String,String> mapNew,; Locale locale). Update a ParameterList with the values specified in a map. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ParameterList; public ParameterList(). Method Details. setHiddenParameters; public void setHiddenParameters(boolean hidden,; String... keys); Set the 'hidden' flag for parameters with the specified keys.; This can be used to notify any consumer that certain parameters are not required, ; or otherwise should not be presented to the user. Parameters:; hidden - ; keys - . duplicate; public ParameterList duplicate(); Create a deep copy of this parameter list. Returns:. addDoubleParameter; public ParameterList addDoubleParameter(String key,; String prompt,; double defaultValue); Add a double parameter to this list. Parameters:; key - ; prompt - ; defaultValue - ; Returns:. addDoubleParameter; public ParameterList addDoublePar",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html:5051,update,updateParameterList,5051,javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/parameters/ParameterList.html,1,['update'],['updateParameterList']
Deployability,"e pixelWidth,; double pixelHeight). Get the scaled length, for use with calibrated pixel sizes. Shape; getShape(). It is not possible to convert a PointROI to a java.awt.Shape. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isEmpty(). A Points ROI is empty if it contains no points (*not* if its bounds have no width or height... boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. protected void; recomputeBounds();  ; ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. protected void; updateBounds(double x,; double y);  ; ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Method Details. getCentroidX; public double getCentroidX(); Description copied from interface: ROI; Returns the x coordinate for the ROI centroid. Specified by:; getCentroidX in interface ROI; Returns:. getCentroidY; public double getCentroidY(); Description copied from interface: ROI; Returns the y coordinate for the ROI centroid. Specified by:; getCentroidY in interface ROI; Returns:. getNearest; public Point2 getNearest(double x,; double y,; double maxDist); Identify the closest point within a specified distance to coordinates x,y - or null if no points are found. Parameters:; x - ; y - ; maxDist - ; Returns:. recomputeBounds; protected void recomputeBounds(). updateBounds;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:3538,update,updateBounds,3538,javadoc/docs/qupath/lib/roi/PointsROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html,2,['update'],"['updateBounds', 'updatePlane']"
Deployability,"ferences;  ; TMAScoreImporter - Class in qupath.lib.io. Helper class for importing data in connection with TMA slides. TMAScoreImporter() - Constructor for class qupath.lib.io.TMAScoreImporter;  ; TMASummaryViewer - Class in qupath.lib.gui.tma. Deprecated.; since v0.4.0. TMASummaryViewer(Stage) - Constructor for class qupath.lib.gui.tma.TMASummaryViewer. Deprecated.; Constructor. toBlob(Mat...) - Method in interface qupath.opencv.dnn.BlobFunction. Convert one or more mats to a blob. toEncodedURI(String) - Static method in class qupath.lib.common.GeneralTools. Try to convert a path to an encoded URI. toFriendlyString() - Method in enum class qupath.lib.images.writers.ome.OMEPyramidWriter.CompressionType. Get a friendlier string representation. TOGGLE_SELECTED_OBJECTS_LOCKED - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.LockActions;  ; TOGGLE_SYNCHRONIZE_VIEWERS - Variable in class qupath.lib.gui.actions.ViewerActions;  ; toggleObjectsLocked(PathObjectHierarchy, Collection<? extends PathObject>) - Static method in class qupath.lib.objects.PathObjectTools. Toggle the 'locked' status of specified objects. toggleSelectedObjectsLocked(PathObjectHierarchy) - Static method in class qupath.lib.objects.PathObjectTools. Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. toggleShowHideChannel(ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Toggle the visibility of the specified channel. toJSON(boolean) - Method in class qupath.lib.display.ImageDisplay. Create a JSON representation of the main components of the current display. toJTS(AffineTransform) - Static method in class qupath.lib.awt.common.AffineTransforms. Create a Java Topology Suite affine transformation from a Java affine transform. TOOLBAR_ICON_SIZE - Static variable in class qupath.lib.gui.QuPathGUI. Icon size to use in the main QuPath toolbar. ToolManager - Class in qupath.lib.gui. M",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1034322,toggle,toggleObjectsLocked,1034322,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['toggle'],['toggleObjectsLocked']
Deployability,"fferedImage>, ImageData.ImageType) - Static method in class qupath.lib.gui.commands.ProjectCommands. Add a single image to a project. addSlice(Object, Number) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder. Add a slice to the pie. addStep(WorkflowStep) - Method in class qupath.lib.plugins.workflow.Workflow. Append a new step to the end of the workflow, firing an update event. addSteps(Collection<WorkflowStep>) - Method in class qupath.lib.plugins.workflow.Workflow. Append multiple steps to the end of the workflow, firing a single update event. addStringParameter(String, String, String) - Method in class qupath.lib.plugins.parameters.ParameterList. Add a String parameter. addStringParameter(String, String, String, String) - Method in class qupath.lib.plugins.parameters.ParameterList. Add a String parameter, with help text. addTextAppendableFX(TextAppendable) - Static method in class qupath.lib.gui.logging.LogManager. Register a TextAppendable that will be accept logging events and be updated on the JavaFX Application thread. addThreshold(double) - Method in class qupath.lib.gui.charts.ChartThresholdPane. Add a threshold value. addThreshold(double, Color) - Method in class qupath.lib.gui.charts.ChartThresholdPane. Add a threshold value with its display color. addThreshold(ObservableNumberValue) - Method in class qupath.lib.gui.charts.ChartThresholdPane. Add a threshold value. addTileListener(TileListener<BufferedImage>) - Method in class qupath.lib.gui.images.stores.DefaultImageRegionStore;  ; addTitleParameter(String) - Method in class qupath.lib.plugins.parameters.ParameterList. Add a title parameter. addTMAGrid(ImageData<?>, String, String, boolean, double) - Static method in class qupath.lib.objects.PathObjectTools. Create a new regular TMAGrid and set it as active on the hierarchy for an image. addUnclassifiedLabel(int) - Method in class qupath.lib.images.servers.LabeledImageServer.Builder. Add a single label for objects that are unclassified, whe",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:30929,update,updated,30929,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability,"flowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size(). Total number of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps t",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:2181,update,update,2181,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,1,['update'],['update']
Deployability,"font. Get the current selected font. static ObjectProperty<QuPathStyleManager.StyleOption>; selectedStyle. Get the current selected style. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; QuPathStyleManager.Fonts. Available font families. static interface ; QuPathStyleManager.StyleOption. Interface defining a style that may be applied to QuPath. Constructor Summary; Constructors. Constructor; Description; QuPathStyleManager();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ObservableList<QuPathStyleManager.Fonts>; availableFontsProperty(). Get a list of available fonts. static ObservableList<QuPathStyleManager.StyleOption>; availableStylesProperty(). Get the current available styles as an observable list. static ObjectProperty<QuPathStyleManager.Fonts>; fontProperty(). Get the current selected font. static boolean; installStyles(Collection<File> list). Handle installing CSS files (which can be used to style QuPath). static boolean; isDefaultStyle(). Check if the default JavaFX style is used. static void; refresh(). Refresh the current style. static ObjectProperty<QuPathStyleManager.StyleOption>; selectedStyleProperty(). Get the current selected style. static void; updateAvailableStyles(). Request that the list of available styles is updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. availableStyles; public static ObservableList<QuPathStyleManager.StyleOption> availableStylesProperty; Get the current available styles as an observable list.; The list is unmodifiable, since any changes should be made via adding/removing files in UserDirectoryManager.getCssStylesPath(). See Also:. availableStylesProperty(). selectedStyle; public static ObjectProperty<QuPathStyleManager.StyleOption> selectedStyleProperty; Get the current selected style. See Also:. selectedS",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html:1984,install,installing,1984,javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,1,['install'],['installing']
Deployability,"from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1707,update,updated,1707,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,1,['update'],['updated']
Deployability,"g collections String values and associated numeric values, with an associated custom object. Type Parameters:; T - ; Parameters:; name - ; x - x-values; y - y-values; extra - array of values to associate with each data point; should be the same length as x and y; Returns:; this builder. series; public <T> Charts.BarChartBuilder series(String name,; String[] x,; double[] y,; List<T> extra); Create a bar chart using collections of String values and associated numeric values, with an associated custom object. Type Parameters:; T - ; Parameters:; name - ; x - x-values; y - y-values; extra - list of values to associate with each data point; should be the same length as x and y; Returns:; this builder. series; public Charts.BarChartBuilder series(String name,; Collection<XYChart.Data<String,Number>> data); Create a bar chart from existing data plots. Parameters:; name - ; data - the data points to plot; Returns:; this builder. updateChart; protected void updateChart(BarChart<String,Number> chart); Method that applies properties of this builder to the chart.; Each subclass should call the method in the parent class to ensure its properties ; have been applied. Parameters:; chart - . classifications; public Charts.BarChartBuilder classifications(Collection<? extends PathObject> pathObjects); Plot two measurements against one another for the specified objects. Parameters:; pathObjects - the objects to plot; Returns:; this builder. createNewChart; protected BarChart<String,Number> createNewChart(Axis<String> xAxis,; Axis<Number> yAxis). getThis; protected Charts.BarChartBuilder getThis(). yAxisMin; public Charts.BarChartBuilder yAxisMin(double lowerBound); Set the lower bound for the y-axis. Parameters:; lowerBound - ; Returns:; this builder. yAxisMax; public Charts.BarChartBuilder yAxisMax(double upperBound); Set the upper bound for the y-axis. Parameters:; upperBound - ; Returns:; this builder. yAxisRange; public Charts.BarChartBuilder yAxisRange(double lowerBound,; double u",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/Charts.BarChartBuilder.html:7611,update,updateChart,7611,javadoc/docs/qupath/lib/gui/charts/Charts.BarChartBuilder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/Charts.BarChartBuilder.html,2,['update'],['updateChart']
Deployability,"g pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static method in class qupath.lib.analysis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriResource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource. Update the specified URIs. updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.DnnObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVDnn;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVModelObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.opencv.ops.ImageOp. Default implementation makes no changes; classes should override this ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1067595,update,updateTranslation,1067595,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateTranslation']
Deployability,"g to the action. createCheckMenuItem; public static MenuItem createCheckMenuItem(org.controlsfx.control.action.Action action); Create a menu item from an action that makes use of a selected property.; This stores a reference to the action as a property of the menu item. Parameters:; action - the action from which to construct the menu item; Returns:; a new MenuItem configured according to the action. createCheckBox; public static CheckBox createCheckBox(org.controlsfx.control.action.Action action); Create a checkbox from an action.; This stores a reference to the action as a property of the checkbox. Parameters:; action - the action from which to construct the checkbox; Returns:; a new CheckBox configured according to the action. createToggleButtonWithGraphicOnly; public static ToggleButton createToggleButtonWithGraphicOnly(org.controlsfx.control.action.Action action); Create a toggle button from an action, showing only the graphic and not any text.; This stores a reference to the action as a property of the toggle button. Parameters:; action - ; Returns:. createToggleButton; public static ToggleButton createToggleButton(org.controlsfx.control.action.Action action); Create a toggle button from an action, showing both the text and graphic if available.; This stores a reference to the action as a property of the toggle button. Parameters:; action - ; Returns:. createButton; public static Button createButton(org.controlsfx.control.action.Action action); Create a button from an action, showing both the text and graphic if available.; This stores a reference to the action as a property of the button. Parameters:; action - the action from which to construct the button; Returns:; a new Button configured according to the action. createButtonWithGraphicOnly; public static Button createButtonWithGraphicOnly(org.controlsfx.control.action.Action action); Create a button from an action, showing only the graphic and not any text.; This stores a reference to the action as a propert",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html:12094,toggle,toggle,12094,javadoc/docs/qupath/lib/gui/actions/ActionTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html,1,['toggle'],['toggle']
Deployability,"gExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageData<BufferedImage>>) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath that takes the current ImageData as input. installInfoMessage(Action, ObjectExpression<InfoMessage>) - Static method in class qupath.lib.gui.actions.ActionTools. Install an optional info message to the action. installRangePrompt(Slider) - Static method in class qupath.lib.gui.tools.GuiTools. Install a mouse click listener to prompt the user to input min/max values for a slider. installStyles(Collection<File>) - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Handle installing CSS files (which can be used to style QuPath). installTool(PathTool, KeyCodeCombination) - Method in class qupath.lib.gui.ToolManager. Install a new tool for interacting with viewers. INT16 - Enum constant in enum class qupath.lib.images.servers.PixelType. 16-bit signed integer. INT32 - Enum constant in enum class qupath.lib.images.servers.PixelType. 32-bit signed integer. INT8 - Enum constant in enum class qupath.lib.images.servers.PixelType. 8-bit signed integer. INTENSITY_FEATURES - Variable in class qupath.lib.gui.actions.menus.AnalyzeMenuActions.Actions;  ; IntensityFeaturesPlugin - Class in qupath.lib.algorithms. Plugin for calculating intensity-based features, including Haralick textures, within or around detections or tiles. IntensityFeaturesPlugin() - Constructor for class qupath.lib.algorithms.IntensityFeaturesPlugin;  ; InteractiveObjectImporter - Class in qupath.lib.gui.commands. Static methods to import object(s) from different sources. INTERLEAVED - Enum constant in enum class qupath.lib.images.writers.ome.OMEPyramidWriter.ChannelExportType. Channels",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:609362,install,installTool,609362,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installTool']
Deployability,"ge as an ImageJ ImagePlus. static PathImage<ImagePlus>; extractROIWithOverlay(ImageServer<BufferedImage> server,; PathObject pathObject,; PathObjectHierarchy hierarchy,; RegionRequest request,; boolean setROI,; OverlayOptions options). Extract an image region as an ImagePlus, optionally setting ImageJ Rois corresponding to QuPath objects. String; getDescription(). A short description of the extension for displaying in the main GUI. static Image; getImageJIcon(int width,; int height). Try to read the ImageJ icon from its jar. static ImageJ; getImageJInstance(). Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). static String; getImageJPath(). Get the path for a local ImageJ installation, if set. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. static StringProperty; imageJPathProperty(). Property representing the path to a local ImageJ installation, or null if no path has been set. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. static void; setImageJPath(String path). Set the path for a local ImageJ installation, if required. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Property Details. imageJPath; public static StringProperty imageJPathProperty; Property representing the path to a local ImageJ installation, or null if no path has been set. See Also:. getImageJPath(); setImageJPath(String); imageJPathProperty(). Constructor Details. IJExtension; public IJExtension(). Method Details. setImageJPath; public static void setImageJPath(String path); Set the path for a local ImageJ installation, if required. This can be used to help load external ImageJ plugins. Parameters:; path - . getImageJPath; p",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:2908,install,installation,2908,javadoc/docs/qupath/imagej/gui/IJExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html,1,['install'],['installation']
Deployability,"ge qupath.opencv.dnn. package qupath.opencv.dnn. QuPath classes to use OpenCV's DNN module. Related Packages. Package; Description; qupath.opencv. Detection plugins using OpenCV. qupath.opencv.features. Classes for feature calculation using OpenCV. qupath.opencv.io. Support for serializing and deserializing OpenCV objects. qupath.opencv.ml. QuPath classes to apply machine learning to pixels and objects using OpenCV. qupath.opencv.ops. Image operations, implemented with OpenCV. qupath.opencv.tools. Additional processing methods for use with OpenCV Mats. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDnnModel<T>. Wrapper for a deep learning model in a pipeline using OpenCV. BlobFunction<T>. Convert OpenCV Mats into blobs (tensors) for use with a deep learning framework. DnnModel. General interface for implementing a deep learning model in a pipeline using OpenCV. DnnModelBuilder. Builder to create a DnnModel from DnnModelParams. DnnModelParams. Parameters to build a DnnModel. DnnModelParams.Builder. Builder for DnnModelParams. DnnModels. Helper class for building new DnnModels. DnnObjectClassifier. Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN. DnnShape. Helper class to represent input and output shapes associated with PredictionFunction. DnnTools. Tools for working with OpenCV's DNN module. DnnTools.DNNLayer. Helper class to summarize a DNN layer. OpenCVDnn. Wrapper for an OpenCV Net, including essential metadata about how it should be used. OpenCVDnn.Builder. Helper class to build an OpenCVDnn. OpenCVDnn.ModelType. Enum representing different classes of Model supported by OpenCV. OpenCVDnnModelBuilder. A DnnModelBuilder implementation that uses OpenCV's DNN module ; to build a Net. OpenCVModelObjectClassifier. Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN. PredictionFunction<T>. Prediction function, typically used with a deep learning framework. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/package-summary.html:1491,patch,patch-based,1491,javadoc/docs/qupath/opencv/dnn/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/package-summary.html,2,['patch'],['patch-based']
Deployability,"ge>> imageDataProperty). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew);  ; BooleanProperty; disableUpdatesProperty(). Property that may be used to prevent updates on every hierarchy or selection change event. Pane; getPane(). Get the pane for display. void; hierarchyChanged(PathObjectHierarchyEvent event). Notify listeners of a change in the hierarchy or its objects. void; selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected). Fired when the selected objects have changed. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. disableUpdates; public BooleanProperty disableUpdatesProperty; Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the list being updated even when ; it is not visible to the user. See Also:. disableUpdatesProperty(). Constructor Details. AnnotationPane; public AnnotationPane(QuPathGUI qupath); Constructor. Parameters:; qupath - current QuPath instance. AnnotationPane; public AnnotationPane(QuPathGUI qupath,; ObservableValue<ImageData<BufferedImage>> imageDataProperty); Constructor. Parameters:; qupath - current QuPath instance.; imageDataProperty - the current ImageData. Method Details. disableUpdatesProperty; public BooleanProperty disableUpdatesProperty(); Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the list being updated even when ; it is not visible to the user. Returns:. getPane; public Pane getPane(); Get the pane for display. Returns:. selectedPathObjectChange",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html:2242,update,updates,2242,javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html,1,['update'],['updates']
Deployability,"ge>> imageDataProperty). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew);  ; BooleanProperty; disableUpdatesProperty(). Property that may be used to prevent updates on every hierarchy or selection change event. Pane; getPane(). Get the pane for display. void; hierarchyChanged(PathObjectHierarchyEvent event). Notify listeners of a change in the hierarchy or its objects. void; selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected). Fired when the selected objects have changed. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. disableUpdates; public BooleanProperty disableUpdatesProperty; Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the table being updated even when ; it is not visible to the user. See Also:. disableUpdatesProperty(). Constructor Details. PathObjectHierarchyView; public PathObjectHierarchyView(QuPathGUI qupath); Constructor. Parameters:; qupath - the current QuPath instance. PathObjectHierarchyView; public PathObjectHierarchyView(QuPathGUI qupath,; ObservableValue<ImageData<BufferedImage>> imageDataProperty); Constructor. Parameters:; qupath - the current QuPath instance; imageDataProperty - the ImageData to display. Method Details. getPane; public Pane getPane(); Get the pane for display. Returns:. disableUpdatesProperty; public BooleanProperty disableUpdatesProperty(); Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the table being updated even when ; it is not visible",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html:2265,update,updates,2265,javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/PathObjectHierarchyView.html,1,['update'],['updates']
Deployability,"ger; getUndoRedoManager(). Get the UndoRedoManager, which can be useful if needing to clear it in cases where available memory is low. static Version; getVersion(). Get the current QuPath version. QuPathViewer; getViewer(). Get the currently active viewer. ViewerActions; getViewerActions(). Get the associations associated with QuPath image viewers. ViewerManager; getViewerManager(). Get the viewer manager, which gives access to all the viewers available within this QuPath instance. ReadOnlyObjectProperty<ImageData<BufferedImage>>; imageDataProperty(). Read-only property containing the image open within the currently-active viewer. void; installActions(Collection<? extends org.controlsfx.control.action.Action> actions). Install the specified actions. MenuItem; installCommand(String menuPath,; Runnable runnable). Install a new command in QuPath. MenuItem; installGroovyCommand(String menuPath,; File file). Install a Groovy script as a new command in QuPath. MenuItem; installGroovyCommand(String menuPath,; String script). Install a Groovy script as a new command in QuPath. MenuItem; installImageDataCommand(String menuPath,; Consumer<ImageData<BufferedImage>> command). Install a new command in QuPath that takes the current ImageData as input. boolean; isReadOnly(). Query whether QuPath is in 'read-only' mode. boolean; isStandalone(). Query whether this is a standalone QuPathGUI instance, as flagged during startup. static void; launchInstanceFromSwing(). Static method to launch QuPath from within a Swing/AWT application. Object; lookupAccelerator(String combo). Get the action or menu item associated with an accelerator. Object; lookupAccelerator(KeyCombination combo). Get the action or menu item associated with an key combination. org.controlsfx.control.action.Action; lookupActionByText(String text). Search for an action based upon its text (name) property. MenuItem; lookupMenuItem(String menuPath). Search for a menu item based upon its path. boolean; openImage(QuPathViewe",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:6678,install,installGroovyCommand,6678,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['install'],['installGroovyCommand']
Deployability,"ges.ImageData;  ; workflowUpdated(Workflow) - Method in interface qupath.lib.plugins.workflow.WorkflowListener. Called whenever a Workflow has been updated in some way, such as a new step added. wrap(URI...) - Static method in class qupath.lib.io.UriUpdater. Wrap one or more URIs in a UriResource so they can be updated together. wrap(Collection<? extends PathObject>) - Static method in class qupath.lib.io.FeatureCollection. Wrap a collection of PathObjects as a FeatureCollection, ignoring nested (child) objects. wrap(Collection<? extends PathObject>, boolean) - Static method in class qupath.lib.io.FeatureCollection. Wrap a collection of PathObjects as a FeatureCollection. wrap(Collection<URI>) - Static method in class qupath.lib.io.UriUpdater. Wrap one or more URIs in a UriResource so they can be updated together. wrapInPointerScope(Processor<S, T, U>) - Static method in class qupath.lib.experimental.pixels.OpenCVProcessor. Wrap a processor in a second processor that uses a PointerScope to ensure that pointers are released; (except for any output). WrappedBufferedImageServer - Class in qupath.lib.images.servers. Implementation of an ImageServer that simply wraps an existing BufferedImage. WrappedBufferedImageServer(String, BufferedImage) - Constructor for class qupath.lib.images.servers.WrappedBufferedImageServer. Create an ImageServer<BufferedImage> using an image that has been provided directly. WrappedBufferedImageServer(String, BufferedImage, List<ImageChannel>) - Constructor for class qupath.lib.images.servers.WrappedBufferedImageServer. Create an ImageServer<BufferedImage> using an image that has been provided directly. wrapStatModel(StatModel) - Static method in class qupath.opencv.ml.OpenCVClassifiers. Create an OpenCVClassifiers.OpenCVStatModel by wrapping an existing StatModel. wrapTextProperty() - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; wrapTextProperty() - Method in interface qupath.lib.gui.scripting.ScriptEditorControl. Re",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1110337,release,released,1110337,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['release'],['released']
Deployability,"getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of t",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:7829,update,updatePlane,7829,javadoc/docs/qupath/lib/roi/LineROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html,2,['update'],['updatePlane']
Deployability,"getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:2302,install,installExtension,2302,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,1,['install'],['installExtension']
Deployability,"getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObjects); Get the objects overlapping or close to a specified region.; Note that this performs a quick check; the results typically should be filtered if a more strict test for overlapping is applied. Parameters:; cls - class of object to return (subclasses are included); region - requested region overlapping the objects ROI; pathObjects - optionally collection to which objects will be added; Returns:; collection containing identified objects (same as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region); Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:19642,update,update,19642,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,1,['update'],['update']
Deployability,"getPlane(). v0.4.0 use ImageRegion.getImagePlane() instead (changed for better consistency with other classes). qupath.lib.roi.AreaROI.duplicate(). qupath.lib.roi.EllipseROI.duplicate(). qupath.lib.roi.interfaces.ROI.duplicate(). qupath.lib.roi.LineROI.duplicate(). qupath.lib.roi.PointsROI.duplicate(). qupath.lib.roi.PolygonROI.duplicate(). qupath.lib.roi.PolylineROI.duplicate(). qupath.lib.roi.RectangleROI.duplicate(). qupath.lib.scripting.QP.buildServer(String, Class<T>, String...). In the usual case where BufferedImage is the class, use QP.buildServer(String, String...) instead ; because it handles default args. qupath.lib.scripting.QP.createSelectAllObject(boolean). v0.4.0 use QP.createFullImageAnnotation(boolean) instead. qupath.lib.scripting.QP.createSelectAllObject(boolean, int, int). v0.4.0 use QP.createFullImageAnnotation(boolean, int, int) instead. qupath.lib.scripting.QP.detectionCentroidDistances(). retained only for compatibility of v0.2.0 milestone releases; use instead #detectionCentroidDistances(boolean). qupath.lib.scripting.QP.detectionToAnnotationDistances(). retained only for compatibility of v0.2.0 milestone releases; use instead #detectionToAnnotationDistances(boolean). qupath.lib.scripting.QP.getColorRGB(int...). Use instead QP.makeRGB(int, int, int) or QP.makeARGB(int, int, int, int). qupath.lib.scripting.QP.loadImageData(String, boolean). qupath.lib.scripting.QP.selectObjectsByMeasurement(ImageData<?>, String). qupath.opencv.dnn.DnnTools.registerDnnModel(Class<T>, String). since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. qupath.opencv.features.DelaunayTriangulation.getConnectedNodes(Collection<PathObject>, Collection<double[]>). qupath.opencv.ml.pixel.PixelClassificationMeasurementManager.getMeasurementValue(PathObject, String, boolean). use PixelClassificationMeasurementManager.getMeasurementValue(PathObject, String) or PixelClassificationMeasurementManager.getCachedMeasurementValue(PathObject, String) instead. qupath.ope",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/deprecated-list.html:12930,release,releases,12930,javadoc/docs/deprecated-list.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/deprecated-list.html,1,['release'],['releases']
Deployability,"gins.workflow. Basic interface for a loggable workflow step. workflowUpdated(Workflow) - Method in class qupath.lib.gui.panes.WorkflowCommandLogView;  ; workflowUpdated(Workflow) - Method in class qupath.lib.images.ImageData;  ; workflowUpdated(Workflow) - Method in interface qupath.lib.plugins.workflow.WorkflowListener. Called whenever a Workflow has been updated in some way, such as a new step added. wrap(URI...) - Static method in class qupath.lib.io.UriUpdater. Wrap one or more URIs in a UriResource so they can be updated together. wrap(Collection<? extends PathObject>) - Static method in class qupath.lib.io.FeatureCollection. Wrap a collection of PathObjects as a FeatureCollection, ignoring nested (child) objects. wrap(Collection<? extends PathObject>, boolean) - Static method in class qupath.lib.io.FeatureCollection. Wrap a collection of PathObjects as a FeatureCollection. wrap(Collection<URI>) - Static method in class qupath.lib.io.UriUpdater. Wrap one or more URIs in a UriResource so they can be updated together. wrapInPointerScope(Processor<S, T, U>) - Static method in class qupath.lib.experimental.pixels.OpenCVProcessor. Wrap a processor in a second processor that uses a PointerScope to ensure that pointers are released; (except for any output). WrappedBufferedImageServer - Class in qupath.lib.images.servers. Implementation of an ImageServer that simply wraps an existing BufferedImage. WrappedBufferedImageServer(String, BufferedImage) - Constructor for class qupath.lib.images.servers.WrappedBufferedImageServer. Create an ImageServer<BufferedImage> using an image that has been provided directly. WrappedBufferedImageServer(String, BufferedImage, List<ImageChannel>) - Constructor for class qupath.lib.images.servers.WrappedBufferedImageServer. Create an ImageServer<BufferedImage> using an image that has been provided directly. wrapStatModel(StatModel) - Static method in class qupath.opencv.ml.OpenCVClassifiers. Create an OpenCVClassifiers.OpenCVStatModel by wr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1110115,update,updated,1110115,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability,"h.lib.gui.scripting.TextAreaControl;  ; requestFollowCaret() - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; requestFollowCaret() - Method in interface qupath.lib.gui.scripting.ScriptEditorControl. Request that the X and Y scrolls are adjusted to ensure the caret is visible. requestFullUpdateCheck() - Method in class qupath.lib.gui.QuPathGUI. Request a manual update check in a background thread. requestHierarchyUpdate() - Method in class qupath.lib.plugins.AbstractPlugin. Optionally request a hierarchy update after the tasks have run. requestImageTile(ImageServer<BufferedImage>, RegionRequest, Map<RegionRequest, BufferedImage>, boolean) - Method in class qupath.lib.gui.images.stores.DefaultImageRegionStore. Request an image tile. requestLazyInitialize() - Method in class qupath.opencv.dnn.DnnModelParams. Request that any model is loaded lazily on demand. requestNewHandle(double, double) - Method in class qupath.lib.roi.RoiEditor. Request an updated ROI with a new handle inserted - useful e.g. requestParallelization() - Method in class qupath.lib.images.servers.bioformats.BioFormatsServerOptions. Returns true if multiple readers may be created for different threads, to enable parallel image reading. requestParentClipping(MouseEvent) - Method in class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler. Query whether parent clipping should be applied. requestParentClipping(MouseEvent) - Method in class qupath.lib.gui.viewer.tools.handlers.MoveToolEventHandler. Query whether parent clipping should be applied. requestParentClipping(MouseEvent) - Method in class qupath.process.gui.WandToolEventHandler. Query whether parent clipping should be applied. requestPixelSnapping() - Method in class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler. Returns true if the tool requests that pixel coordinates be snapped to integer values. requestPixelSnapping() - Method in class qupath.lib.gui.viewer.tools.handlers.MoveToolEventHandler. Retur",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:858150,update,updated,858150,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability,"h.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1065629,update,updateProgress,1065629,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateProgress']
Deployability,"h; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise. segment; public static Mat segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation model; server - the image; request - the region; Returns:; a Mat containing the segmentation results; Throws:; IOException - if the input image could not be read. segment; public static Mat segment(SegmentationModel model,; Mat input,; Mat output); Apply a segmentation model to an image region. Parameters:; model - the segmentation model; input - the input image; output - the output image; Returns:; a Mat containing the segmentation results (the same as output, if provided). detect; public static List<PathObject> det",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:12074,patch,patch,12074,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"hObject - the template object; roiNew - the new ROI; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. createLike; public static PathObject createLike(PathObject pathObject,; ROI roiNew,; ROI roiNucleus); Create a new object with the same type and classification as the input object, but a new ROI and ID.; This version of the method supports cell objects with a nucleus ROI.; ; Note that TMA core objects are not supported. Parameters:; pathObject - the template object; roiNew - the new ROI; roiNucleus - nucleus ROI; only relevant if the template object is a cell; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. lockObjects; public static void lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'locked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:51169,update,update,51169,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,2,['update'],['update']
Deployability,"hOverlay(ImageServer<BufferedImage> server,; PathObject pathObject,; PathObjectHierarchy hierarchy,; RegionRequest request,; boolean setROI,; OverlayOptions options). Extract an image region as an ImagePlus, optionally setting ImageJ Rois corresponding to QuPath objects. String; getDescription(). A short description of the extension for displaying in the main GUI. static Image; getImageJIcon(int width,; int height). Try to read the ImageJ icon from its jar. static ImageJ; getImageJInstance(). Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). static String; getImageJPath(). Get the path for a local ImageJ installation, if set. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. static StringProperty; imageJPathProperty(). Property representing the path to a local ImageJ installation, or null if no path has been set. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. static void; setImageJPath(String path). Set the path for a local ImageJ installation, if required. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Property Details. imageJPath; public static StringProperty imageJPathProperty; Property representing the path to a local ImageJ installation, or null if no path has been set. See Also:. getImageJPath(); setImageJPath(String); imageJPathProperty(). Constructor Details. IJExtension; public IJExtension(). Method Details. setImageJPath; public static void setImageJPath(String path); Set the path for a local ImageJ installation, if required. This can be used to help load external ImageJ plugins. Parameters:; path - . getImageJPath; public static String getImageJPath(); Get the path for a local ImageJ ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:2961,install,installExtension,2961,javadoc/docs/qupath/imagej/gui/IJExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html,1,['install'],['installExtension']
Deployability,"hangedEvent(Object, PathObject) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. fireHierarchyUpdate() - Static method in class qupath.lib.scripting.QP. Trigger an update for the current hierarchy. fireHierarchyUpdate(PathObjectHierarchy) - Static method in class qupath.lib.scripting.QP. Trigger an update for the specified hierarchy. fireImageDataChanged(ImageData<BufferedImage>, ImageData<BufferedImage>) - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; fireObjectClassificationsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object classifications have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating objects have changed. fireObjectsChangedEvent(Object, Collection<? extends PathObject>, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating objects have changed, and may still be changing. fireVisibleRegionChangedEvent(Shape) - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; fireWorkflowUpdatedEvent() - Method in class qupath.lib.plugins.workflow.Workflow;  ; fitCorePolygonToGrid(Polygon, double, int, int) - Static method in class qupath.imagej.detect.dearray.TMADearrayer. Given a polygon representing",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:309733,update,update,309733,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"he image as input to the model. Returns:. getPatchWidth; public int getPatchWidth(); Get the width of a patch, in pixels. Returns:. getPatchHeight; public int getPatchHeight(); Get the height of a patch, in pixels. Returns:. getHalo; public Padding getHalo(); Get the 'halo' around the output.; This can be used to determine appropriate padding to ; avoid tile boundary artifacts. ; Can be null or empty. Returns:. getInputResolution; public PixelCalibration getInputResolution(); Get the requested input resolution for the image. Returns:. getOutputChannelType; public ImageServerMetadata.ChannelType getOutputChannelType(); Get the requested output channel type. Returns:. getOutputClasses; public Map<Integer,PathClass> getOutputClasses(); Get the classifications for the output.; Keys to the map are generally channel numbers of the output ; (zero-based), or could be labels in a single-channel labeled image. Returns:. getPreprocessing; public List<ImageOp> getPreprocessing(); Get any preprocessing steps that should be applied. Returns:. getPredictionOp; public ImageOp getPredictionOp(); Get the image op used for prediction only.; This is applied after any preprocessing steps, but before ; any postprocessing steps. Returns:. getPostprocessing; public List<ImageOp> getPostprocessing(); Get any postprocessing steps that should be applied after prediction. Returns:. buildPixelClassifier; public static PixelClassifier buildPixelClassifier(PatchClassifierParams params); Build a pixel classifier using these parameters. Parameters:; params - ; Returns:. builder; public static PatchClassifierParams.Builder builder(); Create a builder to generate new patch classifier params. Returns:. builder; public static PatchClassifierParams.Builder builder(PatchClassifierParams params); Create a builder to generate new patch classifier params, ; initialized with the values from an existing parameter object. Parameters:; params - the existing parameters, used to initialize the builder; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html:4311,patch,patch,4311,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,2,['patch'],['patch']
Deployability,"he list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageData<BufferedImage>>) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath that takes the current ImageData as input. installInfoMessage(Action, ObjectExpression<InfoMessage>) - Static method in class qupath.lib.gui.actions.ActionTools. Install an optional info message to the action. installRangePrompt(Slider) - Static method in class qupath.lib.gui.tools.GuiTools. Install a mouse click listener to prompt the user to input min/max values for a slider. installStyles(Collection<File>) - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Handle installing CSS files (which can be used to style QuPath). installTool(PathTool, KeyCodeCombination) - Method in class qupath",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:608410,install,installGroovyCommand,608410,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installGroovyCommand']
Deployability,"he mode used to determine RGB colors for each channel; Returns:; an RGB image determined by transforming the input image using the specified channels. getTransformedValueAsString; public String getTransformedValueAsString(BufferedImage img,; int x,; int y); Get a string representation of a transformed pixel value, using the currently-selected channels. Parameters:; img - image providing the value; x - x-coordinate of the pixel; y - y-coordinate of the pixels; Returns:; a String representation of the pixel's transformed value. autoSetDisplayRange; public void autoSetDisplayRange(ChannelDisplayInfo info); Automatically set the display range for a channel, using the default saturation defined in PathPrefs.autoBrightnessContrastSaturationPercentProperty(). Parameters:; info - channel to update. autoSetDisplayRange; public void autoSetDisplayRange(ChannelDisplayInfo info,; double saturation); Automatically set the display range for a channel. Parameters:; info - channel to update; saturation - proportion of pixels that may be saturated, i.e. have the max/min display values (between 0.0 and 1.0). getHistogram; public Histogram getHistogram(ChannelDisplayInfo info); Returns a histogram for a ChannelInfo, or none if no histogram is available (e.g. the channel is RGB). Parameters:; info - ; Returns:. toJSON; public String toJSON(boolean prettyPrint); Create a JSON representation of the main components of the current display. Parameters:; prettyPrint - ; Returns:. isCompatible; public boolean isCompatible(ImageDisplay display); Check if an image display is 'compatible' with this one.; Compatible means that they have the same number of channels, and the same channel names.; This may be used p. Parameters:; display - ; Returns:. updateFromDisplay; public boolean updateFromDisplay(ImageDisplay display); Update the current display based upon a different display.; This only makes changes if isCompatible(ImageDisplay) returns true.; ; This method exists to make it easier to sync dis",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/ImageDisplay.html:14767,update,update,14767,javadoc/docs/qupath/lib/display/ImageDisplay.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/ImageDisplay.html,1,['update'],['update']
Deployability,"he path is the same as a currently-open server, do nothing. Parameters:; viewer - the viewer into which the image should be opened; pathNew - ; prompt - if true, give the user the opportunity to cancel opening if a whole slide server is already set; includeURLs - if true, any prompt should support URL input and not only a file chooser; Returns:; true if the server was set for this GUI, false otherwise; Throws:; IOException. installGroovyCommand; public MenuItem installGroovyCommand(String menuPath,; File file); Install a Groovy script as a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; file - the Groovy script to run; note that this will be reloaded each time it is required; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, String). installGroovyCommand; public MenuItem installGroovyCommand(String menuPath,; String script); Install a Groovy script as a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; script - the Groovy script to run; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, File). installImageDataCommand; public MenuItem installImageDataCommand(String menuPath,; Consumer<ImageData<BufferedImage>> command); Install a new command in QuPath that takes the current ImageData as input.; The command will only be enabled when an image is available. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to t",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:21188,install,installGroovyCommand,21188,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['install'],['installGroovyCommand']
Deployability,"he specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected boolean; tryToClassify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVModelObjectClassifier; public OpenCVModelObjectClassifier(PathObjectFilter filter,; OpenCVDnn model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageDat",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html:2509,update,updateUris,2509,javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html,1,['update'],['updateUris']
Deployability,"height of an ImageServer, for the default plane (first z-slice, time point). boolean; equals(Object obj);  ; double; getDownsample(). Get the requested downsample factor, defining the resolution at which pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest cre",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:3803,update,updated,3803,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,1,['update'],['updated']
Deployability,"hod Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ObservableMap<Class<? extends QuPathExtension>,QuPathExtension>; getFailedExtensions();  ; ObservableMap<Class<? extends QuPathExtension>,QuPathExtension>; getLoadedExtensions();  ; void; promptToCopyFilesToExtensionsDirectory(Collection<File> files). Copy a collection of files to QuPath's extensions directory, notifying the user about; what is done and prompting to create a user directory if needed. void; refreshExtensions(boolean showNotification). Check the extensions directory, loading any new extensions found there. ReadOnlyBooleanProperty; refreshingExtensions(). Property indicating whether extensions are in the process of being refreshed. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getLoadedExtensions; public ObservableMap<Class<? extends QuPathExtension>,QuPathExtension> getLoadedExtensions(). Returns:; a collection of extensions that are currently loaded. getFailedExtensions; public ObservableMap<Class<? extends QuPathExtension>,QuPathExtension> getFailedExtensions(). Returns:; a collection of extensions that could not be loaded. refreshingExtensions; public ReadOnlyBooleanProperty refreshingExtensions(); Property indicating whether extensions are in the process of being refreshed. refreshExtensions; public void refreshExtensions(boolean showNotification); Check the extensions directory, loading any new extensions found there. Parameters:; showNotification - if true, display a notification if a new extension has been loaded. promptToCopyFilesToExtensionsDirectory; public void promptToCopyFilesToExtensionsDirectory(Collection<File> files); Copy a collection of files to QuPath's extensions directory, notifying the user about; what is done and prompting to create a user directory if needed. Parameters:; files - a collection of jar files for installation. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ExtensionManager.html:2558,install,installation,2558,javadoc/docs/qupath/lib/gui/ExtensionManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ExtensionManager.html,1,['install'],['installation']
Deployability,"hod in class qupath.lib.images.ImageData. Remove a property change listener. removeRow(QuPathViewer) - Method in class qupath.lib.gui.viewer.ViewerManager. Try to remove the row containing the specified viewer, notifying the user if this isn't possible. removeSmallAreas(ByteProcessor, double, boolean) - Static method in class qupath.imagej.processing.RoiLabeling. Remove objects having small areas, defined in terms of pixels. removeSmallPieces(ROI, double, double) - Static method in class qupath.lib.roi.RoiTools. Remove small fragments and fill small holes of an area ROI. removeStep(int) - Method in class qupath.lib.plugins.workflow.Workflow. Remove a single step, identified by its list index. removeStep(WorkflowStep) - Method in class qupath.lib.plugins.workflow.Workflow. Remove a single step, firing an update event if the step was successfully removed. removeSteps(Collection<WorkflowStep>) - Method in class qupath.lib.plugins.workflow.Workflow. Remove a collection of steps, firing an update event if the workflow was changed. removeTextAppendableFX(TextAppendable) - Static method in class qupath.lib.gui.logging.LogManager. Deregister a TextAppendable so that it will no longer be informed of logging events. removeTileListener(TileListener<BufferedImage>) - Method in class qupath.lib.gui.images.stores.DefaultImageRegionStore;  ; removeViewerListener(QuPathViewerListener) - Method in class qupath.lib.gui.viewer.QuPathViewer. Remove a viewer listener. removeWorkflowListener(WorkflowListener) - Method in class qupath.lib.plugins.workflow.Workflow. Remove a listener for changes to the workflow. RenderedImageServer - Class in qupath.lib.gui.images.servers. An ImageServer that can display a rendered image, with optional overlays. RenderedImageServer.Builder - Class in qupath.lib.gui.images.servers. Builder to create an ImageServer to display rendered images, with optional overlay layers. renderer(ImageRenderer) - Method in class qupath.lib.gui.images.servers.RenderedImageSe",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:852071,update,update,852071,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"hod in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static method in class qupath.lib.analysis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1065990,update,updated,1065990,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability,"hods of use for scripting, ; along with some extra methods that require access of GUI features. QPEx() - Constructor for class qupath.lib.gui.scripting.QPEx;  ; quickShowImage(String, Roi, ImageProcessor...) - Static method in class qupath.imagej.tools.IJTools. Show an ImageProcessor (or array of similar ImageProcessors as a stack). quickShowImage(String, ImageProcessor...) - Static method in class qupath.imagej.tools.IJTools. Show an ImageProcessor (or array of similar ImageProcessors as a stack). QUIT - Variable in class qupath.lib.gui.actions.menus.FileMenuActions.Actions;  ; qupath - package qupath. Package containing the main QuPath launcher. QuPath - Class in qupath. Main QuPath launcher. QuPath() - Constructor for class qupath.QuPath;  ; QUPATH_AND_EXTENSIONS - Enum constant in enum class qupath.lib.gui.prefs.PathPrefs.AutoUpdateType. Check for QuPath and extensions on GitHub. QUPATH_ONLY - Enum constant in enum class qupath.lib.gui.prefs.PathPrefs.AutoUpdateType. Check for QuPath updates only. QuPath_Send_Overlay_to_QuPath - Class in qupathj. ImageJ plugin for sending back all the ROIs on an ImageJ overlay to QuPath. QuPath_Send_Overlay_to_QuPath() - Constructor for class qupathj.QuPath_Send_Overlay_to_QuPath;  ; QuPath_Send_ROI_to_QuPath - Class in qupathj. ImageJ plugin for sending back the active ROI from ImageJ to QuPath. QuPath_Send_ROI_to_QuPath() - Constructor for class qupathj.QuPath_Send_ROI_to_QuPath;  ; QUPATH_STARTUP - Variable in class qupath.lib.gui.actions.menus.HelpMenuActions.Actions;  ; qupath.ext.openslide - package qupath.ext.openslide;  ; qupath.imagej.detect.cells - package qupath.imagej.detect.cells. Classes to enable cell detection, implemented with the help of ImageJ as an image processing library. qupath.imagej.detect.dearray - package qupath.imagej.detect.dearray. Classes to help with Tissue Microarray dearraying. qupath.imagej.detect.tissue - package qupath.imagej.detect.tissue. Classes to enable tissue detection by thresholding. q",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:804855,update,updates,804855,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updates']
Deployability,"hreads QuPath should use for multithreaded commands. See Also:. numCommandThreadsProperty(). showImageNameInTitle; public static BooleanProperty showImageNameInTitleProperty; Property specifying if QuPath should show the image title in the main window title.; For privacy reasons it may be desirable to turn this off in some cases. See Also:. showImageNameInTitleProperty(). autoUpdateCheck; public static ObjectProperty<PathPrefs.AutoUpdateType> autoUpdateCheckProperty; Check for updates when launching QuPath, if possible. See Also:. autoUpdateCheckProperty(). maskImageNames; public static BooleanProperty maskImageNamesProperty; Request that image names are hidden within the user interface. See Also:. maskImageNamesProperty(). defaultLocale; public static ObjectProperty<Locale> defaultLocaleProperty; Get a property for setting the default Locale.; Setting this locale impacts both Locale.Category.FORMAT and Locale.Category.DISPLAY, ; and may trigger an update to defaultLocaleDisplayProperty() and defaultLocaleFormatProperty() ; if these have been changed. Since:; v0.4.0; See Also:. defaultLocaleProperty(). defaultLocaleFormat; public static ObjectProperty<Locale> defaultLocaleFormatProperty; Get a property for setting the default Locale for Locale.Category.FORMAT.; Setting this property also results in the Locale being changed to match. See Also:. defaultLocaleFormatProperty(). defaultLocaleDisplay; public static ObjectProperty<Locale> defaultLocaleDisplayProperty; Get a property for setting the default Locale for Locale.Category.DISPLAY.; Setting this property also results in the Locale being changed to match. See Also:. defaultLocaleDisplayProperty(). showStartupMessage; public static BooleanProperty showStartupMessageProperty; Show a startup message when QuPath is launched. See Also:. showStartupMessageProperty(). startupScript; public static StringProperty startupScriptProperty; Path to a startup script that should be run immediately after QuPath's launch. See Also:",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html:25231,update,update,25231,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,1,['update'],['update']
Deployability,"ht); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; x - ; y - ; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in inte",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolylineROI.html:8620,update,updatePlane,8620,javadoc/docs/qupath/lib/roi/PolylineROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolylineROI.html,1,['update'],['updatePlane']
Deployability,"i.viewer.tools.PathTool. Property giving the icon that should be used for the tool. identity() - Static method in class qupath.lib.awt.common.AffineTransforms. Create an affine transform representing the identity transform. identity() - Static method in class qupath.opencv.ops.ImageOps.Core. Create an op that returns its input unchanged. IGNORE - Enum constant in enum class qupath.lib.objects.classes.PathClassFactory.StandardPathClasses. Deprecated.; Ignore classification, indicating what should not be further measured (e.g. IGNORE - Static variable in class qupath.lib.objects.classes.PathClass.StandardPathClasses. Ignore classification, indicating what should not be further measured (e.g. IJExtension - Class in qupath.imagej.gui. QuPath extension & associated static helper methods used to support integration of ImageJ with QuPath. IJExtension() - Constructor for class qupath.imagej.gui.IJExtension;  ; IJExtension.IJExtensionCommands - Class in qupath.imagej.gui. Commands to install with the ImageJ extension. IJTools - Class in qupath.imagej.tools. Collection of static methods to help with using ImageJ with QuPath. IJTools() - Constructor for class qupath.imagej.tools.IJTools;  ; IMAGE - Enum constant in enum class qupath.lib.gui.viewer.RegionFilter.StandardRegionFilters. Accept all requests for the image where the region is non-empty. IMAGE_ROOT - Enum constant in enum class qupath.lib.objects.classes.PathClassFactory.StandardPathClasses. Deprecated.; Root object classification. IMAGE_ROOT - Static variable in class qupath.lib.objects.classes.PathClass.StandardPathClasses. Root object classification. ImageChannel - Class in qupath.lib.images.servers. The name and display color for a single image channel. imageData - Variable in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; imageData - Variable in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; imageData - Variable in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; imageData(ImageData<?>) -",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:584372,install,install,584372,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['install']
Deployability,"iResource (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.io; Interface UriResource. All Known Subinterfaces:; ImageDataOp, ImageOp, ProjectImageEntry<T>. All Known Implementing Classes:; DnnObjectClassifier, ImageOps.PaddedOp, OpenCVDnn, OpenCVModelObjectClassifier. public interface UriResource; Interface for objects that depend upon URIs.; Examples include images, where the URI refer to the image file or URL, or prediction models. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default Collection<URI>; getUris();  ; Collection<URI>; getURIs(). Get all the URIs required for this resource. default boolean; updateUris(Map<URI,URI> replacements);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Method Details. getUris; default Collection<URI> getUris(); throws IOException. Throws:; IOException. updateUris; default boolean updateUris(Map<URI,URI> replacements); throws IOException. Throws:; IOException. getURIs; Collection<URI> getURIs(); throws IOException; Get all the URIs required for this resource. This is often an empty or singleton list. Returns:; the required URIs; Throws:; IOException; Since:; v0.4.0. updateURIs; boolean updateURIs(Map<URI,URI> replacements); throws IOException; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an Unsupport",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriResource.html:969,update,updateUris,969,javadoc/docs/qupath/lib/io/UriResource.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriResource.html,2,['update'],"['updateURIs', 'updateUris']"
Deployability,"ib.plugins.objects.FillAnnotationHolesPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.FindConvexHullDetectionsPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.RefineAnnotationsPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.ShapeFeaturesPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.SmoothFeaturesPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.SplitAnnotationsPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin;  ; getParentObjects(ImageData<T>) - Method in class qupath.opencv.features.DelaunayClusteringPlugin;  ; getParentOrProxy() - Method in class qupath.lib.experimental.pixels.Parameters. Get the parent, or a proxy parent if one has been specified. getPatch() - Method in class qupath.lib.common.Version. Get the patch version number (0.0.X). getPatchHeight() - Method in class qupath.opencv.ml.PatchClassifierParams. Get the height of a patch, in pixels. getPatchWidth() - Method in class qupath.opencv.ml.PatchClassifierParams. Get the width of a patch, in pixels. getPath() - Method in class qupath.lib.images.servers.AbstractImageServer. Default implementation lazily calls AbstractImageServer.createID() on demand. getPath() - Method in interface qupath.lib.images.servers.ImageServer. Get a String path that can uniquely identify this image. getPath() - Method in class qupath.lib.io.UriUpdater.SingleUriItem. Get the Path corresponding to the URI, or none if the URI does not refer to a file. getPath() - Method in interface qupath.lib.projects.Project. Get a path to this project, or null if this project is not on a local file system. getPath() - Method in class qupath.lib.regions.RegionRequest. Get the requested ImageServer path, used as an identifier. getPathClass() - Method in class qupath.lib.objects.Path",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:477268,patch,patch,477268,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,"ibute of the existing PathClass will not be changed.; Therefore the color only has an effect when a new PathClass is created. Parameters:; baseClass - ; name - ; rgb - ; Returns:. removeMeasurements; public static void removeMeasurements(Class<? extends PathObject> cls,; String... measurementNames); Remove measurements from objects of a specific class for the current image data. Parameters:; cls - ; measurementNames - . removeMeasurements; public static void removeMeasurements(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls,; String... measurementNames); Remove measurements from objects of a specific class for the specified hierarchy. Parameters:; hierarchy - ; cls - ; measurementNames - . clearMeasurements; public static void clearMeasurements(PathObjectHierarchy hierarchy,; PathObject... pathObjects); Clear the measurement lists for specified objects within a hierarchy. Parameters:; hierarchy - used to fire a hierarchy update, if specified (may be null if no update should be fired); pathObjects - collection of objects that should have their measurement lists cleared. clearMeasurements; public static void clearMeasurements(PathObjectHierarchy hierarchy,; Collection<PathObject> pathObjects); Clear the measurement lists for specified objects within a hierarchy. Parameters:; hierarchy - used to fire a hierarchy update, if specified (may be null if no update should be fired); pathObjects - collection of objects that should have their measurement lists cleared. clearAnnotationMeasurements; public static void clearAnnotationMeasurements(PathObjectHierarchy hierarchy); Clear the measurement lists for all annotations in a hierarchy. Parameters:; hierarchy - . clearAnnotationMeasurements; public static void clearAnnotationMeasurements(); Clear the measurement lists for all annotations in the current hierarchy. clearDetectionMeasurements; public static void clearDetectionMeasurements(PathObjectHierarchy hierarchy); Clear the measurement lists for all detection",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:96752,update,update,96752,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,2,['update'],['update']
Deployability,"ic method in class qupath.lib.gui.prefs.PathPrefs. Property specifying if QuPath should show the image title in the main window title. showInfoNotification(String, String) - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Show an info notification. showingProperty() - Method in class qupath.lib.gui.panes.SlideLabelView. Property indicating whether the label is showing on screen or not. showInputDialog(String, String, Double) - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Show an input dialog requesting a numeric value. showInputDialog(String, String, String) - Static method in class qupath.lib.gui.dialogs.Dialogs. Deprecated.; Show an input dialog requesting a String input. showInputDisplayProperty() - Method in class qupath.lib.gui.QuPathGUI. Property to indicate whether the input display is currently showing. showInstalledExtensions(QuPathGUI) - Static method in class qupath.lib.gui.commands.Commands. Show a dialog displaying the extensions installed for a specified QuPath instance. showLegacyOptionsProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Flag to indicate that the legacy options should be shown to the user - normally not desirable. showLocationProperty() - Method in class qupath.lib.gui.viewer.ViewerManager. Show the cursor location. showLocationProperty() - Method in class qupath.lib.gui.viewer.ViewerPlusDisplayOptions. Show the cursor location. showMeasurementTableObjectIDs - Variable in class qupath.lib.gui.panes.PreferencePane.MeasurementPreferences;  ; showMeasurementTableObjectIDsProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Specify whether measurement tables should show object IDs by default or not. showMeasurementTableThumbnails - Variable in class qupath.lib.gui.panes.PreferencePane.MeasurementPreferences;  ; showMeasurementTableThumbnailsProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Specify whether measurement tables should show thumbnail ima",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:966791,install,installed,966791,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installed']
Deployability,"ic org.controlsfx.control.action.Action; createSelectableCommandAction(ObservableBooleanValue value);  ; static <T> org.controlsfx.control.action.Action; createSelectableCommandAction(SelectableItem<T> command);  ; static <T> org.controlsfx.control.action.Action; createSelectableCommandAction(SelectableItem<T> command,; String name). Create an action from a selectable icon. static <T> org.controlsfx.control.action.Action; createSelectableCommandAction(SelectableItem<T> command,; String name,; Node icon,; KeyCombination accelerator);  ; static <T> org.controlsfx.control.action.Action; createSelectableCommandAction(SelectableItem<T> command,; ObservableValue<String> name,; ObservableValue<Node> icon,; KeyCombination accelerator);  ; static org.controlsfx.control.action.Action; createSeparator(). Create an action indicating that a separator should be added (e.g. static ToggleButton; createToggleButton(org.controlsfx.control.action.Action action). Create a toggle button from an action, showing both the text and graphic if available. static ToggleButton; createToggleButtonWithGraphicOnly(org.controlsfx.control.action.Action action). Create a toggle button from an action, showing only the graphic and not any text. static org.controlsfx.control.action.Action; getActionProperty(MenuItem item). Retrieve an Action stored within the properties of a menu item, or null if no action is found. static org.controlsfx.control.action.Action; getActionProperty(Node node). Retrieve an Action stored within the properties of a node, or null if no action is found. static List<org.controlsfx.control.action.Action>; getAnnotatedActions(Object obj). Actions can be parsed from the accessible (usually public) fields of any object, as well as methods annotated with ActionMethod. static void; installInfoMessage(org.controlsfx.control.action.Action action,; ObjectExpression<InfoMessage> message). Install an optional info message to the action. static boolean; isSelectable(org.controlsfx.control.act",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html:4328,toggle,toggle,4328,javadoc/docs/qupath/lib/gui/actions/ActionTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html,1,['toggle'],['toggle']
Deployability,"ict test for overlapping is applied. Parameters:; cls - class of object to return (subclasses are included); region - requested region overlapping the objects ROI; pathObjects - optionally collection to which objects will be added; Returns:; collection containing identified objects (same as the input collection, if provided). hasObjectsForRegion; public boolean hasObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region); Returns true if the hierarchy contains objects overlapping a specific region, optionally filtering to identify only ; objects of a specific class. Parameters:; cls - ; region - ; Returns:. fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating objects have changed, and may still be changing. Parameters:; source - ; pathObjects - ; isChanging - is true, listeners may choose not to respond until an event",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:19918,update,update,19918,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,1,['update'],['update']
Deployability,"ic ObjectProperty<LogManager.LogLevel> rootLogLevelProperty; Property representing the current requested root log level. See Also:. getRootLogLevel(); setRootLogLevel(LogManager.LogLevel); rootLogLevelProperty(). Constructor Details. LogManager; public LogManager(). Method Details. logToFile; public static void logToFile(File file); Request logging to the specified file. Parameters:; file - . setRootLogLevel; public static void setRootLogLevel(LogManager.LogLevel level); Set the root log level. Parameters:; level - . getRootLogLevel; public static LogManager.LogLevel getRootLogLevel(); Set the root log level, as set by this manager.; This is not guaranteed to match the actual root log level, in case it has been set elsewhere. Returns:. rootLogLevelProperty; public static ObjectProperty<LogManager.LogLevel> rootLogLevelProperty(); Property representing the current requested root log level. Returns:; See Also:. getRootLogLevel(); setRootLogLevel(LogManager.LogLevel). setDebug; public static void setDebug(); Set the root log level to DEBUG. setInfo; public static void setInfo(); Set the root log level to DEBUG. setWarn; public static void setWarn(); Set the root log level to LogLevel.WARN. setError; public static void setError(); Set the root log level to LogLevel.ERROR. setTrace; public static void setTrace(); Set the root log level to LogLevel.TRACE. setAll; public static void setAll(); Set the root log level to LogLevel.ALL. setOff; public static void setOff(); Set the root log level to LogLevel.OFF. addTextAppendableFX; public static void addTextAppendableFX(TextAppendable component); Register a TextAppendable that will be accept logging events and be updated on the JavaFX Application thread. Parameters:; component - the appendable to add. removeTextAppendableFX; public static void removeTextAppendableFX(TextAppendable component); Deregister a TextAppendable so that it will no longer be informed of logging events. Parameters:; component - the appendable to remove. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/logging/LogManager.html:4003,update,updated,4003,javadoc/docs/qupath/lib/gui/logging/LogManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/logging/LogManager.html,1,['update'],['updated']
Deployability,"idden to return anything/nothing if getTasks is overridden instead. Specified by:; getParentObjects in class AbstractPlugin<T>; Parameters:; imageData - ; Returns:. getSupportedParentObjectClasses; public Collection<Class<? extends PathObject>> getSupportedParentObjectClasses(); Description copied from interface: PathInteractivePlugin; Get a collection of possible parent objects that the plugin could have.; This may be used, for example, to specified that analysis may be applied to any/all TMA cores or annotations.; If no parent objects are required, PathRootObject.class should be returned in the list. Returns:. getDefaultParameterList; public ParameterList getDefaultParameterList(ImageData<T> imageData); Description copied from class: AbstractInteractivePlugin; This should return a default ParameterList containing any information that is needed to repeat the task exactly. Specified by:; getDefaultParameterList in interface PathInteractivePlugin<T>; Specified by:; getDefaultParameterList in class AbstractInteractivePlugin<T>; Parameters:; imageData - ; Returns:. runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Overrides:; runPlugin in class AbstractPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. addRunnableTasks; protected void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); Description copied from class: AbstractPlugin; For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Specified by:; addRunnableTasks in class AbstractPlugin<T>; Parameters:; imageData - ; parentObject - ; tasks - . ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html:5404,update,update,5404,javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/objects/FindConvexHullDetectionsPlugin.html,1,['update'],['update']
Deployability,"ide server is already set; includeURLs - if true, any prompt should support URL input and not only a file chooser; Returns:; true if the server was set for this GUI, false otherwise; Throws:; IOException. installGroovyCommand; public MenuItem installGroovyCommand(String menuPath,; File file); Install a Groovy script as a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; file - the Groovy script to run; note that this will be reloaded each time it is required; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, String). installGroovyCommand; public MenuItem installGroovyCommand(String menuPath,; String script); Install a Groovy script as a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; script - the Groovy script to run; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, File). installImageDataCommand; public MenuItem installImageDataCommand(String menuPath,; Consumer<ImageData<BufferedImage>> command); Install a new command in QuPath that takes the current ImageData as input.; The command will only be enabled when an image is available. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; command - the command to run; Returns:; the MenuItem for the command; See Also:. installCommand(String, Runnable). installCommand",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:21428,install,installed,21428,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['install'],['installed']
Deployability,"idth of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). contains; public boolean contains(double x,; double y); Description copied from interface: ROI; Test is the RO",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:8341,update,updatePlane,8341,javadoc/docs/qupath/lib/roi/PointsROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html,1,['update'],['updatePlane']
Deployability,"ieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1062780,update,updateDownsample,1062780,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateDownsample']
Deployability,"ight). getInputResolution() - Method in class qupath.lib.classifiers.pixel.PixelClassifierMetadata. Requested pixel size for input. getInputResolution() - Method in class qupath.opencv.ml.PatchClassifierParams. Get the requested input resolution for the image. getInputs() - Method in class qupath.opencv.dnn.DnnModelParams. Get the requested inputs and their shapes. getInputs() - Method in interface qupath.opencv.dnn.PredictionFunction. Get the required inputs. getInputShapes() - Method in class qupath.opencv.dnn.DnnTools.DNNLayer. Layer input shape. getInputWidth() - Method in class qupath.lib.classifiers.pixel.PixelClassifierMetadata. Requested width of input image, or -1 if the classifier is not fussy. getInsertion(String, int, String) - Method in interface qupath.lib.scripting.languages.AutoCompletions.Completion. Get the string to insert, given the provided text and position. getInstallationUrl() - Static method in class qupath.lib.gui.Urls. Get a URL pointing to a page that explains how to install this version of QuPath. getInstalledImageServerBuilders() - Static method in class qupath.lib.images.servers.ImageServerProvider. Request all available ImageServerBuilders. getInstalledImageServerBuilders(Class<T>) - Static method in class qupath.lib.images.servers.ImageServerProvider. Request all available ImageServerBuilders supporting a given image class. getInstance() - Static method in class qupath.lib.gui.BuildInfo. Get the shared BuildInfo instance. getInstance() - Static method in class qupath.lib.gui.ExtensionClassLoader. Get a singleton instance of the ExtensionClassLoader. getInstance() - Static method in class qupath.lib.gui.JavadocViewer. Get the main (singleton) instance of JavadocViewer. getInstance() - Static method in class qupath.lib.gui.QuPathGUI. Get the static instance of the current QuPath GUI. getInstance() - Static method in class qupath.lib.gui.scripting.languages.CssLanguage. Get the static instance of this class. getInstance() - Static metho",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:414498,install,install,414498,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['install']
Deployability,"ilder(Processor<ImagePlus, ImagePlus, Object>) - Static method in class qupath.lib.experimental.pixels.ImageJProcessor. Create a PixelProcessor.Builder for an ImageJ ImagePlus. builder(Processor<Mat, Mat, Mat>) - Static method in class qupath.lib.experimental.pixels.OpenCVProcessor. Create a PixelProcessor.Builder for an OpenCV Mat. builder(PathObjectPredicates.PathObjectPredicate) - Static method in class qupath.lib.analysis.heatmaps.DensityMaps. Create a new DensityMaps.DensityMapBuilder to generate a customized density map. builder(Tiler) - Static method in class qupath.lib.objects.utils.Tiler. Create a new builder initialized with the settings from an existing Tiler. builder(DnnModelParams) - Static method in class qupath.opencv.dnn.DnnModelParams. Create a new params builder, initialized with the values from existing ; params. builder(PatchClassifierParams) - Static method in class qupath.opencv.ml.PatchClassifierParams. Create a builder to generate new patch classifier params, ; initialized with the values from an existing parameter object. Builder() - Constructor for class qupath.lib.classifiers.pixel.PixelClassifierMetadata.Builder;  ; Builder() - Constructor for class qupath.lib.experimental.pixels.Parameters.Builder;  ; Builder() - Constructor for class qupath.lib.experimental.pixels.PixelProcessor.Builder;  ; Builder() - Constructor for class qupath.lib.gui.dialogs.Dialogs.Builder. Deprecated.;  ; Builder() - Constructor for class qupath.lib.images.servers.bioformats.OMEPixelParser.Builder;  ; Builder() - Constructor for class qupath.lib.images.servers.ImageServerMetadata.Builder. Minimal builder for a new ImageServerMetadata; further properties must be set. Builder() - Constructor for class qupath.lib.images.servers.PixelCalibration.Builder. Create a new builder with default (uncalibrated) values. Builder() - Constructor for class qupath.lib.images.servers.SparseImageServer.Builder;  ; Builder() - Constructor for class qupath.lib.roi.GeometryTools.Geometr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:75124,patch,patch,75124,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,"image. PaneTools; Deprecated.; since v0.5.0; GridPaneUtils contains many of the features. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. Parameter<S>. Interface defining algorithm parameters, which need to be displayed to users somehow. ParameterChangeListener. Interface for objects that need to be notified when parameters have their values changed. Parameterizable. Interface for indicating that the implementing class takes adjustable parameters. ParameterList. A collection of Parameters, which can be used for analysis & queried to construct appropriate GUIs. ParameterPanelFX. A panel for displaying a list of parameters suitably to aid with creating JavaFX GUIs. Parameters<S,T>. Parameters for use with a PixelProcessor. Parameters.Builder<S,T>. Builder class for Parameters. PatchClassifierParams. Parameters required to build a classifier that operates on an image patch. PatchClassifierParams.Builder. Builder class to create PatchClassifierParams. PathAnnotationObject. An annotation PathObject. PathCellObject. A subclass of a PathDetectionObject, which also supports storing an (optional) extra ROI to represent ; the cell nucleus. PathClass. Representation of an object's classification - which can be defined using any unique string; identifier (e.g. PathClass.StandardPathClasses. Enum representing standard classifications. PathClassFactory; Deprecated.; since v0.4.0 in favor of methods added to PathClass directly. PathClassFactory.StandardPathClasses. Enum representing standard classifications. PathClassTools. Static methods for use with PathClass objects. PathDetectionObject. A detection PathObject. PathHierarchyImageServer. A special ImageServer implementation that doesn't have a backing image, but rather; constructs tiles on request from a PathObjectHierarchy and its detection objects. PathImage<T>. Interface use",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:37677,patch,patch,37677,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['patch'],['patch']
Deployability,"in individual PathObjects). boolean; addPathObjects(Collection<? extends PathObject> pathObjects). Deprecated.; since v0.4.0; use addObjects(Collection) instead. boolean; addPathObjectWithoutUpdate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:4008,update,update,4008,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,1,['update'],['update']
Deployability,"include URIs; items - collection containing all the distinct URIs from resources, each as a UriUpdater.SingleUriItem. ; Note that this collection will be regenerated, so any existing items in the collection will be removed.; replacements - map used to store any replacements identified by the UriUpdater. Note that any existing contents will be discarded.; Returns:; Throws:; IOException. wrap; public static UriResource wrap(URI... uris); Wrap one or more URIs in a UriResource so they can be updated together.; Any changes can then be requred from the UriResource. Parameters:; uris - ; Returns:. wrap; public static UriResource wrap(Collection<URI> uris); Wrap one or more URIs in a UriResource so they can be updated together.; Note that the collection is not used directly. Any changes should be accessed from the ; UriResource. Parameters:; uris - ; Returns:. locateFile; public static URI locateFile(URI uri,; int searchDepth,; Path... searchPaths); throws IOException; Attempt to update a URI to find an existing file using the specified search paths. Parameters:; uri - the URI to search for; searchDepth - the depth of the search (i.e. how many subdirectories); searchPaths - the base directories to search, in order; Returns:; a new URI corresponding to an existing file with the same name, ; or the original URI if no replacement was found or required; Throws:; IOException. locateFile; public static String locateFile(String path,; int searchDepth,; Path... searchPaths); throws IOException; Attempt to update a file using the specified search paths. Parameters:; path - the path to a file that may or may not exist; searchDepth - the depth of the search (i.e. how many subdirectories); searchPaths - the base directories to search, in order; Returns:; the path to a file with the same name as 'path' that does exist, ; or path unchanged if no existing file could be found.; Throws:; IOException. fixUris; public static int fixUris(UriResource resource,; Project<?> project); Attempt to f",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html:5520,update,update,5520,javadoc/docs/qupath/lib/io/UriUpdater.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html,1,['update'],['update']
Deployability,"indowProperty; public BooleanProperty expandToWindowProperty(); Get the property indicating whether the image should grow to fill the window (while maintaining its; aspect ratio).; If false, the image will grow no larger than its preferred width and height. Returns:; See Also:. getExpandToWindow(); setExpandToWindow(boolean). getExpandToWindow; public boolean getExpandToWindow(); Query whether the image is allowed to expand beyond its preferred width and height to fill the window.; If false, the image will grow no larger than its preferred width and height. Returns:. setExpandToWindow; public void setExpandToWindow(boolean limit); Control whether the image should be allowed to expand beyond its preferred width and height to fill the window.; If false, the image will grow no larger than its preferred width and height. Parameters:; limit - . getStage; public Stage getStage(); Get the stage used to display the image. Returns:. updateImage; public void updateImage(String name,; Image image); Update the image using a JavaFX image. Parameters:; name - ; image - . resetImage; public void resetImage(); Remove the image. updateImage; public void updateImage(String name,; BufferedImage img); Update the image using a buffered image. Parameters:; name - ; img - . imageNameProperty; public ReadOnlyObjectProperty<String> imageNameProperty(); Get a read-only property indicating the name of the image. Returns:. getName; public String getName(); Get the name of the image. Returns:. imageProperty; public ReadOnlyObjectProperty<Image> imageProperty(); Get a read-only property representing the JavaFX image. Returns:; See Also:. getImage(). getImage; public Image getImage(); Get the JavaFX image. Returns:. bufferedImageProperty; public ReadOnlyObjectProperty<BufferedImage> bufferedImageProperty(); Get a read-only property representing the buffered image. Returns:; See Also:. getBufferedImage(). getBufferedImage; public BufferedImage getBufferedImage(); Get the buffered image. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html:7643,update,updateImage,7643,javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html,2,['update'],['updateImage']
Deployability,"ineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to show upon completion. cancelled; public boolean cancelled(); Description copied from interface: SimpleProgressMonitor; Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Specified by:; cancelled in interface SimpleProgressMonitor; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2698,update,updateProgress,2698,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,3,['update'],"['update', 'updateProgress']"
Deployability,"ing scripts, e.g. when batch processing. Parameters:; imageData - . setBatchProjectAndImage; public static void setBatchProjectAndImage(Project<BufferedImage> project,; ImageData<BufferedImage> imageData); Set the Project and ImageData to use for batch processing for the current thread. Parameters:; project - ; imageData - . resetBatchProjectAndImage; public static void resetBatchProjectAndImage(); Reset the Project and ImageData used for batch processing for the current thread. loadImageData; @Deprecated; public static ImageData<BufferedImage> loadImageData(String path,; boolean setBatchData); throws IOException; Deprecated.; Load ImageData from a file. Parameters:; path - path to the file containing ImageData.; setBatchData - if true, the setBatchImageData(ImageData) will be called if the loading is successful.; Returns:; Throws:; IOException; See Also:. setBatchImageData(qupath.lib.images.ImageData<java.awt.image.BufferedImage>). fireHierarchyUpdate; public static void fireHierarchyUpdate(); Trigger an update for the current hierarchy.; ; This should be called after any (non-standard) modifications are made to the hierarchy ; to ensure that all listeners are notified (including for any GUI).; ; It is common to call it at the end of any script that does any direct modification of objects ; (e.g. adding/removing measurements, setting classifications). fireHierarchyUpdate; public static void fireHierarchyUpdate(PathObjectHierarchy hierarchy); Trigger an update for the specified hierarchy.; ; This should be called after any (non-standard) modifications are made to the hierarchy ; to ensure that all listeners are notified (including for any GUI).; ; It is common to call it at the end of any script that does any direct modification of objects ; (e.g. adding/removing measurements, setting classifications). Parameters:; hierarchy - . getColorRGB; @Deprecated; public static Integer getColorRGB(int... v); Deprecated.; Use instead makeRGB(int, int, int) or makeARGB(int, int",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:48729,update,update,48729,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['update'],['update']
Deployability,"ing(ImageOp... postprocessingOps); Define the postprocessing steps from an array.; Note that any existing postprocessing steps in the builder will ; be replaced by those provided here. Parameters:; postprocessingOps - ; Returns:. postprocessing; public PatchClassifierParams.Builder postprocessing(Collection<? extends ImageOp> postprocessingOps); Define the postprocessing steps from a collection.; Note that any existing postprocessing steps in the builder will ; be replaced by those provided here. Parameters:; postprocessingOps - ; Returns:. outputChannelType; public PatchClassifierParams.Builder outputChannelType(ImageServerMetadata.ChannelType channelType); Define the channel type for the output. Parameters:; channelType - ; Returns:. outputClasses; public PatchClassifierParams.Builder outputClasses(Map<Integer,PathClass> outputClasses); Define the classifications for the output as a map. Parameters:; outputClasses - ; Returns:; See Also:. outputClassNames(Map); outputClasses(PathClass...); outputClassNames(String...). outputClasses; public PatchClassifierParams.Builder outputClasses(PathClass... outputClasses); Define the classifications for the output as an array. Parameters:; outputClasses - ; Returns:; See Also:. outputClasses(Map); outputClassNames(Map); outputClassNames(String...). outputClassNames; public PatchClassifierParams.Builder outputClassNames(String... outputClasses); Define the classifications for the output as an array of classification names. Parameters:; outputClasses - ; Returns:; See Also:. outputClasses(PathClass...); outputClassNames(String...). outputClassNames; public PatchClassifierParams.Builder outputClassNames(Map<Integer,String> outputClasses); Define the classifications for the output as a map with string values. Parameters:; outputClasses - ; Returns:; See Also:. outputClasses(Map); outputClasses(PathClass...); outputClassNames(String...). build; public PatchClassifierParams build(); Build the patch classifier parameters. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html:8949,patch,patch,8949,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,1,['patch'],['patch']
Deployability,"ingValue(T, String) - Method in interface qupath.lib.gui.measure.PathTableData. Get a string representation of the value. getStringValue(T, String, int) - Method in interface qupath.lib.gui.measure.PathTableData. Get a string value, converting to a fixed number of decimal places if the column is numeric. getStroke() - Method in class qupath.lib.gui.charts.HistogramChart.HistogramData. Get the histogram stroke color. getStructureChangeBase() - Method in class qupath.lib.objects.hierarchy.events.PathObjectHierarchyEvent. If this is a structure change event, return the base object, i.e. getStylerFromLanguage(ScriptLanguage) - Static method in class qupath.lib.gui.scripting.richtextfx.stylers.ScriptStylerProvider. Get the ScriptStyler object corresponding to the specified ScriptLanguage. getStyles() - Method in class qupath.lib.gui.panes.PreferencePane.AppearancePreferences;  ; getSuffix() - Method in class qupath.lib.common.Version. Get the (optional) suffix, which may be appended at the end of the version ; number to indicate a pre-release (0.0.0-X). getSuitableName(Class<? extends PathObject>, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Get a user-friendly name for a specific type of PathObject, based on its Java class. getSum() - Method in class qupath.lib.analysis.stats.Histogram. Get the sum of all the values being histogrammed. getSum() - Method in class qupath.lib.analysis.stats.RunningStatistics. Get the sum of all non-NaN values that were added. getSummary() - Method in interface qupath.lib.projects.ProjectImageEntry. Get a summary string representing this image entry. getSupportedObjects(Collection<? extends PathObject>, Collection<Class<? extends PathObject>>) - Static method in class qupath.lib.objects.PathObjectTools. From a collection of available objects, extract those that are instances of specified supported classes. getSupportedParentObjectClasses() - Method in class qupath.imagej.detect.cells.SubcellularDetection;  ; getSupp",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:524189,release,release,524189,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['release'],['release']
Deployability,"ing transform). Create an ImageOp that applies the specified transforms, if possible. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. BioimageIoTools; public BioimageIoTools(). Method Details. buildDnnModel; public static DnnModel buildDnnModel(qupath.bioimageio.spec.BioimageIoSpec.BioimageIoModel spec); Attempt to build a DnnModel that follows this spec as closely as possible.; ; In some instances, the processing steps requires by the spec might not currently be ; supported by QuPath - see transformToOp(Processing) for more information. Parameters:; spec - ; Returns:. buildPatchClassifierParams; public static PatchClassifierParams buildPatchClassifierParams(qupath.bioimageio.spec.BioimageIoSpec.BioimageIoModel model,; ImageOp... inputOps); Create an instance of PatchClassifierParams from a model spec.; This encapsulates some key information QuPath needs for building a model in a way that can ; be modified and updated according to user requirements. Parameters:; model - the model spec to initialize the parameters; inputOps - optional additional preprocessing ops to apply, before any in the model spec are added; Returns:. buildPatchClassifierParams; public static PatchClassifierParams buildPatchClassifierParams(qupath.bioimageio.spec.BioimageIoSpec.BioimageIoModel modelSpec,; int preferredTileWidth,; int preferredTileHeight,; ImageOp... inputOps); Create an instance of PatchClassifierParams from a model spec.; This encapsulates some key information QuPath needs for building a model in a way that can ; be modified and updated according to user requirements. Parameters:; modelSpec - the model spec to initialize the parameters; preferredTileWidth - preferred tile width, or -1 to automatically determine this; the width will be updated based on the spec; preferredTileHeight - preferred tile height, or -1 to automatically determine this; the height will be update",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/BioimageIoTools.html:2749,update,updated,2749,javadoc/docs/qupath/opencv/ml/BioimageIoTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/BioimageIoTools.html,1,['update'],['updated']
Deployability,"initializing JavaFX in the appropriate thread; flagging that shutting down QuPath should not terminate the JVM; showing the QuPath UI window. This can potentially be used from other environments (e.g. MATLAB, Fiji, Python).; Afterwards, calls to getInstance() will return the QuPath instance as soon as it is available.; However, note that depending upon the thread from which this method is called, the QuPath instance may not ; be available until some time after the method returns.; ; If there is already an instance of QuPath running, this requests that it is made visible - but otherwise does nothing. requestAutomaticUpdateCheck; public void requestAutomaticUpdateCheck(); Request an automated update check in a background thread.; This will use the user preferences to determine whether or how to check for updates ; (i.e. if the preferences have disabled an update check, then it will not be run). See Also:. requestFullUpdateCheck(). requestFullUpdateCheck; public void requestFullUpdateCheck(); Request a manual update check in a background thread.; This should perform the check if possible, regardless of the user preferences. See Also:. requestAutomaticUpdateCheck(). showAnalysisPaneProperty; public BooleanProperty showAnalysisPaneProperty(). Returns:; the showAnalysisPane property. uiBlocked; public ObservableValue<Boolean> uiBlocked(); Observable value indicating that the user interface is/should be blocked.; This happens when a plugin or script is running. Returns:. openInBrowser; public static boolean openInBrowser(String url); Try to launch a browser window for a specified URL. Parameters:; url - the URL to open in the browser; Returns:; true if this was (as far as we know...) successful, and false otherwise; Since:; v0.5.0 (renamed from launchInBrowserWindow(String}. getToolManager; public ToolManager getToolManager(); Get the ToolManager that handles available and selected tools. Returns:. getThreadPoolManager; public SharedThreadPoolManager getThreadPoolManager()",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:15163,update,update,15163,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['update'],['update']
Deployability,"int into red, green and blue values, ; returning the result as a 3-element int array. unpackRGB(int, int[]) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. UNSET - Enum constant in enum class qupath.lib.images.ImageData.ImageType. Image type has not been set. unzippedExtensions(Path, String...) - Static method in class qupath.lib.io.PathIO. Get the extension of a file, or of all entries within a zip file. UPDATE - Variable in class qupath.lib.gui.actions.menus.HelpMenuActions.Actions;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewerPlus;  ; updateAvailableStyles() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Request that the list of available styles is updated. updateBounds(double, double) - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.Den",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1061686,update,updateChart,1061686,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateChart']
Deployability,"int requests that come in between are simply disregarded for performance.); ; When finished, it's necessary to call resetMinimumRepaintSpacingMillis() to make sure that ; normal service is resumed. Parameters:; repaintSpacingMillis - ; See Also:. resetMinimumRepaintSpacingMillis(). resetMinimumRepaintSpacingMillis; public void resetMinimumRepaintSpacingMillis(); Return to processing all repainting requests.; ; Note: calling this command triggers a repaint itself. setBorderColor; public void setBorderColor(Color color); Set the border color for this viewer.; This can be used to indicate (for example) that a particular viewer is active. Parameters:; color - . getBorderColor; public Color getBorderColor(); Get the border color set for this viewer. Returns:. repaint; public void repaint(); Request that the viewer is repainted.; The repaint is not triggered immediately, but rather enqueued for future processing.; ; Note that this can be used for changes in the field of view or overlay, but not for ; large changes that require any cached thumbnail to also be updated (e.g. changing the ; brightness/contrast or lookup table). In such cases repaintEntireImage() is required. See Also:. repaintEntireImage(). getMinDownsample; public double getMinDownsample(); Get the minimum downsample value supported by this viewer.; This prevents zooming in by an unreasonably large amount. Returns:. getMaxDownsample; public double getMaxDownsample(); Get the maximum downsample value supported by this viewer.; This prevents zooming out by an unreasonably large amount. Returns:. zoomOut; public void zoomOut(int nSteps); Zoom out by a specified number of steps, where one 'step' indicates a minimal zoom increment. Parameters:; nSteps - . zoomIn; public void zoomIn(int nSteps); Zoom in by a specified number of steps, where one 'step' indicates a minimal zoom increment. Parameters:; nSteps - . getDefaultZoomFactor; public double getDefaultZoomFactor(); The amount by which the downsample factor is ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html:16796,update,updated,16796,javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,1,['update'],['updated']
Deployability,"interface qupath.lib.gui.scripting.ScriptEditorControl. Request paste from the system clipboard. paste() - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; PASTE - Variable in class qupath.lib.gui.actions.menus.EditMenuActions.Actions;  ; PASTE_TO_PLANE - Variable in class qupath.lib.gui.actions.menus.EditMenuActions.Actions;  ; pasteAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; pasteAndEscapeAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; pasteFromClipboard(QuPathGUI, boolean) - Static method in class qupath.lib.gui.commands.Commands. Attempt to paste objects from the system clipboard to the current image, if available; ; otherwise, check for text on the clipboard and paste it into a new script editor tab. pasteFromClipboard(ScriptEditorControl<?>, boolean) - Static method in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; PatchClassifierParams - Class in qupath.opencv.ml. Parameters required to build a classifier that operates on an image patch. PatchClassifierParams.Builder - Class in qupath.opencv.ml. Builder class to create PatchClassifierParams. patchSize(int) - Method in class qupath.opencv.ml.PatchClassifierParams.Builder. Define the requested square patch size. patchSize(int, int) - Method in class qupath.opencv.ml.PatchClassifierParams.Builder. Define the requested patch size. PathAnnotationObject - Class in qupath.lib.objects. An annotation PathObject. PathAnnotationObject() - Constructor for class qupath.lib.objects.PathAnnotationObject. Default constructor. PathCellObject - Class in qupath.lib.objects. A subclass of a PathDetectionObject, which also supports storing an (optional) extra ROI to represent ; the cell nucleus. PathCellObject() - Constructor for class qupath.lib.objects.PathCellObject. Default constructor. PathClass - Class in qupath.lib.objects.classes. Representation of an object's classification - which can be defined using any unique string; identifier (e.g. PathC",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:751311,patch,patch,751311,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,"ion copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; g",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:9932,update,updatePlane,9932,javadoc/docs/qupath/lib/roi/AreaROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html,1,['update'],['updatePlane']
Deployability,"ion. disabled(ObservableValue<Boolean>) - Method in class qupath.lib.gui.actions.ActionTools.ActionBuilder. Bind the disabled property of the action to an ObservableValue, bidirectionally if possible. disableGammaAdjustmentProperty() - Method in class qupath.lib.gui.commands.display.BrightnessContrastSliderPane. Prevent gamma from being adjusted. disableMinMaxAdjustmentProperty() - Method in class qupath.lib.gui.commands.display.BrightnessContrastSliderPane. Prevent the min and max sliders from being adjusted. disableToggleMenuItemsProperty() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Property to disable options to toggle the visibility of channels. disableUpdatesProperty() - Method in class qupath.lib.gui.panes.AnnotationPane. Property that may be used to prevent updates on every hierarchy or selection change event. disableUpdatesProperty() - Method in class qupath.lib.gui.panes.PathObjectHierarchyView. Property that may be used to prevent updates on every hierarchy or selection change event. display(ImageDisplay) - Method in class qupath.lib.gui.images.servers.RenderedImageServer.Builder. Deprecated.; use RenderedImageServer.Builder.renderer(ImageRenderer) instead (since an ImageDisplay is also an ImageRenderer. displayMode() - Method in class qupath.lib.display.ImageDisplay. Get the value of ImageDisplay.useInvertedBackgroundProperty(). displayModeProperty() - Method in class qupath.lib.gui.charts.HistogramChart. Property to control how the histogram is displayed, either using areas or bars. DisplaySettingUtils - Class in qupath.lib.display.settings. Utility class for working with image display and image display settings objects. DisplaySettingUtils() - Constructor for class qupath.lib.display.settings.DisplaySettingUtils;  ; displayToSettings(ImageDisplay, String) - Static method in class qupath.lib.display.settings.DisplaySettingUtils. Create a new image display settings object from the image display. dispose() - Method in c",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:262436,update,updates,262436,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updates']
Deployability,"ion; QuPathResources();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static qupath.fx.localization.LocalizedResourceManager; getLocalizedResourceManager(). Get a localized resource manager, which can be used to manage localized strings,; and update these whenever the locale preferences are updated. static String; getString(String key). Get a string from the main ResourceBundle used for the QuPath user interface. static String; getString(String bundle,; String key);  ; static boolean; hasBundleForLocale(String bundle,; Locale locale);  ; static boolean; hasDefaultBundleForLocale(Locale locale);  ; static boolean; hasString(String key);  ; static boolean; hasString(String bundleName,; String key);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. QuPathResources; public QuPathResources(). Method Details. getLocalizedResourceManager; public static qupath.fx.localization.LocalizedResourceManager getLocalizedResourceManager(); Get a localized resource manager, which can be used to manage localized strings,; and update these whenever the locale preferences are updated. Returns:. getString; public static String getString(String key); Get a string from the main ResourceBundle used for the QuPath user interface.; ; This helps separate user interface strings from the main Java code, so they can be ; maintained more easily - and potentially could be translated into different languages ; if required. Parameters:; key - ; Returns:. getString; public static String getString(String bundle,; String key). hasString; public static boolean hasString(String key). hasString; public static boolean hasString(String bundleName,; String key). hasBundleForLocale; public static boolean hasBundleForLocale(String bundle,; Locale locale). hasDefaultBundleForLocale; public static boolean hasDefaultBundleForLocale(Locale locale). ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/localization/QuPathResources.html:1834,update,update,1834,javadoc/docs/qupath/lib/gui/localization/QuPathResources.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/localization/QuPathResources.html,2,['update'],"['update', 'updated']"
Deployability,"ion; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.opencv.dnn. package qupath.opencv.dnn. QuPath classes to use OpenCV's DNN module. Related Packages. Package; Description; qupath.opencv. Detection plugins using OpenCV. qupath.opencv.features. Classes for feature calculation using OpenCV. qupath.opencv.io. Support for serializing and deserializing OpenCV objects. qupath.opencv.ml. QuPath classes to apply machine learning to pixels and objects using OpenCV. qupath.opencv.ops. Image operations, implemented with OpenCV. qupath.opencv.tools. Additional processing methods for use with OpenCV Mats. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDnnModel<T>. Wrapper for a deep learning model in a pipeline using OpenCV. BlobFunction<T>. Convert OpenCV Mats into blobs (tensors) for use with a deep learning framework. DnnModel. General interface for implementing a deep learning model in a pipeline using OpenCV. DnnModelBuilder. Builder to create a DnnModel from DnnModelParams. DnnModelParams. Parameters to build a DnnModel. DnnModelParams.Builder. Builder for DnnModelParams. DnnModels. Helper class for building new DnnModels. DnnObjectClassifier. Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN. DnnShape. Helper class to represent input and output shapes associated with PredictionFunction. DnnTools. Tools for working with OpenCV's DNN module. DnnTools.DNNLayer. Helper class to summarize a DNN layer. OpenCVDnn. Wrapper for an OpenCV Net, including essential metadata about how it should be used. OpenCVDnn.Builder. Helper class to build an OpenCVDnn. OpenCVDnn.ModelType. Enum representing different classes of Model supported by OpenCV. OpenCVDnnModelBuilder. A DnnModelBuilder implementation that uses OpenCV's DNN module ; to build a Net. OpenCVModelObjectClassifier. Initial implementation of a patch-based ObjectCla",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/package-summary.html:1200,pipeline,pipeline,1200,javadoc/docs/qupath/opencv/dnn/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/package-summary.html,1,['pipeline'],['pipeline']
Deployability,"ipeUp, onTouchMoved, onTouchPressed, onTouchReleased, onTouchStationary, onZoomFinished, onZoom, onZoomStarted, opacity, parent, pickOnBounds, pressed, rotate, rotationAxis, scaleX, scaleY, scaleZ, scene, style, translateX, translateY, translateZ, viewOrder, visible. Field Summary. Fields inherited from class javafx.scene.layout.Region; USE_COMPUTED_SIZE, USE_PREF_SIZE. Fields inherited from class javafx.scene.Node; BASELINE_OFFSET_SAME_AS_HEIGHT. Constructor Summary; Constructors. Constructor; Description; BrightnessContrastHistogramPane();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; BooleanProperty; doLogCountsProperty(). Property to control whether the histogram shows pixel counts, or the natural logarithm of the counts. DoubleProperty; maxValueProperty(). The maximum value displayed on the histogram. DoubleProperty; minValueProperty(). The minimum value displayed on the histogram. void; updateHistogram(ImageDisplay imageDisplay,; ChannelDisplayInfo channelSelected). Update the histogram to show the data for the given channel. Methods inherited from class javafx.scene.layout.BorderPane; bottomProperty, centerProperty, clearConstraints, computeMinHeight, computeMinWidth, computePrefHeight, computePrefWidth, getAlignment, getBottom, getCenter, getContentBias, getLeft, getMargin, getRight, getTop, layoutChildren, leftProperty, rightProperty, setAlignment, setBottom, setCenter, setLeft, setMargin, setRight, setTop, topProperty. Methods inherited from class javafx.scene.layout.Pane; getChildren. Methods inherited from class javafx.scene.layout.Region; backgroundProperty, borderProperty, cacheShapeProperty, centerShapeProperty, computeMaxHeight, computeMaxWidth, getBackground, getBorder, getClassCssMetaData, getCssMetaData, getHeight, getInsets, getMaxHeight, getMaxWidth, getMinHeight, getMinWidth, getOpaqueInsets, getPadding, getPrefHeight, getPrefWidth, getShape, getUserAgentStylesheet, getWidth, heightProper",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastHistogramPane.html:3565,update,updateHistogram,3565,javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastHistogramPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastHistogramPane.html,1,['update'],['updateHistogram']
Deployability,"is image entry. T; getThumbnail(). Request a thumbnail for the image. boolean; hasImageData(). Check if this entry has saved ImageData already available. String; putMetadataValue(String key,; String value). Store a metadata value. PathObjectHierarchy; readHierarchy(). Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. ImageData<T>; readImageData(). Read the ImageData associated with this entry, or create a new ImageData if none is currently present. String; removeMetadataValue(String key). Remove a metadata value. void; saveImageData(ImageData<T> imageData). Save the ImageData for this entry using the default storage location for the project. void; setDescription(String description). Set the description. void; setImageName(String name). Set the image name for this project entry. void; setThumbnail(T img). Set a thumbnail for the image. default boolean; updateServerURIs(Map<URI,URI> replacements). Deprecated.; use instead UriResource.updateURIs(Map). Methods inherited from interface qupath.lib.io.UriResource; getUris, getURIs, updateUris, updateURIs. Method Details. getID; String getID(); Get a unique ID to represent this entry. Returns:. setImageName; void setImageName(String name); Set the image name for this project entry. Parameters:; name - . getImageName; String getImageName(); Get a name that may be used for this entry.; ; This may be derived automatically from the server path, or set explicitly to be something else. ; It may also be randomized to support blinded analysis. Returns:; See Also:. getOriginalImageName(); Project.setMaskImageNames(boolean); Project.getMaskImageNames(). getOriginalImageName; String getOriginalImageName(); Get the original image name, without any randomization. Most UI elements should prefer getImageName() to ; ensure that the randomization does its job. Returns:. getEntryPath; Path getEntryPath(); Get a path to the data for this image entry, or null if this entry is not ; stored on the lo",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:3187,update,updateURIs,3187,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,1,['update'],['updateURIs']
Deployability,"isplayInfo. All Known Implementing Classes:; DirectServerChannelInfo. Enclosing interface:; ChannelDisplayInfo. public static interface ChannelDisplayInfo.ModifiableChannelDisplayInfo; extends ChannelDisplayInfo; Helper interface to indicate that the display ranges can be modified. Nested Class Summary. Nested classes/interfaces inherited from interface qupath.lib.display.ChannelDisplayInfo; ChannelDisplayInfo.ModifiableChannelDisplayInfo. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; void; setMaxDisplay(float maxDisplay). Set the max display value for this channel. void; setMinDisplay(float minDisplay). Set the min display value for this channel. void; setMinMaxAllowed(float minAllowed,; float maxAllowed). Set the maximum permissible range for the image display. Methods inherited from interface qupath.lib.display.ChannelDisplayInfo; doesSomething, getColor, getMaxAllowed, getMaxDisplay, getMethod, getMinAllowed, getMinDisplay, getName, getRGB, getRGB, getValueAsString, isAdditive, isBrightnessContrastRescaled, updateRGBAdditive, updateRGBAdditive. Method Details. setMinMaxAllowed; void setMinMaxAllowed(float minAllowed,; float maxAllowed); Set the maximum permissible range for the image display.; ; For an 8-bit image, that should be 0 and 255.; ; For a 16-bit image, fewer bits might actually be used... therefore the full range of 0-2^16-1 may be too much.; ; Also, for a 32-bit floating point image the limits are rather harder to define in a general way.; This method makes it possible to restrict the permissible range to something sensible.; Brightness/contrast/min/max sliders may make use of this. Parameters:; minAllowed - ; maxAllowed - . setMinDisplay; void setMinDisplay(float minDisplay); Set the min display value for this channel.; Note that it is *strongly* advised to use ImageDisplay.setMinMaxDisplay instead ; since this helps ensure that the ImageDisplay fires appropriate events etc. Parameters:; minDisp",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/ChannelDisplayInfo.ModifiableChannelDisplayInfo.html:1561,update,updateRGBAdditive,1561,javadoc/docs/qupath/lib/display/ChannelDisplayInfo.ModifiableChannelDisplayInfo.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/ChannelDisplayInfo.ModifiableChannelDisplayInfo.html,2,['update'],['updateRGBAdditive']
Deployability,"ist(ListView<T> listView); Refresh a ListView in the Application thread. Type Parameters:; T - ; Parameters:; listView - . promptToSetActiveAnnotationProperties; public static boolean promptToSetActiveAnnotationProperties(PathObjectHierarchy hierarchy); Prompt the user to set properties for the currently-selected annotation(s). Parameters:; hierarchy - current hierarchy; Returns:; true if changes to annotation properties were made, false otherwise. populateAnnotationsMenu; public static Menu populateAnnotationsMenu(QuPathGUI qupath,; Menu menu); Populate a Menu with standard options to operate on selected annotation objects. Parameters:; qupath - ; menu - ; Returns:. populateAnnotationsMenu; public static ContextMenu populateAnnotationsMenu(QuPathGUI qupath,; ContextMenu menu); Populate a ContextMenu with standard options to operate on selected annotation objects. Parameters:; qupath - ; menu - ; Returns:. installRangePrompt; public static void installRangePrompt(Slider slider); Install a mouse click listener to prompt the user to input min/max values for a slider. Parameters:; slider - ; See Also:. promptForSliderRange(Slider). promptForSliderRange; public static boolean promptForSliderRange(Slider slider); Prompt the user to input min/max values for a slider. Parameters:; slider - ; Returns:; true if the user may have made changes, false if they cancelled the dialog. getScaledRGBInstance; public static WritableImage getScaledRGBInstance(BufferedImage img,; int targetWidth,; int targetHeight); Get a scaled (RGB or ARGB) image, achieving reasonable quality even when scaling down by a considerably amount.; ; Code is based on https://today.java.net/article/2007/03/30/perils-imagegetscaledinstance. Parameters:; img - ; targetWidth - ; targetHeight - ; Returns:. createRecentItemsMenu; public static Menu createRecentItemsMenu(String menuTitle,; ObservableList<URI> recentItems,; Consumer<URI> consumer); Create a menu that displays recent items, stored in the form of URIs,",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tools/GuiTools.html:14221,install,installRangePrompt,14221,javadoc/docs/qupath/lib/gui/tools/GuiTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/tools/GuiTools.html,2,['install'],['installRangePrompt']
Deployability,"ist<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.dnn.DnnModel; close. Constructor Details. AbstractDnnModel; public AbstractDnnModel(). Method Details. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Returns:. getBlobFunction; public abstract BlobFunction<T> getBlobFunction(String name); Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Parameters:; name - ; Returns:. getPredictionFunction; public abstract PredictionFunction<T> getPredictionFunction(); Get the prediction function that can apply a prediction with one or more blobs as input. Ret",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:2486,patch,patch,2486,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,1,['patch'],['patch']
Deployability,"istener, PathObjectSelectionListener. Direct Known Subclasses:; QuPathViewerPlus. public class QuPathViewer; extends Object; implements TileListener<BufferedImage>, PathObjectHierarchyListener, PathObjectSelectionListener; JavaFX component for viewing a (possibly large) image, along with overlays. Author:; Pete Bankhead. Property Summary; Properties. Type; Property; Description; DoubleProperty; gamma. Get the gamma property for this viewer. ReadOnlyObjectProperty<ImageData<BufferedImage>>; imageData. Property for the image data currently being displayed within this viewer. DoubleProperty; rotation. Return the rotation property of this viewer. IntegerProperty; tPosition. Current t-position for the timepoint currently visible in the viewer. IntegerProperty; zPosition. Current z-position for the z-slice currently visible in the viewer. Field Summary; Fields. Modifier and Type; Field; Description; protected boolean; imageUpdated. Flag used to indicate that the image was updated for a repaint (otherwise it's assumed only the overlay may have changed). protected boolean; locationUpdated. Flag used to indicate that the visible region in the viewer has changed. Constructor Summary; Constructors. Constructor; Description; QuPathViewer(DefaultImageRegionStore regionStore,; OverlayOptions overlayOptions). Create a new viewer. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addViewerListener(QuPathViewerListener listener). Add a viewer listener. void; centerImage(). Center the current image in the viewer, while keeping the same downsample factor. void; centerROI(ROI roi). Center the specified ROI in the viewer. void; closeViewer(). Request that this viewer is closed. protected boolean; componentContains(double x,; double y);  ; Point2D; componentPointToImagePoint(double x,; double y,; Point2D pointDest,; boolean constrainToBounds). Convert x and y coordinates from the component space to the image space. Point2D; componen",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html:1506,update,updated,1506,javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,1,['update'],['updated']
Deployability,"it, wait. Constructor Details. QuPathViewerPlus; public QuPathViewerPlus(DefaultImageRegionStore regionStore,; OverlayOptions overlayOptions,; ViewerPlusDisplayOptions viewerDisplayOptions); Create a new viewer. Parameters:; regionStore - store used to tile caching; overlayOptions - overlay options to control the viewer display; viewerDisplayOptions - viewer options to control additional panes and labels. Method Details. initializeForServer; public void initializeForServer(ImageServer<BufferedImage> server). Overrides:; initializeForServer in class QuPathViewer. isLocationVisible; public boolean isLocationVisible(); Returns true if the cursor location is visible, false otherwise. Returns:. isScalebarVisible; public boolean isScalebarVisible(); Returns true if the scalebar is visible, false otherwise. Returns:. isOverviewVisible; public boolean isOverviewVisible(); Returns true if the image overview is visible, false otherwise. Returns:. setSlidersPosition; public void setSlidersPosition(boolean down); Sets the Z and T sliders' position to allow space for command bar. Parameters:; down - . closeViewer; public void closeViewer(); Description copied from class: QuPathViewer; Request that this viewer is closed.; This unbinds the viewer from any properties it may be observing,; and also triggers QuPathViewerListener.viewerClosed(QuPathViewer) calls for ; any viewer listeners. Overrides:; closeViewer in class QuPathViewer. updateAffineTransform; protected void updateAffineTransform(). Overrides:; updateAffineTransform in class QuPathViewer. repaintEntireImage; public void repaintEntireImage(); Description copied from class: QuPathViewer; Request that the entire image is repainted, including the thumbnail.; This should be called whenever a major change in display is triggered, such as ; changing the brightness/contrast or lookup table.; Otherwise, QuPathViewer.repaint() is preferable. Overrides:; repaintEntireImage in class QuPathViewer; See Also:. QuPathViewer.repaint(). ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewerPlus.html:5563,update,updateAffineTransform,5563,javadoc/docs/qupath/lib/gui/viewer/QuPathViewerPlus.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewerPlus.html,3,['update'],['updateAffineTransform']
Deployability,"it. Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass,; double probability). Helper class to store an object prior to reclassifying it, including a classification probability. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; apply(). Apply the stored classification. PathObject; getPathObject(). Get the stored PathObject for which the PathClass may be set. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Reclassifier; public Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass); Helper class to store an object prior to reclassifying it. Parameters:; pathObject - ; pathClass - ; retainIntensityClass - of we have a single-level or two-level PathClass, with the second element an intensity classification, ; optionally retain this and only update the base class. Reclassifier; public Reclassifier(PathObject pathObject,; PathClass pathClass,; boolean retainIntensityClass,; double probability); Helper class to store an object prior to reclassifying it, including a classification probability. Parameters:; pathObject - an object whose classification may be set by a subsequent call to apply(); pathClass - the classification that may be applied to pathObject; retainIntensityClass - of we have a single-level or two-level PathClass, with the second element an intensity classification, ; optionally retain this and only update the base class.; probability - optional classification probability value to store in the object (may be Double.NaN if this should be ignored). Method Details. apply; public boolean apply(); Apply the stored classification. Returns:; true if the classification for the object changed, false otherwise. getPathObject; public PathObject getPathObject(); Get the stored PathObject for which the PathClass may be set. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html:2590,update,update,2590,javadoc/docs/qupath/lib/objects/classes/Reclassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/Reclassifier.html,1,['update'],['update']
Deployability,"ixel, layoutInArea, layoutInArea, layoutInArea, layoutInArea, maxHeight, maxHeightProperty, maxWidth, maxWidthProperty, minHeight, minHeightProperty, minWidth, minWidthProperty, opaqueInsetsProperty, paddingProperty, positionInArea, positionInArea, prefHeight, prefHeightProperty, prefWidth, prefWidthProperty, resize, scaleShapeProperty, setBackground, setBorder, setCacheShape, setCenterShape, setHeight, setMaxHeight, setMaxSize, setMaxWidth, setMinHeight, setMinSize, setMinWidth, setOpaqueInsets, setPadding, setPrefHeight, setPrefSize, setPrefWidth, setScaleShape, setShape, setSnapToPixel, setWidth, shapeProperty, snappedBottomInset, snappedLeftInset, snappedRightInset, snappedTopInset, snapPosition, snapPositionX, snapPositionY, snapSize, snapSizeX, snapSizeY, snapSpace, snapSpaceX, snapSpaceY, snapToPixelProperty, widthProperty. Methods inherited from class javafx.scene.Parent; getBaselineOffset, getChildrenUnmodifiable, getManagedChildren, getStylesheets, isNeedsLayout, layout, lookup, needsLayoutProperty, queryAccessibleAttribute, requestLayout, requestParentLayout, setNeedsLayout, updateBounds. Methods inherited from class javafx.scene.Node; accessibleHelpProperty, accessibleRoleDescriptionProperty, accessibleRoleProperty, accessibleTextProperty, addEventFilter, addEventHandler, applyCss, autosize, blendModeProperty, boundsInLocalProperty, boundsInParentProperty, buildEventDispatchChain, cacheHintProperty, cacheProperty, clipProperty, computeAreaInScreen, contains, contains, cursorProperty, depthTestProperty, disabledProperty, disableProperty, effectiveNodeOrientationProperty, effectProperty, eventDispatcherProperty, executeAccessibleAction, fireEvent, focusedProperty, focusTraversableProperty, focusVisibleProperty, focusWithinProperty, getAccessibleHelp, getAccessibleRole, getAccessibleRoleDescription, getAccessibleText, getBlendMode, getBoundsInLocal, getBoundsInParent, getCacheHint, getClip, getCursor, getDepthTest, getEffect, getEffectiveNodeOrientation, get",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/ChartThresholdPane.html:6225,update,updateBounds,6225,javadoc/docs/qupath/lib/gui/charts/ChartThresholdPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/ChartThresholdPane.html,3,['update'],['updateBounds']
Deployability,"ixelSize). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass). Classify the objects in the specified collection. Map<String,Integer>; getMissingFeatures(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects). Check for missing features, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). Try to classify a batch of objects. protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the class",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:2249,update,updateURIs,2249,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,1,['update'],['updateURIs']
Deployability,"ject from the hierarchy, firing a remove event. void; removeObjects(Collection<? extends PathObject> pathObjects,; boolean keepChildren). Remove a collection of objects, firing a single 'hierarchy changed' event afterwards to notify listeners if anything happened; (i.e. boolean; removeObjectWithoutUpdate(PathObject pathObject,; boolean keepChildren). Remove a single object from the hierarchy, without firing a remove event. void; removePathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). void; resolveHierarchy(). Attempt to resolve the parent-child relationships between all objects within the hierarchy. void; setHierarchy(PathObjectHierarchy hierarchy). Set the contents of this hierarchy to be the same as that of another hierarchy. void; setTMAGrid(TMAGrid tmaGrid). Set the tma grid for this hierarchy. String; toString();  ; void; updateObject(PathObject pathObject,; boolean isChanging). Update an object that is already in the hierarchy (e.g. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. HIERARCHY_COMPARATOR; public static final Comparator<PathObject> HIERARCHY_COMPARATOR; Comparator to use when looking for a parent annotation in the hierarchy.; The logic is:; ; Sort by area (smallest first); Sort by hierarchy level (deepest first); Sort by DefaultPathObjectComparator. In practice, one expects an object to be placed inside the smallest containing annotation - ; identical areas are likely to be rare, unless obtained by duplication. Constructor Details. PathObjectHierarchy; public PathObjectHierarchy(); Default constructor, creates an empty hierarchy. Method Details. isEmpty; public boolean isEmpty(); Check if the hierarchy is empty (i.e. no objects apart from the root object, no feature maps). Returns:. addListener; public void ad",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:8084,update,updateObject,8084,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,1,['update'],['updateObject']
Deployability,"jects. addShapeMeasurements(ImageData<?>, Collection<? extends PathObject>, ObjectMeasurements.ShapeFeatures...) - Static method in class qupath.lib.scripting.QP. Add shape measurements to the specified objects. addShapeMeasurements(PathObject, PixelCalibration, ObjectMeasurements.ShapeFeatures...) - Static method in class qupath.lib.analysis.features.ObjectMeasurements. Add shape measurements for one object. addSingleImageToProject(Project<BufferedImage>, ImageServer<BufferedImage>, ImageData.ImageType) - Static method in class qupath.lib.gui.commands.ProjectCommands. Add a single image to a project. addSlice(Object, Number) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder. Add a slice to the pie. addStep(WorkflowStep) - Method in class qupath.lib.plugins.workflow.Workflow. Append a new step to the end of the workflow, firing an update event. addSteps(Collection<WorkflowStep>) - Method in class qupath.lib.plugins.workflow.Workflow. Append multiple steps to the end of the workflow, firing a single update event. addStringParameter(String, String, String) - Method in class qupath.lib.plugins.parameters.ParameterList. Add a String parameter. addStringParameter(String, String, String, String) - Method in class qupath.lib.plugins.parameters.ParameterList. Add a String parameter, with help text. addTextAppendableFX(TextAppendable) - Static method in class qupath.lib.gui.logging.LogManager. Register a TextAppendable that will be accept logging events and be updated on the JavaFX Application thread. addThreshold(double) - Method in class qupath.lib.gui.charts.ChartThresholdPane. Add a threshold value. addThreshold(double, Color) - Method in class qupath.lib.gui.charts.ChartThresholdPane. Add a threshold value with its display color. addThreshold(ObservableNumberValue) - Method in class qupath.lib.gui.charts.ChartThresholdPane. Add a threshold value. addTileListener(TileListener<BufferedImage>) - Method in class qupath.lib.gui.images.stores.DefaultImageRegionSt",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:30467,update,update,30467,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"kRunnerFX. public abstract class AbstractTaskRunner; extends Object; implements TaskRunner; Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. running through a GUI, or from a command line only. Constructor Summary; Constructors. Modifier; Constructor; Description; protected ; AbstractTaskRunner(). Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). protected ; AbstractTaskRunner(int numThreads). Constructor for a PluginRunner that optionally uses a fixed number of threads. Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; protected void; awaitCompletion(). Await the completion of currently-running tasks, notifying any listener if necessary. boolean; isCancelled(). Query if the plugin can be cancelled while running. protected abstract SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to upd",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:1534,update,update,1534,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,1,['update'],['update']
Deployability,"l; Class PatchClassifierParams. java.lang.Object; qupath.opencv.ml.PatchClassifierParams. public class PatchClassifierParams; extends Object; Parameters required to build a classifier that operates on an image patch.; ; This is typically used to create a PixelClassifier.; It can also be used to create an ObjectClassifier that takes image patches as input ; (rather that features extracted from object ROIs or measurement lists). Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; PatchClassifierParams.Builder. Builder class to create PatchClassifierParams. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static PatchClassifierParams.Builder; builder(). Create a builder to generate new patch classifier params. static PatchClassifierParams.Builder; builder(PatchClassifierParams params). Create a builder to generate new patch classifier params, ; initialized with the values from an existing parameter object. static PixelClassifier; buildPixelClassifier(PatchClassifierParams params). Build a pixel classifier using these parameters. Padding; getHalo(). Get the 'halo' around the output. List<ColorTransforms.ColorTransform>; getInputChannels(). Get the channels to extract from the image as input to the model. PixelCalibration; getInputResolution(). Get the requested input resolution for the image. ImageServerMetadata.ChannelType; getOutputChannelType(). Get the requested output channel type. Map<Integer,PathClass>; getOutputClasses(). Get the classifications for the output. int; getPatchHeight(). Get the height of a patch, in pixels. int; getPatchWidth(). Get the width of a patch, in pixels. List<ImageOp>; getPostprocessing(). Get any postprocessing steps that should be applied after prediction. ImageOp; getPredictionOp(). Get the image op used for prediction only. List<ImageOp>; getPreprocessing(). Get any preprocessing steps that ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html:1332,patch,patch,1332,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,1,['patch'],['patch']
Deployability,"lArgumentException - if the number of channels in the output would be greater than opencv_core.CV_CN_MAX. isFloat; public static boolean isFloat(Mat mat); Returns true if a Mat is a floating point (rather than int) type. Parameters:; mat - ; Returns:. floor; public static void floor(Mat mat); Floor values in a floating point Mat.; Non-floating point Mats are unchanged.; This resembles Math.floor(double) except that non-finite values are left unchanged. Parameters:; mat - . round; public static void round(Mat mat); Round values in a floating point Mat.; Non-floating point Mats are unchanged.; This resembles Math.round(double) except that non-finite values are left unchanged. Parameters:; mat - . ceil; public static void ceil(Mat mat); Ceil values in a floating point Mat.; Non-floating point Mats are unchanged.; This resembles Math.ceil(double) except that non-finite values are left unchanged. Parameters:; mat - . ensureContinuous; public static Mat ensureContinuous(Mat mat,; boolean inPlace); Ensure a Mat is continuous, creating a copy of the data if necessary.; ; This can be necessary before calls to AbstractArray.createBuffer() or AbstractArray.createIndexer() for ; simpler interpretation of the results. Parameters:; mat - input Mat, which may or may not be continuous; inPlace - if true, set mat to contain the cloned data if required; Returns:; the original mat unchanged if it is already continuous, or cloned data that is continuous if required; See Also:. Mat.isContinuous(). vConcat; public static Mat vConcat(Collection<? extends Mat> mats,; Mat dest); Vertical concatenation for a Mat.; May be more convenient than OpenCV's built-in approach. Parameters:; mats - mats to concatenate; dest - optional destination (may be null); Returns:; merged Mat, which will be the same as dest if provided. hConcat; public static Mat hConcat(Collection<? extends Mat> mats,; Mat dest); Horizontal concatenation for a Mat.; May be more convenient than OpenCV's built-in approach. Paramet",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/OpenCVTools.html:18385,continuous,continuous,18385,javadoc/docs/qupath/opencv/tools/OpenCVTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/OpenCVTools.html,1,['continuous'],['continuous']
Deployability,"lack. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public ColorMaps(). Method Details. installColorMaps; public static boolean installColorMaps(Path... paths); Install colormaps from the specified paths. Parameters:; paths - optional paths containing either .tsv files containing colormaps, or directories that contain such .tsv files.; Returns:; true if changes were made, false otherwise. installColorMaps; public static boolean installColorMaps(ColorMaps.ColorMap... colorMaps); Install colormaps. Parameters:; colorMaps - one or more colormaps.; Returns:; true if changes were made, false otherwise. getColors; public static int[] getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert); Get an array of packed RGB values for a specific colormap. Parameters:; map - the colormap providing colors; nValues - the number of colors to extract; doInvert - if true, reverse the order of the colors; Returns:; an int array of length nValues. getDefaultColorMap; public static ColorMaps.ColorMap getDefaultColorMap(); Get a default, general-purpose ColorMaps.ColorMap. Returns:; See Also:. setDefaultColorMap(Co",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:2442,install,installColorMaps,2442,javadoc/docs/qupath/lib/color/ColorMaps.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html,2,['install'],['installColorMaps']
Deployability,"lass qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static method in class qupath.lib.analysis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriResource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.comm",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1066484,update,updateRGBAdditive,1066484,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateRGBAdditive']
Deployability,"lass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. useSystemMenubar; @Deprecated; public static BooleanProperty useSystemMenubarProperty; Legacy property used to specify whether the system menubar should be used for the main QuPath stage.; This should be bound bidirectionally to the corresponding property of any menubars created. See Also:. useSystemMenubarProperty(). numCommandThreads; public static IntegerProperty numCommandThreadsProperty; Property specifying the preferred number of threads QuPath should use for multithreaded commands. See Also:. numCommandThreadsProperty(). showImageNameInTitle; public static BooleanProperty showImageNameInTitleProperty; Property specifying if QuPath should show the image title in the main window title.; For privacy reasons it may be desirable to turn this off in some cases. See Also:. showImageNameInTitleProperty(). autoUpdateCheck; public static ObjectProperty<PathPrefs.AutoUpdateType> autoUpdateCheckProperty; Check for updates when launching QuPath, if possible. See Also:. autoUpdateCheckProperty(). maskImageNames; public static BooleanProperty maskImageNamesProperty; Request that image names are hidden within the user interface. See Also:. maskImageNamesProperty(). defaultLocale; public static ObjectProperty<Locale> defaultLocaleProperty; Get a property for setting the default Locale.; Setting this locale impacts both Locale.Category.FORMAT and Locale.Category.DISPLAY, ; and may trigger an update to defaultLocaleDisplayProperty() and defaultLocaleFormatProperty() ; if these have been changed. Since:; v0.4.0; See Also:. defaultLocaleProperty(). defaultLocaleFormat; public static ObjectProperty<Locale> defaultLocaleFormatProperty; Get a property for setting the default Locale for Locale.Category.FORMAT.; Setting this property also results in the Locale being changed to match. See Also:. defaultLocaleFormatProperty(). defaultLocaleDisplay; public static ObjectProperty<Locale> defaultLocaleDisplayPr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html:24750,update,updates,24750,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,1,['update'],['updates']
Deployability,"lass; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class Workflow. java.lang.Object; qupath.lib.plugins.workflow.Workflow. All Implemented Interfaces:; Externalizable, Serializable. public class Workflow; extends Object; implements Externalizable; A collection of steps that relate to how an image has been - or should be - processed.; ; This can also be used to implement a 'command history'.; ; Where the WorkflowSteps contained in the Workflow are scriptable, then a ; script can be created automatically. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; Workflow();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addStep(WorkflowStep step). Append a new step to the end of the workflow, firing an update event. void; addSteps(Collection<WorkflowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collect",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:1137,update,update,1137,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,1,['update'],['update']
Deployability,"lause license). Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RichScriptEditorExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. RichScriptEditorExtension; public RichScriptEditorExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns th",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/scripting/richtextfx/RichScriptEditorExtension.html:1703,install,installExtension,1703,javadoc/docs/qupath/lib/gui/scripting/richtextfx/RichScriptEditorExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/scripting/richtextfx/RichScriptEditorExtension.html,2,['install'],['installExtension']
Deployability,"lay. protected Collection<? extends PathObject>; getParentObjects(ImageData<BufferedImage> imageData). Get a collection of objects to process, based on the contents of the PluginRunner. protected Collection<Class<? extends PathObject>>; getSupportedParentObjectClasses();  ; protected boolean; parseArgument(ImageData<BufferedImage> imageData,; String arg). Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin. boolean; runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg). Run the plugin. Methods inherited from class qupath.lib.plugins.AbstractPlugin; addWorkflowStep, getTasks, postprocess, preprocess, rearrangeByStride, requestHierarchyUpdate. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:2397,install,installed,2397,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,1,['install'],['installed']
Deployability,"layed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; public void pluginCompleted(String message); Description copied from interface: SimpleProgressMonitor; Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Specified by:; pluginCompleted in interface SimpleProgressMonitor; Parameters:; message - message to",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:2308,update,updateProgress,2308,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,3,['update'],"['updateProgress', 'updated']"
Deployability,"ld be used to display a particular pixel. Specified by:; getRGB in interface ChannelDisplayInfo; Parameters:; img - ; x - ; y - ; mode - ; Returns:. getValueAsString; public String getValueAsString(BufferedImage img,; int x,; int y); Description copied from interface: ChannelDisplayInfo; Get a string representation of a pixel's value.; This might be a single number, or 3 numbers for an RGB image where the channel includes all values. Specified by:; getValueAsString in interface ChannelDisplayInfo; Parameters:; img - ; x - ; y - ; Returns:. getRGB; public int[] getRGB(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode); Description copied from interface: ChannelDisplayInfo; Get the RGB values that would be used to display all the pixels of an image. Specified by:; getRGB in interface ChannelDisplayInfo; Parameters:; img - ; rgb - ; mode - ; Returns:. updateRGBAdditive; public void updateRGBAdditive(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode); Description copied from interface: ChannelDisplayInfo; Update an array of existing pixels (packed RGB) additively using the colors to display a specified image.; May throw an UnsupportedOperationException if isAdditive() returns false;. Specified by:; updateRGBAdditive in interface ChannelDisplayInfo; Parameters:; img - ; rgb - ; mode - . getImageData; protected ImageData<BufferedImage> getImageData(). getImageServer; protected ImageServer<BufferedImage> getImageServer(). setMinMaxAllowed; public void setMinMaxAllowed(float minAllowed,; float maxAllowed); Description copied from interface: ChannelDisplayInfo.ModifiableChannelDisplayInfo; Set the maximum permissible range for the image display.; ; For an 8-bit image, that should be 0 and 255.; ; For a 16-bit image, fewer bits might actually be used... therefore the full range of 0-2^16-1 may be too much.; ; Also, for a 32-bit floating point image the limits are rather harder to define in a general way.; This method makes it possible to restrict the permissible r",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html:10035,update,updateRGBAdditive,10035,javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html,2,['update'],['updateRGBAdditive']
Deployability,"ld | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.scripting.richtextfx; Class RichScriptEditorExtension. java.lang.Object; qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension. All Implemented Interfaces:; QuPathExtension. public class RichScriptEditorExtension; extends Object; implements QuPathExtension; QuPath extension to add a more attractive script editor with syntax highlighting, ; making use of RichTextFX, Copyright (c) 2013-2014, Tomas Mikula (BSD 2-clause license). Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; RichScriptEditorExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. RichScriptEditorExtension; public RichScriptEditorExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/scripting/richtextfx/RichScriptEditorExtension.html:1292,install,installExtension,1292,javadoc/docs/qupath/lib/gui/scripting/richtextfx/RichScriptEditorExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/scripting/richtextfx/RichScriptEditorExtension.html,1,['install'],['installExtension']
Deployability,"le(). Returns true if a handle is currently active, for example being reposition. boolean; hasROI(). Returns true if this editor currently has a ROI. boolean; isTranslating(). Query if a ROI is currently being translated through this editor. ROI; requestNewHandle(double x,; double y). Request an updated ROI with a new handle inserted - useful e.g. void; resetActiveHandle(). Ensure that no handle is active. ROI; setActiveHandlePosition(double x,; double y,; double minDisplacement,; boolean shiftDown). If a handle has been grabbed, update its displacement. void; setROI(ROI roi). Set the active ROI, stopping any ROI translation currently in progress. void; setROI(ROI roi,; boolean stopTranslating). Set the active ROI, optionally stopping any ROI translation currently in progress. boolean; startTranslation(double x,; double y,; boolean snapToPixel). Returns true if the current ROI is translatable, and at the end of this call the translation has started. ROI; updateTranslation(double x,; double y,; ImageRegion constrainRegion). Update a ROI by translation, optionally constraining its movement within a specified boundary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. createInstance; public static RoiEditor createInstance(); Create a new RoiEditor. Returns:. setROI; public void setROI(ROI roi); Set the active ROI, stopping any ROI translation currently in progress. Parameters:; roi - . setROI; public void setROI(ROI roi,; boolean stopTranslating); Set the active ROI, optionally stopping any ROI translation currently in progress. Parameters:; roi - ; stopTranslating - if true, then any ROI currently being translated will have its translation completed.; Normally this should be true, but it may be false if the new ROI being set is part of the same translation event. startTranslation; public boolean startTranslation(double x,; double y,; boolean snapToPixel); Returns tr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiEditor.html:3211,update,updateTranslation,3211,javadoc/docs/qupath/lib/roi/RoiEditor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiEditor.html,1,['update'],['updateTranslation']
Deployability,"lean), except that the title of the ImagePlus is set according to the parent object type (which is used to get the ROI). static PathImage<ImagePlus>; extractROI(ImageServer<BufferedImage> server,; ROI pathROI,; RegionRequest request,; boolean setROI). Extract a region of interest from an image as an ImageJ ImagePlus. static PathImage<ImagePlus>; extractROIWithOverlay(ImageServer<BufferedImage> server,; PathObject pathObject,; PathObjectHierarchy hierarchy,; RegionRequest request,; boolean setROI,; OverlayOptions options). Extract an image region as an ImagePlus, optionally setting ImageJ Rois corresponding to QuPath objects. String; getDescription(). A short description of the extension for displaying in the main GUI. static Image; getImageJIcon(int width,; int height). Try to read the ImageJ icon from its jar. static ImageJ; getImageJInstance(). Get an instance of ImageJ, or start one, for interactive use (with GUI displayed). static String; getImageJPath(). Get the path for a local ImageJ installation, if set. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. static StringProperty; imageJPathProperty(). Property representing the path to a local ImageJ installation, or null if no path has been set. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. static void; setImageJPath(String path). Set the path for a local ImageJ installation, if required. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Property Details. imageJPath; public static StringProperty imageJPathProperty; Property representing the path to a local ImageJ installation, or null if no path has been set. See Also:. getImageJPath(); setImageJPath(String); imageJPathProper",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:2620,install,installation,2620,javadoc/docs/qupath/imagej/gui/IJExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html,1,['install'],['installation']
Deployability,"lectableItem<T> command);  ; static <T> org.controlsfx.control.action.Action; createSelectableCommandAction(SelectableItem<T> command,; String name). Create an action from a selectable icon. static <T> org.controlsfx.control.action.Action; createSelectableCommandAction(SelectableItem<T> command,; String name,; Node icon,; KeyCombination accelerator);  ; static <T> org.controlsfx.control.action.Action; createSelectableCommandAction(SelectableItem<T> command,; ObservableValue<String> name,; ObservableValue<Node> icon,; KeyCombination accelerator);  ; static org.controlsfx.control.action.Action; createSeparator(). Create an action indicating that a separator should be added (e.g. static ToggleButton; createToggleButton(org.controlsfx.control.action.Action action). Create a toggle button from an action, showing both the text and graphic if available. static ToggleButton; createToggleButtonWithGraphicOnly(org.controlsfx.control.action.Action action). Create a toggle button from an action, showing only the graphic and not any text. static org.controlsfx.control.action.Action; getActionProperty(MenuItem item). Retrieve an Action stored within the properties of a menu item, or null if no action is found. static org.controlsfx.control.action.Action; getActionProperty(Node node). Retrieve an Action stored within the properties of a node, or null if no action is found. static List<org.controlsfx.control.action.Action>; getAnnotatedActions(Object obj). Actions can be parsed from the accessible (usually public) fields of any object, as well as methods annotated with ActionMethod. static void; installInfoMessage(org.controlsfx.control.action.Action action,; ObjectExpression<InfoMessage> message). Install an optional info message to the action. static boolean; isSelectable(org.controlsfx.control.action.Action action). Specify that an Action has a meaningful 'selected' status. static void; parseAnnotations(org.controlsfx.control.action.Action action,; AnnotatedElement element). Par",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html:4516,toggle,toggle,4516,javadoc/docs/qupath/lib/gui/actions/ActionTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html,1,['toggle'],['toggle']
Deployability,"lected(ChannelDisplayInfo channel,; boolean selected). Set the selection of a channel on or off. void; setImageData(ImageData<BufferedImage> imageData,; boolean retainDisplaySettings). Set the ImageData to a new value. void; setMinMaxDisplay(ChannelDisplayInfo info,; float minDisplay,; float maxDisplay). Set the min/max display values for a specified ChannelDisplayInfo. void; setSwitchToGrayscaleChannel(ChannelDisplayInfo channel). Set the value of switchToGrayscaleChannelProperty(). void; setUseGrayscaleLuts(boolean useGrayscaleLuts). Set the value of useGrayscaleLutProperty(). void; setUseInvertedBackground(boolean useInvertedBackground). Set the value of useInvertedBackgroundProperty(). ObjectProperty<ChannelDisplayInfo>; switchToGrayscaleChannelProperty(). Property indicating which channel should be used if useGrayscaleLutProperty() is turned on. String; toJSON(boolean prettyPrint). Create a JSON representation of the main components of the current display. boolean; updateFromDisplay(ImageDisplay display). Update the current display based upon a different display. boolean; useColorLUTs(). The opposite of useGrayscaleLuts(). BooleanProperty; useGrayscaleLutProperty(). Property that specifies whether grayscale lookup tables should be preferred to color lookup tables. boolean; useGrayscaleLuts(). Get the value of useGrayscaleLutProperty(). boolean; useInvertedBackground(). Get the value of useInvertedBackgroundProperty(). BooleanProperty; useInvertedBackgroundProperty(). Property that specifies whether the background should be inverted (i.e. Methods inherited from class qupath.lib.gui.images.stores.AbstractImageRenderer; getUniqueID. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. useGrayscaleLut; public BooleanProperty useGrayscaleLutProperty; Property that specifies whether grayscale lookup tables should be preferred to color lookup tables. See Also:. useG",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/ImageDisplay.html:5049,update,updateFromDisplay,5049,javadoc/docs/qupath/lib/display/ImageDisplay.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/ImageDisplay.html,1,['update'],['updateFromDisplay']
Deployability,"lection<UriUpdater.SingleUriItem> items,; Map<UriUpdater.SingleUriItem,UriUpdater.SingleUriItem> replacements). Create a new UriUpdater using the specified collections. static <T extends UriResource>UriUpdater<T>; create(T resource). Create a new UriUpdater to support updating URIs for a single UriResource. static int; fixUris(UriResource resource,; Project<?> project). Attempt to fix any broken paths by updating URIs based upon the current project. Collection<UriUpdater.SingleUriItem>; getItems(UriUpdater.UriStatus status). Get all items with the specified status, or all items is status is null. Collection<UriUpdater.SingleUriItem>; getMissingItems(). Get all missing items. Map<URI,URI>; getReplacements(). Get a map of all replacements. static String; locateFile(String path,; int searchDepth,; Path... searchPaths). Attempt to update a file using the specified search paths. static URI; locateFile(URI uri,; int searchDepth,; Path... searchPaths). Attempt to update a URI to find an existing file using the specified search paths. UriUpdater<T>; makeReplacement(URI originalItem,; URI updatedItem). Add a single replacement to the replacement map. UriUpdater<T>; relative(URI uriOriginal,; URI uriCurrent). Identify replacements for missing URIs by relativizing URI. UriUpdater<T>; relative(Path pathOriginal,; Path pathCurrent). Identify replacements for missing URIs by relativizing paths. UriUpdater<T>; searchDepth(int maxDepth). Maximum search depth when using searchDepth(int) to match filenames in directories and subdirectories. UriUpdater<T>; searchPath(Path path). Search for filenames that match missing URIs, recursively up to the depth specified by searchDepth(int). static UriResource; wrap(URI... uris). Wrap one or more URIs in a UriResource so they can be updated together. static UriResource; wrap(Collection<URI> uris). Wrap one or more URIs in a UriResource so they can be updated together. Methods inherited from class java.lang.Object; clone, equals, finalize, getCla",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html:2505,update,update,2505,javadoc/docs/qupath/lib/io/UriUpdater.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriUpdater.html,1,['update'],['update']
Deployability,"lib.color.ColorMaps. Install colormaps. installCommand(String, Runnable) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath. installDefaultFeatureClassificationBuilder(ImageDataTransformerBuilder) - Static method in class qupath.process.gui.commands.ml.PixelClassifierPane. Add to the list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageData<BufferedImage>>) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath that takes the current ImageData as input. installInfoMessage(Action, ObjectExpression<InfoMessage>) - Static method in class qupath.lib.gui.actions.ActionTools. Install an optional info message to the action. installRangePrompt(Slider) - Static method in class qupath.lib.gui.tools.GuiTools. Install a ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:608095,install,installExtension,608095,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installExtension']
Deployability,"listener - ; See Also:. removeParameterChangeListener(ParameterChangeListener). removeParameterChangeListener; public void removeParameterChangeListener(ParameterChangeListener listener); Remove a ParameterChangeListener. Parameters:; listener - ; See Also:. addParameterChangeListener(ParameterChangeListener). setTextFieldFromNumber; protected static void setTextFieldFromNumber(TextField text,; Number value,; String unit). getTextField; protected TextField getTextField(Parameter<?> param,; int cols). getParameterEnabled; public boolean getParameterEnabled(String key); Returns true if a parameter exists with the given key and is enabled (and is therefore editable). Parameters:; key - ; Returns:. getParameterEnabled; public boolean getParameterEnabled(Parameter<?> param); Returns true if a parameter is enabled (and is therefore editable). Parameters:; param - ; Returns:. setParameterEnabled; public void setParameterEnabled(String key,; boolean enabled); Set the enabled status of a parameter by key, to determine if it can be edited. Parameters:; key - ; enabled - . setParameterEnabled; public void setParameterEnabled(Parameter<?> param,; boolean enabled); Set the enabled status of a parameter, to determine if it can be edited. Parameters:; param - ; enabled - . setNumericParameterValue; public boolean setNumericParameterValue(String key,; Number value); Set a numeric parameter value (either int or double).; ; The reason for using this method rather than setting the parameter value directly is that it ensures that; any displayed components (text fields, sliders...) are updated accordingly. Parameters:; key - ; value - ; Returns:. setNumericParameterValueRange; public boolean setNumericParameterValueRange(String key,; double minValue,; double maxValue); Set the minimum and maximum value for a numeric parameter.; ; If the parameter is being displayed with a slider, the slider range will also be updated accordingly. Parameters:; key - ; minValue - ; maxValue - ; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/dialogs/ParameterPanelFX.html:4469,update,updated,4469,javadoc/docs/qupath/lib/gui/dialogs/ParameterPanelFX.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/dialogs/ParameterPanelFX.html,2,['update'],['updated']
Deployability,"ll; if no method is relevant. float; getMinAllowed(). Get the min allowed display value. float; getMinDisplay(). Get the min display value. String; getName(). Get the channel name. int[]; getRGB(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode). Get the RGB values that would be used to display all the pixels of an image. int; getRGB(BufferedImage img,; int x,; int y,; ChannelDisplayMode mode). Get the RGB value that would be used to display a particular pixel. String; getValueAsString(BufferedImage img,; int x,; int y). Get a string representation of a pixel's value. boolean; isAdditive(). Returns true if this channel can be used additively to create a composite image display;; returns false if this channel wants all the color information to itself, so can't be displayed with others. boolean; isBrightnessContrastRescaled(). Returns true if rescaling according to min & max display levels is applied, false if the full display range is used. void; updateRGBAdditive(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode). Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. int; updateRGBAdditive(BufferedImage img,; int x,; int y,; int rgb,; ChannelDisplayMode mode). Update an existing pixel (packed RGB) additively using the color used to display a specified one. Method Details. getName; String getName(); Get the channel name. This may also be returned by the toString() method. Returns:. getMinDisplay; float getMinDisplay(); Get the min display value.; This is used to control the brightness/contrast when painting. Returns:. getMaxDisplay; float getMaxDisplay(); Get the max display value.; This is used to control the brightness/contrast when painting. Returns:. getMinAllowed; float getMinAllowed(); Get the min allowed display value.; This is only a hint. Returns:. getMaxAllowed; float getMaxAllowed(); Get the max allowed display value.; This is only a hint. Returns:. isAdditive; boolean isAdditive(); Returns tr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html:5502,update,updateRGBAdditive,5502,javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html,1,['update'],['updateRGBAdditive']
Deployability,"llection<? extends PathObject> pathObjects); Description copied from interface: ObjectClassifier; Check for missing features, returning the names and number of input objects missing the specified features.; This is useful as a warning that the input for the classifier may not be valid.; Default implementation returns an empty map; however, implementations should attempt to provide a meaningful ; output if possible. Features that are not missing should not be included in the output. Specified by:; getMissingFeatures in interface ObjectClassifier<BufferedImage>; Parameters:; imageData - image containing the objects to test; pathObjects - objects to test for missing features; if not available, ObjectClassifier.getCompatibleObjects(ImageData) will be called.; Returns:; a map of feature names and the number of objects missing the corresponding features. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:6330,update,updateURIs,6330,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,6,['update'],['updateURIs']
Deployability,"lly, false if it was cancelled; Throws:; IOException. promptToImportImages; public static List<ProjectImageEntry<BufferedImage>> promptToImportImages(QuPathGUI qupath,; String... defaultPaths); Show prompt for the user to select images to import into the current project in QuPath, choosing a suitable ImageServerBuilder. Parameters:; qupath - the QuPath instance; defaultPaths - image paths to include when the dialog is shown (useful when the dialog is shown with some paths already known); Returns:; a list of project entries for all images that were successfully added to the project. promptToImportImages; public static List<ProjectImageEntry<BufferedImage>> promptToImportImages(QuPathGUI qupath,; ImageServerBuilder<BufferedImage> builder,; String... defaultPaths); Show prompt for the user to select images to import into the current project in QuPath. Parameters:; qupath - the QuPath instance; builder - if not null, this will be used to create the servers. If null, a combobox will be shown to choose an installed builder.; defaultPaths - image paths to include when the dialog is shown (useful when the dialog is shown with some paths already known); Returns:; a list of project entries for all images that were successfully added to the project. addSingleImageToProject; public static ProjectImageEntry<BufferedImage> addSingleImageToProject(Project<BufferedImage> project,; ImageServer<BufferedImage> server,; ImageData.ImageType type); Add a single image to a project. Parameters:; project - the project; server - the image to add; type - optional image type, if known; Returns:; an entry corresponding to the image that was added. getThumbnailRGB; public static BufferedImage getThumbnailRGB(ImageServer<BufferedImage> server); throws IOException; Get an RGB thumbnail for an image server, suitable for showing as a project thumbnail. Parameters:; server - ; Returns:; an RGB thumbnail for server; Throws:; IOException. showProjectMetadataEditor; public static void showProjectMetadat",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/ProjectCommands.html:3845,install,installed,3845,javadoc/docs/qupath/lib/gui/commands/ProjectCommands.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/ProjectCommands.html,1,['install'],['installed']
Deployability,"loating point values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int[] r,; int[] g,; int[] b). Create a colormap using integer values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int r,; int g,; int b). Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public ColorMaps(). Method Details. installColorMaps; public static boolean installColorMaps(Path... paths); Install colormaps from the specified paths. Parameters:; paths - optional paths containing either .tsv files containing colormaps, or directories that contain such .tsv files.; Returns:; true if changes were made, false otherwise. installColorMaps; public static boolean installColorMaps(ColorMaps.ColorMap... colorMaps); Install colormaps. Parameters:; colorMaps - one or more colormaps.; Returns:; true if changes were made, false otherwise. getColors; public static int[] getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert); Get an array o",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:2067,install,installColorMaps,2067,javadoc/docs/qupath/lib/color/ColorMaps.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html,1,['install'],['installColorMaps']
Deployability,"ls - ; measurementNames - . removeMeasurements; public static void removeMeasurements(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls,; String... measurementNames); Remove measurements from objects of a specific class for the specified hierarchy. Parameters:; hierarchy - ; cls - ; measurementNames - . clearMeasurements; public static void clearMeasurements(PathObjectHierarchy hierarchy,; PathObject... pathObjects); Clear the measurement lists for specified objects within a hierarchy. Parameters:; hierarchy - used to fire a hierarchy update, if specified (may be null if no update should be fired); pathObjects - collection of objects that should have their measurement lists cleared. clearMeasurements; public static void clearMeasurements(PathObjectHierarchy hierarchy,; Collection<PathObject> pathObjects); Clear the measurement lists for specified objects within a hierarchy. Parameters:; hierarchy - used to fire a hierarchy update, if specified (may be null if no update should be fired); pathObjects - collection of objects that should have their measurement lists cleared. clearAnnotationMeasurements; public static void clearAnnotationMeasurements(PathObjectHierarchy hierarchy); Clear the measurement lists for all annotations in a hierarchy. Parameters:; hierarchy - . clearAnnotationMeasurements; public static void clearAnnotationMeasurements(); Clear the measurement lists for all annotations in the current hierarchy. clearDetectionMeasurements; public static void clearDetectionMeasurements(PathObjectHierarchy hierarchy); Clear the measurement lists for all detections in a hierarchy (including sub-classes of detections). Parameters:; hierarchy - . clearDetectionMeasurements; public static void clearDetectionMeasurements(); Clear the measurement lists for all detections in the current hierarchy. clearTMACoreMeasurements; public static void clearTMACoreMeasurements(PathObjectHierarchy hierarchy); Clear the measurement lists for all TMA core objects in a hie",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:97148,update,update,97148,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,2,['update'],['update']
Deployability,"m shows pixel counts, or the natural logarithm of the counts. DONE - Enum constant in enum class qupath.lib.plugins.ParallelTileObject.Status. Tile processing complete. DOUBLE - Enum constant in enum class qupath.lib.measurements.MeasurementList.MeasurementListType. A list backed by an array of doubles. doubleClickToZoom - Variable in class qupath.lib.gui.panes.PreferencePane.ViewerPreferences;  ; doubleClickToZoomProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Request that double-clicking the viewer can be used to zoom in. DoubleParameter - Class in qupath.lib.plugins.parameters. Parameter to represent a floating point numeric value. doUpdateHierarchy() - Method in class qupath.lib.scripting.ScriptParameters. Request whether to fire an update event for the object hierarchy, if an image data ; object is available. doUpdateHierarchy(boolean) - Method in class qupath.lib.scripting.ScriptParameters.Builder. Optionally request a hierarchy update event after running a script; (default is true for scripts that operate on image data). doWatershed(ImageProcessor, ImageProcessor, boolean) - Static method in class qupath.imagej.processing.Watershed. Apply a watershed transform. doWatershed(ImageProcessor, ImageProcessor, double, boolean) - Static method in class qupath.imagej.processing.Watershed. Apply an intensity-constrained watershed transform, preventing regions from expanding to pixels below a specified minimum threshold. doWatershed(Mat, Mat, boolean) - Static method in class qupath.opencv.tools.ProcessingCV. Apply a watershed transform. doWatershed(Mat, Mat, double, boolean) - Static method in class qupath.opencv.tools.ProcessingCV. Apply an intensity-constrained watershed transform, preventing regions from expanding to pixels below a specified minimum threshold. doWatershed(SimpleImage, SimpleModifiableImage, boolean) - Static method in class qupath.lib.analysis.algorithms.Watershed. Apply a 2D watershed transform. doWatershed(SimpleImage, SimpleM",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:269743,update,update,269743,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"mageData(). Check if this entry has saved ImageData already available. String; putMetadataValue(String key,; String value). Store a metadata value. PathObjectHierarchy; readHierarchy(). Read the PathObjectHierarchy for this entry, or return an empty hierarchy if none is available. ImageData<T>; readImageData(). Read the ImageData associated with this entry, or create a new ImageData if none is currently present. String; removeMetadataValue(String key). Remove a metadata value. void; saveImageData(ImageData<T> imageData). Save the ImageData for this entry using the default storage location for the project. void; setDescription(String description). Set the description. void; setImageName(String name). Set the image name for this project entry. void; setThumbnail(T img). Set a thumbnail for the image. default boolean; updateServerURIs(Map<URI,URI> replacements). Deprecated.; use instead UriResource.updateURIs(Map). Methods inherited from interface qupath.lib.io.UriResource; getUris, getURIs, updateUris, updateURIs. Method Details. getID; String getID(); Get a unique ID to represent this entry. Returns:. setImageName; void setImageName(String name); Set the image name for this project entry. Parameters:; name - . getImageName; String getImageName(); Get a name that may be used for this entry.; ; This may be derived automatically from the server path, or set explicitly to be something else. ; It may also be randomized to support blinded analysis. Returns:; See Also:. getOriginalImageName(); Project.setMaskImageNames(boolean); Project.getMaskImageNames(). getOriginalImageName; String getOriginalImageName(); Get the original image name, without any randomization. Most UI elements should prefer getImageName() to ; ensure that the randomization does its job. Returns:. getEntryPath; Path getEntryPath(); Get a path to the data for this image entry, or null if this entry is not ; stored on the local file system.; ; If not null, the path may be a file or a directory and is not g",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html:3282,update,updateUris,3282,javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/projects/ProjectImageEntry.html,2,['update'],"['updateURIs', 'updateUris']"
Deployability,"mageData(ImageServer<T> server,; ImageData.ImageType type); Create a new ImageData with a specified type and creating a new object hierarchy. Parameters:; server - ; type - . ImageData; public ImageData(ImageServer<T> server,; PathObjectHierarchy hierarchy); Create a new ImageData with ImageType.UNKNOWN. Parameters:; server - ; hierarchy - . ImageData; public ImageData(ImageServer<T> server); Create a new ImageData with ImageType.UNKNOWN and a new PathObjectHierarchy. Parameters:; server - . Method Details. getHistoryWorkflow; public Workflow getHistoryWorkflow(); Get a workflow representing a history of the processing steps applied to the ImageData. Returns:. setColorDeconvolutionStains; public void setColorDeconvolutionStains(ColorDeconvolutionStains stains); Set the color deconvolution stain vectors for the current image type.; ; If the type is not brightfield, an IllegalArgumentException is thrown. Parameters:; stains - . updateServerMetadata; public void updateServerMetadata(ImageServerMetadata newMetadata); Update the ImageServer metadata. The benefit of using this method rather than manipulating ; the ImageServer directly is that it will fire a property change. Parameters:; newMetadata - . isBrightfield; public boolean isBrightfield(); Returns true if the image type is set to brightfield. Returns:. isFluorescence; public boolean isFluorescence(); Returns true if the image type is set to fluorescence. Returns:. setImageType; public void setImageType(ImageData.ImageType type); Set the image type. Parameters:; type - . getServer; public ImageServer<T> getServer(); Get the ImageServer. Returns:. getServerPath; public String getServerPath(); Get the path of the ImageServer. Returns:. getHierarchy; public PathObjectHierarchy getHierarchy(); Get the object hierarchy. Returns:. getImageType; public ImageData.ImageType getImageType(); Get the image type. Returns:. getColorDeconvolutionStains; public ColorDeconvolutionStains getColorDeconvolutionStains(); Get the stain",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/ImageData.html:5424,update,updateServerMetadata,5424,javadoc/docs/qupath/lib/images/ImageData.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/ImageData.html,2,['update'],['updateServerMetadata']
Deployability,"mageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriResource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource. Update the specified URIs. updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.DnnObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVDnn;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVModelObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.opencv.ops.ImageOp. Default implementation makes no changes; classes should override this if necessary. UpdateUrisCommand<T> - Class in qupath.lib.gui.commands. Fix broken URIs by using relative paths or prompting the user to select files. updateZ(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated z value. updatingConstrainingObjects(QuPathViewer, double, double, Collection<Path",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1067978,update,updateURIs,1067978,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateURIs']
Deployability,magej.gui.IJExtension.IJExtensionCommands;  ; actionFastCellCounts - Variable in class qupath.process.gui.ProcessingExtension.OpenCVCommands. Deprecated. ActionIcon - Annotation Interface in qupath.lib.gui.actions.annotations. Default icon for an action. actionImportROIs - Variable in class qupath.imagej.gui.IJExtension.IJExtensionCommands;  ; actionIntensity - Variable in class qupath.process.gui.ProcessingExtension.ObjectClassificationCommands;  ; actionLoadObjectClassifier - Variable in class qupath.process.gui.ProcessingExtension.ObjectClassificationCommands;  ; actionLoadPixelClassifier - Variable in class qupath.process.gui.ProcessingExtension.PixelClassificationCommands;  ; actionMacroRunner - Variable in class qupath.imagej.gui.IJExtension.IJExtensionCommands;  ; actionMeasurement - Variable in class qupath.process.gui.ProcessingExtension.ObjectClassificationCommands;  ; ActionMenu - Annotation Interface in qupath.lib.gui.actions.annotations. Annotation indicating the menu path where an action should be installed. ActionMethod - Annotation Interface in qupath.lib.gui.actions.annotations. Annotation indicating that a method should be converted to an Action if possible. actionObjectClassifier - Variable in class qupath.process.gui.ProcessingExtension.ObjectClassificationCommands;  ; actionPixelClassifier - Variable in class qupath.process.gui.ProcessingExtension.PixelClassificationCommands;  ; actionPixelCount - Variable in class qupath.imagej.gui.IJExtension.IJExtensionCommands. Deprecated. actionPlugins - Variable in class qupath.imagej.gui.IJExtension.IJExtensionCommands;  ; actionPositiveCellDetection - Variable in class qupath.imagej.gui.IJExtension.IJExtensionCommands;  ; Actions() - Constructor for class qupath.lib.gui.actions.menus.AnalyzeMenuActions.Actions;  ; Actions() - Constructor for class qupath.lib.gui.actions.menus.AutomateMenuActions.Actions;  ; Actions() - Constructor for class qupath.lib.gui.actions.menus.ClassifyMenuActions.Actions;  ; Acti,MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:8233,install,installed,8233,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installed']
Deployability,"me type and classification as the input object, but a new ROI and ID.; This version of the method supports cell objects with a nucleus ROI.; ; Note that TMA core objects are not supported. Parameters:; pathObject - the template object; roiNew - the new ROI; roiNucleus - nucleus ROI; only relevant if the template object is a cell; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. lockObjects; public static void lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'locked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an upd",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:51480,update,update,51480,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,2,['update'],['update']
Deployability,"meters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; the width will be adjusted by xPad * 2; yPad - padding to add along the y dimension; the height will be adjusted by yPad * 2; Returns:; RegionRequest with the specified padding (may be this object unchanged if the padding is zero). pad2D; public RegionRequest pad2D(Padding padding); Add symmetric padding to the x and y dimensions of a request. Parameters:; padding - padding to add; Returns:; RegionRequest with the specified padding (may be this object unchanged if the padding is zero). hashCode; public int hashCode(). Overrides:; hashCode in class ImageRegion. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:10295,update,updated,10295,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,1,['update'],['updated']
Deployability,"method in class qupath.lib.common.ColorTools. Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. unpackRGB(int) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. unpackRGB(int, int[]) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. UNSET - Enum constant in enum class qupath.lib.images.ImageData.ImageType. Image type has not been set. unzippedExtensions(Path, String...) - Static method in class qupath.lib.io.PathIO. Get the extension of a file, or of all entries within a zip file. UPDATE - Variable in class qupath.lib.gui.actions.menus.HelpMenuActions.Actions;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewerPlus;  ; updateAvailableStyles() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Request that the list of available styles is updated. updateBounds(double, double) - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1061466,update,updateAvailableStyles,1061466,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateAvailableStyles']
Deployability,"mmandLogView - Class in qupath.lib.gui.panes. Show logged commands, and optionally generate a script. WorkflowCommandLogView(QuPathGUI) - Constructor for class qupath.lib.gui.panes.WorkflowCommandLogView. Construct a view to display the workflow for the currently-active ImageData within a running QuPath instance. WorkflowCommandLogView(QuPathGUI, Workflow) - Constructor for class qupath.lib.gui.panes.WorkflowCommandLogView. Construct a view displaying a static workflow (i.e. WorkflowListener - Interface in qupath.lib.plugins.workflow. Interface for listening to changes in Workflows, e.g. WorkflowStep - Interface in qupath.lib.plugins.workflow. Basic interface for a loggable workflow step. workflowUpdated(Workflow) - Method in class qupath.lib.gui.panes.WorkflowCommandLogView;  ; workflowUpdated(Workflow) - Method in class qupath.lib.images.ImageData;  ; workflowUpdated(Workflow) - Method in interface qupath.lib.plugins.workflow.WorkflowListener. Called whenever a Workflow has been updated in some way, such as a new step added. wrap(URI...) - Static method in class qupath.lib.io.UriUpdater. Wrap one or more URIs in a UriResource so they can be updated together. wrap(Collection<? extends PathObject>) - Static method in class qupath.lib.io.FeatureCollection. Wrap a collection of PathObjects as a FeatureCollection, ignoring nested (child) objects. wrap(Collection<? extends PathObject>, boolean) - Static method in class qupath.lib.io.FeatureCollection. Wrap a collection of PathObjects as a FeatureCollection. wrap(Collection<URI>) - Static method in class qupath.lib.io.UriUpdater. Wrap one or more URIs in a UriResource so they can be updated together. wrapInPointerScope(Processor<S, T, U>) - Static method in class qupath.lib.experimental.pixels.OpenCVProcessor. Wrap a processor in a second processor that uses a PointerScope to ensure that pointers are released; (except for any output). WrappedBufferedImageServer - Class in qupath.lib.images.servers. Implementation of an Im",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1109455,update,updated,1109455,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability,"mmary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.io; Interface UriResource. All Known Subinterfaces:; ImageDataOp, ImageOp, ProjectImageEntry<T>. All Known Implementing Classes:; DnnObjectClassifier, ImageOps.PaddedOp, OpenCVDnn, OpenCVModelObjectClassifier. public interface UriResource; Interface for objects that depend upon URIs.; Examples include images, where the URI refer to the image file or URL, or prediction models. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default Collection<URI>; getUris();  ; Collection<URI>; getURIs(). Get all the URIs required for this resource. default boolean; updateUris(Map<URI,URI> replacements);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Method Details. getUris; default Collection<URI> getUris(); throws IOException. Throws:; IOException. updateUris; default boolean updateUris(Map<URI,URI> replacements); throws IOException. Throws:; IOException. getURIs; Collection<URI> getURIs(); throws IOException; Get all the URIs required for this resource. This is often an empty or singleton list. Returns:; the required URIs; Throws:; IOException; Since:; v0.4.0. updateURIs; boolean updateURIs(Map<URI,URI> replacements); throws IOException; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOE",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriResource.html:1188,update,updateUris,1188,javadoc/docs/qupath/lib/io/UriResource.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriResource.html,2,['update'],['updateUris']
Deployability,"ms.Builder; inputResolution(PixelCalibration cal,; double downsample). Define the input resolution using a pixel calibration and a scaling factor. PatchClassifierParams.Builder; outputChannelType(ImageServerMetadata.ChannelType channelType). Define the channel type for the output. PatchClassifierParams.Builder; outputClasses(Map<Integer,PathClass> outputClasses). Define the classifications for the output as a map. PatchClassifierParams.Builder; outputClasses(PathClass... outputClasses). Define the classifications for the output as an array. PatchClassifierParams.Builder; outputClassNames(String... outputClasses). Define the classifications for the output as an array of classification names. PatchClassifierParams.Builder; outputClassNames(Map<Integer,String> outputClasses). Define the classifications for the output as a map with string values. PatchClassifierParams.Builder; patchSize(int patchSize). Define the requested square patch size. PatchClassifierParams.Builder; patchSize(int patchWidth,; int patchHeight). Define the requested patch size. PatchClassifierParams.Builder; postprocessing(Collection<? extends ImageOp> postprocessingOps). Define the postprocessing steps from a collection. PatchClassifierParams.Builder; postprocessing(ImageOp... postprocessingOps). Define the postprocessing steps from an array. PatchClassifierParams.Builder; prediction(DnnModel model,; Padding padding,; String... outputNames). Define the DNN to be used for prediction, to be applied after preprocessing ; and before postprocessing. PatchClassifierParams.Builder; prediction(ImageOp predictionOp). Define the prediction image op, to be applied after preprocessing ; and before postprocessing. PatchClassifierParams.Builder; preprocessing(Collection<? extends ImageOp> preprocessingOps). Define the preprocessing steps from a collection. PatchClassifierParams.Builder; preprocessing(ImageOp... preprocessingOps). Define the preprocessing steps from an array. Methods inherited from class java.lang",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html:2529,patch,patchSize,2529,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,3,['patch'],"['patchHeight', 'patchSize', 'patchWidth']"
Deployability,"n RGB image determined by transforming the input image using the specified channels. getTransformedValueAsString; public String getTransformedValueAsString(BufferedImage img,; int x,; int y); Get a string representation of a transformed pixel value, using the currently-selected channels. Parameters:; img - image providing the value; x - x-coordinate of the pixel; y - y-coordinate of the pixels; Returns:; a String representation of the pixel's transformed value. autoSetDisplayRange; public void autoSetDisplayRange(ChannelDisplayInfo info); Automatically set the display range for a channel, using the default saturation defined in PathPrefs.autoBrightnessContrastSaturationPercentProperty(). Parameters:; info - channel to update. autoSetDisplayRange; public void autoSetDisplayRange(ChannelDisplayInfo info,; double saturation); Automatically set the display range for a channel. Parameters:; info - channel to update; saturation - proportion of pixels that may be saturated, i.e. have the max/min display values (between 0.0 and 1.0). getHistogram; public Histogram getHistogram(ChannelDisplayInfo info); Returns a histogram for a ChannelInfo, or none if no histogram is available (e.g. the channel is RGB). Parameters:; info - ; Returns:. toJSON; public String toJSON(boolean prettyPrint); Create a JSON representation of the main components of the current display. Parameters:; prettyPrint - ; Returns:. isCompatible; public boolean isCompatible(ImageDisplay display); Check if an image display is 'compatible' with this one.; Compatible means that they have the same number of channels, and the same channel names.; This may be used p. Parameters:; display - ; Returns:. updateFromDisplay; public boolean updateFromDisplay(ImageDisplay display); Update the current display based upon a different display.; This only makes changes if isCompatible(ImageDisplay) returns true.; ; This method exists to make it easier to sync display settings across viewers. Parameters:; display - ; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/ImageDisplay.html:15531,update,updateFromDisplay,15531,javadoc/docs/qupath/lib/display/ImageDisplay.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/ImageDisplay.html,2,['update'],['updateFromDisplay']
Deployability,"n class qupath.lib.gui.scripting.DefaultScriptEditor;  ; pasteAndEscapeAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; pasteFromClipboard(QuPathGUI, boolean) - Static method in class qupath.lib.gui.commands.Commands. Attempt to paste objects from the system clipboard to the current image, if available; ; otherwise, check for text on the clipboard and paste it into a new script editor tab. pasteFromClipboard(ScriptEditorControl<?>, boolean) - Static method in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; PatchClassifierParams - Class in qupath.opencv.ml. Parameters required to build a classifier that operates on an image patch. PatchClassifierParams.Builder - Class in qupath.opencv.ml. Builder class to create PatchClassifierParams. patchSize(int) - Method in class qupath.opencv.ml.PatchClassifierParams.Builder. Define the requested square patch size. patchSize(int, int) - Method in class qupath.opencv.ml.PatchClassifierParams.Builder. Define the requested patch size. PathAnnotationObject - Class in qupath.lib.objects. An annotation PathObject. PathAnnotationObject() - Constructor for class qupath.lib.objects.PathAnnotationObject. Default constructor. PathCellObject - Class in qupath.lib.objects. A subclass of a PathDetectionObject, which also supports storing an (optional) extra ROI to represent ; the cell nucleus. PathCellObject() - Constructor for class qupath.lib.objects.PathCellObject. Default constructor. PathClass - Class in qupath.lib.objects.classes. Representation of an object's classification - which can be defined using any unique string; identifier (e.g. PathClass.StandardPathClasses - Class in qupath.lib.objects.classes. Enum representing standard classifications. PathClassFactory - Class in qupath.lib.objects.classes. Deprecated.; since v0.4.0 in favor of methods added to PathClass directly. PathClassFactory.StandardPathClasses - Enum Class in qupath.lib.objects.classes. Deprecated.; Enum representing standard classif",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:751652,patch,patch,751652,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,"n interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get the scaled length, for use with calibrated pixel sizes. Specified by:; getScaledLength in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getLength(). getNumPoints; public int getNumPoints(); Returns 4 (since the ellipse is defined by its bounding box).; Note this behavior may change. Specified by:; getNumPoints in interface ROI; Returns:. duplicate; @Deprecated; public ROI duplicate(); Deprecated.; Description copied from interface: ROI; Create a duplicate of the ROI.; ; This method is deprecated, since ROIs are (or are moving towards being) immutable... making it pointless to duplicate them. Specified by:; duplicate in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:6316,update,updatePlane,6316,javadoc/docs/qupath/lib/roi/EllipseROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html,2,['update'],['updatePlane']
Deployability,"n links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.analysis.features; Class HaralickFeatureComputer. java.lang.Object; qupath.lib.analysis.features.HaralickFeatureComputer. public class HaralickFeatureComputer; extends Object; Static methods for computing Haralick texture features. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; HaralickFeatureComputer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static HaralickFeatures; measureHaralick(SimpleImage ip,; SimpleImage bpMask,; int nBins,; double minValue,; double maxValue,; int d). Compute mean Haralick features from a SimpleImage, with optional masking. static CoocurranceMatrices; updateCooccurrenceMatrices(CoocurranceMatrices matrices,; SimpleImage ip,; SimpleImage bpMask,; int nBins,; double minValue,; double maxValue,; int d). Update existing CoocurranceMatrices with the values in a SimpleImage. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. HaralickFeatureComputer; public HaralickFeatureComputer(). Method Details. measureHaralick; public static HaralickFeatures measureHaralick(SimpleImage ip,; SimpleImage bpMask,; int nBins,; double minValue,; double maxValue,; int d); Compute mean Haralick features from a SimpleImage, with optional masking. Parameters:; ip - input image; bpMask - binary mask (may be null); nBins - number of bins in co-occurrence matrix; minValue - minimum value for binning in the co-occurrence matrix; maxValue - maximum value for binning in the co-occurrence matrix; d - separation between pixels considered adjacent, usually 1; Returns:. updateCooccurrenceMatrices; public static Coocurrance",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/features/HaralickFeatureComputer.html:1040,update,updateCooccurrenceMatrices,1040,javadoc/docs/qupath/lib/analysis/features/HaralickFeatureComputer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/features/HaralickFeatureComputer.html,1,['update'],['updateCooccurrenceMatrices']
Deployability,"n(PixelCalibration cal). Define the input resolution using a pixel calibration object. PatchClassifierParams.Builder; inputResolution(PixelCalibration cal,; double downsample). Define the input resolution using a pixel calibration and a scaling factor. PatchClassifierParams.Builder; outputChannelType(ImageServerMetadata.ChannelType channelType). Define the channel type for the output. PatchClassifierParams.Builder; outputClasses(Map<Integer,PathClass> outputClasses). Define the classifications for the output as a map. PatchClassifierParams.Builder; outputClasses(PathClass... outputClasses). Define the classifications for the output as an array. PatchClassifierParams.Builder; outputClassNames(String... outputClasses). Define the classifications for the output as an array of classification names. PatchClassifierParams.Builder; outputClassNames(Map<Integer,String> outputClasses). Define the classifications for the output as a map with string values. PatchClassifierParams.Builder; patchSize(int patchSize). Define the requested square patch size. PatchClassifierParams.Builder; patchSize(int patchWidth,; int patchHeight). Define the requested patch size. PatchClassifierParams.Builder; postprocessing(Collection<? extends ImageOp> postprocessingOps). Define the postprocessing steps from a collection. PatchClassifierParams.Builder; postprocessing(ImageOp... postprocessingOps). Define the postprocessing steps from an array. PatchClassifierParams.Builder; prediction(DnnModel model,; Padding padding,; String... outputNames). Define the DNN to be used for prediction, to be applied after preprocessing ; and before postprocessing. PatchClassifierParams.Builder; prediction(ImageOp predictionOp). Define the prediction image op, to be applied after preprocessing ; and before postprocessing. PatchClassifierParams.Builder; preprocessing(Collection<? extends ImageOp> preprocessingOps). Define the preprocessing steps from a collection. PatchClassifierParams.Builder; preprocessing(ImageOp",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html:2432,patch,patchSize,2432,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,2,['patch'],['patchSize']
Deployability,"n. public class ProcessingExtension; extends Object; implements QuPathExtension; General-purpose processing and machine learning commands. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; class ; ProcessingExtension.ObjectClassificationCommands;  ; static class ; ProcessingExtension.OpenCVCommands. Commands based on OpenCV. class ; ProcessingExtension.OtherCommands;  ; class ; ProcessingExtension.PixelClassificationCommands;  . Constructor Summary; Constructors. Constructor; Description; ProcessingExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. Version; getVersion(). Get the version of the current extension. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ProcessingExtension; public ProcessingExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/process/gui/ProcessingExtension.html:1476,install,installExtension,1476,javadoc/docs/qupath/process/gui/ProcessingExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/process/gui/ProcessingExtension.html,1,['install'],['installExtension']
Deployability,"n.Action; INFO;  ; final org.controlsfx.control.action.Action; LICENSE;  ; final org.controlsfx.control.action.Action; QUPATH_STARTUP;  ; final org.controlsfx.control.action.Action; SEP_1;  ; final org.controlsfx.control.action.Action; SEP_2;  ; final org.controlsfx.control.action.Action; SEP_3;  ; final org.controlsfx.control.action.Action; SOURCE;  ; final org.controlsfx.control.action.Action; UPDATE;  . Constructor Summary; Constructors. Constructor; Description; Actions();  . Method Summary. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. QUPATH_STARTUP; @ActionConfig(""Action.Help.welcome""); public final org.controlsfx.control.action.Action QUPATH_STARTUP. HELP_VIEWER; public final org.controlsfx.control.action.Action HELP_VIEWER. SEP_1; public final org.controlsfx.control.action.Action SEP_1. DOCS; @ActionConfig(""Action.Help.docs""); public final org.controlsfx.control.action.Action DOCS. DEMOS; @ActionConfig(""Action.Help.video""); public final org.controlsfx.control.action.Action DEMOS. UPDATE; @ActionConfig(""Action.Help.updates""); public final org.controlsfx.control.action.Action UPDATE. SEP_2; public final org.controlsfx.control.action.Action SEP_2. CITE; @ActionConfig(""Action.Help.cite""); public final org.controlsfx.control.action.Action CITE. BUGS; @ActionConfig(""Action.Help.issues""); public final org.controlsfx.control.action.Action BUGS. FORUM; @ActionConfig(""Action.Help.forum""); public final org.controlsfx.control.action.Action FORUM. SOURCE; @ActionConfig(""Action.Help.source""); public final org.controlsfx.control.action.Action SOURCE. SEP_3; public final org.controlsfx.control.action.Action SEP_3. LICENSE; @ActionConfig(""Action.Help.license""); public final org.controlsfx.control.action.Action LICENSE. INFO; @ActionConfig(""Action.Help.systemInfo""); public final org.controlsfx.control.action.Action INFO. Constructor Details. Actions; public Actions(). ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/menus/HelpMenuActions.Actions.html:2164,update,updates,2164,javadoc/docs/qupath/lib/gui/actions/menus/HelpMenuActions.Actions.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/menus/HelpMenuActions.Actions.html,1,['update'],['updates']
Deployability,"n.NormalizationType - Enum Class in qupath.opencv.tools. Local normalization type. LocalNormalization.SmoothingScale - Class in qupath.opencv.tools. 2D or 3D Gaussian scale. locateFile(String) - Static method in class qupath.lib.gui.scripting.QPEx. Locate a specified file based upon its name or path, with a search depth of 4. locateFile(String) - Static method in class qupath.lib.scripting.QP. Locate a specified file based upon its name or path, with a search depth of 4. locateFile(String, int) - Static method in class qupath.lib.gui.scripting.QPEx. Locate a specified file based upon its name or path. locateFile(String, int) - Static method in class qupath.lib.scripting.QP. Locate a specified file based upon its name or path. locateFile(String, int, Path...) - Static method in class qupath.lib.io.UriUpdater. Attempt to update a file using the specified search paths. locateFile(URI, int, Path...) - Static method in class qupath.lib.io.UriUpdater. Attempt to update a URI to find an existing file using the specified search paths. LOCATION - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; locationFontSize - Variable in class qupath.lib.gui.panes.PreferencePane.ViewerPreferences;  ; locationFontSizeProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Preferred font size for the location text in the viewer. locationUpdated - Variable in class qupath.lib.gui.viewer.QuPathViewer. Flag used to indicate that the visible region in the viewer has changed. LOCK_SELECTED_OBJECTS - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.LockActions;  ; lockActions - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.Actions;  ; LockActions() - Constructor for class qupath.lib.gui.actions.menus.ObjectsMenuActions.LockActions;  ; lockObjects(PathObjectHierarchy, Collection<? extends PathObject>) - Static method in class qupath.lib.objects.PathObjectTools. Set specified objects to be 'locked'. lockSelectedObjects(PathO",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:656876,update,update,656876,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"nPane; extends Object; implements PathObjectSelectionListener, ChangeListener<ImageData<BufferedImage>>, PathObjectHierarchyListener; Component for displaying annotations within the active image.; ; Also shows the PathClass list. Author:; Pete Bankhead. Property Summary; Properties. Type; Property; Description; BooleanProperty; disableUpdates. Property that may be used to prevent updates on every hierarchy or selection change event. Constructor Summary; Constructors. Constructor; Description; AnnotationPane(QuPathGUI qupath). Constructor. AnnotationPane(QuPathGUI qupath,; ObservableValue<ImageData<BufferedImage>> imageDataProperty). Constructor. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; changed(ObservableValue<? extends ImageData<BufferedImage>> source,; ImageData<BufferedImage> imageDataOld,; ImageData<BufferedImage> imageDataNew);  ; BooleanProperty; disableUpdatesProperty(). Property that may be used to prevent updates on every hierarchy or selection change event. Pane; getPane(). Get the pane for display. void; hierarchyChanged(PathObjectHierarchyEvent event). Notify listeners of a change in the hierarchy or its objects. void; selectedPathObjectChanged(PathObject pathObjectSelected,; PathObject previousObject,; Collection<PathObject> allSelected). Fired when the selected objects have changed. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. disableUpdates; public BooleanProperty disableUpdatesProperty; Property that may be used to prevent updates on every hierarchy or selection change event.; This can be used to improve performance by preventing the list being updated even when ; it is not visible to the user. See Also:. disableUpdatesProperty(). Constructor Details. AnnotationPane; public AnnotationPane(QuPathGUI qupath); Constructor. Parameters:; qupath - current QuPath instance. AnnotationP",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html:1595,update,updates,1595,javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/AnnotationPane.html,1,['update'],['updates']
Deployability,"nRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource. Update the specified URIs. updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.DnnObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVDnn;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVModelObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.opencv.ops.ImageOp. Default implementation makes no changes; classes should override this if necessary. UpdateUrisCommand<T> - Class in qupath.lib.gui.commands. Fix broken URIs by using relative paths or prompting the user to select files. updateZ(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated z value. updatingConstrainingObjects(QuPathViewer, double, double, Collection<PathObject>) - Method in class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler. New annotations can be constrained while they are being drawn, to avoid overlaps with existing annotations; or to ensure they are drawn within a parent annotation. updatingConstrainingObjects(QuPathViewer, double, double, Collection<PathObject>) - Method in class qupath.lib.gui.viewer.tools.handlers.MoveToolEventHandler. New annota",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1068392,update,updateURIs,1068392,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateURIs']
Deployability,"nal Comparator<Version> COMPARATOR_MAJOR_MINOR; Compare major then minor versions. COMPARATOR_MAJOR_MINOR_PATCH; public static final Comparator<Version> COMPARATOR_MAJOR_MINOR_PATCH; Compare major then minor then patch versions (ignoring suffixes). COMPARATOR_FULL; public static final Comparator<Version> COMPARATOR_FULL; Compare full version, including any suffixes. UNKNOWN; public static final Version UNKNOWN; Constant representing any unknown version. Method Details. getMajor; public int getMajor(); Get the major version number (X.0.0). Returns:. getMinor; public int getMinor(); Get the minor version number (0.X.0). Returns:. getPatch; public int getPatch(); Get the patch version number (0.0.X). Returns:. getSuffix; public String getSuffix(); Get the (optional) suffix, which may be appended at the end of the version ; number to indicate a pre-release (0.0.0-X). Returns:. hasSuffix; public boolean hasSuffix(); Returns true if the version has a suffix, which typically indicates that it ; does not refer to a final stable version. Returns:. toString; public String toString(). Overrides:; toString in class Object. parse; public static Version parse(String versionString); throws IllegalArgumentException; Parse a Version object representing a semantic version number from a String.; ; The version should be in the form x.y.z or x.y.z-additional, where additional ; should be a dot-separated patch version identifier. In the case that it is hyphen-separated, the hyphens will ; be replaced by dots. Parameters:; versionString - the version String to be parsed; Returns:; a Version parsed from this string, or UNKNOWN if the string is null or blank.; Throws:; IllegalArgumentException - if no version could be parsed from the String. compareTo; public int compareTo(Version o). Specified by:; compareTo in interface Comparable<Version>. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html:4025,patch,patch,4025,javadoc/docs/qupath/lib/common/Version.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html,1,['patch'],['patch']
Deployability,"nded for multiple z-slices and timepoints. findRegionalMaxima(ImageProcessor, float, boolean) - Static method in class qupath.imagej.processing.MorphologicalReconstruction. Find regional maxima using morphological reconstruction. findRegionalMaxima(Mat) - Static method in class qupath.opencv.tools.OpenCVTools. Get the regional maxima within a Mat, providing the output as a labeled image. finishTranslation() - Method in class qupath.lib.roi.RoiEditor. Notify the editor that translation should end. fireHierarchyChangedEvent(Object) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating the hierarchy structure has changed. fireHierarchyChangedEvent(Object, PathObject) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. fireHierarchyUpdate() - Static method in class qupath.lib.scripting.QP. Trigger an update for the current hierarchy. fireHierarchyUpdate(PathObjectHierarchy) - Static method in class qupath.lib.scripting.QP. Trigger an update for the specified hierarchy. fireImageDataChanged(ImageData<BufferedImage>, ImageData<BufferedImage>) - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; fireObjectClassificationsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object classifications have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectsChangedEvent(Object, Collection<? extends",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:309049,update,update,309049,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"ne(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1065435,update,updatePlaneRecursive,1065435,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updatePlaneRecursive']
Deployability,"ner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and opti",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1561,update,updated,1561,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,1,['update'],['updated']
Deployability,"ng box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getShape; public Shape getShape(); throws UnsupportedOperationException; It is not possible to convert a PointROI to a java.awt.Shape.; throws UnsupportedOperationException. Specified by:; getShape in interface ROI; Returns:; Throws:; UnsupportedOperationException. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html:8130,update,updatePlane,8130,javadoc/docs/qupath/lib/roi/PointsROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PointsROI.html,2,['update'],['updatePlane']
Deployability,"nherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ImageJMacroRunner; public ImageJMacroRunner(QuPathGUI qupath); Constructor. Parameters:; qupath - QuPath instance where the command should be installed. Method Details. getName; public String getName(); Description copied from interface: PathPlugin; Get the name of the plugin for display.; ; This should be descriptive and, above all, short - as it may be used for menu item names & dialog box titles. Returns:. getDescription; public String getDescription(); Description copied from interface: PathPlugin; Get a brief description of the plugin's purpose & operation.; ; If no description is provided, this may return null. Returns:. runPlugin; public boolean runPlugin(TaskRunner runner,; ImageData<BufferedImage> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<BufferedImage>; Overrides:; runPlugin in class AbstractPlugin<BufferedImage>; Parameters:; runner - ; arg - ; Returns:. parseArgument; protected boolean parseArgument(ImageData<BufferedImage> imageData,; String arg); Description copied from class: AbstractPlugin; Parse the input argument, returning 'true' if the argument is valid and it's possible to run the plugin.; ; This is called from within runPlugin.; If it returns 'true', getTasks will be called and then runTasks will submit these to the plugin runner to run.; If it returns 'false', runPlugin will immediately abort and return false as well.; ; Since this could result in some internal variables changed (e.g. a ParameterList), implementing classes can't; be assumed to be thread-safe; plugins should be created and called from a single thread, although they may use; mul",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html:3118,update,update,3118,javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/ImageJMacroRunner.html,1,['update'],['update']
Deployability,"nitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. awaitCompletion; protected void awaitCompletion(); Await the completion of currently-running tasks, notifying any listener if necessary. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or Sw",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:2535,update,update,2535,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,1,['update'],['update']
Deployability,"noring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static method in class qupath.lib.analysis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriResource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. C",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1066351,update,updateRGBAdditive,1066351,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateRGBAdditive']
Deployability,"nput resolution using a pixel calibration object. PatchClassifierParams.Builder; inputResolution(PixelCalibration cal,; double downsample). Define the input resolution using a pixel calibration and a scaling factor. PatchClassifierParams.Builder; outputChannelType(ImageServerMetadata.ChannelType channelType). Define the channel type for the output. PatchClassifierParams.Builder; outputClasses(Map<Integer,PathClass> outputClasses). Define the classifications for the output as a map. PatchClassifierParams.Builder; outputClasses(PathClass... outputClasses). Define the classifications for the output as an array. PatchClassifierParams.Builder; outputClassNames(String... outputClasses). Define the classifications for the output as an array of classification names. PatchClassifierParams.Builder; outputClassNames(Map<Integer,String> outputClasses). Define the classifications for the output as a map with string values. PatchClassifierParams.Builder; patchSize(int patchSize). Define the requested square patch size. PatchClassifierParams.Builder; patchSize(int patchWidth,; int patchHeight). Define the requested patch size. PatchClassifierParams.Builder; postprocessing(Collection<? extends ImageOp> postprocessingOps). Define the postprocessing steps from a collection. PatchClassifierParams.Builder; postprocessing(ImageOp... postprocessingOps). Define the postprocessing steps from an array. PatchClassifierParams.Builder; prediction(DnnModel model,; Padding padding,; String... outputNames). Define the DNN to be used for prediction, to be applied after preprocessing ; and before postprocessing. PatchClassifierParams.Builder; prediction(ImageOp predictionOp). Define the prediction image op, to be applied after preprocessing ; and before postprocessing. PatchClassifierParams.Builder; preprocessing(Collection<? extends ImageOp> preprocessingOps). Define the preprocessing steps from a collection. PatchClassifierParams.Builder; preprocessing(ImageOp... preprocessingOps). Define the pre",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html:2486,patch,patch,2486,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,1,['patch'],['patch']
Deployability,"nstant; Description; EXTENSIONS_ONLY. Check for extensions on GitHub only (not new QuPath releases). NONE. Don't check for any updates automatically. QUPATH_AND_EXTENSIONS. Check for QuPath and extensions on GitHub. QUPATH_ONLY. Check for QuPath updates only. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static PathPrefs.AutoUpdateType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathPrefs.AutoUpdateType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. QUPATH_ONLY; public static final PathPrefs.AutoUpdateType QUPATH_ONLY; Check for QuPath updates only. QUPATH_AND_EXTENSIONS; public static final PathPrefs.AutoUpdateType QUPATH_AND_EXTENSIONS; Check for QuPath and extensions on GitHub. EXTENSIONS_ONLY; public static final PathPrefs.AutoUpdateType EXTENSIONS_ONLY; Check for extensions on GitHub only (not new QuPath releases). NONE; public static final PathPrefs.AutoUpdateType NONE; Don't check for any updates automatically. Method Details. values; public static PathPrefs.AutoUpdateType[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array containing the constants of this enum class, in the order they are declared. valueOf; public static PathPrefs.AutoUpdateType valueOf(String name); Returns the enum constant of this class with the specified name.; The string must match exactly an identifier used to declare an; enum constant in this class. (Extraneous whitespace characters are ; not permitted.). Parameters:; name - the name of the enum c",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html:2001,update,updates,2001,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html,1,['update'],['updates']
Deployability,"nstr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.ml; Class PatchClassifierParams. java.lang.Object; qupath.opencv.ml.PatchClassifierParams. public class PatchClassifierParams; extends Object; Parameters required to build a classifier that operates on an image patch.; ; This is typically used to create a PixelClassifier.; It can also be used to create an ObjectClassifier that takes image patches as input ; (rather that features extracted from object ROIs or measurement lists). Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; PatchClassifierParams.Builder. Builder class to create PatchClassifierParams. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static PatchClassifierParams.Builder; builder(). Create a builder to generate new patch classifier params. static PatchClassifierParams.Builder; builder(PatchClassifierParams params). Create a builder to generate new patch classifier params, ; initialized with the values from an existing parameter object. static PixelClassifier; buildPixelClassifier(PatchClassifierParams params). Build a pixel classifier using these parameters. Padding; getHalo(). Get the 'halo' around the output. List<ColorTransforms.ColorTransform>; getInputChannels(). Get the channels to extract from the image as input to the model. PixelCalibration; getInputResolution(). Get the requested input resolution for the image. ImageServerMetadata.ChannelType; getOutputChannelType(). Get the requested output channel type. Map<Integer,PathClass>; getOutputClasses(). Get the classifications for the output. int; getPatchHeight(). Get the height of a patch, in pixels. int; getPatchWidth(). Get the width of a patch, in pixels. List<ImageOp>; getPostprocessing(). Get any postprocessing steps that should ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html:1197,patch,patch,1197,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,1,['patch'],['patch']
Deployability,"nstructors. Constructor; Description; PathPrefs();  . Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static DoubleProperty; allredMinPercentagePositiveProperty(). The minimum positive percentage of cells for Allred proportion score to be non-zero. static BooleanProperty; alwaysPaintSelectedObjectsProperty(). Always paint selected objects in the viewer, even if the opacity setting is 0. static DoubleProperty; annotationStrokeThicknessProperty(). Preferred stroke thickness to use when drawing annotation ROIs. static DoubleProperty; autoBrightnessContrastSaturationPercentProperty(). Controls percentage of saturated pixels to apply when automatically setting brightness/contrast. static ObjectProperty<PathClass>; autoSetAnnotationClassProperty(). Classification that should automatically be applied to all new annotations. static ObjectProperty<PathPrefs.AutoUpdateType>; autoUpdateCheckProperty(). Check for updates when launching QuPath, if possible. static BooleanProperty; brushCreateNewObjectsProperty(). Create new objects by default when drawing with the Brush tool. static IntegerProperty; brushDiameterProperty(). Default brush tool diameter, in pixels. static BooleanProperty; brushScaleByMagProperty(). Optionally scale the default brush tool diameter by the viewer magnification (downsample value). static BooleanProperty; clipROIsForHierarchyProperty(). Request ROIs to be clipped and inserted as the right place in the hierarchy when drawing ; (to prevent overlapping ROIs being created accidentally). static IntegerProperty; colorDefaultObjectsProperty(). The default color used to display objects of any type, where a default has not otherwise been specified. static IntegerProperty; colorSelectedObjectProperty(). The default color used to display selected objects. static IntegerProperty; colorTileProperty(). The default color used to display tile objects. static IntegerProperty; colorTMAMissingProperty()",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html:11352,update,updates,11352,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,1,['update'],['updates']
Deployability,"nt has a value above the threshold. aboveEquals(String) - Method in class qupath.lib.classifiers.object.ObjectClassifiers.ClassifyByMeasurementBuilder. Set the classification (by name) for objects for which the specified measurement has a value above or equal to the threshold. aboveEquals(PathClass) - Method in class qupath.lib.classifiers.object.ObjectClassifiers.ClassifyByMeasurementBuilder. Set the classification for objects for which the specified measurement has a value above or equal to the threshold. abs(Mat) - Static method in class qupath.opencv.tools.GroovyCV. Compute the absolute value of all elements in an array. AbstractDetectionPlugin<T> - Class in qupath.lib.plugins. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractDetectionPlugin() - Constructor for class qupath.lib.plugins.AbstractDetectionPlugin;  ; AbstractDnnModel<T> - Class in qupath.opencv.dnn. Wrapper for a deep learning model in a pipeline using OpenCV. AbstractDnnModel() - Constructor for class qupath.opencv.dnn.AbstractDnnModel;  ; AbstractImageOverlay - Class in qupath.lib.gui.viewer.overlays. Abstract PathOverlay with additional properties relevant when drawing BufferedImages. AbstractImageOverlay(OverlayOptions) - Constructor for class qupath.lib.gui.viewer.overlays.AbstractImageOverlay;  ; AbstractImageRenderer - Class in qupath.lib.gui.images.stores. Abstract ImageRenderer, which adds a timestamp variable. AbstractImageRenderer() - Constructor for class qupath.lib.gui.images.stores.AbstractImageRenderer;  ; AbstractImageServer<T> - Class in qupath.lib.images.servers. Abstract implementation of ImageServer providing some common functionality. AbstractImageServer(Class<T>) - Constructor for class qupath.lib.images.servers.AbstractImageServer;  ; AbstractInteractivePlugin<T> - Class in qupath.lib.plugins. Abstract class to help with implementing an interactive plugin. AbstractInteractivePlugin() - C",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1712,pipeline,pipeline,1712,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['pipeline'],['pipeline']
Deployability,"nterface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getLength; public double getLength(); Description copied from interface: ROI; Get ROI length.; This is defined as; ; perimeter in the case of area ROIs; total length of line segments in the case of line or polyline ROIs; 0 in the case of point ROIs. Specified by:; getLength in interface ROI; Returns:; See Also:. ROI.getScaledLength(double, double). getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.getArea(). getScaledLength; public double getScaledLength(double p",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolygonROI.html:6988,update,updatePlane,6988,javadoc/docs/qupath/lib/roi/PolygonROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolygonROI.html,2,['update'],['updatePlane']
Deployability,"nu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; script - the Groovy script to run; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, File). installImageDataCommand; public MenuItem installImageDataCommand(String menuPath,; Consumer<ImageData<BufferedImage>> command); Install a new command in QuPath that takes the current ImageData as input.; The command will only be enabled when an image is available. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; command - the command to run; Returns:; the MenuItem for the command; See Also:. installCommand(String, Runnable). installCommand; public MenuItem installCommand(String menuPath,; Runnable runnable); Install a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; runnable - the command to run; Returns:; the MenuItem for the command. This can be further customized if needed. runScript; public Object runScript(File file,; String script); throws ScriptException,; IllegalArgumentException; Convenience method to execute a script.; Either a script file or the text of the script must be provided, or both.; ; If only the script text is given, the language is assumed to be Groovy. Parameters:; file - the file containing the script to run; script - the script to run; Returns:; result of the script execution; Throws:; ScriptException; IllegalArgumentExcept",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:22381,install,installCommand,22381,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['install'],['installCommand']
Deployability,"nvelopToRegion; public static ImageRegion envelopToRegion(Envelope env,; int z,; int t); Convert an Envelope to an ImageRegion. Parameters:; env - envelop; z - z index for the region (default is 0); t - timepoint for the region (default is 0); Returns:; the smallest ImageRegion that contains the specified envelop. attemptOperation; public static Geometry attemptOperation(Geometry input,; Function<Geometry,Geometry> fun); Attempt to apply a function to a geometry, returning the input unchanged if there was an exception.; ; The purpose of this is to make it easier to apply non-essential functions that might fail (e.g. with a TopologyException ; and to recover easily. Parameters:; input - the input geometry; fun - the function to (attempt) to apply; Returns:; the new geometry if the function succeeded, otherwise the original geometry. roundCoordinates; public static Geometry roundCoordinates(Geometry geometry); Round coordinates in a Geometry to integer values. Parameters:; geometry - the updated Geometry; Returns:. constrainToBounds; public static Geometry constrainToBounds(Geometry geometry,; double x,; double y,; double width,; double height); Compute the intersection of a Geometry and a specified bounding box.; The original Geometry may be returned unchanged if no changes are required to fit within the bounds. Parameters:; geometry - the updated Geometry; x - ; y - ; width - ; height - ; Returns:. createRectangle; public static Geometry createRectangle(double x,; double y,; double width,; double height); Create a rectangular Geometry for the specified bounding box. Parameters:; x - ; y - ; width - ; height - ; Returns:. geometryToROI; public static ROI geometryToROI(Geometry geometry,; ImagePlane plane); Convert a JTS Geometry to a QuPath ROI. Parameters:; geometry - ; plane - ; Returns:. roiToGeometry; public static Geometry roiToGeometry(ROI roi); Convert to QuPath ROI to a JTS Geometry. Parameters:; roi - ; Returns:. geometryToShape; public static Shape geometry",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:6207,update,updated,6207,javadoc/docs/qupath/lib/roi/GeometryTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html,1,['update'],['updated']
Deployability,"n cal,; double downsample). Define the input resolution using a pixel calibration and a scaling factor. PatchClassifierParams.Builder; outputChannelType(ImageServerMetadata.ChannelType channelType). Define the channel type for the output. PatchClassifierParams.Builder; outputClasses(Map<Integer,PathClass> outputClasses). Define the classifications for the output as a map. PatchClassifierParams.Builder; outputClasses(PathClass... outputClasses). Define the classifications for the output as an array. PatchClassifierParams.Builder; outputClassNames(String... outputClasses). Define the classifications for the output as an array of classification names. PatchClassifierParams.Builder; outputClassNames(Map<Integer,String> outputClasses). Define the classifications for the output as a map with string values. PatchClassifierParams.Builder; patchSize(int patchSize). Define the requested square patch size. PatchClassifierParams.Builder; patchSize(int patchWidth,; int patchHeight). Define the requested patch size. PatchClassifierParams.Builder; postprocessing(Collection<? extends ImageOp> postprocessingOps). Define the postprocessing steps from a collection. PatchClassifierParams.Builder; postprocessing(ImageOp... postprocessingOps). Define the postprocessing steps from an array. PatchClassifierParams.Builder; prediction(DnnModel model,; Padding padding,; String... outputNames). Define the DNN to be used for prediction, to be applied after preprocessing ; and before postprocessing. PatchClassifierParams.Builder; prediction(ImageOp predictionOp). Define the prediction image op, to be applied after preprocessing ; and before postprocessing. PatchClassifierParams.Builder; preprocessing(Collection<? extends ImageOp> preprocessingOps). Define the preprocessing steps from a collection. PatchClassifierParams.Builder; preprocessing(ImageOp... preprocessingOps). Define the preprocessing steps from an array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass,",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html:2595,patch,patch,2595,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,1,['patch'],['patch']
Deployability,"o import TMA data for the specified image data. static void; promptToRelabelTMAGrid(ImageData<?> imageData). Prompt to relabel the core names within a TMA grid. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TMACommands; public TMACommands(). Method Details. promptToAddNoteToSelectedCores; public static void promptToAddNoteToSelectedCores(ImageData<?> imageData); Prompt to type a node to associate with the selected TMA cores. Parameters:; imageData - . promptToExportTMAData; public static void promptToExportTMAData(QuPathGUI qupath,; ImageData<BufferedImage> imageData); Prompt to export summary TMA data for a specific image to a directory. Parameters:; qupath - ; imageData - . installDragAndDropHandler; public static void installDragAndDropHandler(QuPathGUI qupath); Command to install a drag and drop file handler for exported TMA data. Parameters:; qupath - QuPath instance to which the handler should be installed. promptToImportTMAData; public static void promptToImportTMAData(ImageData<?> imageData); Prompt to import TMA data for the specified image data. Parameters:; imageData - the image data for which the TMA data should be imported. promptToRelabelTMAGrid; public static void promptToRelabelTMAGrid(ImageData<?> imageData); Prompt to relabel the core names within a TMA grid. Parameters:; imageData - image containing the TMA grid. promptToDeleteTMAGridRow; public static boolean promptToDeleteTMAGridRow(ImageData<?> imageData); Prompt to delete a row from a TMA grid.; The row is identified as being the one that contains the current selected TMA core, ; or the core that contains the selected object.; ; After this command is run, the user will be prompted to relabel the TMA grid. Parameters:; imageData - the image data containing the TMA grid; Returns:; true if the TMA grid was modified, false otherwise (e.g. if the user cancelled). promptToDeleteTMAGridCo",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/TMACommands.html:3308,install,installed,3308,javadoc/docs/qupath/lib/gui/commands/TMACommands.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/TMACommands.html,1,['install'],['installed']
Deployability,"o red, green and blue values, ; into a 3-element int array. UNSET - Enum constant in enum class qupath.lib.images.ImageData.ImageType. Image type has not been set. unzippedExtensions(Path, String...) - Static method in class qupath.lib.io.PathIO. Get the extension of a file, or of all entries within a zip file. UPDATE - Variable in class qupath.lib.gui.actions.menus.HelpMenuActions.Actions;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewerPlus;  ; updateAvailableStyles() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Request that the list of available styles is updated. updateBounds(double, double) - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one w",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1061880,update,updateChart,1061880,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateChart']
Deployability,"oOp(Processing) for more information. Parameters:; spec - ; Returns:. buildPatchClassifierParams; public static PatchClassifierParams buildPatchClassifierParams(qupath.bioimageio.spec.BioimageIoSpec.BioimageIoModel model,; ImageOp... inputOps); Create an instance of PatchClassifierParams from a model spec.; This encapsulates some key information QuPath needs for building a model in a way that can ; be modified and updated according to user requirements. Parameters:; model - the model spec to initialize the parameters; inputOps - optional additional preprocessing ops to apply, before any in the model spec are added; Returns:. buildPatchClassifierParams; public static PatchClassifierParams buildPatchClassifierParams(qupath.bioimageio.spec.BioimageIoSpec.BioimageIoModel modelSpec,; int preferredTileWidth,; int preferredTileHeight,; ImageOp... inputOps); Create an instance of PatchClassifierParams from a model spec.; This encapsulates some key information QuPath needs for building a model in a way that can ; be modified and updated according to user requirements. Parameters:; modelSpec - the model spec to initialize the parameters; preferredTileWidth - preferred tile width, or -1 to automatically determine this; the width will be updated based on the spec; preferredTileHeight - preferred tile height, or -1 to automatically determine this; the height will be updated based on the spec; inputOps - optional additional preprocessing ops to apply, before any in the model spec are added; Returns:. transformsToOp; public static ImageOp transformsToOp(Collection<? extends qupath.bioimageio.spec.BioimageIoSpec.Processing> transforms); Create an ImageOp that applies the specified transforms sequentially.; ; Important!; This method is experimental and subject to change in future versions.; ; Not all Bioimage Model Zoo transforms are supported ; by QuPath ops, and ops are generally per tile whereas model zoo transforms ; sometimes require global statistics (e.g. for normalization).;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/BioimageIoTools.html:3367,update,updated,3367,javadoc/docs/qupath/opencv/ml/BioimageIoTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/BioimageIoTools.html,1,['update'],['updated']
Deployability,"ocess.gui - package qupath.process.gui. General-purpose image processing and machine learning commands. qupath.process.gui.commands - package qupath.process.gui.commands. QuPath commands relevant for machine learning. qupath.process.gui.commands.density - package qupath.process.gui.commands.density. UI classes to support density maps. qupath.process.gui.commands.ml - package qupath.process.gui.commands.ml. Interfaces and helper classes for using machine learning in QuPath. qupath.process.gui.commands.ui - package qupath.process.gui.commands.ui. Reusable UI classes to support processing commands. QuPathApp - Class in qupath.lib.gui. Launcher application to start QuPath. QuPathApp() - Constructor for class qupath.lib.gui.QuPathApp;  ; QuPathExtension - Interface in qupath.lib.gui.extensions. Simple interface for QuPath extensions. QuPathGUI - Class in qupath.lib.gui. Main GUI for QuPath, written using JavaFX. qupathj - package qupathj. ImageJ plugins to install within QuPath's embedded ImageJ instance to enable exchanging ROIs and objects. QuPathPenManager - Class in qupath.lib.gui.viewer.tools. Helper class for managing pressure-sensitive input. QuPathPenManager() - Constructor for class qupath.lib.gui.viewer.tools.QuPathPenManager;  ; QuPathPenManager.PenInputManager - Interface in qupath.lib.gui.viewer.tools. Interface defining minimal behavior for a pen input device. QuPathResources - Class in qupath.lib.gui.localization. Load strings from the default resource bundle. QuPathResources() - Constructor for class qupath.lib.gui.localization.QuPathResources;  ; QuPathStyleManager - Class in qupath.lib.gui.prefs. Class to facilitate the use of different styles within QuPath. QuPathStyleManager() - Constructor for class qupath.lib.gui.prefs.QuPathStyleManager;  ; QuPathStyleManager.Fonts - Enum Class in qupath.lib.gui.prefs. Available font families. QuPathStyleManager.StyleOption - Interface in qupath.lib.gui.prefs. Interface defining a style that may be applied to QuPat",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:817246,install,install,817246,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['install']
Deployability,"odel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list o",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10659,patch,patch,10659,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); Total number of steps in the workflow. Returns:. isEmpty; public boolean isEmpty(); Returns true if the workflow does not contain any steps. Returns:. clear; public void clear(); Remove all steps, firing an update event if the workflow was not previously empty. fireWorkflowUpdatedEvent; protected void fireWorkflowUpdatedEvent(). addWorkflowListener; public void addWorkflowListener(WorkflowListener listener); Add a listener for changes to the workflow. Parameters:; listener - . removeWorkflowListener; public void removeWorkflowListener(WorkflowListener listener); ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:3466,update,update,3466,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,1,['update'],['update']
Deployability,"olation. Parameters:; img - input image to be resized; finalWidth - target output width; finalHeight - target output height; smoothInterpolate - if true, the resize method is permitted to use a smooth interpolation method.; If false, nearest-neighbor interpolation is used.; Returns:; resized image. computeUnsignedIntHistogram; public static long[] computeUnsignedIntHistogram(WritableRaster raster,; long[] counts,; WritableRaster rasterMask); Compute the full histogram for a raster containing 8-bit or 16-bit unsigned integer values. Parameters:; raster - the raster containing the data for the histogram; if not TYPE_BYTE or TYPE_USHORT an IllegalArgumentException will be thrown; counts - histogram counts; if null, a new array will be created. Its must be sufficient for the data type, i.e. 256 or 65536.; No size checking is performed, therefore if non-null it must be sufficiently large for the data type.; rasterMask - optional single-channel mask; if not null, corresponding pixels with 0 values in the mask will be skipped; Returns:; the updated histogram counts; See Also:. computeUnsignedIntHistogram(WritableRaster, long[], WritableRaster, Rectangle). computeUnsignedIntHistogram; public static long[] computeUnsignedIntHistogram(WritableRaster raster,; long[] counts,; WritableRaster rasterMask,; Rectangle bounds); Compute the full histogram for a raster containing 8-bit or 16-bit unsigned integer values, optionally restricted to a bounding rectangle. Parameters:; raster - the raster containing the data for the histogram; if not TYPE_BYTE or TYPE_USHORT an IllegalArgumentException will be thrown; counts - histogram counts; if null, a new array will be created. Its must be sufficient for the data type, i.e. 256 or 65536.; No size checking is performed, therefore if non-null it must be sufficiently large for the data type.; rasterMask - optional single-channel mask; if not null, corresponding pixels with 0 values in the mask will be skipped.; bounds - optional rectangle de",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html:10483,update,updated,10483,javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/awt/common/BufferedImageTools.html,1,['update'],['updated']
Deployability,"ollection of objects to process, based on the contents of the PluginRunner.; ; This could (for example) return the selected object, the root object, all detection objects... depending upon what the plugin does.; ; Each object this returns will be passed to addRunnableTasks to create a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; Returns:. addRunnableTasks; protected abstract void addRunnableTasks(ImageData<T> imageData,; PathObject parentObject,; List<Runnable> tasks); For a specified parent object, generate a task to run.; ; In practice, this method can be overridden to return anything/nothing if getTasks is overridden instead. Parameters:; imageData - ; parentObject - ; tasks - . runPlugin; public boolean runPlugin(TaskRunner taskRunner,; ImageData<T> imageData,; String arg); Description copied from interface: PathPlugin; Run the plugin. A PluginRunner may be provided that this plugin can use to update; the user on its progress.; ; Note: This command should block until it has completed processing. Specified by:; runPlugin in interface PathPlugin<T>; Parameters:; taskRunner - ; arg - ; Returns:. preprocess; protected void preprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called after parsing the argument String, and immediately before creating & running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . postprocess; protected void postprocess(TaskRunner taskRunner,; ImageData<T> imageData); Called immediately after running any generated tasks.; ; Does nothing by default. Parameters:; taskRunner - ; imageData - . addWorkflowStep; protected void addWorkflowStep(ImageData<T> imageData,; String arg); Add a workflow step to the ImageData indicating the argument that this plugin was run with.; ; Subclasses may override this if a better workflow step should be logged.; ; A subclass may also override this to avoid adding a ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html:5397,update,update,5397,javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractPlugin.html,1,['update'],['update']
Deployability,"ols();  . Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static Mat; blobFromImage(Mat mat). Create an OpenCV blob from a single mat. static Mat; blobFromImages(Collection<Mat> mats,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a batch of Mats with optional scaling, resizing and cropping. static Mat; blobFromImages(Mat... mats). Create an OpenCV blob from one or more mats. static Mat; blobFromImages(Mat mat,; double scaleFactor,; Size size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. static OpenCVDnn.Builder; builder(String modelPath). Initiative building and configuring an OpenCVDnn. static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Func",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:1762,patch,patch,1762,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"ols.NumpyTools. Read a all Mats from an .npy or .npz file. readAllMats(String, boolean) - Static method in class qupath.opencv.tools.NumpyTools. Read a all Mats from an .npy or .npz file, optionally squeezing singleton dimensions. readAllMats(Path) - Static method in class qupath.opencv.tools.NumpyTools. Read a all Mats from an .npy or .npz path. readAllMats(Path, boolean) - Static method in class qupath.opencv.tools.NumpyTools. Read a all Mats from an .npy or .npz path, optionally squeezing singleton dimensions; This will be a single Mat for .npy but may be multiple for .npz. readAllTiles() - Method in class qupath.lib.classifiers.pixel.PixelClassificationImageServer. Read all the tiles. readBufferedImage(RegionRequest) - Method in interface qupath.lib.images.servers.ImageServer. Deprecated.; since v0.4.0. Implementations of ImageServer should override ImageServer.readRegion(RegionRequest) instead.; This method will be removed in a future release; it exists now only to maintain compatibility with QuPath ; extensions that have not yet been updated to use the newer method. readClassifier(Path) - Static method in class qupath.lib.classifiers.object.ObjectClassifiers. Read the classifier from a file. readClassifier(Path) - Static method in class qupath.opencv.ml.pixel.PixelClassifiers. Read a standard pixel classifier from a file. readCSV(File) - Static method in class qupath.lib.io.TMAScoreImporter. Read CSV data from a file into a map connecting column headers (keys) to lists of Strings (entries). readCSV(String) - Static method in class qupath.lib.io.TMAScoreImporter. Read CSV data from a String into a map connecting column headers (keys) to lists of Strings (entries). readCSV(Scanner) - Static method in class qupath.lib.io.TMAScoreImporter. Read CSV data into a map connecting column headers (keys) to lists of Strings (entries). readExternal(ObjectInput) - Method in class qupath.lib.color.ColorDeconvolutionStains;  ; readExternal(ObjectInput) - Method in class qupat",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:820725,release,release,820725,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,2,"['release', 'update']","['release', 'updated']"
Deployability,"olutionHelper. Convert a float pixel to an optical density value using a pre-computed lookup table. makeODByLUT(int, double[]) - Static method in class qupath.lib.color.ColorDeconvolutionHelper. Convert an int pixel to an optical density value using a pre-computed lookup table. makeODLUT(double) - Static method in class qupath.lib.color.ColorDeconvolutionHelper. Create an optical density lookup table with 256 entries, normalizing to the specified background value. makeODLUT(double, int) - Static method in class qupath.lib.color.ColorDeconvolutionHelper. Create an optical density lookup table, normalizing to the specified background value. makePathInProject(String...) - Static method in class qupath.lib.scripting.QP. Build a file or directory path relative to the current project, and ensure that it exists. makeProgressMonitor() - Method in class qupath.lib.gui.TaskRunnerFX;  ; makeProgressMonitor() - Method in class qupath.lib.plugins.AbstractTaskRunner. Create a progress monitor to update the user on what is happening. makeProgressMonitor() - Method in class qupath.lib.plugins.CommandLineTaskRunner;  ; makeReplacement(URI, URI) - Method in class qupath.lib.io.UriUpdater. Add a single replacement to the replacement map. makeRGB(int, int, int) - Static method in class qupath.lib.common.ColorTools. Deprecated.; Use ColorTools.packRGB(int, int, int) or ColorTools.packClippedRGB(int, int, int) instead. makeRGB(int, int, int) - Static method in class qupath.lib.scripting.QP. Make a packed int representation of an RGB color. makeRGBA(int, int, int, int) - Static method in class qupath.lib.common.ColorTools. Deprecated.; The naming and order of arguments is misleading. The output is a packed ARGB value, ; but arguments are provided in the order red, green, blue, alpha. makeScaledRGB(int, double) - Static method in class qupath.lib.common.ColorTools. Scale the RGB channels for a color by a fixed amount. makeScaledRGBwithRangeCheck(float, float, float, ColorModel) - Static met",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:667469,update,update,667469,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"ometry input,; Function<Geometry,Geometry> fun); Attempt to apply a function to a geometry, returning the input unchanged if there was an exception.; ; The purpose of this is to make it easier to apply non-essential functions that might fail (e.g. with a TopologyException ; and to recover easily. Parameters:; input - the input geometry; fun - the function to (attempt) to apply; Returns:; the new geometry if the function succeeded, otherwise the original geometry. roundCoordinates; public static Geometry roundCoordinates(Geometry geometry); Round coordinates in a Geometry to integer values. Parameters:; geometry - the updated Geometry; Returns:. constrainToBounds; public static Geometry constrainToBounds(Geometry geometry,; double x,; double y,; double width,; double height); Compute the intersection of a Geometry and a specified bounding box.; The original Geometry may be returned unchanged if no changes are required to fit within the bounds. Parameters:; geometry - the updated Geometry; x - ; y - ; width - ; height - ; Returns:. createRectangle; public static Geometry createRectangle(double x,; double y,; double width,; double height); Create a rectangular Geometry for the specified bounding box. Parameters:; x - ; y - ; width - ; height - ; Returns:. geometryToROI; public static ROI geometryToROI(Geometry geometry,; ImagePlane plane); Convert a JTS Geometry to a QuPath ROI. Parameters:; geometry - ; plane - ; Returns:. roiToGeometry; public static Geometry roiToGeometry(ROI roi); Convert to QuPath ROI to a JTS Geometry. Parameters:; roi - ; Returns:. geometryToShape; public static Shape geometryToShape(Geometry geometry); Convert a JTS Geometry to a java.awt.Shape. Parameters:; geometry - ; Returns:. regionToGeometry; public static Geometry regionToGeometry(ImageRegion region); Convert an ImageRegion to a rectangular Geometry.; The z-position is retained, but timepoint is lost. Parameters:; region - ; Returns:. union; public static Geometry union(Collection<? exten",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html:6567,update,updated,6567,javadoc/docs/qupath/lib/roi/GeometryTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryTools.html,1,['update'],['updated']
Deployability,"on as the input object, but different ROI and ID.; Since:; v0.5.0. lockObjects; public static void lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'locked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:51942,update,update,51942,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['update'],['update']
Deployability,"on.OtherCommands;  ; class ; ProcessingExtension.PixelClassificationCommands;  . Constructor Summary; Constructors. Constructor; Description; ProcessingExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. Version; getVersion(). Get the version of the current extension. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ProcessingExtension; public ProcessingExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getVersion; public Version getVersion(); Description copied fro",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/process/gui/ProcessingExtension.html:1787,install,installExtension,1787,javadoc/docs/qupath/process/gui/ProcessingExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/process/gui/ProcessingExtension.html,2,['install'],['installExtension']
Deployability,"on;  ; LocalNormalization.LocalNormalizationType - Class in qupath.opencv.tools. Helper class to store local normalization parameters. LocalNormalization.NormalizationType - Enum Class in qupath.opencv.tools. Local normalization type. LocalNormalization.SmoothingScale - Class in qupath.opencv.tools. 2D or 3D Gaussian scale. locateFile(String) - Static method in class qupath.lib.gui.scripting.QPEx. Locate a specified file based upon its name or path, with a search depth of 4. locateFile(String) - Static method in class qupath.lib.scripting.QP. Locate a specified file based upon its name or path, with a search depth of 4. locateFile(String, int) - Static method in class qupath.lib.gui.scripting.QPEx. Locate a specified file based upon its name or path. locateFile(String, int) - Static method in class qupath.lib.scripting.QP. Locate a specified file based upon its name or path. locateFile(String, int, Path...) - Static method in class qupath.lib.io.UriUpdater. Attempt to update a file using the specified search paths. locateFile(URI, int, Path...) - Static method in class qupath.lib.io.UriUpdater. Attempt to update a URI to find an existing file using the specified search paths. LOCATION - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; locationFontSize - Variable in class qupath.lib.gui.panes.PreferencePane.ViewerPreferences;  ; locationFontSizeProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Preferred font size for the location text in the viewer. locationUpdated - Variable in class qupath.lib.gui.viewer.QuPathViewer. Flag used to indicate that the visible region in the viewer has changed. LOCK_SELECTED_OBJECTS - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.LockActions;  ; lockActions - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.Actions;  ; LockActions() - Constructor for class qupath.lib.gui.actions.menus.ObjectsMenuActions.LockActions;  ; lockObjects(PathObjectHierarchy, Collec",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:656736,update,update,656736,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"ons - Enum Class in qupath.lib.gui.tools. Default icons for QuPath commands. iconProperty() - Method in class qupath.lib.gui.viewer.tools.ExtendedPathTool;  ; iconProperty() - Method in interface qupath.lib.gui.viewer.tools.PathTool. Property giving the icon that should be used for the tool. identity() - Static method in class qupath.lib.awt.common.AffineTransforms. Create an affine transform representing the identity transform. identity() - Static method in class qupath.opencv.ops.ImageOps.Core. Create an op that returns its input unchanged. IGNORE - Enum constant in enum class qupath.lib.objects.classes.PathClassFactory.StandardPathClasses. Deprecated.; Ignore classification, indicating what should not be further measured (e.g. IGNORE - Static variable in class qupath.lib.objects.classes.PathClass.StandardPathClasses. Ignore classification, indicating what should not be further measured (e.g. IJExtension - Class in qupath.imagej.gui. QuPath extension & associated static helper methods used to support integration of ImageJ with QuPath. IJExtension() - Constructor for class qupath.imagej.gui.IJExtension;  ; IJExtension.IJExtensionCommands - Class in qupath.imagej.gui. Commands to install with the ImageJ extension. IJTools - Class in qupath.imagej.tools. Collection of static methods to help with using ImageJ with QuPath. IJTools() - Constructor for class qupath.imagej.tools.IJTools;  ; IMAGE - Enum constant in enum class qupath.lib.gui.viewer.RegionFilter.StandardRegionFilters. Accept all requests for the image where the region is non-empty. IMAGE_ROOT - Enum constant in enum class qupath.lib.objects.classes.PathClassFactory.StandardPathClasses. Deprecated.; Root object classification. IMAGE_ROOT - Static variable in class qupath.lib.objects.classes.PathClass.StandardPathClasses. Root object classification. ImageChannel - Class in qupath.lib.images.servers. The name and display color for a single image channel. imageData - Variable in class qupath.lib.gui.charts.Chart",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:584191,integrat,integration,584191,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['integrat'],['integration']
Deployability,"onsExtension.OmeTiffWriterAction;  . Constructor Summary; Constructors. Constructor; Description; BioFormatsOptionsExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns th",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:1862,install,installExtension,1862,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,2,['install'],['installExtension']
Deployability,"ontain an XYChart, adding adjustable thresholds to be displayed. ChartThresholdPane(XYChart<Number, Number>) - Constructor for class qupath.lib.gui.charts.ChartThresholdPane. Note: xAxis and yAxis must be instances of NumberAxis. ChartTools - Class in qupath.lib.gui.charts. Collection of static methods to help when working with JavaFX charts, ; and adapting these for QuPath's purposes. ChartTools() - Constructor for class qupath.lib.gui.charts.ChartTools;  ; CHECK_URIS - Variable in class qupath.lib.gui.actions.menus.FileMenuActions.ProjectActions;  ; checkExtensions(String, String...) - Static method in class qupath.lib.common.GeneralTools. Check whether a path ends with one of a number of specified extensions (case insensitive). checkForUpdate() - Static method in class qupath.lib.gui.extensions.UpdateChecker. Query the most recent QuPath release on GitHub. checkForUpdate(GitHubProject.GitHubRepo) - Static method in class qupath.lib.gui.extensions.UpdateChecker. Query the latest release from a GitHub repo. checkImageSupport(URI, String...) - Method in class qupath.imagej.images.servers.ImageJServerBuilder;  ; checkImageSupport(URI, String...) - Method in class qupath.lib.images.servers.bioformats.BioFormatsServerBuilder;  ; checkImageSupport(URI, String...) - Method in interface qupath.lib.images.servers.ImageServerBuilder. Check whether a URI is supported by this builder. checkImageSupport(URI, String...) - Method in class qupath.lib.images.servers.JsonImageServerBuilder;  ; checkImageSupport(URI, String...) - Method in class qupath.lib.images.servers.openslide.OpenslideServerBuilder;  ; checkMinVersion(String) - Static method in class qupath.lib.scripting.QP. Check whether the current QuPath version is ≥ the specified version. checkpoint() - Method in class qupath.lib.common.Timeit. Create a new checkpoint with a default name. checkpoint(String) - Method in class qupath.lib.common.Timeit. Create a new checkpoint with the specified name. checkpointAndRun(Runnable)",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:98024,release,release,98024,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['release'],['release']
Deployability,"oolManager to help with submitting tasks in other threads. ToolBar; getToolBar(). Get the main toolbar. ToolManager; getToolManager(). Get the ToolManager that handles available and selected tools. UndoRedoManager; getUndoRedoManager(). Get the UndoRedoManager, which can be useful if needing to clear it in cases where available memory is low. static Version; getVersion(). Get the current QuPath version. QuPathViewer; getViewer(). Get the currently active viewer. ViewerActions; getViewerActions(). Get the associations associated with QuPath image viewers. ViewerManager; getViewerManager(). Get the viewer manager, which gives access to all the viewers available within this QuPath instance. ReadOnlyObjectProperty<ImageData<BufferedImage>>; imageDataProperty(). Read-only property containing the image open within the currently-active viewer. void; installActions(Collection<? extends org.controlsfx.control.action.Action> actions). Install the specified actions. MenuItem; installCommand(String menuPath,; Runnable runnable). Install a new command in QuPath. MenuItem; installGroovyCommand(String menuPath,; File file). Install a Groovy script as a new command in QuPath. MenuItem; installGroovyCommand(String menuPath,; String script). Install a Groovy script as a new command in QuPath. MenuItem; installImageDataCommand(String menuPath,; Consumer<ImageData<BufferedImage>> command). Install a new command in QuPath that takes the current ImageData as input. boolean; isReadOnly(). Query whether QuPath is in 'read-only' mode. boolean; isStandalone(). Query whether this is a standalone QuPathGUI instance, as flagged during startup. static void; launchInstanceFromSwing(). Static method to launch QuPath from within a Swing/AWT application. Object; lookupAccelerator(String combo). Get the action or menu item associated with an accelerator. Object; lookupAccelerator(KeyCombination combo). Get the action or menu item associated with an key combination. org.controlsfx.control.action.Action",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:6469,install,installCommand,6469,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['install'],['installCommand']
Deployability,"opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; OpenCVDnn();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static OpenCVDnn.Builder; builder(String pathModel). Create a new builder. <T extends Model>T; buildModel(). Build a model. <T extends Model>T; buildModel(OpenCVDnn.ModelType type). Build a model, specifying the OpenCVDnn.ModelType. Net; buildNet(). Build the OpenCV Net. void; close(). Close this model if it will not be needed again. BlobFunction<Mat>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. BlobFunction<Mat>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. URI; getConfigUri(). Get the path to the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from cla",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:2244,configurat,configuration,2244,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,1,['configurat'],['configuration']
Deployability,"opencv.ml. Classifier based on SVM. OpenCVClassifiers.SVMSGDClassifierCV - Class in qupath.opencv.ml. Classifier based on SVMSGD. OpenCVDnn - Class in qupath.opencv.dnn. Wrapper for an OpenCV Net, including essential metadata about how it should be used. OpenCVDnn() - Constructor for class qupath.opencv.dnn.OpenCVDnn;  ; OpenCVDnn.Builder - Class in qupath.opencv.dnn. Helper class to build an OpenCVDnn. OpenCVDnn.ModelType - Enum Class in qupath.opencv.dnn. Enum representing different classes of Model supported by OpenCV. OpenCVDnnModelBuilder - Class in qupath.opencv.dnn. A DnnModelBuilder implementation that uses OpenCV's DNN module ; to build a Net. OpenCVDnnModelBuilder() - Constructor for class qupath.opencv.dnn.OpenCVDnnModelBuilder;  ; OpenCVMLClassifier<T> - Class in qupath.opencv.ml.objects. An ObjectClassifier that uses an OpenCVClassifiers.OpenCVStatModel for classification. OpenCVModelObjectClassifier - Class in qupath.opencv.dnn. Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN. OpenCVModelObjectClassifier(PathObjectFilter, OpenCVDnn, List<PathClass>, int, int, double) - Constructor for class qupath.opencv.dnn.OpenCVModelObjectClassifier. Constructor. OpenCVProcessor - Class in qupath.lib.experimental.pixels. Class to generate a PixelProcessor when using OpenCV for the primary image representation. OpenCVProcessor() - Constructor for class qupath.lib.experimental.pixels.OpenCVProcessor;  ; OpenCVStatModel() - Constructor for class qupath.opencv.ml.OpenCVClassifiers.OpenCVStatModel;  ; OpenCVTools - Class in qupath.opencv.tools. Collection of static methods to help with using OpenCV from Java. OpenCVTools() - Constructor for class qupath.opencv.tools.OpenCVTools;  ; OpenCVTools.IndexedPixel - Class in qupath.opencv.tools. Class representing the indices of a pixel and its value. OpenCVTypeAdapter() - Constructor for class qupath.opencv.io.OpenCVTypeAdapters.OpenCVTypeAdapter;  ; OpenCVTypeAdapters - Class in qupath.op",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:724123,patch,patch-based,724123,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch-based']
Deployability,"or. Parameters:; cal - input calibration; if null, a default calibration will be used; downsample - scaling factor (1.0 to use the calibration directly); Returns:. inputResolution; public PatchClassifierParams.Builder inputResolution(PixelCalibration cal); Define the input resolution using a pixel calibration object. Parameters:; cal - ; Returns:. halo; public PatchClassifierParams.Builder halo(int padding); Define a halo that is symmetric in x and y. Parameters:; padding - padding value, to be added both before and after rows and columns.; Returns:; See Also:. halo(Padding). halo; public PatchClassifierParams.Builder halo(Padding halo); Define a halo using a padding object. Parameters:; halo - ; Returns:; See Also:. halo(int). patchSize; public PatchClassifierParams.Builder patchSize(int patchSize); Define the requested square patch size. Parameters:; patchSize - width and height of the patch; Returns:. patchSize; public PatchClassifierParams.Builder patchSize(int patchWidth,; int patchHeight); Define the requested patch size. Parameters:; patchWidth - requested patch width; patchHeight - requested patch height; Returns:. preprocessing; public PatchClassifierParams.Builder preprocessing(ImageOp... preprocessingOps); Define the preprocessing steps from an array.; Note that any existing preprocessing steps in the builder will ; be replaced by those provided here. Parameters:; preprocessingOps - ; Returns:. preprocessing; public PatchClassifierParams.Builder preprocessing(Collection<? extends ImageOp> preprocessingOps); Define the preprocessing steps from a collection.; Note that any existing preprocessing steps in the builder will ; be replaced by those provided here. Parameters:; preprocessingOps - ; Returns:. prediction; public PatchClassifierParams.Builder prediction(ImageOp predictionOp); Define the prediction image op, to be applied after preprocessing ; and before postprocessing. Parameters:; predictionOp - ; Returns:; See Also:. prediction(DnnModel, Padding, St",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html:5562,patch,patchSize,5562,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,4,['patch'],"['patch', 'patchHeight', 'patchSize', 'patchWidth']"
Deployability,"order ; is important. Parameters:; channels - ; Returns:. inputResolution; public PatchClassifierParams.Builder inputResolution(PixelCalibration cal,; double downsample); Define the input resolution using a pixel calibration and a scaling factor. Parameters:; cal - input calibration; if null, a default calibration will be used; downsample - scaling factor (1.0 to use the calibration directly); Returns:. inputResolution; public PatchClassifierParams.Builder inputResolution(PixelCalibration cal); Define the input resolution using a pixel calibration object. Parameters:; cal - ; Returns:. halo; public PatchClassifierParams.Builder halo(int padding); Define a halo that is symmetric in x and y. Parameters:; padding - padding value, to be added both before and after rows and columns.; Returns:; See Also:. halo(Padding). halo; public PatchClassifierParams.Builder halo(Padding halo); Define a halo using a padding object. Parameters:; halo - ; Returns:; See Also:. halo(int). patchSize; public PatchClassifierParams.Builder patchSize(int patchSize); Define the requested square patch size. Parameters:; patchSize - width and height of the patch; Returns:. patchSize; public PatchClassifierParams.Builder patchSize(int patchWidth,; int patchHeight); Define the requested patch size. Parameters:; patchWidth - requested patch width; patchHeight - requested patch height; Returns:. preprocessing; public PatchClassifierParams.Builder preprocessing(ImageOp... preprocessingOps); Define the preprocessing steps from an array.; Note that any existing preprocessing steps in the builder will ; be replaced by those provided here. Parameters:; preprocessingOps - ; Returns:. preprocessing; public PatchClassifierParams.Builder preprocessing(Collection<? extends ImageOp> preprocessingOps); Define the preprocessing steps from a collection.; Note that any existing preprocessing steps in the builder will ; be replaced by those provided here. Parameters:; preprocessingOps - ; Returns:. prediction; public",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html:5334,patch,patchSize,5334,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,1,['patch'],['patchSize']
Deployability,"orderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; heig",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10308,patch,patch,10308,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"oreImporter;  ; TMASummaryViewer - Class in qupath.lib.gui.tma. Deprecated.; since v0.4.0. TMASummaryViewer(Stage) - Constructor for class qupath.lib.gui.tma.TMASummaryViewer. Deprecated.; Constructor. toBlob(Mat...) - Method in interface qupath.opencv.dnn.BlobFunction. Convert one or more mats to a blob. toEncodedURI(String) - Static method in class qupath.lib.common.GeneralTools. Try to convert a path to an encoded URI. toFriendlyString() - Method in enum class qupath.lib.images.writers.ome.OMEPyramidWriter.CompressionType. Get a friendlier string representation. TOGGLE_SELECTED_OBJECTS_LOCKED - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.LockActions;  ; TOGGLE_SYNCHRONIZE_VIEWERS - Variable in class qupath.lib.gui.actions.ViewerActions;  ; toggleObjectsLocked(PathObjectHierarchy, Collection<? extends PathObject>) - Static method in class qupath.lib.objects.PathObjectTools. Toggle the 'locked' status of specified objects. toggleSelectedObjectsLocked(PathObjectHierarchy) - Static method in class qupath.lib.objects.PathObjectTools. Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. toggleShowHideChannel(ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Toggle the visibility of the specified channel. toJSON(boolean) - Method in class qupath.lib.display.ImageDisplay. Create a JSON representation of the main components of the current display. toJTS(AffineTransform) - Static method in class qupath.lib.awt.common.AffineTransforms. Create a Java Topology Suite affine transformation from a Java affine transform. TOOLBAR_ICON_SIZE - Static variable in class qupath.lib.gui.QuPathGUI. Icon size to use in the main QuPath toolbar. ToolManager - Class in qupath.lib.gui. Manage (drawing) tool selection in a QuPath UI. tooltip(ObservableValue<String>) - Method in class qupath.process.gui.commands.ui.SaveResourcePaneBuilder. Text to include in any too",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1034507,toggle,toggleSelectedObjectsLocked,1034507,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['toggle'],['toggleSelectedObjectsLocked']
Deployability,"osest detection with each valid, not-ignored classification and add ; the result to the detection measurement list for the current ImageData. Parameters:; splitClassNames - ; See Also:. DistanceTools.detectionCentroidDistances(ImageData, boolean). detectionToAnnotationDistances; public static void detectionToAnnotationDistances(ImageData<?> imageData,; boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list.; If the centroid falls inside an annotation, the distance is zero. Parameters:; imageData - ; splitClassNames - ; See Also:. DistanceTools.detectionToAnnotationDistances(ImageData, boolean); detectionToAnnotationDistancesSigned(ImageData, boolean). detectionToAnnotationDistances; @Deprecated; public static void detectionToAnnotationDistances(); Deprecated.; retained only for compatibility of v0.2.0 milestone releases; use instead #detectionToAnnotationDistances(boolean). Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list for the current ImageData - without splitting class names. detectionToAnnotationDistances; public static void detectionToAnnotationDistances(boolean splitClassNames); Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list for the current ImageData.; If the centroid falls inside an annotation, the distance is zero. Parameters:; splitClassNames - ; See Also:. DistanceTools.detectionToAnnotationDistances(ImageData, boolean); detectionToAnnotationDistancesSigned(boolean). detectionToAnnotationDistancesSigned; public static void detectionToAnnotationDistancesSigned(ImageData<?> imageData,; boolean splitClassNames); Compute the signed distance for all d",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:109579,release,releases,109579,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['release'],['releases']
Deployability,"ossible. double; getSolidity(). Calculate the solidity, defined as ROI area / convex hull area. int; getT(). Get time point index. int; getZ(). Get z-stack slice index. boolean; isArea(). Returns true if this ROI encloses an area. boolean; isCircle(). Query if the width and height of the ellipse bounding box are the same, assuming 'square' pixels. boolean; isCircle(double pixelWidth,; double pixelHeight). Query if the width and height of the ellipse bounding box are the same, optionally using 'non-square' pixels. boolean; isEmpty(). True if the bounding box has zero area. boolean; isLine(). Returns true if this ROI consists of line segments and does not enclose an area. boolean; isPoint(). Returns true if this ROI represents distinct (unconnected) points. ROI; scale(double scaleX,; double scaleY,; double originX,; double originY). Create a scaled version of this ROI. String; toString();  ; ROI; translate(double dx,; double dy). Create a translated version of this ROI. ROI; updatePlane(ImagePlane plane). Create a new ROI defining the same region on a different ImagePlane. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.roi.interfaces.ROI; scale. Field Details. x; protected double x. y; protected double y. x2; protected double x2. y2; protected double y2. Method Details. contains; public boolean contains(double xx,; double yy); Description copied from interface: ROI; Test is the ROI contains specified x, y coordinates.; Only Area ROIs can return true, i.e. where ROI.isArea() returns true. ; All other ROIs (points, lines) return false. Specified by:; contains in interface ROI; Parameters:; xx - ; yy - ; Returns:. getRoiName; public String getRoiName(); Description copied from interface: ROI; Get a String representation of the kind of ROI we have, ; e.g. ""Rectangle"", ""Ellipse"", ""Polygon"". Specified by:; getRoiName in interface ROI; Returns:. isCir",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:3787,update,updatePlane,3787,javadoc/docs/qupath/lib/roi/EllipseROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html,1,['update'],['updatePlane']
Deployability,"our browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.commands; Class UpdateUrisCommand<T extends UriResource>. java.lang.Object; qupath.lib.gui.commands.UpdateUrisCommand<T>. Type Parameters:; T - . public class UpdateUrisCommand<T extends UriResource>; extends Object; Fix broken URIs by using relative paths or prompting the user to select files.; This is intended to handle cases where files or projects have changed location, so that links need to be updated. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T extends UriResource>int; promptToUpdateUris(Collection<T> items,; URI basePrevious,; URI baseCurrent,; boolean onlyPromptIfMissing). Show dialog prompting the user to update URIs for missing files. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. promptToUpdateUris; public static <T extends UriResource> int promptToUpdateUris(Collection<T> items,; URI basePrevious,; URI baseCurrent,; boolean onlyPromptIfMissing); throws IOException; Show dialog prompting the user to update URIs for missing files.; Optionally provide previous and current base URIs. If not null, these will be used to relativize paths when searching for potential replacements URIs.; Usually, these correspond to the current and previous paths for a project. Type Parameters:; T - ; Parameters:; items - the items containing URIs to check; basePrevious - optional previous base path; baseCurrent - optional current base path; onlyPromptIfMissing - only show a dialog if any URIs correspond to missing files; Returns:; the number of changes made, or -1 if the user cancelled the dialog.; T",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/UpdateUrisCommand.html:1066,update,update,1066,javadoc/docs/qupath/lib/gui/commands/UpdateUrisCommand.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/UpdateUrisCommand.html,1,['update'],['update']
Deployability,"our browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui; Class TaskRunnerFX. java.lang.Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.gui.TaskRunnerFX. All Implemented Interfaces:; TaskRunner. public class TaskRunnerFX; extends AbstractTaskRunner; Plugin runner that takes care of showing progress (in the appropriate thread) using JavaFX components. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; TaskRunnerFX(QuPathGUI qupath). Constructor. TaskRunnerFX(QuPathGUI qupath,; int nThreads). Constructor specifying the number of threads. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TaskRunnerFX; public TaskRunnerFX(QuPathGUI qupath); Constructor. Parameters:; qupath - the QuPath instance. TaskRunnerFX; public TaskRunnerFX(QuPathGUI qupath,; int nThreads); Constructor specifying the number of threads. Parameters:; qupath - the QuPath instance; nThreads - the number of threads to use. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/TaskRunnerFX.html:1055,update,update,1055,javadoc/docs/qupath/lib/gui/TaskRunnerFX.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/TaskRunnerFX.html,1,['update'],['update']
Deployability,"ource,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating objects have changed, and may still be changing. Collection<PathObject>; getAllObjects(boolean includeRoot). Get all the objects in the hierarchy, optionally including the root object. Collection<PathObject>; getAnnotationObjects(). Get all annotation objects in the hierarchy. Collection<PathObject>; getCellObjects(). Get all cell objects in the hierarchy. Collection<PathObject>; getDetectionObjects(). Get all detection objects in the hierarchy (including sub-classes of detections). List<PathObject>; getFlattenedObjectList(List<PathObject> list). Get a flattened list containing all PathObjects in the hierarchy (including from the root object). Collection<PathObject>; getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls). Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class. Collection<PathObject>; getObjectsForRegion(Class<? extends PathObject> cls,; ImageRegion region,; Collection<PathObject> pathObje",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:4535,update,update,4535,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,1,['update'],['update']
Deployability,"overlaps; after detection is complete (here, based on keeping the object with the larger area). Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ParallelTileObject.Status. Current processing status for the tile. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ParallelTileObject.Status; getStatus(). Get the current status (pending, processing or done). boolean; isComplete(). Returns true if setComplete() has been called. boolean; isProcessing(). Returns true if setIsProcessing(true) has recently been called. void; resolveOverlaps(). Request that the tile object attempts to resolve overlaps with its neighboring tiles. void; setComplete(boolean wasCancelled). Notify the tile that its processing is done. boolean; suggestNeighbor(ParallelTileObject pto). Register a neighboring tile, if it intersects with the bounds of this one. void; updateStatus(ParallelTileObject.Status status). Notify the object if it is currently being processed. Methods inherited from class qupath.lib.objects.PathDetectionObject; createEmptyMeasurementList, getMetadata, isEditable. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, remove",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html:1942,update,updateStatus,1942,javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/ParallelTileObject.html,1,['update'],['updateStatus']
Deployability,"p, clearPathObjects, createEmptyMeasurementList, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getDescendantObjects, getDisplayedName, getID, getLevel, getMeasurementList, getMeasurements, getMetadata, getName, getParent, getUnmodifiableMetadataMap, hasChildObjects, hasChildren, hasMeasurements, hasROI, isAnnotation, isCell, isDetection, isRootObject, isTile, isTMACore, nChildObjects, nDescendants, objectCountPostfix, refreshID, removeChildObject, removeChildObjects, removePathObject, removePathObjects, resetPathClass, retrieveMetadataKeys, retrieveMetadataValue, setClassifications, setColor, setColor, setColorRGB, setID, setName, setPathClass, storeMetadataValue, toString. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Method Details. setROI; public void setROI(ROI roi); Set the ROI for this object. If this is called, one should remember to update any associated ; hierarchy to notify it of the change. Parameters:; roi - . setLocked; public void setLocked(boolean locked); Set locked flag, indicating that the object ROI should not be modified.; It directly impacts on isEditable(). Note that this is only a hint that other code should pay attention to - it is not; enforced locally.; ; TODO: Consider shifting this method into PathObject rather than PathROIObject (even; if it doesn't really do anything there). Overrides:; setLocked in class PathObject; Parameters:; locked - . isLocked; public boolean isLocked(); Query the locked status for the object, indicating whether it should be editable or not. Overrides:; isLocked in class PathObject; Returns:. isEditable; @Deprecated; public boolean isEditable(); Deprecated.; since v0.4.0. Return true if isLocked() is false, otherwise returns false.; ; This method existed before isLocked() to try to automatically determine whether ; an object should be locked or not. Now the isLocked() flag shoul",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html:2939,update,update,2939,javadoc/docs/qupath/lib/objects/PathROIObject.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathROIObject.html,1,['update'],['update']
Deployability,"p; createColorMap(String name,; double[] r,; double[] g,; double[] b). Create a colormap using floating point values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int[] r,; int[] g,; int[] b). Create a colormap using integer values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int r,; int g,; int b). Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public ColorMaps(). Method Details. installColorMaps; public static boolean installColorMaps(Path... paths); Install colormaps from the specified paths. Parameters:; paths - optional paths containing either .tsv files containing colormaps, or directories that contain such .tsv files.; Returns:; true if changes were made, false otherwise. installColorMaps; public static boolean installColorMaps(ColorMaps.ColorMap... colorMaps); Install colormaps. Parameters:; colorMaps - one or more colormaps.; Returns:; true if changes were made, false otherwise. getColors; public ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:1974,install,installColorMaps,1974,javadoc/docs/qupath/lib/color/ColorMaps.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html,1,['install'],['installColorMaps']
Deployability,"path.lib.gui.actions.menus.EditMenuActions.Actions;  ; pasteAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; pasteAndEscapeAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; pasteFromClipboard(QuPathGUI, boolean) - Static method in class qupath.lib.gui.commands.Commands. Attempt to paste objects from the system clipboard to the current image, if available; ; otherwise, check for text on the clipboard and paste it into a new script editor tab. pasteFromClipboard(ScriptEditorControl<?>, boolean) - Static method in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; PatchClassifierParams - Class in qupath.opencv.ml. Parameters required to build a classifier that operates on an image patch. PatchClassifierParams.Builder - Class in qupath.opencv.ml. Builder class to create PatchClassifierParams. patchSize(int) - Method in class qupath.opencv.ml.PatchClassifierParams.Builder. Define the requested square patch size. patchSize(int, int) - Method in class qupath.opencv.ml.PatchClassifierParams.Builder. Define the requested patch size. PathAnnotationObject - Class in qupath.lib.objects. An annotation PathObject. PathAnnotationObject() - Constructor for class qupath.lib.objects.PathAnnotationObject. Default constructor. PathCellObject - Class in qupath.lib.objects. A subclass of a PathDetectionObject, which also supports storing an (optional) extra ROI to represent ; the cell nucleus. PathCellObject() - Constructor for class qupath.lib.objects.PathCellObject. Default constructor. PathClass - Class in qupath.lib.objects.classes. Representation of an object's classification - which can be defined using any unique string; identifier (e.g. PathClass.StandardPathClasses - Class in qupath.lib.objects.classes. Enum representing standard classifications. PathClassFactory - Class in qupath.lib.objects.classes. Deprecated.; since v0.4.0 in favor of methods added to PathClass directly. PathClassFactory.StandardPathClasses - Enum Clas",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:751545,patch,patchSize,751545,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patchSize']
Deployability,path.lib.gui.actions.menus.EditMenuActions;  ; getName() - Method in class qupath.lib.gui.actions.menus.ExtensionsMenuActions;  ; getName() - Method in class qupath.lib.gui.actions.menus.FileMenuActions;  ; getName() - Method in class qupath.lib.gui.actions.menus.HelpMenuActions;  ; getName() - Method in class qupath.lib.gui.actions.menus.MeasureMenuActions;  ; getName() - Method in interface qupath.lib.gui.actions.menus.MenuActions. Get the name of the menu. getName() - Method in class qupath.lib.gui.actions.menus.ObjectsMenuActions;  ; getName() - Method in class qupath.lib.gui.actions.menus.TMAMenuActions;  ; getName() - Method in class qupath.lib.gui.actions.menus.ViewMenuActions;  ; getName() - Method in class qupath.lib.gui.extensions.GitHubProject.GitHubRepo. Get the name. getName() - Method in interface qupath.lib.gui.extensions.QuPathExtension. A readable name for the extension. getName() - Method in class qupath.lib.gui.extensions.UpdateChecker.ReleaseVersion. Get the release name (any text). getName() - Method in class qupath.lib.gui.panes.SimpleImageViewer. Get the name of the image. getName() - Method in interface qupath.lib.gui.prefs.QuPathStyleManager.StyleOption. Get a user-friendly name for the style. getName() - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; getName() - Method in class qupath.lib.gui.viewer.recording.ViewTracker. Return the name of this ViewTracker. getName() - Method in interface qupath.lib.gui.viewer.tools.PathTool. Get the name of the tool. getName() - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; getName() - Method in class qupath.lib.images.servers.bioformats.BioFormatsServerBuilder;  ; getName() - Method in interface qupath.lib.images.servers.ColorTransforms.ColorTransform. Get a displayable name for the transform. getName() - Method in class qupath.lib.images.servers.ImageChannel. Name of the output channel. getName() - Method in interface qupath.lib.ima,MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:450791,release,release,450791,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['release'],['release']
Deployability,"path.lib.gui.viewer.QuPathViewer; addViewerListener, centerImage, centerROI, componentContains, componentPointToImagePoint, componentPointToImagePoint, fireImageDataChanged, fireVisibleRegionChangedEvent, forceOverlayUpdate, gammaProperty, getActiveTool, getAllSelectedObjects, getAllThumbnails, getBorderColor, getCenterPixelX, getCenterPixelY, getCurrentROI, getCursor, getCustomOverlayLayers, getCustomPixelLayerOverlay, getDefaultZoomFactor, getDisplayedClipShape, getDisplayedRegionShape, getDownsampleFactor, getFullLocationString, getFullMagnification, getGamma, getGammaOp, getHierarchy, getImageData, getImageDisplay, getImageObjectClassificationString, getImagePlane, getImageRegionStore, getMagnification, getMaxDownsample, getMaxROIHandleSize, getMinDownsample, getMousePosition, getObjectClassificationString, getOverlayLayers, getOverlayOptions, getRenderer, getRGBThumbnail, getROIEditor, getRotation, getSelectedObject, getServer, getServerBounds, getServerHeight, getServerWidth, getThumbnail, getTPosition, getView, getZoomToFitDownsampleFactor, getZPosition, hasServer, hierarchyChanged, imageDataProperty, imagePointToComponentPoint, isImageDataChanging, isRotated, isShowing, isSpaceDown, paintComponent, paintViewer, removeViewerListener, repaint, repaintTimestamp, requestCancelDirection, requestDecelerate, requestStartMoving, requestStopMoving, requiresTileRegion, resetCustomPixelLayerOverlay, resetImageData, resetMinimumRepaintSpacingMillis, rotationProperty, selectedPathObjectChanged, setActiveTool, setBorderColor, setCenterPixelLocation, setCursor, setCustomPixelLayerOverlay, setDoFasterRepaint, setDownsampleFactor, setDownsampleFactor, setDownsampleFactor, setGamma, setImageData, setMagnification, setMinimumRepaintSpacingMillis, setRotation, setSelectedObject, setSelectedObject, setSpaceDown, setTPosition, setZPosition, tileAvailable, toString, tPositionProperty, updateCursor, zoomIn, zoomIn, zoomOut, zoomOut, zoomToFit, zPositionProperty. Methods inherited f",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewerPlus.html:3925,update,updateCursor,3925,javadoc/docs/qupath/lib/gui/viewer/QuPathViewerPlus.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewerPlus.html,1,['update'],['updateCursor']
Deployability,"pathModel - ; Returns:. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. getBlobFunction; public BlobFunction<Mat> getBlobFunction(); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. Specified by:; getBlobFunction in class AbstractDnnModel<Mat>; Returns:. getBlobFunction; public BlobFunction<Mat> getBlobFunction(String name); Description copied from class: AbstractDnnModel; Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. Specified by:; getBlobFunction in class AbstractDnnModel<Mat>; Parameters:; name - ; Returns:. getPredictionFunction; public PredictionFunction<Mat> getPredictionFunction(); Description copied from class: AbstractDnnModel; Get the prediction function that c",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:6301,update,updateURIs,6301,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,1,['update'],['updateURIs']
Deployability,"perty change listener. Parameters:; listener - . getProperty; public Object getProperty(String key); Get a specified property. Parameters:; key - ; Returns:. setProperty; public Object setProperty(String key,; Object value); Set a property. Note that if properties are Serializable, they will be included in ; associated data files - otherwise they are stored only transiently. Parameters:; key - ; value - ; Returns:. removeProperty; public Object removeProperty(String key); Remove a specified property. Parameters:; key - ; Returns:. getProperties; public Map<String,Object> getProperties(); Get an unmodifiable map representing all known properties for this ImageData. Returns:. getLastSavedPath; public String getLastSavedPath(); Get the last path used to save this object;. Returns:. isChanged; public boolean isChanged(); Returns true if changes have been recorded since the last time this object was notified that it was saved. Returns:; See Also:. setLastSavedPath(java.lang.String, boolean). setChanged; public void setChanged(boolean isChanged); Set isChanged() status. Parameters:; isChanged - . setLastSavedPath; public void setLastSavedPath(String path,; boolean resetChanged); Set the last path used to save this object;. Parameters:; path - ; resetChanged - If true, then the isChanged() flag will be reset to false;. hierarchyChanged; public void hierarchyChanged(PathObjectHierarchyEvent event); Description copied from interface: PathObjectHierarchyListener; Notify listeners of a change in the hierarchy or its objects. Specified by:; hierarchyChanged in interface PathObjectHierarchyListener; Parameters:; event - . workflowUpdated; public void workflowUpdated(Workflow workflow); Description copied from interface: WorkflowListener; Called whenever a Workflow has been updated in some way, such as a new step added. Specified by:; workflowUpdated in interface WorkflowListener; Parameters:; workflow - . toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/ImageData.html:8666,update,updated,8666,javadoc/docs/qupath/lib/images/ImageData.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/ImageData.html,1,['update'],['updated']
Deployability,"perty<String>; imageNameProperty(). Get a read-only property indicating the name of the image. ReadOnlyObjectProperty<Image>; imageProperty(). Get a read-only property representing the JavaFX image. StringProperty; placeholderTextProperty(). Get the placeholder text to show if no image is available. void; resetImage(). Remove the image. DoubleProperty; saturationPercentProperty(). Get the percentage of any non-8-bit image that should be saturated when applying auto contrast settings. void; setExpandToWindow(boolean limit). Control whether the image should be allowed to expand beyond its preferred width and height to fill the window. void; setPlaceholderText(String placeholder). Set the placeholder text to show if no image is available. void; setSaturationPercent(double percent). Set the percentage of pixels to use when applying auto contrast settings to a non-8-bit image. void; updateImage(String name,; BufferedImage img). Update the image using a buffered image. void; updateImage(String name,; Image image). Update the image using a JavaFX image. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. placeholderText; public StringProperty placeholderTextProperty; Get the placeholder text to show if no image is available. See Also:. getPlaceholderText(); setPlaceholderText(String); placeholderTextProperty(). saturationPercent; public DoubleProperty saturationPercentProperty; Get the percentage of any non-8-bit image that should be saturated when applying auto contrast settings. See Also:. getSaturationPercent(); setSaturationPercent(double); saturationPercentProperty(). expandToWindow; public BooleanProperty expandToWindowProperty; Get the property indicating whether the image should grow to fill the window (while maintaining its; aspect ratio).; If false, the image will grow no larger than its preferred width and height. See Also:. getExpandToWindow(); setExpandToWi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html:3671,update,updateImage,3671,javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/SimpleImageViewer.html,1,['update'],['updateImage']
Deployability,"ply(ImageOp, Mat). Parameters:; input - input image; Returns:; output image, which may be the same as the input image; See Also:. getPadding(); ImageOps.padAndApply(ImageOp, Mat, int); ImageOps.padAndApply(ImageOp, Mat). getPadding; default Padding getPadding(); Get the padding requested for this operation.; ; The default is to return Padding.empty().; ; Subclasses that perform neighborhood operations should override this.; If the padding is non-empty, it will be removed when apply(Mat) is called - ; and so the Mat that is output will be smaller than the Mat that was input. Returns:; the padding requested by this operation. getChannels; default List<ImageChannel> getChannels(List<ImageChannel> channels); Get appropriate channels to reflect the output of this transform.; ; The default is to return the input list unchanged.; ; Classes that change the meaning or number of channels should override this.; In particular, the number of channels in the output list should match the ; number of channels output by this transformer, given the input channels. Parameters:; channels - ; Returns:. getOutputType; default PixelType getOutputType(PixelType inputType); Get the output pixel type.; ; The default is to return the pixel type unchanged. Parameters:; inputType - the input pixel type; Returns:; the output pixel type. getURIs; default Collection<URI> getURIs(); throws IOException; Default implementation returns an empty list; classes should override this if necessary. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; default boolean updateURIs(Map<URI,URI> replacements); throws IOException; Default implementation makes no changes; classes should override this if necessary. Specified by:; updateURIs in interface UriResource; Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOp.html:3601,update,updateURIs,3601,javadoc/docs/qupath/opencv/ops/ImageOp.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOp.html,3,['update'],['updateURIs']
Deployability,"plying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10803,patch,patch,10803,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"ps.PaddedOp. java.lang.Object; qupath.opencv.ops.ImageOps.PaddedOp. All Implemented Interfaces:; UriResource, ImageOp. Enclosing class:; ImageOps. public abstract static class ImageOps.PaddedOp; extends Object; implements ImageOp; Abstract ImageOp to simplify the process of handling padding. Constructor Summary; Constructors. Constructor; Description; PaddedOp();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; Mat; apply(Mat input). Apply operation to the image. protected abstract Padding; calculatePadding(). Calculate the required padding. Padding; getPadding(). Get the padding requested for this operation. protected abstract List<Mat>; transformPadded(Mat input). Apply the op, but ignoring padding. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.ops.ImageOp; getChannels, getOutputType, getURIs, updateURIs. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. PaddedOp; public PaddedOp(). Method Details. calculatePadding; protected abstract Padding calculatePadding(); Calculate the required padding. Returns:. transformPadded; protected abstract List<Mat> transformPadded(Mat input); Apply the op, but ignoring padding.; Non-empty padding will be removed automatically elsewhere.; ; This should return a list rather than merged channels, because this makes it possible to strip the padding; before merging to create the final output to apply(Mat) (since this can be much more efficient).; ; Nevertheless, if the output channels are already merged, then a singleton list should be returned -; there is no need to split channels, because the list items themselves can have any number of channels. Parameters:; input - ; Returns:. apply; public Mat apply(Mat input); Description copied from interface: ImageOp; Apply operation to ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOps.PaddedOp.html:1389,update,updateURIs,1389,javadoc/docs/qupath/opencv/ops/ImageOps.PaddedOp.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOps.PaddedOp.html,1,['update'],['updateURIs']
Deployability,"ption; Import preferences from a stream.; ; Note that if the plan is to re-import preferences previously exported by exportPreferences(OutputStream); then it may be worthwhile to resetPreferences() first to handle the fact that preferences may not have been; saved because their default values were unchanged. Parameters:; stream - ; Throws:; IOException; InvalidPreferencesFormatException; See Also:. exportPreferences(OutputStream). numCommandThreadsProperty; public static IntegerProperty numCommandThreadsProperty(); Property specifying the preferred number of threads QuPath should use for multithreaded commands. Returns:. showImageNameInTitleProperty; public static BooleanProperty showImageNameInTitleProperty(); Property specifying if QuPath should show the image title in the main window title.; For privacy reasons it may be desirable to turn this off in some cases. Returns:. autoUpdateCheckProperty; public static ObjectProperty<PathPrefs.AutoUpdateType> autoUpdateCheckProperty(); Check for updates when launching QuPath, if possible. Returns:. maskImageNamesProperty; public static BooleanProperty maskImageNamesProperty(); Request that image names are hidden within the user interface. Returns:. defaultLocaleProperty; public static ObjectProperty<Locale> defaultLocaleProperty(); Get a property for setting the default Locale.; Setting this locale impacts both Locale.Category.FORMAT and Locale.Category.DISPLAY, ; and may trigger an update to defaultLocaleDisplayProperty() and defaultLocaleFormatProperty() ; if these have been changed. Returns:; an object property to control the locale; Since:; v0.4.0. defaultLocaleFormatProperty; public static ObjectProperty<Locale> defaultLocaleFormatProperty(); Get a property for setting the default Locale for Locale.Category.FORMAT.; Setting this property also results in the Locale being changed to match. Returns:; an object property to control the display locale. defaultLocaleDisplayProperty; public static ObjectProperty<Locale> defa",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html:43621,update,updates,43621,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,1,['update'],['updates']
Deployability,"quals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface java.lang.AutoCloseable; close. Methods inherited from interface qupath.lib.images.servers.ImageServer; getAssociatedImage, getAssociatedImageList, getBuilder, getCachedTile, getChannel, getDefaultThumbnail, getDownsampleForResolution, getHeight, getImageClass, getMetadata, getPath, getPixelCalibration, getPixelType, getPreferredDownsamples, getTileRequestManager, getWidth, isEmptyRegion, isRGB, nChannels, nResolutions, nTimepoints, nZSlices, readBufferedImage, readRegion, readRegion, readRegion, setMetadata. Method Details. createRenderedServer; public static ImageServer<BufferedImage> createRenderedServer(QuPathViewer viewer); throws IOException; Create an ImageServer that returns tiles based on how approximately they would appear within the viewer.; Note that; ; the server uses fixed downsample values, while the viewer can adapt annotation line thickness continuously - ; therefore the agreement is not exact; changing display settings in the viewer may impact how later tiles are rendered; the server cannot be serialized to JSON. The intention is to treat this as a throwaway server used to create rendered images including color transforms and overlays, ; which will be saved to disk. Parameters:; viewer - ; Returns:; Throws:; IOException; See Also:. RenderedImageServer.Builder. createRenderedServer; public static ImageServer<BufferedImage> createRenderedServer(ImageServer<BufferedImage> server,; ImageRenderer renderer); throws IOException; Create an ImageServer that converts the image to RGB using the specified ImageRenderer. Parameters:; server - ; renderer - ; Returns:; Throws:; IOException. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServer; Get the URIs for images required for this server. ; In the simplest case, this is a singleton list returning a URI representing a local ; file. However, some ImageServers may not have an assoc",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/servers/RenderedImageServer.html:4244,continuous,continuously,4244,javadoc/docs/qupath/lib/gui/images/servers/RenderedImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/images/servers/RenderedImageServer.html,1,['continuous'],['continuously']
Deployability,"qupath.opencv.features.DelaunayClusteringPlugin;  ; postProcess(Collection<? extends PathTask>) - Method in class qupath.lib.gui.TaskRunnerFX;  ; postProcess(Collection<? extends PathTask>) - Method in class qupath.lib.plugins.AbstractTaskRunner. Perform post-processing after a task has complete. postprocessing(Collection<? extends ImageOp>) - Method in class qupath.opencv.ml.PatchClassifierParams.Builder. Define the postprocessing steps from a collection. postprocessing(ImageOp...) - Method in class qupath.opencv.ml.PatchClassifierParams.Builder. Define the postprocessing steps from an array. power(double) - Static method in class qupath.opencv.ops.ImageOps.Core. Raise every pixel element to a power. power(Mat, double) - Static method in class qupath.opencv.tools.GroovyCV. Raise elements of an array to a specified power. predict(Map<String, Mat>) - Method in class qupath.opencv.dnn.AbstractDnnModel. Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. predict(Map<String, Mat>) - Method in interface qupath.opencv.dnn.DnnModel. Prediction function that can take multiple inputs. predict(Map<String, T>) - Method in interface qupath.opencv.dnn.PredictionFunction. Call a function that takes one or more inputs to produce zero or more outputs. predict(Mat) - Method in class qupath.opencv.dnn.AbstractDnnModel. Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. predict(Mat) - Method in interface qupath.opencv.dnn.DnnModel. Prediction function that takes a single input and gives a single output. predict(Mat, Mat, Mat) - Method in class qupath.opencv.ml.OpenCVClassifiers.BoostClassifier. Default implementation calling. predict(Mat, Mat, Mat) - Method in class qupath.opencv.ml.OpenCVClassifiers.DTreesClassifier. Default implementation calling. predict(Mat, Mat, Mat) - Method in",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:775064,patch,patches,775064,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patches']
Deployability,"r for class qupath.imagej.superpixels.DoGSuperpixelsPlugin;  ; doLogCountsProperty() - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Property to control whether the histogram shows pixel counts, or the natural logarithm of the counts. DONE - Enum constant in enum class qupath.lib.plugins.ParallelTileObject.Status. Tile processing complete. DOUBLE - Enum constant in enum class qupath.lib.measurements.MeasurementList.MeasurementListType. A list backed by an array of doubles. doubleClickToZoom - Variable in class qupath.lib.gui.panes.PreferencePane.ViewerPreferences;  ; doubleClickToZoomProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Request that double-clicking the viewer can be used to zoom in. DoubleParameter - Class in qupath.lib.plugins.parameters. Parameter to represent a floating point numeric value. doUpdateHierarchy() - Method in class qupath.lib.scripting.ScriptParameters. Request whether to fire an update event for the object hierarchy, if an image data ; object is available. doUpdateHierarchy(boolean) - Method in class qupath.lib.scripting.ScriptParameters.Builder. Optionally request a hierarchy update event after running a script; (default is true for scripts that operate on image data). doWatershed(ImageProcessor, ImageProcessor, boolean) - Static method in class qupath.imagej.processing.Watershed. Apply a watershed transform. doWatershed(ImageProcessor, ImageProcessor, double, boolean) - Static method in class qupath.imagej.processing.Watershed. Apply an intensity-constrained watershed transform, preventing regions from expanding to pixels below a specified minimum threshold. doWatershed(Mat, Mat, boolean) - Static method in class qupath.opencv.tools.ProcessingCV. Apply a watershed transform. doWatershed(Mat, Mat, double, boolean) - Static method in class qupath.opencv.tools.ProcessingCV. Apply an intensity-constrained watershed transform, preventing regions from expanding to pixels below a specified",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:269541,update,update,269541,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"r for class qupath.process.gui.commands.ExportTrainingRegionsCommand. Constructor. exportType(Class<? extends PathObject>) - Method in class qupath.lib.gui.tools.MeasurementExporter. Specify what type of object should be exported. ExtendedPathTool - Class in qupath.lib.gui.viewer.tools;  ; ExtensionClassLoader - Class in qupath.lib.gui. ClassLoader for loading QuPath extensions and other jars from the user directory. ExtensionControlPane - Class in qupath.lib.gui. Borderpane that displays extensions, with options to remove,; open containing folder, update, where possible. ExtensionManager - Class in qupath.lib.gui. Manage loading extensions for a QuPathGUI instance. ExtensionPreferences() - Constructor for class qupath.lib.gui.panes.PreferencePane.ExtensionPreferences;  ; EXTENSIONS - Variable in class qupath.lib.gui.actions.menus.ExtensionsMenuActions.Actions;  ; EXTENSIONS_ONLY - Enum constant in enum class qupath.lib.gui.prefs.PathPrefs.AutoUpdateType. Check for extensions on GitHub only (not new QuPath releases). extensionsDirectoryProperty() - Method in class qupath.lib.gui.UserDirectoryManager. Read only property representing the extensions directory. ExtensionsMenuActions - Class in qupath.lib.gui.actions.menus;  ; ExtensionsMenuActions.Actions - Class in qupath.lib.gui.actions.menus;  ; extract(int...) - Static method in class qupath.opencv.ops.ImageOps.Channels. Extract or rearrange channels by index. EXTRACT_REGION - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; extractBand(Raster, int) - Static method in class qupath.lib.analysis.images.ContourTracing. Extract a band from a a raster as a SimpleImage. extractChannel(ImageServer<BufferedImage>, BufferedImage, float[]) - Method in interface qupath.lib.images.servers.ColorTransforms.ColorTransform. Extract a (row-wise) array containing the pixels extracted from a BufferedImage. extractChannels(int...) - Method in class qupath.lib.images.servers.TransformedServerBuilder. Extract spe",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:293137,release,releases,293137,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['release'],['releases']
Deployability,"r into which the image should be opened; pathNew - ; prompt - if true, give the user the opportunity to cancel opening if a whole slide server is already set; includeURLs - if true, any prompt should support URL input and not only a file chooser; Returns:; true if the server was set for this GUI, false otherwise; Throws:; IOException. installGroovyCommand; public MenuItem installGroovyCommand(String menuPath,; File file); Install a Groovy script as a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; file - the Groovy script to run; note that this will be reloaded each time it is required; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, String). installGroovyCommand; public MenuItem installGroovyCommand(String menuPath,; String script); Install a Groovy script as a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; script - the Groovy script to run; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, File). installImageDataCommand; public MenuItem installImageDataCommand(String menuPath,; Consumer<ImageData<BufferedImage>> command); Install a new command in QuPath that takes the current ImageData as input.; The command will only be enabled when an image is available. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:21226,install,installGroovyCommand,21226,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,2,['install'],['installGroovyCommand']
Deployability,"r the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). getSuitableName; public static String getSuitableName(Class<? extends PathObject> cls,; boolean makePlural); Get a user-friendly name for a specific type of PathObject, based on its Java class. Parameters:; cls - ; makePlural - ; Returns:. containsObject",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:22164,update,updatePlane,22164,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,2,['update'],['updatePlane']
Deployability,"r;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static method in class qupath.lib.analysis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriResource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement wit",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1066711,update,updateRunningStatistics,1066711,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateRunningStatistics']
Deployability,"rList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; updateProgress(int, String, ImageRegion) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAd",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1065118,update,updatePlane,1065118,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updatePlane']
Deployability,"rd. Returns:. promptToImportObjectsProjectEntry; public static boolean promptToImportObjectsProjectEntry(ImageData<BufferedImage> imageData,; ProjectImageEntry<?> entry); Prompt to import objects from a project entry. Parameters:; imageData - the image to which the objects should be added; entry - the entry containing the objects to add; Returns:; true if objects were added, false otherwise. readObjectsFromClipboard; public static List<PathObject> readObjectsFromClipboard(ImageData<BufferedImage> imageData); throws IOException,; JsonSyntaxException,; JsonParseException; Try to read objects from the system clipboard. Parameters:; imageData - the image to which the objects should be added; Returns:; true a list of objects read from the system clipboard, or empty list if none could be found; Throws:; IOException; JsonSyntaxException; JsonParseException. promptToPasteObjectsFromClipboard; public static boolean promptToPasteObjectsFromClipboard(ImageData<BufferedImage> imageData); Prompt to paste objects from the system clipboard, if possible. Parameters:; imageData - the image to which the objects should be added; Returns:; true if objects were added, false otherwise. promptToImportObjectsFromFile; public static boolean promptToImportObjectsFromFile(ImageData<BufferedImage> imageData,; File file); Prompt to import objects read from a file. Parameters:; imageData - the image to add the objects to; file - the file to read objects from; if null, a chooser will be shown; Returns:; true if objects were added, false otherwise. promptToImportObjects; public static boolean promptToImportObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Import a collection of objects to an object hierarchy, prompting to confirm and asking whether to update IDs. Parameters:; hierarchy - the object hierarchy; pathObjects - the new objects to add; Returns:; true if objects were added to the hierarchy, false otherwise (including if the pathobject list is empty). ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/InteractiveObjectImporter.html:3996,update,update,3996,javadoc/docs/qupath/lib/gui/commands/InteractiveObjectImporter.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/InteractiveObjectImporter.html,1,['update'],['update']
Deployability,"reateRunningStatisticsList(int n). Create a list of n (empty) RunningStatistics objects. static double[]; getQuartiles(double[] scores). Determine thresholds for dividing an array of double values into quartiles. static double[]; getTertiles(double[] scores). Determine thresholds for dividing an array of double values into tertiles. static void; updateRunningStatistics(RunningStatistics stats,; SimpleImage img). Add all pixels from a SimpleImage to an existing RunningStatistics object. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. StatisticsHelper; public StatisticsHelper(). Method Details. computeRunningStatistics; public static RunningStatistics computeRunningStatistics(SimpleImage img); Compute running statistics using all pixels from a SimpleImage. Parameters:; img - ; Returns:. updateRunningStatistics; public static void updateRunningStatistics(RunningStatistics stats,; SimpleImage img); Add all pixels from a SimpleImage to an existing RunningStatistics object. Parameters:; stats - ; img - . createRunningStatisticsList; public static List<RunningStatistics> createRunningStatisticsList(int n); Create a list of n (empty) RunningStatistics objects. Parameters:; n - ; Returns:. computeRunningStatistics; public static RunningStatistics computeRunningStatistics(double[] values); Create a RunningStatistics object using all the values from a specified array. Parameters:; values - ; Returns:. computeRunningStatistics; public static void computeRunningStatistics(SimpleImage img,; SimpleImage imgLabels,; List<RunningStatistics> statsList); Calculate RunningStatistics for each label > 0 in an image, up to a maximum of statsList.size().; ; The statistics for pixels in img corresponding to integer value label in imgLabels ; are stored within statsList.get(label-1). Parameters:; img - ; imgLabels - ; statsList - . getQuartiles; public static double[] getQuartiles(d",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/stats/StatisticsHelper.html:2241,update,updateRunningStatistics,2241,javadoc/docs/qupath/lib/analysis/stats/StatisticsHelper.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/stats/StatisticsHelper.html,2,['update'],['updateRunningStatistics']
Deployability,"requested downsample factor, defining the resolution at which pixels should be returned. String; getPath(). Get the requested ImageServer path, used as an identifier. int; hashCode();  ; RegionRequest; intersect2D(int x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, ti",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:3934,update,updated,3934,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,1,['update'],['updated']
Deployability,"required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; th",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9596,update,updateDownsample,9596,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,3,['update'],"['updateDownsample', 'updated']"
Deployability,"ressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. protected void; postProcess(Collection<? extends PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TaskRunnerFX; public TaskRunnerFX(QuPathGUI qupath); Constructor. Parameters:; qupath - the QuPath instance. TaskRunnerFX; public TaskRunnerFX(QuPathGUI qupath,; int nThreads); Constructor specifying the number of threads. Parameters:; qupath - the QuPath instance; nThreads - the number of threads to use. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Overrides:; runTasks in class AbstractTaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Description copied from class: AbstractTaskRunner; Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particul",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/TaskRunnerFX.html:2049,update,update,2049,javadoc/docs/qupath/lib/gui/TaskRunnerFX.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/TaskRunnerFX.html,1,['update'],['update']
Deployability,"rface: ChannelDisplayInfo; Get a string representation of a pixel's value.; This might be a single number, or 3 numbers for an RGB image where the channel includes all values. Specified by:; getValueAsString in interface ChannelDisplayInfo; Parameters:; img - ; x - ; y - ; Returns:. getRGB; public int[] getRGB(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode); Description copied from interface: ChannelDisplayInfo; Get the RGB values that would be used to display all the pixels of an image. Specified by:; getRGB in interface ChannelDisplayInfo; Parameters:; img - ; rgb - ; mode - ; Returns:. updateRGBAdditive; public void updateRGBAdditive(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode); Description copied from interface: ChannelDisplayInfo; Update an array of existing pixels (packed RGB) additively using the colors to display a specified image.; May throw an UnsupportedOperationException if isAdditive() returns false;. Specified by:; updateRGBAdditive in interface ChannelDisplayInfo; Parameters:; img - ; rgb - ; mode - . getImageData; protected ImageData<BufferedImage> getImageData(). getImageServer; protected ImageServer<BufferedImage> getImageServer(). setMinMaxAllowed; public void setMinMaxAllowed(float minAllowed,; float maxAllowed); Description copied from interface: ChannelDisplayInfo.ModifiableChannelDisplayInfo; Set the maximum permissible range for the image display.; ; For an 8-bit image, that should be 0 and 255.; ; For a 16-bit image, fewer bits might actually be used... therefore the full range of 0-2^16-1 may be too much.; ; Also, for a 32-bit floating point image the limits are rather harder to define in a general way.; This method makes it possible to restrict the permissible range to something sensible.; Brightness/contrast/min/max sliders may make use of this. Specified by:; setMinMaxAllowed in interface ChannelDisplayInfo.ModifiableChannelDisplayInfo; Parameters:; minAllowed - ; maxAllowed - . isBrightnessContrastRescaled; public b",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html:10394,update,updateRGBAdditive,10394,javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html,1,['update'],['updateRGBAdditive']
Deployability,"rface ; QuPathStyleManager.StyleOption. Interface defining a style that may be applied to QuPath. Constructor Summary; Constructors. Constructor; Description; QuPathStyleManager();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ObservableList<QuPathStyleManager.Fonts>; availableFontsProperty(). Get a list of available fonts. static ObservableList<QuPathStyleManager.StyleOption>; availableStylesProperty(). Get the current available styles as an observable list. static ObjectProperty<QuPathStyleManager.Fonts>; fontProperty(). Get the current selected font. static boolean; installStyles(Collection<File> list). Handle installing CSS files (which can be used to style QuPath). static boolean; isDefaultStyle(). Check if the default JavaFX style is used. static void; refresh(). Refresh the current style. static ObjectProperty<QuPathStyleManager.StyleOption>; selectedStyleProperty(). Get the current selected style. static void; updateAvailableStyles(). Request that the list of available styles is updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. availableStyles; public static ObservableList<QuPathStyleManager.StyleOption> availableStylesProperty; Get the current available styles as an observable list.; The list is unmodifiable, since any changes should be made via adding/removing files in UserDirectoryManager.getCssStylesPath(). See Also:. availableStylesProperty(). selectedStyle; public static ObjectProperty<QuPathStyleManager.StyleOption> selectedStyleProperty; Get the current selected style. See Also:. selectedStyleProperty(). availableFonts; public static ObservableList<QuPathStyleManager.Fonts> availableFontsProperty; Get a list of available fonts.; The list is unmodifiable, since this is primarily used to overcome issues with the default font on macOS ; by changing the font family. More fine-gr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html:2295,update,updateAvailableStyles,2295,javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,1,['update'],['updateAvailableStyles']
Deployability,"ring) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; file - the Groovy script to run; note that this will be reloaded each time it is required; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, String). installGroovyCommand; public MenuItem installGroovyCommand(String menuPath,; String script); Install a Groovy script as a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; script - the Groovy script to run; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, File). installImageDataCommand; public MenuItem installImageDataCommand(String menuPath,; Consumer<ImageData<BufferedImage>> command); Install a new command in QuPath that takes the current ImageData as input.; The command will only be enabled when an image is available. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; command - the command to run; Returns:; the MenuItem for the command; See Also:. installCommand(String, Runnable). installCommand; public MenuItem installCommand(String menuPath,; Runnable runnable); Install a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; runnable - the command to run; Returns:; the MenuItem for the",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:21764,install,installImageDataCommand,21764,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,2,['install'],['installImageDataCommand']
Deployability,"ring, Integer). getInstance; public static PathClass getInstance(String name). getInstance; public static PathClass getInstance(String name,; Integer color); Get a base PathClass instance, without any parent PathClass.; ; This is equivalent to calling getInstance(PathClass, String, Integer) with ; the first argument as null. Parameters:; name - ; color - ; Returns:; See Also:. getInstance(PathClass, String, Integer). getInstance; public static PathClass getInstance(PathClass parent,; String name,; Integer color); Get a derived PathClass instance with the specified parent.; ; This will be derived from the parent PathClass (if provided) and have the specified ; name, stripped to remove any leading or training whitespace.; ; Note that the name should generally be an alphanumeric string, optionally including ; punctuation symbols but not including DELIMITER.; ; The delimiter is currently a colon "":"" but it is advised not to rely upon ; this and to avoid punctuation where possible, because the delimiter may possibly change ; in a future release - primarily because the choice of colon can be problematic in some ; cases, e.g. when using ontologies. Parameters:; parent - parent class (optional, may be null); name - name of the PathClass; color - color to use if a new instance is created (may be null to use the default); Returns:; a PathClass instance; the same instance will be returned given the same parent and name; See Also:. fromString(String, Integer); fromCollection(Collection, Integer). getOnePlus; public static PathClass getOnePlus(PathClass parentClass); Get a standalone or derived 1+ classification, indicating weak positivity. Parameters:; parentClass - parent classification (may be null); Returns:. getTwoPlus; public static PathClass getTwoPlus(PathClass parentClass); Get a standalone or derived 2+ classification, indicating moderate positivity. Parameters:; parentClass - parent classification (may be null); Returns:. getThreePlus; public static PathClass getThree",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:14317,release,release,14317,javadoc/docs/qupath/lib/objects/classes/PathClass.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html,1,['release'],['release']
Deployability,"rns:; Throws:; IllegalStateException. launchInstanceFromSwing; public static void launchInstanceFromSwing(); Static method to launch QuPath from within a Swing/AWT application.; ; This aims to handle several things:; ; initializing JavaFX in the appropriate thread; flagging that shutting down QuPath should not terminate the JVM; showing the QuPath UI window. This can potentially be used from other environments (e.g. MATLAB, Fiji, Python).; Afterwards, calls to getInstance() will return the QuPath instance as soon as it is available.; However, note that depending upon the thread from which this method is called, the QuPath instance may not ; be available until some time after the method returns.; ; If there is already an instance of QuPath running, this requests that it is made visible - but otherwise does nothing. requestAutomaticUpdateCheck; public void requestAutomaticUpdateCheck(); Request an automated update check in a background thread.; This will use the user preferences to determine whether or how to check for updates ; (i.e. if the preferences have disabled an update check, then it will not be run). See Also:. requestFullUpdateCheck(). requestFullUpdateCheck; public void requestFullUpdateCheck(); Request a manual update check in a background thread.; This should perform the check if possible, regardless of the user preferences. See Also:. requestAutomaticUpdateCheck(). showAnalysisPaneProperty; public BooleanProperty showAnalysisPaneProperty(). Returns:; the showAnalysisPane property. uiBlocked; public ObservableValue<Boolean> uiBlocked(); Observable value indicating that the user interface is/should be blocked.; This happens when a plugin or script is running. Returns:. openInBrowser; public static boolean openInBrowser(String url); Try to launch a browser window for a specified URL. Parameters:; url - the URL to open in the browser; Returns:; true if this was (as far as we know...) successful, and false otherwise; Since:; v0.5.0 (renamed from launchInBrowse",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:14955,update,updates,14955,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['update'],['updates']
Deployability,"rogress to a log. CommandLineTaskRunner.CommandLineProgressMonitor - Class in qupath.lib.plugins. A SimpleProgressMonitor that sends progress to a log. Commands - Class in qupath.lib.gui.commands. Helper class implementing simple 'single-method' commands for easy inclusion in the GUI. Commands() - Constructor for class qupath.lib.gui.commands.Commands;  ; CommonActions - Class in qupath.lib.gui.actions. Default actions associated with a specific QuPath instance. CommonActions(QuPathGUI) - Constructor for class qupath.lib.gui.actions.CommonActions;  ; COMPARATOR_FULL - Static variable in class qupath.lib.common.Version. Compare full version, including any suffixes. COMPARATOR_MAJOR - Static variable in class qupath.lib.common.Version. Compare major versions only. COMPARATOR_MAJOR_MINOR - Static variable in class qupath.lib.common.Version. Compare major then minor versions. COMPARATOR_MAJOR_MINOR_PATCH - Static variable in class qupath.lib.common.Version. Compare major then minor then patch versions (ignoring suffixes). compare(PathObject, PathObject) - Method in class qupath.lib.objects.DefaultPathObjectComparator;  ; compare(ROI, ROI) - Method in class qupath.lib.roi.DefaultROIComparator;  ; compareTo(KaplanMeierData.KaplanMeierEvent) - Method in class qupath.lib.analysis.stats.survival.KaplanMeierData.KaplanMeierEvent;  ; compareTo(Version) - Method in class qupath.lib.common.Version;  ; compareTo(PathClass) - Method in class qupath.lib.objects.classes.PathClass. This is now equivalent to this.toString().compareTo(o.toString()). compareTo(ImagePlane) - Method in class qupath.lib.regions.ImagePlane. Compare with another ImagePlane, in the order t, z, c. completionCodeCombination - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; componentContains(double, double) - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; componentPointToImagePoint(double, double, Point2D, boolean) - Method in class qupath.lib.gui.viewer.QuPathViewer. Convert x and y c",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:127350,patch,patch,127350,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,"ropertyItemBuilder instead. Pane; getPane(). Get a pane to display. org.controlsfx.control.PropertySheet; getPropertySheet(). Get the property sheet for this PreferencePane. void; refreshAllEditors(). Request that all the property editors are regenerated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PreferencePane; public PreferencePane(). Method Details. getPropertySheet; public org.controlsfx.control.PropertySheet getPropertySheet(); Get the property sheet for this PreferencePane.; This is a Node that may be added to a scene for display. Returns:. getPane; public Pane getPane(); Get a pane to display. This includes the property sheet, and ; additional information that should be displayed to the user. Returns:; Since:; v0.5.0. refreshAllEditors; public void refreshAllEditors(); Request that all the property editors are regenerated.; This is useful if the Locale has changed, and so the text may need to be updated. addPropertyPreference; @Deprecated; public <T> void addPropertyPreference(Property<T> prop,; Class<? extends T> cls,; String name,; String category,; String description); Deprecated.; use PropertyItemBuilder instead. Add a new preference based on a specified Property. Parameters:; prop - ; cls - ; name - ; category - ; description - . addColorPropertyPreference; @Deprecated; public void addColorPropertyPreference(IntegerProperty prop,; String name,; String category,; String description); Deprecated.; use PropertyItemBuilder instead. Add a new color preference based on a specified IntegerProperty (storing a packed RGBA value). Parameters:; prop - ; name - ; category - ; description - . addDirectoryPropertyPreference; @Deprecated; public void addDirectoryPropertyPreference(Property<String> prop,; String name,; String category,; String description); Deprecated.; use PropertyItemBuilder instead. Add a new directory preference based on a specified S",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/PreferencePane.html:3596,update,updated,3596,javadoc/docs/qupath/lib/gui/panes/PreferencePane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/panes/PreferencePane.html,1,['update'],['updated']
Deployability,"roviderClass,; ImageServerMetadata metadata,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, and uses the specified metadata (possibly replacing the default metadata). Type Parameters:; T - ; Parameters:; providerClass - ; metadata - ; uri - ; args - ; Returns:. createInstance; public static <T>; ImageServerBuilder.ServerBuilder<T> createInstance(Class<? extends ImageServerBuilder<T>> providerClass,; URI uri,; String... args); Create a ImageServerBuilder.ServerBuilder that reads an image from a URI and args, using the default server metadata. Type Parameters:; T - ; Parameters:; providerClass - ; uri - ; args - ; Returns:. getURI; public URI getURI(); Get the URI used by this builder. Returns:. getArgs; public String[] getArgs(); Get the args array. This returns a clone of any original array. Returns:. buildOriginal; protected ImageServer<T> buildOriginal(); throws Exception. Specified by:; buildOriginal in class ImageServerBuilder.AbstractServerBuilder<T>; Throws:; Exception. getURIs; public Collection<URI> getURIs(); Description copied from interface: ImageServerBuilder.ServerBuilder; Get a list of URIs required by this builder.; The purpose is to identify resources that are required. Returns:; See Also:. ImageServerBuilder.ServerBuilder.updateURIs(Map). updateURIs; public ImageServerBuilder.ServerBuilder<T> updateURIs(Map<URI,URI> updateMap); Description copied from interface: ImageServerBuilder.ServerBuilder; Update the URIs required by this builder.; The purpose is to handle resources that may have moved (e.g. files).; Because ServerBuilder should be immutable, this returns a new builder. Parameters:; updateMap - ; Returns:; See Also:. ImageServerBuilder.ServerBuilder.getURIs(). toString; public String toString(). Overrides:; toString in class Object. hashCode; public int hashCode(). Overrides:; hashCode in class Object. equals; public boolean equals(Object obj). Overrides:; equals in class Object. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html:3842,update,updateURIs,3842,javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServerBuilder.DefaultImageServerBuilder.html,5,['update'],"['updateMap', 'updateURIs']"
Deployability,"rseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a StringVector. Parameters:; vector - ; Returns:. parseShape; public static List<DnnShape> parseShape(MatShapeVector vector); Extract Mat dimensions from a MatShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8095,patch,patch,8095,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"rsive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements). Create (optionally) transformed versions of the PathObject and all its descendants, recursively. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create (optionally) transformed versions of the PathObject and all its descendants, recursively, optionally assigning; new IDs to the created objects. static void; unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'unlocked'. static void; unlockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. static PathObject; updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane). Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object, and any descendant objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectTools; public PathObjectTools(). Method Details. hasPointROI; public static boolean hasPointROI(PathObject pathObject); Returns true if a PathObject has a Point ROI. Parameters:; pathObject - ; Returns:. countObjectsWithClass; public static int countObjectsWithClass(Collection<? extends PathObject> pathObjects,; PathClass pathClass,; boolean useBaseClass); Count the number of PathObjects in a collection with a specified class or base class. Par",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:14831,update,updatePlaneRecursive,14831,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['update'],['updatePlaneRecursive']
Deployability,"rtInteractive; public static void makeChartInteractive(Chart chart,; NumberAxis xAxis,; NumberAxis yAxis); Make it possible to select chart regions to zoom in, and scroll to navigate around it.; ; Also double-click to stop zooming. Parameters:; chart - ; xAxis - ; yAxis - . addChartExportMenu; public static void addChartExportMenu(XYChart<Number,Number> chart,; ContextMenu menu); Add a menu item to a context menu for displaying a chart for export. Parameters:; chart - ; menu - . setLineChartLegendLines; public static void setLineChartLegendLines(Chart chart,; double length); Charts tend to show their legends with circular/square markers... which isn't much use ; when line strokes distinguish between different Series.; ; This method addresses this by setting the graphics for legend labels to be lines with the appropriate strokes. Parameters:; chart - ; length - . expandChartClip; public static void expandChartClip(Chart chart,; double pad); Expand the clip region for a chart.; ; This helps to avoid clipping off markers at the chart boundaries. Parameters:; chart - ; pad - The amount by which to expand the clip rectangle in each direction; if < 0, the clip will be completely removed. setPieChartData; public static <T> void setPieChartData(PieChart chart,; Map<T,? extends Number> counts,; Function<T,String> stringFun,; Function<T,Color> colorFun,; boolean convertToPercentages,; boolean includeTooltips); Set pie chart data from a count map. Type Parameters:; T - the type of the data being counted; Parameters:; chart - the pie chart to update; counts - mapping between items and their counts; stringFun - function to extract a string from each item (may be null to use default toString() method); colorFun - function to extract a color from each item (may be null to use default colors); convertToPercentages - if true, convert counts to percentages; if false, use original values; includeTooltips - if true, install tooltips for each 'slice' to display the numeric information. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/ChartTools.html:3738,update,update,3738,javadoc/docs/qupath/lib/gui/charts/ChartTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/ChartTools.html,2,"['install', 'update']","['install', 'update']"
Deployability,"rties(PathObjectHierarchy) - Static method in class qupath.lib.gui.tools.GuiTools. Prompt the user to set properties for the currently-selected annotation(s). promptToSetFontSize() - Method in class qupath.lib.gui.scripting.DefaultScriptEditor. Update the font size for the script editor and console. promptToSetGridLineSpacing(OverlayOptions) - Static method in class qupath.lib.gui.commands.Commands. Prompt to input the spacing for the grid lines optionally displayed on viewers. promptToSetImageType(ImageData<BufferedImage>, ImageData.ImageType) - Static method in class qupath.lib.gui.panes.ImageDetailsPane. Prompt the user to set the ImageData.ImageType for the image. promptToSimplifySelectedAnnotations(ImageData<?>, double) - Static method in class qupath.lib.gui.commands.Commands. Show a prompt to selected annotations in a hierarchy. promptToUpdateUris(Collection<T>, URI, URI, boolean) - Static method in class qupath.lib.gui.commands.UpdateUrisCommand. Show dialog prompting the user to update URIs for missing files. PROP_JAVADOC_PATH - Static variable in class qupath.lib.gui.JavadocViewer. Name of the system property used to set the javadoc path. PROPERTIES - Static variable in class qupath.lib.gui.scripting.richtextfx.stylers.ScriptStylerProvider. Styler for Java properties files. PROPERTIES - Static variable in class qupath.lib.gui.scripting.syntax.ScriptSyntaxProvider;  ; PropertiesLanguage - Class in qupath.lib.gui.scripting.languages. Class for the representation of properties and config files in QuPath. PropertiesLanguage() - Constructor for class qupath.lib.gui.scripting.languages.PropertiesLanguage. Constructor for a Java properties as a script editor language. PropertiesStyler - Class in qupath.lib.gui.scripting.richtextfx.stylers. Styling to apply to a CodeArea, based on Java .properties and .cfg file syntax. PROPERTY_NAME_BACKGROUND_COLOR - Static variable in class qupath.lib.images.servers.openslide.jna.OpenSlide;  ; PROPERTY_NAME_BOUNDS_HEIGHT - Static",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:797807,update,update,797807,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"rty numCommandThreadsProperty(); Property specifying the preferred number of threads QuPath should use for multithreaded commands. Returns:. showImageNameInTitleProperty; public static BooleanProperty showImageNameInTitleProperty(); Property specifying if QuPath should show the image title in the main window title.; For privacy reasons it may be desirable to turn this off in some cases. Returns:. autoUpdateCheckProperty; public static ObjectProperty<PathPrefs.AutoUpdateType> autoUpdateCheckProperty(); Check for updates when launching QuPath, if possible. Returns:. maskImageNamesProperty; public static BooleanProperty maskImageNamesProperty(); Request that image names are hidden within the user interface. Returns:. defaultLocaleProperty; public static ObjectProperty<Locale> defaultLocaleProperty(); Get a property for setting the default Locale.; Setting this locale impacts both Locale.Category.FORMAT and Locale.Category.DISPLAY, ; and may trigger an update to defaultLocaleDisplayProperty() and defaultLocaleFormatProperty() ; if these have been changed. Returns:; an object property to control the locale; Since:; v0.4.0. defaultLocaleFormatProperty; public static ObjectProperty<Locale> defaultLocaleFormatProperty(); Get a property for setting the default Locale for Locale.Category.FORMAT.; Setting this property also results in the Locale being changed to match. Returns:; an object property to control the display locale. defaultLocaleDisplayProperty; public static ObjectProperty<Locale> defaultLocaleDisplayProperty(); Get a property for setting the default Locale for Locale.Category.DISPLAY.; Setting this property also results in the Locale being changed to match. Returns:; an object property to control the display locale. showStartupMessageProperty; public static BooleanProperty showStartupMessageProperty(); Show a startup message when QuPath is launched. Returns:. startupScriptProperty; public static StringProperty startupScriptProperty(); Path to a startup script tha",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html:44067,update,update,44067,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,1,['update'],['update']
Deployability,"rver. serverRegion(ImageRegion, double, ImageServer<BufferedImage>) - Method in class qupath.lib.images.servers.SparseImageServer.Builder. Add a region based on an existing ImageServer. ServerSelector - Class in qupath.lib.gui.panes. Helper class for selecting one image server out of a collection. ServerTools - Class in qupath.lib.images.servers. Static methods helpful when dealing with ImageServers. ServerTools() - Constructor for class qupath.lib.images.servers.ServerTools;  ; setAccelerator(String, String) - Method in class qupath.lib.gui.QuPathGUI. Set an accelerator for the specified menu command. setAccelerator(MenuItem, KeyCombination) - Method in class qupath.lib.gui.QuPathGUI. Set the accelerator for the specified menu item. setAccelerator(Action, KeyCombination) - Method in class qupath.lib.gui.QuPathGUI. Set the accelerator for the specified action. setActiveHandlePosition(double, double, double, boolean) - Method in class qupath.lib.roi.RoiEditor. If a handle has been grabbed, update its displacement. setActiveTool(PathTool) - Method in class qupath.lib.gui.viewer.QuPathViewer. Set the active PathTool for input to this viewer. setActiveViewer(QuPathViewer) - Method in class qupath.lib.gui.viewer.ViewerManager. Sets the value of the activeViewer property. setAll() - Static method in class qupath.lib.gui.logging.LogManager. Set the root log level to LogLevel.ALL. setAlphaComposite(Graphics2D) - Method in class qupath.lib.gui.viewer.overlays.AbstractOverlay;  ; setArgs(String[]) - Method in class qupath.lib.scripting.ScriptParameters.Builder. Set optional string args to pass to the script. setBatchIndex(int) - Method in class qupath.lib.scripting.ScriptParameters.Builder. Set the current image index for batch processing (default is 0). setBatchProjectAndImage(Project<BufferedImage>, ImageData<BufferedImage>) - Static method in class qupath.lib.scripting.QP. Set the Project and ImageData to use for batch processing for the current thread. setBatchSaveResult(b",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:912890,update,update,912890,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"rver<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - th",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8840,patch,patch,8840,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"rverMetadata.ChannelType; getOutputChannelType(). Get the requested output channel type. Map<Integer,PathClass>; getOutputClasses(). Get the classifications for the output. int; getPatchHeight(). Get the height of a patch, in pixels. int; getPatchWidth(). Get the width of a patch, in pixels. List<ImageOp>; getPostprocessing(). Get any postprocessing steps that should be applied after prediction. ImageOp; getPredictionOp(). Get the image op used for prediction only. List<ImageOp>; getPreprocessing(). Get any preprocessing steps that should be applied. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getInputChannels; public List<ColorTransforms.ColorTransform> getInputChannels(); Get the channels to extract from the image as input to the model. Returns:. getPatchWidth; public int getPatchWidth(); Get the width of a patch, in pixels. Returns:. getPatchHeight; public int getPatchHeight(); Get the height of a patch, in pixels. Returns:. getHalo; public Padding getHalo(); Get the 'halo' around the output.; This can be used to determine appropriate padding to ; avoid tile boundary artifacts. ; Can be null or empty. Returns:. getInputResolution; public PixelCalibration getInputResolution(); Get the requested input resolution for the image. Returns:. getOutputChannelType; public ImageServerMetadata.ChannelType getOutputChannelType(); Get the requested output channel type. Returns:. getOutputClasses; public Map<Integer,PathClass> getOutputClasses(); Get the classifications for the output.; Keys to the map are generally channel numbers of the output ; (zero-based), or could be labels in a single-channel labeled image. Returns:. getPreprocessing; public List<ImageOp> getPreprocessing(); Get any preprocessing steps that should be applied. Returns:. getPredictionOp; public ImageOp getPredictionOp(); Get the image op used for prediction only.; This is applied after any preproc",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html:2847,patch,patch,2847,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,1,['patch'],['patch']
Deployability,"rwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability)",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:11140,patch,patch,11140,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"s are not supported. Parameters:; pathObject - the template object; roiNew - the new ROI; roiNucleus - nucleus ROI; only relevant if the template object is a cell; Returns:; a new object with the same type and classification as the input object, but different ROI and ID.; Since:; v0.5.0. lockObjects; public static void lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'locked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. unlockObjects; public static void unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Coll",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:51717,update,update,51717,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['update'],['update']
Deployability,"s bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; public RegionRequest translate(int dx,; int dy); Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. Parameters:; dx - value to add to the x coordinate; dy - value to add to the y coordinate; Returns:; RegionRequest with the specified path value (may be this object unchanged). pad2D; public RegionRequest pad2D(int xPad,; int yPad); Add symmetric padding to the x and y dimensions of a request. Parameters:; xPad - padding to add along the x dimension; the width will be adjusted by xPad * 2; yPad - padding to add along the y dimension; the height will be adjusted by yPad * 2; Returns:; RegionRequest with the specified padding (may be this object unchanged if the padding is zero). pad2D; public RegionRequest pad2D(Padding padding); Add symme",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9902,update,updatePath,9902,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,3,['update'],"['updatePath', 'updated']"
Deployability,"s may be invalidated by; a call to PathPrefs.resetPreferences(). qupath.lib.gui.prefs.PathPrefs.useSystemMenubarProperty(). qupath.lib.gui.QuPathGUI.createSharedPoolCompletionService(Class<V>). since v0.5.0; use QuPathGUI.getThreadPoolManager(). qupath.lib.gui.QuPathGUI.createSingleThreadExecutor(Object). since v0.5.0; use QuPathGUI.getThreadPoolManager(). qupath.lib.gui.QuPathGUI.submitShortTask(Runnable). since v0.5.0; use QuPathGUI.getThreadPoolManager(). qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.createFeatureDisplayOverlay(OverlayOptions, Function<ImageData<BufferedImage>, ImageServer<BufferedImage>>, ImageRenderer). Use PixelClassificationOverlay.create(OverlayOptions, Function, ImageRenderer) instead. qupath.lib.images.servers.ImageServer.readBufferedImage(RegionRequest). since v0.4.0. Implementations of ImageServer should override ImageServer.readRegion(RegionRequest) instead.; This method will be removed in a future release; it exists now only to maintain compatibility with QuPath ; extensions that have not yet been updated to use the newer method. qupath.lib.images.servers.LabeledImageServer.Builder.useUniqueLabels(). in favor of LabeledImageServer.Builder.useInstanceLabels(). qupath.lib.images.servers.TileRequest.getPlane(). v0.4.0 use TileRequest.getImagePlane() instead (changed for better consistency with other classes). qupath.lib.images.writers.ome.OMEPyramidWriter.OMEPyramidSeries.writePyramid(String). use OMEPyramidWriter.OMEPyramidSeries.writeSeries(String) instead. qupath.lib.images.writers.ome.OMEPyramidWriter.OMEPyramidSeries.writePyramid(PyramidOMETiffWriter, IMetadata, int). use OMEPyramidWriter.OMEPyramidSeries.writeSeries(IFormatWriter, IMetadata, int) instead. qupath.lib.io.PathIO.getObjectFileExtensions(). use PathIO.getObjectFileExtensions(boolean) instead. qupath.lib.io.PathIO.readSerializedServerPath(File). This was useful in QuPath v0.1.2 and earlier, since all information to construct a server was stored within its path",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/deprecated-list.html:4949,release,release,4949,javadoc/docs/deprecated-list.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/deprecated-list.html,2,"['release', 'update']","['release', 'updated']"
Deployability,"s. HelpMenuActions;  ; HierarchyOverlay. An overlay capable of painting a PathObjectHierarchy, except for any ; TMA grid (which is handled by TMAGridOverlay). Histogram. Class for storing histogram data & basic statistics. HistogramChart. JavaFX chart for displaying histograms. HistogramChart.CountsTransformMode. Enum to specify how the counts are displayed. HistogramChart.DisplayMode. Display mode for the histogram. HistogramChart.HistogramData. Helper class for representing data that may be visualized with a HistogramChart. HistogramDisplay. Wrapper close to enable the generation and display of histograms relating to a data table. HtmlRenderer. Marker interface that indicates an executable language renders HTML. IconFactory. Factory class for creating icons. IconFactory.PathIcons. Default icons for QuPath commands. IJExtension. QuPath extension & associated static helper methods used to support integration of ImageJ with QuPath. IJExtension.IJExtensionCommands. Commands to install with the ImageJ extension. IJTools. Collection of static methods to help with using ImageJ with QuPath. ImageChannel. The name and display color for a single image channel. ImageData<T>. Class that brings together the main data in connection with the analysis of a single image. ImageData.ImageType. Enum representing possible image types. ImageDataOp. Request pixels from an image, potentially applying further transforms. ImageDataServer<T>. An ImageServer that wraps an ImageData. ImageDetailsPane. A panel used for displaying basic info about an image, e.g. ImageDisplay. Class used to look after the color transforms that may be applied to an image,; including brightness/contrast settings. ImageDisplaySettings. A simple class to store the main information needed by QuPath to display an image,; in a JSON-friendly form. ImageInterpolation. Supported interpolation methods when displaying images. ImageJMacroRunner. QuPath plugin for running ImageJ macros & returning detected regions. ImageJProce",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:21442,install,install,21442,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['install'],['install']
Deployability,"s. static TMACoreObject; getTMACoreForPixel(TMAGrid tmaGrid,; double x,; double y). Get the TMA core that contains the specified x & y coordinate, or null if no core is available for the coordinates give. static List<TMACoreObject>; getTMACoreObjects(PathObjectHierarchy hierarchy,; boolean includeMissingCores). Extract a list of TMA cores from an object hierarchy. static boolean; hasPointROI(PathObject pathObject). Returns true if a PathObject has a Point ROI. static boolean; hierarchyContainsObject(PathObjectHierarchy hierarchy,; PathObject pathObject). Check if a hierarchy contains a specified PathObject. static boolean; isAncestor(PathObject pathObject,; PathObject possibleAncestor). Query if one object is the ancestor of another. static void; lockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'locked'. static void; lockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'locked', firing an update event if the status of any object is changed. static Map<PathObject,PathObject>; matchByID(Collection<? extends PathObject> sourceObjects,; Collection<? extends PathObject> targetObjects). Match objects according to their IDs. static PathObject; mergeObjects(Collection<? extends PathObject> pathObjects). Merge objects by calculating the union of their ROIs. static <K> List<PathObject>; mergeObjects(Collection<? extends PathObject> pathObjects,; Function<? super PathObject,? extends K> classifier). Merge objects that share a property in common. static boolean; mergePointsForAllClasses(PathObjectHierarchy hierarchy). Merge point annotations sharing the same PathClass and ImagePlane, ; creating multi-point annotations for all matching points and removing the (previously-separated) annotations. static boolean; mergePointsForClass(PathObjectHierarchy hierarchy,; PathClass pathClass). Merge point annotations with the specified PathClass sharing the same ImagePlane, ; creating a single m",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:8484,update,update,8484,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['update'],['update']
Deployability,"s.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource. Update the specified URIs. updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.DnnObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVDnn;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVModelObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.opencv.ops.ImageOp. Default implementation makes no changes; classes should override this if necessary. UpdateUrisCommand<T> - Class in qupath.lib.gui.commands. Fix broken URIs by using relative paths or prompting the user to select files. updateZ(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated z value. updatingConstrainingObjects(QuPathViewer, double, double, Collection<PathObject>) - Method in class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler. New annotations can be constrained while they are being drawn, to avoid overlaps with existing annotations; or to ensure they are drawn within a parent annotation. updatingConst",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1068230,update,updateURIs,1068230,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateURIs']
Deployability,"s.bioformats.BioFormatsOptionsExtension. All Implemented Interfaces:; QuPathExtension. public class BioFormatsOptionsExtension; extends Object; implements QuPathExtension; A QuPath extension that adds options relating to the BioFormatsImageServer to the main QuPath preference pane. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; BioFormatsOptionsExtension.BioFormatsPreferences;  ; static class ; BioFormatsOptionsExtension.OmeTiffWriterAction;  . Constructor Summary; Constructors. Constructor; Description; BioFormatsOptionsExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. BioFormatsOptionsExtension; public BioFormatsOptionsExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied fr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html:1449,install,installExtension,1449,javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/bioformats/BioFormatsOptionsExtension.html,1,['install'],['installExtension']
Deployability,"s:; UriResource, ImageOp. Enclosing class:; ImageOps. public abstract static class ImageOps.PaddedOp; extends Object; implements ImageOp; Abstract ImageOp to simplify the process of handling padding. Constructor Summary; Constructors. Constructor; Description; PaddedOp();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; Mat; apply(Mat input). Apply operation to the image. protected abstract Padding; calculatePadding(). Calculate the required padding. Padding; getPadding(). Get the padding requested for this operation. protected abstract List<Mat>; transformPadded(Mat input). Apply the op, but ignoring padding. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.ops.ImageOp; getChannels, getOutputType, getURIs, updateURIs. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. PaddedOp; public PaddedOp(). Method Details. calculatePadding; protected abstract Padding calculatePadding(); Calculate the required padding. Returns:. transformPadded; protected abstract List<Mat> transformPadded(Mat input); Apply the op, but ignoring padding.; Non-empty padding will be removed automatically elsewhere.; ; This should return a list rather than merged channels, because this makes it possible to strip the padding; before merging to create the final output to apply(Mat) (since this can be much more efficient).; ; Nevertheless, if the output channels are already merged, then a singleton list should be returned -; there is no need to split channels, because the list items themselves can have any number of channels. Parameters:; input - ; Returns:. apply; public Mat apply(Mat input); Description copied from interface: ImageOp; Apply operation to the image. The input may be modified (and the operation applied in-place), ; therefore should",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOps.PaddedOp.html:1470,update,updateUris,1470,javadoc/docs/qupath/opencv/ops/ImageOps.PaddedOp.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOps.PaddedOp.html,1,['update'],['updateUris']
Deployability,"s;  ; PASTE_TO_PLANE - Variable in class qupath.lib.gui.actions.menus.EditMenuActions.Actions;  ; pasteAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; pasteAndEscapeAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; pasteFromClipboard(QuPathGUI, boolean) - Static method in class qupath.lib.gui.commands.Commands. Attempt to paste objects from the system clipboard to the current image, if available; ; otherwise, check for text on the clipboard and paste it into a new script editor tab. pasteFromClipboard(ScriptEditorControl<?>, boolean) - Static method in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; PatchClassifierParams - Class in qupath.opencv.ml. Parameters required to build a classifier that operates on an image patch. PatchClassifierParams.Builder - Class in qupath.opencv.ml. Builder class to create PatchClassifierParams. patchSize(int) - Method in class qupath.opencv.ml.PatchClassifierParams.Builder. Define the requested square patch size. patchSize(int, int) - Method in class qupath.opencv.ml.PatchClassifierParams.Builder. Define the requested patch size. PathAnnotationObject - Class in qupath.lib.objects. An annotation PathObject. PathAnnotationObject() - Constructor for class qupath.lib.objects.PathAnnotationObject. Default constructor. PathCellObject - Class in qupath.lib.objects. A subclass of a PathDetectionObject, which also supports storing an (optional) extra ROI to represent ; the cell nucleus. PathCellObject() - Constructor for class qupath.lib.objects.PathCellObject. Default constructor. PathClass - Class in qupath.lib.objects.classes. Representation of an object's classification - which can be defined using any unique string; identifier (e.g. PathClass.StandardPathClasses - Class in qupath.lib.objects.classes. Enum representing standard classifications. PathClassFactory - Class in qupath.lib.objects.classes. Deprecated.; since v0.4.0 in favor of methods added to PathClass directly. PathC",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:751533,patch,patch,751533,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,"sample - scaling factor (1.0 to use the calibration directly); Returns:. inputResolution; public PatchClassifierParams.Builder inputResolution(PixelCalibration cal); Define the input resolution using a pixel calibration object. Parameters:; cal - ; Returns:. halo; public PatchClassifierParams.Builder halo(int padding); Define a halo that is symmetric in x and y. Parameters:; padding - padding value, to be added both before and after rows and columns.; Returns:; See Also:. halo(Padding). halo; public PatchClassifierParams.Builder halo(Padding halo); Define a halo using a padding object. Parameters:; halo - ; Returns:; See Also:. halo(int). patchSize; public PatchClassifierParams.Builder patchSize(int patchSize); Define the requested square patch size. Parameters:; patchSize - width and height of the patch; Returns:. patchSize; public PatchClassifierParams.Builder patchSize(int patchWidth,; int patchHeight); Define the requested patch size. Parameters:; patchWidth - requested patch width; patchHeight - requested patch height; Returns:. preprocessing; public PatchClassifierParams.Builder preprocessing(ImageOp... preprocessingOps); Define the preprocessing steps from an array.; Note that any existing preprocessing steps in the builder will ; be replaced by those provided here. Parameters:; preprocessingOps - ; Returns:. preprocessing; public PatchClassifierParams.Builder preprocessing(Collection<? extends ImageOp> preprocessingOps); Define the preprocessing steps from a collection.; Note that any existing preprocessing steps in the builder will ; be replaced by those provided here. Parameters:; preprocessingOps - ; Returns:. prediction; public PatchClassifierParams.Builder prediction(ImageOp predictionOp); Define the prediction image op, to be applied after preprocessing ; and before postprocessing. Parameters:; predictionOp - ; Returns:; See Also:. prediction(DnnModel, Padding, String...). prediction; public PatchClassifierParams.Builder prediction(DnnModel model,; Padd",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html:5653,patch,patchWidth,5653,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.Builder.html,4,['patch'],"['patch', 'patchHeight', 'patchWidth']"
Deployability,"scripting.DefaultScriptEditor;  ; insertQPImportAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; insertSelectedObjectsInHierarchy(ImageData<?>) - Static method in class qupath.lib.gui.commands.Commands. Insert the selected objects in the hierarchy, resolving positions accordingly. insertText(int, String) - Method in interface qupath.lib.gui.scripting.EditableText. Request inserting the specified text. insertText(int, String) - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; insertText(int, String) - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; installActions(Collection<? extends Action>) - Method in class qupath.lib.gui.QuPathGUI. Install the specified actions. installColorMaps(Path...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps from the specified paths. installColorMaps(ColorMaps.ColorMap...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps. installCommand(String, Runnable) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath. installDefaultFeatureClassificationBuilder(ImageDataTransformerBuilder) - Static method in class qupath.process.gui.commands.ml.PixelClassifierPane. Add to the list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEdi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:607161,install,installCommand,607161,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installCommand']
Deployability,"scription copied from interface: ROI; Returns the y coordinate for the top left of the ROI bounding box. Specified by:; getBoundsY in interface ROI; Returns:. getBoundsWidth; public double getBoundsWidth(); Description copied from interface: ROI; Returns the width of the ROI bounding box. Specified by:; getBoundsWidth in interface ROI; Returns:. getBoundsHeight; public double getBoundsHeight(); Description copied from interface: ROI; Returns the height of the ROI bounding box. Specified by:; getBoundsHeight in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Beware this method! This will return all polygon points (useful e.g. for convex hull calculations), but; since the area itself isn't necessarily polygonal then tracing through the points does *not* necessarily ; result in the same shape as that which the area represents. Specified by:; getAllPoints in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:; Throws:; UnsupportedOperationException - because AreaROI is a legacy class that is no longer supported. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:9721,update,updatePlane,9721,javadoc/docs/qupath/lib/roi/AreaROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html,2,['update'],['updatePlane']
Deployability,"sent, a radio menu item will be returned; Returns:; a new MenuItem configured according to the action. createCheckMenuItem; public static MenuItem createCheckMenuItem(org.controlsfx.control.action.Action action); Create a menu item from an action that makes use of a selected property.; This stores a reference to the action as a property of the menu item. Parameters:; action - the action from which to construct the menu item; Returns:; a new MenuItem configured according to the action. createCheckBox; public static CheckBox createCheckBox(org.controlsfx.control.action.Action action); Create a checkbox from an action.; This stores a reference to the action as a property of the checkbox. Parameters:; action - the action from which to construct the checkbox; Returns:; a new CheckBox configured according to the action. createToggleButtonWithGraphicOnly; public static ToggleButton createToggleButtonWithGraphicOnly(org.controlsfx.control.action.Action action); Create a toggle button from an action, showing only the graphic and not any text.; This stores a reference to the action as a property of the toggle button. Parameters:; action - ; Returns:. createToggleButton; public static ToggleButton createToggleButton(org.controlsfx.control.action.Action action); Create a toggle button from an action, showing both the text and graphic if available.; This stores a reference to the action as a property of the toggle button. Parameters:; action - ; Returns:. createButton; public static Button createButton(org.controlsfx.control.action.Action action); Create a button from an action, showing both the text and graphic if available.; This stores a reference to the action as a property of the button. Parameters:; action - the action from which to construct the button; Returns:; a new Button configured according to the action. createButtonWithGraphicOnly; public static Button createButtonWithGraphicOnly(org.controlsfx.control.action.Action action); Create a button from an action, showing ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html:11961,toggle,toggle,11961,javadoc/docs/qupath/lib/gui/actions/ActionTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html,1,['toggle'],['toggle']
Deployability,"ses and Interfaces. SEARCH. Package qupath.opencv.ml. package qupath.opencv.ml. QuPath classes to apply machine learning to pixels and objects using OpenCV. Related Packages. Package; Description; qupath.opencv. Detection plugins using OpenCV. qupath.opencv.ml.objects. QuPath object classifiers using OpenCV. qupath.opencv.ml.pixel. QuPath pixel classifiers using OpenCV. qupath.opencv.dnn. QuPath classes to use OpenCV's DNN module. qupath.opencv.features. Classes for feature calculation using OpenCV. qupath.opencv.io. Support for serializing and deserializing OpenCV objects. qupath.opencv.ops. Image operations, implemented with OpenCV. qupath.opencv.tools. Additional processing methods for use with OpenCV Mats. Classes. Class; Description; BioimageIoTools. Helper class for working with Bioimage Model Zoo model specs, and attempting to ; replicating the processing within QuPath. FeaturePreprocessor. Create a preprocessor for an image or training matrix. FeaturePreprocessor.Builder. Builder to create a custom FeaturePreprocessor. OpenCVClassifiers. QuPath wrappers for OpenCV classifiers, which are instances of StatModel. OpenCVClassifiers.BoostClassifier. Classifier based on Boost. OpenCVClassifiers.DTreesClassifier. Classifier based on DTrees. OpenCVClassifiers.EMClusterer. Clusterer based on EM. OpenCVClassifiers.LogisticRegressionClassifier. Classifier based on LogisticRegression. OpenCVClassifiers.NormalBayesClassifierCV. Classifier based on NormalBayesClassifier. OpenCVClassifiers.OpenCVStatModel. Wrapper class for a StatModel, which standardizes how training may be performed and ; parameters can be set. OpenCVClassifiers.RTreesClassifier. Classifier based on RTrees. OpenCVClassifiers.SVMClassifierCV. Classifier based on SVM. OpenCVClassifiers.SVMSGDClassifierCV. Classifier based on SVMSGD. PatchClassifierParams. Parameters required to build a classifier that operates on an image patch. PatchClassifierParams.Builder. Builder class to create PatchClassifierParams. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/package-summary.html:2192,patch,patch,2192,javadoc/docs/qupath/opencv/ml/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/package-summary.html,1,['patch'],['patch']
Deployability,"sfx.control.action.Action POLYGON_TOOL. POLYLINE_TOOL; @ActionAccelerator(""v""); @ActionConfig(""Tools.polyline""); public final org.controlsfx.control.action.Action POLYLINE_TOOL. BRUSH_TOOL; @ActionAccelerator(""b""); @ActionConfig(""Tools.brush""); public final org.controlsfx.control.action.Action BRUSH_TOOL. LINE_TOOL; @ActionAccelerator(""l""); @ActionConfig(value=""Tools.line"",; bindLocale=false); public final org.controlsfx.control.action.Action LINE_TOOL. POINTS_TOOL; @ActionAccelerator("".""); @ActionConfig(""Tools.points""); public final org.controlsfx.control.action.Action POINTS_TOOL. SELECTION_MODE; @ActionAccelerator(""shift+s""); @ActionIcon(SELECTION_MODE); @ActionConfig(""Tools.selectionMode""); public final org.controlsfx.control.action.Action SELECTION_MODE. Method Details. create; public static ToolManager create(); Create a new instance. Returns:. getTools; public ObservableList<PathTool> getTools(); Get a read-only list of all available tools.; If you wish to add a new one, use installTool(PathTool, KeyCodeCombination). Returns:. selectedToolProperty; public ReadOnlyObjectProperty<PathTool> selectedToolProperty(); Property containing the currently-selected PathTool.; If this needs to be changed, use setSelectedTool(PathTool) to ensure that ; isToolSwitchingEnabled() has an effect. Returns:; See Also:. getSelectedTool(); setSelectedTool(PathTool). lockSelectedToolProperty; public BooleanProperty lockSelectedToolProperty(); Property to request that the selected tool be locked.; Calls to setSelectedTool(PathTool) are discarded until the tool is unlocked. Returns:. installTool; public boolean installTool(PathTool tool,; KeyCodeCombination accelerator); Install a new tool for interacting with viewers. Parameters:; tool - the tool to add; accelerator - an optional accelerator (may be null); Returns:; true if the tool was added, false otherwise (e.g. if the tool had already been added). setSelectedTool; public void setSelectedTool(PathTool tool); Programmatically selec",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ToolManager.html:5496,install,installTool,5496,javadoc/docs/qupath/lib/gui/ToolManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/ToolManager.html,1,['install'],['installTool']
Deployability,"sificationMap); Create an OutputHandler.OutputToObjectConverter to convert Mat labeled images to; path objects, optionally setting the classification. Parameters:; creator - the creator function to determine the type of object (e.g. detection, annotation); classificationMap - a map used to convert labels intoo; Returns:; the converter. createObjectConverter; public static <S,; T>; OutputHandler.OutputToObjectConverter<S,T,Mat> createObjectConverter(BiFunction<ROI,Number,PathObject> creator); Create an OutputHandler.OutputToObjectConverter to convert Mat binary or labeled images; to path objects, optionally using the label number. Parameters:; creator - the creator function to determine the type of object (e.g. detection, annotation).; The second argument is the label, which can be used e.g. to set a classification.; Returns:; the converter. builder; public static PixelProcessor.Builder<Mat,Mat,Mat> builder(Processor<Mat,Mat,Mat> processor); Create a PixelProcessor.Builder for an OpenCV Mat.; By default, this will attempt to convert any labeled or binary image output to unclassified detection objects -; but the builder may be further customized to override this behavior before building the processor. Parameters:; processor - ; Returns:. createMatImageSupplier; public static ImageSupplier<Mat> createMatImageSupplier(); Create an ImageSupplier that returns an OpenCV Mat. Returns:. createMatMaskSupplier; public static MaskSupplier<Mat,Mat> createMatMaskSupplier(); Create a MaskSupplier that returns an OpenCV Mat. Returns:. wrapInPointerScope; public static <S,; T,; U> Processor<S,T,U> wrapInPointerScope(Processor<S,T,U> processor); Wrap a processor in a second processor that uses a PointerScope to ensure that pointers are released; (except for any output).; ; If the input is a processor that is already known to have this behavior, it is returned unchanged. Type Parameters:; S - the image type; T - the mask type; U - the output type; Parameters:; processor - ; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/OpenCVProcessor.html:8595,release,released,8595,javadoc/docs/qupath/lib/experimental/pixels/OpenCVProcessor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/OpenCVProcessor.html,1,['release'],['released']
Deployability,"sificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that it may be reset later.; ; Note: classification probabilities are not retained using this approach. Parameters:; pathObjects - the objects containing classifications; Returns:; a mapping between objects and their current classifications; See Also:. restoreClassificationsFromMap(Map). restoreClassificationsFromMap; public static Collection<PathObject> restoreClassificationsFromMap(Map<PathObject,PathClass> classificationMap); Reassign classifications to objects, as were previously obtained using createClassificationMap(Collection). Parameters:; classificationMap - the map containing objects and the classifications that should be applied; Returns:; a collection containing all objects with classifications that were changed. This can be used to fire update events.; See Also:. createClassificationMap(Collection). getRepresentedPathClasses; public static Set<PathClass> getRepresentedPathClasses(PathObjectHierarchy hierarchy,; Class<? extends PathObject> cls); Get a set of the represented path classes, i.e. those with at least 1 manually-labelled object. Parameters:; hierarchy - ; cls - ; Returns:. setIntensityClassification; public static PathClass setIntensityClassification(PathObject pathObject,; String measurementName,; double... thresholds); Assign cell classifications as positive or negative based upon a specified measurement, using up to 3 intensity bins.; ; An IllegalArgumentException is thrown if < 1 or > 3 intensity thresholds are provided.; If the object does not have the required measurement, its PathClass will be set to its ; first 'non-intensity' ancestor PathClass.; ; Note that as of v0.3.0, all ignored classes (see PathClassTools.isIgnoredClass(PathClass) are ignored and therefore ; will not be 'intensity classi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:53887,update,update,53887,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['update'],['update']
Deployability,"singleton dimensions. readObjects(File) - Static method in class qupath.lib.io.PathIO. Read a list of PathObject from a file. readObjects(Path) - Static method in class qupath.lib.io.PathIO. Read a list of PathObject from a file. readObjectsFromClipboard(ImageData<BufferedImage>) - Static method in class qupath.lib.gui.commands.InteractiveObjectImporter. Try to read objects from the system clipboard. readObjectsFromGeoJSON(InputStream) - Static method in class qupath.lib.io.PathIO. Read a list of PathObject from an input stream. readOnlyProperty() - Method in class qupath.lib.gui.QuPathGUI. Property indicating whether QuPath is in 'read-only' mode. readPatch(ImageServer<BufferedImage>, ROI, double, int, int) - Static method in class qupath.opencv.dnn.DnnTools. Read an image patch, optionally with a fixed size and using zero-padding if required. readPatch(ImageServer<BufferedImage>, ROI, double, int, int, int) - Static method in class qupath.opencv.dnn.DnnTools. Read an image patch, optionally with a fixed size. readPathObjects() - Method in class qupath.imagej.images.servers.ImageJServer;  ; readPathObjects() - Method in class qupath.lib.gui.images.servers.ChannelDisplayTransformServer;  ; readPathObjects() - Method in interface qupath.lib.objects.PathObjectReader. Read a collection of objects from the source. readPoints(File) - Static method in class qupath.lib.io.PointIO. Read a list of point annotations from a file. readPoints(InputStream) - Static method in class qupath.lib.io.PointIO. Read a list of point annotations from a stream. readPointsObjectList(File) - Static method in class qupath.lib.io.PointIO. Deprecated. readRegion(double, int, int, int, int) - Method in interface qupath.lib.images.servers.ImageServer. Read a 2D(+C) image region from the default ImagePlane (i.e. readRegion(double, int, int, int, int, int, int) - Method in interface qupath.lib.images.servers.ImageServer. Read a 2D(+C) image region for a specified z-plane and timepoint. readRegion(Reg",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:826422,patch,patch,826422,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['patch'],['patch']
Deployability,"sionClassifier. Classifier based on LogisticRegression. OpenCVClassifiers.NormalBayesClassifierCV. Classifier based on NormalBayesClassifier. OpenCVClassifiers.OpenCVStatModel. Wrapper class for a StatModel, which standardizes how training may be performed and ; parameters can be set. OpenCVClassifiers.RTreesClassifier. Classifier based on RTrees. OpenCVClassifiers.SVMClassifierCV. Classifier based on SVM. OpenCVClassifiers.SVMSGDClassifierCV. Classifier based on SVMSGD. OpenCVDnn. Wrapper for an OpenCV Net, including essential metadata about how it should be used. OpenCVDnn.Builder. Helper class to build an OpenCVDnn. OpenCVDnn.ModelType. Enum representing different classes of Model supported by OpenCV. OpenCVDnnModelBuilder. A DnnModelBuilder implementation that uses OpenCV's DNN module ; to build a Net. OpenCVMLClassifier<T>. An ObjectClassifier that uses an OpenCVClassifiers.OpenCVStatModel for classification. OpenCVModelObjectClassifier. Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN. OpenCVProcessor. Class to generate a PixelProcessor when using OpenCV for the primary image representation. OpenCVTools. Collection of static methods to help with using OpenCV from Java. OpenCVTools.IndexedPixel. Class representing the indices of a pixel and its value. OpenCVTypeAdapters. Helper classes for combining OpenCV's JSON serialization with Gson's. OpenCVTypeAdapters.OpenCVTypeAdapter<T>. TypeAdapter that helps include OpenCV-based objects within a Java object being serialized to JSON. OpenCVTypeAdapters.OpenCVTypeAdaptorFactory. TypeAdapterFactory that helps make OpenCV's serialization methods more compatible with custom JSON/Gson serialization. OpenSlide. Minimal Java wrapper for OpenSlide. OpenSlide.OpenSlideDisposedException. Exception thrown whenever a request is made after the OpenSlide object has been closed. OpenSlideExtension;  ; OpenslideImageServer. ImageServer implementation using OpenSlide. OpenSlideJNA. JNA interface f",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:35054,patch,patch-based,35054,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['patch'],['patch-based']
Deployability,"sis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Upd",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1063408,update,updateImage,1063408,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateImage']
Deployability,"sis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriResource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource. Update the specified URIs. updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.DnnObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVDnn;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVModelObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.opencv.ops.ImageOp. Default implementation makes no changes; classes should override this if necessary. UpdateUrisCommand<T> - Class in qupath.lib.gui.commands. Fix broken URIs by using relative paths or prompting the user to select files. updateZ(int) - Method in cl",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1067781,update,updateUris,1067781,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateUris']
Deployability,"sityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) -",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1063689,update,updateMeasurements,1063689,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateMeasurements']
Deployability,"so:. buildModel(ModelType). initializeModel; public void initializeModel(Model model); Initialize the model with the same preprocessing defined here (i.e. input size, mean, scale, crop, swapRB). Parameters:; model - . getName; public String getName(); Get a user-readable name for this model, or null if no name is specified. Returns:. getScale; public Double getScale(); Get scale factors to be applied to preprocess input. Returns:; the scale value if specified, or null if default scaling should be used; See Also:. getMean(). getModelType; public OpenCVDnn.ModelType getModelType(); Get the type of the model that would be built with buildModel(). Returns:. getMean; public Scalar getMean(); Get means which should be subtracted for preprocessing. Returns:; the mean value if specified, or null if OpenCV's default should be used (likely to be zero); See Also:. getScale(). getModelUri; public URI getModelUri(); Get the path to the model. Returns:. getConfigUri; public URI getConfigUri(); Get the path to the model configuration, if required. Returns:. getFramework; public String getFramework(); Get the framework used to create the model. Returns:. builder; public static OpenCVDnn.Builder builder(String pathModel); Create a new builder. Parameters:; pathModel - ; Returns:. getURIs; public Collection<URI> getURIs(); throws IOException; Description copied from interface: UriResource; Get all the URIs required for this resource. This is often an empty or singleton list. Specified by:; getURIs in interface UriResource; Returns:; the required URIs; Throws:; IOException. updateURIs; public boolean updateURIs(Map<URI,URI> replacements); throws IOException; Description copied from interface: UriResource; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use o",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:5131,configurat,configuration,5131,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,1,['configurat'],['configuration']
Deployability,"sonExportOptions... options). Export the selected objects to an output file as GeoJSON. static boolean; fileExists(String path). Query if a file exists. static void; findDensityMapHotspots(String densityMapName,; int channel,; int numHotspots,; double minCounts,; boolean deleteExisting,; boolean peaksOnly). Find hotspots in a density map for the current image. static void; findDensityMapHotspots(ImageData<BufferedImage> imageData,; String densityMapName,; int channel,; int numHotspots,; double minCounts,; boolean deleteExisting,; boolean peaksOnly). Find hotspots in a density map. static void; findDensityMapHotspots(ImageData<BufferedImage> imageData,; DensityMaps.DensityMapBuilder densityMap,; int channel,; int numHotspots,; double minCounts,; boolean deleteExisting,; boolean peaksOnly). Find hotspots in a density map. static void; fireHierarchyUpdate(). Trigger an update for the current hierarchy. static void; fireHierarchyUpdate(PathObjectHierarchy hierarchy). Trigger an update for the specified hierarchy. static Collection<PathObject>; getAllObjects(). Get all objects in the current hierarchy, including the root object. static Collection<PathObject>; getAllObjects(boolean includeRootObject). Get all objects in the current hierarchy. static Collection<PathObject>; getAnnotationObjects(). Get a list of the current annotation objects. static PathClass; getBasePathClass(PathObject pathObject). Get a base class - which is either a valid PathClass which is *not* an intensity class, or else null. static Collection<PathObject>; getCellObjects(). Get a list of the current cell objects. static Integer; getColorRGB(int... v). Deprecated.; Use instead makeRGB(int, int, int) or makeARGB(int, int, int, int). static Collection<Class<?>>; getCoreClasses(). Get a list of core classes that are likely to be useful for scripting. static PathObjectHierarchy; getCurrentHierarchy(). Get the PathObjectHierarchy of the current ImageData. static ImageData<BufferedImage>; getCurrentImageDa",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:17241,update,update,17241,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['update'],['update']
Deployability,"splay in the QuPath viewer; Returns:; Throws:; IOException. extractOverlay; public static Overlay extractOverlay(PathObjectHierarchy hierarchy,; RegionRequest request,; OverlayOptions options,; Predicate<PathObject> filter); Extract an ImageJ overlay for the specified region. Parameters:; hierarchy - ; request - ; options - options to control which objects are being displayed; filter - optional additional filter used to determine which objects will be included (may be used in combination with options); Returns:. getImageJIcon; public static Image getImageJIcon(int width,; int height); Try to read the ImageJ icon from its jar. Parameters:; width - ; height - ; Returns:. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns the version stored within this jar, because it is matched to the QuPath version. Specified by:; getQuPathVersion in interface QuPathExtension; Returns:; a semantic version corresponding to a QuPath version, e.g. ""0.3.0"".; See Also:. Version. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:7555,install,installExtension,7555,javadoc/docs/qupath/imagej/gui/IJExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html,1,['install'],['installExtension']
Deployability,"ss qupath.lib.color.ColorMaps. Install colormaps from the specified paths. installColorMaps(ColorMaps.ColorMap...) - Static method in class qupath.lib.color.ColorMaps. Install colormaps. installCommand(String, Runnable) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath. installDefaultFeatureClassificationBuilder(ImageDataTransformerBuilder) - Static method in class qupath.process.gui.commands.ml.PixelClassifierPane. Add to the list of default feature calculator builders that will be available when ; this pane is opened. installDragAndDropHandler(QuPathGUI) - Static method in class qupath.lib.gui.commands.TMACommands. Command to install a drag and drop file handler for exported TMA data. installExtension(QuPathGUI) - Method in class qupath.ext.openslide.OpenSlideExtension;  ; installExtension(QuPathGUI) - Method in class qupath.imagej.gui.IJExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.extension.svg.SvgExtension;  ; installExtension(QuPathGUI) - Method in interface qupath.lib.gui.extensions.QuPathExtension. Install the extension for a QuPathGUI instance. installExtension(QuPathGUI) - Method in class qupath.lib.gui.scripting.richtextfx.RichScriptEditorExtension;  ; installExtension(QuPathGUI) - Method in class qupath.lib.images.servers.bioformats.BioFormatsOptionsExtension;  ; installExtension(QuPathGUI) - Method in class qupath.process.gui.ProcessingExtension;  ; installGroovyCommand(String, File) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installGroovyCommand(String, String) - Method in class qupath.lib.gui.QuPathGUI. Install a Groovy script as a new command in QuPath. installImageDataCommand(String, Consumer<ImageData<BufferedImage>>) - Method in class qupath.lib.gui.QuPathGUI. Install a new command in QuPath that takes the current ImageData as input. installInfoMessage(Action, ObjectExpression<InfoMessage>) - Static method in class qupath.lib.gui.actions.ActionT",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:607954,install,installExtension,607954,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['install'],['installExtension']
Deployability,"ss qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServerBuilder.ServerBuilder. Update the URIs required by this builder. updateURIs(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource. Update the specified URIs. updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.DnnObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVDnn;  ; updateURIs(Map<URI, URI>) - Method in class qupath.opencv.dnn.OpenCVModelObjectClassifier;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.opencv.ops.ImageOp. Default implementation makes no changes; classes should override this if necessary. UpdateUrisCommand<T> - Class in qupath.lib.gui.commands. Fix broken URIs by using relative paths or prompting the user to select files. updateZ(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated z value. updatingConstrainingObjects(QuPathViewer, double, double, Collection<PathObject>) - Method in class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler. New annotations can be constrained while they are being drawn, to avoid overlaps with existing annotations; or to ensure they are drawn within a parent annotation. updatingConstrainingObjects(QuPathViewer, double, double, Collection<PathObject>) - Method in class qupath.lib.gui.viewer.tools.handlers.MoveToolEventHandler. New annotations can be constrained while they are being drawn, to avoid overlaps with existing an",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1068486,update,updateURIs,1068486,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateURIs']
Deployability,"ssContrastChannelPane();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; ReadOnlyObjectProperty<ChannelDisplayInfo>; currentChannelProperty(). Get the currently-selected channel. ReadOnlyBooleanProperty; currentChannelVisible(). Read-only property indicating whether the currently-selected channel is visible,; i.e. BooleanProperty; disableToggleMenuItemsProperty(). Property to disable options to toggle the visibility of channels. MultipleSelectionModel<ChannelDisplayInfo>; getSelectionModel(). Get the selection model for the channels. ObjectProperty<ImageDisplay>; imageDisplayProperty(). Property for the image display that should be shown and managed by this pane. boolean; isEmpty(). Query if the table is empty, i.e. void; setHideChannel(ChannelDisplayInfo channel). Request that the specified channel is hidden. void; setShowChannel(ChannelDisplayInfo channel). Request that the specified channel is shown. void; toggleShowHideChannel(ChannelDisplayInfo channel). Toggle the visibility of the specified channel. void; updateTable(). Ensure the table is up-to-date. Methods inherited from class javafx.scene.layout.BorderPane; bottomProperty, centerProperty, clearConstraints, computeMinHeight, computeMinWidth, computePrefHeight, computePrefWidth, getAlignment, getBottom, getCenter, getContentBias, getLeft, getMargin, getRight, getTop, layoutChildren, leftProperty, rightProperty, setAlignment, setBottom, setCenter, setLeft, setMargin, setRight, setTop, topProperty. Methods inherited from class javafx.scene.layout.Pane; getChildren. Methods inherited from class javafx.scene.layout.Region; backgroundProperty, borderProperty, cacheShapeProperty, centerShapeProperty, computeMaxHeight, computeMaxWidth, getBackground, getBorder, getClassCssMetaData, getCssMetaData, getHeight, getInsets, getMaxHeight, getMaxWidth, getMinHeight, getMinWidth, getOpaqueInsets, getPadding, getPrefHeight, getPrefWidth, getShape, getUserAgentStyleshee",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html:4248,toggle,toggleShowHideChannel,4248,javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html,1,['toggle'],['toggleShowHideChannel']
Deployability,"sses:; AbstractImageServer, AbstractTileableImageServer, AffineTransformImageServer, BioFormatsImageServer, ChannelDisplayTransformServer, ChannelTransformFeatureServer, CroppedImageServer, ImageJServer, LabeledImageServer, OpenslideImageServer, PathHierarchyImageServer, PixelClassificationImageServer, RearrangeRGBImageServer, RenderedImageServer, RotatedImageServer, SparseImageServer, TransformingImageServer, WrappedBufferedImageServer. public interface ImageServer<T>; extends AutoCloseable; Generic ImageServer, able to return pixels and metadata.; ; The idea behind making this generic was that it could be used on various platforms and with different UIs, e.g. Swing, JavaFX, ; or with different kinds of image reader.; In practice, the generic parameter is almost always BufferedImage.; ; Important! The readBufferedImage(RegionRequest) method was replaced by readRegion(RegionRequest) in ; v0.4.0. Implementing classes need only to worry about overriding readRegion(RegionRequest) - and legacy implementations ; should be updated to override the new method rather than the old one.; Default implementations of both methods exist to try to ease the transition, but this may change in the future and ; readBufferedImage(RegionRequest) is likely to be removed. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault MethodsDeprecated Methods. Modifier and Type; Method; Description; T; getAssociatedImage(String name). Get the image for a given associated image name. List<String>; getAssociatedImageList(). Get a list of 'associated images', e.g. default ImageServerBuilder.ServerBuilder<T>; getBuilder(). Get a ServerBuilder capable of building a server the same as this one. T; getCachedTile(TileRequest tile). Get a cached tile, or null if the tile has not been cached. ImageChannel; getChannel(int channel). Request information for one channel (0-based index). T; getDefaultThumbnail(int z,; int t). Get the default thumbnail for a specified z-slice a",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:1579,update,updated,1579,javadoc/docs/qupath/lib/images/servers/ImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html,1,['update'],['updated']
Deployability,"ssify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10694,patch,patch,10694,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,2,['patch'],['patch']
Deployability,"sted; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.extension.svg; Class SvgExtension. java.lang.Object; qupath.lib.extension.svg.SvgExtension. All Implemented Interfaces:; QuPathExtension. public class SvgExtension; extends Object; implements QuPathExtension; Extension for SVG image export. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; class ; SvgExtension.SvgActions;  . Constructor Summary; Constructors. Constructor; Description; SvgExtension();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. Version; getQuPathVersion(). Returns the version stored within this jar, because it is matched to the QuPath version. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.gui.extensions.QuPathExtension; getVersion. Constructor Details. SvgExtension; public SvgExtension(). Method Details. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtensio",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/extension/svg/SvgExtension.html:1154,install,installExtension,1154,javadoc/docs/qupath/lib/extension/svg/SvgExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/extension/svg/SvgExtension.html,1,['install'],['installExtension']
Deployability,"sted | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class Workflow. java.lang.Object; qupath.lib.plugins.workflow.Workflow. All Implemented Interfaces:; Externalizable, Serializable. public class Workflow; extends Object; implements Externalizable; A collection of steps that relate to how an image has been - or should be - processed.; ; This can also be used to implement a 'command history'.; ; Where the WorkflowSteps contained in the Workflow are scriptable, then a ; script can be created automatically. Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; Workflow();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; void; addStep(WorkflowStep step). Append a new step to the end of the workflow, firing an update event. void; addSteps(Collection<WorkflowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWor",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:1265,update,update,1265,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,1,['update'],['update']
Deployability,"surements,; boolean createNewIDs). Create a transformed version of a PathObject, optionally with a new ID. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements). Create (optionally) transformed versions of the PathObject and all its descendants, recursively. static PathObject; transformObjectRecursive(PathObject pathObject,; AffineTransform transform,; boolean copyMeasurements,; boolean createNewIDs). Create (optionally) transformed versions of the PathObject and all its descendants, recursively, optionally assigning; new IDs to the created objects. static void; unlockObjects(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects). Set specified objects to be 'unlocked'. static void; unlockSelectedObjects(PathObjectHierarchy hierarchy). Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. static PathObject; updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane). Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. static PathObject; updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs). Update the ROI plane for a single object, and any descendant objects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. PathObjectTools; public PathObjectTools(). Method Details. hasPointROI; public static boolean hasPointROI(PathObject pathObject); Returns true if a PathObject has a Point ROI. Parameters:; pathObject - ; Returns:. countObjectsWithClass; public static int countObjectsWithClass(Collection<? extends PathObject> pa",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:14665,update,updatePlane,14665,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,1,['update'],['updatePlane']
Deployability,"t ROIs. Parameters:; cls - ; Returns:. getCellObjects; public Collection<PathObject> getCellObjects(); Get all cell objects in the hierarchy. Returns:. getTileObjects; public Collection<PathObject> getTileObjects(); Get all tile objects in the hierarchy. Returns:. getDetectionObjects; public Collection<PathObject> getDetectionObjects(); Get all detection objects in the hierarchy (including sub-classes of detections). Returns:. getAnnotationObjects; public Collection<PathObject> getAnnotationObjects(); Get all annotation objects in the hierarchy. Returns:. getObjects; public Collection<PathObject> getObjects(Collection<PathObject> pathObjects,; Class<? extends PathObject> cls); Get all objects in the hierarchy, optionally filtering to return only objects that are instances of a specific class.; Note that this method returns the root object, unless it has been filtered out. Parameters:; pathObjects - ; cls - ; Returns:. updateObject; public void updateObject(PathObject pathObject,; boolean isChanging); Update an object that is already in the hierarchy (e.g. because its ROI has changed). Parameters:; pathObject - the object to update; isChanging - if true, indicate that the object is still being changed.; Some listeners may delay processing in expectation of an update event where isChanging is false. getFlattenedObjectList; public List<PathObject> getFlattenedObjectList(List<PathObject> list); Get a flattened list containing all PathObjects in the hierarchy (including from the root object).; ; To get a flattened list containing all PathObjects without the root object, one can run the following:; getFlattenedObjectList(null).stream().filter(p -> !p.isRootObject()).toList(). Or, since v0.4.0, just use getAllObjects(boolean) instead. Parameters:; list - ; Returns:; Since:; getAllObjects(boolean). getAllObjects; public Collection<PathObject> getAllObjects(boolean includeRoot); Get all the objects in the hierarchy, optionally including the root object. Parameters:; includeR",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:16681,update,updateObject,16681,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,2,['update'],['updateObject']
Deployability,"t as a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; file - the Groovy script to run; note that this will be reloaded each time it is required; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, String). installGroovyCommand; public MenuItem installGroovyCommand(String menuPath,; String script); Install a Groovy script as a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; script - the Groovy script to run; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, File). installImageDataCommand; public MenuItem installImageDataCommand(String menuPath,; Consumer<ImageData<BufferedImage>> command); Install a new command in QuPath that takes the current ImageData as input.; The command will only be enabled when an image is available. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; command - the command to run; Returns:; the MenuItem for the command; See Also:. installCommand(String, Runnable). installCommand; public MenuItem installCommand(String menuPath,; Runnable runnable); Install a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu it",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:21728,install,installGroovyCommand,21728,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['install'],['installGroovyCommand']
Deployability,"t is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that it may be reset later.; ; Note: classification probabilities are not retained using this approach. Parameters:; pathObjects - the objects containing classifications; Returns:; a mapping between objects and their current classifications; See Also:. restoreClassificationsFromMap(Map). restoreClassificationsFromMap; public static Collection<PathObject> restoreClassificationsFromMap(Map<PathObjec",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:52502,update,update,52502,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,2,['update'],['update']
Deployability,"t the 'maximum' color, which defines the lookup table to use. void; setMaxDisplay(float maxDisplay). Set the max display value for this channel. void; setMinDisplay(float minDisplay). Set the min display value for this channel. void; setMinMaxAllowed(float minAllowed,; float maxAllowed). Set the maximum permissible range for the image display. String; toString();  ; void; updateRGBAdditive(BufferedImage img,; int[] rgb,; ChannelDisplayMode mode). Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. int; updateRGBAdditive(BufferedImage img,; int x,; int y,; int rgb,; ChannelDisplayMode mode). Update an existing pixel (packed RGB) additively using the color used to display a specified one. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.display.ChannelDisplayInfo; getMaxAllowed, getMaxDisplay, getMethod, getMinAllowed, getMinDisplay, isBrightnessContrastRescaled, updateRGBAdditive. Field Details. df; protected static final DecimalFormat df. CM_GRAYSCALE; protected static final IndexColorModel CM_GRAYSCALE. CM_GRAYSCALE_INVERTED; protected static final IndexColorModel CM_GRAYSCALE_INVERTED. minAllowed; protected float minAllowed. maxAllowed; protected float maxAllowed. minDisplay; protected float minDisplay. maxDisplay; protected float maxDisplay. clipToAllowed; protected boolean clipToAllowed. Constructor Details. DirectServerChannelInfo; public DirectServerChannelInfo(ImageData<BufferedImage> imageData,; int channel); Constructor. Parameters:; imageData - the image; channel - the channel number (0-based index). Method Details. getChannel; public int getChannel(); Get the channel number. Returns:. getName; public String getName(); Description copied from interface: ChannelDisplayInfo; Get the channel name. This may also be returned by the toString() method. Returns:. getColorModel; protected Co",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html:5198,update,updateRGBAdditive,5198,javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/DirectServerChannelInfo.html,1,['update'],['updateRGBAdditive']
Deployability,"t the moment). Stage; getStage(). Get the main QuPath stage. SharedThreadPoolManager; getThreadPoolManager(). Get a SharedThreadPoolManager to help with submitting tasks in other threads. ToolBar; getToolBar(). Get the main toolbar. ToolManager; getToolManager(). Get the ToolManager that handles available and selected tools. UndoRedoManager; getUndoRedoManager(). Get the UndoRedoManager, which can be useful if needing to clear it in cases where available memory is low. static Version; getVersion(). Get the current QuPath version. QuPathViewer; getViewer(). Get the currently active viewer. ViewerActions; getViewerActions(). Get the associations associated with QuPath image viewers. ViewerManager; getViewerManager(). Get the viewer manager, which gives access to all the viewers available within this QuPath instance. ReadOnlyObjectProperty<ImageData<BufferedImage>>; imageDataProperty(). Read-only property containing the image open within the currently-active viewer. void; installActions(Collection<? extends org.controlsfx.control.action.Action> actions). Install the specified actions. MenuItem; installCommand(String menuPath,; Runnable runnable). Install a new command in QuPath. MenuItem; installGroovyCommand(String menuPath,; File file). Install a Groovy script as a new command in QuPath. MenuItem; installGroovyCommand(String menuPath,; String script). Install a Groovy script as a new command in QuPath. MenuItem; installImageDataCommand(String menuPath,; Consumer<ImageData<BufferedImage>> command). Install a new command in QuPath that takes the current ImageData as input. boolean; isReadOnly(). Query whether QuPath is in 'read-only' mode. boolean; isStandalone(). Query whether this is a standalone QuPathGUI instance, as flagged during startup. static void; launchInstanceFromSwing(). Static method to launch QuPath from within a Swing/AWT application. Object; lookupAccelerator(String combo). Get the action or menu item associated with an accelerator. Object; lookupAccele",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:6344,install,installActions,6344,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['install'],['installActions']
Deployability,"t this will be reloaded each time it is required; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, String). installGroovyCommand; public MenuItem installGroovyCommand(String menuPath,; String script); Install a Groovy script as a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; script - the Groovy script to run; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, File). installImageDataCommand; public MenuItem installImageDataCommand(String menuPath,; Consumer<ImageData<BufferedImage>> command); Install a new command in QuPath that takes the current ImageData as input.; The command will only be enabled when an image is available. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; command - the command to run; Returns:; the MenuItem for the command; See Also:. installCommand(String, Runnable). installCommand; public MenuItem installCommand(String menuPath,; Runnable runnable); Install a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; runnable - the command to run; Returns:; the MenuItem for the command. This can be further customized if needed. runScript; public Object runScript(File file,; String script); throws ScriptException,; IllegalArgumentException; Convenience method to execute a script.; Either a script",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:22086,install,installed,22086,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['install'],['installed']
Deployability,"t, int, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Get all the objects in a collection that are outside a defined region, expanded for multiple z-slices and timepoints. findRegionalMaxima(ImageProcessor, float, boolean) - Static method in class qupath.imagej.processing.MorphologicalReconstruction. Find regional maxima using morphological reconstruction. findRegionalMaxima(Mat) - Static method in class qupath.opencv.tools.OpenCVTools. Get the regional maxima within a Mat, providing the output as a labeled image. finishTranslation() - Method in class qupath.lib.roi.RoiEditor. Notify the editor that translation should end. fireHierarchyChangedEvent(Object) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating the hierarchy structure has changed. fireHierarchyChangedEvent(Object, PathObject) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. fireHierarchyUpdate() - Static method in class qupath.lib.scripting.QP. Trigger an update for the current hierarchy. fireHierarchyUpdate(PathObjectHierarchy) - Static method in class qupath.lib.scripting.QP. Trigger an update for the specified hierarchy. fireImageDataChanged(ImageData<BufferedImage>, ImageData<BufferedImage>) - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; fireObjectClassificationsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object classifications have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Fire a hierarchy update indicating object measurements have changed. fireObjectMeasurementsChangedEvent(Object, Collection<? extends PathObject>, boolean) - Method in class qupath.lib.objects",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:308866,update,update,308866,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"t. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlan",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1063825,update,updateObject,1063825,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateObject']
Deployability,"t; Central storage of QuPath preferences.; ; Most of these are 'persistent', and stored in a platform-dependent way using ; Java's Preferences API. Author:; Pete Bankhead. Property Summary; Properties. Type; Property; Description; static DoubleProperty; allredMinPercentagePositive. The minimum positive percentage of cells for Allred proportion score to be non-zero. static BooleanProperty; alwaysPaintSelectedObjects. Always paint selected objects in the viewer, even if the opacity setting is 0. static DoubleProperty; annotationStrokeThickness. Preferred stroke thickness to use when drawing annotation ROIs. static DoubleProperty; autoBrightnessContrastSaturationPercent. Controls percentage of saturated pixels to apply when automatically setting brightness/contrast. static ObjectProperty<PathClass>; autoSetAnnotationClass. Classification that should automatically be applied to all new annotations. static ObjectProperty<PathPrefs.AutoUpdateType>; autoUpdateCheck. Check for updates when launching QuPath, if possible. static BooleanProperty; brushCreateNewObjects. Create new objects by default when drawing with the Brush tool. static IntegerProperty; brushDiameter. Default brush tool diameter, in pixels. static BooleanProperty; brushScaleByMag. Optionally scale the default brush tool diameter by the viewer magnification (downsample value). static BooleanProperty; clipROIsForHierarchy. Request ROIs to be clipped and inserted as the right place in the hierarchy when drawing ; (to prevent overlapping ROIs being created accidentally). static IntegerProperty; colorDefaultObjects. The default color used to display objects of any type, where a default has not otherwise been specified. static IntegerProperty; colorSelectedObject. The default color used to display selected objects. static IntegerProperty; colorTile. The default color used to display tile objects. static IntegerProperty; colorTMAMissing. The default color used to display missing TMA core objects. static IntegerProp",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html:1442,update,updates,1442,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.html,1,['update'],['updates']
Deployability,"tBuilder; imageData(ImageData<?> imageData). Specify an ImageData object. Charts.PieChartBuilder; legend(boolean show). Specify whether the legend should be shown or not. Charts.PieChartBuilder; legend(String side). Specify the side of the chart where the legend should be shown. Charts.PieChartBuilder; legend(Side side). Specify the side of the chart where the legend should be shown. Charts.PieChartBuilder; markerOpacity(double opacity). Specify the marker opacity. Charts.PieChartBuilder; parent(Window parent). Set the parent window. Stage; show(). Add the chart to a stage, and show it in the Application thread. Charts.PieChartBuilder; size(double width,; double height). Set the preferred size of the chart. Charts.PieChartBuilder; title(String title). Specify the chart title. Charts.PieChartBuilder; tooltips(boolean showTooltips). Request tooltips to be shown when the cursor hovers over the pie chart. Stage; toStage(). Add the chart to a stage, but do not show it. protected void; updateChart(PieChart chart). Method that applies properties of this builder to the chart. Charts.PieChartBuilder; viewer(QuPathViewer viewer). Specify a viewer. Charts.PieChartBuilder; width(double width). Set the preferred width of the chart. Charts.PieChartBuilder; windowTitle(String title). Title to use for the window, if the chart is shown. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. viewer; protected QuPathViewer viewer. imageData; protected ImageData<?> imageData. title; protected String title. legendVisible; protected boolean legendVisible. legendSide; protected Side legendSide. markerOpacity; protected double markerOpacity. width; protected double width. height; protected double height. Method Details. getThis; protected Charts.PieChartBuilder getThis(). createNewChart; protected PieChart createNewChart(). getDefaultWindowTitle; protected String getDefaultWindowTitle(); Get a",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/Charts.PieChartBuilder.html:2724,update,updateChart,2724,javadoc/docs/qupath/lib/gui/charts/Charts.PieChartBuilder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/Charts.PieChartBuilder.html,1,['update'],['updateChart']
Deployability,"tHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; update",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1064176,update,updatePath,1064176,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updatePath']
Deployability,"tList.MeasurementListType. Enum representing different types of measurement list, with different priorities regarding ; flexibility and efficiency. MeasurementListFactory. Factory for creating new measurement lists. MeasurementMapPane. Component used for displaying measurement maps, whereby detection objects are recolored ; according to measurement values. MeasurementMapper. Helpers class that can be used to map an object's measurement to a color (packed RGB int). MeasurementProcessor. Create PixelProcessor instances that make measurements from objects. MeasurementProcessor.CustomMeasurement<S,T>. Interface for calculating one custom measurement from an image, using Parameters. MeasurementProcessor.Functions. Functions for calculating measurements from an array of pixels. MeasurementProcessor.Measurements. Methods to create custom measurements. MeasureMenuActions;  ; MenuActions. Common interface to define the contents of a menu in terms of actions. Menus. Generate actions for installation in QuPath's main menubar. MenuTools. Static methods to help with creating and populating JavaFX menus. MetadataStore. Interface that may be used to indicate that a PathObject (or other object) can store metadata. MiniViewers. Command to open a small viewer window, which displays a detail from ; the current image depending on where the cursor is over the image. MiniViewers.MiniViewerManager. A manager for one or more mini-viewers, where the 'more' means a separate viewer per channel. MorphologicalReconstruction. Implementation of morphological reconstruction for ImageJ. MorphologicalReconstruction. Implementation of 2D morphological reconstruction, using 8-connectivity & a hybrid method. MoveToolEventHandler. The MoveTool is used for quite a lot of things, movement-related:; movement around an image (panning), moving ROIs (translating) and moving individual; 'handles' of ROIs (resizing/reshaping). MoveToolEventHandler.ViewerMover. Helper class for panning a QuPathViewer (reasonably",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:29395,install,installation,29395,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['install'],['installation']
Deployability,"tShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. r",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8322,patch,patch,8322,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,3,['patch'],['patch']
Deployability,"taIO. Static methods for exporting TMA data, optionally with small images. TMADearrayer. Static methods used by the TMA dearrayer plugin. TMADearrayerPluginIJ. Plugin for automatically dearraying tissue microarrays (TMAs). TMAExplorer. The aim of this is to enable the exploration of TMA data from multiple images in a project. TMAGrid. Interface defining a (rectangular) TMA grid. TMAGridOverlay. An overlay capable of painting a TMA Grid. TMAMenuActions;  ; TMAScoreImporter. Helper class for importing data in connection with TMA slides. TMASummaryViewer; Deprecated.; since v0.4.0. ToolManager. Manage (drawing) tool selection in a QuPath UI. TransformedServerBuilder. Helper class for creating an ImageServer that applies one or more transforms to another (wrapped) ImageServer. TransformingImageServer<T>. An ImageServer implementation used to apply transforms to another ImageServer. UndoRedoManager. Helper class to add undo/redo support to QuPath. UpdateChecker. Helper class to query for updates using GitHub's web API. UpdateChecker.ReleaseVersion. Class to represent a release version. UpdateUrisCommand<T>. Fix broken URIs by using relative paths or prompting the user to select files. UriResource. Interface for objects that depend upon URIs. UriUpdater<T>. Helper class for updating URIs, for example whenever files have moved or projects have been transferred between computers. UriUpdater.SingleUriItem. Wrapper for a URI, providing access to a Path if available. UriUpdater.UriStatus. Enum representing the status of a URI, i.e. Urls. Class to return core QuPath URLs centrally. UserDirectoryManager. Helper class for managing a user directory, and associated subdirectories. Version. Helper class for working with semantic versioning. ViewerActions. Actions that interact with one or more viewers. ViewerManager. Class to manage multiple QuPathViewer instances in a UI region. ViewerPlusDisplayOptions. A group of properties determining what should be displayed for each viewer. Vi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:59313,update,updates,59313,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['update'],['updates']
Deployability,"te the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean)",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1064473,update,updatePlane,1064473,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updatePlane']
Deployability,"ted objects to an output file as GeoJSON. static void; exportSelectedObjectsToGeoJson(String path,; PathIO.GeoJsonExportOptions... options). Export the selected objects to an output file as GeoJSON. static boolean; fileExists(String path). Query if a file exists. static void; findDensityMapHotspots(String densityMapName,; int channel,; int numHotspots,; double minCounts,; boolean deleteExisting,; boolean peaksOnly). Find hotspots in a density map for the current image. static void; findDensityMapHotspots(ImageData<BufferedImage> imageData,; String densityMapName,; int channel,; int numHotspots,; double minCounts,; boolean deleteExisting,; boolean peaksOnly). Find hotspots in a density map. static void; findDensityMapHotspots(ImageData<BufferedImage> imageData,; DensityMaps.DensityMapBuilder densityMap,; int channel,; int numHotspots,; double minCounts,; boolean deleteExisting,; boolean peaksOnly). Find hotspots in a density map. static void; fireHierarchyUpdate(). Trigger an update for the current hierarchy. static void; fireHierarchyUpdate(PathObjectHierarchy hierarchy). Trigger an update for the specified hierarchy. static Collection<PathObject>; getAllObjects(). Get all objects in the current hierarchy, including the root object. static Collection<PathObject>; getAllObjects(boolean includeRootObject). Get all objects in the current hierarchy. static Collection<PathObject>; getAnnotationObjects(). Get a list of the current annotation objects. static PathClass; getBasePathClass(PathObject pathObject). Get a base class - which is either a valid PathClass which is *not* an intensity class, or else null. static Collection<PathObject>; getCellObjects(). Get a list of the current cell objects. static Integer; getColorRGB(int... v). Deprecated.; Use instead makeRGB(int, int, int) or makeARGB(int, int, int, int). static Collection<Class<?>>; getCoreClasses(). Get a list of core classes that are likely to be useful for scripting. static PathObjectHierarchy; getCurrentHierar",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:17131,update,update,17131,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['update'],['update']
Deployability,"teps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size(). Total number of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); Total number of steps in the workflow. Returns:. isEmpty; public boolean isEmpty(); Returns true if the workflow does not contain any steps. Returns:. clear; public void clear(); Remove all steps, firing an update event if the workflow was not previously empty. fireWorkflowUpdatedEvent;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:3224,update,update,3224,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,1,['update'],['update']
Deployability,"terChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.h",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1062912,update,updated,1062912,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability,"th.lib.common.ColorTools. Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. unpackARGB(int, int[]) - Static method in class qupath.lib.common.ColorTools. Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. unpackRGB(int) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. unpackRGB(int, int[]) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. UNSET - Enum constant in enum class qupath.lib.images.ImageData.ImageType. Image type has not been set. unzippedExtensions(Path, String...) - Static method in class qupath.lib.io.PathIO. Get the extension of a file, or of all entries within a zip file. UPDATE - Variable in class qupath.lib.gui.actions.menus.HelpMenuActions.Actions;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewerPlus;  ; updateAvailableStyles() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Request that the list of available styles is updated. updateBounds(double, double) - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1061300,update,updateAffineTransform,1061300,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateAffineTransform']
Deployability,"thViewer. Requests that the viewer cancels either the x- or y-axis direction. requestDecelerate() - Method in class qupath.lib.gui.viewer.QuPathViewer. Request that a viewer decelerate any existing panning smoothly. requestedPixelSize(double) - Method in class qupath.lib.images.writers.TileExporter. Define resolution as a pixel size in calibrated units. requestFocus() - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; requestFocus() - Method in interface qupath.lib.gui.scripting.ScriptEditorControl. Request that the control is focused. requestFocus() - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; requestFollowCaret() - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; requestFollowCaret() - Method in interface qupath.lib.gui.scripting.ScriptEditorControl. Request that the X and Y scrolls are adjusted to ensure the caret is visible. requestFullUpdateCheck() - Method in class qupath.lib.gui.QuPathGUI. Request a manual update check in a background thread. requestHierarchyUpdate() - Method in class qupath.lib.plugins.AbstractPlugin. Optionally request a hierarchy update after the tasks have run. requestImageTile(ImageServer<BufferedImage>, RegionRequest, Map<RegionRequest, BufferedImage>, boolean) - Method in class qupath.lib.gui.images.stores.DefaultImageRegionStore. Request an image tile. requestLazyInitialize() - Method in class qupath.opencv.dnn.DnnModelParams. Request that any model is loaded lazily on demand. requestNewHandle(double, double) - Method in class qupath.lib.roi.RoiEditor. Request an updated ROI with a new handle inserted - useful e.g. requestParallelization() - Method in class qupath.lib.images.servers.bioformats.BioFormatsServerOptions. Returns true if multiple readers may be created for different threads, to enable parallel image reading. requestParentClipping(MouseEvent) - Method in class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler. Query whether parent clipping should be a",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:857557,update,update,857557,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['update']
Deployability,"the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; borderPadding - the border padding for out-of-bounds requests, for use with OpenCV's copyMakeBorder; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int). classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException; Apply a classification model to an image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Retu",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:9067,patch,patch,9067,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,3,['patch'],['patch']
Deployability,"the input object containing those considered outside the region; Since:; v0.4.0; See Also:. findObjectsOutsideRegion(Collection, ImageRegion, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object, and any descendant objects. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane; createNewIDs - if true, create new IDs for the object (recommended); Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlane(PathObject, ImagePlane, boolean, boolean). updatePlaneRecursive; public static PathObject updatePlaneRecursive(PathObject pathObject,; ImagePlane plane); Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; Returns:; the new object, with ROIs on the requested plane; Since:; v0.4.0; See Also:. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). updatePlane; public static PathObject updatePlane(PathObject pathObject,; ImagePlane plane,; boolean copyMeasurements,; boolean createNewIDs); Update the ROI plane for a single object.; Any child objects are discarded; if these should also be copied (and updated), ; use updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean). Parameters:; pathObject - the original object (this will be unchanged); plane - the plane for the new ROIs; copyMeasurements - if true, measurements and metadata should be copied; this may not be suitable since ; intensity measurements probably aren't appropriate for the new plane",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:21657,update,updatePlaneRecursive,21657,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,2,['update'],['updatePlaneRecursive']
Deployability,"the main QuPath window. void; requestAutomaticUpdateCheck(). Request an automated update check in a background thread. void; requestFullUpdateCheck(). Request a manual update check in a background thread. boolean; resetAvailablePathClasses(). Populate the availablePathClasses with a default list. boolean; runPlugin(PathPlugin<BufferedImage> plugin,; String arg,; boolean doInteractive). Run a plugin, interactively (i.e. Object; runScript(File file,; String script). Convenience method to execute a script. void; sendQuitRequest(). Request to quit QuPath. boolean; setAccelerator(String menuCommand,; String combo). Set an accelerator for the specified menu command. boolean; setAccelerator(MenuItem item,; KeyCombination combo). Set the accelerator for the specified menu item. boolean; setAccelerator(org.controlsfx.control.action.Action action,; KeyCombination combo). Set the accelerator for the specified action. void; setProject(Project<BufferedImage> project). Set the active project, triggering any necessary GUI updates. void; setReadOnly(boolean readOnly). Specify whether QuPath should be in 'read-only' mode. void; setScriptEditor(ScriptEditor scriptEditor). Set a new ScriptEditor, which will be used from now on. BooleanProperty; showAnalysisPaneProperty();  ; BooleanProperty; showInputDisplayProperty(). Property to indicate whether the input display is currently showing. void; submitShortTask(Runnable runnable). Deprecated.; since v0.5.0; use getThreadPoolManager(). ObservableValue<Boolean>; uiBlocked(). Observable value indicating that the user interface is/should be blocked. ReadOnlyObjectProperty<QuPathViewer>; viewerProperty(). Property representing the viewer currently active. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Property Details. showAnalysisPane; public BooleanProperty showAnalysisPaneProperty. See Also:. showAnalysisPaneProperty(). readOnly; public ReadOnlyBool",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:9981,update,updates,9981,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['update'],['updates']
Deployability,"the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); Create a request for the full width and height of an",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:4187,update,updateZ,4187,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,1,['update'],['updateZ']
Deployability,"thod in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int[], ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an array of existing pixels (packed RGB) additively using the colors to display a specified image. updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in class qupath.lib.display.DirectServerChannelInfo;  ; updateRGBAdditive(BufferedImage, int, int, int, ChannelDisplayMode) - Method in interface qupath.lib.display.ChannelDisplayInfo. Update an existing pixel (packed RGB) additively using the color used to display a specified one. updateRunningStatistics(RunningStatistics, SimpleImage) - Static method in class qupath.lib.analysis.stats.StatisticsHelper. Add all pixels from a SimpleImage to an existing RunningStatistics object. updateServerMetadata(ImageServerMetadata) - Method in class qupath.lib.images.ImageData. Update the ImageServer metadata. updateServerURIs(Map<URI, URI>) - Method in interface qupath.lib.projects.ProjectImageEntry. Deprecated.; use instead UriResource.updateURIs(Map). updateStatus(ParallelTileObject.Status) - Method in class qupath.lib.plugins.ParallelTileObject. Notify the object if it is currently being processed. updateT(int) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated t value. updateTable() - Method in class qupath.lib.gui.commands.display.BrightnessContrastChannelPane. Ensure the table is up-to-date. updateTranslation(double, double, ImageRegion) - Method in class qupath.lib.roi.RoiEditor. Update a ROI by translation, optionally constraining its movement within a specified boundary. updateUris(Map<URI, URI>) - Method in interface qupath.lib.io.UriResource;  ; updateURIs(Map<URI, URI>) - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder;  ; updateURIs(Map<URI, URI>) - Method in interface qupath.lib.images.servers.ImageServer",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1067033,update,updateServerURIs,1067033,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateServerURIs']
Deployability,"thod in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Up",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1064542,update,updatePlane,1064542,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updatePlane']
Deployability,"thodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static PatchClassifierParams.Builder; builder(). Create a builder to generate new patch classifier params. static PatchClassifierParams.Builder; builder(PatchClassifierParams params). Create a builder to generate new patch classifier params, ; initialized with the values from an existing parameter object. static PixelClassifier; buildPixelClassifier(PatchClassifierParams params). Build a pixel classifier using these parameters. Padding; getHalo(). Get the 'halo' around the output. List<ColorTransforms.ColorTransform>; getInputChannels(). Get the channels to extract from the image as input to the model. PixelCalibration; getInputResolution(). Get the requested input resolution for the image. ImageServerMetadata.ChannelType; getOutputChannelType(). Get the requested output channel type. Map<Integer,PathClass>; getOutputClasses(). Get the classifications for the output. int; getPatchHeight(). Get the height of a patch, in pixels. int; getPatchWidth(). Get the width of a patch, in pixels. List<ImageOp>; getPostprocessing(). Get any postprocessing steps that should be applied after prediction. ImageOp; getPredictionOp(). Get the image op used for prediction only. List<ImageOp>; getPreprocessing(). Get any preprocessing steps that should be applied. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. getInputChannels; public List<ColorTransforms.ColorTransform> getInputChannels(); Get the channels to extract from the image as input to the model. Returns:. getPatchWidth; public int getPatchWidth(); Get the width of a patch, in pixels. Returns:. getPatchHeight; public int getPatchHeight(); Get the height of a patch, in pixels. Returns:. getHalo; public Padding getHalo(); Get the 'halo' around the output.; This can be used to determine appropriate padding to ; avoid tile boundary artifacts. ; Can",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html:2038,patch,patch,2038,javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/PatchClassifierParams.html,1,['patch'],['patch']
Deployability,"through this editor. Returns:. ensureHandlesUpdated; public void ensureHandlesUpdated(); In the event that the current ROI has been modified elsewhere (which generally it shouldn't be); request the handles to be recomputed to avoid inconsistency. getHandles; public List<Point2> getHandles(); Get all the handles for the current ROI being edited, or an empty list if no handles are available. Returns:. hasROI; public boolean hasROI(); Returns true if this editor currently has a ROI. Returns:. getROI; public ROI getROI(); Retrieve the ROI currently being edited (may be null). Returns:. hasActiveHandle; public boolean hasActiveHandle(); Returns true if a handle is currently active, for example being reposition. Returns:; See Also:. getHandles(). resetActiveHandle; public void resetActiveHandle(); Ensure that no handle is active. requestNewHandle; public ROI requestNewHandle(double x,; double y); Request an updated ROI with a new handle inserted - useful e.g. when drawing a polygon. Parameters:; x - ; y - ; Returns:. grabHandle; public boolean grabHandle(double x,; double y,; double maxDist,; boolean shiftDown); Try to grab a ROI handle.; This will fail (return false, with an error logged) if isTranslating() returns true. Parameters:; x - ; y - ; maxDist - define the distance to search for the nearest handle; shiftDown - determined from a MouseEvent, this may optionally be used to control how the handle is modified ; (e.g. to enforce a square bounding box for a rectangle or ellipse).; Returns:. setActiveHandlePosition; public ROI setActiveHandlePosition(double x,; double y,; double minDisplacement,; boolean shiftDown); If a handle has been grabbed, update its displacement. Parameters:; x - ; y - ; minDisplacement - if > 0, smaller movements will be discarded to avoid unnecessary work.; shiftDown - determined from a MouseEvent, this may optionally be used to control how the handle is modified ; (e.g. to enforce a square bounding box for a rectangle or ellipse).; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiEditor.html:6871,update,update,6871,javadoc/docs/qupath/lib/roi/RoiEditor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/RoiEditor.html,1,['update'],['update']
Deployability,"ting objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. qupath.lib.projects. Classes and interfaces related to projects, which are used to manage multiple images. qupath.lib.regions. Defines immutable classes for representing image planes and regions. qupath.lib.roi. Classes that define regions of interest (ROIs). qupath.lib.roi.interfaces. Interface that define regions of interest (ROIs). qupath.lib.scripting. Defines helper class for running scripts. qupath.lib.scripting.languages. Base classes for defining scripting languages that QuPath can support. qupath.opencv. Detection plugins using OpenCV. qupath.opencv.dnn. QuPath classes to use OpenCV's DNN module. qupath.opencv.features. Classes for feature calculation using OpenCV. qupath.opencv.io. Support for serializing and deserializing OpenCV objects. qupath.opencv.ml. QuPath classes to apply machine learning to pixels and objects using OpenCV. qupath.opencv.ml.objects. QuPath object classifiers using OpenCV. qupath.opencv.ml.objects.features. Extract object features using OpenCV. qupath.opencv.ml.pixel. QuPath pixel classifiers using OpenCV. qupath.opencv.ops. Image operations, implemented with OpenCV. qupath.opencv.tools. Additional processing methods for use with OpenCV Mats. qupath.process.gui. General-purpose image processing and machine learning commands. qupath.process.gui.commands. QuPath commands relevant for machine learning. qupath.process.gui.commands.density. UI classes to support density maps. qupath.process.gui.commands.ml. Interfaces and helper classes for using machine learning in QuPath. qupath.process.gui.commands.ui. Reusable UI classes to support processing commands. qupathj. ImageJ plugins to install within QuPath's embedded ImageJ instance to enable exchanging ROIs and objects. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allpackages-index.html:8270,install,install,8270,javadoc/docs/allpackages-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allpackages-index.html,2,['install'],['install']
Deployability,"tionModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVModelObjectClassifier; public OpenCVModelObjectClassifier(PathObjectFilter filter,; OpenCVDnn model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> imageData,; Collection<? extends PathObject> pathObjects,; boolean resetExistingClass); Description copied from interface: ObjectClassifier; Classify the objects in the specified collection.; This provides a means to specify exactly which objects should be classified, avoiding reliance on ObjectClassifier.getCompatibleObjects(ImageData).; ; Note: this method does not typically fire any hierarchy change/object classification events.; It is u",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html:2968,patch,patch,2968,javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVModelObjectClassifier.html,2,['patch'],['patch']
Deployability,"tionPercent - Variable in class qupath.lib.gui.panes.PreferencePane.ViewerPreferences;  ; autoSetAnnotationClassProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Classification that should automatically be applied to all new annotations. autoSetDisplayRange(ChannelDisplayInfo) - Method in class qupath.lib.display.ImageDisplay. Automatically set the display range for a channel, using the default saturation defined in PathPrefs.autoBrightnessContrastSaturationPercentProperty(). autoSetDisplayRange(ChannelDisplayInfo, double) - Method in class qupath.lib.display.ImageDisplay. Automatically set the display range for a channel. autoUnits() - Method in class qupath.lib.common.Timeit;  ; autoUpdate - Variable in class qupath.lib.gui.panes.PreferencePane.AppearancePreferences;  ; autoUpdate - Variable in class qupath.lib.gui.panes.PreferencePane.GeneralPreferences;  ; autoUpdateCheckProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Check for updates when launching QuPath, if possible. availableChannels() - Method in class qupath.lib.display.ImageDisplay. ObservableList containing the channels currently available for display. availableFontsProperty() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Get a list of available fonts. availableStylesProperty() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Get the current available styles as an observable list. averageChannelProject() - Method in class qupath.lib.images.servers.TransformedServerBuilder. Perform an average (mean) projection of the channels. awaitCompletion() - Method in class qupath.lib.plugins.AbstractTaskRunner. Await the completion of currently-running tasks, notifying any listener if necessary. AwtTools - Class in qupath.lib.awt.common. A collection of static methods useful when working with AWT shapes and ImageRegions. B. backend(int) - Method in class qupath.opencv.dnn.OpenCVDnn.Builder. Specify the backend, e.g. backgroundColor - Variabl",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:51014,update,updates,51014,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updates']
Deployability,"tiple PathObjectConnectionGroups. PathObjectConnections() - Constructor for class qupath.lib.objects.PathObjectConnections. Default constructor. PathObjectFilter - Enum Class in qupath.lib.objects. Enumeration of filters (predicates) that can be used to select objects based on their type. PathObjectGridView - Class in qupath.lib.gui.commands. Grid display of objects. PathObjectGridView.GridDisplaySize - Enum Class in qupath.lib.gui.commands;  ; PathObjectHierarchy - Class in qupath.lib.objects.hierarchy. A basic hierarchy in which to store PathObjects. PathObjectHierarchy() - Constructor for class qupath.lib.objects.hierarchy.PathObjectHierarchy. Default constructor, creates an empty hierarchy. PathObjectHierarchyEvent - Class in qupath.lib.objects.hierarchy.events. An event class for passing on information about modifications to a PathObjectHierarchy. PathObjectHierarchyEvent.HierarchyEventType - Enum Class in qupath.lib.objects.hierarchy.events. Enum representing different ways in which the hierarchy may have been updated. PathObjectHierarchyListener - Interface in qupath.lib.objects.hierarchy.events. A listener for modifications to a PathObjectHierarchy (i.e. PathObjectHierarchyView - Class in qupath.lib.gui.panes. Component for showing a tree-based view of the object hierarchy. PathObjectHierarchyView(QuPathGUI) - Constructor for class qupath.lib.gui.panes.PathObjectHierarchyView. Constructor. PathObjectHierarchyView(QuPathGUI, ObservableValue<ImageData<BufferedImage>>) - Constructor for class qupath.lib.gui.panes.PathObjectHierarchyView. Constructor. PathObjectLabels - Class in qupath.lib.gui.tools. Create standardized ListCell and TreeCell instances for displaying a PathObject, ; or a generic pane to use elsewhere. PathObjectLabels() - Constructor for class qupath.lib.gui.tools.PathObjectLabels;  ; PathObjectLabels.PathObjectMiniPane - Class in qupath.lib.gui.tools. Manage a small pane that can be used to display a PathObject. PathObjectMiniPane(Function<PathOb",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:755780,update,updated,755780,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability,"to append to the default logger. Returns:. setWriter; public ScriptParameters.Builder setWriter(Writer writer); Set the main output writer. Parameters:; writer - ; Returns:. setErrorWriter; public ScriptParameters.Builder setErrorWriter(Writer writer); Set the main error writer. Parameters:; writer - ; Returns:. setBatchSize; public ScriptParameters.Builder setBatchSize(int batch); Set the batch size for batch processing (default is 1). Parameters:; batch - ; Returns:. setBatchIndex; public ScriptParameters.Builder setBatchIndex(int ind); Set the current image index for batch processing (default is 0). Parameters:; ind - ; Returns:. setBatchSaveResult; public ScriptParameters.Builder setBatchSaveResult(boolean doSave); Specify whether the script that is running should save results or not. Parameters:; doSave - ; Returns:. setArgs; public ScriptParameters.Builder setArgs(String[] args); Set optional string args to pass to the script. Parameters:; args - ; Returns:. setProject; public ScriptParameters.Builder setProject(Project<?> project); Set the current project for the script. Parameters:; project - ; Returns:. setImageData; public ScriptParameters.Builder setImageData(ImageData<?> imageData); Set the current image data for the script. Parameters:; imageData - ; Returns:. doUpdateHierarchy; public ScriptParameters.Builder doUpdateHierarchy(boolean requestUpdate); Optionally request a hierarchy update event after running a script; (default is true for scripts that operate on image data). Parameters:; requestUpdate - ; Returns:. useCompiled; public ScriptParameters.Builder useCompiled(boolean useCompiled); Request that the script is compiled before being evaluated, ; or a previously compiled version is used where available. Parameters:; useCompiled - ; Returns:. build; public ScriptParameters build(); throws IllegalArgumentException; Build the ScriptParameters with the current options. Returns:; Throws:; IllegalArgumentException - if neither file nor script are set. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/ScriptParameters.Builder.html:4947,update,update,4947,javadoc/docs/qupath/lib/scripting/ScriptParameters.Builder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/ScriptParameters.Builder.html,1,['update'],['update']
Deployability,"to clear it in cases where available memory is low. getUniqueID() - Method in class qupath.lib.gui.images.stores.AbstractImageRenderer;  ; getUniqueID() - Method in class qupath.lib.gui.images.stores.ColorModelRenderer;  ; getUniqueID() - Method in interface qupath.lib.gui.images.stores.ImageRenderer. Get a unique key, which will be used for caching. getUnit() - Method in class qupath.lib.plugins.parameters.NumericParameter. Get the unit to display for this parameter (may be null if no unit is available). getUnmodifiableMetadataMap() - Method in class qupath.lib.objects.PathObject. Get an unmodifiable map of the metadata. getUpperBound() - Method in enum class qupath.lib.images.servers.PixelType. Get a number representing the maximum value permitted by this type. getUpperBound() - Method in class qupath.lib.plugins.parameters.NumericParameter. Retrieve the upper bound. getUri() - Method in class qupath.lib.gui.extensions.UpdateChecker.ReleaseVersion. Get a URI to download the release (may be null if no URI is available). getURI() - Method in class qupath.lib.images.servers.ImageServerBuilder.DefaultImageServerBuilder. Get the URI used by this builder. getURI() - Method in class qupath.lib.io.UriUpdater.SingleUriItem. Get the URI. getURI() - Method in interface qupath.lib.projects.Project. Get a URI that can be used when saving/reloading this project. getUris() - Method in interface qupath.lib.io.UriResource;  ; getURIs() - Method in class qupath.imagej.images.servers.ImageJServer;  ; getURIs() - Method in class qupath.lib.classifiers.pixel.PixelClassificationImageServer;  ; getURIs() - Method in class qupath.lib.gui.images.servers.PathHierarchyImageServer;  ; getURIs() - Method in class qupath.lib.gui.images.servers.RenderedImageServer;  ; getURIs() - Method in class qupath.lib.images.servers.bioformats.BioFormatsImageServer;  ; getURIs() - Method in interface qupath.lib.images.servers.ImageServer. Get the URIs for images required for this server. getURIs() - Method",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:543414,release,release,543414,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['release'],['release']
Deployability,"toolbar. ToolManager; getToolManager(). Get the ToolManager that handles available and selected tools. UndoRedoManager; getUndoRedoManager(). Get the UndoRedoManager, which can be useful if needing to clear it in cases where available memory is low. static Version; getVersion(). Get the current QuPath version. QuPathViewer; getViewer(). Get the currently active viewer. ViewerActions; getViewerActions(). Get the associations associated with QuPath image viewers. ViewerManager; getViewerManager(). Get the viewer manager, which gives access to all the viewers available within this QuPath instance. ReadOnlyObjectProperty<ImageData<BufferedImage>>; imageDataProperty(). Read-only property containing the image open within the currently-active viewer. void; installActions(Collection<? extends org.controlsfx.control.action.Action> actions). Install the specified actions. MenuItem; installCommand(String menuPath,; Runnable runnable). Install a new command in QuPath. MenuItem; installGroovyCommand(String menuPath,; File file). Install a Groovy script as a new command in QuPath. MenuItem; installGroovyCommand(String menuPath,; String script). Install a Groovy script as a new command in QuPath. MenuItem; installImageDataCommand(String menuPath,; Consumer<ImageData<BufferedImage>> command). Install a new command in QuPath that takes the current ImageData as input. boolean; isReadOnly(). Query whether QuPath is in 'read-only' mode. boolean; isStandalone(). Query whether this is a standalone QuPathGUI instance, as flagged during startup. static void; launchInstanceFromSwing(). Static method to launch QuPath from within a Swing/AWT application. Object; lookupAccelerator(String combo). Get the action or menu item associated with an accelerator. Object; lookupAccelerator(KeyCombination combo). Get the action or menu item associated with an key combination. org.controlsfx.control.action.Action; lookupActionByText(String text). Search for an action based upon its text (name) property. Me",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:6565,install,installGroovyCommand,6565,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['install'],['installGroovyCommand']
Deployability,"tructor for class qupath.lib.gui.panes.WorkflowCommandLogView. Construct a view to display the workflow for the currently-active ImageData within a running QuPath instance. WorkflowCommandLogView(QuPathGUI, Workflow) - Constructor for class qupath.lib.gui.panes.WorkflowCommandLogView. Construct a view displaying a static workflow (i.e. WorkflowListener - Interface in qupath.lib.plugins.workflow. Interface for listening to changes in Workflows, e.g. WorkflowStep - Interface in qupath.lib.plugins.workflow. Basic interface for a loggable workflow step. workflowUpdated(Workflow) - Method in class qupath.lib.gui.panes.WorkflowCommandLogView;  ; workflowUpdated(Workflow) - Method in class qupath.lib.images.ImageData;  ; workflowUpdated(Workflow) - Method in interface qupath.lib.plugins.workflow.WorkflowListener. Called whenever a Workflow has been updated in some way, such as a new step added. wrap(URI...) - Static method in class qupath.lib.io.UriUpdater. Wrap one or more URIs in a UriResource so they can be updated together. wrap(Collection<? extends PathObject>) - Static method in class qupath.lib.io.FeatureCollection. Wrap a collection of PathObjects as a FeatureCollection, ignoring nested (child) objects. wrap(Collection<? extends PathObject>, boolean) - Static method in class qupath.lib.io.FeatureCollection. Wrap a collection of PathObjects as a FeatureCollection. wrap(Collection<URI>) - Static method in class qupath.lib.io.UriUpdater. Wrap one or more URIs in a UriResource so they can be updated together. wrapInPointerScope(Processor<S, T, U>) - Static method in class qupath.lib.experimental.pixels.OpenCVProcessor. Wrap a processor in a second processor that uses a PointerScope to ensure that pointers are released; (except for any output). WrappedBufferedImageServer - Class in qupath.lib.images.servers. Implementation of an ImageServer that simply wraps an existing BufferedImage. WrappedBufferedImageServer(String, BufferedImage) - Constructor for class qupath.lib.i",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1109620,update,updated,1109620,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability,"ts() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated path. updatePlane(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object. updatePlane(ImagePlane) - Method in class qupath.lib.roi.AreaROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.EllipseROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.GeometryROI;  ; updatePlane(ImagePlane) - Method in interface qupath.lib.roi.interfaces.ROI. Create a new ROI defining the same region on a different ImagePlane. updatePlane(ImagePlane) - Method in class qupath.lib.roi.LineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PointsROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolygonROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.PolylineROI;  ; updatePlane(ImagePlane) - Method in class qupath.lib.roi.RectangleROI;  ; updatePlaneRecursive(PathObject, ImagePlane) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object and any descendant objects, creating new object IDs and ignoring ; any additional measurements. updatePlaneRecursive(PathObject, ImagePlane, boolean, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Update the ROI plane for a single object, and any descendant objects. updateProgress(int, String, ImageRegion) - Method in class qupath.lib.plugins",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1064687,update,updatePlane,1064687,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updatePlane']
Deployability,"ts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1062938,update,updateFromDisplay,1062938,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateFromDisplay']
Deployability,"tures, returning the names and number of input objects missing the specified features. Collection<PathClass>; getPathClasses(). Get the classifications set by this classifier. Collection<URI>; getURIs(). Get all the URIs required for this resource. protected int; tryToClassify(List<? extends PathObject> pathObjects,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier). Try to classify a batch of objects. protected boolean; tryToClassify(PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.lib.classifiers.object.AbstractObjectClassifier; classifyObjects, getCompatibleObjects. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. DnnObjectClassifier; public DnnObjectClassifier(PathObjectFilter filter,; DnnModel model,; List<PathClass> pathClasses,; int width,; int height,; double requestedPixelSize); Constructor. Parameters:; filter - filter to select compatible options; model - wrapper for the DNN model, including optional preprocessing; pathClasses - ordered list of classifications, corresponding to the predicted labels; width - patch width, in pixels, at the classification size; height - patch height, in pixels, at the classification side; requestedPixelSize - requested pixel size, in calibrated units, used to calculate the downsample value. Method Details. getPathClasses; public Collection<PathClass> getPathClasses(); Description copied from interface: ObjectClassifier; Get the classifications set by this classifier. Specified by:; getPathClasses in interface ObjectClassifier<BufferedImage>; Returns:. classifyObjects; public int classifyObjects(ImageData<BufferedImage> ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html:2647,update,updateUris,2647,javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnObjectClassifier.html,1,['update'],['updateUris']
Deployability,"t in interface ROI; Returns:. getAllPoints; public List<Point2> getAllPoints(); Description copied from interface: ROI; Get a list of points representing the vertices of the ROI.; ; This is only really well-defined for ROIs where a single set of vertices represents the shape completely; ; the expected output for a ROI that contains holes or disconnected regions is (currently) undefined. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getRoiType; public ROI.RoiType getRoiType(); Description copied from interface: ROI; Get the RoiType, used to distinguish between points, lines and areas. Specified by:; getRoiType in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getArea; public double getArea(); Description copied from interface: ROI; Get the area of this ROI. For lines and points this returns 0. Specified by:; getArea in interface ROI; Returns:; See Also:. ROI.getScaledArea(double, double). getScaledArea; public double getScaledArea(double pixelWidth,; double pixelHeight); Description copied from interface: ROI; Get scaled area of the ROI, for use with calibrated pixel sizes. Specified by:; getScaledArea in interface ROI; Parameters:; pixelWidth - ; pixelHeight - ; Returns:; See Also:. ROI.ge",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html:8040,update,updatePlane,8040,javadoc/docs/qupath/lib/roi/LineROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/LineROI.html,1,['update'],['updatePlane']
Deployability,"ublic ActionTools(). Method Details. getAnnotatedActions; public static List<org.controlsfx.control.action.Action> getAnnotatedActions(Object obj); Actions can be parsed from the accessible (usually public) fields of any object, as well as methods annotated with ActionMethod.; Any annotations associated with the actions will be parsed. Parameters:; obj - the object containing the action fields or methods; Returns:; a list of parsed and configured actions. parseAnnotations; public static void parseAnnotations(org.controlsfx.control.action.Action action,; AnnotatedElement element); Parse annotations relating to an action, updating the properties of the action. Parameters:; action - ; element - . parseAnnotations; public static void parseAnnotations(org.controlsfx.control.action.Action action,; AnnotatedElement element,; String baseMenu); Parse annotations relating to an action, updating the properties of the action with an optional base menu. Parameters:; action - the action to update; element - the annotated element (often a Field).; baseMenu - prepended to any ActionMenu actions. This makes it easier to insert items in sub-menus ; without needing to specify the full menu path every time. putActionProperty; public static void putActionProperty(Node node,; org.controlsfx.control.action.Action action); Add an Action to the properties of a Node, so that it may be retrieved later. Parameters:; node - the node for which the action should be added; action - an action to store as the properties of the node. putActionProperty; public static void putActionProperty(MenuItem node,; org.controlsfx.control.action.Action action); Add an Action to the properties of a MenuItem, so that it may be retrieved later. Parameters:; node - the node for which the action should be added; action - an action to store as the properties of the node. getActionProperty; public static org.controlsfx.control.action.Action getActionProperty(Node node); Retrieve an Action stored within the properties of",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html:7496,update,update,7496,javadoc/docs/qupath/lib/gui/actions/ActionTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/actions/ActionTools.html,1,['update'],['update']
Deployability,"ues, ; into a 4-element int array. unpackRGB(int) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. unpackRGB(int, int[]) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. UNSET - Enum constant in enum class qupath.lib.images.ImageData.ImageType. Image type has not been set. unzippedExtensions(Path, String...) - Static method in class qupath.lib.io.PathIO. Get the extension of a file, or of all entries within a zip file. UPDATE - Variable in class qupath.lib.gui.actions.menus.HelpMenuActions.Actions;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewerPlus;  ; updateAvailableStyles() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Request that the list of available styles is updated. updateBounds(double, double) - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.l",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1061601,update,updated,1061601,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updated']
Deployability,"ues, ; returning the result as a 4-element int array. unpackARGB(int, int[]) - Static method in class qupath.lib.common.ColorTools. Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. unpackRGB(int) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. unpackRGB(int, int[]) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. UNSET - Enum constant in enum class qupath.lib.images.ImageData.ImageType. Image type has not been set. unzippedExtensions(Path, String...) - Static method in class qupath.lib.io.PathIO. Get the extension of a file, or of all entries within a zip file. UPDATE - Variable in class qupath.lib.gui.actions.menus.HelpMenuActions.Actions;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewerPlus;  ; updateAvailableStyles() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Request that the list of available styles is updated. updateBounds(double, double) - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Sta",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1061381,update,updateAffineTransform,1061381,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateAffineTransform']
Deployability,"uest - the region being requested; setROI - if true, the ROI of the pathObject will be set on the image as the 'main' ROI (i.e. not an overlay); options - options determining which kinds of objects will have ROIs added, to match with the display in the QuPath viewer; Returns:; Throws:; IOException. extractOverlay; public static Overlay extractOverlay(PathObjectHierarchy hierarchy,; RegionRequest request,; OverlayOptions options,; Predicate<PathObject> filter); Extract an ImageJ overlay for the specified region. Parameters:; hierarchy - ; request - ; options - options to control which objects are being displayed; filter - optional additional filter used to determine which objects will be included (may be used in combination with options); Returns:. getImageJIcon; public static Image getImageJIcon(int width,; int height); Try to read the ImageJ icon from its jar. Parameters:; width - ; height - ; Returns:. installExtension; public void installExtension(QuPathGUI qupath); Description copied from interface: QuPathExtension; Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Specified by:; installExtension in interface QuPathExtension; Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; public String getName(); Description copied from interface: QuPathExtension; A readable name for the extension. Specified by:; getName in interface QuPathExtension; Returns:. getDescription; public String getDescription(); Description copied from interface: QuPathExtension; A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Specified by:; getDescription in interface QuPathExtension; Returns:. getQuPathVersion; public Version getQuPathVersion(); Returns th",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html:7115,install,installExtension,7115,javadoc/docs/qupath/imagej/gui/IJExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/gui/IJExtension.html,2,['install'],['installExtension']
Deployability,"uestedDownsample); Get the downsample factor supported by the server that is the best match for the requested downsample.; ; Generally, this will be <= the requested downsample (but it may be slightly more if the error introduced; would be very small, i.e. if 4 is requested and 4.0001 is available, 4.0001 would be returned). Parameters:; server - ; requestedDownsample - ; Returns:; See Also:. getPreferredResolutionLevel(ImageServer, double). getDisplayableImageName; public static String getDisplayableImageName(ImageServer<?> server); Get an ImageServer name suitable for displaying.; If the server is null, ""No image"" is returned. Otherwise, the name ; stored in the metadata is returned if not null, otherwise server.getShortServerName() is used. Parameters:; server - ; Returns:. setImageName; public static boolean setImageName(ImageServer<?> server,; String name); Set the name property of the metadata for an ImageServer. Parameters:; server - the server to update; name - the new name to use; Returns:; true if the metadata was updated, false otherwise (i.e. if the name is unchanged). getDownsampleFactor; public static double getDownsampleFactor(ImageServer<?> server,; double preferredPixelSizeMicrons); Calculate a downsample factor for a server given a preferred pixel size. Parameters:; server - ; preferredPixelSizeMicrons - ; Returns:. getPaddedRequest; public static BufferedImage getPaddedRequest(ImageServer<BufferedImage> server,; RegionRequest request,; Padding padding); throws IOException; Get a raster, padded by the specified amount, to the left, right, above and below.; ; Note that the padding is defined in terms of the destination pixels.; ; In other words, a specified padding of 5 should actually result in 20 pixels being added in each dimension ; if the request.getDownsample() == 4. Parameters:; server - ; request - ; padding - ; Returns:; Throws:; IOException. classificationLabelsToChannels; public static List<ImageChannel> classificationLabelsToChannels(Map",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html:4344,update,update,4344,javadoc/docs/qupath/lib/images/servers/ServerTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ServerTools.html,2,['update'],"['update', 'updated']"
Deployability,"ultiple objects to the hierarchy. boolean; addPathObject(PathObject pathObject). Deprecated.; since v0.4.0; use addObject(PathObject) instead (for naming consistency). boolean; addPathObjectBelowParent(PathObject pathObjectParent,; PathObject pathObject,; boolean fireUpdate). Deprecated.; since v0.4.0; use addObjectBelowParent(PathObject, PathObject, boolean). void; addPathObjectListener(PathObjectHierarchyListener listener). Deprecated.; since v0.4.0 (the name was confusing because it wasn't intended primarily to listen to changes within individual PathObjects). boolean; addPathObjects(Collection<? extends PathObject> pathObjects). Deprecated.; since v0.4.0; use addObjects(Collection) instead. boolean; addPathObjectWithoutUpdate(PathObject pathObject). Deprecated.; since v0.4.0, use addObject(PathObject, boolean) instead (for naming consistency). void; clearAll(). Remove all objects from the hierarchy. void; fireHierarchyChangedEvent(Object source). Fire a hierarchy update indicating the hierarchy structure has changed. void; fireHierarchyChangedEvent(Object source,; PathObject pathObject). Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. void; fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object classifications have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating object measurements have changed. void; fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging). Fire a hierarchy update indicating object measurements have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects). Fire a hierarchy update indicating objects have changed. void; fireObjectsChangedEvent(Object source,; Collection<? extends PathObject>",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:3464,update,update,3464,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,1,['update'],['update']
Deployability,"um Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.gui.prefs; Enum Class PathPrefs.AutoUpdateType. java.lang.Object; java.lang.Enum<PathPrefs.AutoUpdateType>; qupath.lib.gui.prefs.PathPrefs.AutoUpdateType. All Implemented Interfaces:; Serializable, Comparable<PathPrefs.AutoUpdateType>, Constable. Enclosing class:; PathPrefs. public static enum PathPrefs.AutoUpdateType; extends Enum<PathPrefs.AutoUpdateType>; Options for automatic updating checking of QuPath and/or extensions. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; EXTENSIONS_ONLY. Check for extensions on GitHub only (not new QuPath releases). NONE. Don't check for any updates automatically. QUPATH_AND_EXTENSIONS. Check for QuPath and extensions on GitHub. QUPATH_ONLY. Check for QuPath updates only. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static PathPrefs.AutoUpdateType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathPrefs.AutoUpdateType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. QUPATH_ONLY; public static final PathPrefs.AutoUpdateType QUPATH_ONLY; Check for QuPath updates only. QUPATH_AND_EXTENSIONS; public static final PathPrefs.AutoUpdateType QUPATH_AND_EXTENSIONS; Check for QuPath and extensions on GitHub. EXTENSIONS_ONLY; public static final PathPrefs.AutoUpdateType EXTENSIONS_ONLY; C",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html:1231,update,updates,1231,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html,1,['update'],['updates']
Deployability,"ummary TMA data for a specific image to a directory. static void; promptToImportTMAData(ImageData<?> imageData). Prompt to import TMA data for the specified image data. static void; promptToRelabelTMAGrid(ImageData<?> imageData). Prompt to relabel the core names within a TMA grid. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TMACommands; public TMACommands(). Method Details. promptToAddNoteToSelectedCores; public static void promptToAddNoteToSelectedCores(ImageData<?> imageData); Prompt to type a node to associate with the selected TMA cores. Parameters:; imageData - . promptToExportTMAData; public static void promptToExportTMAData(QuPathGUI qupath,; ImageData<BufferedImage> imageData); Prompt to export summary TMA data for a specific image to a directory. Parameters:; qupath - ; imageData - . installDragAndDropHandler; public static void installDragAndDropHandler(QuPathGUI qupath); Command to install a drag and drop file handler for exported TMA data. Parameters:; qupath - QuPath instance to which the handler should be installed. promptToImportTMAData; public static void promptToImportTMAData(ImageData<?> imageData); Prompt to import TMA data for the specified image data. Parameters:; imageData - the image data for which the TMA data should be imported. promptToRelabelTMAGrid; public static void promptToRelabelTMAGrid(ImageData<?> imageData); Prompt to relabel the core names within a TMA grid. Parameters:; imageData - image containing the TMA grid. promptToDeleteTMAGridRow; public static boolean promptToDeleteTMAGridRow(ImageData<?> imageData); Prompt to delete a row from a TMA grid.; The row is identified as being the one that contains the current selected TMA core, ; or the core that contains the selected object.; ; After this command is run, the user will be prompted to relabel the TMA grid. Parameters:; imageData - the image data containing the TMA",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/TMACommands.html:3077,install,installDragAndDropHandler,3077,javadoc/docs/qupath/lib/gui/commands/TMACommands.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/TMACommands.html,3,['install'],"['install', 'installDragAndDropHandler']"
Deployability,"unction that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. URI; getConfigUri(). Get the path to the model configuration, if required. String; getFramework(). Get the framework used to create the model. Scalar; getMean(). Get means which should be subtracted for preprocessing. OpenCVDnn.ModelType; getModelType(). Get the type of the model that would be built with buildModel(). URI; getModelUri(). Get the path to the model. String; getName(). Get a user-readable name for this model, or null if no name is specified. PredictionFunction<Mat>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Double; getScale(). Get scale factors to be applied to preprocess input. Collection<URI>; getURIs(). Get all the URIs required for this resource. void; initializeModel(Model model). Initialize the model with the same preprocessing defined here (i.e. boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Methods inherited from class qupath.opencv.dnn.AbstractDnnModel; batchPredict, predict, predict. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. OpenCVDnn; public OpenCVDnn(). Method Details. buildNet; public Net buildNet(); Build the OpenCV Net. This is a lower-level function than buildModel(), which provides ; more options to query the network architecture but does not incorporate any preprocessing steps. Returns:. buildModel; public <T extends Model> T buildModel(OpenCVDnn.ModelType type); Build a model, specifying the OpenCVDnn.ModelType. Type Parameters:; T - ; Parameters:; type - ; Returns:; See Also:. buildModel(). buildModel; public <T extends Model> T buildModel(); Build a model. The return type is determined by the OpenCVDnn.ModelType.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html:3055,update,updateURIs,3055,javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/OpenCVDnn.html,1,['update'],['updateURIs']
Deployability,"unction to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement); throws IOException,; IllegalArgumentException; Apply a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Pa",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:10942,patch,patch,10942,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"updateMeasurementList; public void updateMeasurementList(); Update the entire measurement list for the current objects. See Also:. setImageData(ImageData, Collection). setPredicate; public void setPredicate(Predicate<? super PathObject> predicate); Set a predicate used to filter the rows of the table. Parameters:; predicate - . refreshEntries; public void refreshEntries(); Refresh the measurement values. createNumericMeasurement; @Deprecated; public Binding<Number> createNumericMeasurement(PathObject pathObject,; String column); Deprecated.; Create a specific numeric measurement.; ; Warning! This binding is not guaranteed to update its value automatically upon changes to the ; underlying object or data. Parameters:; pathObject - ; column - ; Returns:. createStringMeasurement; @Deprecated; public Binding<String> createStringMeasurement(PathObject pathObject,; String column); Deprecated.; Create a specific String measurement.; ; Warning! This binding is not guaranteed to update its value automatically upon changes to the ; underlying object or data. Parameters:; pathObject - ; column - ; Returns:. isStringMeasurement; public boolean isStringMeasurement(String name); Query whether a named measurement returns a String value only. Parameters:; name - the measurement name; Returns:; true if the measurement returns a String (only), false otherwise. isNumericMeasurement; public boolean isNumericMeasurement(String name); Query whether a named measurement returns a numeric value only. Parameters:; name - the measurement name; Returns:; true if the measurement returns a number, false otherwise. getMeasurementNames; public ReadOnlyListWrapper<String> getMeasurementNames(); Description copied from interface: PathTableData; Get the names of all numeric measurements. Specified by:; getMeasurementNames in interface PathTableData<PathObject>; Returns:. getDoubleValues; public double[] getDoubleValues(String column); Description copied from interface: PathTableData; Get all double va",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/measure/ObservableMeasurementTableData.html:5756,update,update,5756,javadoc/docs/qupath/lib/gui/measure/ObservableMeasurementTableData.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/measure/ObservableMeasurementTableData.html,1,['update'],['update']
Deployability,"upport ; for entering a URL (rather than requiring a local file only).; ; If this encounters an exception, an error message will be shown. Returns:; true if the image was opened, false otherwise. openImage; public boolean openImage(QuPathViewer viewer,; String pathNew); throws IOException. Throws:; IOException. openImage; public boolean openImage(QuPathViewer viewer,; String pathNew,; boolean prompt,; boolean includeURLs); throws IOException; Open a new whole slide image server, or ImageData.; If the path is the same as a currently-open server, do nothing. Parameters:; viewer - the viewer into which the image should be opened; pathNew - ; prompt - if true, give the user the opportunity to cancel opening if a whole slide server is already set; includeURLs - if true, any prompt should support URL input and not only a file chooser; Returns:; true if the server was set for this GUI, false otherwise; Throws:; IOException. installGroovyCommand; public MenuItem installGroovyCommand(String menuPath,; File file); Install a Groovy script as a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; file - the Groovy script to run; note that this will be reloaded each time it is required; Returns:; the MenuItem for the command; See Also:. installGroovyCommand(String, String). installGroovyCommand; public MenuItem installGroovyCommand(String menuPath,; String script); Install a Groovy script as a new command in QuPath. Parameters:; menuPath - menu where the command should be installed; see lookupMenuItem(String) for the specification.; If only a name is provided, the command will be added to the ""Extensions"" menu.; If a menu item already exists for the given path, it will be removed.; script - the Groovy script to run; Returns:; the MenuItem for ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:20634,install,installGroovyCommand,20634,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,2,['install'],['installGroovyCommand']
Deployability,"urns:; See Also:. ImageServer.getPath(). getDownsample; public double getDownsample(); Get the requested downsample factor, defining the resolution at which pixels should be returned. Returns:. intersect2D; public RegionRequest intersect2D(ImageRegion region); Intersect to the specified 2D region, ignoring z and t. Parameters:; region - the region defining the x, y, width and height of the maximum permitted bounding box.; Returns:; the clipped RegionRequest, which may be this if no clipping is required. intersect2D; public RegionRequest intersect2D(int x,; int y,; int width,; int height); Intersect to the specified 2D region. Parameters:; x - x-coordinate of the second region's bounding box; y - y-coordinate of the second region's bounding box; width - width of the second region's bounding box; height - height of the second region's bounding box; Returns:; the clipped RegionRequest, which may be this if no clipping is required. updateZ; public RegionRequest updateZ(int z); Create a RegionRequest equivalent to this one with the updated z value. Parameters:; z - requested z position; Returns:; RegionRequest with the specified z value (may be this object unchanged). updateT; public RegionRequest updateT(int t); Create a RegionRequest equivalent to this one with the updated t value. Parameters:; t - requested t position; Returns:; RegionRequest with the specified t value (may be this object unchanged). updateDownsample; public RegionRequest updateDownsample(double downsample); Create a RegionRequest equivalent to this one with the updated downsample value. Parameters:; downsample - requested downsample position; Returns:; RegionRequest with the specified downsample value (may be this object unchanged). updatePath; public RegionRequest updatePath(String path); Create a RegionRequest equivalent to this one with the updated path. Parameters:; path - requested path position; Returns:; RegionRequest with the specified path value (may be this object unchanged). translate; pub",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:9116,update,updateZ,9116,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,3,['update'],"['updateZ', 'updated']"
Deployability,"urrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a buffered image. updateImage(String, Image) - Method in class qupath.lib.gui.panes.SimpleImageViewer. Update the image using a JavaFX image. updateMeasurementList() - Method in class qupath.lib.gui.measure.ObservableMeasurementTableData. Update the entire measurement list for the current objects. updateMeasurements() - Method in class qupath.lib.gui.panes.MeasurementMapPane. Update the measurements according to the current image. updateObject(PathObject, boolean) - Method in class qupath.lib.objects.hierarchy.PathObjectHierarchy. Update an object that is already in the hierarchy (e.g. updateParameterList(ParameterList, Map<String, String>, Locale) - Static method in class qupath.lib.plugins.parameters.ParameterList. Update a ParameterList with the values specified in a map. updatePath(String) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the up",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1063274,update,updateImage,1063274,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateImage']
Deployability,"urrently performed to ensure any suffix conforms to semantic ; versioning standards - however this behavior may change. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final Comparator<Version>; COMPARATOR_FULL. Compare full version, including any suffixes. static final Comparator<Version>; COMPARATOR_MAJOR. Compare major versions only. static final Comparator<Version>; COMPARATOR_MAJOR_MINOR. Compare major then minor versions. static final Comparator<Version>; COMPARATOR_MAJOR_MINOR_PATCH. Compare major then minor then patch versions (ignoring suffixes). static final Version; UNKNOWN. Constant representing any unknown version. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; int; compareTo(Version o);  ; boolean; equals(Object obj);  ; int; getMajor(). Get the major version number (X.0.0). int; getMinor(). Get the minor version number (0.X.0). int; getPatch(). Get the patch version number (0.0.X). String; getSuffix(). Get the (optional) suffix, which may be appended at the end of the version ; number to indicate a pre-release (0.0.0-X). int; hashCode();  ; boolean; hasSuffix(). Returns true if the version has a suffix, which typically indicates that it ; does not refer to a final stable version. static Version; parse(String versionString). Parse a Version object representing a semantic version number from a String. String; toString();  . Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Field Details. COMPARATOR_MAJOR; public static final Comparator<Version> COMPARATOR_MAJOR; Compare major versions only. COMPARATOR_MAJOR_MINOR; public static final Comparator<Version> COMPARATOR_MAJOR_MINOR; Compare major then minor versions. COMPARATOR_MAJOR_MINOR_PATCH; public static final Comparator<Version> COMPARATOR_MAJOR_MINOR_PATCH; Compare major then minor then patch versions (ignoring suffixes). COMPARATO",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html:1869,patch,patch,1869,javadoc/docs/qupath/lib/common/Version.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/Version.html,1,['patch'],['patch']
Deployability,"utputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int width,; int height,; int channels,; int batchSize). Parse the layers for a Net, which allows inspection of names and sizes. static List<DnnShape>; parseShape(MatShapeVector vector). Extract Mat dimensions from a MatShapeVector. static List<String>; parseStrings(StringVector vector). Extract Strings from a StringVector. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height). Read an image patch, optionally with a fixed size and using zero-padding if required. static Mat; readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding). Read an image patch, optionally with a fixed size. static <T extends DnnModel>void; registerDnnModel(Class<T> subtype,; String name). Deprecated.; since v0.4.0; use DnnModels.registerDnnModel(Class, String) instead. static Mat; segment(SegmentationModel model,; Mat input,; Mat output). Apply a segmentation model to an image region. static Mat; segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request). Apply a segmentation model to an image region. static void; setUseCuda(boolean requestUseCuda). Request that CUDA is used. static String; summarize(Net net,; int width,; int height,; int nChannels). Create a (multiline) summary String for a Net, given the specified image input dimensions. static boolean; useCuda(). Returns true if CUDA is available and requested. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. DnnTools; public DnnTools(). Method Details. registerDnnMod",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:3984,patch,patch,3984,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"va.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. AbstractTaskRunner; protected AbstractTaskRunner(); Constructor for a PluginRunner that uses the default number of threads, read from; ThreadTools.getParallelism(). AbstractTaskRunner; protected AbstractTaskRunner(int numThreads); Constructor for a PluginRunner that optionally uses a fixed number of threads. Parameters:; numThreads - the number of threads to use, or -1 to use the default number of threads defined by; ThreadTools.getParallelism(). Method Details. makeProgressMonitor; protected abstract SimpleProgressMonitor makeProgressMonitor(); Create a progress monitor to update the user on what is happening. Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. awaitCompletion; protected void awaitCompletion(); Await the completion of currently-running tasks, notifying any listener if necessary. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or SwingUtilities.invokeLater). Parameters:; tasks - . isCancelled; public boolean isCancelled(); Description copied from interface: TaskRunner; Query if the plugin can be cancelled while running.; Plugins are expected to check this flag before time-consuming operations. Specified by:; isCancelled in interface TaskRunner; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html:3331,update,update,3331,javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/AbstractTaskRunner.html,1,['update'],['update']
Deployability,"vaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.scripting; Class ScriptParameters. java.lang.Object; qupath.lib.scripting.ScriptParameters. public class ScriptParameters; extends Object; Class that stores key information that is useful for running scripts. Since:; v0.4.0; Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; ScriptParameters.Builder. Builder class for ScriptParameters. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static ScriptParameters.Builder; builder(). Create a new builder for ScriptParameters. boolean; doUpdateHierarchy(). Request whether to fire an update event for the object hierarchy, if an image data ; object is available. String[]; getArgs(). Get an optional array of string arguments passed to the script. int; getBatchIndex(). Get the index of the current image for batch processing, where 0 is the first and getBatchSize() - 1 ; is the last. Boolean; getBatchSaveResult(). Get whether changes to the image data should be saved. int; getBatchSize(). Get the number of images being batch processed, or 1 if just a single image is being processed. List<Class<?>>; getDefaultImports(). Get default imports that should be included with the script, where possible. List<Class<?>>; getDefaultStaticImports(). Get default static imports that should be included with the script, where possible. Writer; getErrorWriter(). Get the error writer for script output. File; getFile(). Get the file where the script is located. ImageData<?>; getImageData(). Get the current ImageData that should be used with the script. Project<?>; getProject(). Get the current project that should",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/ScriptParameters.html:1012,update,update,1012,javadoc/docs/qupath/lib/scripting/ScriptParameters.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/ScriptParameters.html,1,['update'],['update']
Deployability,"ve a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size(). Total number of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); Total number of steps in the workflow. Returns:. isEmpty; public boolean isEmpty(); Returns true if the workflow does not contain any ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:3058,update,update,3058,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,1,['update'],['update']
Deployability,"verview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Enum Constants; Field; Method. Detail:. Enum Constants; Field; Method. Summary: ; Nested | ; Enum Constants | ; Field | ; Method. Detail: ; Enum Constants | ; Field | ; Method. SEARCH. Package qupath.lib.gui.prefs; Enum Class PathPrefs.AutoUpdateType. java.lang.Object; java.lang.Enum<PathPrefs.AutoUpdateType>; qupath.lib.gui.prefs.PathPrefs.AutoUpdateType. All Implemented Interfaces:; Serializable, Comparable<PathPrefs.AutoUpdateType>, Constable. Enclosing class:; PathPrefs. public static enum PathPrefs.AutoUpdateType; extends Enum<PathPrefs.AutoUpdateType>; Options for automatic updating checking of QuPath and/or extensions. Nested Class Summary. Nested classes/interfaces inherited from class java.lang.Enum; Enum.EnumDesc<E extends Enum<E>>. Enum Constant Summary; Enum Constants. Enum Constant; Description; EXTENSIONS_ONLY. Check for extensions on GitHub only (not new QuPath releases). NONE. Don't check for any updates automatically. QUPATH_AND_EXTENSIONS. Check for QuPath and extensions on GitHub. QUPATH_ONLY. Check for QuPath updates only. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static PathPrefs.AutoUpdateType; valueOf(String name). Returns the enum constant of this class with the specified name. static PathPrefs.AutoUpdateType[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.lang.Enum; clone, compareTo, describeConstable, equals, finalize, getDeclaringClass, hashCode, name, ordinal, valueOf. Methods inherited from class java.lang.Object; getClass, notify, notifyAll, wait, wait, wait. Enum Constant Details. QUPATH_ONLY; public static final PathPrefs.AutoUpdateType QUPATH_ONLY; Check for QuPath updates only. QUPATH_AND_EXTENSIONS; public static final PathPrefs.AutoUpdateType QUPATH_AND_EXTENSIONS; Check f",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html:1112,update,updates,1112,javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/PathPrefs.AutoUpdateType.html,1,['update'],['updates']
Deployability,"viewer that the isSpaceDown status should be changed.; ; This is useful whenever another component might have received the event,; but the viewer needs to 'know' when it receives the focus. Parameters:; spaceDown - . getCenterPixelX; public double getCenterPixelX(); Get the x-coordinate of the pixel currently centered in the viewer, in the full size image space. Returns:. getCenterPixelY; public double getCenterPixelY(); Get the y-coordinate of the pixel currently centered in the viewer, in the full size image space. Returns:. setActiveTool; public void setActiveTool(PathTool tool); Set the active PathTool for input to this viewer. Parameters:; tool - . getActiveTool; public PathTool getActiveTool(); Get the active PathTool for this viewer.; Note that this is not necessarily identical to the result of the last call to setActiveTool(PathTool),; because it may be modified by other behavior (e.g. pressing the spacebar to temporarily activate the Move tool). Returns:. updateCursor; protected void updateCursor(). getCursor; public Cursor getCursor(); Get the current cursor for this viewer. Returns:. setCursor; public void setCursor(Cursor cursor); Set the requested cursor to display in this viewer. Parameters:; cursor - . getSelectedObject; public PathObject getSelectedObject(); Get the currently-selected object from the hierarchy. Returns:. getAllSelectedObjects; public Collection<PathObject> getAllSelectedObjects(); Get all currently-selected objects from the hierarchy. Returns:. setCustomPixelLayerOverlay; public void setCustomPixelLayerOverlay(PathOverlay pathOverlay); Optionally set a custom overlay to use for the pixel layer.; ; This is useful to support live prediction based on a specific field of view, for example. Parameters:; pathOverlay - . resetCustomPixelLayerOverlay; public void resetCustomPixelLayerOverlay(); Reset the custom pixel layer overlay to null. getCustomPixelLayerOverlay; public PathOverlay getCustomPixelLayerOverlay(); Get the custom pixel layer ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html:20689,update,updateCursor,20689,javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/QuPathViewer.html,2,['update'],['updateCursor']
Deployability,"viewer.QuPathViewer;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewerPlus;  ; updateAvailableStyles() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Request that the list of available styles is updated. updateBounds(double, double) - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Number>) - Method in class qupath.lib.gui.charts.Charts.ScatterChartBuilder;  ; UpdateChecker - Class in qupath.lib.gui.extensions. Helper class to query for updates using GitHub's web API. UpdateChecker() - Constructor for class qupath.lib.gui.extensions.UpdateChecker;  ; UpdateChecker.ReleaseVersion - Class in qupath.lib.gui.extensions. Class to represent a release version. updateCooccurrenceMatrices(CoocurranceMatrices, SimpleImage, SimpleImage, int, double, double, int) - Static method in class qupath.lib.analysis.features.HaralickFeatureComputer. Update existing CoocurranceMatrices with the values in a SimpleImage. updateCursor() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateDefaults(ImageData<BufferedImage>) - Method in class qupath.process.gui.commands.density.DensityMapDialog. Update default parameters with a specified ImageData. updateDownsample(double) - Method in class qupath.lib.regions.RegionRequest. Create a RegionRequest equivalent to this one with the updated downsample value. updateFromDisplay(ImageDisplay) - Method in class qupath.lib.display.ImageDisplay. Update the current display based upon a different display. updateHistogram(ImageDisplay, ChannelDisplayInfo) - Method in class qupath.lib.gui.commands.display.BrightnessContrastHistogramPane. Update the histogram to show the data for the given channel. updateImage(String, BufferedImage) - Method in class qupath.lib.gui.panes.SimpleImag",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1062292,update,updateCooccurrenceMatrices,1062292,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['update'],['updateCooccurrenceMatrices']
Deployability,"void; addStep(WorkflowStep step). Append a new step to the end of the workflow, firing an update event. void; addSteps(Collection<WorkflowStep> steps). Append multiple steps to the end of the workflow, firing a single update event. void; addWorkflowListener(WorkflowListener listener). Add a listener for changes to the workflow. void; clear(). Remove all steps, firing an update event if the workflow was not previously empty. String; createScript(). Generate a script from the current workflow steps. protected void; fireWorkflowUpdatedEvent();  ; WorkflowStep; getLastStep(). Get the last WorkflowStep in the workflow, or null if no steps are available. List<WorkflowStep>; getSteps(). Get an unmodifiable list of the steps. boolean; isEmpty(). Returns true if the workflow does not contain any steps. void; readExternal(ObjectInput in);  ; void; removeStep(int ind). Remove a single step, identified by its list index. void; removeStep(WorkflowStep step). Remove a single step, firing an update event if the step was successfully removed. void; removeSteps(Collection<WorkflowStep> steps). Remove a collection of steps, firing an update event if the workflow was changed. void; removeWorkflowListener(WorkflowListener listener). Remove a listener for changes to the workflow. void; replaceLastStep(WorkflowStep step). Replace the most recently added step with this one. int; size(). Total number of steps in the workflow. void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Workflow; public Workflow(). Method Details. getSteps; public List<WorkflowStep> getSteps(); Get an unmodifiable list of the steps. Returns:. getLastStep; public WorkflowStep getLastStep(); Get the last WorkflowStep in the workflow, or null if no steps are available. Returns:. addStep; public void addStep(WorkflowStep step); Append a new step to the end of the workflow, ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:2039,update,update,2039,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,1,['update'],['update']
Deployability,"wStep step); Append a new step to the end of the workflow, firing an update event. Parameters:; step - . addSteps; public void addSteps(Collection<WorkflowStep> steps); Append multiple steps to the end of the workflow, firing a single update event. Parameters:; steps - . removeStep; public void removeStep(int ind); Remove a single step, identified by its list index. Parameters:; ind - . removeStep; public void removeStep(WorkflowStep step); Remove a single step, firing an update event if the step was successfully removed. Parameters:; step - . removeSteps; public void removeSteps(Collection<WorkflowStep> steps); Remove a collection of steps, firing an update event if the workflow was changed. Parameters:; steps - . replaceLastStep; public void replaceLastStep(WorkflowStep step); Replace the most recently added step with this one. Parameters:; step - . size; public int size(); Total number of steps in the workflow. Returns:. isEmpty; public boolean isEmpty(); Returns true if the workflow does not contain any steps. Returns:. clear; public void clear(); Remove all steps, firing an update event if the workflow was not previously empty. fireWorkflowUpdatedEvent; protected void fireWorkflowUpdatedEvent(). addWorkflowListener; public void addWorkflowListener(WorkflowListener listener); Add a listener for changes to the workflow. Parameters:; listener - . removeWorkflowListener; public void removeWorkflowListener(WorkflowListener listener); Remove a listener for changes to the workflow. Parameters:; listener - . createScript; public String createScript(); Generate a script from the current workflow steps. Returns:. writeExternal; public void writeExternal(ObjectOutput out); throws IOException. Specified by:; writeExternal in interface Externalizable; Throws:; IOException. readExternal; public void readExternal(ObjectInput in); throws IOException,; ClassNotFoundException. Specified by:; readExternal in interface Externalizable; Throws:; IOException; ClassNotFoundException. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html:4085,update,update,4085,javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/Workflow.html,1,['update'],['update']
Deployability,"ws IllegalStateException; Create a new QuPath instance that is not visible (i.e. its stage is not shown). Returns:; Throws:; IllegalStateException. launchInstanceFromSwing; public static void launchInstanceFromSwing(); Static method to launch QuPath from within a Swing/AWT application.; ; This aims to handle several things:; ; initializing JavaFX in the appropriate thread; flagging that shutting down QuPath should not terminate the JVM; showing the QuPath UI window. This can potentially be used from other environments (e.g. MATLAB, Fiji, Python).; Afterwards, calls to getInstance() will return the QuPath instance as soon as it is available.; However, note that depending upon the thread from which this method is called, the QuPath instance may not ; be available until some time after the method returns.; ; If there is already an instance of QuPath running, this requests that it is made visible - but otherwise does nothing. requestAutomaticUpdateCheck; public void requestAutomaticUpdateCheck(); Request an automated update check in a background thread.; This will use the user preferences to determine whether or how to check for updates ; (i.e. if the preferences have disabled an update check, then it will not be run). See Also:. requestFullUpdateCheck(). requestFullUpdateCheck; public void requestFullUpdateCheck(); Request a manual update check in a background thread.; This should perform the check if possible, regardless of the user preferences. See Also:. requestAutomaticUpdateCheck(). showAnalysisPaneProperty; public BooleanProperty showAnalysisPaneProperty(). Returns:; the showAnalysisPane property. uiBlocked; public ObservableValue<Boolean> uiBlocked(); Observable value indicating that the user interface is/should be blocked.; This happens when a plugin or script is running. Returns:. openInBrowser; public static boolean openInBrowser(String url); Try to launch a browser window for a specified URL. Parameters:; url - the URL to open in the browser; Returns:; true ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html:14841,update,update,14841,javadoc/docs/qupath/lib/gui/QuPathGUI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/QuPathGUI.html,1,['update'],['update']
Deployability,"ws inspection of names and sizes. Parameters:; net - the Net to parse; width - input width; height - input height; channels - input channels; batchSize - input batch size; Returns:. parseStrings; public static List<String> parseStrings(StringVector vector); Extract Strings from a StringVector. Parameters:; vector - ; Returns:. parseShape; public static List<DnnShape> parseShape(MatShapeVector vector); Extract Mat dimensions from a MatShapeVector. Parameters:; vector - ; Returns:. summarize; public static String summarize(Net net,; int width,; int height,; int nChannels); throws IOException; Create a (multiline) summary String for a Net, given the specified image input dimensions. Parameters:; net - the Net to summarize; width - input width; height - input height; nChannels - input channel count; Returns:; Throws:; IOException - if an error occurs when loading the model. readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height); throws IOException; Read an image patch, optionally with a fixed size and using zero-padding if required.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Otherwise the ROI bounds are used. Parameters:; server - the image server; roi - the ROI for which the patch should be extracted; downsample - the downsample value; width - the patch width, or -1 if the ROI bounds should be used; height - the patch height, or -1 if the ROI bounds should be used; Returns:; Throws:; IOException; See Also:. readPatch(ImageServer, ROI, double, int, int, int). readPatch; public static Mat readPatch(ImageServer<BufferedImage> server,; ROI roi,; double downsample,; int width,; int height,; int borderPadding); throws IOException; Read an image patch, optionally with a fixed size.; If the patch width and height are specified, these relate to the output (downsampled) image; and are centered on the ROI centroid. Othe",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:8015,patch,patch,8015,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability,"xel's value is used to scale a single color according to a specified display range according to the following rules:; ; If the pixel's value is >= maxDisplay, the pure color is used.; If the pixel's value is <= minDisplay, the black is used.; Otherwise, a scaled version of the color is used; ; ; The end result is like having a lookup table (LUT) that stretches from black to the 'pure' color specified,; but without actually generating the LUT. DisplaySettingUtils. Utility class for working with image display and image display settings objects. DistanceTools. Static methods for calculating distances between objects. DnnModel. General interface for implementing a deep learning model in a pipeline using OpenCV. DnnModelBuilder. Builder to create a DnnModel from DnnModelParams. DnnModelParams. Parameters to build a DnnModel. DnnModelParams.Builder. Builder for DnnModelParams. DnnModels. Helper class for building new DnnModels. DnnObjectClassifier. Initial implementation of a patch-based ObjectClassifier using an OpenCV-compatible DNN. DnnShape. Helper class to represent input and output shapes associated with PredictionFunction. DnnTools. Tools for working with OpenCV's DNN module. DnnTools.DNNLayer. Helper class to summarize a DNN layer. DocGenerator. Command line tool to export icons and markdown documentation for QuPath commands. DoGSuperpixelsPlugin. A simple superpixel-generating command based upon applying ImageJ's watershed transform to the; absolute values of a Difference-of-Gaussians filtered image. DoubleParameter. Parameter to represent a floating point numeric value. DragDropImportListener. Drag and drop support for main QuPath application, which can support a range of different object types (Files, URLs, Strings,..). DragDropImportListener.DropHandler<T>. Interface to define a new drop handler. EditableText. Interface for objects that manage editable text, including a caret position and selection. EditMenuActions;  ; EllipseROI. ROI implementing a circle, or ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:15458,patch,patch-based,15458,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['patch'],['patch-based']
Deployability,"xtends Object; implements DnnModel; Wrapper for a deep learning model in a pipeline using OpenCV.; It can encapsulate a custom method needed to convert the input Mat(s) into the appropriate format,; and the output back into one or more Mats.; ; This provides convenience methods to both convert and predict for three common scenarios:; ; Single input, single output; batch size 1; Single or multiple inputs, single or multiple outputs; batch size 1; Single input, single output; batch size > 1. Author:; Pete Bankhead; See Also:. BlobFunction; PredictionFunction. Field Summary. Fields inherited from interface qupath.opencv.dnn.DnnModel; DEFAULT_INPUT_NAME, DEFAULT_OUTPUT_NAME. Constructor Summary; Constructors. Constructor; Description; AbstractDnnModel();  . Method Summary. All MethodsInstance MethodsAbstract MethodsConcrete Methods. Modifier and Type; Method; Description; List<Mat>; batchPredict(List<? extends Mat> mats). Convenience method to convert one or more image patches to a blob, apply the PredictionFunction, and convert the output to standard Mats. abstract BlobFunction<T>; getBlobFunction(). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function; for the first (or only) input. abstract BlobFunction<T>; getBlobFunction(String name). Get the function that can convert one or more OpenCV Mats into a blob supported by the prediction function for; a specified input layer. abstract PredictionFunction<T>; getPredictionFunction(). Get the prediction function that can apply a prediction with one or more blobs as input. Map<String,Mat>; predict(Map<String,Mat> blobs). Convenience method to convert input image patches to a blobs, apply a PredictionFunction (optionally with multiple inputs/outputs),; and convert the output to a standard Mat. Mat; predict(Mat mat). Convenience method to convert a single image patch to a blob, apply the PredictionFunction, and convert the output to a standard Mat. Methods inherited from cla",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html:1581,patch,patches,1581,javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/AbstractDnnModel.html,1,['patch'],['patches']
Deployability,"xtends PathObject> pathObjects); Set specified objects to be 'unlocked'. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. lockSelectedObjects; public static void lockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'locked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . unlockSelectedObjects; public static void unlockSelectedObjects(PathObjectHierarchy hierarchy); Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleSelectedObjectsLocked; public static void toggleSelectedObjectsLocked(PathObjectHierarchy hierarchy); Toggle the 'locked' status of selected objects, firing an update event if the status of any object is changed. Parameters:; hierarchy - . toggleObjectsLocked; public static void toggleObjectsLocked(PathObjectHierarchy hierarchy,; Collection<? extends PathObject> pathObjects); Toggle the 'locked' status of specified objects. Parameters:; hierarchy - if not null, fire an update event if the locked status for any object is changed; pathObjects - the objects to update. getAvailableFeatures; public static Set<String> getAvailableFeatures(Collection<? extends PathObject> pathObjects); Get a set containing the names of all measurements found in the measurement lists of a specified object collection. Parameters:; pathObjects - ; Returns:. createClassificationMap; public static Map<PathObject,PathClass> createClassificationMap(Collection<? extends PathObject> pathObjects); Create a mapping between PathObjects and their current PathClasses.; This can be useful to preserve a classification so that it may be reset later.; ; Note: classification probabilities are not retained using this approach. Parameters:; pathObjects - the objects containing classifications; Returns:; a mapping between objects and their current classific",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html:52268,toggle,toggleObjectsLocked,52268,javadoc/docs/qupath/lib/objects/PathObjectTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObjectTools.html,2,['toggle'],['toggleObjectsLocked']
Deployability,"y - ; Returns:. translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). updatePlane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getImagePlane; public ImagePlane getImagePlane(); Description copied from interface: ROI; Get the ImagePlane, which contains the values for c, z and t in a single object. Specified by:; getImagePlane in interface ROI; Returns:. getZ; public int getZ(); Description copied from interface: ROI; Get z-stack slice index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currentl",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html:9174,update,updatePlane,9174,javadoc/docs/qupath/lib/roi/GeometryROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/GeometryROI.html,2,['update'],['updatePlane']
Deployability,"y a classification model to an image patch to classify an object.; If a patch width and height both > 0, the patch is cropped around the ROI centroid and padded if necessary.; If a patch width and height both < 0, the bounding box of hte ROI is used directly and the model is assumed able to ; resize if needed.; If the patch width and height are anything else, an IllegalArgumentException is thrown. Parameters:; model - the model for prediction; pathObject - the object to classify; server - the image supplying the patch; downsample - the requested downsample at which classification should be applied; width - the fixed input size; height - the fixed input size; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise; Throws:; IOException - if the patch cannot be read; IllegalArgumentException - if the patch width or height are invalid. classify; public static boolean classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement); Apply a classification model to an existing image patch to classify an object. Parameters:; model - the model for prediction; pathObject - the object to classify; input - image patch; classifier - function to convert the classification label into a PathClass; predictionMeasurement - optional measurement name for storing the prediction value (often treated as a probability) ; in the measurement list of the object.; Returns:; true if the classification of the object has changed, false otherwise. segment; public static Mat segment(SegmentationModel model,; ImageServer<BufferedImage> server,; RegionRequest request); throws IOException; Apply a segmentation model to an image region. Parameters:; model - the segmentation m",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:11634,patch,patch,11634,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,2,['patch'],['patch']
Deployability,"y(). imageDisplay; public ObjectProperty<ImageDisplay> imageDisplayProperty; Property for the image display that should be shown and managed by this pane. See Also:. imageDisplayProperty(). Constructor Details. BrightnessContrastChannelPane; public BrightnessContrastChannelPane(). Method Details. disableToggleMenuItemsProperty; public BooleanProperty disableToggleMenuItemsProperty(); Property to disable options to toggle the visibility of channels. Returns:. currentChannelVisible; public ReadOnlyBooleanProperty currentChannelVisible(); Read-only property indicating whether the currently-selected channel is visible,; i.e. it is part of ImageDisplay.selectedChannels(). Returns:. setShowChannel; public void setShowChannel(ChannelDisplayInfo channel); Request that the specified channel is shown. Parameters:; channel - . setHideChannel; public void setHideChannel(ChannelDisplayInfo channel); Request that the specified channel is hidden. Parameters:; channel - . toggleShowHideChannel; public void toggleShowHideChannel(ChannelDisplayInfo channel); Toggle the visibility of the specified channel. Parameters:; channel - . updateTable; public void updateTable(); Ensure the table is up-to-date.; This should not need to be called often, but is useful if a change is made to the image display; that could not be identified by listeners. currentChannelProperty; public ReadOnlyObjectProperty<ChannelDisplayInfo> currentChannelProperty(); Get the currently-selected channel.; This is not necessarily showing in the image; see #currentChannelVisible() for that. Returns:. isEmpty; public boolean isEmpty(); Query if the table is empty, i.e. there are no channels to display. Returns:. getSelectionModel; public MultipleSelectionModel<ChannelDisplayInfo> getSelectionModel(); Get the selection model for the channels. Returns:. imageDisplayProperty; public ObjectProperty<ImageDisplay> imageDisplayProperty(); Property for the image display that should be shown and managed by this pane. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html:13959,toggle,toggleShowHideChannel,13959,javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html,4,"['toggle', 'update']","['toggleShowHideChannel', 'updateTable']"
Deployability,"y,; T[] extra); Create a scatterplot using collections of numeric values, with an associated custom object. Type Parameters:; T - ; Parameters:; name - ; x - x-values; y - y-values; extra - array of values to associate with each data point; should be the same length as x and y; Returns:; this builder. series; public <T> Charts.ScatterChartBuilder series(String name,; double[] x,; double[] y,; List<T> extra); Create a scatterplot using collections of numeric values, with an associated custom object. Type Parameters:; T - ; Parameters:; name - ; x - x-values; y - y-values; extra - list of values to associate with each data point; should be the same length as x and y; Returns:; this builder. series; public Charts.ScatterChartBuilder series(String name,; Collection<XYChart.Data<Number,Number>> data); Create a scatterplot from existing data plots. Parameters:; name - ; data - the data points to plot; Returns:; this builder. updateChart; protected void updateChart(ScatterChart<Number,Number> chart); Method that applies properties of this builder to the chart.; Each subclass should call the method in the parent class to ensure its properties ; have been applied. Parameters:; chart - . createNewChart; protected ScatterChart<Number,Number> createNewChart(Axis<Number> xAxis,; Axis<Number> yAxis). getThis; protected Charts.ScatterChartBuilder getThis(). xAxisMin; public Charts.ScatterChartBuilder xAxisMin(double lowerBound); Set the lower bound for the x-axis. Parameters:; lowerBound - ; Returns:; this builder. yAxisMin; public Charts.ScatterChartBuilder yAxisMin(double lowerBound); Set the lower bound for the y-axis. Parameters:; lowerBound - ; Returns:; this builder. xAxisMax; public Charts.ScatterChartBuilder xAxisMax(double upperBound); Set the upper bound for the x-axis. Parameters:; upperBound - ; Returns:; this builder. yAxisMax; public Charts.ScatterChartBuilder yAxisMax(double upperBound); Set the upper bound for the y-axis. Parameters:; upperBound - ; Returns:; this b",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/Charts.ScatterChartBuilder.html:10116,update,updateChart,10116,javadoc/docs/qupath/lib/gui/charts/Charts.ScatterChartBuilder.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/Charts.ScatterChartBuilder.html,2,['update'],['updateChart']
Deployability,"y<QuPathStyleManager.StyleOption> selectedStyleProperty; Get the current selected style. See Also:. selectedStyleProperty(). availableFonts; public static ObservableList<QuPathStyleManager.Fonts> availableFontsProperty; Get a list of available fonts.; The list is unmodifiable, since this is primarily used to overcome issues with the default font on macOS ; by changing the font family. More fine-grained changes can be made via css. See Also:. availableFontsProperty(). font; public static ObjectProperty<QuPathStyleManager.Fonts> fontProperty; Get the current selected font. See Also:. fontProperty(). Constructor Details. QuPathStyleManager; public QuPathStyleManager(). Method Details. updateAvailableStyles; public static void updateAvailableStyles(); Request that the list of available styles is updated.; It makes sense to call this when a new user directory has been set, so that a check for CSS files ; can be performed. installStyles; public static boolean installStyles(Collection<File> list); Handle installing CSS files (which can be used to style QuPath). Parameters:; list - list of css files; Returns:. refresh; public static void refresh(); Refresh the current style.; This should not normally be required, but may be useful during startup to ensure ; that the style is properly set at the appropriate time. isDefaultStyle; public static boolean isDefaultStyle(); Check if the default JavaFX style is used. Returns:; true if the default style is used, false otherwise. availableStylesProperty; public static ObservableList<QuPathStyleManager.StyleOption> availableStylesProperty(); Get the current available styles as an observable list.; The list is unmodifiable, since any changes should be made via adding/removing files in UserDirectoryManager.getCssStylesPath(). Returns:. selectedStyleProperty; public static ObjectProperty<QuPathStyleManager.StyleOption> selectedStyleProperty(); Get the current selected style. Returns:. availableFontsProperty; public static ObservableList<",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html:3831,install,installStyles,3831,javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/prefs/QuPathStyleManager.html,3,['install'],"['installStyles', 'installing']"
Deployability," ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.io; Interface UriResource. All Known Subinterfaces:; ImageDataOp, ImageOp, ProjectImageEntry<T>. All Known Implementing Classes:; DnnObjectClassifier, ImageOps.PaddedOp, OpenCVDnn, OpenCVModelObjectClassifier. public interface UriResource; Interface for objects that depend upon URIs.; Examples include images, where the URI refer to the image file or URL, or prediction models. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; default Collection<URI>; getUris();  ; Collection<URI>; getURIs(). Get all the URIs required for this resource. default boolean; updateUris(Map<URI,URI> replacements);  ; boolean; updateURIs(Map<URI,URI> replacements). Update the specified URIs. Method Details. getUris; default Collection<URI> getUris(); throws IOException. Throws:; IOException. updateUris; default boolean updateUris(Map<URI,URI> replacements); throws IOException. Throws:; IOException. getURIs; Collection<URI> getURIs(); throws IOException; Get all the URIs required for this resource. This is often an empty or singleton list. Returns:; the required URIs; Throws:; IOException; Since:; v0.4.0. updateURIs; boolean updateURIs(Map<URI,URI> replacements); throws IOException; Update the specified URIs.; ; Warning! This should be used sparingly, particularly for objects that are otherwise immutable.; It is intended only for correcting paths that have become invalid (e.g. because of files being relocated ; or transferred between computers) before first use of the object.; It should not be used to manipulate an object after construction. ; Indeed, some implementations may throw an UnsupportedOperationException if called too late. Parameters:; replacements - replacement map, where the key gives the current URI and the value gives its replacement.; Returns:; true if URIs were changed, false otherwise; Throws:; IOException; Since:; v0.4.0. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriResource.html:1507,update,updateURIs,1507,javadoc/docs/qupath/lib/io/UriResource.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/UriResource.html,2,['update'],['updateURIs']
Deployability," ; DETECTIONS - Enum constant in enum class qupath.lib.objects.PathObjectFilter. Accept detection objects (no subtypes, e.g. DETECTIONS - Variable in class qupath.lib.gui.actions.menus.MeasureMenuActions.Actions;  ; DETECTIONS_ALL - Enum constant in enum class qupath.lib.objects.PathObjectFilter. Accept detection objects (all subtypes). DETECTIONS_FILL - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; detectionsToCells(Collection<? extends PathObject>, double, double) - Static method in class qupath.lib.objects.CellTools. Create cell objects by expanding the (nucleus) ROIs from existing detections to approximate the full cell boundary. detectionStrokeThicknessProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Preferred stroke thickness to use when drawing detections ROIs. detectionToAnnotationDistances() - Static method in class qupath.lib.scripting.QP. Deprecated.; retained only for compatibility of v0.2.0 milestone releases; use instead #detectionToAnnotationDistances(boolean). detectionToAnnotationDistances(boolean) - Static method in class qupath.lib.scripting.QP. Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list for the current ImageData. detectionToAnnotationDistances(ImageData<?>, boolean) - Static method in class qupath.lib.analysis.DistanceTools. Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. detectionToAnnotationDistances(ImageData<?>, boolean) - Static method in class qupath.lib.scripting.QP. Compute the distance for all detection object centroids to the closest annotation with each valid, not-ignored classification and add ; the result to the detection measurement list. detectionToAnnotationDistances(ImageData<?>, boolean, boolean) - Static method in ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:255755,release,releases,255755,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['release'],['releases']
Deployability," ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.extensions; Interface QuPathExtension. All Known Implementing Classes:; BioFormatsOptionsExtension, IJExtension, OpenSlideExtension, ProcessingExtension, RichScriptEditorExtension, SvgExtension. public interface QuPathExtension; Simple interface for QuPath extensions.; ; This allows dynamic discovery of new extensions. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract MethodsDefault Methods. Modifier and Type; Method; Description; String; getDescription(). A short description of the extension for displaying in the main GUI. String; getName(). A readable name for the extension. default Version; getQuPathVersion(). Get a QuPath version for which this extension was written. default Version; getVersion(). Get the version of the current extension. void; installExtension(QuPathGUI qupath). Install the extension for a QuPathGUI instance. Method Details. installExtension; void installExtension(QuPathGUI qupath); Install the extension for a QuPathGUI instance.; ; This generally involves adding new commands to appropriate menus.; ; Note that if an extension is only expected to be compatible with a specific QuPath version, ; this method provides an opportunity to test version compatibility before making any changes. Parameters:; qupath - ; See Also:. QuPathGUI.getVersion(). getName; String getName(); A readable name for the extension. Returns:. getDescription; String getDescription(); A short description of the extension for displaying in the main GUI.; ; This could also contain licensing information. Returns:. getQuPathVersion; default Version getQuPathVersion(); Get a QuPath version for which this extension was written.; ; This is used to provide an explanation if the extension could not be loaded.; It has a default implementation that returns Version.UNKNOWN to allow backwards compatibility, ; however it strongly recommended to return the actual QuPath version against which ; the extensi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/extensions/QuPathExtension.html:1238,install,installExtension,1238,javadoc/docs/qupath/lib/gui/extensions/QuPathExtension.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/extensions/QuPathExtension.html,2,['install'],['installExtension']
Deployability," imageData,; Collection<? extends PathObject> pathObjects,; String feature,; String... additionalFeatures); Add shape measurements to the specified objects.; ; Note addShapeMeasurements(ImageData, Collection, ShapeFeatures...) can be used without specifying any features.; This method requires at least one feature so as to have a distinct method signature. Parameters:; imageData - the image to which the objects belong. This is used to determine pixel calibration and to fire an update event. May be null.; pathObjects - the objects that should be measured; feature - first feature to add; additionalFeatures - optional array of Strings specifying the features to add. addShapeMeasurements; public static void addShapeMeasurements(ImageData<?> imageData,; Collection<? extends PathObject> pathObjects,; ObjectMeasurements.ShapeFeatures... features); Add shape measurements to the specified objects. Parameters:; imageData - the image to which the objects belong. This is used to determine pixel calibration and to fire an update event. May be null.; pathObjects - the objects that should be measured; features - the specific features to add. If none are specified, all available features will be added. setChannelNames; public static void setChannelNames(String... names); Set the channel names for the current ImageData. Parameters:; names - ; See Also:. setChannelNames(ImageData, String...). setChannelNames; public static void setChannelNames(ImageData<?> imageData,; String... names); Set the channel names for the specified ImageData.; It is not essential to pass names for all channels: ; by passing n values, the first n channel names will be set.; Any name that is null will be left unchanged. Parameters:; imageData - ; names - . setChannelColors; public static void setChannelColors(Integer... colors); Set the channel colors for the current ImageData. Parameters:; colors - ; See Also:. setChannelColors(ImageData, Integer...); setChannelNames(ImageData, String...). setChannelColors; pu",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:62399,update,update,62399,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['update'],['update']
Deployability," java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface javafx.css.Styleable; getStyleableNode. Property Details. disableToggleMenuItems; public BooleanProperty disableToggleMenuItemsProperty; Property to disable options to toggle the visibility of channels. See Also:. disableToggleMenuItemsProperty(). currentChannel; public ReadOnlyObjectProperty<ChannelDisplayInfo> currentChannelProperty; Get the currently-selected channel.; This is not necessarily showing in the image; see #currentChannelVisible() for that. See Also:. currentChannelProperty(). imageDisplay; public ObjectProperty<ImageDisplay> imageDisplayProperty; Property for the image display that should be shown and managed by this pane. See Also:. imageDisplayProperty(). Constructor Details. BrightnessContrastChannelPane; public BrightnessContrastChannelPane(). Method Details. disableToggleMenuItemsProperty; public BooleanProperty disableToggleMenuItemsProperty(); Property to disable options to toggle the visibility of channels. Returns:. currentChannelVisible; public ReadOnlyBooleanProperty currentChannelVisible(); Read-only property indicating whether the currently-selected channel is visible,; i.e. it is part of ImageDisplay.selectedChannels(). Returns:. setShowChannel; public void setShowChannel(ChannelDisplayInfo channel); Request that the specified channel is shown. Parameters:; channel - . setHideChannel; public void setHideChannel(ChannelDisplayInfo channel); Request that the specified channel is hidden. Parameters:; channel - . toggleShowHideChannel; public void toggleShowHideChannel(ChannelDisplayInfo channel); Toggle the visibility of the specified channel. Parameters:; channel - . updateTable; public void updateTable(); Ensure the table is up-to-date.; This should not need to be called often, but is useful if a change is made to the image display; that could not be identified by listeners. currentChannelProperty; public R",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html:13406,toggle,toggle,13406,javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/display/BrightnessContrastChannelPane.html,1,['toggle'],['toggle']
Deployability," size,; Scalar mean,; boolean swapRB,; boolean crop). Create an OpenCV blob from a Mat with optional scaling, resizing and cropping. static OpenCVDnn.Builder; builder(String modelPath). Initiative building and configuring an OpenCVDnn. static boolean; classify(ClassificationModel model,; PathObject pathObject,; Mat input,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an existing image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; int width,; int height,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static boolean; classify(ClassificationModel model,; PathObject pathObject,; ImageServer<BufferedImage> server,; double downsample,; IntFunction<PathClass> classifier,; String predictionMeasurement). Apply a classification model to an image patch to classify an object. static List<PathObject>; detect(DetectionModel model,; Mat mat,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<PathObject>; detect(DetectionModel model,; ImageServer<BufferedImage> server,; RegionRequest request,; IntFunction<PathClass> classifier,; Function<ROI,PathObject> creator). Apply a detection model to generate rectangles surrounding distinct structures. static List<String>; getOutputLayerNames(Net net). Get the names of all unconnected output layers. static Map<String,DnnShape>; getOutputLayers(Net net,; DnnShape... inputShape). Get the names of all unconnected output layers. static List<Mat>; imagesFromBlob(Mat blob). Extract images from an OpenCV blob. static boolean; isCudaAvailable(). Query whether CUDA is reported as available by OpenCV. static List<DnnTools.DNNLayer>; parseLayers(Net net,; int wid",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html:2327,patch,patch,2327,javadoc/docs/qupath/opencv/dnn/DnnTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/dnn/DnnTools.html,1,['patch'],['patch']
Deployability," void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - . fireObjectMeasurementsChangedEvent; public void fireObjectMeasurementsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating object measurements have changed. Parameters:; source - ; pathObjects - ; isChanging - . fireObjectClassificationsChangedEvent; public void fireObjectClassificationsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating object classifications have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects); Fire a hierarchy update indicating objects have changed. Parameters:; source - ; pathObjects - . fireObjectsChangedEvent; public void fireObjectsChangedEvent(Object source,; Collection<? extends PathObject> pathObjects,; boolean isChanging); Fire a hierarchy update indicating objects have changed, and may still be changing. Parameters:; source - ; pathObjects - ; isChanging - is true, listeners may choose not to respond until an event is fired with isChanging false. fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source,; PathObject pathObject); Fire a hierarchy update indicating the hierarchy structure has changed, impacting descendants of a specified object. Parameters:; source - ; pathObject - . fireHierarchyChangedEvent; public void fireHierarchyChangedEvent(Object source); Fire a hierarchy update indicating the hierarchy structure has changed.; This is often a good choice of event if multiple changes may have occurred, of if one is unsure what exactly ; has changed. Parameters:; source - . toString; public String toString(). Overrides:; toString in class Object. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html:20672,update,update,20672,javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/hierarchy/PathObjectHierarchy.html,3,['update'],['update']
Deployability," x,; int y,; int width,; int height). Intersect to the specified 2D region. RegionRequest; intersect2D(ImageRegion region). Intersect to the specified 2D region, ignoring z and t. boolean; overlapsRequest(RegionRequest request). Returns true if the region specified by this request overlaps with that of another request. RegionRequest; pad2D(int xPad,; int yPad). Add symmetric padding to the x and y dimensions of a request. RegionRequest; pad2D(Padding padding). Add symmetric padding to the x and y dimensions of a request. String; toString();  ; RegionRequest; translate(int dx,; int dy). Create a RegionRequest equivalent to this one with the x and y coordinates updated by translation. RegionRequest; updateDownsample(double downsample). Create a RegionRequest equivalent to this one with the updated downsample value. RegionRequest; updatePath(String path). Create a RegionRequest equivalent to this one with the updated path. RegionRequest; updateT(int t). Create a RegionRequest equivalent to this one with the updated t value. RegionRequest; updateZ(int z). Create a RegionRequest equivalent to this one with the updated z value. Methods inherited from class qupath.lib.regions.ImageRegion; contains, createInstance, createInstance, createInstance, getHeight, getImagePlane, getMaxX, getMaxY, getMinX, getMinY, getPlane, getT, getWidth, getX, getY, getZ, intersects, intersects. Methods inherited from class java.lang.Object; clone, finalize, getClass, notify, notifyAll, wait, wait, wait. Method Details. toString; public String toString(). Overrides:; toString in class ImageRegion. createInstance; public static RegionRequest createInstance(ImageServer<?> server); Create a request for the full width and height of an ImageServer, for the default plane (first z-slice, time point) ; and first resolution level downsample (usually 1, but not always). Parameters:; server - ; Returns:. createInstance; public static RegionRequest createInstance(ImageServer<?> server,; double downsample); ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html:4155,update,updated,4155,javadoc/docs/qupath/lib/regions/RegionRequest.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/regions/RegionRequest.html,1,['update'],['updated']
Energy Efficiency," + Math.exp(-value)). SIGNED_DISTANCE_TO_ANNOTATIONS - Variable in class qupath.lib.gui.actions.menus.AnalyzeMenuActions.Actions;  ; SimpleImage - Interface in qupath.lib.analysis.images. A minimal interface for accessing pixel values in a single-channel image. SimpleImages - Class in qupath.lib.analysis.images. Create SimpleImage instances for basic pixel processing. SimpleImages() - Constructor for class qupath.lib.analysis.images.SimpleImages;  ; SimpleImageViewer - Class in qupath.lib.gui.panes. A simple viewer for a single image, with options to save or copy. SimpleImageViewer() - Constructor for class qupath.lib.gui.panes.SimpleImageViewer. Create a new simple image viewer. SimpleModifiableImage - Interface in qupath.lib.analysis.images. A minimal interface to define a means to provide access to pixel values from a 2D, 1-channel image. SimplePluginWorkflowStep - Class in qupath.lib.plugins.workflow. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). SimplePluginWorkflowStep() - Constructor for class qupath.lib.plugins.workflow.SimplePluginWorkflowStep. Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String, Class<? extends PathPlugin<?>>, String) - Constructor for class qupath.lib.plugins.workflow.SimplePluginWorkflowStep. Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String, Class<? extends PathPlugin<?>>, String, String, String) - Constructor for class qupath.lib.plugins.workflow.SimplePluginWorkflowStep. Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. SimpleProgressMonitor - Interface in qupath.lib.plugins. Class for monitoring the process of a plugin and displaying feedback to the user. SimpleThresholdCommand - Class in qupath.process.gui.commands. Apply simple thresholding to an image via the pi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:976002,adapt,adapted,976002,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['adapt'],['adapted']
Energy Efficiency," - 1 is the lowest resolution available. int; getHeight(). Height of the full-resolution image in pixels. Class<T>; getImageClass(). Get the class of the image representation returned by this ImageServer. ImageServerMetadata; getMetadata(). Get essential metadata associated with the ImageServer as a distinct object. String; getPath(). Default implementation lazily calls createID() on demand. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Request the preferred downsamples from the image metadata. protected double; getThumbnailDownsampleFactor(int maxWidth,; int maxHeight);  ; TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Always returns false. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. String; toString();  . Methods inherited from class java.lang.Object; clone, equals, getClass, hashCode, notify, notifyAll, wait, wait, wait. Methods inherited from interface qupath.lib.images.servers.ImageServer; getOriginalMetadata, getPixelCalibration, getServerType, getURIs, readBufferedImage, readRegion, readRegion, readRegion. Constructor Details. AbstractImageServer; protected AbstractImageServer(Class<T> imageClass). Method Details. getImageClass; public Class<T> getImageClass(); Description copied from interface: ImageServer; Get the class of the image representation returned by this ImageServer. Specified by:; getImageClass in interface Ima",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:3250,green,green,3250,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,1,['green'],['green']
Energy Efficiency," - ; pathImage - ; Returns:. convertToPolygonROI; public static PolygonROI convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane); Convert an ImageJ PolygonRoi to a QuPath PolygonROI. Parameters:; roi - ; cal - ; downsampleFactor - ; plane - ; Returns:. convertToIJRoi; public static <T extends PathImage<ImagePlus>> Roi convertToIJRoi(ROI pathROI,; double xOrigin,; double yOrigin,; double downsampleFactor); Convert a QuPath ROI to an ImageJ Roi. Type Parameters:; T - ; Parameters:; pathROI - ; xOrigin - x-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; yOrigin - y-origin indicating relationship of ImagePlus to the original image, as stored in ImageJ Calibration object; downsampleFactor - downsample factor at which the ImagePlus was extracted from the full-resolution image; Returns:. convertToROI; public static ROI convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; ImagePlane plane); Create a ROI from an ImageJ Roi. Parameters:; roi - ImageJ Roi; xOrigin - x-origin, as stored in an ImageJ Calibration object; yOrigin - y-origin, as stored in an ImageJ Calibration object; downsampleFactor - ; plane - plane defining c, z and t indices; Returns:. convertToOpticalDensitySum; public static FloatProcessor convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue); Calculate optical density values for the red, green and blue channels, then add these all together. Parameters:; cp - ; maxRed - ; maxGreen - ; maxBlue - ; Returns:. colorDeconvolve; public static FloatProcessor[] colorDeconvolve(ColorProcessor cp,; ColorDeconvolutionStains stains); Apply color deconvolution, outputting 3 'stain' images in the same order as the stain vectors. Parameters:; cp - input RGB color image; stains - color deconvolution stain vectors; Returns:; array containing three FloatProcessors, representing the deconvolved stains. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:26507,green,green,26507,javadoc/docs/qupath/imagej/tools/IJTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html,1,['green'],['green']
Energy Efficiency," ; Important! Use this with caution or, even better, not at all!; ; In general, the ID for an object should be unique.; This is best achieved by allowing the ID to be generated randomly when the object ; is created, and never changing it to anything else.; ; However, there are times when it is necessary to transfer the ID from an existing object, ; such as whenever the ROI of an object is being transformed and the original object deleted.; ; For that reason, it is possible (although discouraged) to set an ID explicitly. Parameters:; id - the ID to use; Throws:; IllegalArgumentException - if the specified ID is null. refreshID; public void refreshID(); Regenerate a new random ID. See Also:. setID(UUID). storeMetadataValue; protected Object storeMetadataValue(String key,; String value); Store a metadata value.; ; Note: This should be used with caution; for objects that could be plentiful (e.g. detections) it is likely; to be unwise to store any metadata values, since these can't be stored particularly efficiently - and; therefore this could lead to far too high memory requirements.; ; If metadata is never stored for an object, no storage object is created - only a null reference.; ; Therefore the intention is that some newly-defined PathObject classes may take advantage of this mechanism and expose their; own API for getting/setting values, backed-up by this store (which takes care of serialization/deserialization).; However class definitions can also avoid making any use of this whatsoever if it's expected that it could lead to too much ; memory being required. Parameters:; key - ; value - ; Returns:; See Also:. retrieveMetadataValue(java.lang.String). retrieveMetadataValue; protected Object retrieveMetadataValue(String key); Get a metadata value. Parameters:; key - ; Returns:; the metadata value if set, or null if not; See Also:. storeMetadataValue(java.lang.String, java.lang.String). retrieveMetadataKeys; protected Set<String> retrieveMetadataKeys(); Get the set of",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObject.html:21296,efficient,efficiently,21296,javadoc/docs/qupath/lib/objects/PathObject.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObject.html,1,['efficient'],['efficiently']
Energy Efficiency," Constr | ; Method. SEARCH. Package qupath.lib.plugins; Class CommandLineTaskRunner.CommandLineProgressMonitor. java.lang.Object; qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor. All Implemented Interfaces:; SimpleProgressMonitor. Enclosing class:; CommandLineTaskRunner. public static class CommandLineTaskRunner.CommandLineProgressMonitor; extends Object; implements SimpleProgressMonitor; A SimpleProgressMonitor that sends progress to a log. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; CommandLineProgressMonitor();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1330,monitor,monitor,1330,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,2,['monitor'],"['monitor', 'monitoring']"
Energy Efficiency," IHC data.; More details on each method (in particular 'Blue normalized', here 'Blue chromaticity') are provided in:; ; Brey, E. M., Lalani, Z., Johnston, C., Wong, M., McIntire, L. V., Duke, P. J., & Patrick, C. W. (2003).; Automated Selection of DAB-labeled Tissue for Immunohistochemical Quantification.; Journal of Histochemistry & Cytochemistry, 51(5); doi:10.1177/002215540305100503; ; Color deconvolution methods use default stain vectors - qupath.lib.color contains more flexible options for this. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ColorTransformer.ColorTransformMethod. Enum consisting of color transforms that may be applied to RGB images. Constructor Summary; Constructors. Constructor; Description; ColorTransformer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static float; blueChromaticity(int rgb). Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). static float; brightness(int rgb). Extract brightness value from RGB-to-HSB transform. static float; brown(int rgb). Extract brown value, (blue - (red + green)*0.3f). static int[]; colorDeconvolveReconvolveRGBArray(int[] buf,; ColorDeconvolutionStains stainsInput,; ColorDeconvolutionStains stainsOutput,; boolean discardResidual,; int[] bufOutput). Deconvolve RGB array with one set of stain vectors, and reconvolve with another. static int[]; colorDeconvolveReconvolveRGBArray(int[] buf,; ColorDeconvolutionStains stainsInput,; ColorDeconvolutionStains stainsOutput,; boolean discardResidual,; int[] bufOutput,; float scale,; float offset). Deconvolve RGB array with one set of stain vectors, and reconvolve with another - with optional scaling. static float; colorDeconvolveRGBPixel(int rgb,; ColorDeconvolutionStains stains,; int channel). Calculate the color deconvolved value for a single pixel, stored as a packed (A)RGB int. static ColorModel; g",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:1756,green,green,1756,javadoc/docs/qupath/lib/color/ColorTransformer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html,1,['green'],['green']
Energy Efficiency," Mat to match a specified pixel type. Parameters:; type - the pixel type that the Mat should be converted to; Returns:. multiply; public static ImageOp multiply(double... values); Multiply all pixels by a constant. Parameters:; values - either a single value to apply to all channels, or an array of Mat.channels() values.; Returns:. divide; public static ImageOp divide(double... values); Divide all pixels by a constant. Parameters:; values - either a single value to apply to all channels, or an array of Mat.channels() values.; Returns:. add; public static ImageOp add(double... values); Add a constant to all pixels. Parameters:; values - either a single value to apply to all channels, or an array of Mat.channels() values.; Returns:. subtract; public static ImageOp subtract(double... values); Subtract a constant from all pixels. Parameters:; values - either a single value to apply to all channels, or an array of Mat.channels() values.; Returns:. power; public static ImageOp power(double value); Raise every pixel element to a power. Parameters:; value - ; Returns:. sqrt; public static ImageOp sqrt(); Calculate the square root of all pixel values. Returns:. sequential; public static ImageOp sequential(Collection<? extends ImageOp> ops); Apply a collection of ops sequentially, chaining the output of one op as the input for the next. Parameters:; ops - ; Returns:; an op that represents the result of chaining the other ops together. sequential; public static ImageOp sequential(ImageOp... ops); Apply an array of ops sequentially, chaining the output of one op as the input for the next. Parameters:; ops - ; Returns:; an op that represents the result of chaining the other ops together. splitMerge; public static ImageOp splitMerge(Collection<? extends ImageOp> ops); Create an op that applies all the specified ops to the input Mat, concatenating the results as channels ; of the output. Parameters:; ops - ; Returns:; a single op that combines all other ops by split and merge. spl",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOps.Core.html:4781,power,power,4781,javadoc/docs/qupath/opencv/ops/ImageOps.Core.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOps.Core.html,3,['power'],['power']
Energy Efficiency," Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.common; Class ColorTools. java.lang.Object; qupath.lib.common.ColorTools. public final class ColorTools; extends Object; Static functions to help work with RGB(A) colors using packed ints. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final Integer; BLACK. Packed int representing black. static final Integer; BLUE. Packed int representing blue. static final Integer; CYAN. Packed int representing cyan. static final Integer; GREEN. Packed int representing green. static final Integer; MAGENTA. Packed int representing magenta. static final Integer; MASK_ALPHA. Mask for use when extracting the alpha component from a packed ARGB int value. static final Integer; MASK_BLUE. Mask for use when extracting the blue component from a packed (A)RGB int value. static final Integer; MASK_GREEN. Mask for use when extracting the green component from a packed (A)RGB int value. static final Integer; MASK_RED. Mask for use when extracting the red component from a packed (A)RGB int value. static final Integer; RED. Packed int representing red. static final Integer; WHITE. Packed int representing white. static final Integer; YELLOW. Packed int representing yellow. Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static int; alpha(int argb). Extract the 8-bit alpha value from a packed ARGB value. static int; blue(int rgb). Extract the 8-bit blue value from a packed RGB value. static int; clip255(double val). Convert a double value to an int, flooring and clipping to the range 0-255. static int; do8BitRangeCheck(double v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(float v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(int v). Clip a",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:1212,green,green,1212,javadoc/docs/qupath/lib/common/ColorTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html,1,['green'],['green']
Energy Efficiency," Note: A URI alone may not be sufficient to recreate even a simple ImageServer; see getBuilder(). Returns:. getPreferredDownsamples; double[] getPreferredDownsamples(); Get an array of downsample factors supported by the server. Returns:. nResolutions; int nResolutions(); Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Returns:. getDownsampleForResolution; double getDownsampleForResolution(int level); Get the downsample factor for a specified resolution level, where level 0 is the full resolution image ; and nResolutions() - 1 is the lowest resolution available. Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. getWidth; int getWidth(); Width of the full-resolution image in pixels. Returns:. getHeight; int getHeight(); Height of the full-resolution image in pixels. Returns:. nChannels; int nChannels(); Number of channels (3 for RGB). Returns:. isRGB; boolean isRGB(); True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Returns:. nZSlices; int nZSlices(); Number of slices in a z-stack. Returns:. nTimepoints; int nTimepoints(); Number of time points in a time series. Returns:. getPixelCalibration; default PixelCalibration getPixelCalibration(); Get the PixelCalibration object from the current metadata. Returns:. getCachedTile; T getCachedTile(TileRequest tile); Get a cached tile, or null if the tile has not been cached.; ; This is useful whenever it is important to return quickly rather than wait for a tile to be fetched or generated.; ; Warning! This method should be used very cautiously, as it is permitted to return the tile stored internally ; in the cache for performance. This must not be modified by any code requesting the tile. Parameters:; tile - ; Returns:; the tile if it has been cached, or null if no cached tile is available for the request. readBufferedImage; @Deprecated; default T readBufferedImage(RegionRequest request); throws IOE",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:6819,green,green,6819,javadoc/docs/qupath/lib/images/servers/ImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html,1,['green'],['green']
Energy Efficiency," Padding; calculatePadding(). Calculate the required padding. Padding; getPadding(). Get the padding requested for this operation. protected abstract List<Mat>; transformPadded(Mat input). Apply the op, but ignoring padding. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Methods inherited from interface qupath.opencv.ops.ImageOp; getChannels, getOutputType, getURIs, updateURIs. Methods inherited from interface qupath.lib.io.UriResource; getUris, updateUris. Constructor Details. PaddedOp; public PaddedOp(). Method Details. calculatePadding; protected abstract Padding calculatePadding(); Calculate the required padding. Returns:. transformPadded; protected abstract List<Mat> transformPadded(Mat input); Apply the op, but ignoring padding.; Non-empty padding will be removed automatically elsewhere.; ; This should return a list rather than merged channels, because this makes it possible to strip the padding; before merging to create the final output to apply(Mat) (since this can be much more efficient).; ; Nevertheless, if the output channels are already merged, then a singleton list should be returned -; there is no need to split channels, because the list items themselves can have any number of channels. Parameters:; input - ; Returns:. apply; public Mat apply(Mat input); Description copied from interface: ImageOp; Apply operation to the image. The input may be modified (and the operation applied in-place), ; therefore should be duplicated if a copy is required to be kept.; ; Note that any non-empty padding will be removed, potentially giving an output image smaller than ; the input. If this is not desirable use ImageOps.padAndApply(ImageOp, Mat). Specified by:; apply in interface ImageOp; Parameters:; input - input image; Returns:; output image, which may be the same as the input image; See Also:. ImageOp.getPadding(); ImageOps.padAndApply(ImageOp, Mat, int); ImageOps.padAndAppl",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOps.PaddedOp.html:2021,efficient,efficient,2021,javadoc/docs/qupath/opencv/ops/ImageOps.PaddedOp.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOps.PaddedOp.html,1,['efficient'],['efficient']
Energy Efficiency," Parameters:; a - ; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packClippedARGB(int, int, int, int). packClippedARGB; public static int packClippedARGB(int a,; int r,; int g,; int b); Make a packed ARGB value from specified input values, clipping to the range 0-255.; ; Input a, r, g, and b should be in the range 0-255, but if they are not they are clipped to the closest valid value.; ; Warning! Note the order of the input values.; This differs from the (deprecated) method makeRGBA(int, int, int, int). Parameters:; a - ; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packARGB(int, int, int, int). do8BitRangeCheck; public static int do8BitRangeCheck(int v); Clip an input value to be an integer in the range 0-255. Parameters:; v - ; Returns:. do8BitRangeCheck; public static int do8BitRangeCheck(float v); Clip an input value to be an integer in the range 0-255 (with rounding down). Parameters:; v - ; Returns:. do8BitRangeCheck; public static int do8BitRangeCheck(double v); Clip an input value to be an integer in the range 0-255 (with rounding down). Parameters:; v - ; Returns:. alpha; public static int alpha(int argb); Extract the 8-bit alpha value from a packed ARGB value. Parameters:; argb - ; Returns:. red; public static int red(int rgb); Extract the 8-bit red value from a packed RGB value. Parameters:; rgb - ; Returns:. green; public static int green(int rgb); Extract the 8-bit green value from a packed RGB value. Parameters:; rgb - ; Returns:. blue; public static int blue(int rgb); Extract the 8-bit blue value from a packed RGB value. Parameters:; rgb - ; Returns:. makeScaledRGB; public static int makeScaledRGB(int rgb,; double scale); Scale the RGB channels for a color by a fixed amount.; ; This is useful for brightening/darkening an input color. Parameters:; rgb - ; scale - ; Returns:. clip255; public static int clip255(double val); Convert a double value to an int, flooring and clipping to the range 0-255. Parameters:; val - ; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:9698,green,green,9698,javadoc/docs/qupath/lib/common/ColorTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html,3,['green'],['green']
Energy Efficiency," PathTask> tasks). Perform post-processing after a task has complete. void; runTasks(Collection<? extends Runnable> tasks). Pass a collection of parallelizable tasks to run. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. TaskRunnerFX; public TaskRunnerFX(QuPathGUI qupath); Constructor. Parameters:; qupath - the QuPath instance. TaskRunnerFX; public TaskRunnerFX(QuPathGUI qupath,; int nThreads); Constructor specifying the number of threads. Parameters:; qupath - the QuPath instance; nThreads - the number of threads to use. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. runTasks; public void runTasks(Collection<? extends Runnable> tasks); Description copied from interface: TaskRunner; Pass a collection of parallelizable tasks to run. Specified by:; runTasks in interface TaskRunner; Overrides:; runTasks in class AbstractTaskRunner; Parameters:; tasks - the tasks to run. If these are instances of PathTask then ; an optional postprocessing may be applied after all tasks are complete. postProcess; protected void postProcess(Collection<? extends PathTask> tasks); Description copied from class: AbstractTaskRunner; Perform post-processing after a task has complete.; ; This is necessary to call the taskComplete method (if the Runnable is an instance of PathTask),; and also to update any progress monitor.; ; Note: Subclasses may choose to override this method so that it is called on a particular thread; (e.g. with Platform.runLater() or SwingUtilities.invokeLater). Overrides:; postProcess in class AbstractTaskRunner; Parameters:; tasks - . ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/TaskRunnerFX.html:2893,monitor,monitor,2893,javadoc/docs/qupath/lib/gui/TaskRunnerFX.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/TaskRunnerFX.html,1,['monitor'],['monitor']
Energy Efficiency," Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region - optional region of the image that has been changed; in interactive mode, this region may be repainted. pluginCompleted; void pluginCompleted(String message); Notify the monitor that the plugin has completed its work. This is called automatically by updateProgress if progress >= 1,; but may also be called if the plugin was cancelled or otherwise terminated abnormally. Parameters:; message - message to show upon completion. cancelled; boolean cancelled(); Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:2389,monitor,monitor,2389,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,2,['monitor'],['monitor']
Energy Efficiency," a Mat, ignoring NaNs. static Mat; minimum(Mat m1,; double d). Get the per-element minimum value between an array and a scalar. static Mat; minimum(Mat m1,; Mat m2). Get the per-element minimum value for two arrays. static Mat; minus(Mat m1,; Number s). Subtract a constant from an array. static Mat; minus(Mat m1,; Mat m2). Subtract one array from another. static Mat; minus(Mat m1,; Scalar s). Subtract a scalar from an array. static Mat; multiply(Mat m1,; double s). Multiply array elements by a constant. static Mat; multiply(Mat m1,; Mat m2). Per-element multiplication of two arrays (not matrix multiplication). static Mat; negative(Mat m1). Multiply elements of an array by -1. static Mat; or(Mat m1,; Mat m2). Compute the bitwise OR of two arrays. static Mat; plus(Mat m1,; Number s). Add an array and a number. static Mat; plus(Mat m1,; Mat m2). Add two arrays. static Mat; plus(Mat m1,; Scalar s). Add an array and a scalar. static Mat; power(Mat m1,; double power). Raise elements of an array to a specified power. static long[]; shape(Mat mat). Get the shape of a multidimensional Mat. static List<Mat>; splitChannels(Mat mat). Split channels of an array. static double; std(Mat mat). Calculate the standard deviation of all elements in a Mat, ignoring NaNs. static double; sum(Mat mat). Calculate the sum of all elements in a Mat, ignoring NaNs. static Mat; xor(Mat m1,; Mat m2). Compute the bitwise XOR of two arrays. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. GroovyCV; public GroovyCV(). Method Details. mean; public static double mean(Mat mat); Calculate the mean of all elements in a Mat, ignoring NaNs. Parameters:; mat - ; Returns:. sum; public static double sum(Mat mat); Calculate the sum of all elements in a Mat, ignoring NaNs. Parameters:; mat - ; Returns:. std; public static double std(Mat mat); Calculate the standard deviation of all elements in a Mat, ig",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/GroovyCV.html:4585,power,power,4585,javadoc/docs/qupath/opencv/tools/GroovyCV.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/GroovyCV.html,1,['power'],['power']
Energy Efficiency," class qupath.lib.roi.PointsROI;  ; getGeometry() - Method in class qupath.lib.roi.PolylineROI;  ; getGeometry() - Method in class qupath.lib.roi.RectangleROI;  ; getGeometry() - Method in class qupath.lib.roi.AreaROI;  ; getGeometry() - Method in class qupath.lib.roi.GeometryROI;  ; getGeometry() - Method in interface qupath.lib.roi.interfaces.ROI. Returns a org.locationtech.jts.geom.Geometry object. getGeometry() - Method in class qupath.lib.roi.PolygonROI;  ; getGeometryFactory() - Method in class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler;  ; getGitHubIssuesUrl() - Static method in class qupath.lib.gui.Urls. Get a URL pointing to the main GitHub issues page. getGitHubRepoUrl() - Static method in class qupath.lib.gui.Urls. Get a URL pointing to the main QuPath GitHub repo. getGreen() - Method in class qupath.lib.color.StainVector. Get the green component of the (normalized) stain vector. getGreen() - Method in class qupath.lib.display.settings.ChannelColor. Get the green value. getGreenOpticalDensities(int[], double, float[]) - Static method in class qupath.lib.color.ColorDeconvolutionHelper. Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. getGridHeight() - Method in class qupath.lib.objects.hierarchy.DefaultTMAGrid;  ; getGridHeight() - Method in interface qupath.lib.objects.hierarchy.TMAGrid. Number of cores along the vertical axis of the grid. getGridLines() - Method in class qupath.lib.gui.viewer.OverlayOptions;  ; getGridWidth() - Method in class qupath.lib.objects.hierarchy.DefaultTMAGrid;  ; getGridWidth() - Method in interface qupath.lib.objects.hierarchy.TMAGrid. Number of cores along the horizontal axis of the grid. getHalo() - Method in class qupath.opencv.ml.PatchClassifierParams. Get the 'halo' around the output. getHandles() - Method in class qupath.lib.roi.RoiEditor. Get all the handles for the current ROI being edited, or an empty list if no handles are available. getHazardRatio() ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:398654,green,green,398654,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['green'],['green']
Energy Efficiency," color deconvolution with default H-DAB stains. DAB_H_DAB_8_bit. DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Eosin_H_E. Eosin after color deconvolution with default H&E stains. Eosin_H_E_8_bit. Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Green. Green channel only. Green_chromaticity. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue. Green value divided by blue value. Green_OD. Green channel optical densities. Hematoxylin_H_DAB. Hematoxylin after color deconvolution with default H-DAB stains. Hematoxylin_H_DAB_8_bit. Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. Hematoxylin_H_E. Hematoxylin after color deconvolution with default H&E stains. Hematoxylin_H_E_8_bit. Hematoxylin after color deconvolution with default H&E stains and conversion to 8-bit. Hue. Hue value (from RGB-HSB transform). OD_Normalized. RGB values normalized to OD vector (to reduce intensity information). Optical_density_sum. Sum of red, green and blue optical densities. Original. Original image. Red. Red channel only. Red_chromaticity. Red chromaticity value, red / max(1, red + green + blue). Red_OD. Red channel optical densities. RGB_mean. Mean of red, green and blue channels. Saturation. Saturation value (from RGB-HSB transform). Stain_1. First stain after color deconvolution. Stain_2. Second stain after color deconvolution. Stain_3. Third stain after color deconvolution. White. All pixels white. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; toString();  ; static ColorTransformer.ColorTransformMethod; valueOf(String name). Returns the enum constant of this class with the specified name. static ColorTransformer.ColorTransformMethod[]; values(). Returns an array containing the constants of this enum class, in; the order they are declared. Methods inherited from class java.la",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:2397,reduce,reduce,2397,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,1,['reduce'],['reduce']
Energy Efficiency," density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut - lookup table to aid with fast optical density calculations; Returns:. opticalDensitySum; public static float opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut_red - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. brightness; public static float brightness(int rgb); Extract brightness value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. getPixelValue; public ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10317,green,greenChromaticity,10317,javadoc/docs/qupath/lib/color/ColorTransformer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html,5,['green'],"['green', 'greenChromaticity']"
Energy Efficiency," in enum class qupath.process.gui.WandToolEventHandler.WandType. Grayscale image. grayscale() - Method in class qupath.lib.images.servers.LabeledImageServer.Builder. Use grayscale LUT, rather than deriving colors from classifications. grayscale(boolean) - Method in class qupath.lib.images.servers.LabeledImageServer.Builder. Optionally use grayscale LUT, rather than deriving colors from classifications. GRAYSCALE - Enum constant in enum class qupath.lib.display.ChannelDisplayMode. Show using a grayscale LUT (black to white). greaterThan(ImageProcessor, ImageProcessor) - Static method in class qupath.imagej.processing.SimpleThresholding. Created a binary image by thresholding pixels to find where ip1 > ip2. greaterThanOrEqual(ImageProcessor, ImageProcessor) - Static method in class qupath.imagej.processing.SimpleThresholding. Created a binary image by thresholding pixels to find where ip1 >= ip2. green(int) - Static method in class qupath.lib.common.ColorTools. Extract the 8-bit green value from a packed RGB value. Green - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green channel only. GREEN - Static variable in class qupath.lib.common.ColorTools. Packed int representing green. GREEN - Static variable in class qupath.lib.images.servers.ImageChannel. Default green channel for RGB images. Green_chromaticity - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green value divided by blue value. Green_OD - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green channel optical densities. greenChromaticity(int) - Static method in class qupath.lib.color.ColorTransformer. Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). greenOverBlue(int) - Static method in cl",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:559085,green,green,559085,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['green'],['green']
Energy Efficiency," inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take care of resolving ; overlaps when using ParallelTileObjects after the detection is complete and firing notification ; events in a PathObjectHierarchy. ObjectDetector<T>. Minimal interface that may be used to plugins that perform detection within a specified ROI ; and using a specified ImageData with set parameters. ParallelTileObject. A temporary object, used during parallel processing to represent a tile currently being used for object; detection. ParallelTileObject.Status. Current processing status for the tile. PathInteractivePlugin<T>. Interface to define a PathPlugin that requires a list of (user-adjustable) parameters. PathPlugin<T>. Primary interface for defining a 'plugin' command. PathTask. Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. SimpleProgressMonitor. Class for monitoring the process of a plugin and displaying feedback to the user. TaskRunner. A minimal interface for a class capable of running tasks in parallel, giving feedback to the user. TaskRunnerUtils. A utility class to help with the creation of TaskRunner instances. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:2842,monitor,monitoring,2842,javadoc/docs/qupath/lib/plugins/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html,1,['monitor'],['monitoring']
Energy Efficiency," modifications are made to the hierarchy ; to ensure that all listeners are notified (including for any GUI).; ; It is common to call it at the end of any script that does any direct modification of objects ; (e.g. adding/removing measurements, setting classifications). Parameters:; hierarchy - . getColorRGB; @Deprecated; public static Integer getColorRGB(int... v); Deprecated.; Use instead makeRGB(int, int, int) or makeARGB(int, int, int, int). Create a new packed-int representation of an RGB color.; . Parameters:; v - A value between 0 and 255. If a single value is give, the result will be; a shade of gray (RGB all with that value). Otherwise, 3 or 4 values may be given to generate ; either an RGB or RGBA color. Note: values are expected in order RGBA, but Java's packed ints are really ARGB.; Returns:. makeRGB; public static Integer makeRGB(int r,; int g,; int b); Make a packed int representation of an RGB color.; Alpha defaults to 255.; Red, green and blue values should be in the range 0-255; if they are not, they will be clipped. Parameters:; r - ; g - ; b - ; Returns:. makeARGB; public static Integer makeARGB(int a,; int r,; int g,; int b); Make a packed int representation of an ARGB color.; Alpha, red, green and blue values should be in the range 0-255; if they are not, they will be clipped. Parameters:; a - ; r - ; g - ; b - ; Returns:. getCurrentServerPath; public static String getCurrentServerPath(); Get the path to the ImageServer of the current ImageData. Returns:; See Also:. getCurrentImageData(). getCurrentImageData; public static ImageData<BufferedImage> getCurrentImageData(); Get the path to the current ImageData.; ; This returns getBatchImageData() if it is not null; otherwise, it returns ; the default image data last set through setDefaultImageData(ImageData). Returns:; See Also:. getBatchImageData(). getProject; public static Project<BufferedImage> getProject(); Get the current project.; ; This returns getBatchProject() if it is not null; otherwise,",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:50230,green,green,50230,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['green'],['green']
Energy Efficiency," null if this classification has no parent. Returns:. isDerivedClass; public boolean isDerivedClass(); Returns true if #getParentClass() != null. Returns:. isDerivedFrom; public boolean isDerivedFrom(PathClass parentClass); Returns true if this class, or any ancestor class, is equal to the specified parent class. Parameters:; parentClass - ; Returns:. isAncestorOf; public boolean isAncestorOf(PathClass childClass); Returns true if this class is equal to the specified child class, ; or an ancestor of that class. Parameters:; childClass - ; Returns:. getBaseClass; public PathClass getBaseClass(); Get the 'base' class, i.e. trace back through getParentClass() until no parent is available.; ; For a PathClass with no parent, this just returns itself. Returns:. setColor; public void setColor(Integer colorRGB); Set the color that should be used to display objects with this classification. Parameters:; colorRGB - color, as a packed (A)RGB value. setColor; public void setColor(int red,; int green,; int blue); Set the color as 8-bit RGB values. Parameters:; red - ; green - ; blue - ; Since:; v0.4.0. getColor; public Integer getColor(); Get the color that should be used to display objects with this classification. Returns:; packed (A)RGB value representing the classification color. getName; public String getName(); Get the name of this classification. ; Note that this does not incorporate information from any parent classifications; to access this, ; use toString() instead. Returns:. toString; public String toString(). Overrides:; toString in class Object. toString; public String toString(String delimiter); Create a string representation, using the specified delimiter between ; elements of derived PathClasses. Parameters:; delimiter - ; Returns:. isValid; public boolean isValid(); A PathClass is valid if its name is not null.; ; This should generally the case, but a single (invalid) PathClass with a null name ; can be used to indicate the absence of a classification; however, i",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:8471,green,green,8471,javadoc/docs/qupath/lib/objects/classes/PathClass.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html,1,['green'],['green']
Energy Efficiency," point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getGeometry; public Geometry getGeometry(); Description copied from interface: ROI; Returns a org.locationtech.jts.geom.Geometry object. Specified by:; getGeometry in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolylineROI.html:11204,efficient,efficient,11204,javadoc/docs/qupath/lib/roi/PolylineROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/PolylineROI.html,1,['efficient'],['efficient']
Energy Efficiency," public class ColorMaps; extends Object; Helper class to manage colormaps, which are rather like lookup tables but easily support interpolation. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ColorMaps.ColorMap. colormap, which acts as an interpolating lookup table with an arbitrary range. Constructor Summary; Constructors. Constructor; Description; ColorMaps();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorMaps.ColorMap; createColorMap(String name,; double[] r,; double[] g,; double[] b). Create a colormap using floating point values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int[] r,; int[] g,; int[] b). Create a colormap using integer values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int r,; int g,; int b). Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ColorMaps; public",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:1392,green,green,1392,javadoc/docs/qupath/lib/color/ColorMaps.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html,1,['green'],['green']
Energy Efficiency," public static int[] unpackARGB(int rgb,; int[] array); Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the alpha, red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. packClippedRGB; public static int packClippedRGB(int r,; int g,; int b); Make a packed RGB value from specified input values, clipping to the range 0-255.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255, but if they are not they are clipped to the closest valid value. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; // * @see #packRGB(int, int, int). makeRGBA; @Deprecated; public static int makeRGBA(int r,; int g,; int b,; int a); Deprecated.; The naming and order of arguments is misleading. The output is a packed ARGB value, ; but arguments are provided in the order red, green, blue, alpha. Make a packed ARGB value from specified input values.; ; Input r, g, b and a should be in the range 0-255 - but no checking is applied.; Rather, the input values are simply shifted as they are. Parameters:; r - ; g - ; b - ; a - ; Returns:; See Also:. packARGB(int, int, int, int). packARGB; public static int packARGB(int a,; int r,; int g,; int b); Make a packed ARGB value from specified input values.; ; Input a, r, g, and b should be in the range 0-255; only the lower 8 bits are used.; ; Warning! Note the order of the input values.; This differs from the (deprecated) method makeRGBA(int, int, int, int). Parameters:; a - ; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packClippedARGB(int, int, int, int). packClippedARGB; public static int packClippedARGB(int a,; int r,; int g,; int b); Make a packed ARGB value from specified input values, clipping to the range 0-255.; ; Input a, r, g, and b should be in the range 0-255, bu",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:7700,green,green,7700,javadoc/docs/qupath/lib/common/ColorTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html,1,['green'],['green']
Energy Efficiency," qupath.lib.gui.viewer.recording.ViewTracker. Return the recording property of this ViewTracker. RECTANGLE - Static variable in class qupath.lib.gui.viewer.tools.PathTools. Rectangle drawing tool. RECTANGLE_TOOL - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; RECTANGLE_TOOL - Variable in class qupath.lib.gui.ToolManager;  ; RectangleROI - Class in qupath.lib.roi. ROI representing a square or rectangle (unrotated). red(int) - Static method in class qupath.lib.common.ColorTools. Extract the 8-bit red value from a packed RGB value. Red - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Red channel only. RED - Static variable in class qupath.lib.common.ColorTools. Packed int representing red. RED - Static variable in class qupath.lib.images.servers.ImageChannel. Default red channel for RGB images. Red_chromaticity - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Red chromaticity value, red / max(1, red + green + blue). Red_OD - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Red channel optical densities. redChromaticity(int) - Static method in class qupath.lib.color.ColorTransformer. Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). redo() - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; redo() - Method in interface qupath.lib.gui.scripting.ScriptEditorControl. Request redo. redo() - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; REDO - Variable in class qupath.lib.gui.actions.menus.EditMenuActions.Actions;  ; redoAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; redoOnce() - Method in class qupath.lib.gui.UndoRedoManager. Request to 'redo' the last 'undone' hierarchy change for the current active viewer. RefineAnnotationsPlugin<T> - Class in qupath.lib.plugins.objects. Plugin to create new annotations by expanding the size of exis",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:832228,green,green,832228,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['green'],['green']
Energy Efficiency," range 0-255; only the lower 8 bits are used. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packClippedRGB(int, int, int). unpackRGB; public static int[] unpackRGB(int rgb); Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackRGB; public static int[] unpackRGB(int rgb,; int[] array); Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb); Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb,; int[] array); Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the alpha, red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. packClippedRGB; public static int packClippedRGB(int r,; int g,; int b); Make a packed RGB value from specified input values, clipping to the range 0-255.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255, but if they are not they are clipped to the closest valid value. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; // * @see #packRGB(int, int, int). makeRGBA; @Deprecated; public static int makeRGBA(int r,; int g,; int b,; int a); Deprecated.; The naming and order of arguments is misleading. The output is a packed ARGB value, ; but arguments are provided in the order red, green, blue, alpha. Make a packed ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:6759,green,green,6759,javadoc/docs/qupath/lib/common/ColorTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html,1,['green'],['green']
Energy Efficiency," red component from a packed (A)RGB int value. static final Integer; RED. Packed int representing red. static final Integer; WHITE. Packed int representing white. static final Integer; YELLOW. Packed int representing yellow. Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static int; alpha(int argb). Extract the 8-bit alpha value from a packed ARGB value. static int; blue(int rgb). Extract the 8-bit blue value from a packed RGB value. static int; clip255(double val). Convert a double value to an int, flooring and clipping to the range 0-255. static int; do8BitRangeCheck(double v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(float v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(int v). Clip an input value to be an integer in the range 0-255. static int; green(int rgb). Extract the 8-bit green value from a packed RGB value. static int; makeRGB(int r,; int g,; int b). Deprecated.; Use packRGB(int, int, int) or packClippedRGB(int, int, int) instead. static int; makeRGBA(int r,; int g,; int b,; int a). Deprecated.; The naming and order of arguments is misleading. static int; makeScaledRGB(int rgb,; double scale). Scale the RGB channels for a color by a fixed amount. static int; packARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values. static int; packClippedARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values, clipping to the range 0-255. static int; packClippedRGB(int r,; int g,; int b). Make a packed RGB value from specified input values, clipping to the range 0-255. static int; packRGB(int r,; int g,; int b). Make a packed RGB value from specified input values. static int; red(int rgb). Extract the 8-bit red value from a packed RGB value. static int[]; unpackARGB(int rgb). Unpack a packed ARGB int into re",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:2316,green,green,2316,javadoc/docs/qupath/lib/common/ColorTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html,1,['green'],['green']
Energy Efficiency," terms of RGB optical densities. Author:; Pete Bankhead; See Also:. Serialized Form. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; StainVector.DefaultStains. Enum representing default stains. Constructor Summary; Constructors. Constructor; Description; StainVector(). Default constructor, required for Externalizable interface. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; arrayAsString(Locale locale). Get a String representation of the stain vector array, formatting according to the specified Locale. static double; computeAngle(StainVector s1,; StainVector s2). Calculate the angle between two stain vectors, in degrees. static StainVector; createStainVector(String name,; double r,; double g,; double b). Create a stain vector. static double[]; cross3(double[] u,; double[] v). Compute the cross product of two vectors. double[]; getArray(). Get the stain vector as a 3 element array (red, green, blue). double; getBlue(). Get the blue component of the (normalized) stain vector. int; getColor(). Get a Color that (roughly) corresponds to color represented by this stain vector. double; getGreen(). Get the green component of the (normalized) stain vector. String; getName(). Returns the name of the stain vector. double; getRed(). Get the red component of the (normalized) stain vector. boolean; isResidual(). Returns true if this vector represents the residual (orthogonal) stain, used whenever color deconvolution is required with two stains only. static StainVector; makeDefaultStainVector(StainVector.DefaultStains stain). Get a default stain vector. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. StainVector; public StainVector(); Default constructor, requir",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html:1629,green,green,1629,javadoc/docs/qupath/lib/color/StainVector.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/StainVector.html,1,['green'],['green']
Energy Efficiency," the processing within QuPath. BlobFunction<T>. Convert OpenCV Mats into blobs (tensors) for use with a deep learning framework. BooleanParameter. Parameter that can take on true of false value - or null. BoundaryStrategy. Helper class for handling the boundaries of training annotations when creating a pixel classifier. BrightnessContrastChannelPane. A pane responsible for the display and selection of channels from an image display. BrightnessContrastCommand. Command to show a Brightness/Contrast dialog to adjust the image display. BrightnessContrastHistogramPane. A pane to display a histogram for brightness/contrast adjustment, allowing the user to select min/max values. BrightnessContrastSettingsPane. A pane to save and load display settings, using a ResourceManager. BrightnessContrastSliderPane. A pane containing sliders for adjusting the min/max display range and gamma value; associated with an ImageDisplay. BrushToolEventHandler. Tool for drawing (and subtract from) freehand regions, optionally adapting brush size to magnification. BufferedImageOverlay. An overlay used to display one or more BufferedImage objects on top of a primary image shown in a viewer. BufferedImageTools. Static methods for working with BufferedImages and QuPath objects. BuildInfo. Basic version information about the current QuPath build. CellCountsCV. Simple plugin to attempt a very fast cell counting based upon (smoothed) peak detection. CellIntensityClassificationCommand. Command to (sub)classify cells as Negative/Positive or Negative/1+/2+/3+ based on a single (usually intensity-based) measurement. CellTools. Helper class for working with PathObjects that represent cells. ChannelColor. A simple class to store the color of an image channel. ChannelDisplayInfo. Interface used to control the display of single channels of image data, where; 'single channel' means one value per pixel (in Java's parlance, one band for the; SampleModel). ChannelDisplayInfo.ModifiableChannelDisplayInfo. Helper",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:5132,adapt,adapting,5132,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['adapt'],['adapting']
Energy Efficiency," unlockSelectedObjects(PathObjectHierarchy) - Static method in class qupath.lib.objects.PathObjectTools. Set selected objects to be 'unlocked', firing an update event if the status of any object is changed. unmanageMenuBar(MenuBar) - Static method in class qupath.lib.gui.prefs.SystemMenuBar. Do not manage the system menubar status for the given menubar. unpackARGB(int) - Static method in class qupath.lib.common.ColorTools. Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. unpackARGB(int, int[]) - Static method in class qupath.lib.common.ColorTools. Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. unpackRGB(int) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. unpackRGB(int, int[]) - Static method in class qupath.lib.common.ColorTools. Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. UNSET - Enum constant in enum class qupath.lib.images.ImageData.ImageType. Image type has not been set. unzippedExtensions(Path, String...) - Static method in class qupath.lib.io.PathIO. Get the extension of a file, or of all entries within a zip file. UPDATE - Variable in class qupath.lib.gui.actions.menus.HelpMenuActions.Actions;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewer;  ; updateAffineTransform() - Method in class qupath.lib.gui.viewer.QuPathViewerPlus;  ; updateAvailableStyles() - Static method in class qupath.lib.gui.prefs.QuPathStyleManager. Request that the list of available styles is updated. updateBounds(double, double) - Method in class qupath.lib.roi.PointsROI;  ; updateChart(BarChart<String, Number>) - Method in class qupath.lib.gui.charts.Charts.BarChartBuilder;  ; updateChart(PieChart) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder;  ; updateChart(ScatterChart<Number, Numb",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:1060910,green,green,1060910,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['green'],['green']
Energy Efficiency," value. static int; makeRGB(int r,; int g,; int b). Deprecated.; Use packRGB(int, int, int) or packClippedRGB(int, int, int) instead. static int; makeRGBA(int r,; int g,; int b,; int a). Deprecated.; The naming and order of arguments is misleading. static int; makeScaledRGB(int rgb,; double scale). Scale the RGB channels for a color by a fixed amount. static int; packARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values. static int; packClippedARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values, clipping to the range 0-255. static int; packClippedRGB(int r,; int g,; int b). Make a packed RGB value from specified input values, clipping to the range 0-255. static int; packRGB(int r,; int g,; int b). Make a packed RGB value from specified input values. static int; red(int rgb). Extract the 8-bit red value from a packed RGB value. static int[]; unpackARGB(int rgb). Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. static int[]; unpackARGB(int rgb,; int[] array). Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. static int[]; unpackRGB(int rgb). Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. static int[]; unpackRGB(int rgb,; int[] array). Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. WHITE; public static final Integer WHITE; Packed int representing white. BLACK; public static final Integer BLACK; Packed int representing black. RED; public static final Integer RED; Packed int representing red. GREEN; public static final Integer GREEN; Packed int representing green. BLUE; public static final Integer BLUE; Packed int representing blue. MAGENTA; public st",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:3328,green,green,3328,javadoc/docs/qupath/lib/common/ColorTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html,1,['green'],['green']
Energy Efficiency,"'s JSON serialization with Gson's.; ; Sample use:; ; Gson gson = new GsonBuilder(); .registerTypeAdapterFactory(OpenCVTypeAdapters.getOpenCVTypeAdaptorFactory()); .setPrettyPrinting(); .create();; ; Mat mat1 = Mat.eye(3, 3, CV_32F1).asMat();; String json = gson.toJson(mat1);; Mat mat2 = gson.fromJson(json, Mat.class);; . Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; OpenCVTypeAdapters.OpenCVTypeAdapter<T>. TypeAdapter that helps include OpenCV-based objects within a Java object being serialized to JSON. static class ; OpenCVTypeAdapters.OpenCVTypeAdaptorFactory. TypeAdapterFactory that helps make OpenCV's serialization methods more compatible with custom JSON/Gson serialization. Constructor Summary; Constructors. Constructor; Description; OpenCVTypeAdapters();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static TypeAdapterFactory; getOpenCVTypeAdaptorFactory(). Get a TypeAdapterFactory to pass to a GsonBuilder to aid with serializing OpenCV objects ; (e.g. static <T> TypeAdapter<T>; getTypeAdaptor(Class<T> cls). Get a TypeAdapter to pass to a GsonBuilder for a specific supported OpenCV class, ; i.e. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. OpenCVTypeAdapters; public OpenCVTypeAdapters(). Method Details. getOpenCVTypeAdaptorFactory; public static TypeAdapterFactory getOpenCVTypeAdaptorFactory(); Get a TypeAdapterFactory to pass to a GsonBuilder to aid with serializing OpenCV objects ; (e.g. Mat, StatModel). Returns:. getTypeAdaptor; public static <T> TypeAdapter<T> getTypeAdaptor(Class<T> cls); Get a TypeAdapter to pass to a GsonBuilder for a specific supported OpenCV class, ; i.e. Mat, SparseMat or StatModel. Parameters:; cls - ; Returns:; the required TypeAdaptor, or null if no supported adapter is available for the class. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/io/OpenCVTypeAdapters.html:2488,adapt,adapter,2488,javadoc/docs/qupath/opencv/io/OpenCVTypeAdapters.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/io/OpenCVTypeAdapters.html,1,['adapt'],['adapter']
Energy Efficiency,"(int) - Static method in class qupath.lib.common.ColorTools. Extract the 8-bit green value from a packed RGB value. Green - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green channel only. GREEN - Static variable in class qupath.lib.common.ColorTools. Packed int representing green. GREEN - Static variable in class qupath.lib.images.servers.ImageChannel. Default green channel for RGB images. Green_chromaticity - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green value divided by blue value. Green_OD - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green channel optical densities. greenChromaticity(int) - Static method in class qupath.lib.color.ColorTransformer. Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). greenOverBlue(int) - Static method in class qupath.lib.color.ColorTransformer. Extract green over blue value from a packed RGB pixel, green / max(1, blue). GRID - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; GRID_ANNOTATIONS - Variable in class qupath.lib.gui.actions.menus.MeasureMenuActions.Actions;  ; GRID_SPACING - Variable in class qupath.lib.gui.actions.menus.ViewMenuActions.Actions;  ; GRID_SPACING - Variable in class qupath.lib.gui.actions.OverlayActions;  ; GRID_TMA - Variable in class qupath.lib.gui.actions.menus.MeasureMenuActions.Actions;  ; GridLines - Class in qupath.lib.gui.viewer. Simple class used for storing information related to GridLines that may be painted over an image. GridLines() - Constructor for class qupath.lib.gui.viewer.GridLines;  ; gridLinesProperty() - Method in class qupath.lib.gui.viewer.OverlayOptions;  ; GridOverlay - Class in qupath.lib.gui.viewer.overlays. An overlay used",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:559968,green,green,559968,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,3,['green'],['green']
Energy Efficiency,"). Deprecated.; since v0.4.0, use setColor(Integer) instead. void; setID(UUID id). Set the ID for this object. void; setLocked(boolean locked). Set locked status, if possible. void; setName(String name). Set the stored object name. void; setPathClass(PathClass pc). Set the classification of the object, without specifying any classification probability. abstract void; setPathClass(PathClass pathClass,; double classProbability). Set the classification of the object, specifying a classification probability. protected Object; storeMetadataValue(String key,; String value). Store a metadata value. String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Constructor Details. PathObject; public PathObject(MeasurementList measurements); Create a PathObject with a specific measurement list.; ; This can be used e.g. to create an object with a more memory-efficient list,; at the cost of generality/mutability. Parameters:; measurements - . PathObject; public PathObject(); Default constructor. Used for Externalizable support, not intended to be used by other consumers. Method Details. getParent; public PathObject getParent(); Request the parent object. Each PathObject may have only one parent. Returns:. setLocked; public void setLocked(boolean locked); Set locked status, if possible.; ; Subclasses should override this method to support locking or unlocking.; Default implementation throws an UnsupportedOperationException if an ; attempt is made to unlock the object. Parameters:; locked - . isLocked; public boolean isLocked(); Query the locked status.; ; Subclasses should override this method to support locking or unlocking. ; Default implementation always returns true. Returns:; true if the object is locked and should not be modified. getLevel; public int getLevel(); The level of the object in a hierarchy.; ; If the object has no parent, this is ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObject.html:7172,efficient,efficient,7172,javadoc/docs/qupath/lib/objects/PathObject.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObject.html,1,['efficient'],['efficient']
Energy Efficiency,");  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineProgressMonitor; public CommandLineProgressMonitor(). Method Details. startMonitoring; public void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Description copied from interface: SimpleProgressMonitor; Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Specified by:; startMonitoring in interface SimpleProgressMonitor; Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; public void updateProgress(int increment,; String message,; ImageRegion region); Description copied from interface: SimpleProgressMonitor; Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicates that the task is finished, and the monitor may stop. Specified by:; updateProgress in interface SimpleProgressMonitor; Parameters:; increment - update progress by the specified increment; message - optional message that may be displayed to reflect the current progress status.; region",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html:1987,monitor,monitor,1987,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.CommandLineProgressMonitor.html,2,['monitor'],"['monitor', 'monitoring']"
Energy Efficiency,"- Static variable in class qupath.lib.gui.viewer.tools.PathTools. Brush drawing tool. BRUSH_TOOL - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; BRUSH_TOOL - Variable in class qupath.lib.gui.ToolManager;  ; brushCreateNewObjectsProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Create new objects by default when drawing with the Brush tool. brushDiameter - Variable in class qupath.lib.gui.panes.PreferencePane.DrawingPreferences;  ; brushDiameterProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Default brush tool diameter, in pixels. brushScaleByMag - Variable in class qupath.lib.gui.panes.PreferencePane.DrawingPreferences;  ; brushScaleByMagProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Optionally scale the default brush tool diameter by the viewer magnification (downsample value). BrushToolEventHandler - Class in qupath.lib.gui.viewer.tools.handlers. Tool for drawing (and subtract from) freehand regions, optionally adapting brush size to magnification. BrushToolEventHandler() - Constructor for class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler;  ; buffer(ROI, double) - Static method in class qupath.lib.roi.RoiTools. Buffer the specified ROI, dilating (or eroding) by the specified distance. BufferedImageOverlay - Class in qupath.lib.gui.viewer.overlays. An overlay used to display one or more BufferedImage objects on top of a primary image shown in a viewer. BufferedImageOverlay(OverlayOptions) - Constructor for class qupath.lib.gui.viewer.overlays.BufferedImageOverlay. Create an empty overlay without any images to display. BufferedImageOverlay(OverlayOptions, Map<? extends ImageRegion, BufferedImage>) - Constructor for class qupath.lib.gui.viewer.overlays.BufferedImageOverlay. Create an overlay to display multiple image regions. BufferedImageOverlay(OverlayOptions, ImageRegion, BufferedImage) - Constructor for class qupath.lib.gui.viewer.overlays.BufferedImageOverlay. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:65559,adapt,adapting,65559,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['adapt'],['adapting']
Energy Efficiency,". BrushToolEventHandler (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.viewer.tools.handlers; Class BrushToolEventHandler. java.lang.Object; qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler. All Implemented Interfaces:; EventListener, EventHandler<MouseEvent>. Direct Known Subclasses:; WandToolEventHandler. public class BrushToolEventHandler; extends Object; Tool for drawing (and subtract from) freehand regions, optionally adapting brush size to magnification. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; BrushToolEventHandler();  . Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected PathObject; createNewAnnotation(MouseEvent e,; double x,; double y). Create a new annotation and set it in the current viewer. protected ROI; createNewROI(MouseEvent e,; double x,; double y,; ImagePlane plane). Create a new ROI with the given starting coordinates. protected Geometry; createShape(MouseEvent e,; double x,; double y,; boolean useTiles,; Geometry addToShape). Create a new Geometry using the specified tool, assuming a user click/drag at the provided x & y coordinates. protected void; ensureCursorType(Cursor cursor). Ensure that the specified cursor is set in the current viewer. protected double; getBrushDiameter();  ; protected PathObject; getCurrentParent();  ; protected GeometryFactory; getGeometryFactory();  ; protected Cursor; getRequestedCursor();  ; protected QuPathViewer; getViewer();  ; void; handle(MouseEvent event);  ; protected boolean; isSubtractMode(MouseEvent e);  ; void; mouseClicked(MouseEvent e);  ; void; mouseDragged(MouseEvent e);  ; void; mouseEntered(MouseEvent e);  ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/tools/handlers/BrushToolEventHandler.html:725,adapt,adapting,725,javadoc/docs/qupath/lib/gui/viewer/tools/handlers/BrushToolEventHandler.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/tools/handlers/BrushToolEventHandler.html,1,['adapt'],['adapting']
Energy Efficiency,". ChannelColor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.display.settings; Class ChannelColor. java.lang.Object; qupath.lib.display.settings.ChannelColor. public class ChannelColor; extends Object; A simple class to store the color of an image channel. Constructor Summary; Constructors. Constructor; Description; ChannelColor();  . Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; static ChannelColor; fromPackedARGB(int argb). Create a channel color from a packed ARGB value. static ChannelColor; fromRGB(int red,; int green,; int blue). Create a channel color from 8-bit RGB values. int; getBlue(). Get the blue value. int; getGreen(). Get the green value. int; getRed(). Get the red value. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ChannelColor; public ChannelColor(). Method Details. fromRGB; public static ChannelColor fromRGB(int red,; int green,; int blue); throws IllegalArgumentException; Create a channel color from 8-bit RGB values. Parameters:; red - ; green - ; blue - ; Returns:; Throws:; IllegalArgumentException - if any of the values are outside the range 0 to 255. fromPackedARGB; public static ChannelColor fromPackedARGB(int argb); Create a channel color from a packed ARGB value.; The alpha will be ignored. Parameters:; argb - ; Returns:. getRed; public int getRed(); Get the red value. Returns:. getGreen; public int getGreen(); Get the green value. Returns:. getBlue; public int getBlue(); Get the blue value. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/settings/ChannelColor.html:876,green,green,876,javadoc/docs/qupath/lib/display/settings/ChannelColor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/settings/ChannelColor.html,5,['green'],['green']
Energy Efficiency,". ChannelDisplayInfo (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.display; Interface ChannelDisplayInfo. All Known Subinterfaces:; ChannelDisplayInfo.ModifiableChannelDisplayInfo, SingleChannelDisplayInfo. All Known Implementing Classes:; DirectServerChannelInfo. public interface ChannelDisplayInfo; Interface used to control the display of single channels of image data, where; 'single channel' means one value per pixel (in Java's parlance, one band for the; SampleModel). This applies not only to the 'default' channels in an image -; e.g. red, green and blue for an RGB image - but also to 'derived' channels computed; by a transformation, e.g. color deconvolution.; ; The primary uses are:; ; to extract floating point pixel values for the channel from a BufferedImage; (either directly, or via some color transformation that may involve; more than one channel/band from the BufferedImage); to generate RGB pixel values suitable for visualizing the raw channel values; extracted above, including the storage of any lookup tables required; to store min/max display values, which influence the lookup table mapping to RGB; (i.e. to store brightness/contrast values); to update an existing RGB value, to facilitate creating composite images that depict; the values of multiple channels in a single, merged visualization; . As such, its uses lie somewhere between Java's SampleModel and ColorModel classes.; ; Its reason for existing is that sometimes we need to be able to adjust the display of channels; individually and to create merges - particularly in the case of fluorescence images - but; to simplify whole slide image support we need to be able to do this on-the-fly.; Switching the ColorModel for an exi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html:835,green,green,835,javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/display/ChannelDisplayInfo.html,1,['green'],['green']
Energy Efficiency,". ChartTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.charts; Class ChartTools. java.lang.Object; qupath.lib.gui.charts.ChartTools. public class ChartTools; extends Object; Collection of static methods to help when working with JavaFX charts, ; and adapting these for QuPath's purposes. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ChartTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static void; addChartExportMenu(XYChart<Number,Number> chart,; ContextMenu menu). Add a menu item to a context menu for displaying a chart for export. static void; expandChartClip(Chart chart,; double pad). Expand the clip region for a chart. static String; getChartDataAsString(XYChart<Number,Number> chart). Get a string representation of chart data, in such a way that it could be pasted into a spreadsheet. static void; makeChartInteractive(Chart chart,; NumberAxis xAxis,; NumberAxis yAxis). Make it possible to select chart regions to zoom in, and scroll to navigate around it. static void; setLineChartLegendLines(Chart chart,; double length). Charts tend to show their legends with circular/square markers... static <T> void; setPieChartData(PieChart chart,; Map<T,? extends Number> counts,; Function<T,String> stringFun,; Function<T,Color> colorFun,; boolean convertToPercentages,; boolean includeTooltips). Set pie chart data from a count map. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ChartTools; public ChartTools(). Method Details. getChartDataAsString; public static String getChartDataA",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/ChartTools.html:543,adapt,adapting,543,javadoc/docs/qupath/lib/gui/charts/ChartTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/ChartTools.html,1,['adapt'],['adapting']
Energy Efficiency,". ColorTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.common; Class ColorTools. java.lang.Object; qupath.lib.common.ColorTools. public final class ColorTools; extends Object; Static functions to help work with RGB(A) colors using packed ints. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final Integer; BLACK. Packed int representing black. static final Integer; BLUE. Packed int representing blue. static final Integer; CYAN. Packed int representing cyan. static final Integer; GREEN. Packed int representing green. static final Integer; MAGENTA. Packed int representing magenta. static final Integer; MASK_ALPHA. Mask for use when extracting the alpha component from a packed ARGB int value. static final Integer; MASK_BLUE. Mask for use when extracting the blue component from a packed (A)RGB int value. static final Integer; MASK_GREEN. Mask for use when extracting the green component from a packed (A)RGB int value. static final Integer; MASK_RED. Mask for use when extracting the red component from a packed (A)RGB int value. static final Integer; RED. Packed int representing red. static final Integer; WHITE. Packed int representing white. static final Integer; YELLOW. Packed int representing yellow. Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static int; alpha(int argb). Extract the 8-bit alpha value from a packed ARGB value. static int; blue(int rgb). Extract the 8-bit blue value from a packed RGB value. static int; clip255(double val). Convert a double value to an int, flooring and clipping to the range 0-255. static int; do8BitRangeCheck(double v). Clip an input value ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:848,green,green,848,javadoc/docs/qupath/lib/common/ColorTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html,1,['green'],['green']
Energy Efficiency,". ConvexHull (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.roi; Class ConvexHull. java.lang.Object; qupath.lib.roi.ConvexHull. public class ConvexHull; extends Object; Helper method for calculating the convex hull from a list of points. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; ConvexHull();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static List<Point2>; getConvexHull(List<Point2> points). TODO: Consider a more efficient convex hull calculation. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. ConvexHull; public ConvexHull(). Method Details. getConvexHull; public static List<Point2> getConvexHull(List<Point2> points); TODO: Consider a more efficient convex hull calculation.; ; For implementation details, see; ; http://en.wikipedia.org/wiki/Gift_wrapping_algorithm; http://en.wikipedia.org/wiki/Graham_scan. Parameters:; points - ; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/ConvexHull.html:802,efficient,efficient,802,javadoc/docs/qupath/lib/roi/ConvexHull.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/ConvexHull.html,2,['efficient'],['efficient']
Energy Efficiency,". Get the original metadata read during creation of the server. String; getPath(). Get a String path that can uniquely identify this image. default PixelCalibration; getPixelCalibration(). Get the PixelCalibration object from the current metadata. PixelType; getPixelType(). The bit-depth and type of the image. double[]; getPreferredDownsamples(). Get an array of downsample factors supported by the server. String; getServerType(). A string describing the type of server, for example the name of the library used (Openslide, Bioformats...). TileRequestManager; getTileRequestManager(). Get a TileRequestManager that can be used to identify image tiles that may be efficiently requested; from this ImageServer. Collection<URI>; getURIs(). Get the URIs for images required for this server. int; getWidth(). Width of the full-resolution image in pixels. boolean; isEmptyRegion(RegionRequest request). Test whether a region is empty, i.e. boolean; isRGB(). True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. int; nChannels(). Number of channels (3 for RGB). int; nResolutions(). Number of resolutions for the image. int; nTimepoints(). Number of time points in a time series. int; nZSlices(). Number of slices in a z-stack. default T; readBufferedImage(RegionRequest request). Deprecated.; since v0.4.0. default T; readRegion(double downsample,; int x,; int y,; int width,; int height). Read a 2D(+C) image region from the default ImagePlane (i.e. default T; readRegion(double downsample,; int x,; int y,; int width,; int height,; int z,; int t). Read a 2D(+C) image region for a specified z-plane and timepoint. default T; readRegion(RegionRequest request). Read a 2D(+C) image region for a specified RegionRequest. void; setMetadata(ImageServerMetadata metadata). Set the metadata to use, e.g. Methods inherited from interface java.lang.AutoCloseable; close. Method Details. getPath; String getPath(); Get a String path that can uniquely identify this image.;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html:4078,green,green,4078,javadoc/docs/qupath/lib/images/servers/ImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageServer.html,1,['green'],['green']
Energy Efficiency,". GsonTools (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.io; Class GsonTools. java.lang.Object; qupath.lib.io.GsonTools. public class GsonTools; extends Object; Helper class providing Gson instances with type adapters registered to serialize ; several key classes.; ; These include:; ; PathObject; PathClass; ROI; ImagePlane; Java Topology Suite Geometry objects. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; GsonTools.SubTypeAdapterFactory<T>. A TypeAdapterFactory that is suitable for handling class hierarchies. Constructor Summary; Constructors. Constructor; Description; GsonTools();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static <T> GsonTools.SubTypeAdapterFactory<T>; createSubTypeAdapterFactory(Class<T> baseType,; String typeFieldName). Create a TypeAdapterFactory that is suitable for handling class hierarchies. static GsonBuilder; getDefaultBuilder(). Access the builder used with getInstance(). static Gson; getInstance(). Get default Gson, capable of serializing/deserializing some key QuPath classes. static Gson; getInstance(boolean pretty). Get default Gson, optionally with pretty printing enabled. static List<PathObject>; parseObjectsFromGeoJSON(JsonElement element). Attempt to read PathObjects from a JsonElement, interpreting it as GeoJSON. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. GsonTools; public GsonTools(). Method Details. getDefaultBuilder; public static GsonBuilder getDefaultBuilder(); Access the builder used with getInstance().;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/GsonTools.html:495,adapt,adapters,495,javadoc/docs/qupath/lib/io/GsonTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/GsonTools.html,1,['adapt'],['adapters']
Energy Efficiency,". ImageChannel (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.images.servers; Class ImageChannel. java.lang.Object; qupath.lib.images.servers.ImageChannel. public class ImageChannel; extends Object; The name and display color for a single image channel. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final ImageChannel; BLUE. Default blue channel for RGB images. static final ImageChannel; GREEN. Default green channel for RGB images. static final ImageChannel; RED. Default red channel for RGB images. static final Integer; TRANSPARENT. Special color indicating pixel values for a channel indicate levels of transparency. Method Summary. All MethodsStatic MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; boolean; equals(Object obj);  ; static List<ImageChannel>; getChannelList(String... names). Convert an array of channel names into a list of ImageChannel using default colors. Integer; getColor(). Color used to display the output channel. static Integer; getDefaultChannelColor(int channel). Get the default color for a specified channel, for use when no channel colors are already known. static List<ImageChannel>; getDefaultChannelList(int nChannels). Get default channel list for an image with a specified number of channels. static List<ImageChannel>; getDefaultRGBChannels(). Get default channel list for RGB images. static ImageChannel; getInstance(String name,; Integer color). Get a channel instance with the specified name and color. String; getName(). Name of the output channel. int; hashCode();  ; boolean; isTransparent(). Check if the color is 'transparent'; this is used for background/ignored channels. String; toStr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html:736,green,green,736,javadoc/docs/qupath/lib/images/servers/ImageChannel.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/ImageChannel.html,1,['green'],['green']
Energy Efficiency,". MeasurementListFactory (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.measurements; Class MeasurementListFactory. java.lang.Object; qupath.lib.measurements.MeasurementListFactory. public class MeasurementListFactory; extends Object; Factory for creating new measurement lists.; ; For efficiently, (static) Float lists are generally preferred for detection objects. Author:; Pete Bankhead. Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static MeasurementList; createMeasurementList(int capacity,; MeasurementList.MeasurementListType type). Create a measurement list. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Method Details. createMeasurementList; public static MeasurementList createMeasurementList(int capacity,; MeasurementList.MeasurementListType type); Create a measurement list. Parameters:; capacity - ; type - ; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/measurements/MeasurementListFactory.html:570,efficient,efficiently,570,javadoc/docs/qupath/lib/measurements/MeasurementListFactory.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/measurements/MeasurementListFactory.html,1,['efficient'],['efficiently']
Energy Efficiency,". MeasurementProcessor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.experimental.pixels; Class MeasurementProcessor. java.lang.Object; qupath.lib.experimental.pixels.MeasurementProcessor. public class MeasurementProcessor; extends Object; Create PixelProcessor instances that make measurements from objects.; ; Important! This class is intended to simplify making measurements where all pixel values can fit into a; single double array. It is not suitable for large images or tiling.; ; It is also not very efficient if the same channel is used multiple times, since the channel will be extracted each; time. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; MeasurementProcessor.CustomMeasurement<S,T>. Interface for calculating one custom measurement from an image, using Parameters. static class ; MeasurementProcessor.Functions. Functions for calculating measurements from an array of pixels. static class ; MeasurementProcessor.Measurements. Methods to create custom measurements. Constructor Summary; Constructors. Constructor; Description; MeasurementProcessor();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static PixelProcessor.Builder<BufferedImage,BufferedImage,Map<String,? extends Number>>; builder(Collection<? extends MeasurementProcessor.CustomMeasurement<BufferedImage,BufferedImage>> measurements). Create a new builder for a PixelProcessor that can make custom measurements for an image object. static <S,; T> Processor<S,T,Map<String,? extends Number>>; createProcessor(Collection<? extends MeasurementProcessor.CustomMeasurement<S,T>> measurements). Create a processor that can make custom ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/MeasurementProcessor.html:793,efficient,efficient,793,javadoc/docs/qupath/lib/experimental/pixels/MeasurementProcessor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/experimental/pixels/MeasurementProcessor.html,1,['efficient'],['efficient']
Energy Efficiency,". MiniViewers (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.commands; Class MiniViewers. java.lang.Object; qupath.lib.gui.commands.MiniViewers. public class MiniViewers; extends Object; Command to open a small viewer window, which displays a detail from ; the current image depending on where the cursor is over the image.; ; In QuPath <= v0.1.2, this gave a single QuPathViewer that updated its display ; based on a main viewer. Now, it has been rewritten to provide a more efficient paintable ; canvas (not a full QuPathViewer) and is capable of showing separated color channels. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; MiniViewers.MiniViewerManager. A manager for one or more mini-viewers, where the 'more' means a separate viewer per channel. Constructor Summary; Constructors. Constructor; Description; MiniViewers();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static MiniViewers.MiniViewerManager; createManager(QuPathViewer viewer). Create a MiniViewers.MiniViewerManager associated with a specified viewer. static MiniViewers.MiniViewerManager; createManager(QuPathViewer viewer,; Collection<? extends ChannelDisplayInfo> channels). Create a MiniViewers.MiniViewerManager displaying multiple channels and ; associated with a specified viewer. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. MiniViewers; public MiniViewers(). Method Details. createManager; public static MiniViewers.MiniViewerManager createManager(QuPathViewer viewer); Create a MiniViewers",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/MiniViewers.html:764,efficient,efficient,764,javadoc/docs/qupath/lib/gui/commands/MiniViewers.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/MiniViewers.html,1,['efficient'],['efficient']
Energy Efficiency,". PathDetectionObject (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.objects; Class PathDetectionObject. java.lang.Object; qupath.lib.objects.PathObject; qupath.lib.objects.PathROIObject; qupath.lib.objects.PathDetectionObject. All Implemented Interfaces:; Externalizable, Serializable. Direct Known Subclasses:; PathCellObject, PathTileObject. public class PathDetectionObject; extends PathROIObject; A detection PathObject.; ; Detections tend to be very numerous (e.g. millions of nuclei, each one a detection), and so need to be ; represented and displayed very efficiently. Author:; Pete Bankhead; See Also:. PathAnnotationObject; Serialized Form. Constructor Summary; Constructors. Modifier; Constructor; Description;  ; PathDetectionObject(). Default constructor. protected ; PathDetectionObject(ROI pathROI,; PathClass pathClass). Create a new PathDetectionObject with a float measurement list. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; protected MeasurementList; createEmptyMeasurementList(). Default to a simple, float measurement list. Map<String,String>; getMetadata(). Get a map of metadata values. boolean; isEditable(). Always returns false - detection objects shouldn't be edited. Methods inherited from class qupath.lib.objects.PathROIObject; getClassProbability, getPathClass, getROI, isLocked, readExternal, setLocked, setPathClass, setROI, writeExternal. Methods inherited from class qupath.lib.objects.PathObject; addChildObject, addChildObjects, addPathObject, addPathObjects, clearChildObjects, clearMetadataMap, clearPathObjects, getChildObjects, getChildObjects, getChildObjectsAsArray, getClassifications, getColor, getColorRGB, getD",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathDetectionObject.html:849,efficient,efficiently,849,javadoc/docs/qupath/lib/objects/PathDetectionObject.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathDetectionObject.html,1,['efficient'],['efficiently']
Energy Efficiency,". PathTask (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface PathTask. All Superinterfaces:; Runnable. public interface PathTask; extends Runnable; Helper interface to define plugin tasks that require post-processing on a specific thread ; (i.e. the EDT, or JavaFX Platform equivalent). Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsDefault Methods. Modifier and Type; Method; Description; default String; getLastResultsDescription(). Get a description of the results from running this task, which may be used e.g. default void; taskComplete(boolean wasCancelled). Perform optional post-processing after a task has completed. Methods inherited from interface java.lang.Runnable; run. Method Details. taskComplete; default void taskComplete(boolean wasCancelled); Perform optional post-processing after a task has completed.; ; When processing a collection of tasks with a TaskRunner, this method; should be called on the same thread. The choice of thread depends on the runner, but ; may be the Event Dispatch Thread when using Swing or Application thread for JavaFX. Parameters:; wasCancelled - . getLastResultsDescription; default String getLastResultsDescription(); Get a description of the results from running this task, which may be used e.g. in a progress monitor or output to the command line.; Default implementation returns null. Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html:1584,monitor,monitor,1584,javadoc/docs/qupath/lib/plugins/PathTask.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/PathTask.html,1,['monitor'],['monitor']
Energy Efficiency,". SimplePluginWorkflowStep (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins.workflow; Class SimplePluginWorkflowStep. java.lang.Object; qupath.lib.plugins.workflow.SimplePluginWorkflowStep. All Implemented Interfaces:; Externalizable, Serializable, ScriptableWorkflowStep, WorkflowStep. public class SimplePluginWorkflowStep; extends Object; implements ScriptableWorkflowStep, Externalizable; Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Author:; Pete Bankhead; See Also:. Serialized Form. Constructor Summary; Constructors. Constructor; Description; SimplePluginWorkflowStep(). Default public constructor, required for Externalizable. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg). Constructor for a workflow step that calls a plugin. SimplePluginWorkflowStep(String name,; Class<? extends PathPlugin<?>> pluginClass,; String arg,; String scriptBefore,; String scriptAfter). Constructor for a workflow step that calls a plugin, which optionally should include additional scripting lines before or afterwards. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; String; getName(). Get the name of the workflow step. Map<String,?>; getParameterMap(). Get a map of parameters required for this step. String; getPluginClass(). Get the full name of the plugin class. String; getScript(). Get one or more script lines that may be used to apply the step. void; readExternal(ObjectInput in);  ; String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html:729,adapt,adapted,729,javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/SimplePluginWorkflowStep.html,1,['adapt'],['adapted']
Energy Efficiency,". SimpleProgressMonitor (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:530,monitor,monitoring,530,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,1,['monitor'],['monitoring']
Energy Efficiency,". XmlStyler (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.gui.scripting.richtextfx.stylers; Class XmlStyler. java.lang.Object; qupath.lib.gui.scripting.richtextfx.stylers.XmlStyler. All Implemented Interfaces:; ScriptStyler. public class XmlStyler; extends Object; implements ScriptStyler; Styling to apply to a CodeArea for XML.; ; This is based on XMLEditorDemo.java from RichTextFX, available at ; https://github.com/FXMisc/RichTextFX/blob/master/richtextfx-demos/src/main/java/org/fxmisc/richtext/demo/XMLEditorDemo.java; and adapted for use in QuPath.; ; The license for RichTextFX is given below:; ; Copyright (c) 2013-2017, Tomas Mikula and contributors; ; All rights reserved.; ; Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:; ; 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.; ; 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.; ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) ; HOWEVER CAU",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/scripting/richtextfx/stylers/XmlStyler.html:815,adapt,adapted,815,javadoc/docs/qupath/lib/gui/scripting/richtextfx/stylers/XmlStyler.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/scripting/richtextfx/stylers/XmlStyler.html,1,['adapt'],['adapted']
Energy Efficiency,". qupath.lib.gui.charts (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.gui.charts. package qupath.lib.gui.charts. Classes for plotting and charting. Related Packages. Package; Description; qupath.lib.gui. The main QuPath user interface. All Classes and InterfacesClassesEnum Classes. Class; Description; Charts. Helper class for generating interactive charts. Charts.BarChartBuilder. Builder for creating scatter charts. Charts.PieChartBuilder. Builder for creating pie charts. Charts.ScatterChartBuilder. Builder for creating scatter charts. ChartThresholdPane. Pane that can be used to contain an XYChart, adding adjustable thresholds to be displayed. ChartTools. Collection of static methods to help when working with JavaFX charts, ; and adapting these for QuPath's purposes. HistogramChart. JavaFX chart for displaying histograms. HistogramChart.CountsTransformMode. Enum to specify how the counts are displayed. HistogramChart.DisplayMode. Display mode for the histogram. HistogramChart.HistogramData. Helper class for representing data that may be visualized with a HistogramChart. HistogramDisplay. Wrapper close to enable the generation and display of histograms relating to a data table. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/package-summary.html:1000,adapt,adapting,1000,javadoc/docs/qupath/lib/gui/charts/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/charts/package-summary.html,1,['adapt'],['adapting']
Energy Efficiency,". qupath.lib.gui.viewer.tools.handlers (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.gui.viewer.tools.handlers. package qupath.lib.gui.viewer.tools.handlers. Related Packages. Package; Description; qupath.lib.gui.viewer.tools. Drawing and navigation tools for the QuPath toolbar. Classes. Class; Description; BrushToolEventHandler. Tool for drawing (and subtract from) freehand regions, optionally adapting brush size to magnification. MoveToolEventHandler. The MoveTool is used for quite a lot of things, movement-related:; movement around an image (panning), moving ROIs (translating) and moving individual; 'handles' of ROIs (resizing/reshaping). MoveToolEventHandler.ViewerMover. Helper class for panning a QuPathViewer (reasonably) smoothly. PathToolEventHandlers;  . ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/tools/handlers/package-summary.html:657,adapt,adapting,657,javadoc/docs/qupath/lib/gui/viewer/tools/handlers/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/viewer/tools/handlers/package-summary.html,1,['adapt'],['adapting']
Energy Efficiency,". qupath.lib.io (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.io. package qupath.lib.io. Supports reading and writing some core QuPath data structures. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; FeatureCollection. Class to wrap a collection of objects to indicate they should be export as a GeoJSON ""FeatureCollection"". GsonTools. Helper class providing Gson instances with type adapters registered to serialize ; several key classes. GsonTools.SubTypeAdapterFactory<T>. A TypeAdapterFactory that is suitable for handling class hierarchies. PathIO. Primary class for loading/saving ImageData objects. PathIO.GeoJsonExportOptions. Options to customize the export of PathObjects as GeoJSON. PointIO. Helper class for reading/writing point objects in terms of their x,y coordinates. TMAScoreImporter. Helper class for importing data in connection with TMA slides. UriResource. Interface for objects that depend upon URIs. UriUpdater<T extends UriResource>. Helper class for updating URIs, for example whenever files have moved or projects have been transferred between computers. UriUpdater.SingleUriItem. Wrapper for a URI, providing access to a Path if available. UriUpdater.UriStatus. Enum representing the status of a URI, i.e. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/package-summary.html:672,adapt,adapters,672,javadoc/docs/qupath/lib/io/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/package-summary.html,1,['adapt'],['adapters']
Energy Efficiency,". qupath.lib.plugins (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins. package qupath.lib.plugins. Classes to support general analysis commands.; ; The purpose of this is to help abstract away some of the more challenging things ; around running the command, handling parallelization and monitoring progress. Related Packages. Package; Description; qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. All Classes and InterfacesInterfacesClassesEnum Classes. Class; Description; AbstractDetectionPlugin<T>. Abstract plugin aimed towards cases where new objects will be detected inside existing objects (normally TMA cores or annotations). AbstractInteractivePlugin<T>. Abstract class to help with implementing an interactive plugin. AbstractPlugin<T>. General abstract plugin implementation, which defines some methods to facilitate ; creating plugins that do parallel processing. AbstractTaskRunner. Abstract PluginRunner to help with the creation of plugin runners for specific circumstances,; e.g. AbstractTileableDetectionPlugin<T>. Abstract plugin used for detection tasks that support breaking large regions into smaller ones,; and analyzing these in parallel - optionally with overlaps. CommandLineTaskRunner. A PluginRunner that simply logs progress and output. CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. DetectionPluginTools. Helper methods to convert ObjectDetectors into runnable tasks, which take",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html:552,monitor,monitoring,552,javadoc/docs/qupath/lib/plugins/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/package-summary.html,1,['monitor'],['monitoring']
Energy Efficiency,". qupath.lib.plugins.workflow (QuPath 0.5.0). JavaScript is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Package:. Description; Related Packages; Classes and Interfaces. Package: ; Description | ; Related Packages | ; Classes and Interfaces. SEARCH. Package qupath.lib.plugins.workflow. package qupath.lib.plugins.workflow. Classes and interfaces related to logging analysis steps to assist scripting and reproducibility. Related Packages. Package; Description; qupath.lib.plugins. Classes to support general analysis commands. qupath.lib.plugins.objects. Plugins for manipulating objects and ROIs. qupath.lib.plugins.parameters. Defines classes for handling parameters used in interactive dialogs or as method arguments. All Classes and InterfacesInterfacesClasses. Class; Description; DefaultScriptableWorkflowStep. A scriptable workflow step where the script is provided directly as an argument. RunSavedClassifierWorkflowStep. WorkflowStep for running a saved PathObjectClassifier. ScriptableWorkflowStep. A WorkflowStep that can also return some Javascript that, if run, would perform the step. SimplePluginWorkflowStep. Updated version of DefaultPluginWorkflowStep, adapted to use Externalizable and to avoid storing the plugin class as a class object ; (preferring a String instead). Workflow. A collection of steps that relate to how an image has been - or should be - processed. WorkflowListener. Interface for listening to changes in Workflows, e.g. WorkflowStep. Basic interface for a loggable workflow step. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html:1238,adapt,adapted,1238,javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/workflow/package-summary.html,1,['adapt'],['adapted']
Energy Efficiency,".Object; qupath.lib.plugins.AbstractTaskRunner; qupath.lib.plugins.CommandLineTaskRunner. All Implemented Interfaces:; TaskRunner. public class CommandLineTaskRunner; extends AbstractTaskRunner; A PluginRunner that simply logs progress and output.; ; This doesn't need to be run on any particular thread (e.g. the JavaFX Application thread). Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; CommandLineTaskRunner.CommandLineProgressMonitor. A SimpleProgressMonitor that sends progress to a log. Constructor Summary; Constructors. Constructor; Description; CommandLineTaskRunner(). Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner(int nThreads). Constructor for a PluginRunner that send progress to a log. Method Summary. All MethodsInstance MethodsConcrete Methods. Modifier and Type; Method; Description; SimpleProgressMonitor; makeProgressMonitor(). Create a progress monitor to update the user on what is happening. Methods inherited from class qupath.lib.plugins.AbstractTaskRunner; awaitCompletion, isCancelled, postProcess, runTasks. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. CommandLineTaskRunner; public CommandLineTaskRunner(); Constructor for a PluginRunner that send progress to a log, and runs tasks using the default number of threads. CommandLineTaskRunner; public CommandLineTaskRunner(int nThreads); Constructor for a PluginRunner that send progress to a log. Parameters:; nThreads - the number of threads to use when running tasks. Method Details. makeProgressMonitor; public SimpleProgressMonitor makeProgressMonitor(); Description copied from class: AbstractTaskRunner; Create a progress monitor to update the user on what is happening. Specified by:; makeProgressMonitor in class AbstractTaskRunner; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html:1424,monitor,monitor,1424,javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/CommandLineTaskRunner.html,2,['monitor'],['monitor']
Energy Efficiency,".SubTypeAdapterFactory<T>; createSubTypeAdapterFactory(Class<T> baseType,; String typeFieldName). Create a TypeAdapterFactory that is suitable for handling class hierarchies. static GsonBuilder; getDefaultBuilder(). Access the builder used with getInstance(). static Gson; getInstance(). Get default Gson, capable of serializing/deserializing some key QuPath classes. static Gson; getInstance(boolean pretty). Get default Gson, optionally with pretty printing enabled. static List<PathObject>; parseObjectsFromGeoJSON(JsonElement element). Attempt to read PathObjects from a JsonElement, interpreting it as GeoJSON. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. GsonTools; public GsonTools(). Method Details. getDefaultBuilder; public static GsonBuilder getDefaultBuilder(); Access the builder used with getInstance().; This makes it possible to register new type adapters if required, which will be used by future Gson instances ; returned by this class.; ; Use this with caution! Changes made here impact JSON serialization/deserialization throughout ; the software. Access by be removed or restricted in the future for this reason.; ; To create a derived builder that inherits from the default but does not change it, use GsonBuilder.getInstance().newBuilder(). Returns:. createSubTypeAdapterFactory; public static <T>; GsonTools.SubTypeAdapterFactory<T> createSubTypeAdapterFactory(Class<T> baseType,; String typeFieldName); Create a TypeAdapterFactory that is suitable for handling class hierarchies.; This can be used to construct the appropriate subtype when parsing the JSON by using a specific field in the JSON representation. Type Parameters:; T - ; Parameters:; baseType - the base type, i.e. the class or interface that all types descend from; typeFieldName - a field name to include within the serialized JSON object to identify the specific type; Returns:. getInstance; pu",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/io/GsonTools.html:2046,adapt,adapters,2046,javadoc/docs/qupath/lib/io/GsonTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/io/GsonTools.html,1,['adapt'],['adapters']
Energy Efficiency,".imagej.tools.IJTools. Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>. convertToImageProcessor(BufferedImage, int) - Static method in class qupath.imagej.tools.IJTools. Extract pixels as an an ImageProcessor from a single band of a BufferedImage. convertToJson(Map<String, ?>) - Static method in class qupath.lib.plugins.parameters.ParameterList. Convert a Map to a one-line JSON representation, omitting hidden parameters. convertToJson(ParameterList) - Static method in class qupath.lib.plugins.parameters.ParameterList. Convert a ParameterList a one-line JSON representation, omitting hidden parameters. convertToObjects(Parameters<S, T>, U) - Method in interface qupath.lib.experimental.pixels.OutputHandler.OutputToObjectConverter. Convert the output of a pixel processor to a list of PathObjects. convertToOpticalDensitySum(ColorProcessor, double, double, double) - Static method in class qupath.imagej.tools.IJTools. Calculate optical density values for the red, green and blue channels, then add these all together. convertToPathObject(Roi, double, double, double, Function<ROI, PathObject>, ImagePlane) - Static method in class qupath.imagej.tools.IJTools. Create a PathObject for a specific ImageJ Roi. convertToPathObject(Roi, double, Function<ROI, PathObject>, ImagePlus) - Static method in class qupath.imagej.tools.IJTools. Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. convertToPathObject(ImagePlus, ImageServer<?>, Roi, double, Function<ROI, PathObject>, ImagePlane) - Static method in class qupath.imagej.tools.IJTools. Deprecated.; use instead IJTools.convertToPathObject(Roi, double, double, double, Function, ImagePlane). convertToPercentages(boolean) - Method in class qupath.lib.gui.charts.Charts.PieChartBuilder. Request that pie chart values are converted to percentages for tooltips. convertToPoints(Collection<PathObject>, boolean) - Static method in class qupath.lib.objects.PathObjectTools. Convert a ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:144495,green,green,144495,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['green'],['green']
Energy Efficiency,".lib.plugins; Interface SimpleProgressMonitor. All Known Implementing Classes:; CommandLineTaskRunner.CommandLineProgressMonitor. public interface SimpleProgressMonitor; Class for monitoring the process of a plugin and displaying feedback to the user.; ; Implementing classes receive notifications from the plugin as it executes, and should display these in an appropriate way -; such as with a dialog box and progress bar, or logging the progress to the system output.; Classes may also choose to send cancel requests to the plugin, e.g. if the user presses a 'cancel' button.; ; SimpleProgressMonitor are not intended for reuse, i.e. the startMonitoring method should only be called once. Author:; Pete Bankhead. Method Summary. All MethodsInstance MethodsAbstract Methods. Modifier and Type; Method; Description; boolean; cancelled(). Returns true if cancel has been requested, for example by the user pressing a 'cancel' button. void; pluginCompleted(String message). Notify the monitor that the plugin has completed its work. void; startMonitoring(String message,; int maxProgress,; boolean mayCancel). Set the plugin to monitor, and begin monitoring. void; updateProgress(int increment,; String message,; ImageRegion region). Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated. Method Details. startMonitoring; void startMonitoring(String message,; int maxProgress,; boolean mayCancel); Set the plugin to monitor, and begin monitoring. Note that since SimpleProgressMonitor are not intended for reuse,; this method should only be called once. Parameters:; message - The message to display; maxProgress - The progress value considered complete.; mayCancel - . updateProgress; void updateProgress(int increment,; String message,; ImageRegion region); Update the displayed progress, and optionally inform the PluginRunner that data related to a specified image region has been updated.; If progress >= 1 this indicat",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html:1333,monitor,monitor,1333,javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/plugins/SimpleProgressMonitor.html,1,['monitor'],['monitor']
Energy Efficiency,". more); throws IllegalArgumentException; Build a file or directory path relative to the current project, and ensure that it exists.; If it does not, an attempt will be made to create a directory with the specified name, ; and all necessary parent directories.; ; This is equivalent to calling; ; String path = buildPathInProject(PROJECT_BASE_DIR, more);; mkdirs(path);; . Note that if you need a file and not a directory, see makeFileInProject(String...). Parameters:; more - additional path components to append; Returns:; Throws:; IllegalArgumentException - if no project path is available; Since:; v0.4.0; See Also:. buildPathInProject(String...); makeFileInProject(String...). makeFileInProject; public static File makeFileInProject(String... more); throws IllegalArgumentException; Build a file path relative to the current project, and create a File object.; An attempt will be made to create any required directories needed to create the file. ; ; The purpose is to reduce the lines of code needed to build a usable file in a QuPath ; script. ; A Groovy script showing this method in action:; ; File file = makeFileInProject(""export"", ""file.txt""); file.text = ""Some text here""; . Note that, if the file does not already exist, it will not be created by this method - ; only the directories leading to it.; Additionally, if the file refers to an existing directory then the directory will be ; returned - and will not be writable as a file. Parameters:; more - additional path components to append; Returns:; the file object, which may or may not refer to a file or directory that exists; Throws:; IllegalArgumentException - if no project path is available; Since:; v0.4.0; See Also:. makePathInProject(String...); buildPathInProject(String...). mkdirs; public static boolean mkdirs(String path); Ensure directories exist for the specified path, calling file.mkdirs() if not. Parameters:; path - the directory path; Returns:; true if a directory was created, false otherwise. fileExists; public",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html:53984,reduce,reduce,53984,javadoc/docs/qupath/lib/scripting/QP.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/scripting/QP.html,1,['reduce'],['reduce']
Energy Efficiency,"55 - but no checking is applied.; Rather, the input values are simply shifted as they are.; ; The alpha value is 255. Parameters:; r - ; g - ; b - ; Returns:. packRGB; public static int packRGB(int r,; int g,; int b); Make a packed RGB value from specified input values.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255; only the lower 8 bits are used. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packClippedRGB(int, int, int). unpackRGB; public static int[] unpackRGB(int rgb); Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackRGB; public static int[] unpackRGB(int rgb,; int[] array); Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb); Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb,; int[] array); Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the alpha, red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. packClippedRGB; public static int packClippedRGB(int r,; int g,; int b); Make a packed RGB value from specified input values, clipping to the range 0-255.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255, but if they are not they are c",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:6326,green,green,6326,javadoc/docs/qupath/lib/common/ColorTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html,1,['green'],['green']
Energy Efficiency,"55). getMaxCount() - Method in class qupath.lib.analysis.stats.Histogram. Get the highest count found for any bin. getMaxDecimalPlaces() - Method in class qupath.lib.common.Timeit. Get the maximum number of decimal places when reporting timings. getMaxDisplay() - Method in class qupath.lib.display.DirectServerChannelInfo;  ; getMaxDisplay() - Method in interface qupath.lib.display.ChannelDisplayInfo. Get the max display value. getMaxDisplay() - Method in class qupath.lib.display.settings.ChannelSettings. Get the requested maximum display value for the channel,; This should be used with the last entry in any lookup table. getMaxDownsample() - Method in class qupath.lib.gui.viewer.QuPathViewer. Get the maximum downsample value supported by this viewer. getMaxFeatures() - Method in class qupath.lib.analysis.features.CoocurranceMatrices. Compute maximum features from all four rotations. getMaxGreen() - Method in class qupath.lib.color.ColorDeconvolutionStains. Get the maximum value for the green channel (default = 255). getMaxHeight() - Method in class qupath.lib.analysis.heatmaps.DensityMaps.DensityMapParameters. Get the maximum height of the density map. getMaxNormalizedCount() - Method in class qupath.lib.analysis.stats.Histogram. Get the highest count found for any bin, divided by the total counts across the entire histogram. getMaxRed() - Method in class qupath.lib.color.ColorDeconvolutionStains. Get the maximum value for the red channel (default = 255). getMaxROIHandleSize() - Method in class qupath.lib.gui.viewer.QuPathViewer. Get the maximum size for which ROI handles may be drawn. getMaxThreads() - Method in class qupath.lib.gui.viewer.overlays.PixelClassificationOverlay. Get the maximum number of threads that may be used during live prediction. getMaxThreshold() - Method in class qupath.lib.analysis.images.ContourTracing.ChannelThreshold. Get the maximum threshold value. getMaxTime() - Method in class qupath.lib.analysis.stats.survival.KaplanMeierData. Get the ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:434495,green,green,434495,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['green'],['green']
Energy Efficiency,"8-bit green value from a packed RGB value. Green - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green channel only. GREEN - Static variable in class qupath.lib.common.ColorTools. Packed int representing green. GREEN - Static variable in class qupath.lib.images.servers.ImageChannel. Default green channel for RGB images. Green_chromaticity - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green value divided by blue value. Green_OD - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green channel optical densities. greenChromaticity(int) - Static method in class qupath.lib.color.ColorTransformer. Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). greenOverBlue(int) - Static method in class qupath.lib.color.ColorTransformer. Extract green over blue value from a packed RGB pixel, green / max(1, blue). GRID - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; GRID_ANNOTATIONS - Variable in class qupath.lib.gui.actions.menus.MeasureMenuActions.Actions;  ; GRID_SPACING - Variable in class qupath.lib.gui.actions.menus.ViewMenuActions.Actions;  ; GRID_SPACING - Variable in class qupath.lib.gui.actions.OverlayActions;  ; GRID_TMA - Variable in class qupath.lib.gui.actions.menus.MeasureMenuActions.Actions;  ; GridLines - Class in qupath.lib.gui.viewer. Simple class used for storing information related to GridLines that may be painted over an image. GridLines() - Constructor for class qupath.lib.gui.viewer.GridLines;  ; gridLinesProperty() - Method in class qupath.lib.gui.viewer.OverlayOptions;  ; GridOverlay - Class in qupath.lib.gui.viewer.overlays. An overlay used to show a (counting) grid on top of an image. GridOverlay(OverlayOptions",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:560054,green,greenOverBlue,560054,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['green'],['greenOverBlue']
Energy Efficiency,"; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.opencv.ml.objects.features; Class Preprocessing. java.lang.Object; qupath.opencv.ml.objects.features.Preprocessing. public class Preprocessing; extends Object; Helper class for preprocessing input for machine learning algorithms using OpenCV Mats. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static class ; Preprocessing.PCAProjector. Helper class to apply PCA projection. Constructor Summary; Constructors. Constructor; Description; Preprocessing();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static Normalizer; createNormalizer(Normalization normalization,; Mat samples,; double missingValue). Create a simple normalizer to rescale input data. static Preprocessing.PCAProjector; createPCAProjector(Mat data,; double retainedVariance,; boolean normalize). Create a principle components analysis projection to reduce features. static void; normalize(Mat samples,; Normalizer normalizer). Apply a Normalizer to new training data samples. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. Preprocessing; public Preprocessing(). Method Details. createPCAProjector; public static Preprocessing.PCAProjector createPCAProjector(Mat data,; double retainedVariance,; boolean normalize); Create a principle components analysis projection to reduce features. Parameters:; data - input data used to create the projector; retainedVariance - variance to retain (determines the number of output features); normalize - if true, normalize the output features; Returns:; a Preprocessing.PCAProjector that can be applied to new data. createNormalizer; public static Normalizer createNormalizer(Normalization normalization,; Mat samples,; double missingValue); Create a simple normalizer to rescale i",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/objects/features/Preprocessing.html:1269,reduce,reduce,1269,javadoc/docs/qupath/opencv/ml/objects/features/Preprocessing.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ml/objects/features/Preprocessing.html,1,['reduce'],['reduce']
Energy Efficiency,"; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorMaps. java.lang.Object; qupath.lib.color.ColorMaps. public class ColorMaps; extends Object; Helper class to manage colormaps, which are rather like lookup tables but easily support interpolation. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static interface ; ColorMaps.ColorMap. colormap, which acts as an interpolating lookup table with an arbitrary range. Constructor Summary; Constructors. Constructor; Description; ColorMaps();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorMaps.ColorMap; createColorMap(String name,; double[] r,; double[] g,; double[] b). Create a colormap using floating point values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int[] r,; int[] g,; int[] b). Create a colormap using integer values for red, green and blue. static ColorMaps.ColorMap; createColorMap(String name,; int r,; int g,; int b). Create a colormap using int values for red, green and blue corresponding to the maximum value; ; the minimum color will be black. static ColorMaps.ColorMap; gammaColorMap(ColorMaps.ColorMap map,; double gamma). Apply gamma to a colormap. static Map<String,ColorMaps.ColorMap>; getColorMaps(). Get an unmodifiable map representing all the currently-available colormaps. static int[]; getColors(ColorMaps.ColorMap map,; int nValues,; boolean doInvert). Get an array of packed RGB values for a specific colormap. static ColorMaps.ColorMap; getDefaultColorMap(). Get a default, general-purpose ColorMaps.ColorMap. static boolean; installColorMaps(Path... paths). Install colormaps from the specified paths. static boolean; installColorMaps(ColorMaps.ColorMap... colorMaps). Install colormaps. static void; setDefaultColorMap(ColorMaps.ColorMap colorMap). Set the default ColorMaps.ColorMap. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html:1252,green,green,1252,javadoc/docs/qupath/lib/color/ColorMaps.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorMaps.html,1,['green'],['green']
Energy Efficiency,"; ObjectsMenuActions.Actions - Class in qupath.lib.gui.actions.menus;  ; ObjectsMenuActions.AnnotationActions - Class in qupath.lib.gui.actions.menus;  ; ObjectsMenuActions.DeleteActions - Class in qupath.lib.gui.actions.menus;  ; ObjectsMenuActions.LockActions - Class in qupath.lib.gui.actions.menus;  ; ObjectsMenuActions.SelectActions - Class in qupath.lib.gui.actions.menus;  ; ObjectTreeBrowser - Class in qupath.lib.gui.panes. Simple browser for exploring fields (including private fields) within an object by reflection. ObjectTreeBrowser() - Constructor for class qupath.lib.gui.panes.ObjectTreeBrowser;  ; ObservableMeasurementTableData - Class in qupath.lib.gui.measure. A table data model to supply observable measurements of PathObjects. ObservableMeasurementTableData() - Constructor for class qupath.lib.gui.measure.ObservableMeasurementTableData;  ; OD_Normalized - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. RGB values normalized to OD vector (to reduce intensity information). of(long...) - Static method in class qupath.opencv.dnn.DnnShape. Create a new DnnShape with the specified dimension lengths. OFF - Enum constant in enum class qupath.lib.gui.logging.LogManager.LogLevel. Turn off logging. OMEPixelParser - Class in qupath.lib.images.servers.bioformats. This class can parse raw bytes into a BufferedImage. OMEPixelParser.Builder - Class in qupath.lib.images.servers.bioformats. Builder for instances of OMEPixelParser. OMEPyramidWriter - Class in qupath.lib.images.writers.ome. Write OME-TIFF files based on QuPath ImageServers. OMEPyramidWriter.Builder - Class in qupath.lib.images.writers.ome. Builder class to define parameters when exporting an image region as OME-TIFF,; possibly as an image pyramid. OMEPyramidWriter.ChannelExportType - Enum Class in qupath.lib.images.writers.ome. Enum representing different ways in which channels may be written to a file. OMEPyramidWriter.CompressionType - Enum Class in qupath.lib.images.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:719939,reduce,reduce,719939,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['reduce'],['reduce']
Energy Efficiency,";  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ImageOp; add(double... values). Add a constant to all pixels. static ImageOp; ceil(). Create an op that ceils floating point values. static ImageOp; clip(double min,; double max). Create an op that clips Mat values to the specified minimum and maximum. static ImageOp; divide(double... values). Divide all pixels by a constant. static ImageOp; ensureType(PixelType type). Convert the Mat to match a specified pixel type. static ImageOp; exp(). Create an op that returns Euler's number e raise to the power of the Mat values. static ImageOp; floor(). Create an op that floors floating point values. static ImageOp; identity(). Create an op that returns its input unchanged. static ImageOp; log(). Create an op that returns the natural logarithm of values. static ImageOp; multiply(double... values). Multiply all pixels by a constant. static ImageOp; power(double value). Raise every pixel element to a power. static ImageOp; replace(double originalValue,; double newValue). Create an op that replaces one pixel value in an image with another. static ImageOp; replaceNaNs(double replaceValue). Create an op that replaces NaNs with a specified value. static ImageOp; round(). Create an op that rounds floating point values. static ImageOp; sequential(Collection<? extends ImageOp> ops). Apply a collection of ops sequentially, chaining the output of one op as the input for the next. static ImageOp; sequential(ImageOp... ops). Apply an array of ops sequentially, chaining the output of one op as the input for the next. static ImageOp; splitAdd(ImageOp opLeft,; ImageOp opRight). Create an op that duplicates a Mat, applies different operations to each duplicate, and ; combines the result by adding corresponding values. static ImageOp; splitDivide(ImageOp opTop,; ImageOp opBottom). Create an op that duplicates a Mat, applies different operations to each duplicate, and ; combines the re",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOps.Core.html:1603,power,power,1603,javadoc/docs/qupath/opencv/ops/ImageOps.Core.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/ops/ImageOps.Core.html,1,['power'],['power']
Energy Efficiency,"ASK_RED. Mask for use when extracting the red component from a packed (A)RGB int value. static final Integer; RED. Packed int representing red. static final Integer; WHITE. Packed int representing white. static final Integer; YELLOW. Packed int representing yellow. Method Summary. All MethodsStatic MethodsConcrete MethodsDeprecated Methods. Modifier and Type; Method; Description; static int; alpha(int argb). Extract the 8-bit alpha value from a packed ARGB value. static int; blue(int rgb). Extract the 8-bit blue value from a packed RGB value. static int; clip255(double val). Convert a double value to an int, flooring and clipping to the range 0-255. static int; do8BitRangeCheck(double v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(float v). Clip an input value to be an integer in the range 0-255 (with rounding down). static int; do8BitRangeCheck(int v). Clip an input value to be an integer in the range 0-255. static int; green(int rgb). Extract the 8-bit green value from a packed RGB value. static int; makeRGB(int r,; int g,; int b). Deprecated.; Use packRGB(int, int, int) or packClippedRGB(int, int, int) instead. static int; makeRGBA(int r,; int g,; int b,; int a). Deprecated.; The naming and order of arguments is misleading. static int; makeScaledRGB(int rgb,; double scale). Scale the RGB channels for a color by a fixed amount. static int; packARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values. static int; packClippedARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values, clipping to the range 0-255. static int; packClippedRGB(int r,; int g,; int b). Make a packed RGB value from specified input values, clipping to the range 0-255. static int; packRGB(int r,; int g,; int b). Make a packed RGB value from specified input values. static int; red(int rgb). Extract the 8-bit red value from a packed RGB value. static int[]; unpackARGB(",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:2282,green,green,2282,javadoc/docs/qupath/lib/common/ColorTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html,1,['green'],['green']
Energy Efficiency,"Convert detection objects to point annotations based upon their ROI centroids. static void; copyAnnotationsToClipboard(ImageData<BufferedImage> imageData). Attempt to annotation objects to the system clipboard, if available. static void; copySelectedAnnotationsToCurrentPlane(QuPathViewer viewer). Copy the selected objects and add them to the plane currently active in the viewer. static void; copySelectedObjectsToClipboard(ImageData<BufferedImage> imageData). Attempt to copy selected objects to the system clipboard, if available. static void; createFullImageAnnotation(QuPathViewer viewer). Create a full image annotation for the image in the specified viewer. static Stage; createLicensesWindow(QuPathGUI qupath). Create a window summarizing license information for QuPath and its third party dependencies. static Stage; createMeasurementMapDialog(QuPathGUI qupath). Create a dialog for displaying measurement maps. static Stage; createMemoryMonitorDialog(QuPathGUI qupath). Create a dialog to monitor memory usage. static Stage; createObjectDescriptionsDialog(QuPathGUI qupath). Create a stage to display object descriptions. static Stage; createPreferencesDialog(QuPathGUI qupath). Show a dialog to adjust QuPath preferences. static void; createRotateImageDialog(QuPathGUI qupath). Create a dialog for rotating the image in the current viewer (for display only). static Stage; createShowSystemInfoDialog(QuPathGUI qupath). Create a window summarizing key system information relevant for QuPath. static org.controlsfx.control.action.Action; createSingleStageAction(Supplier<Stage> supplier). Create a command that generates a persistent single dialog on demand. static org.controlsfx.control.action.Action; createSingleStageAction(Supplier<Stage> supplier,; String name). Create a named command that generates a persistent single dialog on demand. static Stage; createSpecifyAnnotationDialog(QuPathGUI qupath). Create a stage to prompt the user to specify an annotation to add. static Stage; cr",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/Commands.html:2087,monitor,monitor,2087,javadoc/docs/qupath/lib/gui/commands/Commands.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/gui/commands/Commands.html,1,['monitor'],['monitor']
Energy Efficiency,"DensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut_red - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. brightness; public static float brightness(int rgb); Extract brightness value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. getPixelValue; public static float getPixelValue(int rgb,; ColorTransformer.ColorTransformMethod method); Get the value of a single packed RGB pixel after applying a specified color transform method. Parameters:;",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10651,green,green,10651,javadoc/docs/qupath/lib/color/ColorTransformer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html,1,['green'],['green']
Energy Efficiency,"Duke, P. J., & Patrick, C. W. (2003).; Automated Selection of DAB-labeled Tissue for Immunohistochemical Quantification.; Journal of Histochemistry & Cytochemistry, 51(5); doi:10.1177/002215540305100503; ; Color deconvolution methods use default stain vectors - qupath.lib.color contains more flexible options for this. Author:; Pete Bankhead. Nested Class Summary; Nested Classes. Modifier and Type; Class; Description; static enum ; ColorTransformer.ColorTransformMethod. Enum consisting of color transforms that may be applied to RGB images. Constructor Summary; Constructors. Constructor; Description; ColorTransformer();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static float; blueChromaticity(int rgb). Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). static float; brightness(int rgb). Extract brightness value from RGB-to-HSB transform. static float; brown(int rgb). Extract brown value, (blue - (red + green)*0.3f). static int[]; colorDeconvolveReconvolveRGBArray(int[] buf,; ColorDeconvolutionStains stainsInput,; ColorDeconvolutionStains stainsOutput,; boolean discardResidual,; int[] bufOutput). Deconvolve RGB array with one set of stain vectors, and reconvolve with another. static int[]; colorDeconvolveReconvolveRGBArray(int[] buf,; ColorDeconvolutionStains stainsInput,; ColorDeconvolutionStains stainsOutput,; boolean discardResidual,; int[] bufOutput,; float scale,; float offset). Deconvolve RGB array with one set of stain vectors, and reconvolve with another - with optional scaling. static float; colorDeconvolveRGBPixel(int rgb,; ColorDeconvolutionStains stains,; int channel). Calculate the color deconvolved value for a single pixel, stored as a packed (A)RGB int. static ColorModel; getDefaultColorModel(ColorTransformer.ColorTransformMethod method). This does not guarantee a ColorModel will be returned!; If it is not, then a default grayscale LUT should be used. stat",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:1924,green,green,1924,javadoc/docs/qupath/lib/color/ColorTransformer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html,1,['green'],['green']
Energy Efficiency,"Field | ; Constr | ; Method. SEARCH. Package qupath.lib.analysis.algorithms; Class EstimateStainVectors. java.lang.Object; qupath.lib.analysis.algorithms.EstimateStainVectors. public class EstimateStainVectors; extends Object; Code for estimating stain vectors automatically from an image, or to launch an editor for visually/interactively modifying stain vectors.; ; Aspects of the automated method take inspiration from Macenko's 2009 paper; 'A METHOD FOR NORMALIZING HISTOLOGY SLIDES FOR QUANTITATIVE ANALYSIS'; although it also differs through its use of preprocessing and parameters, as well as its selection of an actual pixel value ; rather than projecting on the identified plane. Author:; Pete Bankhead. Constructor Summary; Constructors. Constructor; Description; EstimateStainVectors();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static ColorDeconvolutionStains; estimateStains(int[] rgbPacked,; float[] redOD,; float[] greenOD,; float[] blueOD,; ColorDeconvolutionStains stainsOriginal,; double minStain,; double maxStain,; double ignorePercentage,; boolean checkColors). Check colors only currently applies to H&E. static ColorDeconvolutionStains; estimateStains(BufferedImage img,; ColorDeconvolutionStains stainsOriginal,; boolean checkColors). Estimate two stains from a BufferedImage, with default parameter settings. static ColorDeconvolutionStains; estimateStains(BufferedImage img,; ColorDeconvolutionStains stainsOriginal,; double minStain,; double maxStain,; double ignorePercentage,; boolean checkColors). Estimate two stains from a BufferedImage. static int[]; getModeRGB(int[] rgb). Get the mode from an array of (packed) RGB pixel values. static BufferedImage; smoothImage(BufferedImage img). Smooth out compression artefacts by running 3x3 filter twice (roughly approximates a small Gaussian filter). static int[]; subsample(int[] arr,; int maxEntries). Subsample an array so that it contains no more than maxEntrie",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/algorithms/EstimateStainVectors.html:1288,green,greenOD,1288,javadoc/docs/qupath/lib/analysis/algorithms/EstimateStainVectors.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/algorithms/EstimateStainVectors.html,1,['green'],['greenOD']
Energy Efficiency,"Icons;  ; RECTANGLE_TOOL - Variable in class qupath.lib.gui.ToolManager;  ; RectangleROI - Class in qupath.lib.roi. ROI representing a square or rectangle (unrotated). red(int) - Static method in class qupath.lib.common.ColorTools. Extract the 8-bit red value from a packed RGB value. Red - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Red channel only. RED - Static variable in class qupath.lib.common.ColorTools. Packed int representing red. RED - Static variable in class qupath.lib.images.servers.ImageChannel. Default red channel for RGB images. Red_chromaticity - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Red chromaticity value, red / max(1, red + green + blue). Red_OD - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Red channel optical densities. redChromaticity(int) - Static method in class qupath.lib.color.ColorTransformer. Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). redo() - Method in class qupath.lib.gui.scripting.richtextfx.CodeAreaControl;  ; redo() - Method in interface qupath.lib.gui.scripting.ScriptEditorControl. Request redo. redo() - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; REDO - Variable in class qupath.lib.gui.actions.menus.EditMenuActions.Actions;  ; redoAction - Variable in class qupath.lib.gui.scripting.DefaultScriptEditor;  ; redoOnce() - Method in class qupath.lib.gui.UndoRedoManager. Request to 'redo' the last 'undone' hierarchy change for the current active viewer. RefineAnnotationsPlugin<T> - Class in qupath.lib.plugins.objects. Plugin to create new annotations by expanding the size of existing annotations. RefineAnnotationsPlugin() - Constructor for class qupath.lib.plugins.objects.RefineAnnotationsPlugin;  ; refineAreas(Geometry, double, double) - Static method in class qupath.lib.roi.GeometryTools. Remove small fragments and fill small interior rings within a G",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:832523,green,green,832523,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['green'],['green']
Energy Efficiency,"Info.ModifiableChannelDisplayInfo. Helper interface to indicate that the display ranges can be modified. ChannelDisplayMode. Display mode for an image channel, used in combination with ImageDisplay and ChannelDisplayInfo. ChannelDisplayTransformServer. ImageServer that applies a color transform to an image. ChannelSettings. A simple class to store the main information needed by QuPath to display an image channel; with a requested color and brightness/contrast setting. ChannelTransformFeatureServer. A TransformingImageServer that applies color transforms to generate channels. Charts. Helper class for generating interactive charts. Charts.BarChartBuilder. Builder for creating scatter charts. Charts.PieChartBuilder. Builder for creating pie charts. Charts.ScatterChartBuilder. Builder for creating scatter charts. ChartThresholdPane. Pane that can be used to contain an XYChart, adding adjustable thresholds to be displayed. ChartTools. Collection of static methods to help when working with JavaFX charts, ; and adapting these for QuPath's purposes. ChoiceParameter<S>. Parameter that supports a list of choices. ClassificationResolution. Wrapper for a PixelCalibration to be used to define classifier resolution. ClassifyMenuActions;  ; CodeAreaControl. Code area control using RichTextFX. CoherenceFeaturePlugin. Plugin to calculate coherence features for image tiles. ColorDeconvMatrix3x3. Simple class for representing - and inverting a 3x3 matrix. ColorDeconvolutionHelper. Static methods to assist with color deconvolution. ColorDeconvolutionStains. Helper class for storing stain vectors and maximum channel values to be used for color deconvolution. ColorDeconvolutionStains.DefaultColorDeconvolutionStains. Enum for common stain defaults. ColorMapCanvas. Canvas to show the range of a ColorMap (i.e. ColorMaps. Helper class to manage colormaps, which are rather like lookup tables but easily support interpolation. ColorMaps.ColorMap. colormap, which acts as an interpolating lookup ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/allclasses-index.html:7096,adapt,adapting,7096,javadoc/docs/allclasses-index.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/allclasses-index.html,1,['adapt'],['adapting']
Energy Efficiency,"Mat mat). Find the minimum of all elements in a Mat, ignoring NaNs. static Mat; minimum(Mat m1,; double d). Get the per-element minimum value between an array and a scalar. static Mat; minimum(Mat m1,; Mat m2). Get the per-element minimum value for two arrays. static Mat; minus(Mat m1,; Number s). Subtract a constant from an array. static Mat; minus(Mat m1,; Mat m2). Subtract one array from another. static Mat; minus(Mat m1,; Scalar s). Subtract a scalar from an array. static Mat; multiply(Mat m1,; double s). Multiply array elements by a constant. static Mat; multiply(Mat m1,; Mat m2). Per-element multiplication of two arrays (not matrix multiplication). static Mat; negative(Mat m1). Multiply elements of an array by -1. static Mat; or(Mat m1,; Mat m2). Compute the bitwise OR of two arrays. static Mat; plus(Mat m1,; Number s). Add an array and a number. static Mat; plus(Mat m1,; Mat m2). Add two arrays. static Mat; plus(Mat m1,; Scalar s). Add an array and a scalar. static Mat; power(Mat m1,; double power). Raise elements of an array to a specified power. static long[]; shape(Mat mat). Get the shape of a multidimensional Mat. static List<Mat>; splitChannels(Mat mat). Split channels of an array. static double; std(Mat mat). Calculate the standard deviation of all elements in a Mat, ignoring NaNs. static double; sum(Mat mat). Calculate the sum of all elements in a Mat, ignoring NaNs. static Mat; xor(Mat m1,; Mat m2). Compute the bitwise XOR of two arrays. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Constructor Details. GroovyCV; public GroovyCV(). Method Details. mean; public static double mean(Mat mat); Calculate the mean of all elements in a Mat, ignoring NaNs. Parameters:; mat - ; Returns:. sum; public static double sum(Mat mat); Calculate the sum of all elements in a Mat, ignoring NaNs. Parameters:; mat - ; Returns:. std; public static double std(Mat mat); Calculate the s",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/GroovyCV.html:4513,power,power,4513,javadoc/docs/qupath/opencv/tools/GroovyCV.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/GroovyCV.html,2,['power'],['power']
Energy Efficiency,"Optionally use grayscale LUT, rather than deriving colors from classifications. GRAYSCALE - Enum constant in enum class qupath.lib.display.ChannelDisplayMode. Show using a grayscale LUT (black to white). greaterThan(ImageProcessor, ImageProcessor) - Static method in class qupath.imagej.processing.SimpleThresholding. Created a binary image by thresholding pixels to find where ip1 > ip2. greaterThanOrEqual(ImageProcessor, ImageProcessor) - Static method in class qupath.imagej.processing.SimpleThresholding. Created a binary image by thresholding pixels to find where ip1 >= ip2. green(int) - Static method in class qupath.lib.common.ColorTools. Extract the 8-bit green value from a packed RGB value. Green - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green channel only. GREEN - Static variable in class qupath.lib.common.ColorTools. Packed int representing green. GREEN - Static variable in class qupath.lib.images.servers.ImageChannel. Default green channel for RGB images. Green_chromaticity - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green value divided by blue value. Green_OD - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green channel optical densities. greenChromaticity(int) - Static method in class qupath.lib.color.ColorTransformer. Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). greenOverBlue(int) - Static method in class qupath.lib.color.ColorTransformer. Extract green over blue value from a packed RGB pixel, green / max(1, blue). GRID - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; GRID_ANNOTATIONS - Variable in class qupath.lib.gui.actions.menus.MeasureMenuActions.Actions;  ; GRID_SPACING - Variable in cla",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:559409,green,green,559409,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['green'],['green']
Energy Efficiency,"Parameters:; m1 - ; m2 - ; Returns:. div; public static Mat div(Mat m1,; double s); Divide array elements by a constant. Parameters:; m1 - ; s - ; Returns:. abs; public static Mat abs(Mat mat); Compute the absolute value of all elements in an array. Parameters:; mat - ; Returns:. negative; public static Mat negative(Mat m1); Multiply elements of an array by -1. Parameters:; m1 - ; Returns:. or; public static Mat or(Mat m1,; Mat m2); Compute the bitwise OR of two arrays. Parameters:; m1 - ; m2 - ; Returns:. and; public static Mat and(Mat m1,; Mat m2); Compute the bitwise AND of two arrays. Parameters:; m1 - ; m2 - ; Returns:. xor; public static Mat xor(Mat m1,; Mat m2); Compute the bitwise XOR of two arrays. Parameters:; m1 - ; m2 - ; Returns:. bitwiseNegate; public static Mat bitwiseNegate(Mat m1); Compute the bitwise NOT of an array. Parameters:; m1 - ; Returns:. power; public static Mat power(Mat m1,; double power); Raise elements of an array to a specified power. Parameters:; m1 - ; power - ; Returns:. splitChannels; public static List<Mat> splitChannels(Mat mat); Split channels of an array. Parameters:; mat - ; Returns:. gt; public static Mat gt(Mat m1,; double threshold); Apply a greater than threshold. The output is an 8-bit unsigned array with values 0 and 255. Parameters:; m1 - ; threshold - ; Returns:. gt; public static Mat gt(Mat m1,; Mat m2); Apply a greater than threshold between two arrays. The output is an 8-bit unsigned array with values 0 and 255. Parameters:; m1 - ; m2 - ; Returns:. eq; public static Mat eq(Mat m1,; double value); Create a binary image showing where an array has a specific value. The output is an 8-bit unsigned array with values 0 and 255. Parameters:; m1 - ; value - ; Returns:. eq; public static Mat eq(Mat m1,; Mat m2); Create a binary image showing where two arrays have matching values.; The output is an 8-bit unsigned array with values 0 and 255. Parameters:; m1 - ; m2 - ; Returns:. geq; public static Mat geq(Mat m1,; double thre",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/GroovyCV.html:8932,power,power,8932,javadoc/docs/qupath/opencv/tools/GroovyCV.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/opencv/tools/GroovyCV.html,1,['power'],['power']
Energy Efficiency,"Plane; public ROI updatePlane(ImagePlane plane); Description copied from interface: ROI; Create a new ROI defining the same region on a different ImagePlane.; The original ROI is unchanged. Specified by:; updatePlane in interface ROI; Parameters:; plane - the new plane to use; Returns:. getAllPoints; public List<Point2> getAllPoints(); Since ellipses aren't represented internally with simple polygon points, ; this currently returns only 4 points (rather more diamond-like that would be ideal).; This behavior may change. Specified by:; getAllPoints in interface ROI; Returns:. getShape; public Shape getShape(); Description copied from interface: ROI; Returns a java.awt.Shape representing this ROI, if possible.; ; Note that PointROI throws an UnsupportedOperationException as it cannot ; adequately be represented by a Shape object. Specified by:; getShape in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. scale; public ROI scale(double scaleX,; double scaleY,; double originX,; double originY); Description copied from interface: ROI; Create a scaled version of this ROI. Coordinates are multiplied by the given ; scaling factors, while the original ROI is unchanged. Specified by:; scale in interface ROI; Parameters:; scaleX - horizontal scale value; scaleY - vertical scale value; originX - value subtracted from each x-ordinate prior to scaling, and added back afterwards; originY - value subtracted from each y-ordinate prior to scaling, and added back afterwards; Returns:; See Also:. ROI.scale(double, double). translate; public ROI translate(double dx,; double dy); Description copied from interface: ROI; Create a translated version of this ROI. The original ROI is unchanged. Specified by:; translate in interface ROI; Parameters:; dx - horizontal translation; dy - vertical translation; Returns:. getRoi",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html:7330,efficient,efficient,7330,javadoc/docs/qupath/lib/roi/EllipseROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/EllipseROI.html,1,['efficient'],['efficient']
Energy Efficiency,"R; ""\t"". qupath.lib.images.servers.PixelCalibration. Modifier and Type; Constant Field; Value; public static final String; PIXEL; ""px""; public static final String; Z_SLICE; ""z-slice"". qupath.lib.images.servers.openslide.jna.OpenSlide. Modifier and Type; Constant Field; Value; public static final String; PROPERTY_NAME_BACKGROUND_COLOR; ""openslide.background-color""; public static final String; PROPERTY_NAME_BOUNDS_HEIGHT; ""openslide.bounds-height""; public static final String; PROPERTY_NAME_BOUNDS_WIDTH; ""openslide.bounds-width""; public static final String; PROPERTY_NAME_BOUNDS_X; ""openslide.bounds-x""; public static final String; PROPERTY_NAME_BOUNDS_Y; ""openslide.bounds-y""; public static final String; PROPERTY_NAME_COMMENT; ""openslide.comment""; public static final String; PROPERTY_NAME_MPP_X; ""openslide.mpp-x""; public static final String; PROPERTY_NAME_MPP_Y; ""openslide.mpp-y""; public static final String; PROPERTY_NAME_OBJECTIVE_POWER; ""openslide.objective-power""; public static final String; PROPERTY_NAME_QUICKHASH1; ""openslide.quickhash-1""; public static final String; PROPERTY_NAME_VENDOR; ""openslide.vendor"". qupath.lib.objects.DefaultPathObjectConnectionGroup. Modifier and Type; Constant Field; Value; public static final String; KEY_OBJECT_CONNECTIONS; ""OBJECT_CONNECTIONS"". qupath.lib.objects.TMACoreObject. Modifier and Type; Constant Field; Value; public static final String; KEY_CASE_ID; ""Case ID""; public static final String; KEY_OS_CENSORED; ""OS censored""; public static final String; KEY_OVERALL_SURVIVAL; ""Overall survival""; public static final String; KEY_RECURRENCE_FREE_SURVIVAL; ""Recurrence-free survival""; public static final String; KEY_RFS_CENSORED; ""RFS censored""; public static final String; LEGACY_KEY_UNIQUE_ID; ""Unique ID"". qupath.lib.objects.classes.PathClass. Modifier and Type; Constant Field; Value; public static final String; NAME_NEGATIVE; ""Negative""; public static final String; NAME_ONE_PLUS; ""1+""; public static final String; NAME_POSITIVE; ""Positive""",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/constant-values.html:3481,power,power,3481,javadoc/docs/constant-values.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/constant-values.html,1,['power'],['power']
Energy Efficiency,"RGB value.; ; This may be null if no color has been set. Returns:; Since:; v0.4.0; See Also:. setColorRGB(Integer); ColorTools.red(int); ColorTools.green(int); ColorTools.blue(int). getColorRGB; @Deprecated; public Integer getColorRGB(); Deprecated.; since v0.4.0, use getColor() instead. Return any stored color as a packed RGB value.; ; This may be null if no color has been set. Returns:. setColorRGB; @Deprecated; public void setColorRGB(Integer color); Deprecated.; since v0.4.0, use setColor(Integer) instead. Set the display color. Parameters:; color - . setColor; public void setColor(Integer color); Set the display color as a packed (A)RGB integer (alpha may not be used ; by viewing code). Parameters:; color - packed (A)RGB value, or null if a color should not stored; Since:; v0.4.0; See Also:. setColor(int, int, int); ColorTools.packRGB(int, int, int). setColor; public void setColor(int red,; int green,; int blue); Set the display color as 8-bit RGB values. Parameters:; red - ; green - ; blue - ; Since:; v0.4.0. getID; public UUID getID(); Get the ID for this object. Returns:; See Also:. setID(UUID); refreshID(). setID; public void setID(UUID id); throws IllegalArgumentException; Set the ID for this object.; ; Important! Use this with caution or, even better, not at all!; ; In general, the ID for an object should be unique.; This is best achieved by allowing the ID to be generated randomly when the object ; is created, and never changing it to anything else.; ; However, there are times when it is necessary to transfer the ID from an existing object, ; such as whenever the ROI of an object is being transformed and the original object deleted.; ; For that reason, it is possible (although discouraged) to set an ID explicitly. Parameters:; id - the ID to use; Throws:; IllegalArgumentException - if the specified ID is null. refreshID; public void refreshID(); Regenerate a new random ID. See Also:. setID(UUID). storeMetadataValue; protected Object storeMetadataValue(St",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObject.html:20047,green,green,20047,javadoc/docs/qupath/lib/objects/PathObject.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObject.html,1,['green'],['green']
Energy Efficiency,"Script is disabled on your browser.    ; Skip navigation links. Overview; Package; Class; Tree; Deprecated; Index; Help. Summary:. Nested; Field; Constr; Method. Detail:. Field; Constr; Method. Summary: ; Nested | ; Field | ; Constr | ; Method. Detail: ; Field | ; Constr | ; Method. SEARCH. Package qupath.lib.color; Class ColorToolsAwt. java.lang.Object; qupath.lib.color.ColorToolsAwt. public class ColorToolsAwt; extends Object; Helper class for converting between packed RGB colors and Java's AWT representation, as well as creating some ColorModels for BufferedImages. Author:; Pete Bankhead. Field Summary; Fields. Modifier and Type; Field; Description; static final Color; TRANSLUCENT_BLACK. Black, with 50% opacity. static final Color; TRANSLUCENT_WHITE. White, with 50% opacity. Constructor Summary; Constructors. Constructor; Description; ColorToolsAwt();  . Method Summary. All MethodsStatic MethodsConcrete Methods. Modifier and Type; Method; Description; static IndexColorModel; createIndexColorModel(int red,; int green,; int blue,; boolean whiteBackground). Get an IndexColorModel representing a linear LUT based on a RGB color. static Color; darkenColor(Color color). Get a (slightly) darker version of the specified color. static Color; getCachedColor(int r,; int g,; int b). Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). static Color; getCachedColor(int r,; int g,; int b,; int a). Get a Color object, possibly from a shared map (used to avoid creating too many objects unnecessarily). static Color; getCachedColor(Integer rgb). Get cached color. static Color; getCachedColor(Integer rgb,; boolean hasAlpha). Get cached color, explicitly stating whether alpha should be included or not. static Color; getColorWithOpacity(Color color,; double opacity). Get a color with a specified opacity, setting the alpha channel accordingly. static Color; getColorWithOpacity(Integer rgb,; double opacity). Get a color with a specified o",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:1065,green,green,1065,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html,1,['green'],['green']
Energy Efficiency,"ScriptEditorControl. Get the context menu for the control. getContextMenu() - Method in class qupath.lib.gui.scripting.TextAreaControl;  ; getConvexHull() - Method in class qupath.lib.roi.AreaROI. Default implementation using JTS. getConvexHull() - Method in class qupath.lib.roi.GeometryROI. Default implementation using JTS. getConvexHull() - Method in class qupath.lib.roi.PolygonROI. Default implementation using JTS. getConvexHull() - Method in class qupath.lib.roi.PolylineROI. Default implementation using JTS. getConvexHull() - Method in class qupath.lib.roi.EllipseROI;  ; getConvexHull() - Method in interface qupath.lib.roi.interfaces.ROI. Get a ROI representing the convex hull of this ROI. getConvexHull() - Method in class qupath.lib.roi.LineROI;  ; getConvexHull() - Method in class qupath.lib.roi.PointsROI;  ; getConvexHull() - Method in class qupath.lib.roi.RectangleROI;  ; getConvexHull(List<Point2>) - Static method in class qupath.lib.roi.ConvexHull. TODO: Consider a more efficient convex hull calculation. getCoreClasses() - Static method in class qupath.lib.gui.scripting.QPEx. Get a list of core classes that are likely to be useful for scripting. getCoreClasses() - Static method in class qupath.lib.scripting.QP. Get a list of core classes that are likely to be useful for scripting. getCount() - Method in class qupath.lib.gui.actions.InfoMessage. Counts associated with the message, or -1 if the count is null. getCountsForBin(int) - Method in class qupath.lib.analysis.stats.Histogram. Get the histogram counts for the specified bin. getCountsTransform() - Method in class qupath.lib.gui.charts.HistogramChart. Get the current counts transform. getCountSum() - Method in class qupath.lib.analysis.stats.Histogram. Sum of all histogram counts. getCreationTimestamp() - Method in interface qupath.lib.projects.Project. Request a timestamp from when the project was created. getCropRegion() - Method in class qupath.lib.images.servers.CroppedImageServer. Get the region bei",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:363173,efficient,efficient,363173,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['efficient'],['efficient']
Energy Efficiency,"Value - ; px - optional array used for output; Returns:. getGreenOpticalDensities; public static float[] getGreenOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. getBlueOpticalDensities; public static float[] getBlueOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. generateMedianStainVectorFromPixels; public static StainVector generateMedianStainVectorFromPixels(String name,; int[] rgb,; double redMax,; double greenMax,; double blueMax); Determine median RGB optical densities for an array of pixels (packed RGB), and combine these into a StainVector with the specified name. Parameters:; name - ; rgb - ; redMax - ; greenMax - ; blueMax - ; Returns:. getMedianRGB; public static int getMedianRGB(int[] rgb); Determine median of RGB values.; The median of each channel is computed separately. Parameters:; rgb - array of packed RGB values; Returns:. refineColorDeconvolutionStains; public static ColorDeconvolutionStains refineColorDeconvolutionStains(int[] rgb,; ColorDeconvolutionStains stains,; double minStain,; double percentageClipped); Attempt to automatically refine color deconvolution stains based upon pixel values.; ; Warning! This is really only for testing - it has not be very extensively validated.; ; The method used is based very loosely on that of Macenko et al. (2009), but avoids eigenvalue computations in favor of; determining an initial stain inputs.; ; TODO: Improve automatic stain vector refinement. Parameters:; rgb - ; stains - ; minStain - minimum optical density for each RGB channel (default 0.15); percentageClipped - ; Returns:. estimateWhiteValues; public static double[] estima",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html:6288,green,greenMax,6288,javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,1,['green'],['greenMax']
Energy Efficiency,"a specified color transform method, with color deconvolution stains provided. static float[]; getSimpleTransformedPixels(int[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels). Apply a color transform to all pixels in a packed (A)RGB array. static float; getStainProjection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of projection of pixel OD onto stain OD. static float; getStainRejection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Calculate magnitude of rejection of pixel OD onto stain OD. static float[]; getTransformedPixels(int[] buf,; ColorTransformer.ColorTransformMethod method,; float[] pixels,; ColorDeconvolutionStains stains). Apply a color transform to all pixels in a packed (A)RGB array. static float; greenChromaticity(int rgb). Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). static float; greenOverBlue(int rgb). Extract green over blue value from a packed RGB pixel, green / max(1, blue). static float; hue(int rgb). Extract hue value from RGB-to-HSB transform. static int; makeScaledRGBwithRangeCheck(float v,; float offset,; float scale,; ColorModel cm). Create a packed RGB pixel value by applying a ColorModel to a (possibly scaled and offset) floating point value. static float; opticalDensitySum(int rgb,; double[] od_lut). Extract optical density sum value from a packed RGB pixel. static float; opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue). Extract optical density sum value from a packed RGB pixel. static float; redChromaticity(int rgb). Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). static float; rgbMean(int rgb). Extract mean of RGB values from a packed RGB pixel. static float; saturation(int rgb). Extract saturation",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:4511,green,green,4511,javadoc/docs/qupath/lib/color/ColorTransformer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html,3,['green'],['green']
Energy Efficiency,"addShapeMeasurements(PathObject pathObject,; PixelCalibration cal,; ObjectMeasurements.ShapeFeatures... features); Add shape measurements for one object. If this is a cell, measurements will be made for both the ; nucleus and cell boundary where possible. Parameters:; pathObject - the object for which measurements should be added; cal - pixel calibration, used to determine units and scaling; features - specific features to add; if empty, all available shape features will be added. addShapeMeasurements; public static void addShapeMeasurements(Collection<? extends PathObject> pathObjects,; PixelCalibration cal,; ObjectMeasurements.ShapeFeatures... features); Add shape measurements for multiple objects. If any of these objects is a cell, measurements will be made for both the ; nucleus and cell boundary where possible. Parameters:; pathObjects - the objects for which measurements should be added; cal - pixel calibration, used to determine units and scaling; features - specific features to add; if empty, all available shape features will be added. addIntensityMeasurements; public static void addIntensityMeasurements(ImageServer<BufferedImage> server,; PathObject pathObject,; double downsample,; Collection<ObjectMeasurements.Measurements> measurements,; Collection<ObjectMeasurements.Compartments> compartments); throws IOException; Measure all channels of an image for one individual object or cell.; All compartments are measured where possible (nucleus, cytoplasm, membrane and full cell).; ; Note: This implementation is likely to change in the future, to enable neighboring cells to be ; measured more efficiently. Parameters:; server - the server containing the pixels (and channels) to be measured; pathObject - the cell to measure (the MeasurementList will be updated); downsample - resolution at which to request pixels; measurements - requested measurements to make; compartments - the cell compartments to measure; ignored if the object is not a cell; Throws:; IOException. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/features/ObjectMeasurements.html:3729,efficient,efficiently,3729,javadoc/docs/qupath/lib/analysis/features/ObjectMeasurements.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/analysis/features/ObjectMeasurements.html,1,['efficient'],['efficiently']
Energy Efficiency,"ain - ; gStain - ; bStain - ; od_lut_red - ; od_lut_green - ; od_lut_blue - ; Returns:. opticalDensitySum; public static float opticalDensitySum(int rgb,; double[] od_lut); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut - lookup table to aid with fast optical density calculations; Returns:. opticalDensitySum; public static float opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut_red - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brown; public static float brown(int rgb); Extract brown value, (blue - (red + green)*0.3f). Parameters:; rgb - ; Returns:. hue; public static float hue(int rgb); Extract hue value from RGB-to-HSB transform. Parameters:; rgb - ; Returns:. saturation; public static float saturation(int rgb); Extract saturation value from RGB-to-HSB transform. P",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:10271,green,green,10271,javadoc/docs/qupath/lib/color/ColorTransformer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html,1,['green'],['green']
Energy Efficiency,"ains. Hematoxylin_H_E_8_bit; public static final ColorTransformer.ColorTransformMethod Hematoxylin_H_E_8_bit; Hematoxylin after color deconvolution with default H&E stains and conversion to 8-bit. Eosin_H_E_8_bit; public static final ColorTransformer.ColorTransformMethod Eosin_H_E_8_bit; Eosin after color deconvolution with default H&E stains and conversion to 8-bit. Hematoxylin_H_DAB_8_bit; public static final ColorTransformer.ColorTransformMethod Hematoxylin_H_DAB_8_bit; Hematoxylin after color deconvolution with default H-DAB stains and conversion to 8-bit. DAB_H_DAB_8_bit; public static final ColorTransformer.ColorTransformMethod DAB_H_DAB_8_bit; DAB after color deconvolution with default H-DAB stains and conversion to 8-bit. Red_chromaticity; public static final ColorTransformer.ColorTransformMethod Red_chromaticity; Red chromaticity value, red / max(1, red + green + blue). Green_chromaticity; public static final ColorTransformer.ColorTransformMethod Green_chromaticity; Green chromaticity value, green / max(1, red + green + blue). Blue_chromaticity; public static final ColorTransformer.ColorTransformMethod Blue_chromaticity; Blue chromaticity value, blue / max(1, red + green + blue). Green_divided_by_blue; public static final ColorTransformer.ColorTransformMethod Green_divided_by_blue; Green value divided by blue value. OD_Normalized; public static final ColorTransformer.ColorTransformMethod OD_Normalized; RGB values normalized to OD vector (to reduce intensity information). Brown; public static final ColorTransformer.ColorTransformMethod Brown; Brown value, (blue - (red + green)*0.3f). White; public static final ColorTransformer.ColorTransformMethod White; All pixels white. Black; public static final ColorTransformer.ColorTransformMethod Black; All pixels black. Method Details. values; public static ColorTransformer.ColorTransformMethod[] values(); Returns an array containing the constants of this enum class, in; the order they are declared. Returns:; an array",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html:6873,green,green,6873,javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.ColorTransformMethod.html,2,['green'],['green']
Energy Efficiency,"akeRGBA(int r,; int g,; int b,; int a). Deprecated.; The naming and order of arguments is misleading. static int; makeScaledRGB(int rgb,; double scale). Scale the RGB channels for a color by a fixed amount. static int; packARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values. static int; packClippedARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values, clipping to the range 0-255. static int; packClippedRGB(int r,; int g,; int b). Make a packed RGB value from specified input values, clipping to the range 0-255. static int; packRGB(int r,; int g,; int b). Make a packed RGB value from specified input values. static int; red(int rgb). Extract the 8-bit red value from a packed RGB value. static int[]; unpackARGB(int rgb). Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. static int[]; unpackARGB(int rgb,; int[] array). Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. static int[]; unpackRGB(int rgb). Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. static int[]; unpackRGB(int rgb,; int[] array). Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. WHITE; public static final Integer WHITE; Packed int representing white. BLACK; public static final Integer BLACK; Packed int representing black. RED; public static final Integer RED; Packed int representing red. GREEN; public static final Integer GREEN; Packed int representing green. BLUE; public static final Integer BLUE; Packed int representing blue. MAGENTA; public static final Integer MAGENTA; Packed int representing magenta. CYAN; public static final Integer CYAN; Packed int representing cyan. YELLOW; public ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:3484,green,green,3484,javadoc/docs/qupath/lib/common/ColorTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html,1,['green'],['green']
Energy Efficiency,"alone or derived Positive classification. static PathClass; getSingleton(PathClass pathClass). Get the singleton PathClass that is equivalent to the PathClass provided. static PathClass; getThreePlus(PathClass parentClass). Get a standalone or derived 3+ classification, indicating strong positivity. static PathClass; getTwoPlus(PathClass parentClass). Get a standalone or derived 2+ classification, indicating moderate positivity. boolean; isAncestorOf(PathClass childClass). Returns true if this class is equal to the specified child class, ; or an ancestor of that class. boolean; isDerivedClass(). Returns true if #getParentClass() != null. boolean; isDerivedFrom(PathClass parentClass). Returns true if this class, or any ancestor class, is equal to the specified parent class. boolean; isValid(). A PathClass is valid if its name is not null. protected Object; readResolve(). Called during deserialization to ensure that only a single instance of each PathClass exists. void; setColor(int red,; int green,; int blue). Set the color as 8-bit RGB values. void; setColor(Integer colorRGB). Set the color that should be used to display objects with this classification. Set<String>; toSet(). Return a view of this path class as an unmodifiable set, with ; each element representing the name of a path class component names. String; toString();  ; String; toString(String delimiter). Create a string representation, using the specified delimiter between ; elements of derived PathClasses. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait. Field Details. NAME_POSITIVE; public static final String NAME_POSITIVE; Default name for a class representing ""Positive"" staining intensity. See Also:. Constant Field Values. NAME_NEGATIVE; public static final String NAME_NEGATIVE; Default name for a class representing ""Negative"" staining intensity. See Also:. Constant Field Values. NAME_ONE_PLUS; public static final String NAM",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html:5455,green,green,5455,javadoc/docs/qupath/lib/objects/classes/PathClass.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/classes/PathClass.html,1,['green'],['green']
Energy Efficiency,"alue from specified input values. static int; packClippedARGB(int a,; int r,; int g,; int b). Make a packed ARGB value from specified input values, clipping to the range 0-255. static int; packClippedRGB(int r,; int g,; int b). Make a packed RGB value from specified input values, clipping to the range 0-255. static int; packRGB(int r,; int g,; int b). Make a packed RGB value from specified input values. static int; red(int rgb). Extract the 8-bit red value from a packed RGB value. static int[]; unpackARGB(int rgb). Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. static int[]; unpackARGB(int rgb,; int[] array). Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. static int[]; unpackRGB(int rgb). Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. static int[]; unpackRGB(int rgb,; int[] array). Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait. Field Details. WHITE; public static final Integer WHITE; Packed int representing white. BLACK; public static final Integer BLACK; Packed int representing black. RED; public static final Integer RED; Packed int representing red. GREEN; public static final Integer GREEN; Packed int representing green. BLUE; public static final Integer BLUE; Packed int representing blue. MAGENTA; public static final Integer MAGENTA; Packed int representing magenta. CYAN; public static final Integer CYAN; Packed int representing cyan. YELLOW; public static final Integer YELLOW; Packed int representing yellow. MASK_ALPHA; public static final Integer MASK_ALPHA; Mask for use when extracting the alpha component from a packed ARGB int value. MASK_RED; public static final Integer MASK_RED; Mask for use when extracting the red com",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:3765,green,green,3765,javadoc/docs/qupath/lib/common/ColorTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html,1,['green'],['green']
Energy Efficiency,"an isLocked(); Query the locked status.; ; Subclasses should override this method to support locking or unlocking. ; Default implementation always returns true. Returns:; true if the object is locked and should not be modified. getLevel; public int getLevel(); The level of the object in a hierarchy.; ; If the object has no parent, this is 0. Otherwise, it is equal to parent.getLevel() + 1. Returns:. isRootObject; public boolean isRootObject(); Returns true if the object is the 'root' of an object hierarchy. Returns:; See Also:. PathObjectHierarchy. getMeasurementList; public MeasurementList getMeasurementList(); Retrieve the list stored measurements for the object.; ; This can be used to query or add specific numeric measurements. Returns:. getMeasurements; public Map<String,Number> getMeasurements(); Get a map-based view on getMeasurementList().; This is likely to be less efficient (because it does not support primitives), but has several advantages ; ; it uses a familiar and standard API; it is much more amenable for scripting, especially in Groovy; it is possible to return null for missing values, rather than only Double.NaN. The MeasurementList is retained for backwards-compatibility, particularly the ability to ; read older data files.; Changes made to the map are propagated through to the MeasurementList, so it should be possible to ; use them interchangeably - however note that there may be some loss of precision if the backing measurement ; list uses floats rather than doubles.; ; It is possible that a map implementation becomes the standard in the future and getMeasurementList(); may be deprecated; this is an experimental feature introduced in v0.4.0 for testing. Returns:; Since:; v0.4.0. createEmptyMeasurementList; protected MeasurementList createEmptyMeasurementList(); Create a new MeasurementList of the preferred type for this object.; ; This will be called whenever a MeasurementList is requested, if one is not already stored.; ; Subclasses can use this ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObject.html:8724,efficient,efficient,8724,javadoc/docs/qupath/lib/objects/PathObject.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObject.html,1,['efficient'],['efficient']
Energy Efficiency,"at[] getRedOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. getGreenOpticalDensities; public static float[] getGreenOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. getBlueOpticalDensities; public static float[] getBlueOpticalDensities(int[] rgb,; double maxValue,; float[] px); Convert red channel of packed rgb pixel to optical density values, using a specified maximum value. Parameters:; rgb - ; maxValue - ; px - optional array used for output; Returns:. generateMedianStainVectorFromPixels; public static StainVector generateMedianStainVectorFromPixels(String name,; int[] rgb,; double redMax,; double greenMax,; double blueMax); Determine median RGB optical densities for an array of pixels (packed RGB), and combine these into a StainVector with the specified name. Parameters:; name - ; rgb - ; redMax - ; greenMax - ; blueMax - ; Returns:. getMedianRGB; public static int getMedianRGB(int[] rgb); Determine median of RGB values.; The median of each channel is computed separately. Parameters:; rgb - array of packed RGB values; Returns:. refineColorDeconvolutionStains; public static ColorDeconvolutionStains refineColorDeconvolutionStains(int[] rgb,; ColorDeconvolutionStains stains,; double minStain,; double percentageClipped); Attempt to automatically refine color deconvolution stains based upon pixel values.; ; Warning! This is really only for testing - it has not be very extensively validated.; ; The method used is based very loosely on that of Macenko et al. (2009), but avoids eigenvalue computations in favor of; determining an initial stain inputs.; ; TODO: Improve automatic stain vector ref",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html:6081,green,greenMax,6081,javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionHelper.html,1,['green'],['greenMax']
Energy Efficiency,"ath.process.gui.ProcessingExtension.OpenCVCommands.actionFastCellCounts. Deprecated Methods. Method; Description; qupath.imagej.tools.IJTools.convertToAnnotation(ImagePlus, ImageServer<?>, Roi, double, ImagePlane). use instead IJTools.convertToAnnotation(Roi, double, double, double, ImagePlane). qupath.imagej.tools.IJTools.convertToDetection(ImagePlus, ImageServer<?>, Roi, double, ImagePlane). use instead IJTools.convertToDetection(Roi, double, double, double, ImagePlane). qupath.imagej.tools.IJTools.convertToPathObject(ImagePlus, ImageServer<?>, Roi, double, Function<ROI, PathObject>, ImagePlane). use instead IJTools.convertToPathObject(Roi, double, double, double, Function, ImagePlane). qupath.lib.common.ColorTools.makeRGB(int, int, int). Use ColorTools.packRGB(int, int, int) or ColorTools.packClippedRGB(int, int, int) instead. qupath.lib.common.ColorTools.makeRGBA(int, int, int, int). The naming and order of arguments is misleading. The output is a packed ARGB value, ; but arguments are provided in the order red, green, blue, alpha. qupath.lib.common.GeneralTools.getNameWithoutExtension(String). v0.5.0 in favor of GeneralTools.stripExtension(String), which does the same thing but has; a more descriptive name. See https://github.com/qupath/qupath/pull/1275 for details. qupath.lib.display.ImageDisplay.applyTransforms(BufferedImage, BufferedImage, List<? extends ChannelDisplayInfo>, boolean). use instead ImageDisplay.applyTransforms(BufferedImage, BufferedImage, List, ChannelDisplayMode). qupath.lib.gui.images.servers.RenderedImageServer.Builder.display(ImageDisplay). use RenderedImageServer.Builder.renderer(ImageRenderer) instead (since an ImageDisplay is also an ImageRenderer. qupath.lib.gui.measure.ObservableMeasurementTableData.createNumericMeasurement(PathObject, String). qupath.lib.gui.measure.ObservableMeasurementTableData.createStringMeasurement(PathObject, String). qupath.lib.gui.panes.PreferencePane.addChoicePropertyPreference(Property<T>, ObservableList<T",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/deprecated-list.html:2085,green,green,2085,javadoc/docs/deprecated-list.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/deprecated-list.html,1,['green'],['green']
Energy Efficiency,"athObject(PathObject pathObject). Deprecated.; since v0.4.0, replaced by removeChildObject(PathObject). void; removePathObjects(Collection<PathObject> pathObjects). Deprecated.; since v0.4.0, replaced by removeChildObjects(Collection). boolean; resetPathClass(). Reset the classification (i.e. protected Set<String>; retrieveMetadataKeys(). Get the set of metadata keys. protected Object; retrieveMetadataValue(String key). Get a metadata value. void; setClassifications(Collection<String> classifications). Set the PathClass from a collection of names according to the rules:; ; If the collection is empty, reset the PathClass; If the collection has one element, set it to be the name of the PathClass; If the collection has multiple element, create and set a derived PathClass with each ; unique element the name of a PathClass component; ; The uniqueness is equivalent to copying the elements into a set; if a set is provided ; as input then a defensive copy will be made.. void; setColor(int red,; int green,; int blue). Set the display color as 8-bit RGB values. void; setColor(Integer color). Set the display color as a packed (A)RGB integer (alpha may not be used ; by viewing code). void; setColorRGB(Integer color). Deprecated.; since v0.4.0, use setColor(Integer) instead. void; setID(UUID id). Set the ID for this object. void; setLocked(boolean locked). Set locked status, if possible. void; setName(String name). Set the stored object name. void; setPathClass(PathClass pc). Set the classification of the object, without specifying any classification probability. abstract void; setPathClass(PathClass pathClass,; double classProbability). Set the classification of the object, specifying a classification probability. protected Object; storeMetadataValue(String key,; String value). Store a metadata value. String; toString();  ; void; writeExternal(ObjectOutput out);  . Methods inherited from class java.lang.Object; clone, equals, finalize, getClass, hashCode, notify, notifyAll, wai",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObject.html:5963,green,green,5963,javadoc/docs/qupath/lib/objects/PathObject.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/objects/PathObject.html,1,['green'],['green']
Energy Efficiency,"athObjectTools. Standardize the classifications for a collection of objects. standardizeClassifications(Collection<PathObject>, Comparator<String>) - Static method in class qupath.lib.objects.PathObjectTools. Standardize the classifications for a collection of objects. StandardPathClasses() - Constructor for class qupath.lib.objects.classes.PathClass.StandardPathClasses;  ; start() - Method in class qupath.lib.common.Timeit. Start the Timeit and create a checkpoint with the default name. start(String) - Method in class qupath.lib.common.Timeit. Start the Timeit and create a checkpoint with the specified name. start(Stage) - Method in class qupath.lib.gui.QuPathApp;  ; start(Stage) - Method in class qupath.lib.gui.tma.QuPathTMAViewer;  ; startMonitoring(String, int, boolean) - Method in class qupath.lib.plugins.CommandLineTaskRunner.CommandLineProgressMonitor;  ; startMonitoring(String, int, boolean) - Method in interface qupath.lib.plugins.SimpleProgressMonitor. Set the plugin to monitor, and begin monitoring. startMoving(double, double, boolean) - Method in class qupath.lib.gui.viewer.tools.handlers.MoveToolEventHandler.ViewerMover. Start moving, with initial velocity given by dx and dy. startTranslation(double, double, boolean) - Method in class qupath.lib.roi.RoiEditor. Returns true if the current ROI is translatable, and at the end of this call the translation has started. startupMessage - Variable in class qupath.lib.gui.panes.PreferencePane.GeneralPreferences;  ; startupScriptPath - Variable in class qupath.lib.gui.panes.PreferencePane.GeneralPreferences;  ; startupScriptProperty() - Static method in class qupath.lib.gui.prefs.PathPrefs. Path to a startup script that should be run immediately after QuPath's launch. StatisticsHelper - Class in qupath.lib.analysis.stats. Static methods for computing statistics from images, with or without a corresponding labeled image. StatisticsHelper() - Constructor for class qupath.lib.analysis.stats.StatisticsHelper;  ; statM",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:996042,monitor,monitor,996042,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,2,['monitor'],"['monitor', 'monitoring']"
Energy Efficiency,"atic method in class qupath.opencv.ml.objects.features.FeatureExtractors. Create a FeatureExtractor that determines features for the MeasurementList of the PathObject. createMeasurementManager(ImageData<BufferedImage>, PixelClassifier) - Static method in class qupath.opencv.ml.pixel.PixelClassifierTools. Create a PixelClassificationMeasurementManager that can be used to generate measurements from applying a pixel classifier to an image. createMeasurementManager(ImageServer<BufferedImage>) - Static method in class qupath.opencv.ml.pixel.PixelClassifierTools. Create a PixelClassificationMeasurementManager that can be used to generate measurements from an ImageServer where pixels provide ; classification or probability information. createMeasurementMapDialog(QuPathGUI) - Static method in class qupath.lib.gui.commands.Commands. Create a dialog for displaying measurement maps. createMemoryMonitorDialog(QuPathGUI) - Static method in class qupath.lib.gui.commands.Commands. Create a dialog to monitor memory usage. createMenu(String, Object...) - Static method in class qupath.lib.gui.tools.MenuTools. Create a menu, optionally add new menu items with MenuTools.addMenuItems(List, Object...). createMenuItem(Action) - Static method in class qupath.lib.gui.actions.ActionTools. Create a menu item from an action. createMinimumChannelTransform() - Static method in class qupath.lib.images.servers.ColorTransforms. Create a ColorTransform that calculates the minimum of all channels. createMoreButton(ContextMenu, Side) - Static method in class qupath.lib.gui.tools.GuiTools. Create a Button with a standardized icon and tooltip text to indicate 'More', ; which triggers a ContextMenu when clicked. createMoveEventHandler() - Static method in class qupath.lib.gui.viewer.tools.handlers.PathToolEventHandlers;  ; createNewAnnotation(MouseEvent, double, double) - Method in class qupath.lib.gui.viewer.tools.handlers.BrushToolEventHandler. Create a new annotation and set it in the current viewer. c",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:197936,monitor,monitor,197936,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['monitor'],['monitor']
Energy Efficiency,"bStain - ; od_lut_red - ; od_lut_green - ; od_lut_blue - ; Returns:. getStainProjection; public static float getStainProjection(int rgb,; double rStain,; double gStain,; double bStain,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue); Calculate magnitude of projection of pixel OD onto stain OD. Parameters:; rgb - ; rStain - ; gStain - ; bStain - ; od_lut_red - ; od_lut_green - ; od_lut_blue - ; Returns:. opticalDensitySum; public static float opticalDensitySum(int rgb,; double[] od_lut); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut - lookup table to aid with fast optical density calculations; Returns:. opticalDensitySum; public static float opticalDensitySum(int rgb,; double[] od_lut_red,; double[] od_lut_green,; double[] od_lut_blue); Extract optical density sum value from a packed RGB pixel. Parameters:; rgb - ; od_lut_red - red lookup table to aid with fast optical density calculations; od_lut_green - green lookup table to aid with fast optical density calculations; od_lut_blue - blue lookup table to aid with fast optical density calculations; Returns:. rgbMean; public static float rgbMean(int rgb); Extract mean of RGB values from a packed RGB pixel. Parameters:; rgb - ; Returns:. redChromaticity; public static float redChromaticity(int rgb); Extract red chromaticity value from a packed RGB pixel, red / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenChromaticity; public static float greenChromaticity(int rgb); Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). Parameters:; rgb - ; Returns:. blueChromaticity; public static float blueChromaticity(int rgb); Extract blue chromaticity value from a packed RGB pixel, blue / max(1, red + green + blue). Parameters:; rgb - ; Returns:. greenOverBlue; public static float greenOverBlue(int rgb); Extract green over blue value from a packed RGB pixel, green / max(1, blue). Parameters:; rgb - ; Returns:. brow",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html:9848,green,green,9848,javadoc/docs/qupath/lib/color/ColorTransformer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorTransformer.html,1,['green'],['green']
Energy Efficiency,"be 1, 2 or 3 ; (because color deconvolution on a 3-channel image can recover [to some extent] up to 3 stains).; ; If only 2 stains are set (i.e. stain1 and stain2), then a third stain is computed; orthogonal to the first two, with the name 'residual'. Parameters:; n - ; Returns:; The requested stain vector, or null if n is out of range or the stain was not set. getStains; public Collection<StainVector> getStains(boolean includeResidual); Get a collection of all the stains. Parameters:; includeResidual - if true, include residual stains in the list. If false, only include non-residual stains.; Returns:; a collection of stains. getName; public String getName(); Get the stains name. Returns:. getStainNumber; public int getStainNumber(StainVector stain); Get the number for a specific stain (1, 2 or 3). Parameters:; stain - ; Returns:. getMaxRed; public double getMaxRed(); Get the maximum value for the red channel (default = 255). Returns:. getMaxGreen; public double getMaxGreen(); Get the maximum value for the green channel (default = 255). Returns:. getMaxBlue; public double getMaxBlue(); Get the maximum value for the blue channel (default = 255). Returns:. getMatrixInverse; public double[][] getMatrixInverse(); Get matrix inverse, as useful for color deconvolution.; See static ColorDeconvolution classes for usage. Returns:. toString; public String toString(). Overrides:; toString in class Object. getColorDeconvolutionStainsAsString; public static String getColorDeconvolutionStainsAsString(ColorDeconvolutionStains stains,; int nDecimalPlaces); Get a String representation of the stains and background. Parameters:; stains - ; nDecimalPlaces - ; Returns:; See Also:. parseColorDeconvolutionStainsArg(String). parseColorDeconvolutionStainsArg; public static ColorDeconvolutionStains parseColorDeconvolutionStainsArg(String s); Parse color deconvolution stains from a JSON String, with keys 'Stain 1', 'Stain 2', (optionally) 'Stain 3' and 'Background'. Parameters:; s - ; Returns:",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html:9549,green,green,9549,javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorDeconvolutionStains.html,1,['green'],['green']
Energy Efficiency,"ble downsampleFactor). Convert a QuPath ROI to an ImageJ Roi for an image with the specified calibration. static <T extends PathImage<ImagePlus>>Roi; convertToIJRoi(ROI pathROI,; T pathImage). Create an ImageJ Roi from a ROI, suitable for displaying on the ImagePlus of an PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(String title,; ImageServer<BufferedImage> server,; BufferedImage img,; RegionRequest request). Convert a BufferedImage into a PathImage<ImagePlus>. static PathImage<ImagePlus>; convertToImagePlus(ImageServer<BufferedImage> server,; RegionRequest request). Read a region from an ImageServer<BufferedImage as a PathImage<ImagePlus>. static ImageProcessor; convertToImageProcessor(BufferedImage img,; int band). Extract pixels as an an ImageProcessor from a single band of a BufferedImage. static FloatProcessor; convertToOpticalDensitySum(ColorProcessor cp,; double maxRed,; double maxGreen,; double maxBlue). Calculate optical density values for the red, green and blue channels, then add these all together. static PathObject; convertToPathObject(Roi roi,; double xOrigin,; double yOrigin,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Create a PathObject for a specific ImageJ Roi. static PathObject; convertToPathObject(Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlus imp). Create a PathObject for a specific ImageJ Roi, using an ImagePlus to help set properties. static PathObject; convertToPathObject(ImagePlus imp,; ImageServer<?> server,; Roi roi,; double downsampleFactor,; Function<ROI,PathObject> creator,; ImagePlane plane). Deprecated.; use instead convertToPathObject(Roi, double, double, double, Function, ImagePlane). static PolygonROI; convertToPolygonROI(PolygonRoi roi,; Calibration cal,; double downsampleFactor,; ImagePlane plane). Convert an ImageJ PolygonRoi to a QuPath PolygonROI. static ROI; convertToROI(Roi roi,; double xOrigin,; double yOrigin,; double downsampl",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html:4412,green,green,4412,javadoc/docs/qupath/imagej/tools/IJTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/imagej/tools/IJTools.html,1,['green'],['green']
Energy Efficiency,"bly derived from the base name.; ; Currently, names are generated in the form ""base (i)"" where i is an integer.; ; Note that if the base already has the same form, any existing integer will be stripped away; ; for example providing ""name (1)"" as the base will yield the output ""name (2)"", ; (assuming this name does not already exist), rather than ""name (1) (1)"". Parameters:; base - the (non-empty) base from which the name should be derived; existingNames - a collection of names that are already in use, and therefore must be avoided; Returns:; the distinct name. estimateAvailableMemory; public static long estimateAvailableMemory(); Estimate the current available memory in bytes, based upon the JVM max and the memory currently used.; ; This may be used to help determine whether a memory-hungry operation should be attempted. Returns:; the estimated unused memory in bytes. estimateUsedMemory; public static long estimateUsedMemory(); Estimate the current used memory. Returns:; the estimated allocated memory in bytes. smartStringSort; public static <T> void smartStringSort(Collection<T> collection); Smart-sort a collection using the Object.toString() method applied to each element.; See smartStringSort(Collection, Function) for more details. Type Parameters:; T - ; Parameters:; collection - collection to be sorted (results are retained in-place); See Also:. smartStringSort(Collection, Function). smartStringSort; public static <T> void smartStringSort(Collection<T> collection,; Function<T,String> extractor); Smart-sort a collection after extracting a String representation of each element.; This differs from a 'normal' sort by splitting the String into lists of numeric and non-numeric parts,; and comparing corresponding elements separately.; This can sometimes give more intuitive results than a simple String sort, which would treat ""10"" as ; 'less than' ""2"".; ; For example, applying a simple sort to the list [""a1"", ""a2"", ""a10""] will result in ; [""a1"", ""a10"", ""a2]. Smart-sorti",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/GeneralTools.html:21552,allocate,allocated,21552,javadoc/docs/qupath/lib/common/GeneralTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/GeneralTools.html,1,['allocate'],['allocated']
Energy Efficiency,"c static final Integer MASK_BLUE; Mask for use when extracting the blue component from a packed (A)RGB int value. Method Details. makeRGB; @Deprecated; public static int makeRGB(int r,; int g,; int b); Deprecated.; Use packRGB(int, int, int) or packClippedRGB(int, int, int) instead. Make a packed RGB value from specified input values.; ; Input r, g and b should be in the range 0-255 - but no checking is applied.; Rather, the input values are simply shifted as they are.; ; The alpha value is 255. Parameters:; r - ; g - ; b - ; Returns:. packRGB; public static int packRGB(int r,; int g,; int b); Make a packed RGB value from specified input values.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255; only the lower 8 bits are used. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; See Also:. packClippedRGB(int, int, int). unpackRGB; public static int[] unpackRGB(int rgb); Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackRGB; public static int[] unpackRGB(int rgb,; int[] array); Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb); Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb,; int[] array); Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the alpha, red, green and blue values in array if provided and long enough",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:5969,green,green,5969,javadoc/docs/qupath/lib/common/ColorTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html,1,['green'],['green']
Energy Efficiency,"c static Color getCachedColor(Integer rgb,; boolean hasAlpha); Get cached color, explicitly stating whether alpha should be included or not. Parameters:; rgb - ; hasAlpha - ; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain,; boolean whiteBackground); Get an IndexColorModel representing a color deconvolution stain.; The color is just an approximation for visualization purposes, it does not perfectly match the stain itself. Parameters:; stain - the stain to use; whiteBackground - if true, the color model will have a white background; if false, it will have a black background; Returns:. createIndexColorModel; public static IndexColorModel createIndexColorModel(int red,; int green,; int blue,; boolean whiteBackground); Get an IndexColorModel representing a linear LUT based on a RGB color. Parameters:; red - the red value of the color for the maximum value; green - the green value of the color for the maximum value; blue - the blue value of the color for the maximum value; whiteBackground - if true, the color model will have a white background; if false, it will have a black background; Returns:. getIndexColorModel; public static IndexColorModel getIndexColorModel(StainVector stain); Create an IndexColorModel, ranging from white (low values) to a stain vector color (high values). Parameters:; stain - ; Returns:. getMoreTranslucentColor; public static Color getMoreTranslucentColor(Color color); Get a (slightly more) translucent version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:; See Also:. getTranslucentColor(java.awt.Color). darkenColor; public static Color darkenColor(Color color); Get a (slightly) darker version of the specified color.; ; If possible, a cached version will be used. Parameters:; color - ; Returns:. getTranslucentColor; public static Color getTranslucentColor(Color color); Get a (slightly) translucent version of the specified color.; ; If possible,",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html:4783,green,green,4783,javadoc/docs/qupath/lib/color/ColorToolsAwt.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/color/ColorToolsAwt.html,2,['green'],['green']
Energy Efficiency,"ce index.; ; Default is 0 if the image it relates to is not a z-stack. Specified by:; getZ in interface ROI; Returns:. getT; public int getT(); Description copied from interface: ROI; Get time point index.; ; Default is 0 if the image it relates to is not a time series. Specified by:; getT in interface ROI; Returns:. getC; public int getC(); Description copied from interface: ROI; Get channel index, or -1 if the ROI relates to all available channels.; ; (This is not currently used, but may be in the future). Specified by:; getC in interface ROI; Returns:. isEmpty; public boolean isEmpty(); True if the bounding box has zero area. Specified by:; isEmpty in interface ROI; Returns:. toString; public String toString(). Overrides:; toString in class Object. getNumPoints; public int getNumPoints(); Default implementation, calls ROI.getAllPoints() and then caches the result.; Subclasses may override for efficiency. Specified by:; getNumPoints in interface ROI; Returns:. isLine; public boolean isLine(); Description copied from interface: ROI; Returns true if this ROI consists of line segments and does not enclose an area. Specified by:; isLine in interface ROI; Returns:. isArea; public boolean isArea(); Description copied from interface: ROI; Returns true if this ROI encloses an area. Specified by:; isArea in interface ROI; Returns:. isPoint; public boolean isPoint(); Description copied from interface: ROI; Returns true if this ROI represents distinct (unconnected) points. Specified by:; isPoint in interface ROI; Returns:. getConvexHull; public ROI getConvexHull(); Default implementation using JTS. Subclasses may replace this with a more efficient implementation. Specified by:; getConvexHull in interface ROI; Returns:. getSolidity; public double getSolidity(); Description copied from interface: ROI; Calculate the solidity, defined as ROI area / convex hull area.; Returns Double.NaN if the ROI does not represent an area. Specified by:; getSolidity in interface ROI; Returns:. ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html:12795,efficient,efficient,12795,javadoc/docs/qupath/lib/roi/AreaROI.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/roi/AreaROI.html,3,['efficient'],['efficient']
Energy Efficiency,"cified PathClasses. EXCLUDE_MEASUREMENTS - Enum constant in enum class qupath.lib.io.PathIO.GeoJsonExportOptions. Optionally exclude measurements from objects. excludeColumns(String...) - Method in class qupath.lib.gui.tools.MeasurementExporter. Specify the columns that will be excluded during the export. ExecutableLanguage - Interface in qupath.lib.scripting.languages. Functional interface for scripting languages that are runnable (e.g. execute(ScriptParameters) - Method in class qupath.lib.gui.scripting.languages.DefaultScriptLanguage;  ; execute(ScriptParameters) - Method in class qupath.lib.gui.scripting.languages.MarkdownLanguage;  ; execute(ScriptParameters) - Method in interface qupath.lib.scripting.languages.ExecutableLanguage. Execute the given script String. EXISTS - Enum constant in enum class qupath.lib.io.UriUpdater.UriStatus. URI refers to a file that is known to exist. exp() - Static method in class qupath.opencv.ops.ImageOps.Core. Create an op that returns Euler's number e raise to the power of the Mat values. EXPAND_ANNOTATIONS - Variable in class qupath.lib.gui.actions.menus.ObjectsMenuActions.AnnotationActions;  ; expandableContent(Node) - Method in class qupath.lib.gui.dialogs.Dialogs.Builder. Deprecated.; Specify a Node to display within the dialog as expandable content, not initially visible. expandChartClip(Chart, double) - Static method in class qupath.lib.gui.charts.ChartTools. Expand the clip region for a chart. expandToWindowProperty() - Method in class qupath.lib.gui.panes.SimpleImageViewer. Get the property indicating whether the image should grow to fill the window (while maintaining its; aspect ratio). EXPORT - Variable in class qupath.lib.gui.actions.menus.MeasureMenuActions.Actions;  ; EXPORT_GEOJSON - Variable in class qupath.lib.gui.actions.menus.FileMenuActions.Actions;  ; EXPORT_IMAGE_LIST - Variable in class qupath.lib.gui.actions.menus.FileMenuActions.ProjectActions;  ; EXPORT_ORIGINAL - Variable in class qupath.lib.gui.actions.",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:287526,power,power,287526,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['power'],['power']
Energy Efficiency,"cified by:; getDownsampleForResolution in interface ImageServer<T>; Parameters:; level - Resolution level, should be 0 <= level < nResolutions().; Returns:. close; public void close(); throws Exception. Specified by:; close in interface AutoCloseable; Throws:; Exception. nResolutions; public int nResolutions(); Description copied from interface: ImageServer; Number of resolutions for the image.; ; This is equivalent to getPreferredDownsamples().length. Specified by:; nResolutions in interface ImageServer<T>; Returns:. getPreferredDownsamples; public double[] getPreferredDownsamples(); Request the preferred downsamples from the image metadata.; ; Note that this makes a defensive copy of the array, so it is generally preferable to use ; #getDownsampleForResolution(int) where possible. Specified by:; getPreferredDownsamples in interface ImageServer<T>; Returns:; See Also:. getDownsampleForResolution(int). isRGB; public boolean isRGB(); Description copied from interface: ImageServer; True if the image has 8-bit red, green & blue channels (and nothing else), false otherwise. Specified by:; isRGB in interface ImageServer<T>; Returns:. getPixelType; public PixelType getPixelType(); Description copied from interface: ImageServer; The bit-depth and type of the image. This refers to a single channel, e.g. an ; 8-bit RGB image will have a type of PixelType.UINT8. Specified by:; getPixelType in interface ImageServer<T>; Returns:. finalize; protected void finalize(); throws Throwable; Attempt to close the server. While not at all a good idea to rely on this, it may help clean up after some forgotten servers. Overrides:; finalize in class Object; Throws:; Throwable. isEmptyRegion; public boolean isEmptyRegion(RegionRequest request); Always returns false. Specified by:; isEmptyRegion in interface ImageServer<T>; Parameters:; request - ; Returns:. toString; public String toString(). Overrides:; toString in class Object. getCachedTile; public T getCachedTile(TileRequest tile); Get a ",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html:6781,green,green,6781,javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/AbstractImageServer.html,1,['green'],['green']
Energy Efficiency,"ckRGB(int rgb); Unpack a packed (A)RGB int into red, green and blue values, ; returning the result as a 3-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackRGB; public static int[] unpackRGB(int rgb,; int[] array); Unpack a packed (A)RGB int into red, green and blue values, ; into a 3-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb); Unpack a packed ARGB int into red, green and blue values, ; returning the result as a 4-element int array. Parameters:; rgb - ; Returns:; Since:; v0.4.0. unpackARGB; public static int[] unpackARGB(int rgb,; int[] array); Unpack a packed ARGB int into red, green and blue values, ; into a 4-element int array. Parameters:; rgb - ; array - optional preallocated input array; Returns:; the alpha, red, green and blue values in array if provided and long enough, ; otherwise a new int array storing the values; Since:; v0.4.0. packClippedRGB; public static int packClippedRGB(int r,; int g,; int b); Make a packed RGB value from specified input values, clipping to the range 0-255.; This is equivalent to an ARGB value with alpha set to 255, following Java Color.; ; Input r, g, and b should be in the range 0-255, but if they are not they are clipped to the closest valid value. Parameters:; r - ; g - ; b - ; Returns:; packed ARGB value; // * @see #packRGB(int, int, int). makeRGBA; @Deprecated; public static int makeRGBA(int r,; int g,; int b,; int a); Deprecated.; The naming and order of arguments is misleading. The output is a packed ARGB value, ; but arguments are provided in the order red, green, blue, alpha. Make a packed ARGB value from specified input values.; ; Input r, g, b and a should be in the range 0-255 - but no checking is applied.; Rather, the input values are simply shifted as they are. Pa",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html:6902,green,green,6902,javadoc/docs/qupath/lib/common/ColorTools.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/qupath/lib/common/ColorTools.html,1,['green'],['green']
Energy Efficiency,"classifications. grayscale(boolean) - Method in class qupath.lib.images.servers.LabeledImageServer.Builder. Optionally use grayscale LUT, rather than deriving colors from classifications. GRAYSCALE - Enum constant in enum class qupath.lib.display.ChannelDisplayMode. Show using a grayscale LUT (black to white). greaterThan(ImageProcessor, ImageProcessor) - Static method in class qupath.imagej.processing.SimpleThresholding. Created a binary image by thresholding pixels to find where ip1 > ip2. greaterThanOrEqual(ImageProcessor, ImageProcessor) - Static method in class qupath.imagej.processing.SimpleThresholding. Created a binary image by thresholding pixels to find where ip1 >= ip2. green(int) - Static method in class qupath.lib.common.ColorTools. Extract the 8-bit green value from a packed RGB value. Green - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green channel only. GREEN - Static variable in class qupath.lib.common.ColorTools. Packed int representing green. GREEN - Static variable in class qupath.lib.images.servers.ImageChannel. Default green channel for RGB images. Green_chromaticity - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green chromaticity value, green / max(1, red + green + blue). Green_divided_by_blue - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green value divided by blue value. Green_OD - Enum constant in enum class qupath.lib.color.ColorTransformer.ColorTransformMethod. Green channel optical densities. greenChromaticity(int) - Static method in class qupath.lib.color.ColorTransformer. Extract green chromaticity value from a packed RGB pixel, green / max(1, red + green + blue). greenOverBlue(int) - Static method in class qupath.lib.color.ColorTransformer. Extract green over blue value from a packed RGB pixel, green / max(1, blue). GRID - Enum constant in enum class qupath.lib.gui.tools.IconFactory.PathIcons;  ; GRID_ANNOTATIONS - V",MatchSource.WIKI,qupath,qupath,v0.5.1,https://qupath.github.io/javadoc/docs/index-all.html:559321,green,green,559321,javadoc/docs/index-all.html,https://qupath.github.io,https://qupath.github.io/javadoc/docs/index-all.html,1,['green'],['green']
