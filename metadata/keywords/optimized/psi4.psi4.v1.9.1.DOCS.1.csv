quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"with the prerequisite steps for running calculations.; Sec. :ref:`Tutorial <sec:tutorial>` provides a brief tutorial to help new users; get started. Section :ref:`Psithon <sec:psithonInput>` offers further details into the; structure of |PSIfour| input files and how Python can be mixed with; quantum chemistry directives in |PSIfour|. Section :ref:`Psithon Functions <sec:psithonFunc>`; provides more detail on the Python functions provided by |PSIfour|; and discusses some of the higher-level functions such as counterpoise; correction, complete-basis-set extrapolation, and running computations; on an entire database of molecules at a time. Later sections deal with; the different types of computations which can be done using |PSIfour|; (*e.g.*, Hartree |--| Fock, MP2, coupled-cluster) and general procedures; such as geometry optimization and vibrational frequency analysis.; The :ref:`Appendices <sec:appendices>` include a complete description of all possible input; keywords for each module, as well as tables of available basis sets and; a listing of the sample input files available under :source:`samples`.; The user is urged to examine this directory of sample inputs, as; most common types of computations are represented there.; For the latest |PSIfour| documentation, check; `www.psicode.org <http://www.psicode.org>`_. Citing |PSIfour|; ================. Overall |PSIfour| Package; ^^^^^^^^^^^^^^^^^^^^^^^^^. The following citation should be used in any publication utilizing the; |PSIfour| program package:. * ""Psi4 1.4: Open-Source Software for High-Throughput Quantum Chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C.; Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A.; M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B.; Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M.; Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F.; Schaefer III, A. Yu. Sokolov, K. Patkow",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:3899,avail,available,3899,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,2,['avail'],['available']
Availability,"with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:19760,down,downloaded,19760,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['down'],['downloaded']
Availability,"wn to steady oscillation between two (or more); different total energies. This behavior can be ameliorated by choosing occupied; orbitals by ""shape"" instead of by orbital eigenvalue, *i.e.*, by choosing the set; of new orbitals which looks most like some previously known ""good"" set. The; ""good"" set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations :math:`N,N+2,\ldots`, invoking; |scf__mom_start| ``N`` can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent; iterations can quench oscillations. This mixing, known as; ""damping"" can be activated by setting the; |scf__damping_percentage| keyword to a nonzero percent. Damping is; turned off when the DIIS error is smaller than; |scf__damping_convergence|.; Level shifting [Off by default]; A commonly used alternative to damping is to use level shifting,; which decreases the mixing of occupied and unoccupied orbitals in; the SCF update by moving the unoccupied orbitals up in energy. It; can be shown that the SCF procedure always converges with a; suitably large level shift; however, the larger the shift is, the; slower the convergence becomes, and the calculation may end up; converging onto a higher lying SCF solution. Because of this, in; practice level shifting is most useful in the initial phase of the; calculation to reduce the orbital error enough for DIIS to work; well. The level shift is controlled by the parameter; |scf__level_shift|, and it is turned off when the DIIS error is; smaller than |scf__level_shift_cutoff|. Reasonable values for; the shift and convergence threshold are 5.0 and 1e-2,; respectively.; SOSCF [Off by Default]; See :ref:`sec:soscf`. .. _`sec:scferi`:. ERI Algorithm",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:26798,error,error,26798,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['error'],['error']
Availability,"wnload one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:4531,down,download,4531,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['down'],['download']
Availability,"x and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dft",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:7445,down,download,7445,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,2,"['avail', 'down']","['available', 'download']"
Availability,"xact block diagonalization for the one-electron Dirac; Hamiltonian,""; L. Cheng and J. Gauss, *J. Chem. Phys.* **135**, 084114 (2011).; (doi: `10.1063/1.3624397 <https://doi.org/10.1063/1.3624397>`_). Implementation within Psi4. * ""Predicting Near Edge X-ray Absorption Spectra with the Spin-Free; Exact-Two-Component Hamiltonian and Orthogonality Constrained Density; Functional Theory,""; P. Verma, W. D. Derricotte and F. A. Evangelista,; *J. Chem. Theory Comput.* (2015).; (doi: `10.1021/acs.jctc.5b00817 <https://doi.org/10.1021/acs.jctc.5b00817>`_). .. index:: architectures; .. index:: compilers. Supported Systems; =================. Architectures; The majority of |PSIfour| was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; |PSIfour| program package may be obtained at `psicode.org <http://psicode.org>`_.; The package is available as a binary (:ref:`Installing from Binary; <sec:conda>`) for Linux, macOS (both Intel and Apple Silicon), or Windows (both native and via Windows Subsystem for; Linux aka `Bash on Ubuntu on Windows; <https://docs.microsoft.com/en-us/windows/wsl/about>`_); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4.; Compilers; |PSIfour| has been successfully compiled using Intel, GCC, and Clang; compilers. :ref:`Compiler requirements <faq:approvedcxx>` are primarily; C++17 compliance (now GCC version 7.0 or above).; For some architectures, a :ref:`precompiled binary; <sec:conda>` is available. See :ref:`Compiling and Installing; <sec:installFile>` for details.; Python; |PSIfour| 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; `in accordance with other scientific software projects; <https://python3statement.org/>`_).; |PSIfour| 1.3 supports Python 3.6 and 3.7.; |PSIfour| 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; |PSIfour| 1.5 supports Python 3.7, 3.8, and 3.9.; |PSIfour| 1.6 supports Python 3.8, 3",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:26954,avail,available,26954,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['avail'],['available']
Availability,"xible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten; and Cfour module keyword trumps |PSIfour| SCF module keyword ::. set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the :ref:`Cfour module<apdx:cfour>` along with; |mints__basis| and |globals__puream| (opt, too?). Misc. Running; ~~~~~~~~~~~~~. Naturally, in |PSIfour| multiple jobs can be run in succession from the input file. Control optimizations with optking keywords HERE. Cfour ``GRD`` file is; written to |PSIfour| output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the |PSIfour|; output file and is available from input as :py:func:`~psi4.core.Wavefunction.gradient`. sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the ``cfour {...}`` block are tacked onto; the end of the ``ZMAT`` file that is otherwise written from psi style; format. It is by this route that, for example ``%excite*`` sections can at; present be specified. The execution of :program:`xcfour` can be modified by a few parameters. Setting; the option |cfour__cfour_omp_num_threads| sets the environment variable; :envvar:`OMP_NUM_THREADS` for only the duration of the Cfour computation.; That is, portions of an input file that run |PSIfour| modules are; unaffected. Additi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:41289,avail,available,41289,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['avail'],['available']
Availability,"xt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. -----------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:9935,mainten,maintenance,9935,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['mainten'],['maintenance']
Availability,"y S. Grimme; =============================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Samples <apdx:testSuitegcp>`. .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:2086,avail,available,2086,doc/sphinxman/source/gcp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst,1,['avail'],['available']
Availability,"y default, Psi will start using ADIIS before blending the ADIIS step with; the DIIS step, eventually using the pure DIIS step. The closely-related EDIIS procedure; may be used instead by setting |scf__scf_initial_accelerator|. This is formally identical; to ADIIS for HF, but the methods will differ for more general DFT.; MOM [Off by Default]; MOM was developed to combat a particular class of convergence failure:; occupation flipping. In some cases, midway though the SCF procedure, a partially; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbital which should be; destined to be a virtual orbital. This results in the virtual orbital being; spuriously occupied for one or more iterations. Sometimes this resolves itself; without help, other times the occupation flips back and forth between two, four,; or more orbitals. This is typically visible in the output as a non-converging; SCF which eventually settles down to steady oscillation between two (or more); different total energies. This behavior can be ameliorated by choosing occupied; orbitals by ""shape"" instead of by orbital eigenvalue, *i.e.*, by choosing the set; of new orbitals which looks most like some previously known ""good"" set. The; ""good"" set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations :math:`N,N+2,\ldots`, invoking; |scf__mom_start| ``N`` can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent; iterations can quench oscillations. This mixing, known as; ""damping"" can be activated by setting the; |scf__damping_percentage| keyword to a nonzero percent. Damping is; turned off when the D",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:25802,down,down,25802,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['down'],['down']
Availability,"y occ'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note': ''}; {'module': 'psi4', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd gradients by occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'fd', 'note': ''}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'fd', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'gradi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:291389,error,error,291389,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['error'],['error']
Availability,"y-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://suppo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10008,down,download,10008,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['down'],['download']
Availability,"ybind11_extension(core); if(NOT MSVC AND NOT ${CMAKE_BUILD_TYPE} MATCHES Debug|RelWithDebInfo); # Strip unnecessary sections of the binary on Linux/macOS; pybind11_strip(core); endif(); set_target_properties(core PROPERTIES CXX_VISIBILITY_PRESET ""hidden"" VISIBILITY_INLINES_HIDDEN 1). ### >> Go into psi4 subdirectory to compile libraries and modules <<; add_subdirectory(psi4). ####################################################################; ### >> Merge libraries and modules into master psi4 library <<; ### >> We also add in versioning, settings for plugins, and; ### >> exports for Python here. target_sources(core; PRIVATE; export_benchmarks.cc; export_blas_lapack.cc; export_cubeprop.cc; export_dpd.cc; export_fock.cc; export_functional.cc; export_misc.cc; export_oeprop.cc; export_pcm.cc; export_plugins.cc; export_psio.cc; export_trans.cc; export_wavefunction.cc; export_options.cc; create_new_plugin.cc; read_options.cc; python_data_type.cc; ). # need to down-standard the Libint2 connection from c++17 for Intel as of 2021.4; # See note at psi4/src/psi4/libmints/CMakeLists.txt; add_library(l2export OBJECT export_mints.cc); set_property(TARGET l2export PROPERTY CXX_STANDARD ""${psi4_CXX_STANDARD_Libint2}""); set_property(TARGET l2export PROPERTY POSITION_INDEPENDENT_CODE ON); target_include_directories(l2export; PRIVATE; $<TARGET_PROPERTY:Libint2::cxx,INTERFACE_INCLUDE_DIRECTORIES>; ); target_link_libraries(; l2export; PRIVATE; pybind11::headers; ); if(MSVC); target_link_libraries(; l2export; PRIVATE; pybind11::windows_extras; ); endif(); target_link_libraries(core PRIVATE l2export); target_compile_definitions(core; PRIVATE; psi4_SHGSHELL_ORDERING=${psi4_SHGSHELL_ORDERING}; ); target_compile_definitions(l2export; PRIVATE; psi4_SHGSHELL_ORDERING=${psi4_SHGSHELL_ORDERING}; ). # set_target_properties(core; # PROPERTIES; # implicit in pybind11_add_module; # CXX_VISIBILITY_PRESET hidden; # implicit in add_library MODULE called by pybind11_add_module; # POSITION_INDEPENDENT",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/CMakeLists.txt:1339,down,down-standard,1339,psi4/src/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/CMakeLists.txt,1,['down'],['down-standard']
Availability,"you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__vers",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:13133,down,downloads,13133,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['down'],['downloads']
Availability,"ype': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no uhf cisd by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no uhf cisd by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'fci', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'fci', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'fci', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaul",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:172301,error,error,172301,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['error'],['error']
Availability,"ype': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'mod",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:226432,error,error,226432,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['error'],['error']
Availability,"ype': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': ''}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=ccenergy for conv rhf/uhf gradients for ccsd(t) by ccenergy until scaling reworked'}; {'module': 'psi4-ccenergy', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc gradients by ccenergy'}; {'module': 'psi4-ccenergy', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'gradient', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_typ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:154752,error,error,154752,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['error'],['error']
Availability,"ype': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no uhf by detci'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no uhf by detci'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no uhf by detci'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no uhf by detci'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no uhf by detci'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no uhf by detci'}; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:528877,error,error,528877,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,5,['error'],['error']
Availability,"ype': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'gradient', 'method': 'svwn', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'gradient', 'method': 'svwn', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'gradient', 'method': 'svwn', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd scf gradients to underlie post-scf'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note': ''}; {'module': 'psi4', 'driver': 'gradient', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd scf gradients to underlie post-scf'}; {'module': 'psi4-scf', 'driver': 'gradient', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note':",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:504888,error,error,504888,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['error'],['error']
Availability,"ype': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp3', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp3', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp3', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:303995,error,error,303995,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['error'],['error']
Availability,"ype| with possible values ``total``; (the default) or ``separate``.; The latter forces the separate handling of nuclear and electronic electrostatic potentials and; polarization charges. It is mainly useful for debugging. For the calculation of vertical excitation energies with PCM non-equilibrium solvation should be included with: ::. pcm = {; Medium {; Nonequilibrium = True; }; }. .. note:: At present PCM can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: The PCMSolver library **cannot** exploit molecular point group symmetry. .. warning:: ROHF with PCM is known **not to work**. See `issue #999 on GitHub <https://github.com/psi4/psi4/issues/999>`_.; For the adventurous, a fix is available in `pull request #953 on GitHub <https://github.com/psi4/psi4/pull/953>`_. .. warning:: Analytic gradients and Hessians **are not** available with PCM. Finite differences will be used; regardless of the ``dertype`` passed to the ``optimize`` function.; See :srcsample:`pcmsolver/opt-fd` for a sample input. The PCM model and molecular cavity are specified in a ``pcm`` section that has; to be explicitly typed in by the user. This additional section follows a syntax; that is slightly different from that of |Psifour| and is fully documented; `here <http://pcmsolver.readthedocs.io/en/latest/users/input.html>`_. A typical input for a Hartree--Fock calculation with PCM would look like the following: ::. molecule NH3 {; symmetry c1; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; units bohr; no_reorient; no_com; }. set {; basis STO-3G; scf_type pk; pcm true; pcm_scf_type tot",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst:5011,avail,available,5011,doc/sphinxman/source/pcmsolver.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst,1,['avail'],['available']
Availability,"yword is ""frozen_bend"". * To freeze the cartesian coordinates of atom 2. .. code-block:: none. freeze_list = """"""; 2 xyz; """"""; set optking frozen_cartesian $freeze_list. * To freeze only the y coordinates of atoms 2 and 3. .. code-block:: none. freeze_list = """"""; 2 y; 3 y; """"""; set optking frozen_cartesian $freeze_list. * To optimize toward a value of 0.95 Angstroms for the distance between ; atoms 1 and 3, as well as that between 2 and 4. .. code-block:: none. set optking {; ranged_distance = (""; 1 3 0.949 0.95; 2 4 0.949 0.95; ""); }. .. note:: ; The effect of the frozen and ranged keywords is generally independent of; how the geometry of the molecule was input (whether Z-matrix or Cartesian, etc.)..; At this time; however, enforcing Cartesian constraints when using a zmatrix for; molecular input is not supported. Freezing or constraining Cartesian coordinates; requires Cartesian molecule input. If numerical errors results in symmetry ; breaking, while Cartesian constraints are active, symmetrization cannot occur and; an error will be raised, prompting you to restart the job. * To scan the potential energy surface by optimizing at several fixed values; of the dihedral angle of HOOH. .. code-block:: none. molecule hooh {; 0 1; H 0.850718 0.772960 0.563468; O 0.120432 0.684669 -0.035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }; ; set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. lower_bound = [99.99, 109.99, 119.99, 129.99, 149.99]; upper_bound = [100, 110, 120, 130, 140, 150]; PES = []. for lower, upper in zip(lower_bound, upper_bound):; my_string = f""1 2 3 4 {lower} {upper}""; set optking ranged_dihedral = $my_string; E = optimize('scf'); PES.append((upper, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large incre",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:7635,error,errors,7635,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,2,['error'],"['error', 'errors']"
Availability,"{'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:14403,error,error,14403,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['error'],['error']
Availability,"{'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:14613,error,error,14613,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['error'],['error']
Availability,"{'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:19661,error,error,19661,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['error'],['error']
Availability,"{'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_typ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:486391,error,error,486391,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['error'],['error']
Availability,"| is; a cutoff for the value of basis functions at grid points. This keyword is; used to determine the radial extent of the each basis shell, and it is the; COSX analogue to |scf__dft_basis_tolerance|. The |scf__incfock| keyword (defaults to ``false``) increases performance; by constructing the Fock matrix from differences in the density matrix, which; are more amenable to screening. This option is disabled by default because of; potential SCF convergence issues, particularly when using diffuse basis functions.; The |scf__cosx_overlap_fitting| keyword (defaults to ``true``) reduces numerical; integration errors using the method described in [Izsak:2011:144105]_ and is; always recommended. .. _`sec:scflink`:. Linear Exchange; ~~~~~~~~~~~~~~~. Large SCF calculations can benefit from specialized screening procedures that further reduce the scaling of the ERI contribution to the Fock matrix.; LinK, the linear-scaling exchange method described in [Ochsenfeld:1998:1663]_, is available in Psi4 in conjunction with composite algorithms that build J (|globals__scf_type| set to ``J_alg+LINK``).; LinK achieves linear-scaling by exploiting shell pair sparsity in the density matrix and overlap sparsity between shell pairs. Specifically, LinK exploits the fact that the Exchange term; requires only a linear-scaling number of significant elements through reformulating the; shell quartet screening process to scale linearly with system size.; LinK is most competitive when used with non-diffuse orbital basis sets, since orbital and density overlaps decay slower with diffuse functions.; LinK is especially powerful when combined with density-matrix based ERI screening (set |globals__screening| to ``DENSITY``) and incremental Fock builds (set |scf__incfock| to ``TRUE``), which decrease the number of significant two-electron integrals to calculate. To control the LinK algorithm, here are the list of options provided.; ; |scf__linK_ints_tolerance|: The integral screening tolerance used for ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:41837,avail,available,41837,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['avail'],['available']
Availability,"|. Presently, topics are brought up on e-mail threads (where; discussion is very temporally localized and not everyone is aware of it; unless cc'd), are brought up at workshops (where people may be absent, no; record is left, and not everyone may have prepared a position on the; topic), or agreed between a couple people over g-chat (others remain; unaware of plans), or planned by someone (who may not have committed those; plans to a ticket or who wants general approval before restructuring the; code). Path of a PsiPEP; ----------------. * Someone creates a file ``doc/sphinxman/source/pepXXXX.rst`` modeled; on :source:`doc/sphinxman/source/pep0000model.rst` and adds; it to ``STATICDOC`` in :source:`doc/sphinxman/CMakeLists.txt`. The file; should have header fields modeled on another PsiPEP and a discussion of; the proposed change or practice. * Anyone can comment by adding sections to the bottom of the reST file.; Alternatively, e-mail discussions can go out and the (possibly edited); results be pasted into the bottom of the reST file once the furor dies; down. * Comments can be simple statements of agreement (useful for gauging; consensus), notation of possible problems, proposed re-writes of the; proposal, etc. Only the original author or his designate should change; the main body of the PsiPEP (to maintain a history). * Once there's agreement, file can be stamped final and be placed into; effect. (Yes, this is very vague.). Roles of a PsiPEP Include; -------------------------. * **Best practices or re-vamped best practices** . Practices can be easily linked- or referred-to by number and can be; tagged as obsolete by a single label change months later. * **Request/present viewpoint on organization**. Draw attention to organization needed in code outside one's area of; expertise. Request interface for some structure (*e.g.*, gradients) or; viewpoints on how that interface will behave to ensure compatibility.; Offer philosophy on how processes/definitions should be. *",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pep0001.rst:3164,down,down,3164,doc/sphinxman/source/pep0001.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pep0001.rst,1,['down'],['down']
Availability,"|scf__stability_analysis| | |globals__scf_type| |; +==================+==================+==============================================+===========================+=====================+; | | RHF | Internal, External (:math:`\rightarrow` UHF) | ``CHECK`` | PK only |; + +------------------+----------------------------------------------+---------------------------+---------------------+; | Direct Inversion | ROHF | Internal | ``CHECK`` | PK only |; +------------------+------------------+----------------------------------------------+---------------------------+---------------------+; | Davidson | UHF | Internal | ``CHECK`` or ``FOLLOW`` | Anything |; +------------------+------------------+----------------------------------------------+---------------------------+---------------------+. The best algorithm is automatically selected, *i.e.* Davidson for UHF :math:`\rightarrow` UHF and Direct Inversion otherwise. In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt |scf__follow_step_scale| to find a new SCF minimum. If |scf__max_attempts| > 1, additional attempts; will automatically increment |scf__follow_step_scale| by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting |scf__follow_step_increment|.; The default value is 0.2; adjust if needed to try different values of |scf__follow_step_scale| in a single computation. The Davidson solver for the eigenvalues is controlled through several keywords. |scf__solver_maxiter|: maximum number of iterations. |scf__solver_convergence|: eigenvector convergence threshold. |scf__solver_n_root|: Solve for N eigenvectors in each irreducible representation. |scf__solver_roots_per_irrep|: The number of eigenvectors to solve in each irreducible representation. An array of as many integers as there are irreducible representations. |scf__solver_n_guess|: Use N guess vectors, this needs to be larger than the number of roots ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:50191,avail,available,50191,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['avail'],['available']
Availability,"}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. :envvar:`PSIDATADIR` does *not* need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; :envvar:`PSIPATH` is needed only if you are using external modules or ; plugins in |PSIfour| and should point to the directories where they can be found. In the; present example, we make sure the variable is set with ``if ! ( $?PSIPATH ) setenv PSIPATH """"``; before adding more paths to it. Finally, :envvar:`PSI_SCRATCH` should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section :ref:`sec:threading`), we set ``-n4`` below.; The next step is then to actually run the computation: ::. /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:. .. code-block:: bash. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. .. _`sec:commandLineOptions`:. Command Line Options; ====================. |PSIfour| can be invoked with no command line arguments, as it takes as input; by default the file ""input.dat"" and directs output by default to ""output.dat"".; Each set of three commands below is completely equivalent, while the second set,; perhaps, is the most common usage. ::. >>> psi4; >>> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in; >>> psi4 -i descriptive_filename.in -o descriptive_filename.out; >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to |PSIfour| can be accessed through :option:`psi4 --help`. .. program:: psi4. .. option:: -a, --append. Append results to output file. Default: Truncate first. .. option:: -h, --help. Display the command-line opti",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:16913,echo,echo,16913,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['echo'],['echo']
Availability,"}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:487011,error,error,487011,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['error'],['error']
Availability,"}; {'module': 'psi4', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note': ''}; {'module': 'psi4', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd gradients by occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:290777,error,error,290777,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['error'],['error']
Availability,"◻ | |qc_module|\ =DFMP2 Capabilities |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | |scf__reference| → | Restricted (RHF) | Unrestricted (UHF) | Restricted Open (ROHF) |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | name ↓ → | ◻ | |energy_fn| | |gradient_fn|\ [#m3]_ | |energy_fn| | |gradient_fn|\ [#m3]_ | |energy_fn| | |gradient_fn|\ [#m3]_ |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | type\ [#m1]_ ↓ → | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD | CV | DF | CD |; + + +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | ◻ | |freeze_core|\ [#m2]_\ →| A F A F A F | A F A F A F | A F A F A F | A F A F A F | A F A F A F | A F A F A F |; +==========================+=========================+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+===+; | mp2\ [#m10]_ | |globals__mp2_type| | ✓̳ ✓̳ | ✓̳ ✓̳ | ✓̳ ✓̳ | | ✓̳ ✓̳ | |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#m1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#m2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#m3] Finite difference gradients are not marked explicitly by ""∷"", but the capability can be gleaned from the energy availability.; .. [#m10] Also available for DFT references RKS/UKS",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_dfmp2.rst:2528,avail,availability,2528,doc/sphinxman/source/preview_capabilities_dfmp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_dfmp2.rst,2,['avail'],"['availability', 'available']"
Deployability," ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 share/ & include/ >>>. install(DIRECTORY share/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4; MESSAGE_NEVER; PATTERN ""*.bin"" EXCLUDE; PATTERN ""*.pyc"" EXCLUDE). install(FILES share/psi4/quadratures/1_x/R_avail${_endian_ext}.bin; RENAME quadratures/1_x/R_avail.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(FILES share/psi4/quadratures/1_x/error${_endian_ext}.bin; RENAME quadratures/1_x/error.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(DIRECTORY include/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}/psi4). # <<< install external's share/ to psi4 share/ >>>. if(TARGET libefp::efp); # bring libefp's fraglib to PSIDATADIR's attention; set(_fraglib_in_psi4_dir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag). add_custom_target(consolidate_psidatadir ALL; VERBATIM; COMMAND ${CMAKE_COMMAND} -E make_directory ${_fraglib_in_psi4_dir}; COMMENT ""Symlink external resources into PSIDATADIR""). file(GLOB _dotefps ""${libefp_FRAGLIB_DIRS}/*.efp""); foreach(_dotefp ${_dotefps}); get_filename_component(_efpfile ${_dotefp} NAME); add_custom_command(TARGET consolidate_psidatadir; POST_BUILD; COMMAND ${CMAKE_COMMAND} -E create_symlink ${_dotefp} ${_fraglib_in_psi4_dir}/${_efpfile}); endforeach(); endif(). # <<< Export Config >>>. configure_file(psi4PluginCache.cmake.in psi4PluginCache.cmake @ONLY). install(FILES ${CMAKE_BINARY_DIR}/psi4PluginCache.cmake; ${PSI4_ROOT}/cmake/psi4OptionsTools.cmake; ${PSI4_ROOT}/cmake/custom_static_library.cmake; ${PSI4_ROOT}/cmake/custom_cxxstandard.cmake; ${PSI4_ROOT}/cmake/xhost.cmake; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:13285,install,install,13285,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability," # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. G",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18024,install,installation,18024,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installation']
Deployability," (*e.g.*, in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems. This is the default for; systems of more than one atom.; SADNO; Natural orbitals from Superposition of Atomic Densities. Similar; to the above, but it forms natural orbitals from the SAD density; matrix to get proper orbitals which are used to start the; calculation, see [Lehtola:2019:1593]_.; GWH; A generalized Wolfsberg-Helmholtz modification of the core; Hamiltonian matrix. Usually less accurate than the core guess: the; latter is exact for one-electron systems, GWH is not; see; [Lehtola:2019:1593]_).; HUCKEL; An extended H\ |u_dots|\ ckel guess based on on-the-fly atomic UHF; calculations alike SAD, see [Lehtola:2019:1593]_.; MODHUCKEL; Like HUCKEL, an extended H\ |u_dots|\ ckel guess based on; on-the-fly atomic UHF calculations alike SAD, see; [Lehtola:2019:1593]_. This variant employs an updated rule for the; generalized Wolfsberg-Helmholz formula from [Ammeter:1978:3686]_.; READ; Read the previous orbitals from a ``wfn`` file, casting from; one basis to another if needed. Useful for starting anion; computations from neutral orbitals, or after small geometry; changes. At present, casting from a different molecular point; group is not supported. This becomes the default for the second; and later iterations of geometry optimizations.; SAP; Superposition of Atomic Potentials. This is essentially a; modification of the core Hamiltonian, which includes screening; effects by using a radially screened effective atomic charge. The; screening effects have been calculated at the complete basis set; limit with finite-element calculations, see [Lehtola:2019:25945]_; and [Lehtola:2020:012516]_. The guess and its implementation have; been described in [Lehtola:2019:1593]_. The guess is evaluated on a; DFT quadrature grid, so the guess energy depends slightly on the; used DFT quadrature. The current implementation",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:20039,update,updated,20039,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['update'],['updated']
Deployability," (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulnerable to interference from your ``LD_LIBRARY_PATH`` settings. Below shows a well-linked executable.; ..; .. * no libraries ""not found""; .. * fundamental libraries like libc, ld-linux, pthreads found system libraries to link ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27871,install,install,27871,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability," (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding ``set; integral_package simint`` (do this in ``~/.psi4rc`` for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is ``$$(gg|gg)$$``. .. warning:: simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/simint/badges/version.svg; :target: https://anaconda.org/psi4/simint. * SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * The conda package is compiled to least-common-denominator, namely SSE instruction set. * If using the |PSIfour| binary, simint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; simint can be obtained through ``conda install simint -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_simint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect simint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. simint from conda without thinking, consult. * To remove a conda installation, ``conda remove simint``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/simint.svg?maxAge=2592000. .. :target: https://github.com/psi4/simint TODO BPP. * If using |PSIfour| built from source and you want simint built from; from source also,; enable it as a feature with :makevar:`ENABLE_simint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:simint`:. How to configure simint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, simint is",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst:2670,install,installed,2670,doc/sphinxman/source/simint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst,2,['install'],"['install', 'installed']"
Deployability," -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808; ; aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. .. index:: molecule; multiple in input file; .. _`sec:multipleMolecules`:. .. index::; triple: setting; keywords; molecule; pair: molecule; charge; pair: molecule; multiplicity; pair: molecule; symmetry; pair: molecule; no_reorient; pair: molecule; units; .. _`sec:moleculeKeywords`:. Molecule Keywords; =================. In addition to specifying the geometry, additional information can be; provided in the molecule block :samp:`molecule {optional_molecule_name} \\{...\\}`. **Charge & Multiplicity**; If two integers :samp:`{charge} {multiplicity}` are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (:math:`2 M_s + 1`), resp",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:3762,patch,patch,3762,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['patch'],['patch']
Deployability," -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:11603,deploy,deployments,11603,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['deploy'],['deployments']
Deployability," .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:buildrunfaq`:. ===============; Build & Run FAQ; ===============. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. Obtaining and Updating |PSIfour|; --------------------------------. #. :ref:`faq:obtainpsi4`; #. :ref:`faq:quiz`; #. :ref:`faq:binary`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public`; #. :ref:`faq:tarballpsi4public`; #. :ref:`faq:recompile`. .. #. :ref:`faq:psi3sourceforge`. Configuring and Installing |PSIfour| via Binary; -----------------------------------------------. #. :ref:`faq:psicodedownload`; #. :ref:`sec:psi4conda`; #. :ref:`faq:psi4pkg`; #. :ref:`faq:updatepsi4`; #. :ref:`faq:psi4deps`; #. :ref:`sec:condadetails`; #. :ref:`faq:condamaxameri`. Configuring, Building, and Installing |PSIfour| via Source; ----------------------------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setuppre",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:1217,install,install,1217,doc/sphinxman/source/build_faq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst,2,"['install', 'update']","['install', 'updated']"
Deployability," .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; -----------------------------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-psi4-dir}`. * ``cd {top-level-psi4-dir} && cmake -S. -Bobjdir``; * ``cd {top-level-psi4-dir} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24088,configurat,configuration,24088,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['configurat'],['configuration']
Deployability," .. image:: https://img.shields.io/badge/home-sns--mp2-5077AB.svg; :target: https://github.com/DEShawResearch/sns-mp2. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/DEShawResearch/sns-mp2/blob/master/README.md. This plugin is an implementation of the SNS-MP2 algorithm developed by McGibbon ; et. al. [McGibbon:2017:161725]_. The SNS-MP2 method uses neural networking to ; improve the accuracy of MP2 (:ref:`sec:dfmp2`) interaction energies for dimer molecules.; The plugin is distributed under the 2-clause BSD license. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/snsmp2/badges/version.svg; :target: https://anaconda.org/psi4/snsmp2. * snsmp2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the Psi4conda installer, snsmp2 has already been installed alongside. * If using the |PSIfour| conda package, the snsmp2 conda package can; be obtained through ``conda install snsmp2 -c psi4`` or ``conda install; psi4-rt -c psi4``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; snsmp2 can be obtained through ``conda install snsmp2 -c psi4``.; Then, hint its location with :envvar:`PYTHONPATH`. * To remove a conda installation, ``conda remove snsmp2``. **Source**. * .. image:: https://img.shields.io/github/tag/DEShawResearch/sns-mp2.svg?maxAge=2592000; :target: https://github.com/DEShawResearch/sns-mp2. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/DEShawResearch/sns-mp2. * Once dowloaded, the plugin can be installed as outlined in the documentation:. .. code-block:: bash. >>> cd {top-level-sns-mp2-directory}; >>> PSI4_PYTHON=$(head $(which psi4) -n 1 | sed -r 's/^.{2}//'); >>> $PSI4_PYTHON -m pip install . Sample Input; ~~~~~~~~~~~~. A sample input file, adapted from the documentation, i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_snsmp2.rst:2289,install,install,2289,doc/sphinxman/source/plugin_snsmp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_snsmp2.rst,2,['install'],['install']
Deployability," .. include:: autodir_options_c/globals__cubic_grid_spacing.rst; .. include:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument::; 	; 	python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for h",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:7776,install,installed,7776,doc/sphinxman/source/cubeprop.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst,1,['install'],['installed']
Deployability," .. include:: autodoc_abbr_options_c.rst. .. index:: adcc, ADC. .. _`sec:adcc`:. Interface to adcc by M. F. Herbst and M. Scheurer; =================================================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:adc>`, :ref:`PSI Variables <apdx:adc_psivar>`. .. image:: https://img.shields.io/badge/home-adcc-informational.svg; :target: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2026,install,installation,2026,doc/sphinxman/source/adcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst,1,['install'],['installation']
Deployability," .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is available in |PSIfour|.; The current implementation simply embeds Stone's GDMA code into the main; executable, and generates the appropriate input files automatically. The; program takes as input a data file, and a Gaussian formatted checkpoint (see; Section :ref:`FCHK <sec:fchk>`) file. The simplest usage of the GDMA code is; demonstrated below, along with a listing of the options supported; these; options correspond to the opti",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:2662,install,installation,2662,doc/sphinxman/source/gdma.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst,1,['install'],['installation']
Deployability," >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:2247,install,install,2247,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability," >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4898,configurat,configuration,4898,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['configurat'],['configuration']
Deployability," C -7.122781 1.059754 0.689090; H -7.226173 2.012097 -1.240759; H -6.687348 -2.253224 -1.259958; H -6.707325 -2.266920 1.222105; H -7.246150 1.998400 1.241304; O -6.944245 -0.111984 -2.805375; H -7.058224 0.807436 -3.049180; C -6.990227 -0.143507 2.907714; H -8.018305 -0.274985 3.264065; H -6.592753 0.807024 3.281508; H -6.368443 -0.968607 3.273516; nocom; unit angstrom; }; ; # Create a python dictionary and convert to string for pass through to optking; MTdimer = """"""{; ""Natoms per frag"": [12, 16],; ""A Frag"": 1,; ""A Ref Atoms"": [[1, 3, 4, 6, 8], [8], [11]],; ""A Label"": ""methylthiophene"",; ""B Frag"": 2,; ""B Ref Atoms"": [[13, 14, 15, 16, 17, 18], [13], [15]],; ""B Label"": ""tyrosine"",; ""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:17912,continuous,continuously,17912,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['continuous'],['continuously']
Deployability," EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 share/ & include/ >>>. install(DIRECTORY share/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4; MESSAGE_NEVER; PATTERN ""*.bin"" EXCLUDE; PATTERN ""*.pyc"" EXCLUDE). install(FILES share/psi4/quadratures/1_x/R_avail${_endian_ext}.bin; RENAME quadratures/1_x/R_avail.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(FILES share/psi4/quadratures/1_x/error${_endian_ext}.bin; RENAME quadratures/1_x/error.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(DIRECTORY include/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}/psi4). # <<< install external's share/ to psi4 share/ >>>. if(TARGET libefp::efp); # bring libefp's fraglib to PSIDATADIR's attention; set(_fraglib_in_psi4_dir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag). add_custom_target(consolidate_psidatadir ALL; VERBATIM; COMMAND ${CMAKE_COMMAND} -E make_directory ${_fraglib_in_psi4_dir}; COMMENT ""Symlink external resources into PSIDATADIR""). file(GLOB _dotefps ""${libefp_FRAGLIB_DIRS}/*.efp""); foreach(_dotefp ${_dotefps}); get_filename_component(_efpfile ${_dotefp} NAME); add_custom_command(TARGET consolidate_psidatadir; POST_BUILD; COMMAND ${CMAKE_COMMAND} -E create_symlink ${_dotefp} ${_fraglib_in_psi4_dir}/${_efpfile}); endforeach(); endif(). # <<< Export Config >>>. configure_file(psi4PluginCac",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:13007,install,install,13007,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability," Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: LibECPInt, ecpint; .. _`sec:ecpint`:. Interface to LibECPInt by R. Shaw; =================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Lori A. Burns. .. image:: https://img.shields.io/badge/home-LibECPInt-5077AB.svg; :target: https://github.com/robashaw/libecpint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Rol",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:1924,install,installed,1924,doc/sphinxman/source/ecpint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst,1,['install'],['installed']
Deployability," General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: LIBEFP, EFP. .. _`sec:libefp`:. Interface to LIBEFP by I. Kaliman; =================================. .. codeauthor:: Andrew C. Simmonett, A. Eugene DePrince III, Rollin A. King, and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Sou",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:1843,configurat,configuration,1843,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['configurat'],['configuration']
Deployability," MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm fami",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:1641,install,installs,1641,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['install'],['installs']
Deployability," Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2694,install,install,2694,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability," Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:2102,install,install,2102,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability," Psithon mode and want to know the corresponding location to add to; :envvar:`PYTHONPATH` for PsiAPI mode, execute ``psi4 --psiapi``. It; will return bash commands to set :envvar:`PATH` (for correct python; interpreter) and :envvar:`PYTHONPATH` (to find psi4 module) correctly,; after which ``import psi4`` will work. .. code-block:: bash. >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". >>> python -c ""import psi4;print(psi4.__file__, psi4.__version__)"". .. _`faq:runordinarymodule`:. How to run Psi4 as Python module after compilation; --------------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:29469,install,installation,29469,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability," Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`,",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1961,install,installs,1961,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installs']
Deployability," TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundan",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24347,configurat,configuration,24347,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability," Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Source**. * .. image:: https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water,",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:2336,install,installed,2336,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,2,['install'],"['install', 'installed']"
Deployability," _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can't get from ""defaults"" or ""conda-forge"" channels.; ..; .. * Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); .. * A couple weeks before the first ""rc"" is planned, start going through L/LT in poodle, checking with upstre",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6789,update,updated,6789,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['update'],['updated']
Deployability," a documentation; update/fix), then you should wait until next patch release when it; will be merged into the main trunk automatically.; \end{enumerate}. \noindent; The following are some of the most commonly used SVN commands for checking; out and updating working copies of the \PSIfour\ source code. \noindent; $\bullet$ To checkout a working copy of the head of the main trunk:. {\tt svn co https://sirius.chem.vt.edu/svn/psi4/trunk/ psi4} . \noindent; $\bullet$ To check out a working copy of the head of a specific release branch,; e.g., the branch labelled {\tt psi-4-0}:. {\tt svn co https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0 psi4}. \noindent Note that subsequent {\tt svn update} commands in this; working copy will provide updates only on the chosen branch. Note; also that after you have checked out a fresh working copy of the code; you must run the {\tt autoconf} command to generate a {\tt configure}; script for building the code. (See the installation manual for; configuration, compilation, and testing instructions.). \noindent For each of the above commands, the working copy of your; code will be placed in the directory \file{psi4}, regardless of your; choice of branch. In this manual, we will refer to this directory; from now on as {\tt \$PSI4}. Subsequent SVN commands are usually run; within this top-level directory. \noindent; $\bullet$ To update your current working copy to include the latest revisions:. {\tt svn update}. \noindent; Notes: (a) This will update only the revisions on your current branch;; (b) The old {\tt -d} and {\tt -P} flags required by CVS are not necessary with SVN. . \noindent; $\bullet$ To convert your working copy to the head of a specific branch:. {\tt svn switch https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; $\bullet$ To convert your working copy to the head of the main trunk:. {\tt svn switch https://sirius.chem.vt.edu/svn/psi4/trunk/}. \noindent; $\bullet$ To find out what branch your working copy is on",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:5892,install,installation,5892,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,2,"['configurat', 'install']","['configuration', 'installation']"
Deployability," a few simple input files as examples. A large ; number of sample input files, covering everything from single-point energies; using density-functional theory to response properties from coupled-cluster; theory, can be found in the :source:`samples` directory. Running a Basic Hartree--Fock Calculation; =========================================. In our first example, we will consider a Hartree--Fock SCF computation; for the water molecule using a cc-pVDZ basis set. We will specify the; geometry of our water molecule using a standard Z-matrix. .. literalinclude:: @SFNX_INCLUDE@samples/tu1-h2o-energy/input.dat. .. note:: The memory and basis set specifications are placed *before* the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in ; :srcsample:`tu1-h2o-energy`.; You can run it if you wish.; Once |PSIfour| is in your path (see the ; :ref:`User Configuration <faq:runordinaryexe>`; section of the installation instructions), you can run this computation by typing. >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree--Fock energy in a section like this::. Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about :math:`1.0 \times 10^{-6}`, so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. :ref:`sec:installFile`). This very simple input is sufficient to run the requested information.; Notice that we didn't tell the program some otherwise useful information; like the charge on the molecule (0, it's neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:3689,install,installation,3689,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['install'],['installation']
Deployability," ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5311,configurat,configuration,5311,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['configurat'],['configuration']
Deployability," al. [McGibbon:2017:161725]_. The SNS-MP2 method uses neural networking to ; improve the accuracy of MP2 (:ref:`sec:dfmp2`) interaction energies for dimer molecules.; The plugin is distributed under the 2-clause BSD license. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/snsmp2/badges/version.svg; :target: https://anaconda.org/psi4/snsmp2. * snsmp2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the Psi4conda installer, snsmp2 has already been installed alongside. * If using the |PSIfour| conda package, the snsmp2 conda package can; be obtained through ``conda install snsmp2 -c psi4`` or ``conda install; psi4-rt -c psi4``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; snsmp2 can be obtained through ``conda install snsmp2 -c psi4``.; Then, hint its location with :envvar:`PYTHONPATH`. * To remove a conda installation, ``conda remove snsmp2``. **Source**. * .. image:: https://img.shields.io/github/tag/DEShawResearch/sns-mp2.svg?maxAge=2592000; :target: https://github.com/DEShawResearch/sns-mp2. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/DEShawResearch/sns-mp2. * Once dowloaded, the plugin can be installed as outlined in the documentation:. .. code-block:: bash. >>> cd {top-level-sns-mp2-directory}; >>> PSI4_PYTHON=$(head $(which psi4) -n 1 | sed -r 's/^.{2}//'); >>> $PSI4_PYTHON -m pip install . Sample Input; ~~~~~~~~~~~~. A sample input file, adapted from the documentation, is shown below::. # Sample SNS-MP2 calculation for two helium atoms. molecule dimer {; He 0 0 0; --; He 2 0 0; }. energy('sns-mp2'); ; Note that the two monomers are separated by double dashes, indicating that; they should be treated as separate molecules. (See ; :ref:`sec:tutorial_tu5` for more details on; setting up dimer molecules.) This input file can be run ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_snsmp2.rst:2626,install,installation,2626,doc/sphinxman/source/plugin_snsmp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_snsmp2.rst,1,['install'],['installation']
Deployability," also at least to the transformation program; (and in the case of MCSCF, to other programs as well). Thus,; orbital subspace keywords such as |detci__ras1|, |detci__ras2|, |detci__ras3|, |detci__ras4|,; |globals__frozen_docc|, |globals__frozen_uocc|, |detci__active|, *etc.*, need to be; in the global ``set {...}`` block section of the input file so they may; be accessed by other modules. The ability to perform state-averaged ; [Docken:1972:4928]_ [Ruedenberg:1979:1069]_; CASSCF or RASSCF computations has been added. This is accomplished using the ; |detci__avg_states| keyword. See the :srcsample:`casscf-sp` and :srcsample:`casscf-sa-sp` examples in the ; samples directory and the example below. Basic Keywords; --------------. WFN = string; This may be ``casscf`` or ``rasscf``. REFERENCE = string; Any of the references allowed by detci should work (*i.e.*, not; {\tt uhf}), but there should be no reason not to use {\tt rhf}. DERTYPE = string; At present, only energies ({\tt none}) are supported; future; releases will implement gradients ({\tt first}). CONVERGENCE = integer; Convergence desired on the orbital gradient. Convergence is achieved when; the RMS of the error in the orbital gradient is less than 10**(-n). The ; default is 4 for energy calculations and 7 for gradients. Note that; this is a different convergence criterion than for the \PSIdetci\; program itself. These can be differentiated, if changed by the user,; by placing the {\tt CONVERGENCE} keywords within separate sections of; input, such as {\tt detcas: ( convergence = x )}. ENERGY\_CONVERGENCE = integer; Convergence desired on the total MCSCF energy. The default is 7.; \item[RESTRICTED\_DOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of lowest energy doubly occupied orbitals in each irreducible; representation from which there will be no excitations. ; These orbitals are optimized in the MCSCF.; The Cotton ordering of the irredicible repres",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:4380,release,releases,4380,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['release'],['releases']
Deployability," and Windows. The Linux package has base ``MAX_AM_ERI=7`` and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted. The Mac and Windows packages have base ``MAX_AM_ERI=5`` and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted. Details about angular momentum settings are available here; :source:`external/upstream/libint2/CMakeLists.txt`; . .. Since February 2019, the |PSIfour| conda package on Linux has been the; .. large AM8. Likewise, this is the package you get upon ::; ..; .. conda install libint -c psi4; ..; .. There is no need for the extra ``am8`` argument previously documented here.; ..; .. On Mac, the Libint conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configuration options are available; ---------------------------------------------------------. CMake doesn't provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. .. literalinclude:: @SFNX_INCLUDE@CMakeLists.txt; :lines: 14-142; :language: none. Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:19406,configurat,configuration,19406,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['configurat'],['configuration']
Deployability," and test-compile it:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin}; \item {\tt mv great\_code great\_code.bak}; \item {\tt cd \$PSI4/..}; \item {\tt svn update}; \item {\tt cd \$objdir}; \item {\tt \$PSI4/configure -}{\tt -prefix=\$prefix}; \item {\tt cd src/bin/great\_code}; \item {\tt make install}; \end{enumerate}; (Note that \$prefix and \$objdir to the installation and compilation; directories defined in the \PSIfour\ installation instructions.); Your original version of the code remains under \file{great\_code.bak},; but should be no longer necessary if the above steps work. Note that it is; necessary to re-run \file{configure} explicitly, instead of just running; \file{config.status}, because the latter contains no information about; the new code. \subsection{Updating checked out code}. If the code in the main repository has been altered, other users' working; copies will of course not automatically be updated. In general, it is; only necessary to execute the following steps in order to completely update; your working copy of the code:. \begin{enumerate}; \item {\tt cd \$PSI4}; \item {\tt svn update}; \end{enumerate}. This will examine each entry in your working copy and compare it to; the most recent version in the main repository. When the file in the; main repository is more recent, your version of the code will be; updated. If you have made changes to your version, but the version in; the main repository has not changed, the altered code will be; identified to you with an ``M''. If you have made changes to your; version of the code, and one or more newer versions have been updated; in the main repository, SVN will examine the two versions and attempt; to merge them -- this process often reveals conflicts, however, and is; sometimes unsuccessful. You will be notified of any conflicts that; arise (labelled with a ``C'') and you must resolve them manually. If new directories have been added to the repository, the update above; will automatically add the",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:13904,update,update,13904,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['update'],['update']
Deployability," and that it will compile correctly. The following; steps will store your personal version of the code, check out the new; code, and test-compile it:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin}; \item {\tt mv great\_code great\_code.bak}; \item {\tt cd \$PSI4/..}; \item {\tt svn update}; \item {\tt cd \$objdir}; \item {\tt \$PSI4/configure -}{\tt -prefix=\$prefix}; \item {\tt cd src/bin/great\_code}; \item {\tt make install}; \end{enumerate}; (Note that \$prefix and \$objdir to the installation and compilation; directories defined in the \PSIfour\ installation instructions.); Your original version of the code remains under \file{great\_code.bak},; but should be no longer necessary if the above steps work. Note that it is; necessary to re-run \file{configure} explicitly, instead of just running; \file{config.status}, because the latter contains no information about; the new code. \subsection{Updating checked out code}. If the code in the main repository has been altered, other users' working; copies will of course not automatically be updated. In general, it is; only necessary to execute the following steps in order to completely update; your working copy of the code:. \begin{enumerate}; \item {\tt cd \$PSI4}; \item {\tt svn update}; \end{enumerate}. This will examine each entry in your working copy and compare it to; the most recent version in the main repository. When the file in the; main repository is more recent, your version of the code will be; updated. If you have made changes to your version, but the version in; the main repository has not changed, the altered code will be; identified to you with an ``M''. If you have made changes to your; version of the code, and one or more newer versions have been updated; in the main repository, SVN will examine the two versions and attempt; to merge them -- this process often reveals conflicts, however, and is; sometimes unsuccessful. You will be notified of any conflicts that; arise (labelled with a ``C'') and you",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:13807,update,updated,13807,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['update'],['updated']
Deployability," and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in fro",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35249,release,release,35249,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability," any piece of code already in the most recent release, bug; fixes (defined as anything that doesn't add functionality ---; including documentation updates) should be made {\em only} on the; most recent stable release branch.; \item The main trunk is reserved for development of new functionality.; This allows us to keep new, possibly unstable code away from public; access until the code is ready.; \item Code that you do not want to put into next major release of; \PSIfour\ should be put onto a separate branch off the main; trunk. You will be solely responsible for maintenance of the new; branch, so you should read the SVN manual before attempting this.; \end{enumerate}. \noindent Fig.~\ref{Fig:svn} provides a schematic of the SVN revision-control; structure and branch labeling. Two release branches are shown, the current; stable branch, named {\tt psi-3-4}, and a planned future release, to be named; {\tt psi-3-5}. The tags on the branches indicate release shapshots, where; bugs have been fixed and the code has been or will be exported for public; distribution. The dotted lines in the figure indicate merge points: just; prior to each public release, changes made to the code on the stable release; branch will be merged into the main trunk. \begin{figure}[h]; \begin{center}; \epsfig{file=svn/svn.eps,height=6.5cm}; \end{center}; \caption{\PSIfour\ SVN branch structure with examples of branch- and; release-tag labelling.}; \label{Fig:svn}; \end{figure}. \noindent A frequently encountered problem is what to do about bug fixes; that are necessary for uninterrupted code development of the code on the; main trunk. As Rule 1 of the above policy states, all bug fixes of the code; already in the recent stable release must go on the corresponding branch,; not on the main trunk. The next step depends on the severity of the bug:; \begin{enumerate}; \item If the bug fix is critical and potentially affects every; developer of the code on the main trunk, then \PSIfour\; administrators ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:3208,release,release,3208,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['release'],['release']
Deployability," autodir_options_c/ddx__ddx_radii_scaling.rst; .. include:: autodir_options_c/ddx__ddx_radii_set.rst; .. include:: autodir_options_c/ddx__ddx_solvent_epsilon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvatio",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:9096,integrat,integration,9096,doc/sphinxman/source/ddx.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst,1,['integrat'],['integration']
Deployability," autodir_options_c/globals__ddx.rst; .. include:: autodir_options_c/ddx__ddx_model.rst; .. include:: autodir_options_c/ddx__ddx_radii.rst; .. include:: autodir_options_c/ddx__ddx_radii_scaling.rst; .. include:: autodir_options_c/ddx__ddx_radii_set.rst; .. include:: autodir_options_c/ddx__ddx_solvent_epsilon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebede",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:8892,integrat,integration,8892,doc/sphinxman/source/ddx.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst,1,['integrat'],['integration']
Deployability," be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` from Linux; .. * Run ``kitandkapoodle.py`` and allow stack to upload to anaconda.org to ``psi4/label/dev``. Poodle emits with ``--label dev`` so will go to the subchannel. May need to delete packages to clear out space on anaconda.org; .. * Copy ``meta.yaml`` and ``build.sh`` of at least ``psi4-multiout`` and ``psi4-rt`` to e.g., v121-build.sh files for easy reference or rebuilding as dependencies in master change. .. Publish to main conda label (pre-Spring 2023); .. ---------------------------------------------; ..; .. * Go through each active conda package off https://anaconda.org/psi4/repo; ..; .. - Find the most recent build set (Linux/Mac, active py versions) that ``psi4``/``psi4-rt``/``psi4-dev`` is using; .. - _add_ (not replace) the ``main`` label.; ..; .. * This makes a ``conda install psi4 -c psi4`` get everything psi4 needs. For the moment ``conda install psi4 -c psi4/label/dev`` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. May help to check versions and build versions against ltrtver in ``conda_build_config.yaml``.; .. * This step is manual, so takes a while. (It gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:21383,install,install,21383,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['install']
Deployability," block_matrix(n,n);; ; // Call the BLAS1 dot product between a and b; // n can be a ULI with the BLAS1 wrappers,; // All strides must be ints though; double dot = C_DDOT(n, a, 1, b, 1);; ; // Call the BLAS2 GEMV without transposition; // Note this works in row-major order; C_DGEMV('N', n, n, 1.0, A[0], n, a, 1, 0.0, b, 1);; ; // Call the BLAS3 GEMM without transposition; // Note this works in row-major order; C_DGEMM('N','N', n, n, n, 1.0, A[0], n, B[0], n, 0.0, C[0], n);; ; // Array's init'd with init_array must be free'd, not delete[]'d; free(a);; free(b);; ; // Block matrix should be free_blocked; free_block(A);; free_block(B);; free_block(C);. Important BLAS Routines; ^^^^^^^^^^^^^^^^^^^^^^^. * BLAS1. * DDOT: dot product; * DCOPY: efficient memory copy (with variable stride); * DAXPY: y = y + alpha*x; * DROT: Givens Rotation; * DNRM2: Vector norm square. * BLAS2. * DGEMV: General Matrix-Vector product; * DTRMV: Triangular Matrix-Vector product (2x faster, not wrapped yet); * DTRSM: Triangular Matrix-Vector solution via back substitution (just as fast as DTRMV); * DGER: Rank-1 update (not wrapped yet). * BLAS3. * DGEMM: General Matrix-Matrix product; * DTRMM: General Triangular Matrix-General Matrix product; * DTRSM: Triangular Matrix-General Matrix solution via back substitution (just as fast as DTRMM); * DSYMM/DSYMV calls are not appreciably faster than DGEMM calls, and should only be used in expert situations (like using the other half of the matrix for some form of other transformation).; * DTRMM/DTRMV calls are 2x faster than DGEMM, and should be used where possible. LAPACK Wrappers; ^^^^^^^^^^^^^^^. All standard LAPACK 3.2 double precision routines are provided. LAPACK commands remain in Fortran's ""column-major"" indexing, so all the; results will be transposed, and leading dimensions may have to be fiddled; with (using ``lda = n`` in both directions for square matrices is highly; recommended). An example of the former problem is a Cholesky; Decomposition: yo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst:4864,update,update,4864,doc/sphinxman/source/prog_blas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst,1,['update'],['update']
Deployability," build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:22878,release,releases,22878,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['releases']
Deployability," by orbital eigenvalue, *i.e.*, by choosing the set; of new orbitals which looks most like some previously known ""good"" set. The; ""good"" set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations :math:`N,N+2,\ldots`, invoking; |scf__mom_start| ``N`` can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent; iterations can quench oscillations. This mixing, known as; ""damping"" can be activated by setting the; |scf__damping_percentage| keyword to a nonzero percent. Damping is; turned off when the DIIS error is smaller than; |scf__damping_convergence|.; Level shifting [Off by default]; A commonly used alternative to damping is to use level shifting,; which decreases the mixing of occupied and unoccupied orbitals in; the SCF update by moving the unoccupied orbitals up in energy. It; can be shown that the SCF procedure always converges with a; suitably large level shift; however, the larger the shift is, the; slower the convergence becomes, and the calculation may end up; converging onto a higher lying SCF solution. Because of this, in; practice level shifting is most useful in the initial phase of the; calculation to reduce the orbital error enough for DIIS to work; well. The level shift is controlled by the parameter; |scf__level_shift|, and it is turned off when the DIIS error is; smaller than |scf__level_shift_cutoff|. Reasonable values for; the shift and convergence threshold are 5.0 and 1e-2,; respectively.; SOSCF [Off by Default]; See :ref:`sec:soscf`. .. _`sec:scferi`:. ERI Algorithms; ~~~~~~~~~~~~~~. The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are ava",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:27024,update,update,27024,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['update'],['update']
Deployability," check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:3879,update,updated,3879,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['update'],['updated']
Deployability," code copied integrals into a buffer owned by the integral object, whose; address remained constant and could be retrieved by the ``buffer()`` member; function. To avoid unnecessary copies, the new code instead uses the integrals; directly from the underlying integral engine's memory, which may change with; each call to compute integrals. The integral engine provides a; ``std::vector<const double*>`` containing the pointers to the start of each; ""chunk"" of integrals. For first derivatives there are 12 such ""chunks"", which; are ordered Px,Py,Pz,Qx,Qy,Qz,Rx,Ry,Rz,Sx,Sy,Sz, where the Px refers to the x; derivative with respect to the basis functions in shell P. Note that all; integral derivatives are provided by the new integral code, unlike the previous; version where only 9 of 12 were provided and the user was responsible for using; translation invariance relationships to fill in the rest. The addresses for; each chunk are updated in the vector after each call to compute integrals, so; the user should keep a const reference to that object, and query that for the; address of interest. Density Screening; ................. The old code looked only at the integral to determine whether terms can be; avoided *a priori*. However, if the integral is to be contracted with a; density or a density-like quantity, the screening can be performed on the; product, which yields more sparsity. To enable this, simply call the integral; object's ``update_density`` member, passing it a SharedMatrix holding the; current density (remember that it changes during each iteration of the SCF) and; the product will be considered during screening. If only coulomb-like terms; are to be computed, the ``needs_exchange`` argument to the integral object; constructor should be set to false, otherwise it should be true to correcly; account for products of the density and integrals that contribute to; exchange-like terms. Shell blocking; .............. Each underlying integral engine knows whether it wil",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:7151,update,updated,7151,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['update'],['updated']
Deployability," computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions. For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; ``energy('mp10')`` sets |detci__mpn| to TRUE.; The program uses the Wigner (2n+1) rule by default; (|detci__mpn_wigner| = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:14148,release,released,14148,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['release'],['released']
Deployability," cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` int",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:11279,update,updates,11279,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,2,['update'],['updates']
Deployability," current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulnerable to interference from your ``LD_LIBRARY_PATH`` settings. Below shows a well-linked executable.; ..; .. * no libraries ""not found""; .. * fundamental libraries like libc, ld-linux, pthreads found system libraries to link against; .. * libpython linked against conda python *not* system python; .. * libm is linked against conda *or* system; .. * blas, c++, ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:28005,release,released,28005,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['release'],['released']
Deployability," electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24044,configurat,configuration,24044,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability," from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new bloc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36543,release,release,36543,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability," great\_code}; \item {\tt svn ci -m ``Put comments here.''}; \item {\tt cd \$PSI4}; \item Edit \file{configure.ac} and add \file{great\_code} to the list. ; \item {\tt svn ci configure.ac -m ``Put comments here.''}; \item {\tt autoconf} ; \item {\tt cd \$PSI4/src/bin} ; \item Edit \file{Makefile.in} and add \file{great\_code} to the list. ; \item {\tt svn ci Makefile.in -m ``Put comments here.''}; \end{enumerate}; At this point, all of the code has been properly checked in, but you; should also test to make sure that the code can be checked out by; other programmers, and that it will compile correctly. The following; steps will store your personal version of the code, check out the new; code, and test-compile it:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin}; \item {\tt mv great\_code great\_code.bak}; \item {\tt cd \$PSI4/..}; \item {\tt svn update}; \item {\tt cd \$objdir}; \item {\tt \$PSI4/configure -}{\tt -prefix=\$prefix}; \item {\tt cd src/bin/great\_code}; \item {\tt make install}; \end{enumerate}; (Note that \$prefix and \$objdir to the installation and compilation; directories defined in the \PSIfour\ installation instructions.); Your original version of the code remains under \file{great\_code.bak},; but should be no longer necessary if the above steps work. Note that it is; necessary to re-run \file{configure} explicitly, instead of just running; \file{config.status}, because the latter contains no information about; the new code. \subsection{Updating checked out code}. If the code in the main repository has been altered, other users' working; copies will of course not automatically be updated. In general, it is; only necessary to execute the following steps in order to completely update; your working copy of the code:. \begin{enumerate}; \item {\tt cd \$PSI4}; \item {\tt svn update}; \end{enumerate}. This will examine each entry in your working copy and compare it to; the most recent version in the main repository. When the file in the; main reposit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:13037,update,update,13037,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,4,"['install', 'update']","['install', 'installation', 'update']"
Deployability," in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28774,deploy,deploy,28774,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['deploy'],['deploy']
Deployability," job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensourc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:5573,install,install-a-,5573,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,2,['install'],"['install-a-', 'installer-download-site']"
Deployability," made {\em only} on the; most recent stable release branch.; \item The main trunk is reserved for development of new functionality.; This allows us to keep new, possibly unstable code away from public; access until the code is ready.; \item Code that you do not want to put into next major release of; \PSIfour\ should be put onto a separate branch off the main; trunk. You will be solely responsible for maintenance of the new; branch, so you should read the SVN manual before attempting this.; \end{enumerate}. \noindent Fig.~\ref{Fig:svn} provides a schematic of the SVN revision-control; structure and branch labeling. Two release branches are shown, the current; stable branch, named {\tt psi-3-4}, and a planned future release, to be named; {\tt psi-3-5}. The tags on the branches indicate release shapshots, where; bugs have been fixed and the code has been or will be exported for public; distribution. The dotted lines in the figure indicate merge points: just; prior to each public release, changes made to the code on the stable release; branch will be merged into the main trunk. \begin{figure}[h]; \begin{center}; \epsfig{file=svn/svn.eps,height=6.5cm}; \end{center}; \caption{\PSIfour\ SVN branch structure with examples of branch- and; release-tag labelling.}; \label{Fig:svn}; \end{figure}. \noindent A frequently encountered problem is what to do about bug fixes; that are necessary for uninterrupted code development of the code on the; main trunk. As Rule 1 of the above policy states, all bug fixes of the code; already in the recent stable release must go on the corresponding branch,; not on the main trunk. The next step depends on the severity of the bug:; \begin{enumerate}; \item If the bug fix is critical and potentially affects every; developer of the code on the main trunk, then \PSIfour\; administrators should be notified of the fix. If deemed necessary,; appropriate steps to create a new patch release will be made. Once; the next patch release is created then the b",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:3404,release,release,3404,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,2,['release'],['release']
Deployability," open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; perfo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1057,install,installing,1057,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installing']
Deployability," osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they're called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). * If the previous release hasn't had a snapshot saved, copy ``construct.yaml`` into a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to trigger installer builds. (Even workflow edits need a dummy commit to; ``construct.yaml`` to retrigger.); * When all build successfully, hover over the artifacts, and note the smallest and largest of the; near-consecutive numbers GH has assigned them. These artifacts only linger for a day.; * Log in to vergil root and cd to ``/var/www/html/psicode-download``.; * Use the pull_gha_installers.sh script to download the installers from GH to vergil. First two; arguments are first and last of the artifact numbers, and third argument is an auth token.; ``bash pull_gha_installers.sh 47226565 47226573 715...4f3``.; * Make WindowsWSL and any other symlinks the script frontmatter advises. Build Docker images; -------------------. Docker images are built through GHA on the https://github.com/psi4/psi4meta repository from a Conda; environment specification and get served from DockerHub, https://hub.docker.com/r/psi4/psi4/tags . * Edit specification https://github.com/psi4/psi4meta/blob/master/docker/enviro",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:25978,install,installer,25978,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installer']
Deployability," overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Py",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:2184,install,install,2184,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability," package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9297,install,installers,9297,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,"['install', 'update']","['installers', 'update']"
Deployability," possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Config",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:3635,install,install,3635,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability," printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27095,install,install,27095,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability," received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libint, integrals. .. _`sec:libint`:. Interface to Libint by E. Valeev; ================================. .. codeauthor:: Edward F. Valeev and Justin T. Fermann; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libint-5077AB.svg; :target: https://github.com/evaleev/libint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate depende",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:1809,configurat,configuration,1809,doc/sphinxman/source/libint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst,1,['configurat'],['configuration']
Deployability," rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | he",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:13373,update,updated,13373,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['update'],['updated']
Deployability," scaling the uncoupled term for; :math:`E_{exch-ind,resp}^{(30)}`. S^inf Keywords; ~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__do_ind_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_disp_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_ind30_exch_sinf.rst. .. _`sec:saptd`:. SAPT0-D; ~~~~~~~. In SAPT0, the computation of :math:`E_{disp}^{(20)} + E_{exch-disp}^{(20)}` represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; ; :ref:`Grimme's dispersion corrections are discussed here. <sec:dftd3>`. The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D ; variants using default parameters optimized for Hartee--Fock interaction energies, ; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]_. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters. ; A simple water dimer computation using SAPT0-D may look like::. 	molecule water_dimer {; 	 0 1; 	 O -1.551007 -0.114520 0.000000; 	 H -1.934259 0.762503 0.000000; 	 H -0.599677 0.040712 0.000000; 	 --; 	 0 1; 	 O 1.350625 0.111469 0.000000; 	 H 1.680398 -0.373741 -0.758561; 	 H 1.680398 -0.373741 0.758561; 	; 	 units angstrom; 	 no_reorient; 	 symmetry c1; 	}; 	; 	set basis jun-cc-pvdz. 	energy('sapt0-d3mbj') # runs the recommended dispersion correction; energy('sapt0-d3') # tests an alternative damping scheme/parameterization. Given the naturally pairwise-atomic nature of these empirical dispersion corrections,; integration with existing FSAPT functionality is also available simply by calling; ``energy(""fsapt0-d3mbj"")``. See :ref:`FSAPT <sec:fisapt>` documentation for more details on using FSAPT; for functional group analyses.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:47301,integrat,integration,47301,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['integrat'],['integration']
Deployability," see; .. :ref:`Available Plugins <sec:availablePlugins>`.; .. ; .. * :source:`plugins/aointegrals/aointegrals.cc` ; .. An example that uses the LibMints library to generate and print AO basis (no symmetry) integrals.; .. ; .. * :source:`plugins/backtrans/backtrans.cc` ; .. A test of the one- and two-particle density matrix backtransformation code.; .. ; .. * :source:`plugins/mointegrals/mointegrals.cc` ; .. An example that uses the LibTrans library to generate and print MO basis integrals.; .. ; .. * :source:`plugins/mollerplesset2/mp2.cc` ; .. A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; .. ; .. * :source:`plugins/sointegrals/sointegrals.cc` ; .. An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. .. _`sec:condaplugins`:. Creating a New Plugin Using a Conda Pre-compiled Binary; -------------------------------------------------------. .. # prepare; .. >>> bash; .. >>> export PATH=$PSI4CONDA/bin:$PATH # usually already done from psi4 installation; .. >>> cd ""$(dirname $(which psi4))""/.. # move into distribution/environment directory, $PSI4CONDA; .. >>> conda install gcc # install compilers into expected place. |PSIfour| plugins can also be created using Conda for both |PSIfour|; binary and development environment. On Linux (or Ubuntu shell on Windows), one can use the ``gcc``; compiler installed alongside ``psi4`` itself in the Conda distribution; or environment (below, ``$PSI4CONDA``). On Mac, one must use; ``libc++.so`` (*not* ``libstdc++.so``), and this can be accomplished by; installing XCode from the App Store that provides ``clang`` and; ``clang++`` compilers. * Check environment:. .. code-block:: bash. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> whi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:4556,install,installation,4556,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['install'],['installation']
Deployability," session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26476,install,install,26476,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability," set_up():; psi4.core.clean(); psi4.core.clean_timers(); psi4.core.clean_options(); + psi4.set_num_threads(2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6317,release,release,6317,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability," shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; .. * GHA controller is :source:`.github/workflows/docs.yml`; .. * This setup works great for ""latest"" docs, but it won't build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up ""undefined"".; .. * So, anytime after ""Tag (pre)release"" is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; .. * In your hugo site clone, create a new directory under ``static/psi4manual``. Copy the zipped docs there, unpack, rearrange so that ``static/psi4manual/<new-tag>/index.html`` is present. Check in. Collect documentation snapshot; ------------------------------. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to; a special ""master"" folder on the https://github.com/psi4/psi4docs repository. From there, it and; other docs snapshots are built and served to https://psi4.github.io/psi4docs/master/ (independent; of psicode.org). The netlify psicode.org site has a redirect so that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. - GHA sphinx-build controller is :source:`.github/workflows/docs.yml`; - GHA gh-pages deploy controller is https://github.com/psi4/psi4docs",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:32001,release,release,32001,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability," the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENAB",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2795,install,installation,2795,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,1,['install'],['installation']
Deployability," them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29647,install,install,29647,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['install']
Deployability," to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515]_ and assiduously developed by Grimme, [Grimme:2004:1463]_; [Grimme:2006:1787]_ [Grimme:2010:154104]_ the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, :math:`E_{disp} = -C_6/R^6; -C_8/R^8 -C_{10}/R^{10}-\cdots`. The DFT-D2 [Grimme:2006:1787]_ variant; takes the explicit form below. Here, disper",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:8329,patch,patch,8329,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['patch'],['patch']
Deployability," to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3881,install,installation,3881,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['install'],['installation']
Deployability," until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ---------------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30393,install,install-generator,30393,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['install-generator']
Deployability," used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (|scf__reference| ``RHF``) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for |dct__algorithm| ``SIMULTANEOUS``. .. _`sec:dctalgorithms`:. Iterative Algorithms; ~~~~~~~~~~~~~~~~~~~~. As explained in the :ref:`Theory <sec:dcttheory>` section, in order to obtain the DCT energy one; needs to solve a system of coupled equations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:9726,update,update,9726,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,2,['update'],['update']
Deployability," will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_integrals`:. ======================; Integrals in |PSIfour|; ======================. Introduction; ------------. |PSIfour| has a number of backends available to compute integrals. In order to; accomodate these options, while providing a clean interface to the programmer,; an abstraction layer is implemented within Libmints. A recent upgrade to the; primary integral engine has seen some important changes to the way this; interface layer is used; this document is designed to aid new developers as; well as those familiar with the older calling conventions to ensure that the; most efficient calling conventions are applied. The older style; ---------------. A very simple loop that does not use permutational symmetry might look; something like this in the old scheme:. .. code-block:: cpp. auto sieve = std::make_shared<ERISieve>(basisset, cutoff);; auto factory= std::make_shared<IntegralFactory>(basisset);; int deriv_level = 0;; bool use_shell_pairs = true;; auto eri = factory->eri(deriv_level, use_shell_pairs);; const double* buffer = eri_->buffer();; for (int P = 0; P < basisset->nshell(); ++P) {; const auto& Pshell = basisset->shell(P);; for (int Q = 0; Q < basisset->nshell(); ++Q) {; const auto& Qshell = basisset->shell(Q);; for (int R = 0; R < basisset->nshell(); ++R) {; const auto& Rshell = basisset->shell(R);; for (int S = 0; S < basisset->nshell(); ++S) {; const auto& Sshell = basisset->shell(S);; if(sieve->shell_significant(P, Q, R, S) {; eri->comput",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:1410,upgrade,upgrade,1410,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['upgrade'],['upgrade']
Deployability," with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: PCMSolver, PCM, continuum solvation. .. _`sec:pcmsolver`:. Interface to PCMSolver by R. Di Remigio; =======================================. .. codeauthor:: Roberto Di Remigio, T. Daniel Crawford, Andrew C. Simmonett; .. sectionauthor:: Roberto Di Remigio. *Module:* :ref:`Keywords <apdx:pcm>`, :ref:`PSI Variables <apdx:pcm_psivar>`, :source:`PCMSolver <psi4/src/psi4/libpsipcm/>`. .. image:: https://img.shields.io/badge/home-PCMSolver-5077AB.svg; :target: https://github.com/PCMSolver/pcmsolver. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the PCMSolver library developed; by R. Di Remigio and L. Frediani.; The PCMSolver library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable continuum model (PCM), a continuum solvation model [Tomasi:2005:2999]_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/pcmsolver/badges/version.svg; :target: https://anaconda.org/psi4/pcmsolver. * PCMSolver is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, PCMSolver has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; PCMSolver can be obtained through ``conda install pcmsolver -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_PCMSolver`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect PCMSolver and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst:1886,configurat,configuration,1886,doc/sphinxman/source/pcmsolver.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst,1,['configurat'],['configuration']
Deployability," within a composite framework; are as follows:. COSX; An algorithm based on the semi-numerical ""chain of spheres exchange"" (COSX); approach described in [Neese:2009:98]_. The coulomb term is computed with a; direct density-fitting algorithm. The COSX algorithm uses no I/O, scales; well with system size, and requires minimal memory, making it ideal for; large systems and multi-core CPUs. See :ref:`sec:scfcosx` for more information.; LINK; An implementation of the linear-scaling ""Linear Exchange"" (LinK); algorithm described in [Ochsenfeld:1998:1663]_. The LINK algorithm provides ; many of the benefits of integral-direct SCF algorithms, including no disk I/O, ; low memory usage, and effective parallelization. Additionally, the; LINK implementation scales well with system size ; while simultaneously providing a formally-exact computation of the ; Exchange term. See :ref:`sec:scflink` for more information. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword ""DF""; be selected in all cases so that the correct implementation can be selected by; |PSIfours| internal routines. Ex",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:32943,configurat,configurations,32943,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['configurat'],['configurations']
Deployability," |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilati",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:32360,install,installed,32360,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['install'],['installed']
Deployability,"""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:1605,install,install,1605,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability,"""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]; ; Build and Run path advisor for Psi4; ; optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 aga",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9625,install,install,9625,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"# * In order for any DF to work, need ENABLE_ERI3 and ENABLE_ERI2 >=0; # * In order for gradient and Hessian tests to not segfault, need ENABLE_ERI and ENABLE_ERI3 and ENABLE_ERI2 =2; # * (new c. Jan 2022) In order for Psi4 to at all work with a libint2 build for one-electron ints, need ENABLE_ONEBODY =2; # * The `find_package(Libint2 ... COMPONENTS ...)` commands will check the above requirements met, provided the libint2; # was built with cmake+cmake, not libtool+cmake.; # * Provided you know what you're doing wrt the above options and know what subset of Psi4 calculations you're targeting; # (e.g., no Hessians or non-df only) and recognize that DF is everywhere (e.g., SAD guess and DF_SCF_GUESS) and may; # need further suppression, it's fine to reduce or eliminate the `find_package` components.; # * ~Psi4 can run a libtool+cmake, but one needs to disable the `find_package` components check and correct for some; # Libint2 vs. libint2 spelling differences. See ""CHOOSE!"" toggles here and in <psi4>/psi4/CMakeLists.txt~ (see [Feb 2023] update); # * In order for DF tests to yield right values when cartesian basis sets (6d) used, need ERI3_PURE_SH and ERI2_PURE_SH =OFF; # * In order for DF integrals to be present as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calculations to not be limited by cheap integrals, need WITH_MAX_AM_ERI2 >= WITH_MAX_AM_ERI3; # * In order for DF fallback fitting to work with def2-universal on all elements, need WITH_ERI3_MAX_AM >=4 for energies; # * Since non-DF calculations often use DF guess or preiterations and DF calculations use 4-center integrals for sieving,; # a natural relationship between ERI and ERI3 for energy integrals is N and N+1.; # * The combination WITH_MAX_AM_ERI=""5;4;3"" and WITH_MAX_AM_ERI3=""6;5;4"" permits any 5Z energy, QZ gradient, and TZ Hessian and is sufficient for the full test suite.; # * Psi4 doesn't know the limits of the Libint2 library to which it's linked. `libint2::Engine",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt:1665,toggle,toggles,1665,external/upstream/libint2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt,1,['toggle'],['toggles']
Deployability,"# <img src=""https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png"" height=150>. | **Status** | [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:497,release,release,497,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,5,['release'],"['release', 'releases']"
Deployability,"# CMake driving pytest copied from pybind11:; # https://github.com/pybind/pybind11/blob/master/tests/CMakeLists.txt. # Make sure pytest is found or produce a fatal error; if(NOT psi4_PYTEST_FOUND); execute_process(COMMAND ${Python_EXECUTABLE} -c ""import pytest""; OUTPUT_QUIET ERROR_QUIET; RESULT_VARIABLE _exec_python_err); if(_exec_python_err); message(STATUS ""Running some tests requires pytest. Please install it manually (try: ${Python_EXECUTABLE} -m pip install pytest)""); endif(); set(psi4_PYTEST_FOUND TRUE CACHE INTERNAL """"); endif(). # A single command to remake and run the pytest smoke tests; add_custom_target(pytest; COMMAND PYTHONPATH=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}; ${Python_EXECUTABLE} -m pytest -rws -v -m smoke --capture=sys ${CMAKE_CURRENT_SOURCE_DIR}; WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/CMakeLists.txt:405,install,install,405,tests/pytests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/pytests/CMakeLists.txt,2,['install'],['install']
Deployability,"# Format borrowed from sns-mp2 CMakeLists. if(${ENABLE_psi4fockci}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_psi4fockci})); include(FindPythonModule); find_python_module(psi4fockci ATLEAST 0.1.0 QUIET); endif(). if(${psi4fockci_FOUND}); message(STATUS ""${Cyan}Found Psi4FockCI${ColourReset}: ${PY_psi4fockci} (found version ${psi4fockci_VERSION})""); add_library(psi4fockci_external INTERFACE) # dummy. else(); if(${CMAKE_INSIST_FIND_PACKAGE_psi4fockci}); message(FATAL_ERROR ""Suitable Psi4FockCI could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable Psi4FockCI could not be located, ${Magenta}Building Psi4FockCI${ColourReset} instead.""). ExternalProject_Add(psi4fockci_external; BUILD_ALWAYS 1; URL https://github.com/shannonhouck/psi4fockci/archive/267e171.tar.gz # v0.1.0; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --install-lib=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}); endif(); else(); add_library(psi4fockci_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/psi4fockci/CMakeLists.txt:987,install,install,987,external/downstream/psi4fockci/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/psi4fockci/CMakeLists.txt,2,['install'],"['install', 'install-lib']"
Deployability,"# GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcd",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:1714,install,install,1714,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['install'],['install']
Deployability,"# Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6022,install,install,6022,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"# NOTES on Libint2 build options for Psi4; # ---------------------------------------; # * In order for Psi4 to at all work with a libint2 build, need LIBINT2_CARTGAUSS_ORDERING=standard *at generation time*. This is already the default.; # * In order for Psi4 to at all work with a libint2 build, need LIBINT2_SHELL_SET=standard *at generation time*. This is already the default.; # * ~In order for Psi4 to at all work with a libint2 build, need LIBINT2_SHGAUSS_ORDERING=gaussian *at library build time*.; # This is not the default, though it may become runtime selectable in future https://github.com/evaleev/libint/issues/190#issuecomment-691485225 .~ (see [Feb 2023] update); # * In order for any DF to work, need ENABLE_ERI3 and ENABLE_ERI2 >=0; # * In order for gradient and Hessian tests to not segfault, need ENABLE_ERI and ENABLE_ERI3 and ENABLE_ERI2 =2; # * (new c. Jan 2022) In order for Psi4 to at all work with a libint2 build for one-electron ints, need ENABLE_ONEBODY =2; # * The `find_package(Libint2 ... COMPONENTS ...)` commands will check the above requirements met, provided the libint2; # was built with cmake+cmake, not libtool+cmake.; # * Provided you know what you're doing wrt the above options and know what subset of Psi4 calculations you're targeting; # (e.g., no Hessians or non-df only) and recognize that DF is everywhere (e.g., SAD guess and DF_SCF_GUESS) and may; # need further suppression, it's fine to reduce or eliminate the `find_package` components.; # * ~Psi4 can run a libtool+cmake, but one needs to disable the `find_package` components check and correct for some; # Libint2 vs. libint2 spelling differences. See ""CHOOSE!"" toggles here and in <psi4>/psi4/CMakeLists.txt~ (see [Feb 2023] update); # * In order for DF tests to yield right values when cartesian basis sets (6d) used, need ERI3_PURE_SH and ERI2_PURE_SH =OFF; # * In order for DF integrals to be present as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calcu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt:670,update,update,670,external/upstream/libint2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt,1,['update'],['update']
Deployability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/.github/PULL_REQUEST_TEMPLATE.md:213,release,release,213,.github/PULL_REQUEST_TEMPLATE.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/PULL_REQUEST_TEMPLATE.md,1,['release'],['release']
Deployability,"##### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable ``CMAKE_INSTALL_PREFIX``; before compiling. * Build with Specific Install Directory. .. code-block:: bash. cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:21649,install,install,21649,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability,"##########################################################################| 100%. 7. Configure environment. Preceding steps have placed ``conda`` and ``psi4`` in your :envvar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26223,install,install,26223,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,"['install', 'release']","['install', 'release']"
Deployability,"###################| 100%; .. Linking packages ...; ..; ..; .. Thank you for installing psi4. Additional resources:; .. Website: www.psicode.org; .. Inputs: /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/share/psi4/samples; .. Manual: http://psicode.org/psi4manual/master/index.html; .. GitHub: https://github.com/psi4/psi4/wiki; .. Binary: https://anaconda.org/psi4; .. Youtube: https://www.youtube.com/user/psitutorials; ..; .. For csh/tcsh command-line use, add to shell or ~/.tcshrc file:; .. unsetenv PSIDATADIR; .. setenv PATH /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/bin:$PATH; .. setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files; ..; .. For sh/bash command-line use, add to shell or ~/.bashrc file:; .. unset PSIDATADIR; .. export PATH=/theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/bin:$PATH; .. export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files; ..; .. Report problems at http://forum.psicode.org/t/report-conda-update-psi4-oddities-here/32; ..; ..; .. Nuclear Repulsion Energy..........................................PASSED; .. SAPT0 Eelst.......................................................PASSED; .. SAPT0 Eexch.......................................................PASSED; .. SAPT0 Eind........................................................PASSED; .. SAPT0 Edisp.......................................................PASSED; .. SAPT0 Etotal......................................................PASSED; ..; .. [ COMPLETE ]|#######################################################################################################| 100%. 7. Configure environment. Preceding steps have placed ``conda`` and ``psi4`` in your :envvar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:24682,update,update-,24682,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['update'],['update-']
Deployability,${CMAKE_CURRENT_SOURCE_DIR}/cc2_WabeiT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_WabijT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_WmbijT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmnij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_faeT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_fmiT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_t2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wabei.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wamef.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmnie.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmnij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ccenergy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/converged.cc; ${CMAKE_CURRENT_SOURCE_DIR}/d1diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/d2diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/denom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diagnostic.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dijabT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/fock_build.cc; ${CMAKE_CURRENT_SOURCE_DIR}/form_df_ints.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/halftrans.cc; ${CMAKE_CURRENT_SOURCE_DIR}/init_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/lmp2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/local.cc; ${CMAKE_CURRENT_SOURCE_DIR}/mp2_energy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/new_d1diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/pair_energies.cc; ${CMAKE_CURRENT_SOURCE_DIR}/priority.cc; ${CMAKE_CURRENT_SOURCE_DIR}/rotate.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sort_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/spinad_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/status.cc; ${CMAKE_CURRENT_SOURCE_DIR}/t1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/t1_ijab.cc; ${CMAKE_CURRENT_SOURCE_DIR}/t2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/tau.cc; ${CMAKE_CURRENT_SOURCE_DIR}/taut.cc; ${CMAKE_CURRENT_SOURCE_DIR}/tsave.cc; ${CMAKE_CURRENT_SOURCE_DIR}/update.cc; ); ,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccenergy/CMakeLists.txt:2893,update,update,2893,psi4/src/psi4/cc/ccenergy/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccenergy/CMakeLists.txt,1,['update'],['update']
Deployability,"%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) |. <!-- -->; <!-- [![Last release date](https://img.shields.io/github/release-date/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) -->; <!-- [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:2661,release,release-date,2661,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['release'],['release-date']
Deployability,"%; % History of Psi; %; % Daniel Crawford, 24 January, 1996; %. The PSI suite of {\em ab initio} quantum chemistry programs is the result; of an ongoing attempt by a cadre of graduate students, postdoctoral; associates, and professors to produce code that is efficient but also; easy to extend to new theoretical methods. Significant effort has been; devoted to the development of libraries which are robust and easy to use.; Some of the earliest contributions to what is now referred to as ``PSI''; include a direct configuration interaction (CI) program (Robert Lucchese,; 1976, now at Texas A\&M), the well-known graphical unitary group CI program; (Bernie Brooks, 1977-78, now at N.I.H.), and the original integrals code; (Russ Pitzer, 1978, now at Ohio State). From 1978-1987, the package was; know as the {\tt BERKELEY} suite, and after the Schaefer group moved to the; Center for Computational Quantum Chemistry at the University of Georgia,; the package was renamed {\tt PSI}. Thanks primarily to the efforts of Curt; Janssen (Sandia Labs, Livermore) and Ed Seidl (LLNL), the package was; ported to UNIX systems, and substantially improved with new input formats; and a C-based I/O system. Beginning in 1999, an extensive effort was begun to develop \PSIthree\; --- a {\tt PSI} suite with a completely new face. As a result of this; effort, all of the legacy Fortran code was removed, and everything was; rewritten in C and C++, including new integral/derivative integral,; coupled cluster, and CI codes. In addition, new I/O libraries have; been added, as well as an improved checkpoint file structure and greater; automation of typical tasks such as geometry optimization and frequency; analysis. The package has the capability to determine wavefunctions,; energies, analytic gradients, and various molecular properties based on; a variety of theories, including spin-restricted, spin-unrestricted, and; restricted open-shell Hartree-Fock (RHF, UHF, and ROHF); configuration; interaction (CI",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/history.rst:517,configurat,configuration,517,doc/sphinxman/source/attic/history.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/history.rst,1,['configurat'],['configuration']
Deployability,"%; % PSI Programmer's Manual; %; % SVN Revision Control Section; % (formerly CVS); %; % TDC, February, 1996; % Modified by TDC, December 2002; % Updated from CVS to SVN, April 2007; %. The subversion control system (SVN) (\htmladdnormallink{{\tt; subversion.tigris.org}}{http://subversion.tigris.org/}) provides a; convenient means by which programmers may obtain the latest (or any; previous) version of the \PSIfour\ source from the main repository or; a branch version, add new code to the source tree or modify existing; \PSIfour\ modules, and then make changes and additions available to; other programmers by checking the modifications back into the main; repository. SVN also provides a ``safety net'' in that any erroneous; modifications to the code may be easily removed once they have been; identified. This section describes how to use SVN to access and; modify the \PSIfour\ source code. (Note that compilation and; installation instructions are given in a separate document.). The main repository for the \PSIfour\ Source code is currently; maintained by the Crawford group at Virginia Tech. To check out the; code, one must first obtain an SVN account by emailing; \htmladdnormallink{{\tt crawdad@vt.edu}}{mailto:crawdad@vt.edu}.; After you have a login-id and password, you are now ready to access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policie",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:928,install,installation,928,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['install'],['installation']
Deployability,"(3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25252,configurat,configuration,25252,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,"(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in you",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18293,install,installation,18293,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installation']
Deployability,") Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest import",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27366,install,install,27366,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25394,configurat,configuration,25394,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,").; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the fil",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36415,release,release,36415,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"); if(NOT PERL_FOUND); message(STATUS ""No Perl, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html""); endif(). find_package(Sphinx QUIET); if(NOT SPHINX_FOUND); message(STATUS ""No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html""); endif(). find_package(LATEX QUIET); if(NOT (LATEX_COMPILER AND PDFLATEX_COMPILER)); message(STATUS ""No LaTeX (incl. pdflatex), no PDF docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html""); endif(). if(SPHINX_THEME STREQUAL sphinx_psi_theme); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""import sphinx_psi_theme; import cloud_sptheme; import sphinx_automodapi; import graphviz""; OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE _exec_python_err); elseif(SPHINX_THEME STREQUAL basic); # these themes are built-in to Sphinx; execute_process(COMMAND ${Python_EXECUTABLE} -c; ""import sphinx_automodapi; import graphviz""; OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE _exec_python_err); else(); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""import ${SPHINX_THEME}; import sphinx_automodapi; import graphviz""; OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE _exec_python_err); endif(); if(_exec_python_err); message(STATUS ""No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi sphinx-autodoc-typehints graphviz python-graphviz autodoc-pydantic sphinx-tabs -c conda-forge -c psi4)""); set(SPHINX_STUFF_FOUND ""OFF""). else(); set(SPHINX_STUFF_FOUND ""ON""); endif(). if(SPHINXMAN_STRICT); set(SPHINX_EXTRAS ""-n;-W;--keep-going""); #set(SPHINX_EXTRAS ""-W;--keep-going""); # return to above after qcel 0.25; #set(SPHINX_EXTRAS """"); else(); set(SPHINX_EXTRAS """"); endif(). # Setup and build Sphinx documentation; if(PERL_FOUND AND SPHINX_FOUND AND SPHINX_STUFF_FOUND); set(CCSD ""${CMAKE_CURRENT_SOURCE_DIR}""); set(CCBD ""${CMAKE_CURRENT_BINARY_DIR}""). # Static-doc reST files; set(STATICDOC abbr_accents.rst adc.rst adcc.rst appendices.rst basissets.rst; basi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:1333,install,install,1333,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['install'],['install']
Deployability,"); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; :ref:`running compiled executable <faq:runordinaryexe>`,; :ref:`running compiled Python module <faq:runordinarymodule>`,; :ref:`running conda binary <faq:runfrombinary>`. * :envvar:`PATH` pointing to ``bin``; * :envvar:`PYTHONPATH` pointing to ``lib`` (ordinary) or ``lib/pythonX.X/site-packages`` (conda); * :envvar:`PSIDATADIR` pointing to ``share/psi4``. .. _`faq:runordinaryexe`:. How to run Psi4 as executable after compilation; -----------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run |PSIfour|. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. .. _`faq:modulenotfounderror`:. How to solve ``ModuleNotFoundError: No module named 'psi4'``; ------------------------------------------------------------. You're using |PSIfour| in PsiAPI mode (``python input.py`` where; ``input.py`` contains ``import psi4``) but the Python in",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:27248,install,installation,27248,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,"); target_include_directories(core; PRIVATE; $<TARGET_PROPERTY:BrianQC::static_wrapper,INTERFACE_INCLUDE_DIRECTORIES>; ); target_link_libraries(core; PRIVATE; BrianQC::static_wrapper; ); endif(). if(Fortran_ENABLED AND CMAKE_Fortran_COMPILER_ID MATCHES Intel); # Enable call to for_rtl_init_() which is required if using the; # Intel fortran compiler; target_compile_definitions(core; PRIVATE; INTEL_Fortran_ENABLED; ); endif(). if(MSVC); # gethostname; target_link_libraries(core PRIVATE Ws2_32); # Increase the number of addressable sections. Now covered by pybind11_add_module linking with pybind11::windows_extras; # target_compile_options(core PRIVATE ""/bigobj""); endif(). target_include_directories(core; INTERFACE; $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>; $<TARGET_PROPERTY:Libint2::cxx,INTERFACE_INCLUDE_DIRECTORIES>; ). install(TARGETS core; EXPORT ""psi4Targets""; ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; RUNTIME DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4); install(EXPORT ""psi4Targets""; NAMESPACE ""psi4::""; DESTINATION ${CMAKECONFIG_INSTALL_DIR}). # <<< RPATH >>>. set(_full_path_staged_libdir ""${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}""); file(RELATIVE_PATH _rel ${_full_path_staged_libdir}${PYMOD_INSTALL_LIBDIR}/psi4; ${_full_path_staged_libdir}); if(APPLE); set(psi4_RPATH ""@loader_path/${_rel}""); else(); set(psi4_RPATH ""$ORIGIN/${_rel}""); endif(). foreach(_al ${_addons}); get_filename_component(_ald ${_al} DIRECTORY). if(${_al} MATCHES ""-Wl,""); list(REMOVE_ITEM _addons ${_al}); #message(""rpath: ${_al} dropped because linker directive""); continue(); endif(). if(${_al} MATCHES ""\.${CMAKE_STATIC_LIBRARY_SUFFIX}$""); list(REMOVE_ITEM _addons ${_al}); #message(""rpath: ${_al} dropped because static""); continue(); endif(). if(NOT ${_ald} STREQUAL """"); list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES ${_ald} _in_cpild); if(_in_cpild GREATER -1); list(REMOVE_ITEM _addon",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/CMakeLists.txt:3901,install,install,3901,psi4/src/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/CMakeLists.txt,2,['install'],['install']
Deployability,"* Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); .. * Edit ``psi4ver`` back to ``''`` in cbcy; .. * Edit ``source/git_tag`` back to ``master`` for psi4-multiout, psi4-docs; .. * Edit build string back to ``0`` if psi4-multiout needed multiple passes; .. * Edit kitandkapoodle.py back to ``***`` stack; .. * Check in all release, construct, recipe changes on Linux and Mac. Synchronize both to GitHub psi4meta; .. * Copy meta.yaml and build.sh files to vMmp-prefixed files for the record.; .. * Edit crontab back to 2am ""norm"". Comment out ""anom"". Misc.; -----. * Consider rebuilding the |PSIfour| binder image.; * If you want to do trial conda ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:37850,release,release,37850,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured ``psi4`` itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install ``psi4-dev`` for build tools. The :ref:`sec:psi4conda` uses a `conda constructor; <https://github.com/conda/constructor>`_ to package up Miniconda,; the |PSIfour| conda package, the |PSIfour| add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for |PSIfour|. Installing just the ``psi4`` package; itself will get you |PSIfour|, whatever add-ons require linking in to; |PSIfour| (*e.g.*, CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the ``psi4`` package won't get you add-ons that; don't need linking (*e.g.*, adcc and v2rdm_casscf). .. Conda Proficients; .. ^^^^^^^^^^^^^^^^^; ..; .. or dependencies; .. from the ""right"" channels, which can be important for issues of fPIC; .. and libc++ vs. libstdc++. So ``conda create -c psi4 -n p4env psi4 dftd3; .. v2rdm_casscf`` *should* be equivalent to running the psi4conda installer,; .. but I wouldn't count on it. Instead, an `explicit environment spec; .. <http://conda.pydata.org/docs/using/envs.html#build-identical-conda-environments-with-urls>`_; .. will be available for download.; ..; .. .. code-block:: bash; ..; .. # Linux; .. >>> curl -o explicit-latest.sh ""https://repo.con",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:14665,install,installation,14665,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installation']
Deployability,", ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and pyth",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26630,install,install,26630,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,"['install', 'release']","['install', 'release']"
Deployability,", and Aa. Jensen [Olsen:1988]_. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:4876,configurat,configurational,4876,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['configurat'],['configurational']
Deployability,"- If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35828,release,release,35828,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"-- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:2318,install,install,2318,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability,"--+. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dftd3/badges/version.svg; :target: https://anaconda.org/psi4/dftd3. * There are two implementations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONP",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:6829,install,installed,6829,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,3,['install'],"['install', 'installed']"
Deployability,"-------+----------+; | ``conda-forge::gcp-correction`` | ``bin/mctc-gcp`` | nyi | preferred | ``gcp_engine=""mctc-gcp""`` | https://github.com/grimme-lab/gcp | mctc |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dftd3/badges/version.svg; :target: https://anaconda.org/psi4/dftd3. * There are two implementations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:6477,install,installer,6477,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,2,['install'],"['installed', 'installer']"
Deployability,"------------+-------+; | 4334 | 113 |; +-----------------------------+-------+; | 4802 | 119 |; +-----------------------------+-------+; | 5294 | 125 |; +-----------------------------+-------+; | 5810 | 131 |; +-----------------------------+-------+. The spherical grids are rotated according to a common set of rules developed; during the implementation of SG1. At the moment, the rules for tetrahedral,; octohedral, and icosohedral systems are not complete, so there may be some; ambiguity in the grid orientation for these systems. Radial grid types are controlled by the |scf__dft_radial_scheme| option, which; at the moment may be either ``TREUTLER`` or ``BECKE``, while the number of radial; points are controlled by the |scf__dft_radial_points| option, which is any positive; integer (typically 50-100). The radial grids are ""centered"" on the Bragg-Slater; radius of each atom, as described in Becke's 1988 paper. If inaccurate; integration is suspected in systems with anions or very diffuse basis functions,; the |scf__dft_bs_radius_alpha| option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The atomic weighting scheme is controlled by the |scf__dft_nuclear_scheme|; option, which may be one of ``TREUTLER``, ``BECKE``, ``STRATMANN``, ``NAIVE``,; or ``SBECKE``. The last is a smoother variant of the BECKE scheme recently introduced ; by Laqua [Laqua:2018:204111]_ that should behave better for weak interactions. Pruning of the quadrature grid is controlled by the |scf__dft_pruning_scheme|; option. The options ``ROBUST`` and ``TREUTLER`` divide the grid into spherical regions; based on the Bragg-Slater radius of each atom and apply different orders to them.; The ``ROBUST`` scheme is a less aggressive variant of the ``TREUTLER`` approach and; suitable for benchmark-level quality (MAD < 0.002 kcal/mol for the S22 with PBE/aug-cc-pVTZ; for pruned versus unpruned grid). Our implementation of the ``TREUTLER`` scheme shows an ;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:23971,integrat,integration,23971,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['integrat'],['integration']
Deployability,-----------------------------------+; .. comment | fno-cisd | cisd with frozen natural orbitals | |globals__ci_type| CONV |; .. comment +-------------------------+-------------------------------------------------------------+-------------------------------------------+. .. comment | df-ccsd | ccsd with density fitting |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | df-ccsd(t) | ccsd(t) with density fitting |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | fno-df-ccsd | ccsd with density fitting and frozen natural orbitals |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | fno-df-ccsd(t) | ccsd(t) with density fitting and frozen natural orbitals |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | dci | configuration interaction with double excitations |; .. comment +-------------------------+-------------------------------------------------------------+; .. comment | fno-dci | dci with frozen natural orbitals |; .. comment +-------------------------+-------------------------------------------------------------+. .. include:: autodoc_capabilities_fnocc.rst. .. index:: FNOCC; basic-keywords. Basic FNOCC Keywords; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. include:: /autodir_options_c/mints__basis.rst; .. include:: /autodir_options_c/globals__freeze_core.rst; .. include:: /autodir_options_c/fnocc__r_convergence.rst; .. include:: /autodir_options_c/fnocc__e_convergence.rst; .. include:: /autodir_options_c/fnocc__maxiter.rst; .. include:: /autodir_options_c/fnocc__diis_max_vecs.rst; .. include:: /autodir_options_c/fnocc__nat_orbs.rst; .. include:: /autodir_options_c/fnocc__occ_tolerance.rst; .. include:: /autodir_options_c/fnocc__triples_low_memory.rst; .. include:: /autodir_options_c/fnocc__cc_timings.rst; .. include,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:23675,configurat,configuration,23675,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['configurat'],['configuration']
Deployability,"-------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:11387,configurat,configuration,11387,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['configurat'],['configuration']
Deployability,"-----------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; :ref:`running compiled executable <faq:runordinaryexe>`,; :ref:`running compiled Python module <faq:runordinarymodule>`,; :ref:`running conda binary",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:25667,install,install,25667,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability,"-----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a Fortran compiler in unneeded for core; features but may be required for add-ons. * Downstream Dependencies. * |PSIfour| (\ |dr| optional) Fortran Compiler; * erd, dkh, gdma, PCMSolver |dr| Fortran Compiler. **CMake Variables**. * :makevar:`CMAKE_Fortran_COMPILER` |w---w| CMake variable to specify name or full path to Fortran compiler.; * :makevar:`CMAKE_Fortran_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for Fortran source. **Examples**. A. Build with detected compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. .. _`faq:approvedfc`:. What Fortran compilers are approved; -----------------------------------. On Linux and Mac, the following work nicely. * GNU: ``gfortran``; * Intel: ``ifort``. * Packages to install for specific OS or package managers:. * Ubuntu ``gfortran``; * conda ``gfortran_linux-64`` or ``gfortran_osx-64`` to get ``gfortran``. .. _`faq:macgfortran`:. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; ----------------------------------------------------------------------------. Xcode does not provide a Fortran compiler. A way to get one is to download; the ``gfortran_osx-64`` conda package. This provides; ``gfortran`` compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. .. Xcode does not provide a Fortran compiler. Although a Fortran compiler is; .. not required for Psi4, a broken one can prevent correct configuration. Do; .. not download the latest version of GFortran from the HPC website; this is; .. unlikely to be compatible with your version of GCC. Instead, you should; .. run ``gcc -v`` to find out what version of GCC you're using, and then; .. download the corresponding GFortran from; .. <http://r.research.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:44308,install,install,44308,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability,"---------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-psi4-dir}`. * ``cd {top-level-psi4-dir} && cmake -S. -Bobjdir``; * ``cd {top-level-psi4-dir} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/in",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24644,install,installed,24644,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installed']
Deployability,"--------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); .. * Edit ``psi4ver`` back to ``''`` in cbcy; .. * Edit ``source/git_tag`` back to ``master`` for psi4-multiout, psi4-docs; .. * Edit build string back to ``0`` if psi4-multiout needed multiple passes; .. * Edit kitandkapoodle.py back to ``***`` stack; .. * Check in all release, construct, recipe changes on Linux ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:37570,release,release,37570,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"------------. * Start a PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://github.com/conda-forge/psi4-feedstock/pull/15 is an example. - Always: edit ``version`` and ``commit`` jinja variables.; - Possibly: edit ``source/url`` field for trial locations.; - Always: edit ``sha256`` jinja variable from e.g., ``curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256``; - Always: edit ``build/number``. Either reset to 0 if version increments or bump if version *doesn't* increment.; - Possibly: uncomment ``skip: true # [py != 310]`` if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_bui",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:12442,patch,patches,12442,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['patch'],['patches']
Deployability,"-----------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presenta",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36303,release,release,36303,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"-------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28545,install,installer,28545,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installer']
Deployability,"-Gordon's wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. :ref:`Double-Hybrid Functionals <table:dft_dhybrid>`; Double hybrids are percolating into |PSIfour|. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. :ref:`-D Functionals <table:dft_disp>`; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme's :ref:`DFTD3 program <sec:dftd3>`.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in |PSIfour| for correctness. If you find an error in a DFT; functional or have a request for a new functional, please let us know on our; forum or GitHub page. Grid Selection; ~~~~~~~~~~~~~~. |PSIfour| uses the standard Lebedev-Laikov spherical quadratures in concert with a; number of radial quadratures and atomic partitioning schemes. ; The default grid in |PSIfour| is a Lebedev-Treutler (75,302) grid with a Treutler; partition of the atomic weights. Spherical grids are all of the extremely efficient Lebedev-Laikov type.; Spherical grid resolution is controlled by the |scf__dft_spherical_points|; option, which may take one of the following values:. .. _`table:lebedevorder`:. +-----------------------------+-------+; | |sc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:20433,install,installation,20433,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['install'],['installation']
Deployability,"-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bas",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21301,install,install,21301,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP2-VDW TOTAL ENERGY; SCS-MP2-VDW CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.28 opposite-spin and 0.50 same-spin contributions, with; any singles carried along. DOI: 10.1080/00268970802641242. .. psivar:: SCS(N)-MP2 TOTAL ENERGY; SCS(N)-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 0 opposite-spin and 1.76 same-spin contributions, with; any singles carried along. doi: 10.1021/ct6002737. .. psivar:: SCS(N)-OMP2 CORRELATION ENERGY; SCS(N)-OMP2 TOTAL ENERGY; SCSN-OMP2 CORRELATION ENERGY; SCSN-OMP2 TOTAL ENERGY. Two spellings of a discontinued QCVariable that may still appear; because the code is frozen pending an update. .. psivar:: SCS-OMP2 TOTAL ENERGY; SCS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 6/5 opposite-spin and 1/3 same-spin contributions, with; any singles carried along. .. psivar:: SCS-MP3 TOTAL ENERGY; SCS-MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3-like method formed by reweighting the difference between; :psivar:`MP3 DOUBLES ENERGY` and :psivar:`MP2 DOUBLES ENERGY`; by 0.25, atop the SCS-MP2 energy, with any singles carried along. .. psivar:: SCS-OMP3 TOTAL ENERGY; SCS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SCS-OMP2 ener",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:60586,update,update,60586,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['update'],['update']
Deployability,"-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they're called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). * If the previous release hasn't had a snapshot saved, copy ``construct.yaml`` into a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to trigger installer builds. (Even workflow edits need a dummy commit to; ``construct.yaml`` to retrigger.); * When all build successfully, hover over the artifacts, and note the smallest and largest of the; near-consecutive numbers GH has assigned them. These artifacts only linger for a day.; * Log in to vergil root and cd to ``/var/www/html/psicode-download``.; * Use the pull_gha_installers.sh script to download the install",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:25400,install,installers,25400,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installers']
Deployability,"-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured ``psi4`` itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install ``psi4-dev`` for build tools. The :ref:`sec:psi4conda` uses a `conda constructor; <https://github.com/conda/constructor>`_ to package up Miniconda,; the |PSIfour| conda package, the |PSIfour| add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for |PSIfour|. Installing just the ``psi4`` package; itself will get you |PSIfour|, whatever add-ons require linking in to; |PSIfour| (*e.g.*, CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the ``psi4`` package won't get you add-ons that; don't need linking (*e.g",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:13956,install,installer,13956,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installer']
Deployability,". * Edit specification https://github.com/psi4/psi4meta/blob/master/docker/environment.yaml. - Edit the packages and channels info if necessary. Probably long-term stable.; - Don't edit the Python version, as that's controlled by the GHA. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to trigger GHA Docker builds.; * Check at DockerHub for new images. .. Generate download page for psicode.org (pre-Fall 2023); .. ------------------------------------------------------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; ---------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:27913,install,installs,27913,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installs']
Deployability,". * Making a release or prerelease. * update all three fields of metadata.py (see below ex); * commit; * on master, make annotated tag starting with v. note the hash.; * run enough of build to make sure tag formatted properly and ""Defining {} version"" sane. # MUST update metadata.py on same commit at which make tag. git tag -a v1.0 d2243ef; git push origin v1.0; git push [remote] [tagname]. do NOT use the GitHub tagging interface - it creates lightweight tags. :source:`psi4/metadata.py`. __version__ = '1.0'; __version_long = '1.0+d2243ef'; __version_upcoming_annotated_v_tag = '1.1a1'. # Example current and upcoming tag pairs; # * '1.0', '1.1a1'; # * '1.0.4', '1.0.5' on maintenance branch 1.0.x; # * '1.1a1', '1.1b1'; # * '1.1rc2', '1.1'; # * '1.1', '1.2'. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_version.rst:13,release,release,13,doc/sphinxman/source/prog_version.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_version.rst,3,"['release', 'update']","['release', 'update']"
Deployability,". .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (thanks, conda binary relocation routine!). The conda |PSIfour| executable is not vulnerable to interference from your ``LD_LIBRARY_PATH`` settings. Below shows a well-linked executable.; ..; .. * no libraries ""not found""; .. * fundamental libraries like libc, ld-linux, pthreads found system libraries to link against; .. * libpython linked against conda python *not* system python; .. * libm is linked against conda *or* system; .. * blas, c++, and gcc libraries are absent because statically linked; ..; .. .. code-block:: console; ..; .. >>> conda install conda-build # needed for next command; .. >>> conda inspect linkages psi4; .. python-2.7.9-2:; .. libpython2.7.so.1.0 (lib/libpython2.7.so.1.0); .. system-5.8-1:; .. libm.so.6 (lib/libm.so.6); .. system:; .. libc.so.6 (/lib64/libc.so.6); .. libdl.so.2 (/lib64/libdl.so.2); .. libpthread.so.0 (/lib64/libpthread.so.0); .. librt.so.1 (/lib64/librt.so.1); .. libutil.so.1 (/lib64/libutil.so.1); .. linux-vdso.so.1 (); .. not found:. .. comment find out about the current environment.; .. comment pythonhome should be empty; .. comment pythonpath should be empty or set to non-interfering packages (*e.g.*, qcdb); .. comment ld_library_path shouldn't contain anything with a libpython; .. comment >>> conda info -a. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:29114,install,install,29114,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,". Build with specific (Intel) compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. .. _`faq:approvedfc`:. What Fortran compilers are approved; -----------------------------------. On Linux and Mac, the following work nicely. * GNU: ``gfortran``; * Intel: ``ifort``. * Packages to install for specific OS or package managers:. * Ubuntu ``gfortran``; * conda ``gfortran_linux-64`` or ``gfortran_osx-64`` to get ``gfortran``. .. _`faq:macgfortran`:. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; ----------------------------------------------------------------------------. Xcode does not provide a Fortran compiler. A way to get one is to download; the ``gfortran_osx-64`` conda package. This provides; ``gfortran`` compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. .. Xcode does not provide a Fortran compiler. Although a Fortran compiler is; .. not required for Psi4, a broken one can prevent correct configuration. Do; .. not download the latest version of GFortran from the HPC website; this is; .. unlikely to be compatible with your version of GCC. Instead, you should; .. run ``gcc -v`` to find out what version of GCC you're using, and then; .. download the corresponding GFortran from; .. <http://r.research.att.com/tools/>. If you configure Psi on a Mac without; .. any Fortran compiler it will set itself up correctly, so this is only; .. necessary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:45009,configurat,configuration,45009,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['configurat'],['configuration']
Deployability,". Docker images are built through GHA on the https://github.com/psi4/psi4meta repository from a Conda; environment specification and get served from DockerHub, https://hub.docker.com/r/psi4/psi4/tags . * Edit specification https://github.com/psi4/psi4meta/blob/master/docker/environment.yaml. - Edit the packages and channels info if necessary. Probably long-term stable.; - Don't edit the Python version, as that's controlled by the GHA. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to trigger GHA Docker builds.; * Check at DockerHub for new images. .. Generate download page for psicode.org (pre-Fall 2023); .. ------------------------------------------------------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading registe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:27714,install,installs,27714,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installs']
Deployability,". Eugene DePrince III, Rollin A. King, and Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <psi4/driver/procrouting/solvent/efp.py>`. .. image:: https://img.shields.io/badge/home-libefp-5077AB.svg; :target: https://github.com/libefp2/libefp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/libefp2/libefp. |PSIfour| contains code to interface to the LIBEFP library developed; in L. Slipchenko's group by I. Kaliman. LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Source**. * .. image:: https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EF",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:2231,install,installed,2231,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['install'],['installed']
Deployability,". For example:; ``libefp::efp``, ``CheMPS2::chemps2``, ``PCMSolver::pcm``,; ``v2rdm_casscf::v2rdm_casscf``. * Following the CMake project name (though not restricted to it --; |PSIfour| managment could change the pattern), the user flag to enable; an add-on is :samp:`ENABLE_{AddOn_name}`. Note that runtime-only; add-ons don't go through this enabling process. * Internally, the ExternalProject_Add and dummy libraries as well as any; tests/ and external/ subdirectories should all be lowercase,; :samp:`{addon_name}`. * The `conda package <https://anaconda.org/psi4/repo>`_ and internal to; |PSIfour| (that is, the ExternalProject_Add, dummy libraries, and any; tests/ and external/ subdirectories) should all be lowercase,; :samp:`{addon_name}`. * Alternatively, you can do everything mentioned here lowercase and just; have a different capitalization for an advertising name. After all,; that's what |PSIfour| does. .. _`faq:addoncmake`:. How to integrate an Add-On into build, testing, and docs; --------------------------------------------------------. * In all cases, put Add-Ons in alphabetic order, ignoring any ""lib"" in the name. * :source:`CMakeLists.txt`. * Add the :samp:`ENABLE_{AddOn_name}` line. * Add the :samp:`external_{addon_name}` dependency to the ``psi4-core`` external project. * Add the :samp:`{AddOn_name}_DIR` variable passing to the ``psi4-core`` external project. * :source:`psi4/CMakeLists.txt`. * Add a block imitating Libint if Add-On required or CheMPS2 if not; required. * If there are shared resources to the external that need; to be found by |PSIfour| in PSIDATADIR, follow the ``efpfrag``; pattern of libefp to symlink them in. * :source:`psi4/src/CMakeLists.txt`. * No changes should be required unless both (1) code in export_*; or core.cc needs the :samp:`USING_{AddOn_name}` definition or; AddOn header includes and (2) no binary |PSIfour| module (as; opposed to library |PSIfour| module with the AddOn target linked; is itself a direct dependency of target ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:3285,integrat,integrate,3285,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['integrat'],['integrate']
Deployability,". How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]; ; Build and Run path advisor for Psi4; ; optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9846,install,install,9846,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,". LIBEFP; requires no additional licence,; downloads, or configuration. Since February 2017, libefp is not required to build; |Psifour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libefp/badges/version.svg; :target: https://anaconda.org/psi4/libefp. * libefp is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, libefp has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; libefp can be obtained through ``conda install libefp -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_libefp`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect libefp and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. libefp from conda without thinking, consult. * To remove a conda installation, ``conda remove libefp``. **Source**. * .. image:: https://img.shields.io/github/tag/ilyak/libefp.svg?maxAge=2592000; :target: https://github.com/ilyak/libefp. * If using |PSIfour| built from source and you want libefp built from; from source also,; enable it as a feature with :makevar:`ENABLE_libefp`,; and let the build system fetch and build it and activate dependent code. .. index:: EFP; library fragments; pair: EFP; adding new. .. _`sec:findingEFPFragments`:. EFP Fragments; ~~~~~~~~~~~~~. LIBEFP comes with a couple dozen ready-to-use fragments (water, benzene,; common solvents, etc.) listed :ref:`here <sec:availableEFPFragments>`; with source https://github.com/libefp2/libefp/tree/master/fraglib. Any of these may be used directly in; a |PSIfour| input file as described :ref:`here <sec:usingEFPFragments>`. .. comment .. note:: The built-in fragment library distributed with Q-Chem (as of version 4.0.1) is *not*; .. comment equivalent to that distributed with LIBEFP. Although many",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:2778,install,installation,2778,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['install'],['installation']
Deployability,". There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:23316,install,installers,23316,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installers']
Deployability,". _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60648,install,installed,60648,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installed']
Deployability,". code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general :ref:`scratch documentation <sec:Scratch>`. .. _`faq:psi4fileretention`:. How do I retain specific Psi4 scratch files; -------------------------------------------. You can set up a specific path for |PSIfour| scratch file and keep them; for later use through the :ref:`psi4_io <sec:Scratch>` handler. .. _`faq:psi4PBS`:. How to use Psi4 within a PBS queue; ----------------------------------. You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pyte",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:59693,update,update,59693,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['update'],['update']
Deployability,". raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computation looks like this::. molecule {; Mg; }. set basis aug-cc-pvdz-dk; set relativistic dkh. energy('scf'). By default a 2nd-order DKH calculation is performed. To change the default; order use the |globals__dkh_order| option. The version of the code found in; |Psifour| is capable of up to 4th-order DKH calculations. .. _`sec:dkhkeywords`:. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:2450,install,installation,2450,doc/sphinxman/source/dkh.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst,1,['install'],['installation']
Deployability,".. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: gau2grid, collocation. .. _`sec:gau2grid`:. Interface to gau2grid by D. G. A. Smith; =======================================. .. codeauthor:: D. G. A. Smith; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-gau2grid-5077AB.svg; :target: https://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/g",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:1790,configurat,configuration,1790,doc/sphinxman/source/gau2grid.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst,1,['configurat'],['configuration']
Deployability,".. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. ======================================; Installation and Runtime Configuration; ======================================. .. toctree::; :maxdepth: 2. FAQ <build_faq>; build_obtaining; build_planning; Installing from Binary <conda>. .. index:: scratch files, restart; .. _`sec:Scratch`:. Scratch Files; =============. One very important part of user configuration at the end of the; installation process; is to tell |PSIfour| where to write its temporary; (""scratch"") files. Electronic structure packages like |PSIfour| can; create rather large temporary disk files. It is very important to ; ensure that |PSIfour| is writing its temporary files to a disk drive; physically attached to the computer running the computation. If it; is not, it will significantly slow down the program and the network.; By default, |PSIfour| will write temporary files to ``/tmp``, but this; directory is often not large enough for typical computations. Therefore,; you need to (a) make sure there is a sufficiently large directory on a; locally attached disk drive (100GB--1TB or more, depending on the size of; the molecules to be studied) and (b) tell |PSIfour| the path to this; directory. Scratch file location can be specified through the ; :envvar:`PSI_SCRATCH` environment variable or through the |psirc| file; (see section :ref:`sec:psirc`). Most of the time, :envvar:`PSI_SCRATCH`; is preferred, and it ov",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:1408,configurat,configuration,1408,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,2,"['configurat', 'install']","['configuration', 'installation']"
Deployability,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:methods`:. ===============================; Theoretical Methods: SCF to FCI; ===============================. Several electronic structure methods are available in the |PSIfour|; package, from Hartree--Fock molecular orbital theory to coupled-cluster; theory to full configuration interaction. This section introduces; the methods available and some of their most common input parameters.; A complete list of standard keywords is provided in Appendix; :ref:`apdx:options_c_module`. .. toctree::; :maxdepth: 2. capabilities; notes_c; scf; dft; dftnl; dct; dfmp2; dlpnomp2; cc; fnocc; occ; psimrcc; detci; mcscf; sapt; fisapt; adc; relativistic; optking; oeprop; thermo; tdscf; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/methods.rst:1296,configurat,configuration,1296,doc/sphinxman/source/methods.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/methods.rst,1,['configurat'],['configuration']
Deployability,".. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: FISAPT; pair: FISAPT; theory. .. _`sec:fisapt`:. F/I-SAPT: Functional Group and/or Intramolecular SAPT; =====================================================. .. codeauthor:: Robert M. Parrish; .. sectionauthor:: Robert M. Parrish. *Module:* :ref:`Keywords <apdx:fisapt>`, :ref:`PSI Variables; <apdx:fisapt_psivar>`, :source:`FISAPT <psi4/src/psi4/fisapt>`. The FISAPT module provides two extensions to standard SAPT theory to allow for; (1) an effective two-body partition of the various SAPT terms to localized; chemical functional groups (F-SAPT) and (2) a means to compute the SAPT; interaction between two moieties within the embedding field of a third body; (I-SAPT). F-SAPT is designed to provide additional insight into the chemical; origins of a noncovalent interaction, while I-SAPT allows for one to perform; a SAPT analysis for intramolecular interactions. F-SAPT and I-SAPT can be; deployed together in this module, yielding ""F/I-SAPT."" All F/I-SAPT computations; in |PSIfour| use density-fitted SAPT0 as the underlying SAPT methodology. Interested; users should consult the manual page for Ed Hohenstein's :ref:`SAPT0 <sec:sapt>` code; and the SAPT literature to understand the specifics of SAPT0 before beginning; with F/I-SAPT0. F-SAPT is detailed over two papers: [Parrish:2014:044115]_ on our much-earlier; ""atomic"" SAPT (A-SAPT) and [Parrish:2014:4417]_ on the finished ""functional; group"" SAPT (F-SAPT). An additional paper describes how to use F-SAPT to analyze; differences under functional group substitutions [Parrish:2014:17386]_. I-SAPT; is explained in [Parrish:2015:051103]_. There is also a reasonably-detailed; review of the aims of A/F/I-SAPT and the existing state-of-the-art in the field; in the introduction chapter on partitioned SAPT methods in `Parrish's thesis; <https://smartech.gatech.edu/handle/1853/53850>`_. .. A video tutorial series for the use of the FISAPT modu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:1976,deploy,deployed,1976,doc/sphinxman/source/fisapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst,1,['deploy'],['deployed']
Deployability,".. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Instead, switch ``source/git_tag`` from ``master`` to tag (e.g., ``v1.3rc1``) in:; ..; .. * psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; .. * psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L; ..; .. - In cbcy, edit ``psi4ver`` to ""v""-less tag; ..; .. * For releases and postreleases (not prereleases), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new non-dev label (probably a ditto) matching the release (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` from Linux; .. * Run ``kitandkapoodle.py`` and allow stack to upload to anaconda.org to ``psi4/label/dev``. Poodle emits with ``--label dev`` so will go to the subchannel. May need to delete packages to clear out space on anaconda.org; .. * Copy ``meta.yaml`` and ``build.sh`` of at least ``psi4-multiout`` and ``psi4-rt`` to e.g., v121-build.sh files for easy reference or rebuilding as dependencies in master change. .. Publish to main conda label (pre-Spring 2023); .. ---------------------------------------------; ..; .. * Go through each active conda package off https://anaconda.org/psi4/repo; ..; .. - Find the most recent build set (Linux/Mac, active py versions) that ``psi4``/``psi4-rt``/``psi4-dev`` is using; .. - _add_ (not replace) the ``main`` label.; ..; ..",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:20320,release,release,20320,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,".. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutete",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4575,install,installation,4575,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,".. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; b",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:1962,install,installing,1962,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,2,['install'],"['installation', 'installing']"
Deployability,".. sectionauthor:: Lori A. Burns. *Module:* :ref:`Samples <apdx:testSuitegcp>`. .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:2173,install,installer,2173,doc/sphinxman/source/gcp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst,2,['install'],"['installed', 'installer']"
Deployability,".....................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Mini",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:31336,install,installed,31336,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['install'],['installed']
Deployability,".0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_energy(), 4, ""geom2 took""). * Molecules can be initiated from XYZ files and fragmented for SAPT computations. ::. # >>> cat mol1.xyz; #7; #; #O 0.00000000 -0.05786571 -1.47979303; #N 0.00000000 0.01436394 1.46454628; #H 0.00000000 0.82293384 -1.85541474; #H 0.81348351 0.39876776 1.92934049; #H 0.00000000 0.07949567 -0.51934253; #H 0.00000000 -0.98104857 1.65344779; #H -0.81348351 0.39876776 1.92934049. # >>> cat mol2.xyz; # 6 au; # stuff; # C 0.00000000000000 0.00000000000000 5.26601138679877; # C 0.00000000000000 0.00000000000000 -3.15195886530135; # H 0.00000000000000 0.00000000000000 7.28558683837122; # H 0.00000000000000 0.00000000000000 -1.12178201232889; # N 0.00000000000000 0.00000000000000 3.08339310458383; # N 0.00000000000000 0.00000000000000 -5.33865984413460. sapt = {'mol1': -0.0105313323529,; 'mol2': -0.00839486625709}. nre = {'mol1'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:23020,update,update,23020,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['update'],['update']
Deployability,".7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]; ; Build and Run path advisor for Psi4; ; optional arguments:; -h, --help show this help message and exit; --psi4-compile (Command Default) Generates a minimal CMake command for building Psi4 against; this psi4-dev conda metapackage.; >>> git clone https://github.com/psi4/psi4.git; >>> cd {top-level-psi4-dir}; >>> conda create -n p4dev python={3.6} psi4-dev [-c psi4/label/dev] -c psi4; >>> conda activate p4dev; >>> psi4-path-advisor; # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; bui",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:11123,install,install,11123,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,".; These radius values are conventionally scaled by an additional factor before use,; conventionally 1.1 for ``uff`` and 1.2 for ``bondi``. Customisation of the scaling; is possible using the |ddx__ddx_radii_scaling| parameter.; A more fine-grained control over the sphere radii is available by explicitly providing; a list of radii (one per atom, exactly in the order of the input geometry); using the |ddx__ddx_radii| parameter. Note that the same unit as for the molecular; input is expected for the radii. .. include:: autodir_options_c/globals__ddx.rst; .. include:: autodir_options_c/ddx__ddx_model.rst; .. include:: autodir_options_c/ddx__ddx_radii.rst; .. include:: autodir_options_c/ddx__ddx_radii_scaling.rst; .. include:: autodir_options_c/ddx__ddx_radii_set.rst; .. include:: autodir_options_c/ddx__ddx_solvent_epsilon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:8381,integrat,integration,8381,doc/sphinxman/source/ddx.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst,1,['integrat'],['integration']
Deployability,".cc` ; .. An example that uses the LibTrans library to generate and print MO basis integrals.; .. ; .. * :source:`plugins/mollerplesset2/mp2.cc` ; .. A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; .. ; .. * :source:`plugins/sointegrals/sointegrals.cc` ; .. An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. .. _`sec:condaplugins`:. Creating a New Plugin Using a Conda Pre-compiled Binary; -------------------------------------------------------. .. # prepare; .. >>> bash; .. >>> export PATH=$PSI4CONDA/bin:$PATH # usually already done from psi4 installation; .. >>> cd ""$(dirname $(which psi4))""/.. # move into distribution/environment directory, $PSI4CONDA; .. >>> conda install gcc # install compilers into expected place. |PSIfour| plugins can also be created using Conda for both |PSIfour|; binary and development environment. On Linux (or Ubuntu shell on Windows), one can use the ``gcc``; compiler installed alongside ``psi4`` itself in the Conda distribution; or environment (below, ``$PSI4CONDA``). On Mac, one must use; ``libc++.so`` (*not* ``libstdc++.so``), and this can be accomplished by; installing XCode from the App Store that provides ``clang`` and; ``clang++`` compilers. * Check environment:. .. code-block:: bash. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. * Create and compile plugin:. .. code-block:: bash. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:4915,install,installed,4915,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['install'],['installed']
Deployability,".pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; positi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:2521,install,installed,2521,doc/sphinxman/source/gcp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst,3,['install'],"['install', 'installed']"
Deployability,".rst. .. .. _`sec:addAddOns`:. Git, Versioning; ===============. .. _`faq:versionbump`:. How to bump a version; ---------------------. 0. **ACT** to check everything in. 1. **OBSERVE** current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master; up-to-date with upstream (including tags!!!) and with upstream as; remote. * https://github.com/psi4/psi4/releases says ``v1.1a1`` & ``007a9b6``. ::. >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. * Observe that current latest tag matches metadata scipt and git; describe, that GitHub releases matches metadata script, that upcoming in; metadata script matches current versioner version. * Note that current tag is ``v1.1a1``. Decide on imminent tag, say ``v1.1rc1``. 2. **ACT** to bump tag in code. * Edit current & prospective tag in :source:`psi4/metadata.py`. Use your; decided-upon tag ``v1.1rc1`` and a speculative next tag, say ``v1.1rc2``,; and use 7 ""z""s for the part you can't predict. ::. >>> vi psi4/metadata.py. >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; index 5d87b55..6cbc05e 100644; --- a/psi4/metadata.py; +++ b/psi4/metadata.py; @@ -1,6 +1,6 @@; -__version__ = '1.1a1'; -__version_long = '1.1a1+007a9b6'; -__version_upcoming_annotated_v_tag = '1.1a2'; +__version__ = '1.1rc1'; +__version_long = '1.1rc1+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.1rc2'. >>> git add psi4/metadata.py. >>> git commit -m ""v1.1rc1"". 3. **OBSERVE** undefined version state. ::. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-418-g6100822. >>> git describe -",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:2049,release,releases,2049,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['release'],['releases']
Deployability,".svg; :target: https://github.com/SebWouters/CheMPS2. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://sebwouters.github.io/CheMPS2/index.html. .. note:: As of late June 2016, DMRG keywords in |PSIfour| have been; realigned with those of the chemps2 executable, plus a; ""dmrg\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:che",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:2782,install,installed,2782,doc/sphinxman/source/chemps2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst,1,['install'],['installed']
Deployability,".yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to trigger GHA Docker builds.; * Check at DockerHub for new images. .. Generate download page for psicode.org (pre-Fall 2023); .. ------------------------------------------------------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28240,install,installs,28240,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installs']
Deployability,"/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21735,install,installing,21735,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['install'],"['installation', 'installing']"
Deployability,"/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should ch",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:5816,install,installs,5816,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['install'],"['install', 'installs']"
Deployability,"/maxscheurer/cppe. * mp2d |w---w| https://github.com/Chandemonium/MP2D. * :ref:`FockCI <sec:fockci>` |w---w| https://github.com/shannonhouck/psi4fockci. * cct3 |w---w| https://github.com/piecuch-group/cct3. * :ref:`adcc <sec:adcc>` |w---w| https://github.com/adc-connect/adcc. * :ref:`BrianQC <sec:brianqc>` |w---w| https://www.brianqc.com/. * i-PI |w---w| http://ipi-code.org/. * psixas |w---w| https://github.com/Masterluke87/psixas. * MDI |w---w| https://github.com/MolSSI-MDI/MDI_Library. * :ref:`ddx <sec:ddx>` |w---w| https://github.com/ddsolvation/ddx. .. _`faq:condapsi4dev`:. How to use conda to get a Psi4 development environment; ------------------------------------------------------. |PSIfour| has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package ``psi4-dev`` is available to gather the dependencies; and build tools needed to compiler |PSIfour| from source. Go to; :psicode:`installs/latest`, select ""source"" and ""nightly build"" along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script ``psi4-path-advisor``. Running; ``psi4-path-advisor --help`` shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake's cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; :samp:`{objdir}`, you can build |PSIfour|. Remember to activate this; conda environment during |PSIfour| running or development. There are a; few extra options to ``psi4-path-advisor`` to set up using conda's GNU; compilers (on Linux), conda's Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda's GNU compilers (on Linux). .. code-block:: console. >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.8 -c psi4/label/dev; >>> conda activate p4dev; >>> `psi4-path-a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:14290,install,installs,14290,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installs']
Deployability,"/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/ecpint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_ecpint=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:3570,install,installation,3570,doc/sphinxman/source/ecpint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst,1,['install'],['installation']
Deployability,"007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi4. + psi4.core.set_num_threads(2); psi4.set_output_file(""pytest_ou",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4207,release,release,4207,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"035503; O -0.120432 -0.684669 -0.035503; H -0.850718 -0.772960 0.563468; }; ; set {; basis cc-pvdz; intrafrag_step_limit 0.1; }. lower_bound = [99.99, 109.99, 119.99, 129.99, 149.99]; upper_bound = [100, 110, 120, 130, 140, 150]; PES = []. for lower, upper in zip(lower_bound, upper_bound):; my_string = f""1 2 3 4 {lower} {upper}""; set optking ranged_dihedral = $my_string; E = optimize('scf'); PES.append((upper, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). * To scan the potential energy surface without the |optking__ranged_dihedral| keyword, a zmatrix; can be used. .. warning:: ; Rotating dihedrals in large increments without allowing the molecule to relax; in between increments can lead to unphysical geometries with overlapping functional groups in larger molecules,; which may prevent successful constrained optimzations. Furthermore, such a relaxed scan of the PES does; not always procude a result close to an IRC, or even a reaction path along which the energy changes in a; continuous way. .. code-block:: none. molecule hooh {; 0 1 ; H ; O 1 0.95; O 2 1.39 1 103 ; H 3 0.95 2 103 1 D . D = 99. units ang ; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1 ; frozen_dihedral ("" 1 2 3 4 ""); }. dihedrals = [100, 110, 120, 130, 140, 150]; PES = []. for phi in dihedrals:; hooh.D = phi ; E = optimize('scf'); PES.append((phi, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])). Multi-Fragment Optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. _DimerSection:. In previous versions of optking, the metric for connecting atoms was increased until all atoms; were connected. This is the current behavior for |optking__frag_mode| `single`.; Setting |optking__frag_mode| to `multi` will now add a special; set of intermolecular coordinates between fragments - internally referred to as DimerFrag; coordinates (see `here <DimerIntro_>` for",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:9083,continuous,continuous,9083,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['continuous'],['continuous']
Deployability,"11:1456]_. The parameters; fit for individual functionals are now :math:`s_6`, :math:`s_8`,; :math:`a_1`, and :math:`a_2`. .. math:: E_{disp}^{\text{D3BJ}}=-\sum_{n=6,8} s_n \sum_{i,j>i}^{N_{at}} ; \frac{C_n^{ij}}{(R_{ij})^n + (f_{damp})^n}. .. math:: f_{damp} = a_1 \sqrt{\frac{C_8^{ij}}{C_6^{ij}}} + a_2. All parameters characterizing the dispersion correction are taken from; `Grimme's website <https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3>`_; or else from the literature.; With s-dftd3, parameters are also tabulated in the program source. Running DFTD3 or DFTD4; ~~~~~~~~~~~~~~~~~~~~~~. A number of *a posteriori* dispersion corrections are available in; |PSIfour|. While some are computed within |PSIfours| codebase (-D1, -D2,; -CHG, -DAS2009, -DAS2010), the -D3 or -D4 corrections and their variants are; available only through the ``DFTD3`` or ``DFTD4`` programs. Once installed, the; ``dftd3``/|PSIfour| and ``dftd4``/|PSIfour| interfaces are transparent, and all corrections are; interfaced exactly alike.; The -D3 interface can use classic or simple-dftd3 programs interchangeably and will prefer the latter.; Starting in v1.9, the classic program is no longer supported or tested, though it isn't deliberately disabled. Despite different defaults in these programs when run independently,; when run through |PSIfour| as EmpiricalDispersion engine, each should; produce the same result. Moreover, |PSIfours| own defaults and aliases; are unchanged by the new engines, so ``-D`` continues to mean ``-D2``,; ``-D3`` continues to mean zero-damping *without* 3-body correction,; and input files should continue producing the same results. Please file; an issue if found otherwise. Dispersion corrections are built into DFT functionals, so appending an *a; posteriori* correction to a computation is as simple as; ``energy('b2plyp-d')`` *vs.* ``energy('b2plyp')``. For example, the; following input file computes (with much redundant wor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:12114,install,installed,12114,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['install'],['installed']
Deployability,"1800; N 8.40100 2.02500 2.32500; N 8.73400 0.74100 -3.12900; O 7.98000 1.33100 -3.90100; O 9.55600 -0.11000 -3.46600; H 7.74900 2.71100 2.65200; H 8.99100 1.57500 2.99500; symmetry c1; no_reorient; no_com; }. set {; basis sto-3g; pe true; e_convergence 10; d_convergence 10; scf_type pk; }. set pe {; potfile pna_6w.pot; }. scf_energy, wfn = energy('scf', return_wfn=True). The corresponding potential file `pna_6w.pot` can be downloaded; `here <https://raw.githubusercontent.com/maxscheurer/cppe/master/tests/potfiles/pna_6w.pot>`_. Keywords for CPPE; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pe.rst; .. include:: autodir_options_c/pe__potfile.rst; .. include:: autodir_options_c/pe__isotropic_pol.rst; .. include:: autodir_options_c/pe__induced_convergence.rst; .. include:: autodir_options_c/pe__maxiter.rst; .. include:: autodir_options_c/pe__border.rst; .. include:: autodir_options_c/pe__border_type.rst; .. include:: autodir_options_c/pe__border_n_redist.rst; .. include:: autodir_options_c/pe__border_redist_order.rst; .. include:: autodir_options_c/pe__border_rmin.rst; .. include:: autodir_options_c/pe__border_rmin_unit.rst; .. include:: autodir_options_c/pe__border_redist_pol.rst. .. _`cmake:cppe`:. How to configure CPPE for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CPPE is a library that provides additional; quantum chemical capabilities (explicit solvation modeling). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CPPE. * Upstream Dependencies |w---w| CPPE. **CMake Variables**. * :makevar:`ENABLE_cppe` |w---w| CMake variable toggling whether Psi4 builds with CPPE; * :makevar:`cppe_DIR` |w---w| CMake variable to specify where pre-built CPPE can be found. Set to installation directory containing ``share/cmake/cppe/cppeConfig.cmake``. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_cppe=ON. B. Build *without* CPPE. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:6729,install,installation,6729,doc/sphinxman/source/cppe.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst,1,['install'],['installation']
Deployability,"1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation models; are currently implemented using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.; For a concise introduction to the; `theory behind ddx <https://ddsolvation.github.io/ddX/md_docs_theory.html>`_; or further `literature references <https://ddsolvation.github.io/ddX/label_references.html>`_; see the ddx documentation. The usage of ddx-based solvation models is enabled; by specifying |globals__ddx| ``true`` in your input file.; The solvation model itself is selected using the |ddx__ddx_mo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:2966,install,installed,2966,doc/sphinxman/source/ddx.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst,2,['install'],"['install', 'installed']"
Deployability,"2 but still single integer. Default fine for production."" 5); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /); option_with_default(psi4_INSTALL_CMAKEDIR ""Directory to which psi4 CMake config files installed."" share/cmake/psi4); option_with_default(TargetLAPACK_INSTALL_CMAKEDIR ""Directory to which psi4 CMake config files installed."" share/cmake/TargetLAPACK); option_with_default(TargetHDF5_INSTALL_CMAKEDIR ""Directory to which psi4 CMake config files installed."" share/cmake/TargetHDF5); option_with_default(ENABLE_GENERIC ""Enables mostly static linking of language libraries for shared library"" OFF); option_with_default(CMAKE_INSTALL_MESSAGE ""Specify verbosity of installation messages"" LAZY); option_with_default(psi4_CXX_STANDARD ""Specify C++ standard for core Psi4"" 17); option_with_default(psi4_CXX_STANDARD_Libint2 ""Specify C++ standard for Psi4 files including Libint2 headers. Older (e.g., 2021.4) Intel compilers may need 14"" 17); option_with_default(SIMINT_VECTOR ""Vectorization type to use for simint (scalar sse avx avxfma micavx512)"" avx); option_with_default(SPHINX_THEME ""Theme for Sphinx documentation and extensions"" sphinx_psi_theme); option_with_default(SPHINXMAN_STRICT ""Turn warnings into errors for docs target sphinxman"" OFF); option_with_default(BUILD_Libint2_GENERATOR ""If prebuilt not found, don't build Libint2 from source tarball but instead build and run generator (several hours for production library). Edit angular momentum and integrals classes directly in `external/upstream/libint2/CMakeLists.txt` (requires Ninja)."" OFF); option_with_default(psi4_SHGAUSS_ORDERING ""Ordering for shells of solid harmonic Gaussians: standard -- standard o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:12124,install,installation,12124,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['installation']
Deployability,"2); psi4.set_output_file(""pytest_output.dat"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can't get from ""defaults"" o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6448,pipeline,pipelines,6448,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['pipeline'],['pipelines']
Deployability,"200 basis functions, the cube; files for all the orbitals occupy more than half a GB. Keywords; --------. .. include:: autodir_options_c/globals__cubeprop_tasks.rst; .. include:: autodir_options_c/globals__cubeprop_filepath.rst; .. include:: autodir_options_c/globals__cubeprop_orbitals.rst; .. include:: autodir_options_c/globals__cubeprop_basis_functions.rst; .. include:: autodir_options_c/globals__cubic_grid_spacing.rst; .. include:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:7393,install,installed,7393,doc/sphinxman/source/cubeprop.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst,1,['install'],['installed']
Deployability,"2110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:casscf`:. Complete-Active-Space Self-Consistent-Field (CASSCF); ====================================================. Multi-configurational self-consistent-field (MCSCF) ; is a general method for obtaining qualitatively correct; wavefunctions for highly strained molecules, diradicals, or bond; breaking reactions. The most commonly used MCSCF procedure; is the complete-active-space self-consistent-field (CASSCF); approach [Roos:1980]_, which includes all possible determinants; (with the proper symmetry) that can be formed by distributing ; a set of active electrons among a set of active orbitals.; The detcasman module performs; CASSCF optimization of molecular orbitals via a two-step; procedure in which the CI wavefunction is computed using; detci, and the orbital rotation step is computed using; detcas. The detcas program is fairly simple; and uses an approximate orbital Hessian [Chaban:1997:88]_; and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_.; We have also implemented a prototype version of the RASSCF method; [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF which ; is typically less complete (and less expensive) than CASSCF.; However, orbital convergence for RASSCF can be difficult in our; current implementation. Inactive orbitals in the MCSCF may be specified by the ; |detci__restricted_docc| and |detci__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively,; in the MCSCF wavefunction. However, the form of these orbitals will; be optimized in the MCSCF procedure. It is also possible to ; literally freeze inactive orbitals in their original (SCF) form; using the |globals__frozen_docc| and |globals__frozen_uocc| keywords.; This is not normally what one wishes to do in an MCSCF computation; (*e.g.*, it complicates the computation of gradients),; but it can make the computations ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:2002,update,update,2002,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['update'],['update']
Deployability,"3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation; is achieved by setting |globals__pe| ``true`` in your input file. .. note:: At present, PE can only be used for energy calculations with SCF; wavefunctions and CC wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:2905,install,installation,2905,doc/sphinxman/source/cppe.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst,1,['install'],['installation']
Deployability,"4/psi4docs repository. From there, it and; other docs snapshots are built and served to https://psi4.github.io/psi4docs/master/ (independent; of psicode.org). The netlify psicode.org site has a redirect so that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. - GHA sphinx-build controller is :source:`.github/workflows/docs.yml`; - GHA gh-pages deploy controller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For re",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:33611,deploy,deployed,33611,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['deploy'],['deployed']
Deployability,"4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-websit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:1763,release,release,1763,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,4,['release'],['release']
Deployability,"4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:1896,install,install,1896,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability,"4fockci. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://shannonhouck.github.io/psi4fockci/build/index.html. This plugin is an implementation of the RAS-nSF-IP/EA approach detailed ; in the paper by Houck et. al. [Houck:2019:2278]_. ; This approach handles systems with both spin and spatial degeneracies ; by combining the spin-flip (SF) [Krylov:2001:522]_; and ionization potential/electron affinity (IP/EA) [Nooijen:1995:3629]_ ; approaches. . The Psi4FockCI plugin allows one to perform spin-flip (SF), ionization ; potential (IP), and electron affinity (EA) calculations, as well as ; combined RAS-SF-IP/EA calculations, through the DETCI (:ref:`sec:ci`) module. Installation; ~~~~~~~~~~~~. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/shannonhouck/psi4fockci.git. * Once downloaded, the plugin can be installed as follows:. .. code-block:: bash. >>> cd {top-level-psi4fockci-directory}; >>> python -m pip install . Sample Input; ~~~~~~~~~~~~. To run a CAS-nSF-IP/EA calculation, start with a molecule with the ; correct charge and multiplicity for the reference state (i.e. some ; state well-represented by a single reference). Then, run an energy ; calculation, passing in the charge and multiplicity of the ; desired state; the number of spin-flips and IP/EA will be automatically ; determined based on this input. If additional excitations outside of the ; RAS II space are desired, one can set the level of external ; excitations using the ``conf_space`` keyword. A sample input file for a RAS(h)-2SF-IP calculation is shown below:. .. code-block:: python. molecule {; 0 7; N 0.0 0.0 0.0; N 0.0 0.0 1.3; symmetry c1; }. set {; basis cc-pVDZ; }. energy('psi4fockci', new_charge=1, new_multiplicity=1, conf_space=""h""); ; Note that for calculations involving IP/EA, inclusion of hole (for IP) and ; particle (for EA) excitations is strongly recommended. Additional keywords ; can",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_psi4fockci.rst:2434,install,install,2434,doc/sphinxman/source/plugin_psi4fockci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_psi4fockci.rst,1,['install'],['install']
Deployability,"51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:documentation`:. Updating the |PSIfour| Users' and Programmers' Manual; =====================================================. |PSIfours| documentation is generated by `Sphinx <https://www.sphinx-doc.org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentation Structure; ^^^^^^^^^^^^^^^^^^^^^^^. Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in the same; format, hyperlinking within and to external websites, and generating; documentation in different formats from the same source. |PSIfours|; documentation is a unified document covering information for both users; and programmers in separate sections. From the top-level object directory,; build the following target (note that a working version of the |PSIfour|; executable is a requirement for building th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:1899,install,install,1899,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['install'],['install']
Deployability,"99M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they're called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). * If the previous release hasn't had a snapshot saved, copy ``construct.yaml`` into a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to trigger installer builds. (Even workflow edits need a dummy commit to; ``construct.yaml`` to retrigger.); * When all build successfully, hover over the artifacts, and note the smallest and largest of the; near-consecutive numbers GH has assigned them. These artifacts only linger f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:25233,release,release,25233,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,": ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:37202,release,release,37202,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,": bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; sete",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:30970,install,installation,30970,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,":: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_dkh=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:4570,install,installation,4570,doc/sphinxman/source/dkh.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst,1,['install'],['installation']
Deployability,":`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5822,install,install,5822,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability,":code_style`:. Code style conventions; ======================. It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; `clang-format <https://clang.llvm.org/docs/ClangFormat.html>`_ and `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:2042,install,installing,2042,doc/sphinxman/source/code_style.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst,1,['install'],['installing']
Deployability,":installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:2123,install,installs,2123,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installs']
Deployability,"; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:3791,install,installing,3791,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installing']
Deployability,"; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1255,install,install,1255,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,"['install', 'update']","['install', 'updated']"
Deployability,"; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. cod",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:1837,install,installed,1837,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,1,['install'],['installed']
Deployability,"; :target: http://sebwouters.github.io/CheMPS2/index.html. .. note:: As of late June 2016, DMRG keywords in |PSIfour| have been; realigned with those of the chemps2 executable, plus a; ""dmrg\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:chemps2_calls`:. .. table:: Density matrix renormalization group capabilities of |PSIfour| through CheMPS2. +-------------------------+-----",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:2887,install,installed,2887,doc/sphinxman/source/chemps2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst,2,['install'],"['install', 'installed']"
Deployability,"; _CRT_NONSTDC_NO_WARNINGS; _CRT_SECURE_NO_WARNINGS; ); # Set the exception handling model; add_compile_options(""/EHsc""); endif(). include_directories(include); include_directories(src); add_subdirectory(src); if(ENABLE_CYTHONIZE); add_subdirectory(driver); endif(). # <<< Version >>>; # * computes version from metadata.py and git info; # * calls cmake to run write_basic_package_version_file. add_custom_target(update_version ALL; COMMAND ${Python_EXECUTABLE} versioner.py --metaout ${CMAKE_CURRENT_BINARY_DIR}/metadata.py; --cmakeout ${CMAKE_CURRENT_BINARY_DIR}/metadata.cmake; COMMAND ${CMAKE_COMMAND} -DWTO=""${CMAKE_CURRENT_BINARY_DIR}/${CMAKECONFIG_INSTALL_DIR}""; -DPN=""psi4""; -P ${CMAKE_CURRENT_BINARY_DIR}/metadata.cmake; WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}; COMMENT ""Generating version info""); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/metadata.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). # <<< Install >>>. # <<< install bin/ >>>; configure_file(run_psi4.py psi4 @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}). if(WIN32); # Generate a batch script, which wraps ""bin/psi4"" script to ""python bin/psi4""; configure_file(psi4.bat psi4.bat @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4.bat; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}); endif(). # <<< install lib/ >>>; if(NOT ENABLE_CYTHONIZE); install(DIRECTORY driver; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; FILES_MATCHING; PATTERN ""*.py""; PATTERN pytest EXCLUDE; ); endif(). install(FILES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:9872,install,install,9872,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability,"; and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for example, that I-SAPT is used to examine the interaction; of two methyl groups connected by some linker fragment. When the linking bonds are assigned to C, the carbon atoms; of the methyl groups are missing electrons on one of their *sp^3* hybrid orbitals and a dipole moment appears.; These dipole moments have been observed to lead, in some cases, to I-SAPT energy contributions that do not make ; physical sense, for example, to a strongly repulsive electrostatic energy between two fragments connected by an; intramolecular hydrogen bond. To overcome this issue, Luu and Patkowski proposed a reassignment of the linking electron pairs so that each fragment; (C and A/B) gets one electron [Luu:2023:356]_. This electron is pla",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:17213,A/B,A/B,17213,doc/sphinxman/source/fisapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst,1,['A/B'],['A/B']
Deployability,"; cc_excited.cc; dirprd_block.cc; dot_block.cc; dx_read.cc; dx_write.cc; fill_sym_matrix.cc; invert.cc; lapack_intfc.cc; mat_print.cc; newmm_rking.cc; pople.cc; probabil.cc; ras_set.cc; reorder_qt.cc; schmidt.cc; solve_pep.cc; timer.cc; ). # cmake_symbol_exists() or check_cxx_source_runs() are preferable to check_function_exists(); # according to CMake docs. But both require an explicit header, either in the call or in the code,; # and that's tough with multiple BLAS/LAPACK backends. So, we'll see if this is robust enough.; include(CMakePushCheckState); include(CheckFunctionExists); cmake_push_check_state(); list(APPEND CMAKE_REQUIRED_LIBRARIES tgt::lapack); check_function_exists(daxpby _has_daxpby); if(NOT _has_daxpby); message(WARNING ""${Yellow}Your BLAS/LAPACK library does not seem to be providing the DAXPBY subroutine. DAXPBY calls will be re-routed through DSCAL and DAXPY. If you are seeing this message, and you are not building with Apple Accelerate, you may want to re-check that the correct BLAS/LAPACK libraries are being used by the build system. Redo CMake configuration for changes to register.${ColourReset}""); endif(). check_function_exists(dggsvd3 _has_dggsvd3); check_function_exists(dggsvp3 _has_dggsvp3); if(NOT (_has_dggsvd3 AND _has_dggsvp3)); message(WARNING ""${Yellow}Your BLAS/LAPACK library does not seem to be providing the DGGSVD3 and DGGSVP3 subroutines. No re-routing is available. If you are seeing this message, and you are not building with Apple Accelerate, you may want to re-check that the correct BLAS/LAPACK libraries are being used by the build system. Redo CMake configuration for changes to register.${ColourReset}""); endif(); cmake_pop_check_state(). psi4_add_module(lib qt sources); target_compile_definitions(qt; PRIVATE; $<$<BOOL:${_has_daxpby}>:BLAS_HAS_DAXPBY>; $<$<BOOL:${_has_dggsvd3}>:BLAS_HAS_DGGSVD3>; $<$<BOOL:${_has_dggsvp3}>:BLAS_HAS_DGGSVP3>; FC_SYMBOL=${FC_SYMBOL}; ). unset(_has_daxpby); unset(_has_dggsvd3); unset(_has_dggsvp3); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libqt/CMakeLists.txt:1146,configurat,configuration,1146,psi4/src/psi4/libqt/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/libqt/CMakeLists.txt,2,['configurat'],['configuration']
Deployability,"; dispersion interactions, as they lack dispersion physics. A -D functional (Such; as the much cheaper B97-D) should be used instead. :ref:`Hybrid Functionals <table:dft_hybrid>`; Many common hybrid functionals, including the ubiquitous B3LYP. PBE0 and the; B97 series are also quite good for many thermochemical problems. :ref:`LRC Functionals <table:dft_lrc>`; LRC functionals are a particular area of interest of the |PSIfour| DFT team.; LRC functionals are all denoted by a lower-case ""w"" in front of the standard DFA; functional, such as wPBE. We offer a stable implementation of the Gill; association function for wS and Head-Gordon's wB97/wB97X functionals.; Additionally, we are pleased to have recently completed a heavily conditioned; implementation of the HJS exchange-hole model, which provides an analytical form; for the short-range enhancement factor for wPBE, wPBEsol, and wB88. From a; physics perspective, this implementation of wPBE is extremely useful for; theoretical investigations, as it is parameter free, and properly integrated; against the partition function in the exchange hole. We would like to thank Dr.; Scuseria for providing helpful advice and a reference implementations of the; older HSE exchange-hole model which led to the successful implementation of the; HJS model. :ref:`Double-Hybrid Functionals <table:dft_dhybrid>`; Double hybrids are percolating into |PSIfour|. Note that these are; only available with density-fitted, not conventional, MP2 algorithms. :ref:`-D Functionals <table:dft_disp>`; We have several -D2 functionals implemented. -D3 functionls are available; with the installation of Grimme's :ref:`DFTD3 program <sec:dftd3>`.; For now, the pure-GGA B97-D; functional of Grimme is remarkably accurate, and the hybrid B3LYP-D; functional is also quite reliable. Note: we have made a sincere effort to rigorously test all functionals; implemented in |PSIfour| for correctness. If you find an error in a DFT; functional or have a request for a new fu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:19854,integrat,integrated,19854,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['integrat'],['integrated']
Deployability,"; list(APPEND sources; data_collection_helper; db_helper; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting/findif_response_utils); endforeach(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/findif_response_utils/CMakeLists.txt:635,install,install,635,psi4/driver/procrouting/findif_response_utils/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/findif_response_utils/CMakeLists.txt,1,['install'],['install']
Deployability,"; list(APPEND sources; dft_builder; lda_functionals; libxc_functionals; mgga_functionals; superfunctionals; dh_functionals; gga_functionals; hyb_functionals; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting/dft); endforeach(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/CMakeLists.txt:735,install,install,735,psi4/driver/procrouting/dft/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/dft/CMakeLists.txt,1,['install'],['install']
Deployability,"; list(APPEND sources; efp; pol_embed; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting/solvent); endforeach(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/CMakeLists.txt:616,install,install,616,psi4/driver/procrouting/solvent/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/solvent/CMakeLists.txt,1,['install'],['install']
Deployability,"; list(APPEND sources; fisapt_proc; sapt_jk_terms; sapt_mp2_terms; sapt_proc; sapt_sf_terms; sapt_util; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting/sapt); endforeach(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/CMakeLists.txt:681,install,install,681,psi4/driver/procrouting/sapt/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/sapt/CMakeLists.txt,1,['install'],['install']
Deployability,"; list(APPEND sources; scf_iterator; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting/scf_proc); endforeach(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/CMakeLists.txt:614,install,install,614,psi4/driver/procrouting/scf_proc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/scf_proc/CMakeLists.txt,1,['install'],['install']
Deployability,"; list(APPEND sources; scf_products; scf_response; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting/response); endforeach(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/CMakeLists.txt:628,install,install,628,psi4/driver/procrouting/response/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/response/CMakeLists.txt,1,['install'],['install']
Deployability,"; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy acce",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:2150,install,installs,2150,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['install'],['installs']
Deployability,"================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:ddx>`, :ref:`PSI Variables <apdx:ddx_psivar>`. .. image:: https://img.shields.io/badge/home-ddx-informational.svg; :target: https://github.com/ddsolvation/ddX. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://ddsolvation.github.io/ddX/. |PSIfour| contains code to interface to the ddx FORTRAN library developed; by A. Mikhalev *et. al.*. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111]_ [Stamm:2016:054101]_.; Currently the conductor-like screening model (COSMO) [Klamt:1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation mode",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:2238,configurat,configuration,2238,doc/sphinxman/source/ddx.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst,1,['configurat'],['configuration']
Deployability,"=================. .. codeauthor:: T. Daniel Crawford; .. sectionauthor:: T. Daniel Crawford. *Module:* :ref:`PSI Variables <apdx:ccenergy_psivar>`. *Module:* :ref:`Keywords <apdx:ccenergy>`, :source:`CCENERGY <psi4/src/psi4/cc/ccenergy>`. *Module:* :ref:`Keywords <apdx:cceom>`, :source:`CCEOM <psi4/src/psi4/cc/cceom>`. *Module:* :ref:`Keywords <apdx:ccresponse>`, :source:`CCRESPONSE <psi4/src/psi4/cc/ccresponse>`. *Module:* :ref:`Keywords <apdx:cctriples>`, :source:`CCTRIPLES <psi4/src/psi4/cc/cctriples>`. *Module:* :ref:`Keywords <apdx:ccdensity>`, :source:`CCDENSITY <psi4/src/psi4/cc/ccdensity>`. *Module:* :ref:`Keywords <apdx:cchbar>`, :source:`CCHBAR <psi4/src/psi4/cc/cchbar>`. *Module:* :ref:`Keywords <apdx:cclambda>`, :source:`CCLAMBDA <psi4/src/psi4/cc/cclambda>`. The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuration; interaction, coupled cluster uses an exponential expansion,. .. math::; :label: CCexpansion. | \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,. where the cluster operator :math:`{\hat{T}}` is written as a sum of operators that; generate singly-excited, doubly-excited, *etc.*, determinants:. .. math:: {\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},. with. .. math::. {\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,. *etc.* The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982]_ truncates the expansion at :math:`{\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}`. This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves up",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:2166,configurat,configuration,2166,doc/sphinxman/source/cc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst,1,['configurat'],['configuration']
Deployability,"=============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument::; 	; 	python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). 3. As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_cube the alpha molec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:7889,install,installed,7889,doc/sphinxman/source/cubeprop.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst,1,['install'],['installed']
Deployability,"=======================================. .. codeauthor:: D. G. A. Smith; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-gau2grid-5077AB.svg; :target: https://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:2177,install,installed,2177,doc/sphinxman/source/gau2grid.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst,1,['install'],['installed']
Deployability,"===============================================. .. codeauthor:: D. E. Shaw Research; .. sectionauthor:: Shannon E. Houck. .. image:: https://img.shields.io/badge/home-sns--mp2-5077AB.svg; :target: https://github.com/DEShawResearch/sns-mp2. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/DEShawResearch/sns-mp2/blob/master/README.md. This plugin is an implementation of the SNS-MP2 algorithm developed by McGibbon ; et. al. [McGibbon:2017:161725]_. The SNS-MP2 method uses neural networking to ; improve the accuracy of MP2 (:ref:`sec:dfmp2`) interaction energies for dimer molecules.; The plugin is distributed under the 2-clause BSD license. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/snsmp2/badges/version.svg; :target: https://anaconda.org/psi4/snsmp2. * snsmp2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the Psi4conda installer, snsmp2 has already been installed alongside. * If using the |PSIfour| conda package, the snsmp2 conda package can; be obtained through ``conda install snsmp2 -c psi4`` or ``conda install; psi4-rt -c psi4``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; snsmp2 can be obtained through ``conda install snsmp2 -c psi4``.; Then, hint its location with :envvar:`PYTHONPATH`. * To remove a conda installation, ``conda remove snsmp2``. **Source**. * .. image:: https://img.shields.io/github/tag/DEShawResearch/sns-mp2.svg?maxAge=2592000; :target: https://github.com/DEShawResearch/sns-mp2. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/DEShawResearch/sns-mp2. * Once dowloaded, the plugin can be installed as outlined in the documentation:. .. code-block:: bash. >>> cd {top-level-sns-mp2-directory}; >>> PSI4_PYTHON=$(head $(which psi4) -n 1 | sed -r 's/^.{2}/",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_snsmp2.rst:2135,install,installer,2135,doc/sphinxman/source/plugin_snsmp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_snsmp2.rst,2,['install'],"['installed', 'installer']"
Deployability,"=============================================================================================. .. codeauthor:: Anthony J. Stone, Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. *Module:* :ref:`Keywords <apdx:gdma>`, :ref:`PSI Variables <apdx:gdma_psivar>`, :source:`GDMA_INTERFACE<psi4/src/psi4/gdma_interface>`. .. image:: https://img.shields.io/badge/home-gdma-5077AB.svg; :target: https://github.com/psi4/gdma. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, developed by Anthony J.; Stone and implemented by him into the `GDMA package; <http://www-stone.ch.cam.ac.uk/programs.html>`_, is availab",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:2230,install,installed,2230,doc/sphinxman/source/gdma.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst,2,['install'],"['install', 'installed']"
Deployability,">> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --test``. Configuration for this set-up is summarized at; :ref:`faq:runfrombinary`. **Details:**. * It is advised to place |PSIfour| into a conda; environment where its libraries can't interfere with other prog",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6821,install,installs,6821,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['install'],"['installer', 'installs']"
Deployability,">>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; .. Extracting packages ...; .. [ COMPLETE ]|#######################################################################################################| 100%; .. Linking packages ...; ..; ..; .. Thank you for installing psi4. Additional resources:; .. Website: www.psicode.org; .. Inputs: /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/share/psi4/samples; .. Manual: http://psicode.org/psi4manual/master/index.html; .. GitHub: https://github.com/psi4/psi4/wiki; .. Binary: https://anaconda.org/psi4; .. Youtube: https://www.youtube.com/user/psitutorials; ..; .. For csh/tcsh command-line use, add to shell or ~/.tcshrc file:; .. unsetenv PSIDATADIR; .. setenv PATH /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/bin:$PATH; .. setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/disk/for/scratch/files; ..; .. For sh/bash command-line use, add to shell or ~/.bashrc file:; .. unset PSIDATADIR; .. export PATH=/theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/bin:$PATH; .. export PSI_SCRATCH=/path/to/existing/writable/local-not-network/disk/for/scratch/files; ..; .. Report problems at http://forum.psicode.org/t/report-conda-update-psi4-oddities-here/32; ..; ..; .. Nuclear Repulsion Energy...................",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:23765,install,installing,23765,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installing']
Deployability,"AL ENERGY; CCSDT(Q)/A CORRELATION ENERGY; CCSDT(Q)/B TOTAL ENERGY; CCSDT(Q)/B CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:23748,configurat,configuration,23748,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: ; FCHK; Gaussian Formatted Checkpoint. .. _`sec:fchk`:. Interface to programs through FCHK files |w---w| :py:func:`~psi4.driver.fchk()`; ===============================================================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. Many post-processing tools can read information from `Gaussian's formatted; checkpoint (FCHK) files <https://gaussian.com/formchk/>`_.; To allow interoperability with such tools, |PSIfour| includes a utility to; generate FCHK files. Wavefunction information, such as orbitals, densities,; orbital energies and basis set information is currently supported, but geometry; optimization and vibrational frequency information are not supported at this; time. To generate a FCHK file, simply store the wavefunction from the energy; calculation, and hand it to the fchk driver function::. energy, wfn = energy('scf', return_wfn=True); fchk(wfn,'output.fchk'). The file will be written to the name passed to the fchk function.; Note that for MP2 and CCSD methods, the energy can be computed without; the expensive steps required to compute the density, so energy calls for these; methods will return a wavefunction that has the Hartree--Fock density. If a; density is required for these methods, the user should instead request a; gradient computation, to ensure that the density is updated appropriately::. grad, wfn = gradient('mp2', return_wfn=True); fchk(wfn,'output.fchk'). .. autofunction:: psi4.fchk(wfn, filename); :noindex:. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst:2442,update,updated,2442,doc/sphinxman/source/fchk.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fchk.rst,1,['update'],['updated']
Deployability,"ANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:1587,release,releaseprocedure,1587,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['releaseprocedure']
Deployability,"ARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:25601,install,installed,25601,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installed']
Deployability,"Analysis. .. _`sec:gdma`:. Interface to GDMA Distributed Multipole Analysis by A. J. Stone |w---w| :py:func:`~psi4.driver.gdma`; ====================================================================================================. .. codeauthor:: Anthony J. Stone, Andrew C. Simmonett; .. sectionauthor:: Andrew C. Simmonett. *Module:* :ref:`Keywords <apdx:gdma>`, :ref:`PSI Variables <apdx:gdma_psivar>`, :source:`GDMA_INTERFACE<psi4/src/psi4/gdma_interface>`. .. image:: https://img.shields.io/badge/home-gdma-5077AB.svg; :target: https://github.com/psi4/gdma. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www-stone.ch.cam.ac.uk/documentation/gdma/manual.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gdma/badges/version.svg; :target: https://anaconda.org/psi4/gdma. * GDMA is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gdma has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gdma can be obtained through ``conda install gdma -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_gdma`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gdma and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gdma from conda without thinking, consult. * To remove a conda installation, ``conda remove gdma``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/gdma.svg?maxAge=2592000; :target: https://github.com/psi4/gdma. * If using |PSIfour| built from source and you want gdma built from; from source also,; enable it as a feature with :makevar:`ENABLE_gdma`,; and let the build system fetch and build it and activate dependent code. Input; ~~~~~. The distributed multipole analysis (DMA) technique, ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:2125,install,installed,2125,doc/sphinxman/source/gdma.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst,1,['install'],['installed']
Deployability,"Any files which; have been altered (and for which no conflicts with newer versions; exist!) will be identified and checked in to the main repository (as; well as the new file in the second situation). SVN requires that you include a comment on your changes. However,; unlike CVS, SVN prefers that you put your comments on the command-line; rather than editing a text file. I prefer the CVS way, but this is a; minor pain compared to all the advantages of SVN, in my opinion. \subsection{Adding entirely new code to the main \PSIfour\ repository} ; \label{checkin_new}. If the programmer is adding a new executable module or library to the; \PSIfour\ repository, a number of important conventions should be followed:. \begin{enumerate}; \item Since such changes almost always involve additional functionality,; new modules or libraries should be added only on the main SVN trunk.; See section \ref{section:branches} for additional information. \item The directory containing the new code should be given a name; that matches the name of the installed code (e.g. if the code will; be installed as \module{newcode}, the directory containing the code; should be named \file{newcode}). New executable modules must be; placed in \shellvar{\$PSI4}\file{/src/bin} and libraries in; \shellvar{\$PSI4}\file{/src/lib} of the user's working copy. \item The Makefile should be converted to an input file for the; configure script (\file{Makefile.in} --- see any of the current; \PSIfour\ binaries for an example) and should follow the; conventions set up in all of the current \PSIfour\; \file{Makefiles}. This includes use of \file{MakeVars} and; \file{MakeRules}. \item New binaries should be added to the list contained in; \shellvar{\$PSI4}\file{/src/bin/Makefile.in} so that they will be; compiled automatically when a full compilation of the \PSIfour\; distribution occurs. This step is included in the sequence below. \item A documentation page should be included with the new code (see; section \ref{Docum",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:10454,install,installed,10454,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['install'],['installed']
Deployability,"Argument is the functional.; # A useful optional argument is nmax, the total number of electrons to; # strip out of the molecule, in this case, 2.; # Many optional arguments are available, see the python file; frac.frac_nuke('wb97', molecule=h2o, nmax = 2). Dispersion Corrections; ~~~~~~~~~~~~~~~~~~~~~~. :ref:`DFT-D dispersion corrections are discussed here. <sec:dftd3>`. :ref:`HF-3c and PBEh-3c dispersion and BSSE corrections are discussed here. <sec:gcp>`. :ref:`DFT-NL dispersion corrections are discussed here. <sec:dftnl>`. Recommendations; ~~~~~~~~~~~~~~~. The KS-DFT code is quite new, but relatively complete. During code development,; emphasis was placed on flexibility of functional technology, efficiency for; medium to large systems in difficult electronic environments (*e.g.*, compact; spatial extents, diffuse basis sets, low band-gaps, LRC and/or hybrid GKS; functionals), and time to code completion. We are very interested in optimizing; and extending the code, so expect performance gains and extensions to; gradients/hessians and TDDFT in future releases. Some rough guidelines for using the KS-DFT code are as follows,. * Use DF for the ERI algorithm wherever possible.; * |PSIfour| is a ""tight"" code, meaning we've set the default numerical cutoffs; for integrals, grids, and convergence criteria in such a way that you will often; get many more digits of precision than needed. You may be able to realize; additional speed gains by loosening some of these thresholds. See; :ref:`SCF Convergence <table:conv_scf>` for default convergence criteria.; * Read the literature to determine which functional technology to use. The world; contains far too many papers using B3LYP on noncovalent interactions without a -D. The ""best-practice"" input file for KS-DFT is::. memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; H; H 1 0.7; }. set {; basis cc-pvdz; scf_type df; guess sad; }. energy('b3lyp'). .. _`sec:dftdictbuilder`:. Advanced Functional Use and M",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:32134,release,releases,32134,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['release'],['releases']
Deployability,"As noted previously, we want to start from a code that's not too tightly; integrated with the \PSIfour\ code itself, so we begin with a \file{Makefile}; that will allow us to write a standalone code that includes all requisite \PSI\; libraries. We're going to write a small sample code that generates integrals,; which involves two just two source files. We begin by defining a; \file{Makefile} that will include all of the \PSIfour\ libraries and header; files, so that we can take full advantage of the wide range of features; implemented without having to worry about the details of their implementation. \includesource{sample-codes/integrals/Makefile}{make}. Only a few lines of this makefile need to be modified to utilize it for other; programming projects; we'll concentrate on them. On the second line, we define; the name of the executable to be generated, in this example we opt for the; unimaginative title of \module{integrals}. Line 4 provides the list of source files; that the project comprises; these will be detailed below. The top source; directory for the \PSIfour\ installation and the top object directory (where; \PSIfour\ was compiled) should be provided on lines 6 and 8, respectively.; Lines 10 and 11 describe the flags needed to link in the \module{BLAS} and; \module{LAPACK} libraries and might need a combination of ``\file{-L; folder\_name}'' and ``\file{-l library\_name}'', depending on your system's; setup. Finally, the compiler and flags are detailed on lines 12--17. It's a; good idea to use the flags described on line 16 for development; they speed up; code compilation and provide lots of information for standard debugging tools.; As noted in the \file{Makefile} itself, nothing below line 17 should require; modification for any other \PSIfour\ project. The \PSIfour\ driver program provides a lot of functionality that we forgo in; writing a standalone code; this is instead emulated in the {\tt main.cc} file,; shown below. \includesource{sample-codes/integr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst:74,integrat,integrated,74,doc/sphinxman/source/attic/progtutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst,1,['integrat'],['integrated']
Deployability,"C and A/B) gets one electron [Luu:2023:356]_. This electron is placed on a hybrid orbital of the connecting atom; pointing in the direction of the interfragment bond. Several schemes for determining this link hybrid were proposed ; in [Luu:2023:356]_ and they all are implemented in |PSIfour|. We recommend the so-called *SIAO1* scheme,; ``fisapt_link_assignment siao1``, as it has been observed to provide consistently meaningful I-SAPT terms and a; smooth basis set convergence. The SIAO1 name implies that the projection to construct the link hybrids happens in the; intrinsic atomic orbital space (as opposed to the SAO1 method where the standard atomic orbital space is used), with; one iteration of fragment orbital optimization and link orbital orthogonalization, a process that very quickly ; achieves self-consistency. Altogether, the allowed values for |fisapt__fisapt_link_assignment| are ``c`` (default),; ``ab`` (the opposite of ``c`` where the entire linking pair is assigned to A/B), ``sao0``, ``sao1``, ``sao2``,; ``siao0``, ``siao1`` (recommended for all I-SAPT applications), and ``siao2`` (essentially identical to ``siao1`` but; slightly more expensive). Advanced I-SAPT Keywords for SAOn/SIAOn Partitionings; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/fisapt__fisapt_link_ortho.rst; .. include:: autodir_options_c/fisapt__fisapt_exch_parperp.rst; .. include:: autodir_options_c/fisapt__fisapt_cube_linkibos.rst; .. include:: autodir_options_c/fisapt__fisapt_cube_linkihos.rst; .. include:: autodir_options_c/fisapt__fisapt_cube_densmat.rst. Other F/I-SAPT Keywords; ^^^^^^^^^^^^^^^^^^^^^^^. The input files described above cover roughly 90% of all F/I-SAPT analyses. For; more delicate or involved problems, there are a large number of user options; that permit the customization of the I-SAPT subsystem partition, the convergence; of the IBO localization procedure, numerical thresholds, etc. We have an entire; `video tutorial devoted ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:19093,A/B,A/B,19093,doc/sphinxman/source/fisapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst,1,['A/B'],['A/B']
Deployability,"CENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ fla",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:1794,install,install,1794,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability,"DFDIRJ as the Coulomb construction ; algorithm when specifying |globals__scf_type| to use a composite algorithm combination (``DFDIRJ+K_alg`` in general, ; or ``DFDIRJ`` for DFT with non-hybrid functionals). . DFDIRJ supports multiple capabilities to improve performance. Specifically, DFDIRJ allows for a combination of density-matrix based ERI ; screening (set |globals__screening| to ``DENSITY``) and incremental Fock matrix construction (set |scf__incfock| to ``TRUE``). These two, when combined,; enable more aggressive screening of ERI contributions to the Coulomb matrix and thus greatly improve performance. .. _`sec:scfcosx`:. COSX Exchange; ~~~~~~~~~~~~~. The semi-numerical COSX algorithm described in [Neese:2009:98]_ evaluates; two-electron ERIs analytically over one electron coordinate and numerically; over the other electron coordinate, and belongs to the family of pseudospectral ; methods originally suggested by Friesner. In COSX, numerical integration is performed on standard; DFT quadrature grids, which are described in :ref:`sec:dft`.; Both the accuracy of the COSX algorithm and also the computational; cost are directly determined by the size of the integration grid, so selection; of the grid is important. This COSX implementation uses two separate grids.; By default, the SCF algorithm is first converged on a smaller grid, followed by a; number of SCF iterations up to a maximum value (controlled by the |scf__cosx_maxiter_final| keyword); on a larger grid. By default, |scf__cosx_maxiter_final| is set to 1, a single; SCF iteration, which results in numerical errors comparable to; performing the entire SCF on the expensive larger grid at a computational cost; much closer to the smaller grid. Setting |scf__cosx_maxiter_final| to 0 disables the; larger grid entirely. Setting |scf__cosx_maxiter_final| to -1 allows; for the SCF to fully converge on the larger grid, useful for the study of wavefunction; properties such as gradients. The size of the initial grid is ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:38895,integrat,integration,38895,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['integrat'],['integration']
Deployability,"D}/source/autodoc_capabilities_ccenergy.rst; ${CCBD}/source/autodoc_capabilities_fnocc.rst; ${CCBD}/source/autodoc_capabilities_dfmp2.rst; ${CCBD}/source/autodoc_capabilities_occ_oo.rst; ${CCBD}/source/autodoc_capabilities_occ_nonoo.rst; ${CCBD}/source/autodoc_capabilities_scf.rst; ${CCBD}/source/api/psi4.core.set_variable.rst; ${CCBD}/source/autodoc_dft_energy.rst; ${CCBD}/source/autodoc_dft_opt.rst; ${CCBD}/source/autodoc_dft_all.rst; ${CCBD}/source/autodoc_dft_gga.rst; ${CCBD}/source/autodoc_dft_meta.rst; ${CCBD}/source/autodoc_dft_lrc.rst; ${CCBD}/source/autodoc_dft_hybrid.rst; ${CCBD}/source/autodoc_dft_dhybrid.rst; #${CCBD}/source/autodoc_dft_scsdhybrid.rst # commented until populated again to appease Sphinx; ${CCBD}/source/autodoc_dft_disp.rst; ${CCBD}/source/autodoc_basissets_byfamily.rst; ${CCBD}/source/autodoc_available_efpfrag.rst; COMMENT ""Preparing Sphinx HTML documentation build""); add_dependencies(sphinxman psi4-core). install(; DIRECTORY ${CCBD}/html; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DOCDIR}; OPTIONAL). add_custom_target(linkcheck; DEPENDS sphinxman; COMMENT ""Preparing Sphinx linkcheck documentation build""). add_custom_command(; TARGET linkcheck POST_BUILD; COMMAND ${SPHINX_EXECUTABLE}; -b linkcheck # builder; -d ${CCBD}/_doctrees # cache w/ pickled reST; -c ${CCBD}/source # whereabouts of conf.py; ${CCBD}/source # build from; ${CCBD}/latex # build to; COMMENT ""Building linkcheck documentation ...""). # * full, proper build with LaTeX; if (LATEX_COMPILER AND PDFLATEX_COMPILER); add_custom_target(sphinxpdf; DEPENDS sphinxman; COMMENT ""Preparing Sphinx HTML and PDF documentation build""). # * full, proper build with latex builder; add_custom_command(; TARGET sphinxpdf POST_BUILD; COMMAND ${SPHINX_EXECUTABLE}; -b latex # builder; -d ${CCBD}/_doctrees # cache w/ pickled reST; -c ${CCBD}/source # whereabouts of conf.py; ${CCBD}/source # build from; ${CCBD}/latex # build to; COMMENT ""Building latex documentation ...""); add_custom_command(;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:22597,install,install,22597,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['install'],['install']
Deployability,"E; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:documentation`:. Updating the |PSIfour| Users' and Programmers' Manual; =====================================================. |PSIfours| documentation is generated by `Sphinx <https://www.sphinx-doc.org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentation Structure; ^^^^^^^^^^^^^^^^^^^^^^^. Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in the same; format, hyperlinking within and to external websites, and generating; documentation in different formats from the same source. |PSIfours|; documentation is a unified document covering information for both users; and programmers in separate sections. From the top-level object directory,; build the following target (note that a working version of the |PSIfour|; executable is a requirement for building the; documentation). Only GNU Makefiles, not Ninja, works for the docs:. .. code-blo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:2001,install,install,2001,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['install'],['install']
Deployability,"E_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<<",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:1960,install,install,1960,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability,"Etotal......................................................PASSED; ..; .. [ COMPLETE ]|#######################################################################################################| 100%. 7. Configure environment. Preceding steps have placed ``conda`` and ``psi4`` in your :envvar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| n",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26128,install,installation,26128,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installation']
Deployability,"Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they're called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). * If the previous release hasn't had a snapshot saved, copy ``construct.yaml`` into a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to trigger installer builds. (Even workflow edits need a dummy commit to; ``construct.yaml`` to retrigger.); * When all build successfully, hover over the artifacts, and note the smallest and largest of the; near-consecutive numbers GH has assigned them. These artifacts only linger for a day.; * Log in to vergil root and cd to ``/var/www/html/psicode-download``.; * Use the pull_gha_installers.sh script to download the installers from GH to vergil. First two; arguments are first and last of ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:25481,release,release,25481,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"HOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1584,install,installs,1584,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installs']
Deployability,"Hub-Private](#forkpsi4private); .. comment ; .. comment * Just give me a repository to commit to directly. Preferably, [Goto Clone-from-GitHub](#clonepsi4public); otherwise [Goto Clone-from-GitHub-Private](#clonepsi4private). .. _`faq:binary`:. Binary Installer; ----------------. * **Get Initially**. Just go to http://www.psicode.org/downloads.html, select ""Installer"",; ""Stable Release"", and your choice of architecture and Python version,; and follow the instructions there. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4. * **Contribute Back**. Not applicable as not under git control. .. _`faq:binarypackage`:. Conda Binary Package; --------------------. * **Get Initially**. The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to :ref:`directions <faq:psi4pkg>`. Locally, install into; a conda environment as below. .. code-block:: bash. >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. .. code-block:: bash. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4 -c conda-forge. * **Contribute Back**. Not applicable as not under git control. .. _`faq:clonepsi4public`:. Clone from GitHub Repository; ----------------------------. * **Get Initially**. The |PSIfour| repository at https://github.com/psi4/psi4 works like; `every other GitHub repo; <https://help.github.com/articles/which-remote-url-should-i-use/>`_.; Locally, clone as below. .. code-block:: bash. # use https or ssh; >>> git clone http",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:5490,install,install,5490,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['install'],['install']
Deployability,"IX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 share/ & include/ >>>. install(DIRECTORY share/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4; MESSAGE_NEVER; PATTERN ""*.bin"" EXCLUDE; PATTERN ""*.pyc"" EXCLUDE). install(FILES share/psi4/quadratures/1_x/R_avail${_endian_ext}.bin; RENAME quadratures/1_x/R_avail.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(FILES share/psi4/quadratures/1_x/error${_endian_ext}.bin; RENAME quadratures/1_x/error.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(DIRECTORY include/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}/psi4). # <<< install external's share/ to psi4 share/ >>>. if(TARGET libefp::efp); # bring libefp's fraglib to PSIDATADIR's attention; set(_fraglib_in_psi4_dir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag). add_custom_target(consolidate_psidatadir ALL; VERBATIM; COMMAND ${CMAKE_COMMAND} -E make_directory ${_fraglib_in_psi4_dir}; COMMENT ""Symlink external res",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:12635,install,install,12635,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability,"KE_CURRENT_BINARY_DIR}/metadata.py; --cmakeout ${CMAKE_CURRENT_BINARY_DIR}/metadata.cmake; COMMAND ${CMAKE_COMMAND} -DWTO=""${CMAKE_CURRENT_BINARY_DIR}/${CMAKECONFIG_INSTALL_DIR}""; -DPN=""psi4""; -P ${CMAKE_CURRENT_BINARY_DIR}/metadata.cmake; WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}; COMMENT ""Generating version info""); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/metadata.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). # <<< Install >>>. # <<< install bin/ >>>; configure_file(run_psi4.py psi4 @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}). if(WIN32); # Generate a batch script, which wraps ""bin/psi4"" script to ""python bin/psi4""; configure_file(psi4.bat psi4.bat @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4.bat; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}); endif(). # <<< install lib/ >>>; if(NOT ENABLE_CYTHONIZE); install(DIRECTORY driver; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; FILES_MATCHING; PATTERN ""*.py""; PATTERN pytest EXCLUDE; ); endif(). install(FILES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_ref",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:10290,install,install,10290,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,2,['install'],['install']
Deployability,"Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: geometry optimization, optimization. .. _`sec:optking`:. Geometry Optimization; =====================. .. codeauthor:: Rollin A. King and Alexander G. Heide; .. sectionauthor:: Rollin A. King, Alexander G. Heide, and Lori A. Burns. *Module:* :ref:`Keywords <apdx:optking>`, `OPTKING <https://github.com/psi-rking/optking>`_. |PSIfour| carries out molecular optimizations using a Python module called; optking. The optking program takes as input nuclear gradients and,; optionally, nuclear second derivatives |w---w| both in Cartesian coordinates.; The default minimization algorithm employs an empirical model Hessian,; redundant internal coordinates, an RFO step with trust radius scaling, and the BFGS Hessian update. The principal literature references include the introduction of redundant; internal coordinates by Peng et al. [Peng:1996:49]_.; The general approach employed in this code; is similar to the ""model Hessian plus RF method"" described and tested by Bakken and; Helgaker [Bakken:2002:9160]_. However, for separated; fragments, we have chosen not to employ their ""extra-redundant"" coordinates. The internal coordinates are generated automatically based on an assumed bond; connectivity. The connectivity is determined by testing if the interatomic; distance is less than the sum of atomic radii times the value of; |optking__covalent_connect|. If the user finds that some; connectivity is lacking by default, then this value may be increased. .. warning:: The selection of a Z-matrix input, and in particular the inclusion; of dummy atoms, has no effect on the behavior of the optimizer, which begins; from a Cartesian",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:1793,update,update,1793,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['update'],['update']
Deployability,"N ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 share/ & include/ >>>. install(DIRECTORY share/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4; MESSAGE_NEVER; PATTERN ""*.bin"" EXCLUDE; PATTERN ""*.pyc"" EXCLUDE). install(FILES share/psi4/quadratures/1_x/R_avail${_endian_ext}.bin; RENAME quadratures/1_x/R_avail.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(FILES share/psi4/quadratures/1_x/error${_endian_ext}.bin; RENAME quadratures/1_x/error.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(DIRECTORY include/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}/psi4). # <<< install external's share/ to psi4 share/ >>>. if(TARGET libefp::efp); # bring libefp's fraglib to PSIDATADIR's attention; set(_fraglib_in_psi4_dir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag). add_custom_target(consolidate_psidatadir ALL; VERBATIM; COMMAND ${CMAKE_COMMAND} -E make_directory ${_fraglib_in_psi4_dir}; COMMENT ""Symlink external resources into PSIDATADIR""). file(GLOB _dotefps ""${libefp_FRAGLIB_DIRS}/*.efp""); foreach(_dotefp ${_dotefps}); get_filename_component(_efpfile ${_dotefp} NAME); add_custom_command(TARGET consolidate_psidatadir; POST_BUIL",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:12835,install,install,12835,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability,"NITIONS INTERFACE_COMPILE_OPTIONS INTERFACE_INCLUDE_DIRS INTERFACE_LINK_LIBRARIES). get_property(_ill TARGET lapk PROPERTY INTERFACE_LINK_LIBRARIES); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found LAPACK${isMKL}${ColourReset}: ${_ill0};...""). if(NOT (${isMKL} MATCHES ""MKL"")); message(WARNING ""${Yellow}MKL is the only BLAS/LAPACK distribution thoroughly tested with Psi4. Several others are mostly fine, with problems cropping up in particular modules or when running in threaded mode. When using a non-MKL distribution, please run the test suite in full and also run particular tests in threaded mode, if you plan to run Psi4 threaded. MKL is freely available through conda; see instructions to compile against conda MKL through the 'source' option on the download website page. OpenBLAS also seems to work, but be sure you're using the OpenMP, not the pthreads, variant.${ColourReset}""); endif(). unset(BLAS_LIBRARIES); unset(LAPACK_LIBRARIES); unset(BLAS_INCLUDE_DIRS); unset(LAPACK_INCLUDE_DIRS). set(PN ${PROJECT_NAME}); install(TARGETS blas lapk lapack; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetLAPACK_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake""; INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/FindTargetOpenMP.cmake; ${CMAKE_CURRENT_SOURCE_DIR}/FindMathOpenMP.cmake; DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(EXPORT ""${PN}Targets""; NAMESPACE ""tgt::""; DESTINATION ${CMAKECONFIG_INSTALL_DIR}). add_custom_target(lapack_external; ${CMAKE_COMMAND} ""-DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}"" -P ""${PROJECT_BINARY_DIR}/cmake_install.cmake""; COMMENT ""Installing Psi4-detected BLAS/LAPACK""). set(${PN}_DIR ${STAGED_INSTALL_PREFIX}/${TargetLAPACK_INSTALL_CMAKEDIR} CACHE PATH ""path to externally detected ${PN}Config.cmake"" FORCE); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt:2807,install,install,2807,external/common/lapack/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/lapack/CMakeLists.txt,3,['install'],['install']
Deployability,"NTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_qcengine}); message(VERBOSE ""Suitable qcengine located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_qcengine}); message(FATAL_ERROR ""Suitable qcengine could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable qcengine could not be located, ${Magenta}Building qcengine${ColourReset} instead.""). file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/"" _install_bin); file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/bin/"" _pip_install_bin); if(WIN32); set(_qcengineexe ""qcengine.exe""); else(); set(_qcengineexe ""qcengine""); endif(). # Note: Without downgrading setuptools or `sed`ing ""git_refnames"" (_version.py for versioneer-generated),; # pip will strenuously resist (""Invalid version: <branch or commit>"") arbitrary branch or commit refs from GH.; # Make a proper PEP440 tag (e.g., `git tag -a v0.26.0.dev1 -m ""v0.26.0.dev1""`), push it, and use in URL below.; #; # With downgrading to (setuptools""<66.0.0"" packaging""<23.0"" ; former vendors latter), one can use arbitrary; # branch or commit tarballs without the tagging procedure described above. ExternalProject_Add(qcengine_external; DEPENDS qcelemental_external; BUILD_ALWAYS 1; URL https://github.com/MolSSI/QCEngine/archive/v0.29.0.tar.gz; DOWNLOAD_NO_EXTRACT 1; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND """"; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} -m pip install <DOWNLOADED_FILE>; --target=${_install_lib}; --no-deps; #-v; ); ExternalProject_Add_Step(qcengine_external; fix_qcng_bin; DEPENDEES install; COMMAND ${CMAKE_COMMAND} -E copy ""${_pip_install_bin}${_qcengineexe}"" ""${_install_bin}${_qcengineexe}""; COMMENT ""Moves qcengine entry-point into place alongside bin/psi4 for `qcengine info`""; ); endif(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/qcengine/CMakeLists.txt:1945,install,install,1945,external/upstream/qcengine/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/qcengine/CMakeLists.txt,2,['install'],['install']
Deployability,NT_SOURCE_DIR}/G.cc; ${CMAKE_CURRENT_SOURCE_DIR}/GL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L1FL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L3_AAA.cc; ${CMAKE_CURRENT_SOURCE_DIR}/L3_AAB.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lamp_write.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lmag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lnorm.cc; ${CMAKE_CURRENT_SOURCE_DIR}/Lsave.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WabeiL1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WefabL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WejabL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WijmbL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WijmnL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/WmbejL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/c_clean.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Gai.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_L1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_L2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_faeL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_fmiL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_l3l1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_l3l2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_t3x.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_t3z.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cclambda.cc; ${CMAKE_CURRENT_SOURCE_DIR}/check_ortho.cc; ${CMAKE_CURRENT_SOURCE_DIR}/check_sum.cc; ${CMAKE_CURRENT_SOURCE_DIR}/converged.cc; ${CMAKE_CURRENT_SOURCE_DIR}/denom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dijabL2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/halftrans.cc; ${CMAKE_CURRENT_SOURCE_DIR}/hbar_extra.cc; ${CMAKE_CURRENT_SOURCE_DIR}/init_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/local.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ortho_Rs.cc; ${CMAKE_CURRENT_SOURCE_DIR}/overlap.cc; ${CMAKE_CURRENT_SOURCE_DIR}/projections.cc; ${CMAKE_CURRENT_SOURCE_DIR}/pseudoenergy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sort_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/spinad_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/status.cc; ${CMAKE_CURRENT_SOURCE_DIR}/update.cc; ); ,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cclambda/CMakeLists.txt:2178,update,update,2178,psi4/src/psi4/cc/cclambda/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/cclambda/CMakeLists.txt,1,['update'],['update']
Deployability,"O ""http://vergil.chemistry.gatech.edu/download/Psi4conda-latest-py35-MacOSX-x86_64.sh"" --keepalive-time 2; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-MacOSX-x86_64.sh"" -o Psi4conda-latest-py38-MacOSX-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-MacOSX-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bash_profile; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Windows; # py38 only python version; # download via button at https://psicode.netlify.app/installs/latest with ""Windows"", ""Installer"", and ""Stable Release"" selected; >>> # install via GUI by double-clicking downloaded `.exe` file analogous to https://conda.io/projects/conda/en/latest/user-guide/install/windows.html; >>> # -OR- install via following line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:6055,install,install,6055,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"OME/miniconda/bin/psi4``. .. code-block:: bash. # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole ins",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17277,install,install,17277,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"ORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 share/ & include/ >>>. install(DIRECTORY share/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4; MESSAGE_NEVER; PATTERN ""*.bin"" EXCLUDE; PATTERN ""*.pyc"" EXCLUDE). install(FILES share/psi4/quadratures/1_x/R_avail${_endian_ext}.bin; RENAME quadratures/1_x/R_avail.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(FILES share/psi4/quadratures/1_x/error${_endian_ext}.bin; RENAME quadratures/1_x/error.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(DIRECTORY include/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}/psi4). # <<< install external's share/ to psi4 share/ >>>. if(TARGET libefp::efp); # bring libefp's fraglib to PSIDATADIR's attention; set(_fraglib_in_psi4_dir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag). add_custom_target(consolidate_psidatadir ALL; VERBATIM; COMMAND ${CMAKE_COMMAND} -E make_directory ${_fraglib_in_psi4_dir}; COMMENT ""Symlink external resources into PSIDATADIR""). file(GLOB _dotefps ""${libefp_FRAGLIB_DIRS}/*.efp""); foreac",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:12671,install,install,12671,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability,"OT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* also present).; If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake. C. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. D. Build with Intel MKL. .. code-block:: bash. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. .. code-block:: bash. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. E. Build with Intel MKL from conda (install ``mkl-devel`` package from defaults channel). .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". F. OpenBLAS - see note below. .. code-block:: bash. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. G. Build with explicit MKL LAPACK. .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". H. Build with explicit non-MKL LAPACK. .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". I. Build with MKL and GCC (iomp5 needed instead of gomp for threading. use OpenMP_LIBRARY_DIRS to hint location.). .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=/opt/intel/mkl/lib/intel64/libmkl_rt.so -DLAPACK_INCLUDE_DIRS=/opt/intel/mkl/include -DOpenMP_LIBRARY_DIRS=/opt/intel/compiler/lib/intel64/. **Notes**. * Much of |PSIfours| sp",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:47937,install,install,47937,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability,"OUND}); get_property(_loc TARGET libefp::efp PROPERTY LOCATION); message(STATUS ""${Cyan}Found libefp${ColourReset}: ${_loc} (found version ${libefp_VERSION})""); add_library(libefp_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_libefp}); message(VERBOSE ""Suitable libefp located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_libefp}); message(FATAL_ERROR ""Suitable libefp could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable libefp could not be located, ${Magenta}Building libefp${ColourReset} instead.""); ExternalProject_Add(libefp_external; DEPENDS lapack_external; URL https://github.com/ilyak/libefp/archive/15cd7ce.tar.gz # v1.5.0 + 10 (docs and a cmake lapack patch); UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_DATADIR=${CMAKE_INSTALL_DATADIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; -DENABLE_OPENMP=OFF # Psi4 sometimes reacts poorly to threaded efp; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DINSTALL_DEVEL_HEADERS=ON; -DFRAGLIB_UNDERSCORE_L=OFF; -DFRAGLIB_DEEP=OFF; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DTargetOpenMP_FIND_COMPONENTS:STRING=C). set(libefp_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/libefp CACHE PATH ""path to internally built libefpConfig.cmake"" FORCE); endif(); else(); add_library(libefp_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libefp/CMakeLists.txt:863,patch,patch,863,external/upstream/libefp/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libefp/CMakeLists.txt,1,['patch'],['patch']
Deployability,"PROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, erd, gau2grid, gdma, Libin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:2472,install,install,2472,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability,"R A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:documentation`:. Updating the |PSIfour| Users' and Programmers' Manual; =====================================================. |PSIfours| documentation is generated by `Sphinx <https://www.sphinx-doc.org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentation Structure; ^^^^^^^^^^^^^^^^^^^^^^^. Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in the same; format, hyperlinking within and to external websites, and generating; documentation in different formats from the same source. |PSIfours|; document",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:1668,install,installation,1668,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['install'],['installation']
Deployability,"R}/${CMAKECONFIG_INSTALL_DIR}""; -DPN=""psi4""; -P ${CMAKE_CURRENT_BINARY_DIR}/metadata.cmake; WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}; COMMENT ""Generating version info""); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/metadata.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). # <<< Install >>>. # <<< install bin/ >>>; configure_file(run_psi4.py psi4 @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}). if(WIN32); # Generate a batch script, which wraps ""bin/psi4"" script to ""python bin/psi4""; configure_file(psi4.bat psi4.bat @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4.bat; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}); endif(). # <<< install lib/ >>>; if(NOT ENABLE_CYTHONIZE); install(DIRECTORY driver; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; FILES_MATCHING; PATTERN ""*.py""; PATTERN pytest EXCLUDE; ); endif(). install(FILES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/te",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:10517,install,install,10517,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability,"SE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:code_style`:. Code style conventions; ======================. It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; `clang-format <https://clang.llvm.org/docs/ClangFormat.html>`_ and `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framewor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:1990,integrat,integrating,1990,doc/sphinxman/source/code_style.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst,1,['integrat'],['integrating']
Deployability,"SIfour\; executables have been installed. The configure script in \$PSI4 ; will take all the necessary files in \$PSI4/tests; with the .in stub: Makefile.in, MakeRules.in, MakeVars.in,; and runtest.pl.in, replace variables with system specific parameters,; and copy/create the testing files and directories in \$prefix/tests.; The tests should be run in the object directory before installation. If you have just added a new module for performing, say multireference ; coupled cluster, and you would like to add a test case to the current ; test suite, here is what you should do. ; \begin{enumerate}; \item Copy one of the existing test case directories to an ; appropriately named directory for the new test case. \item Create an appropriate input file for running the new module. ; Then, if your program produced the correct data, rename; the output files to *.ref. Follow the convention of the ; existing test cases. Make sure you add a descriptive comment to the; input file, stating what the calculation type is. Use the special comment; marker ``\%!'' to do this, so that the comment is inserted into the user's; manual. \item If the test case is small, add the directory name to the list; in \$PSI4/tests/Makefile.in. If the test is particularly tricky,; see the psi\_start or rhf-stab test cases as an example. \item All the testing functionality is located in the perl library; \file{runtest.pl.in}. If you are testing for a quantity that; is not searched for currently, then add a function to the ; library following the format of the functions already available.; If you have added functionality to the \PSIfour\ driver,; make sure to update the appropriate functions in \file{runtest.pl.in}. \item Add the location of the Makefile for the new test case; to the configure script in \$PSI4. \end{enumerate}. Please contact one of the authors of \PSIfour\ before making any; major changes or if you have a problem adding a new test case.; Remember, if all else fails, read the source code. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst:1753,update,update,1753,doc/sphinxman/source/attic/progtestsuite.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst,1,['update'],['update']
Deployability,"STINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}). if(WIN32); # Generate a batch script, which wraps ""bin/psi4"" script to ""python bin/psi4""; configure_file(psi4.bat psi4.bat @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4.bat; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}); endif(). # <<< install lib/ >>>; if(NOT ENABLE_CYTHONIZE); install(DIRECTORY driver; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; FILES_MATCHING; PATTERN ""*.py""; PATTERN pytest EXCLUDE; ); endif(). install(FILES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATT",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11013,install,install,11013,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability,"Source files for; OS-independent header files, including \file{physconst.h} (whose; contents should be obvious from its name), \file{psifiles.h}, and; \file{ccfiles.h}, among others. These files are installed in; \$prefix/include. \item \shellvar{\$PSI4}\file{/src/util} -- Source code for the utility; program \module{tocprint}. (Note that the \module{tmpl} module is; no longer used and will eventually disappear.). \item \shellvar{\$PSI4}\file{/src/lib} -- Source code for the; libraries, including \library{libpsio}, \library{libipv1},; \library{libchkpt}, etc. The include files from the library; source are used directly during the compilation of PSI to ; avoid problems associated with incomplete installations. Some; include files are architecture-dependent and go in an include; subdirectory of the compilation (object) directory. \item \shellvar{\$PSI4}\file{/src/bin} -- Source code for the; executable modules.; \end{itemize}. After compilation and installation, the \file{\$prefix} directory; contains the executable codes and other necessary files. {\bf NB:}; The files in this area should never be directly modified; rather, the; working copy should be modified and the \PSIfour\ \file{Makefile}; hierarchy should handle installation of any changes. The structure of; the installation area is:. \begin{itemize}; \item \file{\$prefix/bin} -- The main executable directory. This; directory must be in your path in order for the driver program,; \module{PSI4}, to find the modules. \item \file{\$prefix/lib} -- The \PSIfour\ code libraries. (NB: The; description of \PSIfour\ \file{Makefiles} later in this manual will; explain how to use the libraries.). \item \file{\$prefix/include} -- Header files. These are not actually; used during the compilation of PSI but are useful for inclusion by; external programs because they are all in the same directory. \item \file{\$prefix/share} -- OS-independent data files, including; basis set information. (Do not edit this file directly; any ch",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:18167,install,installation,18167,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['install'],['installation']
Deployability,"T=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable ``CMAKE_INSTALL_PREFIX``; before compiling. * Build with Specific Install Directory. .. code-block:: bash. cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:21548,install,installed,21548,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installed']
Deployability,"TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you're changing the |PSIfour| repo codebase between compiles, there's; nothing more to do as CMake will handle the code rebuild deps for you. If you're changing the local Add-On repo codebase between compiles,; CMake *does not* know when ``libaddon.[a|so|dylib]`` needs rebuilding. It; is recommended that the |PSIfour| build be initially configured with; ``-DBUILD_SHARED_LIBS=ON`` (easier to notice changes). And to trigger; Add-On library rebuild, ``rm -rf {objdir}/external/upstream/addon/``; and ``rm -rf {objdir}/stage/share/cmake/AddOn``. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; |PSIfour| that interface to it, and relink the main ``core.so``.; If you're modifying the Add-On's file or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphaz",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68079,install,install,68079,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability,"TH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21033,install,install,21033,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"The \PSIfour\ test suite is designed to maximize code reuse and; provide testing in \$prefix before the \PSIfour\; executables have been installed. The configure script in \$PSI4 ; will take all the necessary files in \$PSI4/tests; with the .in stub: Makefile.in, MakeRules.in, MakeVars.in,; and runtest.pl.in, replace variables with system specific parameters,; and copy/create the testing files and directories in \$prefix/tests.; The tests should be run in the object directory before installation. If you have just added a new module for performing, say multireference ; coupled cluster, and you would like to add a test case to the current ; test suite, here is what you should do. ; \begin{enumerate}; \item Copy one of the existing test case directories to an ; appropriately named directory for the new test case. \item Create an appropriate input file for running the new module. ; Then, if your program produced the correct data, rename; the output files to *.ref. Follow the convention of the ; existing test cases. Make sure you add a descriptive comment to the; input file, stating what the calculation type is. Use the special comment; marker ``\%!'' to do this, so that the comment is inserted into the user's; manual. \item If the test case is small, add the directory name to the list; in \$PSI4/tests/Makefile.in. If the test is particularly tricky,; see the psi\_start or rhf-stab test cases as an example. \item All the testing functionality is located in the perl library; \file{runtest.pl.in}. If you are testing for a quantity that; is not searched for currently, then add a function to the ; library following the format of the functions already available.; If you have added functionality to the \PSIfour\ driver,; make sure to update the appropriate functions in \file{runtest.pl.in}. \item Add the location of the Makefile for the new test case; to the configure script in \$PSI4. \end{enumerate}. Please contact one of the authors of \PSIfour\ before making any; major chan",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst:137,install,installed,137,doc/sphinxman/source/attic/progtestsuite.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtestsuite.rst,2,['install'],"['installation', 'installed']"
Deployability,"The purpose of this manual is to provide a reasonably detailed; overview of the source code and programming philosophy of \PSIfour,; such that programmers interested in contributing to the code will have; an easier task. Section \ref{svn} gives a succint explanation of the; steps required to obtain the source code from the main repository at; Virginia Tech. (Installation instructions are given separately in the; installation manual or in \$PSI4/INSTALL.) \ref{Style} offers advice on; appropriate programming style for \PSIfour\ code, and section \ref{Makefiles}; describes the structure of the package's \file{Makefile}s. Section; The appendices provide important reference material,; including the currently accepted \PSIfour\ citation and format; information for some of the most important text files used by; \PSIfour\ modules. There are many examples included in this document to provide sample input files; and source files; these can be found in ASCII form in the \PSIfour\ source; itself. Each included file has a path, which is relative to; \$PSI4/doc/progman, as its title and this is where the unformatted file can be; found. The examples described herein can even be compiled from the directories; in which the source files are found. Mention the GPL and development policies... ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progman.rst:416,install,installation,416,doc/sphinxman/source/attic/progman.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progman.rst,1,['install'],['installation']
Deployability,"U Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1409,install,installs,1409,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installs']
Deployability,"UADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monome",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25147,configurat,configuration,25147,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,"WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:blaslapack`:. ===========================; Linear Algebra in |PSIfour|; ===========================. .. _`faq:blaswrappers`:. How to call BLAS & LAPACK in |PSIfour|; --------------------------------------. Computational chemistry is essentially linear algebra on molecular; systems, so using stable, portable, scalable, and efficient numerical; linear algebra methods in |PSIfour| is critical. To that end, we use BLAS1; (vector-vector operations, like dot products), BLAS2 (matrix-vector; operations, like rank-1 update), BLAS3 (matrix-matrix operations, like; matrix multiplication), and LAPACK (advanced matrix decompositions and; solutions). The methods provided by BLAS and LAPACK are standard, but the; performance of actual implementations differ greatly from one version to; another. Moreover, the standard interfaces to the libraries are Fortran,; so |PSIfour| provides a common set of wrappers in :source:`psi4/src/psi4/libqt/qt.h` . .. warning:: Although block_matrix, init_array, and print_mat are still; around, their use is discouraged in favor of operations on; `psi4.core.Matrix` itself. The advice in these docs will catch up; shortly. BLAS Wrappers; ^^^^^^^^^^^^^. BLAS wrappers are currently fully supported at double precision. BLAS commands involving matrices are wrapped so as to be conventional; C-style ""row-major"" indexing, meaning that the column is the fast index; like normal. * The calls to BLAS1 routines are wrapped so as to allow for operations on; vectors with more than 2^{31} elements",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst:1584,update,update,1584,doc/sphinxman/source/prog_blas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_blas.rst,1,['update'],['update']
Deployability,"[E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:49129,configurat,configuration,49129,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,"](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) |. <!-- -->; <!-- [![Last release date](https://img.shields.io/github/release-date/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) -->; <!-- [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github.com/psi4/psi4/pulls); -->. Psi4 is an open-source suite of *ab initio* quan",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:2719,release,releases,2719,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['release'],['releases']
Deployability,"], quadrupoles [e a0^2], and octupoles [e a0^3]; resulting from partitioning the total electron density through the Minimal Basis; Iterative Stockholder (MBIS) Charge Partitioning Scheme. .. psivar:: MBIS FREE ATOM n VOLUME. Free-atom volume [a0^3] for atom n, computed using the MBIS charge; partitioning scheme. Free atom densities are computed at the same; level of theory as the parent MBIS calculation, with UHF turned on; as needed. .. psivar:: MBIS RADIAL MOMENTS <R^3>. Per-atom expectation value of r^3 [a0^3], equivalent to the volume; of the MBIS-partitioned density. .. psivar:: MBIS VALENCE WIDTHS. Per-atom density width [a0] of the associated valence charge computed; from an MBIS partitioned density. Equivalent to the inverse of the; linear decay rate of the atomic density. .. psivar:: MBIS VOLUME RATIOS. Per-atom ratio between the atomic volume (<R^3>) and the free-atomic; volume, unitless. .. psivar:: MCSCF TOTAL ENERGY. Multiconfigurational self-consistent-field energy [E_h] in the course of; a configuration interaction computation. May be single-root or state-averaged. .. psivar:: mtd DIPOLE. Dipole array [e a0] for the named method, (3,). .. psivar:: mtd QUADRUPOLE. Redundant quadrupole array [e a0^2] for the named method, (3, 3). .. psivar:: mtd OCTUPOLE. Redundant octupole array [e a0^3] for the named method, (3, 3, 3). .. psivar:: mtd HEXADECAPOLE. Redundant hexadecapole array [e a0^4] for the named method, (3, 3, 3, 3). .. psivar:: mtd 32-POLE. Redundant 32-pole array [e a0^5] for the named method, (3, 3, 3, 3, 3). .. psivar:: mtd 64-POLE. Redundant 64-pole array [e a0^6] for the named method, (3, 3, 3, 3, 3, 3). .. psivar:: mtd 128-POLE. Redundant 128-pole array [e a0^7] for the named method, (3, 3, 3, 3, 3, 3, 3). .. psivar:: MP2 TOTAL ENERGY; MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2 level of theory. .. psivar:: MP2 TOTAL GRADIENT; The total electronic gradient [E_h/a0] of the MP2 ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:38843,configurat,configuration,38843,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,"^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # un",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27177,install,install,27177,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['install'],['install']
Deployability,"_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any oth",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:20521,update,update,20521,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['update'],['update']
Deployability,"_DIR}/metadata.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). # <<< Install >>>. # <<< install bin/ >>>; configure_file(run_psi4.py psi4 @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}). if(WIN32); # Generate a batch script, which wraps ""bin/psi4"" script to ""python bin/psi4""; configure_file(psi4.bat psi4.bat @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4.bat; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}); endif(). # <<< install lib/ >>>; if(NOT ENABLE_CYTHONIZE); install(DIRECTORY driver; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; FILES_MATCHING; PATTERN ""*.py""; PATTERN pytest EXCLUDE; ); endif(). install(FILES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; .",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:10722,install,install,10722,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability,"_TIMESTAMP in CMake 3.24:; cmake_policy(SET CMP0135 NEW); endif(); # 3.15: useable FindPython with NumPy component and LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `co",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:1328,install,install-,1328,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install-']
Deployability,"_`sec:adcc`:. Interface to adcc by M. F. Herbst and M. Scheurer; =================================================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:adc>`, :ref:`PSI Variables <apdx:adc_psivar>`. .. image:: https://img.shields.io/badge/home-adcc-informational.svg; :target: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2085,install,installation,2085,doc/sphinxman/source/adcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst,1,['install'],['installation']
Deployability,"_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the Einsums tensor library"" OFF); option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); option(ENABLE_snsmp2 ""Enables SNSMP2 plugin (can also be added at runtime)"" OFF); option(ENABLE_v2rdm_casscf ""Enables V2RDM_CASSCF plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_psi4fockci ""Enables Psi4FockCI plugin (can also be added at runtime)"" OFF); option(ENABLE_cct3 ""Enables cct3 plugin (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_gpu_dfcc ""Enables GPU_DFCC plugin for gpu-accelerated df-cc (requires CUDA; can also be added at runtime)"" OFF); option(ENABLE_mdi ""Enables MolSSI driver interface"" OFF); option(ENABLE_BrianQC ""Enables the BrianQC GPU module (requires CUDA; requires separate installation and licensing of the BrianQC module)"" OFF); option(ENABLE_Libint1t ""Enables Libint1 in special _t variety"" OFF); # These options are relevant to pasture, expert only; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); option(psi4_SKIP_ENABLE_Fortran ""Suppress enabling Fortran language even when Fortran addons enabled.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:7728,install,installation,7728,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,3,['install'],"['installation', 'installed']"
Deployability,"_code.bak}; \item {\tt cd \$PSI4/..}; \item {\tt svn update}; \item {\tt cd \$objdir}; \item {\tt \$PSI4/configure -}{\tt -prefix=\$prefix}; \item {\tt cd src/bin/great\_code}; \item {\tt make install}; \end{enumerate}; (Note that \$prefix and \$objdir to the installation and compilation; directories defined in the \PSIfour\ installation instructions.); Your original version of the code remains under \file{great\_code.bak},; but should be no longer necessary if the above steps work. Note that it is; necessary to re-run \file{configure} explicitly, instead of just running; \file{config.status}, because the latter contains no information about; the new code. \subsection{Updating checked out code}. If the code in the main repository has been altered, other users' working; copies will of course not automatically be updated. In general, it is; only necessary to execute the following steps in order to completely update; your working copy of the code:. \begin{enumerate}; \item {\tt cd \$PSI4}; \item {\tt svn update}; \end{enumerate}. This will examine each entry in your working copy and compare it to; the most recent version in the main repository. When the file in the; main repository is more recent, your version of the code will be; updated. If you have made changes to your version, but the version in; the main repository has not changed, the altered code will be; identified to you with an ``M''. If you have made changes to your; version of the code, and one or more newer versions have been updated; in the main repository, SVN will examine the two versions and attempt; to merge them -- this process often reveals conflicts, however, and is; sometimes unsuccessful. You will be notified of any conflicts that; arise (labelled with a ``C'') and you must resolve them manually. If new directories have been added to the repository, the update above; will automatically add them to your working copy. However, you may; need to re-run {\tt autoconf} and configure ({\tt; \$objdir/conf",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:14001,update,update,14001,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['update'],['update']
Deployability,"`Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3918,install,install,3918,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['install'],"['install', 'installer']"
Deployability,"`NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:chemps2_calls`:. .. table:: Density matrix renormalization group capabilities of |PSIfour| through CheMPS2. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+==============================================================+======================+======================+; | dmrg-ci | DMRG configuration interaction (CI) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:3325,install,installation,3325,doc/sphinxman/source/chemps2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst,1,['install'],['installation']
Deployability,"`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35538,release,release,35538,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/libefp/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_libefp=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:12399,install,installation,12399,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['install'],['installation']
Deployability,"``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36460,release,release,36460,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"`commit`` jinja variables.; - Possibly: edit ``source/url`` field for trial locations.; - Always: edit ``sha256`` jinja variable from e.g., ``curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256``; - Always: edit ``build/number``. Either reset to 0 if version increments or bump if version *doesn't* increment.; - Possibly: uncomment ``skip: true # [py != 310]`` if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:12740,release,release,12740,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"`conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, erd, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc; # - CMAKE_PREFIX_PATH",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:2633,configurat,configuration,2633,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['configurat'],['configuration']
Deployability,"`data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 ma",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30468,install,installs,30468,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installs']
Deployability,"`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py38-Linux-x86_64.sh"" -o Psi4conda-latest-py38-Linux-x86_64.sh --keepalive-time 2; >>> bash Psi4conda-latest-py38-Linux-x86_64.sh -b -p $HOME/psi4conda # agrees to license terms; >>> (bash) echo $'. $HOME/psi4conda/etc/profile.d/conda.sh\nconda activate' >> ~/.bashrc; >>> (tcsh) echo ""source $HOME/psi4conda/etc/profile.d/conda.csh\nconda activate"" >> ~/.tcshrc; # log out, log back in so conda and psi4 in path; >>> psi4 --test. .. code-block:: bash. # Mac; # py38|py39|py310 for alternate python versions; >>> curl -O ""http://vergil.chemistry.gatech.edu/download/Psi4conda",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:4176,install,installers,4176,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installers']
Deployability,"`v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/dow",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:2609,release,release,2609,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,2,['release'],['release']
Deployability,"a Tech. To check out the; code, one must first obtain an SVN account by emailing; \htmladdnormallink{{\tt crawdad@vt.edu}}{mailto:crawdad@vt.edu}.; After you have a login-id and password, you are now ready to access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policies: Which Branch Should I Use?}; \label{section:branches}. The \PSIfour\ repository comprises a main trunk and several; release branches. The branch you should use depends on the sort of ; work you plan for the codes:; \begin{enumerate}; \item For any piece of code already in the most recent release, bug; fixes (defined as anything that doesn't add functionality ---; including documentation updates) should be made {\em only} on the; most recent stable release branch.; \item The main trunk is reserved for development of new functionality.; This allows us to keep new, possibly unstable code away from public; access until the code is ready.; \item Code that you do not want to put into next major release of; \PSIfour\ should be put onto a separate branch off the main; trunk. You will be solely responsible for maintenance of the new; branch, so you should read the SVN manual before attempting this.; \end{enumerate}. \noindent Fig.~\ref{Fig:svn} provides a schematic of the SVN revision-control; structure and branch labeling. Two release branches are shown, the current; stable branch, nam",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:2120,release,release,2120,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['release'],['release']
Deployability,"a remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_erd=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:4451,install,installation,4451,doc/sphinxman/source/erd.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst,1,['install'],['installation']
Deployability,"above requirements met, provided the libint2; # was built with cmake+cmake, not libtool+cmake.; # * Provided you know what you're doing wrt the above options and know what subset of Psi4 calculations you're targeting; # (e.g., no Hessians or non-df only) and recognize that DF is everywhere (e.g., SAD guess and DF_SCF_GUESS) and may; # need further suppression, it's fine to reduce or eliminate the `find_package` components.; # * ~Psi4 can run a libtool+cmake, but one needs to disable the `find_package` components check and correct for some; # Libint2 vs. libint2 spelling differences. See ""CHOOSE!"" toggles here and in <psi4>/psi4/CMakeLists.txt~ (see [Feb 2023] update); # * In order for DF tests to yield right values when cartesian basis sets (6d) used, need ERI3_PURE_SH and ERI2_PURE_SH =OFF; # * In order for DF integrals to be present as nominally expected, need WITH_MAX_AM to mirror WITH_ERI3_MAX_AM; # * In order for DF calculations to not be limited by cheap integrals, need WITH_MAX_AM_ERI2 >= WITH_MAX_AM_ERI3; # * In order for DF fallback fitting to work with def2-universal on all elements, need WITH_ERI3_MAX_AM >=4 for energies; # * Since non-DF calculations often use DF guess or preiterations and DF calculations use 4-center integrals for sieving,; # a natural relationship between ERI and ERI3 for energy integrals is N and N+1.; # * The combination WITH_MAX_AM_ERI=""5;4;3"" and WITH_MAX_AM_ERI3=""6;5;4"" permits any 5Z energy, QZ gradient, and TZ Hessian and is sufficient for the full test suite.; # * Psi4 doesn't know the limits of the Libint2 library to which it's linked. `libint2::Engine::lmax_exceeded` errors will be thrown from l2; nothing from Psi4.; # * If ever use a libint2 with AM>7, edit the `init_spherical_harmonics` line in libmints/integral.cc; # * In selecting AM values, before `grep`ing lots of basis set files, consult the guide at end of this file.; # [Feb 2023]; # * Upon additions to the Libint2 API to allow runtime SHGAUSS switching, Psi4 can use L",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt:1729,update,update,1729,external/upstream/libint2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt,1,['update'],['update']
Deployability,"add_subdirectory(dft); add_subdirectory(findif_response_utils); # add_subdirectory(libcubeprop); # add_subdirectory(mcscf); add_subdirectory(response); add_subdirectory(sapt); add_subdirectory(scf_proc); add_subdirectory(solvent). list(APPEND sources; empirical_dispersion; interface_cfour; proc_table; roa; wrappers_cfour; proc_util; proc; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting); endforeach(). install(DIRECTORY libcubeprop; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting; FILES_MATCHING PATTERN ""*.py""). install(DIRECTORY mcscf; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting; FILES_MATCHING PATTERN ""*.py""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/CMakeLists.txt:918,install,install,918,psi4/driver/procrouting/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/CMakeLists.txt,3,['install'],['install']
Deployability,"add_subdirectory(p4util); add_subdirectory(procrouting); # add_subdirectory(qcdb); # add_subdirectory(util). list(APPEND sources; dependency_check; driver_findif; driver_nbody_helper; gaussian_n; molutil; pluginutil; psifiles; wrapper_autofrag; endorsed_plugins; aliases; diatomic; driver_cbs; driver_nbody; driver_util; frac; inputparser; qmmm; wrapper_database; driver; schema_wrapper; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); # message(${_exec_python_err}); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module. install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver); endforeach(). # not going to cythonize qcdb/ or util/ . inits would need a special naming procedure or cmake's confused so copying them plaintext; install(DIRECTORY .; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver; FILES_MATCHING PATTERN ""__init__.py""). install(DIRECTORY qcdb; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver; FILES_MATCHING PATTERN ""*.py""). install(DIRECTORY util; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver; FILES_MATCHING PATTERN ""*.py""); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/CMakeLists.txt:995,install,install,995,psi4/driver/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/CMakeLists.txt,4,['install'],['install']
Deployability,"ade recently to; the file \file{detci.cc}, one would go into the \file{detci} source; directory and type; \begin{verbatim}; svn log detci.cc; \end{verbatim}; Checking the log files is a very useful way to see what recent changes might ; be causing new problems with the code. \subsection{The structure of the \PSIfour\ Source Tree}; \label{psitree} . Your working copy of the \PSIfour\ source code includes a number of; important subdirectories:. \begin{itemize}; \item \shellvar{\$PSI4}\file{/lib} -- Source files for; OS-independent ``library'' data. This includes the main basis set; data file (\file{pbasis.dat}) and the \PSIfour\ program execution; control file (\file{psi.dat}), among others. These files are; installed in \file{\$prefix/share}. \item \shellvar{\$PSI4}\file{/include} -- Source files for; OS-independent header files, including \file{physconst.h} (whose; contents should be obvious from its name), \file{psifiles.h}, and; \file{ccfiles.h}, among others. These files are installed in; \$prefix/include. \item \shellvar{\$PSI4}\file{/src/util} -- Source code for the utility; program \module{tocprint}. (Note that the \module{tmpl} module is; no longer used and will eventually disappear.). \item \shellvar{\$PSI4}\file{/src/lib} -- Source code for the; libraries, including \library{libpsio}, \library{libipv1},; \library{libchkpt}, etc. The include files from the library; source are used directly during the compilation of PSI to ; avoid problems associated with incomplete installations. Some; include files are architecture-dependent and go in an include; subdirectory of the compilation (object) directory. \item \shellvar{\$PSI4}\file{/src/bin} -- Source code for the; executable modules.; \end{itemize}. After compilation and installation, the \file{\$prefix} directory; contains the executable codes and other necessary files. {\bf NB:}; The files in this area should never be directly modified; rather, the; working copy should be modified and the \PSIfour\ \file{Makef",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:17405,install,installed,17405,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['install'],['installed']
Deployability,"admins ""Do not allow ..."" and Save changes. >>> git push upstream master. # re-engage admins ""Do not allow ..."" protections. Tag postrelease; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Package ``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:16511,release,release,16511,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"ag (pre)release"" is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; .. * In your hugo site clone, create a new directory under ``static/psi4manual``. Copy the zipped docs there, unpack, rearrange so that ``static/psi4manual/<new-tag>/index.html`` is present. Check in. Collect documentation snapshot; ------------------------------. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to; a special ""master"" folder on the https://github.com/psi4/psi4docs repository. From there, it and; other docs snapshots are built and served to https://psi4.github.io/psi4docs/master/ (independent; of psicode.org). The netlify psicode.org site has a redirect so that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. - GHA sphinx-build controller is :source:`.github/workflows/docs.yml`; - GHA gh-pages deploy controller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:32986,deploy,deploy,32986,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['deploy'],['deploy']
Deployability,"ages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``maste",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18691,release,releases,18691,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['releases']
Deployability,"al C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, erd, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelemental, qcengine, optking, simint, Libxc; # - CMAKE_PREFIX_PATH ""Set to list of root directories to look for externally built add-ons and dependencies; # (e.g., /path/to/install-libint;/path/to/install-gdma where exists /path/to/install-libint/lib/libderiv.a)""; # - ${AddOn}_DIR ""Set to directory containing ${AddOn}Config.cmake file to facilitate detection of external build""; # - CMAKE_DISABLE_FIND_PACKAGE_${AddON} ""Set to ON to force internal build""; # - CMAKE_INSIST_FIND_PACKAGE_${AddON} ""Set to ON to force external detect"". # <<< Detecting BLAS/LAPACK >>>; #; # - ENV(MATH_ROOT) ""Root directory where BLAS/LAPACK libraries should be detected (e.g., ${MATH_ROOT}/lib/libblas.so)""; # - BLAS_TYPE ""Target BLAS distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:3706,install,install-libint,3706,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,3,['install'],"['install-gdma', 'install-libint']"
Deployability,"al Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CPPE, PE. .. _`sec:cppe`:. Interface to CPPE by M. Scheurer; =======================================. .. codeauthor:: Maximilian Scheurer; .. sectionauthor:: Maximilian Scheurer. *Module:* :ref:`Keywords <apdx:pe>`, :ref:`PSI Variables <apdx:pe_psivar>`. .. image:: https://img.shields.io/badge/home-cppe-informational.svg; :target: https://github.com/maxscheurer/cppe. .. .. raw:: html; .. ; .. <br>; .. ; .. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to d",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:1751,configurat,configuration,1751,doc/sphinxman/source/cppe.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst,1,['configurat'],['configuration']
Deployability,"all(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 share/ & include/ >>>. install(DIRECTORY share/psi4/; DESTINATION ${CMAKE_INSTA",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11716,install,install,11716,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability,"an do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:34710,release,releases,34710,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['releases']
Deployability,"anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0); =======. Psi4: an open-source quantum chemistry software package. Copyright (c) 2007-2023 The Psi4 Developers. The copyrights for code used from other parties are included in; the corresponding files. Psi4 is free software; you can redistribute it and/or modify; it under the terms of the GNU Lesser General Public License as published by; the Free Software Foundation, version 3. Psi4 is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along; with Psi4; if not, write to the Fr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:6358,release,releases,6358,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['release'],['releases']
Deployability,"any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can't get from ""defaults"" or ""conda-forge"" channels.; ..; .. * Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); .. * A couple weeks before the first ""rc"" is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; .. * When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ``ltrtver`` with updated version numbers and/or build numbers (only if code changes); .. * Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; .. * Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; .. * Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; .. * Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; .. * Results of last should upload to psicode.org (docs) and codecov.io (coverage); .. * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4 ``external/*/*/CMakeLists.txt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:8063,update,updated,8063,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['update'],['updated']
Deployability,"ar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26383,install,install,26383,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,"['install', 'release']","['install', 'release']"
Deployability,"are Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: DKH; .. _`sec:DKH`:. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; ======================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:1918,install,installed,1918,doc/sphinxman/source/dkh.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst,1,['install'],['installed']
Deployability,"ariables needed; by |PSIfour|:. .. code-block:: bash. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}. :envvar:`PSIDATADIR` does *not* need to be set.; In the present example we unset it to make sure it does not interfere with the internal location-finding.; :envvar:`PSIPATH` is needed only if you are using external modules or ; plugins in |PSIfour| and should point to the directories where they can be found. In the; present example, we make sure the variable is set with ``if ! ( $?PSIPATH ) setenv PSIPATH """"``; before adding more paths to it. Finally, :envvar:`PSI_SCRATCH` should point to a fast, existing; local disk for temporary file storage. To use 4 threads for OpenMP parallelization; and threaded BLAS (see section :ref:`sec:threading`), we set ``-n4`` below.; The next step is then to actually run the computation: ::. /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. And then to clean up the scratch directories previously created:. .. code-block:: bash. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. Note again that the specific commands for your PBS system may differ. Refer; to your system administrator. .. _`sec:commandLineOptions`:. Command Line Options; ====================. |PSIfour| can be invoked with no command line arguments, as it takes as input; by default the file ""input.dat"" and directs output by default to ""output.dat"".; Each set of three commands below is completely equivalent, while the second set,; perhaps, is the most common usage. ::. >>> psi4; >>> psi4 -i input.dat -o output.dat; >>> psi4 input.dat output.dat. >>> psi4 descriptive_filename.in; >>> psi4 -i descriptive_filename.in -o descriptive_filename.out; >>> psi4 descriptive_filename.in descriptive_filename.out. Command-line arguments to |PSIfour| can be",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:16726,install,install,16726,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['install'],['install']
Deployability,"articles/fork-a-repo/>`_; button to store a |PSIfour| repository in your GitHub account. .. code-block:: bash. >>> git remote rename origin upstream; >>> git remote add origin https://github.com/johndoe/psi4.git. .. _`faq:forkpsi4public`:. Fork from GitHub Repository; ---------------------------. * **Get Initially**. Go to https://github.com/psi4/psi4, and hit the `Fork; <https://help.github.com/articles/fork-a-repo/>`_ button to store a; |PSIfour| repository in your GitHub account. Locally, proceed to clone:. .. code-block:: bash. # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. `Set up a connection; <https://help.github.com/articles/configuring-a-remote-for-a-fork/>`_; between your forked repository and the parent repository. .. code-block:: bash. >>> git remote add upstream https://github.com/psi4/psi4.git. * **Build** :ref:`directions <faq:buildquick>`. * **Get Updates**. Locally, `update your fork; <https://help.github.com/articles/syncing-a-fork/>`_ from the parent; repository and store on GitHub at your fork. .. code-block:: bash. # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. * **Contribute Back**. |PSIfour| contributions process :ref:`here <faq:githubworkflow>` and; :source:`here <.github/CONTRIBUTING.md>`.; Consider `preparing your contribution in a branch; <http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/>`_; then issue a `GitHub pull request; <https://help.github.com/articles/creating-a-pull-request/>`_. .. _`faq:tarballpsi4public`:. Tarball from GitHub Repository; ------------------------------. * **Get Initially**. Discouraged! From the |PSIfour| repository at https://github.com/psi4/psi4, hit the; ""Clone or download"" then ""Download ZIP"" button. Locally, unpack as; below. .. code-block:: bash. >>",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:7948,update,update,7948,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['update'],['update']
Deployability,"as \module{newcode}, the directory containing the code; should be named \file{newcode}). New executable modules must be; placed in \shellvar{\$PSI4}\file{/src/bin} and libraries in; \shellvar{\$PSI4}\file{/src/lib} of the user's working copy. \item The Makefile should be converted to an input file for the; configure script (\file{Makefile.in} --- see any of the current; \PSIfour\ binaries for an example) and should follow the; conventions set up in all of the current \PSIfour\; \file{Makefiles}. This includes use of \file{MakeVars} and; \file{MakeRules}. \item New binaries should be added to the list contained in; \shellvar{\$PSI4}\file{/src/bin/Makefile.in} so that they will be; compiled automatically when a full compilation of the \PSIfour\; distribution occurs. This step is included in the sequence below. \item A documentation page should be included with the new code (see; section \ref{Documentation} for more information). As a general; rule, if the code is not ready to have a documentation page, it is; not ready to be installed in \PSIfour. \item The \file{configure.ac} file must be altered so that users may; check out copies of the new code and so that the \file{configure}; script will know to create the Makefile for the new code. These; steps are included in the sequence below. \end{enumerate}. Assume the new code is an executable module and is named; \module{great\_code}. The directory containing the new code must; contain only those files which are to be checked in to the repository!; Then the following steps will check in a new piece of code to the main; repository:. \begin{enumerate}; \item {\tt cd \$PSI4/src/bin}; \item {\tt svn add great\_code}; \item {\tt svn ci -m ``Put comments here.''}; \item {\tt cd \$PSI4}; \item Edit \file{configure.ac} and add \file{great\_code} to the list. ; \item {\tt svn ci configure.ac -m ``Put comments here.''}; \item {\tt autoconf} ; \item {\tt cd \$PSI4/src/bin} ; \item Edit \file{Makefile.in} and add \file{great\_code} t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:11545,install,installed,11545,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['install'],['installed']
Deployability,"ase; ---------------. ::. # be on clean maintenance branch up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> git checkout 1.3.x; Switched to branch '1.3.x'. >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3'; -__version_long = '1.3+zzzzzzz'; +__version__ = '1.3.1'; +__version_long = '1.3.1+zzzzzzz'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3.1""; [1.3.x 2ce1c29] v1.3.1. >>> git log --oneline | head -1; 786fb2b v1.3.1; >>> git tag -a v1.3.1 2ce1c29 -m ""v1.3.1"". # skipping the hash recording and ""upcoming"" step b/c only tags matter on maintenance branch. # free pushing to maintenance branches at present so GitHub interface steps not needed. # see note at ""Tag (pre)release"" for why atomic commit needed. Collect docs from GHA artifacts. >>> git push --atomic upstream 1.3.x v1.3.1. Initialize release branch; -------------------------. * follow tagging procedure; * before re-engaging the admins ""Do not allow ..."" button, push a branch at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Package ``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidan",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:16639,release,release,16639,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"asn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; .. * GHA controller is :source:`.github/workflows/docs.yml`; .. * This setup works great for ""latest"" docs, but it won't build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up ""undefined"".; .. * So, anytime after ""Tag (pre)release"" is over, navigate on psi4 GH to the tag commit (not ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:31015,install,installers,31015,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,2,['install'],"['installers', 'installs']"
Deployability,"at the tag commit (not the records commit). ::. >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x. * set up new branch as protected branch through GitHub psi4 org Settings. Should be already covered under 1.*.x rule. Build extra Conda packages for Psi4 channel; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Package ``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:17787,update,updated,17787,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['update'],['updated']
Deployability,"at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35962,release,release,35962,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"at""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""; PATTERN ""dftd3/psithon2/psiaux1/myplugin1/*""; PATTERN ""dftd3/psithon2/psiaux2/*""; PATTERN ""mints3/L*dat""; PATTERN ""mints3/P*dat""; ). # <<< install psi4 share/ & include/ >>>. install(DIRECTORY share/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4; MESSAGE_NEVER; PATTERN ""*.bin"" EXCLUDE; PATTERN ""*.pyc"" EXCLUDE). install(FILES share/psi4/quadratures/1_x/R_avail${_endian_ext}.bin; RENAME quadratures/1_x/R_avail.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(FILES share/psi4/quadratures/1_x/error${_endian_ext}.bin; RENAME quadratures/1_x/error.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(DIRECTORY include/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}/psi4). # <<< install external's share/ to psi4 share/ >>>. if(TARGET libefp::efp); # bring libefp's fraglib to PSIDATADIR's attention; set(_fraglib_in_psi4_dir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag). add_custom_target(consolidate_psidatadir ALL; VERBATIM; COMMAND ${CMAKE_COMMAND} -E make_directory ${_fraglib_in_psi4_dir}; COMMENT ""Symlink external resources into PSIDATADIR""). file(GLOB _dotefps ""${libefp_FRAGLIB_DIRS}/*.efp""); foreach(_dotefp ${_dotefps}); get_filename_component(_efpfile ${_dotefp} NAME); add_custom_command(TARGET consolidate_psidatadir; POST_BUILD; COMMAND ${CMAKE_COMMAND} -E create_symlink ${_dotefp} ${_fraglib_in_psi4_dir}/${_efpfile}); endforeach(); endif(). # <<< Export Config >>>. configure_file(psi4PluginCache.cmake.in psi4PluginCache.cmake @ONLY). install(FILES ${CMAKE_BINARY_DIR}/psi4PluginCache.cmake; ${PSI4_ROOT}/cmake/psi4OptionsTools.cmake; ${PSI4_ROOT}/cmake/custom_static_library.cmake;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:13175,install,install,13175,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability,"atest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2560,install,installed,2560,doc/sphinxman/source/adcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst,1,['install'],['installed']
Deployability,"ation interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled configuration interaction level of theory and root.; *n* is CI order for *n* > 4. .. psivar:: CP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed with counterpoise correction.; Related variable :psivar:`UNCP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{CP}}}. .. psivar:: CURRENT CORRELATION ENERGY. The correlation energy [E_h] corresponding to the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT ENERGY. The total electronic energy [E_h] of the most recent stage of a; calculation (frequently overwritten). This is the quantity tracked by; the geometry optimizer. .. psivar:: CURRENT REFERENCE ENERGY. The total electronic energy [E_h] of the reference stage corresponding to; the :psivar:`CURRENT ENERGY` variable. .. psivar:: CURRENT DIPOLE. The total dipole [e a0] of the most recent stage of a calculation (frequently overwritten),",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:25747,configurat,configuration,25747,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,"ation, see the :srcsample:`mints1` input file in the samples; folder. It is also possible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the :srcsample:`mints4` and; :srcsample:`mints6` sample input files. For example, consider the following; geometry specification, taken from the :srcsample:`mints6` input::. molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808; ; aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. .. index:: molecule; multiple in input file; .. _`sec:multipleMolecules`:. .. index",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:3078,patch,patch,3078,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['patch'],['patch']
Deployability,"ations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:7029,install,installation,7029,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['install'],['installation']
Deployability,"atter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36490,release,release,36490,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"bint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependenc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:2941,install,installation,2941,doc/sphinxman/source/libint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst,1,['install'],['installation']
Deployability,"bint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can't get from ""defaults"" or ""conda-forge"" channels.; ..; .. * Main directions are in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py); .. * A couple weeks before the first ""rc"" is planned, start going through L/LT in poodle, checking with upstream to see if new versions have been released. If good changes present, rebuild the packages, changing the version numbers in the respective recipes; .. * When L/LT all built and passed, edit the individual package version numbers in cbcy and increment to a new ``ltrtver`` with updated version numbers and/or build numbers (only if code changes); .. * Build L/PSI4. If any trouble, edit psi4 code. Iterate until builds and passes. This stage is the only full ctest & pytest on Psi4+upstream; .. * Build L/RT-MP. If any trouble, edit code in L/RT and rebuild those package(s). Iterate until builds and passes. This stage is the only full ctest & pytest of Psi4+downstream; .. * Build L/DEV. If any trouble, edit psi4 build system, plugin system, or OpenMP setup. Iterate until builds and passes; .. * Build L/DOCS. If any trouble, edit the docs or the tests. Iterate until builds and passes; .. * Results of last should upload to psicode.org (docs) and codecov.io (cover",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:7821,release,released,7821,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['released']
Deployability,"br_options_c.rst. .. index:: LibECPInt, ecpint; .. _`sec:ecpint`:. Interface to LibECPInt by R. Shaw; =================================. .. codeauthor:: Andrew C. Simmonett; .. sectionauthor:: Lori A. Burns. .. image:: https://img.shields.io/badge/home-LibECPInt-5077AB.svg; :target: https://github.com/robashaw/libecpint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Depende",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:2029,install,installed,2029,doc/sphinxman/source/ecpint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst,2,['install'],"['install', 'installed']"
Deployability,"by A. Mikhalev *et. al.*. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111]_ [Stamm:2016:054101]_.; Currently the conductor-like screening model (COSMO) [Klamt:1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation models; are currently implemented using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.; For a concise introduction to the; `theory behind ddx <https://ddsolvation.github.io/ddX/md_docs_theory.html>`_; or further `literature reference",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:2727,install,installation,2727,doc/sphinxman/source/ddx.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst,1,['install'],['installation']
Deployability,"by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:10750,update,update,10750,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['update'],['update']
Deployability,"by configuration; interaction, coupled cluster uses an exponential expansion,. .. math::; :label: CCexpansion. | \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,. where the cluster operator :math:`{\hat{T}}` is written as a sum of operators that; generate singly-excited, doubly-excited, *etc.*, determinants:. .. math:: {\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},. with. .. math::. {\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,. *etc.* The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982]_ truncates the expansion at :math:`{\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}`. This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (*e.g.*, the term :math:`{\hat{T}_2}^2` approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods *size extensive*, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as :math:`{\cal{O}}(o^2 v^4)`, where; :math:`o` is the number of occupied orbitals and :math:`v` is the number of virtual; orbitals. Improving upon CCSD, the CCSD(T) method [Raghavachari:1989]_ includes; a perturbative estimate of the energy contributed by the :math:`{\hat{T}_3}`; operator. The computational cost of this additional term scales as; :math:`{\cal{O}}(o^3 v^4)`, making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases. |PSIfour| is capable of computing energie",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:3105,configurat,configuration,3105,doc/sphinxman/source/cc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst,1,['configurat'],['configuration']
Deployability,"c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27492,update,update,27492,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['update'],['update']
Deployability,"c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:7644,patch,patches,7644,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['patch'],['patches']
Deployability,"c/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation d",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:2631,install,installation,2631,doc/sphinxman/source/libxc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst,1,['install'],['installation']
Deployability,"can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__roots_per_irrep.rst. .. _`cmake:adcc`:. How to configure adcc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use |PSIfour| as the backend for; self-consistent field calculations and required integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) adcc. * Upstream Dependencies |w---w| adcc (\ |dr| optional) |PSIfour|. **CMake Variables**. * :makevar:`ENABLE_adcc` |w---w| CMake variable toggling whether Psi4 automatically installs adcc. **Examples**. A. Build and install adcc if needed. .. code-block:: bash. >>> cmake -DENABLE_adcc=ON. B. Build *without* adcc. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:4446,install,installs,4446,doc/sphinxman/source/adcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst,2,['install'],"['install', 'installs']"
Deployability,"cies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4195,install,install,4195,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability,"cluding |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for alternate python versions; >>> curl ""http://vergil.chemistry.gatech.edu/psicode-download/Psi4conda-1.4rc1-py",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3558,install,installers,3558,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installers']
Deployability,"codestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `git diff --relative --name-only HEAD -- *.py`. How and when to *not* apply code styling to your contributions; --------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3174,install,install,3174,doc/sphinxman/source/code_style.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst,1,['install'],['install']
Deployability,"commands to set :envvar:`PATH` (for correct python; interpreter) and :envvar:`PYTHONPATH` (to find psi4 module) correctly,; after which ``import psi4`` will work. .. code-block:: bash. >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". >>> python -c ""import psi4;print(psi4.__file__, psi4.__version__)"". .. _`faq:runordinarymodule`:. How to run Psi4 as Python module after compilation; --------------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:29677,install,installation,29677,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,"conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libxc is a library that provides essential; density functional definitions and compositions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libxc. * Upstream Dependencies |w---w| Libxc |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libxc, set to an installation directory containing ``include/libxc/xc.h``; * :makevar:`Libxc_DIR` |w---w| CMake variable to specify where pre-built Libxc can be found. Set to installation directory containing ``share/cmake/Libxc/LibxcConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libxc` |w---w| CMake variable to force internal build of Libxc instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libxc` |w---w| CMake variable to force detecting pre-built Libxc and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libxc/root. .. code-block:: bash. >>> cmake -DLibxc_DIR=/path/to/libxc/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libxc/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_Libxc=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:3625,install,installation,3625,doc/sphinxman/source/libxc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst,2,['install'],['installation']
Deployability,"conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --test``. Configuration for this set-up is summarized at; :ref:`faq:runfrombinary`. **Details:**. * It is advised to place |PSIfour| into a conda; environment where its libraries can't interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsm",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:7151,install,install,7151,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"cosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Instead, switch ``source/git_tag`` from ``master`` to tag (e.g., ``v1.3rc1``) in:; ..; .. * psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; .. * psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L; ..; .. - In cbcy, edit ``psi4ver`` to ""v""-less tag; ..; .. * For releases and postreleases (not prereleases), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new non-dev label (probably a ditto) matching the release (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` from Linux; .. * Run ``kitandkapoodle.py`` and allow stack to upload to anaconda.org to ``psi4/label/dev``. Poodle emits with ``--label dev`` so will go to the subchannel. May need to delete packages to clear out space on anaconda.org; .. * Copy ``meta.yaml`` and ``build.sh`` of at least ``psi4-multiout`` and ``psi4-rt`` to e.g., v121-build.sh files for easy reference or rebuilding as dependencies in master change. .. Publish to main conda label (pre-Spring 2023); .. ---------------------------------------------; ..; .. * Go through each active conda package off https://anaconda.org/psi4/repo; ..; .. - Find the most recent build set (Linux/Mac, active py versions) that ``psi4``/``p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:20171,release,releases,20171,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['releases']
Deployability,"ction""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_bse ""Enables the basis_set_exchange for requesting basis sets (requires jsonschema, regex; can also be added at runtime)"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); option(ENABLE_ddx ""Enables ddx for domain-decomposition contiuum solvation models (requires Fortran; can also be added at runtime)"" OFF); option(ENABLE_dkh ""Enables DKH integrals (requires Fortran)"" OFF); option(ENABLE_ecpint ""Enables libecpint for effective core potentials (ECP)"" OFF); option(ENABLE_libefp ""Enables LIBEFP and PylibEFP for fragments"" OFF); option(ENABLE_Einsums ""Enables the E",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:5697,install,install,5697,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability,"ctly the same manner, but the 0/0 (PSIO_ZERO); position is taken to be the beginning of the desired entry rather than; the beginning of the file. II. The user interface. All of the functions needed to carry out basic I/O are described in; this subsection. Proper declarations of these routines are provided; by the header file psio.h. Note; that before any open/close functions may be called, the input parsing; library, libipv1 must be initialized so that the necessary; file striping information may be read from user input. (See the; PSI3 programmer's manual for details on the current version of the; input parser.) Also note that ULI is used as an abbreviation; for unsigned long int in the remainder of this manual.; int psio_init(void): Before any; files may be opened or the basic read/write functions of; libpsio may be used, the global data needed by the library; functions must be initialized using this function.; int psio_ipv1_config(void):; If the library is operator within a PSI module, the library can find; its configuration data in the input file or in the .psirc file when this; function is called. Therefore it should be called immediately after; psio_init(). ; int psio_done(void): When; all interaction with the files is complete, this function is used to; free the library's global memory.; int psio_open(ULI unit, int; status): Opens the binary file identified by; unit. The status flag is a boolean used to indicate; if the file is new (PSIO_OPEN_NEW) or if it already exists and is; being re-opened (PSIO_OPEN_OLD). If specified in the user input file,; the file will be automatically opened as a multivolume (striped) file,; and each page of data will be read from or written to each volume in; succession. (Note that a non-existent file can still be opened with; status PSIO_OPEN_OLD.); int psio_close(ULI unit, int; keep): Closes a binary file identified by; unit. The keep flag is a boolean used to indicate; if the file's volumes should be deleted (0) or retained (1) a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html:4488,configurat,configuration,4488,doc/sphinxman/source/attic/libpsio.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html,1,['configurat'],['configuration']
Deployability,"d print AO basis (no symmetry) integrals.; .. ; .. * :source:`plugins/backtrans/backtrans.cc` ; .. A test of the one- and two-particle density matrix backtransformation code.; .. ; .. * :source:`plugins/mointegrals/mointegrals.cc` ; .. An example that uses the LibTrans library to generate and print MO basis integrals.; .. ; .. * :source:`plugins/mollerplesset2/mp2.cc` ; .. A plugin that uses LibTrans to generate open- and closed-shell MP2 energies.; .. ; .. * :source:`plugins/sointegrals/sointegrals.cc` ; .. An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. .. _`sec:condaplugins`:. Creating a New Plugin Using a Conda Pre-compiled Binary; -------------------------------------------------------. .. # prepare; .. >>> bash; .. >>> export PATH=$PSI4CONDA/bin:$PATH # usually already done from psi4 installation; .. >>> cd ""$(dirname $(which psi4))""/.. # move into distribution/environment directory, $PSI4CONDA; .. >>> conda install gcc # install compilers into expected place. |PSIfour| plugins can also be created using Conda for both |PSIfour|; binary and development environment. On Linux (or Ubuntu shell on Windows), one can use the ``gcc``; compiler installed alongside ``psi4`` itself in the Conda distribution; or environment (below, ``$PSI4CONDA``). On Mac, one must use; ``libc++.so`` (*not* ``libstdc++.so``), and this can be accomplished by; installing XCode from the App Store that provides ``clang`` and; ``clang++`` compilers. * Check environment:. .. code-block:: bash. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4COND",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:4683,install,install,4683,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,2,['install'],['install']
Deployability,"d-order perturbation theory""; This theory gives gradients for a family of methods that add; another parameter to MP2, so these formulas apply to MP2 as well.; Table II of this paper will be crucial in explaining a trick that; does not appear in DiStasio. (See Sec. 3 here.); Aikens : doi:10.1007/s00214-003-0453-3; Theor. Chem. Acc. 110, 233-253 (2003); ""A derivation of the frozen-orbital unrestricted open-shell; and restricted closed-shell second-order perturbation theory; analytic gradient expressions""; This is the conventional-integral paper that DiStasio worked from to; get their DF gradients. This sometimes clarifies obscure points in; DiStasio, but they are not clear about one crucial point:; If one block of a quantity is not given, but its adjoint is, is the first; block zero, or the adjoint of the first block?; 2. Conventions; OPDM = One-particle density matrix; EWDM = Energy-weighted density matrix; All intermediates used in other functions are defined by comments starting DEFINITION.; When a previous intermediate is updated, it is defined by comments starting UPDATE.; 3. The Trick; The RHF gradient code does NOT use the formulas of the DiStasio or Aikens papers.; I can't find where the formulas come from, but they're very close to the DiStasio and; Aikens formulas, but there are consistent deviations from the formulas that are; accounted for by the addition of a ""magic"" term later on. In the comments, I refer to; this as the ""subtle trick."" Grep for that if you want to see where it appears.; 4. Cholesky Decomposition; Several times, the code needs to contract a two-index MO quantity by the four-index electron; repulsion integrals and end with a two-index AO quantity. If the two-index quantity were; separable, this would be a perfect opportunity to use our efficient libfock/jk.cc technology.; This two-index quantity is the one-particle density matrix, which is NOT separable.; To remedy this, we Cholesky decompose the OPDM, which gets it in the desired form.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dfmp2/README.txt:1618,update,updated,1618,psi4/src/psi4/dfmp2/README.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/dfmp2/README.txt,1,['update'],['updated']
Deployability,"da-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) |. <!-- -->; <!-- [![Last release date](https://img.shields.io/github/release-date/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) -->; <!-- [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github.com/psi4/psi4/pulls); -->. Psi4 is an open-source suite of *ab initio* quantum chemistry programs; designed for efficient, high-accuracy simulations of; molecular properties. We routinely perform computations with >2500 basis functions on multi-core machines. With computationally demanding portions written in C++, exports; of many C++ classes into Python via Pybind11, and a flexible Python driver, Psi4; strives to be friendly to both users and developers. * **Users' Website** www.psicode.org. * **Downloading and Installing Psi4** https://psicode.org/ps",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:3229,install,installer,3229,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['install'],['installer']
Deployability,"des a schematic of the SVN revision-control; structure and branch labeling. Two release branches are shown, the current; stable branch, named {\tt psi-3-4}, and a planned future release, to be named; {\tt psi-3-5}. The tags on the branches indicate release shapshots, where; bugs have been fixed and the code has been or will be exported for public; distribution. The dotted lines in the figure indicate merge points: just; prior to each public release, changes made to the code on the stable release; branch will be merged into the main trunk. \begin{figure}[h]; \begin{center}; \epsfig{file=svn/svn.eps,height=6.5cm}; \end{center}; \caption{\PSIfour\ SVN branch structure with examples of branch- and; release-tag labelling.}; \label{Fig:svn}; \end{figure}. \noindent A frequently encountered problem is what to do about bug fixes; that are necessary for uninterrupted code development of the code on the; main trunk. As Rule 1 of the above policy states, all bug fixes of the code; already in the recent stable release must go on the corresponding branch,; not on the main trunk. The next step depends on the severity of the bug:; \begin{enumerate}; \item If the bug fix is critical and potentially affects every; developer of the code on the main trunk, then \PSIfour\; administrators should be notified of the fix. If deemed necessary,; appropriate steps to create a new patch release will be made. Once; the next patch release is created then the bug fixes will be merged; onto the main trunk. If the bug fix doesn't warrant an immediate; new patch release, then you can incorporate the bug fix into your; local copy of the main trunk code manually or using SVN merge; features. This will allow you to continue development until next; patch release is created and the bug fix is incorporated into the; main trunk code in the repository. However you should {\em never}; merge such changes into the main trunk yourself.; \item If the bug fix is not critical (e.g. a documentation; update/fix), the",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:3973,release,release,3973,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['release'],['release']
Deployability,"dge/home-libint-5077AB.svg; :target: https://github.com/evaleev/libint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:2446,install,installed,2446,doc/sphinxman/source/libint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst,1,['install'],['installed']
Deployability,"ding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policies: Which Branch Should I Use?}; \label{section:branches}. The \PSIfour\ repository comprises a main trunk and several; release branches. The branch you should use depends on the sort of ; work you plan for the codes:; \begin{enumerate}; \item For any piece of code already in the most recent release, bug; fixes (defined as anything that doesn't add functionality ---; including documentation updates) should be made {\em only} on the; most recent stable release branch.; \item The main trunk is reserved for development of new functionality.; This allows us to keep new, possibly unstable code away from public; access until the code is ready.; \item Code that you do not want to put into next major release of; \PSIfour\ should be put onto a separate branch off the main; trunk. You will be solely responsible for maintenance of the new; branch, so you should read the SVN manual before attempting this.; \end{enumerate}. \noindent Fig.~\ref{Fig:svn} provides a schematic of the SVN revision-control; structure and branch labeling. Two release branches are shown, the current; stable branch, named {\tt psi-3-4}, and a planned future release, to be named; {\tt psi-3-5}. The tags on the branches indicate release shapshots, where; bugs have been fixed and the code has been or will be exported for public; distribution. The dotted lines in the figure indicate merge points: just; prior to each public release, changes made to the code on the stable release; branch will be merged into the main trunk. \begin{figure}[h]; \begin{center}; \epsfig{file=svn/svn.eps,height=6.5cm}; \end{center}; \caption{\PSIfour\ SVN branch structure with examples of branch- and; release-tag labelling.}; \label{Fig:svn}; \end{fig",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:2702,release,release,2702,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['release'],['release']
Deployability,"directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --test``. Configuration for this set-up is summarized at; :ref:`faq:runfrombinary`. **Details:**. * It is advised to place |PSIfour| into a conda; environment where its libraries can't interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environme",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:7448,release,releases,7448,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['release'],['releases']
Deployability,"dit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (su",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35798,release,release,35798,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"dlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36712,release,releases,36712,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['releases']
Deployability,"dma_origin|, and summed. .. autofunction:: psi4.gdma(wfn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/de",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:6321,install,installation,6321,doc/sphinxman/source/gdma.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst,1,['install'],['installation']
Deployability,"dule developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2652,install,install,2652,doc/sphinxman/source/adcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst,1,['install'],['install']
Deployability,"dure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. -",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:2137,release,release,2137,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"e Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:code_style`:. Code style conventions; ======================. It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; `clang-format <https://clang.llvm.org/docs/ClangFormat.html>`_ and `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:1862,install,installed,1862,doc/sphinxman/source/code_style.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst,1,['install'],['installed']
Deployability,"e Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; pair: plugin; v2rdm_casscf. .. _`sec:v2rdm_casscf`:. Plugin v2rdm_casscf by A. E. DePrince; =====================================. .. codeauthor:: A. E. DePrince; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:pcm>`, :ref:`PSI Variables <apdx:pcm_psivar>`, :source:`PCMSolver <src/lib/libpsipcm>`. .. image:: https://img.shields.io/badge/home-v2rdm_casscf-5077AB.svg; :target: https://github.com/edeprince3/v2rdm_casscf. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/edeprince3/v2rdm_casscf/blob/master/README.md. A variational 2-RDM-driven CASSCF plugin to |PSIfour|. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/v2rdm_casscf/badges/version.svg; :target: https://anaconda.org/psi4/v2rdm_casscf. * v2rdm_casscf is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the Psi4conda installer, v2rdm_casscf has already been installed alongside. * If using the |PSIfour| conda package, the v2rdm_casscf conda package can; be obtained through ``conda install v2rdm_casscf -c psi4`` or ``conda install; psi4-rt -c psi4``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; v2rdm_casscf can be obtained through ``conda install v2rdm_casscf -c psi4``.; Then, hint its location with :envvar:`PYTHONPATH`. * To remove a conda installation, ``conda remove v2rdm_casscf``. **Source**. * .. image:: https://img.shields.io/github/tag/edeprince3/v2rdm_casscf.svg?maxAge=2592000; :target: https://github.com/edeprince3/v2rdm_casscf. * If using |PSIfour| built from source and you want v2rdm_casscf built from; from source also,; build it, then hint its location with :envvar:`PYTHONPATH`. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_v2rdm_casscf.rst:2024,install,installer,2024,doc/sphinxman/source/plugin_v2rdm_casscf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_v2rdm_casscf.rst,7,['install'],"['install', 'installation', 'installed', 'installer']"
Deployability,"e Software Foundation, version 3. Psi4 is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along; with Psi4; if not, write to the Free Software Foundation, Inc.,; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. The full text of the GNU Lesser General Public License (version 3) is included in the; COPYING.LESSER file of this repository, and can also be found; [here](https://www.gnu.org/licenses/lgpl.txt). Citation [![doi](https://img.shields.io/badge/doi-10.1063/5.0006002-5077AB.svg)](https://doi.org/10.1063/5.0006002); ========. The journal article reference describing Psi4 is:. D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish,; M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio,; A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer,; R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni,; J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein,; B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov,; K. Patkowski, A. E. DePrince III, U. Bozkaya, R. A. King,; F. A. Evangelista, J. M. Turney, T. D. Crawford, C. D. Sherrill,; ""Psi4 1.4: Open-Source Software for High-Throughput Quantum Chemistry"",; J. Chem. Phys. 152(18) 184108 (2020). * [![doi](https://img.shields.io/badge/doi-10.1021/acs.jctc.7b00174-5077AB.svg)](https://doi.org/10.1021/acs.jctc.7b00174) for Psi4 v1.1; * [![doi](https://img.shields.io/badge/doi-10.1021/acs.jctc.8b00286-5077AB.svg)](https://doi.org/10.1021/acs.jctc.8b00286) for Psi4NumPy; * [![doi](https://img.shields.io/badge/doi-10.1002/wcms.93-5077AB.svg)](https://doi.org/10.1002/wcms.93) for Psi4 alpha releases; * [![doi](https://img.shields.io/badge/doi-10.1002/jcc.20573-5077AB.svg)](https://doi.org/10.1002/jcc.20573) for Psi3; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:8844,release,releases,8844,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['release'],['releases']
Deployability,"e and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag,",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:34304,release,releases,34304,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['releases']
Deployability,"e branch labelled {\tt psi-4-0}:. {\tt svn co https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0 psi4}. \noindent Note that subsequent {\tt svn update} commands in this; working copy will provide updates only on the chosen branch. Note; also that after you have checked out a fresh working copy of the code; you must run the {\tt autoconf} command to generate a {\tt configure}; script for building the code. (See the installation manual for; configuration, compilation, and testing instructions.). \noindent For each of the above commands, the working copy of your; code will be placed in the directory \file{psi4}, regardless of your; choice of branch. In this manual, we will refer to this directory; from now on as {\tt \$PSI4}. Subsequent SVN commands are usually run; within this top-level directory. \noindent; $\bullet$ To update your current working copy to include the latest revisions:. {\tt svn update}. \noindent; Notes: (a) This will update only the revisions on your current branch;; (b) The old {\tt -d} and {\tt -P} flags required by CVS are not necessary with SVN. . \noindent; $\bullet$ To convert your working copy to the head of a specific branch:. {\tt svn switch https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; $\bullet$ To convert your working copy to the head of the main trunk:. {\tt svn switch https://sirius.chem.vt.edu/svn/psi4/trunk/}. \noindent; $\bullet$ To find out what branch your working copy is on, run this in your; top-level \PSIfour\ source directory:. {\tt svn info | grep URL}. \noindent; This will return the SVN directory from which your working copy was; taken, e.g.,. \noindent; {\tt URL: https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; Some words of advice:; \begin{enumerate}; \item Most SVN commands are reasonably safe, . \item Unlike CVS, you shouldn't use {\tt svn update} to see the status; of your working copy. With SVN you should use {\tt svn status} to; see if you've modified any files or directories. If ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:6422,update,update,6422,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['update'],['update']
Deployability,"e code is ready.; \item Code that you do not want to put into next major release of; \PSIfour\ should be put onto a separate branch off the main; trunk. You will be solely responsible for maintenance of the new; branch, so you should read the SVN manual before attempting this.; \end{enumerate}. \noindent Fig.~\ref{Fig:svn} provides a schematic of the SVN revision-control; structure and branch labeling. Two release branches are shown, the current; stable branch, named {\tt psi-3-4}, and a planned future release, to be named; {\tt psi-3-5}. The tags on the branches indicate release shapshots, where; bugs have been fixed and the code has been or will be exported for public; distribution. The dotted lines in the figure indicate merge points: just; prior to each public release, changes made to the code on the stable release; branch will be merged into the main trunk. \begin{figure}[h]; \begin{center}; \epsfig{file=svn/svn.eps,height=6.5cm}; \end{center}; \caption{\PSIfour\ SVN branch structure with examples of branch- and; release-tag labelling.}; \label{Fig:svn}; \end{figure}. \noindent A frequently encountered problem is what to do about bug fixes; that are necessary for uninterrupted code development of the code on the; main trunk. As Rule 1 of the above policy states, all bug fixes of the code; already in the recent stable release must go on the corresponding branch,; not on the main trunk. The next step depends on the severity of the bug:; \begin{enumerate}; \item If the bug fix is critical and potentially affects every; developer of the code on the main trunk, then \PSIfour\; administrators should be notified of the fix. If deemed necessary,; appropriate steps to create a new patch release will be made. Once; the next patch release is created then the bug fixes will be merged; onto the main trunk. If the bug fix doesn't warrant an immediate; new patch release, then you can incorporate the bug fix into your; local copy of the main trunk code manually or using SVN me",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:3663,release,release-tag,3663,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['release'],['release-tag']
Deployability,"e conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured ``psi4`` itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install ``psi4-dev`` for build tools. The :ref:`sec:psi4conda` uses a `conda constructor; <https://github.com/conda/constructor>`_ to package up Miniconda,; the |PSIfour| conda package, the |PSIfour| add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for |PSIfour|. Installing just the ``psi4`` package; itself will get you |PSIfour|, whatever add-ons require linking in to; |PSIfour| (*e.g.*, CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the ``psi4`` package won't get you add-ons that; don't need linking (*e.g.*, adcc and v2rdm_casscf). .. Conda Proficients; .. ^^^^^^^^^^^^^^^^^; ..; .. or dependencies; .. from th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:14119,install,install,14119,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"e default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for example, that I-SAPT is used to examine the interaction; of two methyl groups connected by some linker fragment. When the linking bonds are assigned to C, the carbon atoms; of the methyl groups are missing electrons on one of their *sp^3* hybrid orbitals and a dipole moment appears.; These dipole moments have been observed to lead, in some cases, to I-SAPT energy contributions that do not make ; physical sense, for example, to a strongly repulsive electrostatic energy between two fragments connected by an; intramolecular hydrogen bond. To overcome this issue, Luu and Patkowski proposed a reassignment of the linking electron pairs so that each fragment; (C and A/B) gets one electron [Luu:2023:356]_. This electron is placed on a hybrid orbital of the connecting atom; pointing in the direction of the interfragment bond. Several schemes for determining this link hybrid were proposed ; in [Luu:2023:356]_ and they all are implemented in |PSIfour|. We recommend the so-called *SIAO1* scheme,; ``fisapt_link_assignment siao1``, as it has been observed to provide consistently meaningful I-SAPT terms and a; smooth basis set convergence. The SIAO1 name implies that the projection to construct the link hybrids happens in the; intrinsic atomic orbital space (as opposed to the SAO1 method where the standard atomic orbital space is used), with; one iteration of fragment orbital optimization and link orbital orthogonalization, a process that very quickly ; achieves self-consistency. Altogether, the allowed values for |fisapt__fisapt_link_assignment| are ``c`` (default),; ``ab`` (the opposite of ``c`` where the enti",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:18106,A/B,A/B,18106,doc/sphinxman/source/fisapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst,1,['A/B'],['A/B']
Deployability,"e installed in; \$prefix/include. \item \shellvar{\$PSI4}\file{/src/util} -- Source code for the utility; program \module{tocprint}. (Note that the \module{tmpl} module is; no longer used and will eventually disappear.). \item \shellvar{\$PSI4}\file{/src/lib} -- Source code for the; libraries, including \library{libpsio}, \library{libipv1},; \library{libchkpt}, etc. The include files from the library; source are used directly during the compilation of PSI to ; avoid problems associated with incomplete installations. Some; include files are architecture-dependent and go in an include; subdirectory of the compilation (object) directory. \item \shellvar{\$PSI4}\file{/src/bin} -- Source code for the; executable modules.; \end{itemize}. After compilation and installation, the \file{\$prefix} directory; contains the executable codes and other necessary files. {\bf NB:}; The files in this area should never be directly modified; rather, the; working copy should be modified and the \PSIfour\ \file{Makefile}; hierarchy should handle installation of any changes. The structure of; the installation area is:. \begin{itemize}; \item \file{\$prefix/bin} -- The main executable directory. This; directory must be in your path in order for the driver program,; \module{PSI4}, to find the modules. \item \file{\$prefix/lib} -- The \PSIfour\ code libraries. (NB: The; description of \PSIfour\ \file{Makefiles} later in this manual will; explain how to use the libraries.). \item \file{\$prefix/include} -- Header files. These are not actually; used during the compilation of PSI but are useful for inclusion by; external programs because they are all in the same directory. \item \file{\$prefix/share} -- OS-independent data files, including; basis set information. (Do not edit this file directly; any changes; you make can be overwritten by subsequent {\tt make} commands.). \item \file{\$prefix/doc} -- \PSIfour\ documentation, including; installation, programmer, and user manuals.; \end{itemize}. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:18493,install,installation,18493,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,2,['install'],['installation']
Deployability,"e main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> ma",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4803,install,installed,4803,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installed']
Deployability,"e to Libxc by M. A. L. Marques; ======================================. .. codeauthor:: M. A. L. Marques and Micael Oliveira; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:l",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:2142,install,installed,2142,doc/sphinxman/source/libxc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst,1,['install'],['installed']
Deployability,"e, changes made to the code on the stable release; branch will be merged into the main trunk. \begin{figure}[h]; \begin{center}; \epsfig{file=svn/svn.eps,height=6.5cm}; \end{center}; \caption{\PSIfour\ SVN branch structure with examples of branch- and; release-tag labelling.}; \label{Fig:svn}; \end{figure}. \noindent A frequently encountered problem is what to do about bug fixes; that are necessary for uninterrupted code development of the code on the; main trunk. As Rule 1 of the above policy states, all bug fixes of the code; already in the recent stable release must go on the corresponding branch,; not on the main trunk. The next step depends on the severity of the bug:; \begin{enumerate}; \item If the bug fix is critical and potentially affects every; developer of the code on the main trunk, then \PSIfour\; administrators should be notified of the fix. If deemed necessary,; appropriate steps to create a new patch release will be made. Once; the next patch release is created then the bug fixes will be merged; onto the main trunk. If the bug fix doesn't warrant an immediate; new patch release, then you can incorporate the bug fix into your; local copy of the main trunk code manually or using SVN merge; features. This will allow you to continue development until next; patch release is created and the bug fix is incorporated into the; main trunk code in the repository. However you should {\em never}; merge such changes into the main trunk yourself.; \item If the bug fix is not critical (e.g. a documentation; update/fix), then you should wait until next patch release when it; will be merged into the main trunk automatically.; \end{enumerate}. \noindent; The following are some of the most commonly used SVN commands for checking; out and updating working copies of the \PSIfour\ source code. \noindent; $\bullet$ To checkout a working copy of the head of the main trunk:. {\tt svn co https://sirius.chem.vt.edu/svn/psi4/trunk/ psi4} . \noindent; $\bullet$ To check out a wo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:4378,patch,patch,4378,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,2,"['patch', 'release']","['patch', 'release']"
Deployability,"e, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; :ref:`running compiled executable <faq:runordinaryexe>`,; :ref:`running compiled Python module <faq:runordinarymodule>`,; :ref:`running conda binary <faq:runfrombinary>`. * :envvar:`PATH` pointing to ``bin``; * :envvar:`PYTHONPATH` pointing to ``lib`` (ordinary) or ``lib/pythonX.X/site-packages`` (conda); * :envvar:`PSIDATADIR` pointing to ``share/psi4``. .. _`faq:runordinaryexe`:. How to run Psi4 as executable after compilation; -----------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run |PSIfour|. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. .. _`faq:modulenotfounderror`:. How to solve ``ModuleNotFoundError: No module named 'psi4'``; ----------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:27040,install,installation,27040,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,"e-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installatio",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21534,install,installed,21534,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installed']
Deployability,"e-lab/gcp | mctc |; +-------------------------------------+---------------------------------+-------------+------------+---------------------------+----------------------------------------------------------------------------------+----------+. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dftd3/badges/version.svg; :target: https://anaconda.org/psi4/dftd3. * There are two implementations of DFTD3; see :ref:`table:empdispimpl` . The newer; ""s-dftd3"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""s-dftd3"" is supported, though the ""classic"" continues to work for many applications. * DFTD3 is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, DFTD3 has already been installed alongside. * If using the |PSIfour| conda package, the classic dftd3 conda package can; be obtained through ``conda install dftd3 -c psi4`` or the newer implementation; through ``conda install dftd3-python -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the dftd3 executable can be obtained through ``conda install dftd3 -c psi4``; or ``conda install dftd3-python -c conda-forge``. * To remove a conda installation, ``conda remove dftd3`` or ``conda remove dftd3-python``. **Source**. * .. image:: https://img.shields.io/badge/home-DFTD3-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/get-the-current-version-of-dft-d3. * If using |PSIfour| built from source and you want to build DFTD3 from; from source also,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier vers",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:6637,install,install,6637,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,2,['install'],['install']
Deployability,"e.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) |. <!-- -->; <!-- [![Last release date](https://img.shields.io/github/release-date/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) -->; <!-- [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-80",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:2121,install,installs,2121,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['install'],['installs']
Deployability,"e:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvation model are solved. Usually these parameters do not need; to be changed. Occasionally |ddx__ddx_solvation_convergence| might need to be adapted,; e.g. if only a very crude or a highly accurate SCF solution is targeted. .. include:: autodir_options_c/ddx__ddx_diis_max_vecs.rst; .. include:: autodir_options_c/ddx__ddx_maxiter.rst; .. include:: autodir_options_c/ddx__ddx_solvation_convergence.rst. Further keywords for ddx; ~~~~~~~~~~~~~~~~~~~~~~~~. These parameter should rarely require changes.; In particular |ddx__ddx_eta|, |ddx__ddx_shift| and |ddx__ddx_logfile|; are expert parameters and should not be altered beyond debugging. .. include:: autodir_options_c/ddx__ddx_eta.rst; .. include:: autodir_options_c/ddx__ddx_fmm_local_lmax.rst; .. include:: autodir_options_c/ddx__ddx_fmm_multipole_lmax.rst; .. include:: autodir_options_c/ddx__ddx_fmm.rst; .. include:: autodir_options_c/ddx__ddx_incore.rst; .. include:: autodir_options_c/ddx__ddx_logfile.rst; .. include:: autodir_options_c/ddx__ddx_shift.rst. .. _`cmake:ddx`:. How to configure ddx for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ddx is a library for providing fast continuum; solvation models. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) ddx. * Upstream Dependencies |w---w| ddx |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_ddx` |w---w| CMake variable toggling whether Psi4 automatically installs ddx. **Examples**. A. Build and install ddx if needed. .. code-block:: bash. >>> cmake -DENABLE_ddx=ON. B. Build *without* ddx. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:11552,install,installs,11552,doc/sphinxman/source/ddx.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst,2,['install'],"['install', 'installs']"
Deployability,"e=svn/svn.eps,height=6.5cm}; \end{center}; \caption{\PSIfour\ SVN branch structure with examples of branch- and; release-tag labelling.}; \label{Fig:svn}; \end{figure}. \noindent A frequently encountered problem is what to do about bug fixes; that are necessary for uninterrupted code development of the code on the; main trunk. As Rule 1 of the above policy states, all bug fixes of the code; already in the recent stable release must go on the corresponding branch,; not on the main trunk. The next step depends on the severity of the bug:; \begin{enumerate}; \item If the bug fix is critical and potentially affects every; developer of the code on the main trunk, then \PSIfour\; administrators should be notified of the fix. If deemed necessary,; appropriate steps to create a new patch release will be made. Once; the next patch release is created then the bug fixes will be merged; onto the main trunk. If the bug fix doesn't warrant an immediate; new patch release, then you can incorporate the bug fix into your; local copy of the main trunk code manually or using SVN merge; features. This will allow you to continue development until next; patch release is created and the bug fix is incorporated into the; main trunk code in the repository. However you should {\em never}; merge such changes into the main trunk yourself.; \item If the bug fix is not critical (e.g. a documentation; update/fix), then you should wait until next patch release when it; will be merged into the main trunk automatically.; \end{enumerate}. \noindent; The following are some of the most commonly used SVN commands for checking; out and updating working copies of the \PSIfour\ source code. \noindent; $\bullet$ To checkout a working copy of the head of the main trunk:. {\tt svn co https://sirius.chem.vt.edu/svn/psi4/trunk/ psi4} . \noindent; $\bullet$ To check out a working copy of the head of a specific release branch,; e.g., the branch labelled {\tt psi-4-0}:. {\tt svn co https://sirius.chem.vt.edu/svn/PS",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:4508,patch,patch,4508,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,2,"['patch', 'release']","['patch', 'release']"
Deployability,"e_file(run_psi4.py psi4 @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}). if(WIN32); # Generate a batch script, which wraps ""bin/psi4"" script to ""python bin/psi4""; configure_file(psi4.bat psi4.bat @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4.bat; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}); endif(). # <<< install lib/ >>>; if(NOT ENABLE_CYTHONIZE); install(DIRECTORY driver; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; FILES_MATCHING; PATTERN ""*.py""; PATTERN pytest EXCLUDE; ); endif(). install(FILES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATT",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:10890,install,install,10890,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability,"ease Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); .. * Edit ``psi4ver`` back to ``''`` in cbcy; .. * Edit ``source/git_tag`` back to ``master`` for psi4-multiout, psi4-docs; .. * Edit build string back to ``0`` if psi4-multiout needed multiple passes; .. * Edit kitandkapoodle.py back to ``***`` stack; .. * Check in all release, construct, recipe changes on Linux and Mac. Synchronize both to GitHub psi4meta; .. * Copy meta.yaml and build.sh files to vMmp-prefixed files for the record.; .. * Edit crontab back to 2am ""norm"". Comment out ""anom"". Misc.; -----. * Consider rebuilding the |PSIfour| binder image.; * If you want to do trial conda builds from a maintenance branch w/o pushing the tag, requires; ``source/git_tag: 1.3.x`` and fake ``package/version: v1.3.1rc1``. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:38029,release,release,38029,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,3,['release'],['release']
Deployability,"eceding or following jobs, it is prudent to; separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the ``cfour {...}`` block are tacked onto; the end of the ``ZMAT`` file that is otherwise written from psi style; format. It is by this route that, for example ``%excite*`` sections can at; present be specified. The execution of :program:`xcfour` can be modified by a few parameters. Setting; the option |cfour__cfour_omp_num_threads| sets the environment variable; :envvar:`OMP_NUM_THREADS` for only the duration of the Cfour computation.; That is, portions of an input file that run |PSIfour| modules are; unaffected. Additionally, there are a few arguments to the function; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` that control the Cfour scratch; directory. . .. comment Notes to Self; .. comment ~~~~~~~~~~~~~; .. comment ; .. comment Test checked-in GENBAS on installed copy; .. comment ; .. comment Reference still not factored into cc_program!; .. comment ; .. comment optimize on a sandwich calc? errors out; .. comment ; .. comment ; .. comment .. _`table:cfour_cc_program`:; .. comment ; .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |; .. comment | | | +--------+--------+---------+; .. comment | Driver Call, |cfour__cfour_deriv_level| | name, |cfour__cfour_calc_level| | |cfour__cfour_excite| | |cfour__cfour_cc_program| |; .. comment +=========================================+=================================+=======================+========+========+=========+; .. comment | :py:func:`~psi4.energy`, zero | cc2 | none | vcc | vcc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:42503,install,installed,42503,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['install'],['installed']
Deployability,"ecessary to execute the following steps in order to completely update; your working copy of the code:. \begin{enumerate}; \item {\tt cd \$PSI4}; \item {\tt svn update}; \end{enumerate}. This will examine each entry in your working copy and compare it to; the most recent version in the main repository. When the file in the; main repository is more recent, your version of the code will be; updated. If you have made changes to your version, but the version in; the main repository has not changed, the altered code will be; identified to you with an ``M''. If you have made changes to your; version of the code, and one or more newer versions have been updated; in the main repository, SVN will examine the two versions and attempt; to merge them -- this process often reveals conflicts, however, and is; sometimes unsuccessful. You will be notified of any conflicts that; arise (labelled with a ``C'') and you must resolve them manually. If new directories have been added to the repository, the update above; will automatically add them to your working copy. However, you may; need to re-run {\tt autoconf} and configure ({\tt; \$objdir/config.status --recheck} is a convenient command) to be; able to build the new code. \subsection{Removing code from the repository}; If alterations of libraries or binaries under Psi involves the deletion of ; source code files from the code, these must be explicitly removed through SVN. The following steps will remove a source code file named \file{bad\_code.F} ; from a binary module named \module{great\_code}:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin/great\_code}; \item {\tt svn remove bad\_code.F}; \item {\tt svn ci -m ``Put comments here.''}; \end{enumerate}. \subsection{Checking out older versions of the code}; It is sometimes necessary to check out older versions of a piece of code.; Assume we wish to check out an old version of \PSIdetci. If this; is the case, the following steps will do this:; \begin{enumerate}; \item {\tt cd \$PSI4",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:14839,update,update,14839,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['update'],['update']
Deployability,"ections <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4. * **Contribute Back**. Not applicable as not under git control. .. _`faq:binarypackage`:. Conda Binary Package; --------------------. * **Get Initially**. The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to :ref:`directions <faq:psi4pkg>`. Locally, install into; a conda environment as below. .. code-block:: bash. >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. .. code-block:: bash. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4 -c conda-forge. * **Contribute Back**. Not applicable as not under git control. .. _`faq:clonepsi4public`:. Clone from GitHub Repository; ----------------------------. * **Get Initially**. The |PSIfour| repository at https://github.com/psi4/psi4 works like; `every other GitHub repo; <https://help.github.com/articles/which-remote-url-should-i-use/>`_.; Locally, clone as below. .. code-block:: bash. # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. * **Build** :ref:`directions <faq:buildquick>`. * **Get Updates**. .. code-block:: bash. # on branch master; >>> git pull origin master. * **Contribute Back**. Contributions cannot be made directly to the main repository. :ref:`Fork; instead <faq:forkpsi4public>`. To convert clone to fork, go to https://github.com/psi4/psi4, and; hit the `Fork <https://help.github.com/articles/fork-a-repo/>`_; button to store a |PSIfour| repository in your GitHub account. .. code-block:: b",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:6056,update,update,6056,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['update'],['update']
Deployability,"ecule contains fragments but is not conveniently ordered for the; ``--`` marker, the :py:func:`~psi4.driver.wrapper_autofrag.auto_fragments` function can be applied, as shown in; :srcsample:`pywrap-basis`, to return as active molecule the previous; active molecule, only fragmented. Advanced Python; ===============. A named molecule in an input file is a full-fledged instance of the; powerful C++ :py:class:`~psi4.core.Molecule` class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle :samp:`{option_molecule_name}` in; :samp:`molecule {optional_molecule_name} \\{...\\}`. * The molecular geometry can be got and set and manipulated as a; :py:class:`~psi4.core.Matrix` object. Below shows how to access; coordinates in an input file in Python. ::. molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:22148,update,update,22148,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['update'],['update']
Deployability,"ecule.update_geometry(). - Preferrably, the python function signature (for functions intended to be called in input files) is ``function(name, **kwargs)``. For functions that have other positional keywords, please bundle them into kwargs at earliest convenience (see :ref:`sec:db()` argument db_name for example). - After the docstring, the first two lines of your function should be the ones below. The first provides a case insensitive handle to the name argument value. The second converts all the kwargs dictionary keys to lowercase versions of themselves, so that input files can be case insensitive. ::. lowername = name.lower(); kwargs = kwargs_lower(kwargs). - Case sensitivity for kwargs dictionary values still needs to be handled. The first line below shows how to convert argument values to lowercase for matching. When not matching a whole value such that regular expressions are needed, the second line below performs a case insensitive match. ::. if (kwargs['db_mode'].lower() == 'continuous'):; if re.match(r'^sapt', name, flags=re.IGNORECASE):. - Match boolean keywords (db_cp in the example below) with expressions like the following, which allow case insensitive yes/true/on/1/no/false/off/0 user input. If your argument's value is a derivative level, similarly, use input.der0th, input.der1st, and input.der2nd. ::. if input.yes.match(str(db_cp)):; elif input.no.match(str(db_cp)):. - For keywords that might be used in other functions as well as your own, prepend the argument name with a short representation of your function name. For example, there are keywords cp_func, db_func, and opt_func to request what python function, if not energy(), is called by cp(), database(), and optimize(). - Upon checking in a new python file, edit the file ``psi4/doc/userman/source/index.rst`` and follow the instructions therein that your file may be autodocumented here. - Write docstrings! For a major function intended for use in input files, emulate any docstring in ``psi4/share/python",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst:3195,continuous,continuous,3195,doc/sphinxman/source/attic/bestpractices_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst,1,['continuous'],['continuous']
Deployability,"ed above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. -D STRING forward directly to cmake (example: -D ENABLE_THIS=1; .. -D ENABLE_THAT=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable ``CMAKE_INSTALL_PREFIX``; before compiling. * Build with Specific Install Directory. .. code-block:: bash. cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:20876,install,install,20876,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability,"ed by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. .. _`sec:addAddOns`:. Git, Versioning; ===============. .. _`faq:versionbump`:. How to bump a version; ---------------------. 0. **ACT** to check everything in. 1. **OBSERVE** current versioning state. * Be on master of (i) a direct clone or (ii) clone-of-fork with master; up-to-date with upstream (including tags!!!) and with upstream as; remote. * https://github.com/psi4/psi4/releases says ``v1.1a1`` & ``007a9b6``. ::. >>> git tag; v1.0; v1.1a1. >>> cat psi4/metadata.py; __version__ = '1.1a1'; __version_long = '1.1a1+007a9b6'; __version_upcoming_annotated_v_tag = '1.1a2'. >>> git describe --abbrev=7 --long --always HEAD; v1.1a1-417-gcbee32b. >>> git describe --abbrev=7 --long --dirty; v1.1a1-417-gcbee32b. >>> ./psi4/versioner.py; Defining development snapshot version: 1.1a2.dev417+cbee32b (computed); 1.1a2.dev417 {master} cbee32b 1.0.0.999 1.0 <-- 1.1a2.dev417+cbee32b. >>> git diff. * Observe that current latest tag matches metadata scipt and git; describe, that GitHub releases matches metadata script, that upcoming in; metadata script matches current versioner version. * Note that current tag is ``v1.1a1``. Decide on imminent tag, say ``v1.1rc1``. 2. **ACT** to bump tag in code. * Edit current & prospective tag in :source:`psi4/metadata.py`. Use your; decided-upon tag ``v1.1rc1`` and a speculative next tag, say ``v1.1rc2``,; and use 7 ""z""s for the part you ca",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:1444,release,releases,1444,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['release'],['releases']
Deployability,"ed by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. Release Procedures; ==================. .. _`faq:annualprocedure`:. Annual; ------. * `On January first`_; * `Update copyright year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:1389,release,release,1389,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,2,['release'],['release']
Deployability,"ed configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:python>` (3.8+) https://www.python.org/. * CMake (3.15+) https://cmake.org/do",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5881,install,installation,5881,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,"ed in to the main repository (as; well as the new file in the second situation). SVN requires that you include a comment on your changes. However,; unlike CVS, SVN prefers that you put your comments on the command-line; rather than editing a text file. I prefer the CVS way, but this is a; minor pain compared to all the advantages of SVN, in my opinion. \subsection{Adding entirely new code to the main \PSIfour\ repository} ; \label{checkin_new}. If the programmer is adding a new executable module or library to the; \PSIfour\ repository, a number of important conventions should be followed:. \begin{enumerate}; \item Since such changes almost always involve additional functionality,; new modules or libraries should be added only on the main SVN trunk.; See section \ref{section:branches} for additional information. \item The directory containing the new code should be given a name; that matches the name of the installed code (e.g. if the code will; be installed as \module{newcode}, the directory containing the code; should be named \file{newcode}). New executable modules must be; placed in \shellvar{\$PSI4}\file{/src/bin} and libraries in; \shellvar{\$PSI4}\file{/src/lib} of the user's working copy. \item The Makefile should be converted to an input file for the; configure script (\file{Makefile.in} --- see any of the current; \PSIfour\ binaries for an example) and should follow the; conventions set up in all of the current \PSIfour\; \file{Makefiles}. This includes use of \file{MakeVars} and; \file{MakeRules}. \item New binaries should be added to the list contained in; \shellvar{\$PSI4}\file{/src/bin/Makefile.in} so that they will be; compiled automatically when a full compilation of the \PSIfour\; distribution occurs. This step is included in the sequence below. \item A documentation page should be included with the new code (see; section \ref{Documentation} for more information). As a general; rule, if the code is not ready to have a documentation page, it is; not r",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:10496,install,installed,10496,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['install'],['installed']
Deployability,"ed_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream. 6. **ACT** to inform remote of bump. * Temporarily disengage ""Include administrators"" on protected master branch. ::. >>> git push origin master; >>> git push origin v1.1rc1. * Now https://github.com/psi4/psi4/releases says ``v1.1rc1`` & ``6100822``. .. _`faq:remotetag`:. How to create and remove an annotated Git tag on a remote; ---------------------------------------------------------. |PSIfour| versioning only works with *annotated* tags, not *lightweight*; tags as are created with the `GitHub interface; <https://github.com/psi4/psi4/releases/new>`_. * Create *annotated* tag::. >>> git tag -a v1.1a1 <git hash if not current> -m ""v1.1a1""; >>> git push origin v1.1a1. * Delete tag::. >>> git tag -d v1.1a1; >>> git push origin :refs/tags/v1.1a1. * Pull tags::. >>> git fetch <remote> 'refs/tags/*:refs/tags/*'. .. _`faq:psi4version`:. What Psi4 version is running; ----------------------------. * Psithon / from the executable::. >>> psi4 --version; 1.1rc2.dev17. * PsiAPI / from the library::. >>> python -c ""import psi4; print(psi4.__version__)""; 1.1rc2.dev17. * Output file header gives info like the ``print_header()`` below. * Function ``print_header()`` returns a summary of citation, version, and; git information about |PSIfour|. Function ``version_formatter()`` can; return version and git information in any desired format string. ::. >>> import psi4; >>> psi4.print_header(). -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.1rc2.de",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:5699,release,releases,5699,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['release'],['releases']
Deployability,"ee Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: DFT; pair: DFT; theory. .. _`sec:dft`:. DFT: Density Functional Theory; ==============================. .. codeauthor:: Robert M. Parrish, Justin M. Turney, and Daniel G. A. Smith; .. sectionauthor:: Robert M. Parrish. *Module:* :ref:`Keywords <apdx:scfdft>`, :ref:`PSI Variables <apdx:scf_psivar>`, :source:`LIBFUNCTIONAL <psi4/src/psi4/libfunctional>`, :source:`LIBFOCK <psi4/src/psi4/libfock>`, :source:`LIBSCF_SOLVER <psi4/src/psi4/libscf_solver>`. Both density functional theory and Hartree--Fock theory are controlled; through the SCF module, and the :ref:`SCF Introduction <sec:scfintro>`; section is also relevant here. .. note:: Starting version 1.5, the |scf__wcombine| option is temporarily disabled. .. note:: Starting version 1.4 (tag v1.4a1 in the development repository), |PSIfour| uses an updated and extended (to 104 elements) set; of Bragg-Slater radii. This leads to minimal deviations in absolute energies (1E-06 au) and; relative energies (below 0.002 kcal/mol for S22), depending also on the applied grid, compared; to older versions. We advise not to mix absolute energies absolute energies from before and after this change for the; calculation of relative energies. .. note:: After May 2017 (anytime after the v1.1 release), |PSIfour|; switched from hand- (+Matlab) coded functionals to Libxc. Thus; many DFT results will be slightly different. Functionals more than; slightly different are B97-D, wB97X (note, *not* wB97X-D), SOGGA,; DFDL, and M05. Theory; ~~~~~~. Generalized Kohn--Sham Density Functional Theory (KS-DFT) [Kohn:1965:A1133]_ [Parr:1989]_ is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio. Pure Kohn--Sham DFT is built on the Hohenberg--Kohn theorems [Hohenberg:1964:136]_ which states: A) the energy is a un",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:1886,update,updated,1886,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['update'],['updated']
Deployability,"egin with a \file{Makefile}; that will allow us to write a standalone code that includes all requisite \PSI\; libraries. We're going to write a small sample code that generates integrals,; which involves two just two source files. We begin by defining a; \file{Makefile} that will include all of the \PSIfour\ libraries and header; files, so that we can take full advantage of the wide range of features; implemented without having to worry about the details of their implementation. \includesource{sample-codes/integrals/Makefile}{make}. Only a few lines of this makefile need to be modified to utilize it for other; programming projects; we'll concentrate on them. On the second line, we define; the name of the executable to be generated, in this example we opt for the; unimaginative title of \module{integrals}. Line 4 provides the list of source files; that the project comprises; these will be detailed below. The top source; directory for the \PSIfour\ installation and the top object directory (where; \PSIfour\ was compiled) should be provided on lines 6 and 8, respectively.; Lines 10 and 11 describe the flags needed to link in the \module{BLAS} and; \module{LAPACK} libraries and might need a combination of ``\file{-L; folder\_name}'' and ``\file{-l library\_name}'', depending on your system's; setup. Finally, the compiler and flags are detailed on lines 12--17. It's a; good idea to use the flags described on line 16 for development; they speed up; code compilation and provide lots of information for standard debugging tools.; As noted in the \file{Makefile} itself, nothing below line 17 should require; modification for any other \PSIfour\ project. The \PSIfour\ driver program provides a lot of functionality that we forgo in; writing a standalone code; this is instead emulated in the {\tt main.cc} file,; shown below. \includesource{sample-codes/integrals/main.cc}{C++}. All modules in \PSIfour\ must have the argument list and return type shown on; line 13. The possible retu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst:1085,install,installation,1085,doc/sphinxman/source/attic/progtutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/progtutorial.rst,1,['install'],['installation']
Deployability,"egral_package erd`` (do this in ``~/.psi4rc`` for universal; effect) runs libderiv from Libint for derivative integrals and erd for; non-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building P",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:2793,install,installed,2793,doc/sphinxman/source/erd.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst,1,['install'],['installed']
Deployability,"el""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {pref",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63382,install,installation,63382,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,"el; -------------------------------------------. Once upon a time, ""Psi4 stack"", meant packages ``psi4``, ``psi4-rt``, ``psi4-dev``, and ``psi4-docs``.; Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda.; Package ``psi4-rt`` used to be in ""Psi4 stack"", but a maximum ecosystem package isn't provided now, only a customizable env spec.; Package ``psi4-dev`` used to be in ""Psi4 stack"", but now build environment and guidance is in-repo with ``psi4-path-advisor.py``.; Other packages in the ""ecosystem stack"" (e.g., ``libint``, ``gdma``) should already be updated and; built on conda-forge. Survey them to check version tick PRs have been merged. Conda-forge overwhelmingly handles the ``psi4`` package itself, with a full architecture and Python; version matrix. What remains are specialty or development builds for the psi4 channel. * High AM and multiarch ``psi4`` builds for Linux. - Especially at tagged releases, update and reconcile c-f psi4/feedstock recipe with psinet; psi4meta/conda-recipes/psi4-cf recipe. Differences include:. * restricted to only even python versions; * c-f libint vs. psi4 libint2 packages (latter with high AM); * smoke vs. full tests; * no git rev-parse lines; * load Intel compilers and specify them in compilers and flags CMake arguments. * Prepare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Ot",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:18140,release,releases,18140,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,2,"['release', 'update']","['releases', 'update']"
Deployability,"elds.io/badge/home-psi4fockci-5077AB.svg; :target: https://github.com/shannonhouck/psi4fockci. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://shannonhouck.github.io/psi4fockci/build/index.html. This plugin is an implementation of the RAS-nSF-IP/EA approach detailed ; in the paper by Houck et. al. [Houck:2019:2278]_. ; This approach handles systems with both spin and spatial degeneracies ; by combining the spin-flip (SF) [Krylov:2001:522]_; and ionization potential/electron affinity (IP/EA) [Nooijen:1995:3629]_ ; approaches. . The Psi4FockCI plugin allows one to perform spin-flip (SF), ionization ; potential (IP), and electron affinity (EA) calculations, as well as ; combined RAS-SF-IP/EA calculations, through the DETCI (:ref:`sec:ci`) module. Installation; ~~~~~~~~~~~~. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/shannonhouck/psi4fockci.git. * Once downloaded, the plugin can be installed as follows:. .. code-block:: bash. >>> cd {top-level-psi4fockci-directory}; >>> python -m pip install . Sample Input; ~~~~~~~~~~~~. To run a CAS-nSF-IP/EA calculation, start with a molecule with the ; correct charge and multiplicity for the reference state (i.e. some ; state well-represented by a single reference). Then, run an energy ; calculation, passing in the charge and multiplicity of the ; desired state; the number of spin-flips and IP/EA will be automatically ; determined based on this input. If additional excitations outside of the ; RAS II space are desired, one can set the level of external ; excitations using the ``conf_space`` keyword. A sample input file for a RAS(h)-2SF-IP calculation is shown below:. .. code-block:: python. molecule {; 0 7; N 0.0 0.0 0.0; N 0.0 0.0 1.3; symmetry c1; }. set {; basis cc-pVDZ; }. energy('psi4fockci', new_charge=1, new_multiplicity=1, conf_space=""h""); ; Note that for calculations involving IP/EA, inclusion of hole (for IP)",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_psi4fockci.rst:2330,install,installed,2330,doc/sphinxman/source/plugin_psi4fockci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_psi4fockci.rst,1,['install'],['installed']
Deployability,"en the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; .. Extracting packages ...; .. [ COMPLETE ]|#######################################################################################################| 100%; .. Linking packages ...; ..; ..; .. Thank you for installing psi4. Additional resources:; .. Website: www.psicode.org; .. Inputs: /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4/share/psi4/samples; .. Manual: http://psicode.org/psi4manual/master/index.html; .. GitHub: https",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:22956,install,installation,22956,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installation']
Deployability,"encies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheMPS2, dkh, ecpint, libefp, Einsums, erd, gau2grid, gdma, Libint2, PCMSolver, pybind11, pylibefp,; # qcelem",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:2533,install,install,2533,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability,"end`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:python>` (3.8+) https://www.python.org/. * CMake (3.15+) https://cmake.org/download/. * NumPy (needed at runtime *and* buildtime) https://numpy.org/. * System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for |PSIfour|, but if not detected, the; build system will automatically download and build. * :ref:`gau2grid <cmake:gau2grid>` |w---w| :ref:`[what is gau2grid?] <sec:gau2grid>` :source:`[gau2grid min version] <external/upstream/gau2grid/CMakeLists.txt#L1>`. * :ref:`Libint <cmake:libint>` |w---w| :ref:`[what is Libint?] <sec:libint>` :source:`[Libint min version] <external/upstream/libint2/CMakeLists.txt#L1>` (Libint2 as of Nov 2020; added by v1.4). * Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; * Boost https://www.boost.org/ header-only preprocessor library. * :ref:`Libxc <cmake:libxc>` |w---w| :ref:`[what is Libxc?] <sec:libxc>` :source:`[Libxc min version] <external/upstream/libxc/CMakeLists.txt#L4>`. * pybind11 |w---w| `[what is Pybind11?] <https://pybind11.readthedocs.io/en/stable/>`_ :source:`[Pybind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[w",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:7006,install,install,7006,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability,"eneral psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Init",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26549,release,release,26549,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['release'],['release']
Deployability,"eneral, ; or ``DFDIRJ`` for DFT with non-hybrid functionals). . DFDIRJ supports multiple capabilities to improve performance. Specifically, DFDIRJ allows for a combination of density-matrix based ERI ; screening (set |globals__screening| to ``DENSITY``) and incremental Fock matrix construction (set |scf__incfock| to ``TRUE``). These two, when combined,; enable more aggressive screening of ERI contributions to the Coulomb matrix and thus greatly improve performance. .. _`sec:scfcosx`:. COSX Exchange; ~~~~~~~~~~~~~. The semi-numerical COSX algorithm described in [Neese:2009:98]_ evaluates; two-electron ERIs analytically over one electron coordinate and numerically; over the other electron coordinate, and belongs to the family of pseudospectral ; methods originally suggested by Friesner. In COSX, numerical integration is performed on standard; DFT quadrature grids, which are described in :ref:`sec:dft`.; Both the accuracy of the COSX algorithm and also the computational; cost are directly determined by the size of the integration grid, so selection; of the grid is important. This COSX implementation uses two separate grids.; By default, the SCF algorithm is first converged on a smaller grid, followed by a; number of SCF iterations up to a maximum value (controlled by the |scf__cosx_maxiter_final| keyword); on a larger grid. By default, |scf__cosx_maxiter_final| is set to 1, a single; SCF iteration, which results in numerical errors comparable to; performing the entire SCF on the expensive larger grid at a computational cost; much closer to the smaller grid. Setting |scf__cosx_maxiter_final| to 0 disables the; larger grid entirely. Setting |scf__cosx_maxiter_final| to -1 allows; for the SCF to fully converge on the larger grid, useful for the study of wavefunction; properties such as gradients. The size of the initial grid is controlled by the keywords; |scf__cosx_radial_points_initial| and |scf__cosx_spherical_points_initial|.; The final grid is controlled by |scf__cosx",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:39111,integrat,integration,39111,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['integrat'],['integration']
Deployability,"energies in the full and; truncated spaces captures much of the missing correlation effects. More; details on the implementation and numerical accuracy of FNO methods in; |Psifour| can be found in [DePrince:2013:293]_\. FNO computations; are controlled through the keywords |fnocc__nat_orbs| and; |fnocc__occ_tolerance|, or by prepending a valid method name with ""fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]_\. Consider the set of equations defining CCSD:. .. math::; :label: CCSD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\. where we have chosen the intermediate normalization, ; :math:`\langle \Psi_0| \Psi \rangle = 1`, and the symbols :math:`T_1` ; and :ma",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:4604,configurat,configuration,4604,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['configurat'],['configuration']
Deployability,"energies instead of gradients::. optimize('scf', dertype='energy'). * Optimize while limiting the initial step size to 0.1 au::. set intrafrag_step_limit 0.1; optimize('scf'). * Optimize while always limiting the step size to 0.1 au:. .. code-block:: none. set {; intrafrag_step_limit 0.1; intrafrag_step_limit_min 0.1; intrafrag_step_limit_max 0.1; }. optimize('scf'). * Optimize while calculating the Hessian at every step:. .. code-block:: none. set full_hess_every 1; optimize('scf'). .. code-block:: none; ; import optking; . Hessian; ^^^^^^^. If Cartesian second derivatives are available, optking can read them; and transform them into internal coordinates to make an initial Hessian in; internal coordinates. Otherwise, several empirical Hessians are available,; including those of Schlegel [Schlegel:1984:333]_ and Fischer and Almlof; [Fischer:1992:9770]_.; Either of these or a simple diagonal Hessian may be selected using the ; |optking__intrafrag_hess| keyword. All the common Hessian update schemes are available. For formulas, see; Schlegel [Schlegel:1987:AIMQC]_ and Bofill [Bofill:1994:1]_. The Hessian may be computed during an optimization using the ; |optking__full_hess_every| keyword. .. index:: ; pair: geometry optimization; transition state; pair: geometry optimization; IRC; single: geometry optimization; constrained. Transition States and Reaction Paths; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. * Calculate a starting Hessian and optimize the ""transition state"" of; linear water (note that without a reasonable starting geometry and; Hessian, such a straightforward search often fails)::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 160.0; }. set {; basis dz; full_hess_every 0; opt_type ts; }. optimize('scf'). * At a transition state (planar HOOH), compute the second derivative, and; then follow the intrinsic reaction path to the minimum::. molecule hooh {; symmetry c1; H; O 1 0.946347; O 2 1.397780 1 107.243777; H 3 0.946347 2 107.243777 1 0.0; }. set {; basis dzp; opt_type",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:5241,update,update,5241,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['update'],['update']
Deployability,"energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24497,configurat,configuration,24497,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,"ense as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:progfaq`:. ===============; Programmers FAQ; ===============. C++ Style in |PSIfour|; ----------------------. #. :ref:`faq:nullptr`; #. :ref:`faq:automakeshared`; #. :ref:`faq:autodecl`; #. :ref:`faq:editorcodestyle`; #. :ref:`faq:githookscodestyle`; #. :ref:`faq:manualcodestyle`. Modules in |PSIfour|; --------------------. #. :ref:`faq:readoptions`; #. :ref:`faq:blaswrappers`; #. :ref:`faq:blasmatrix`; #. :ref:`faq:labas`; #. :ref:`faq:orbdims`; #. :ref:`faq:orbspaces`. Interfacing with |PSIfour|; --------------------------. #. :ref:`faq:addonname`; #. :ref:`faq:addoncmake`. Versioning |PSIfour|; --------------------. #. :ref:`faq:versionbump`; #. :ref:`faq:remotetag`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:psi4version`. Releasing |PSIfour|; -------------------. #. :ref:`faq:annualprocedure`; #. :ref:`faq:prereleaseprocedure`; #. :ref:`faq:releaseprocedure`; #. :ref:`faq:postreleaseprocedure`. Workflow; --------. #. :ref:`faq:localaddon`; #. :ref:`faq:dirlayoutinstall`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:vigitmerge`; #. :ref:`faq:gdblldb`; #. :ref:`faq:grepascii`; #. :ref:`faq:ignoringadvice`. Miscellaneous; -------------. #. :ref:`faq:add_tests`; #. :ref:`faq:add_psithon_tests`; #. :ref:`faq:add_psiapi_tests`; #. :ref:`How to set up PSIthon tests to run through pytest <faq:psithon_through_pytest>`; #. :ref:`faq:findmissingoutputref`; #. :ref:`faq:githubcodereview`. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_faq.rst:1886,release,releaseprocedure,1886,doc/sphinxman/source/prog_faq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_faq.rst,1,['release'],['releaseprocedure']
Deployability,"ensity_tolerance|, and; |scf__cosx_basis_tolerance| keywords, respectively. |scf__cosx_ints_tolerance|; is the most consequential of the three thresholds in both cost and accuracy.; This keyword determines screening of negligible one-electron integrals.; |scf__cosx_density_tolerance| controls the threshold for significant; shell pairs in the density matrix. Lastly, |scf__cosx_basis_tolerance| is; a cutoff for the value of basis functions at grid points. This keyword is; used to determine the radial extent of the each basis shell, and it is the; COSX analogue to |scf__dft_basis_tolerance|. The |scf__incfock| keyword (defaults to ``false``) increases performance; by constructing the Fock matrix from differences in the density matrix, which; are more amenable to screening. This option is disabled by default because of; potential SCF convergence issues, particularly when using diffuse basis functions.; The |scf__cosx_overlap_fitting| keyword (defaults to ``true``) reduces numerical; integration errors using the method described in [Izsak:2011:144105]_ and is; always recommended. .. _`sec:scflink`:. Linear Exchange; ~~~~~~~~~~~~~~~. Large SCF calculations can benefit from specialized screening procedures that further reduce the scaling of the ERI contribution to the Fock matrix.; LinK, the linear-scaling exchange method described in [Ochsenfeld:1998:1663]_, is available in Psi4 in conjunction with composite algorithms that build J (|globals__scf_type| set to ``J_alg+LINK``).; LinK achieves linear-scaling by exploiting shell pair sparsity in the density matrix and overlap sparsity between shell pairs. Specifically, LinK exploits the fact that the Exchange term; requires only a linear-scaling number of significant elements through reformulating the; shell quartet screening process to scale linearly with system size.; LinK is most competitive when used with non-diffuse orbital basis sets, since orbital and density overlaps decay slower with diffuse functions.; LinK is especi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:41453,integrat,integration,41453,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['integrat'],['integration']
Deployability,"er platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/M",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:2596,update,updated,2596,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['update'],['updated']
Deployability,"er""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals. The definition changed with Libint2 but still single integer. Default fine for production."" 5); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /); option_with_default(psi4_INSTALL_CMAKEDIR ""Directory to which psi4 CMake config files installed."" share/cmake/psi4); option_with_default(TargetLAPACK_INSTALL_CMAKEDIR ""Directory to which psi4 CMake config files installed."" share/cmake/TargetLAPACK); option_with_default(TargetHDF5_INSTALL_CMAKEDIR ""Directory to which psi4 CMake config files installed."" share/cmake/TargetHDF5); option_with_default(ENABLE_GENERIC ""Enables mostly static linking of language libraries for shared library"" OFF); option_with_default(CMAKE_INSTALL_MESSAGE ""Specify verbosity of installation messages"" LAZY); option_with_default(psi4_CXX_STANDARD ""Specify C++ standard for core Psi4"" 17); option_with_default(psi4_CXX_STANDARD_Libint2 ""Specify C++ standard for Psi4 files including Libint2 headers. Older (e.g., 2021.4) Intel compilers may need 14"" 17); option_with_default(SIMINT_VECTOR ""Vectorization type to use for simint (scalar sse avx avxfma micavx512)"" avx); option_with_default(SPHINX_THEME ""Theme for Sphinx documentation and extensions"" sphinx_psi_theme); option_with_default(SPHINXMAN_STRICT ""Turn warnings into errors for docs target sphinxman"" OFF); option_with_default(BUILD_Libint2_GENERATOR ""If prebuilt not found, don't build Libint2 from source tarball but instead build and run generator (",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:11909,install,installed,11909,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['installed']
Deployability,"ere.; For the latest |PSIfour| documentation, check; `www.psicode.org <http://www.psicode.org>`_. Citing |PSIfour|; ================. Overall |PSIfour| Package; ^^^^^^^^^^^^^^^^^^^^^^^^^. The following citation should be used in any publication utilizing the; |PSIfour| program package:. * ""Psi4 1.4: Open-Source Software for High-Throughput Quantum Chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C.; Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A.; M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B.; Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M.; Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F.; Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U.; Bozkaya, R. A. King, F. A. Evangelista, J. M. Turney, T. D. Crawford, C.; D. Sherrill, *J. Chem. Phys.* (2020).; (doi: `10.1063/5.0006002; <https://doi.org/10.1063/5.0006002>`_). The following citation covers |PSIfour| early stable releases:. * ""Psi4 1.1: An Open-Source Electronic Structure Program Emphasizing; Automation, Advanced Libraries, and Interoperability"", R. M. Parrish, L.; A. Burns, D. G. A. Smith, A. C. Simmonett, A. E. DePrince III, E. G.; Hohenstein, U. Bozkaya, A. Yu. Sokolov, R. Di Remigio, R. M. Richard, J.; F. Gonthier, A. M. James, H. R. McAlexander, A. Kumar, M. Saitow, X. Wang,; B. P. Pritchard, P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King,; E. F. Valeev, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D.; Sherrill, *J. Chem. Theory Comput.*, **13(7)** 3185--3197 (2017).; (doi: `10.1021/acs.jctc.7b00174; <https://doi.org/10.1021/acs.jctc.7b00174>`_). The following citation covers |PSIfour| alpha and beta versions:. * ""Psi4: An open-source *ab initio* electronic structure program,""; J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein, F.; Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke, M. L.; Abrams, N. J. Russ, M. L. Leinin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:5137,release,releases,5137,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['release'],['releases']
Deployability,"ermines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30599,install,installer,30599,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installer']
Deployability,"error function is being called. The internet seems to claim that this is a; .. bug the arises only in debugging mode and has something to do with the exponent boost chooses for; .. the default zero tolerance. Anyways, commenting out lines 47 to 49, for valgrind purposes, should; .. allow you to run valgrind. The consequence of commenting out these lines are you get no integeral; .. screening, so make sure you uncomment them when you actually run. .. _`faq:cmakeverbose`:. How to see the actual compiling commands (or errors) with ``cmake``; -------------------------------------------------------------------. CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue ``make VERBOSE=1`` to display the full; compilation commands and errors. .. _`faq:vigitmerge`:. How to highlight git merge conflicts in ``vi``; ----------------------------------------------. Edit your ``~/.vimrc`` file to include the lines below. Hitting the ``F7``; key will toggle highlighting of git's conflict markers. .. code-block:: bash. >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. .. _`faq:libmwcondapy`:. How to handle ""runtime library may be hidden"" when building with Anaconda Python; --------------------------------------------------------------------------------. When building against Ana/Miniconda python (e.g., ``cmake; -DPython_EXECUTABLE=/path/to/conda/bin/python``), the warning below often; appears. It is harmless, proceed. .. code-block:: bash. CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. .. _`faq:psi4scratch`:. How to set up the scratch directory; -----------------------------------. The ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:57264,toggle,toggle,57264,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['toggle'],['toggle']
Deployability,"ers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: MCSCF. .. index::; pair: MCSCF; theory. .. index::; pair: CI; multi-configurational self-consistent-field. .. _`sec:mcscf`:. MCSCF: Multi-Configurational Self-Consistent-Field; ==================================================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:1140,configurat,configurational,1140,doc/sphinxman/source/mcscf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst,1,['configurat'],['configurational']
Deployability,"er} 4e0596e 1.0.0.999 1.0 <-- 1.1rc2.dev1+4e0596e. >>> git describe --abbrev=7 --long --always HEAD; v1.1rc1-1-g4e0596e. >>> git describe --abbrev=7 --long --dirty; v1.1rc1-1-g4e0596e. >>> git tag; v1.0; v1.1a1; v1.1rc1. >>> cat psi4/metadata.py; __version__ = '1.1rc1'; __version_long = '1.1rc1+6100822'; __version_upcoming_annotated_v_tag = '1.1rc2'. >>> cat metadata.out.py | head -8; __version__ = '1.1rc2.dev1'; __version_branch_name = 'master'; __version_cmake = '1.0.0.999'; __version_is_clean = 'True'; __version_last_release = '1.0'; __version_long = '1.1rc2.dev1+4e0596e'; __version_prerelease = 'False'; __version_release = 'False'. >>> git log --oneline; 4e0596e Records tag for v1.1rc1; 6100822 v1.1rc1; cbee32b Fixes pcmsolver/scf for py3. Moves source for libefp upstream. 6. **ACT** to inform remote of bump. * Temporarily disengage ""Include administrators"" on protected master branch. ::. >>> git push origin master; >>> git push origin v1.1rc1. * Now https://github.com/psi4/psi4/releases says ``v1.1rc1`` & ``6100822``. .. _`faq:remotetag`:. How to create and remove an annotated Git tag on a remote; ---------------------------------------------------------. |PSIfour| versioning only works with *annotated* tags, not *lightweight*; tags as are created with the `GitHub interface; <https://github.com/psi4/psi4/releases/new>`_. * Create *annotated* tag::. >>> git tag -a v1.1a1 <git hash if not current> -m ""v1.1a1""; >>> git push origin v1.1a1. * Delete tag::. >>> git tag -d v1.1a1; >>> git push origin :refs/tags/v1.1a1. * Pull tags::. >>> git fetch <remote> 'refs/tags/*:refs/tags/*'. .. _`faq:psi4version`:. What Psi4 version is running; ----------------------------. * Psithon / from the executable::. >>> psi4 --version; 1.1rc2.dev17. * PsiAPI / from the library::. >>> python -c ""import psi4; print(psi4.__version__)""; 1.1rc2.dev17. * Output file header gives info like the ``print_header()`` below. * Function ``print_header()`` returns a summary of citation, version, and;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:5366,release,releases,5366,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,1,['release'],['releases']
Deployability,"es and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-shell systems the two-step; algorithm is usually preferred, while for larger systems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; :math:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; :ref:`Recommendations <sec:dctrecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:12393,update,updates,12393,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['update'],['updates']
Deployability,"es have been; made to the code. Anytime one checks in a new version of a file, SVN; requires the user to provide comments on the changes with the {\tt -m}; flag. These comments go into a log information that may be easily; accessed through SVN. To see what changes have been made recently to; the file \file{detci.cc}, one would go into the \file{detci} source; directory and type; \begin{verbatim}; svn log detci.cc; \end{verbatim}; Checking the log files is a very useful way to see what recent changes might ; be causing new problems with the code. \subsection{The structure of the \PSIfour\ Source Tree}; \label{psitree} . Your working copy of the \PSIfour\ source code includes a number of; important subdirectories:. \begin{itemize}; \item \shellvar{\$PSI4}\file{/lib} -- Source files for; OS-independent ``library'' data. This includes the main basis set; data file (\file{pbasis.dat}) and the \PSIfour\ program execution; control file (\file{psi.dat}), among others. These files are; installed in \file{\$prefix/share}. \item \shellvar{\$PSI4}\file{/include} -- Source files for; OS-independent header files, including \file{physconst.h} (whose; contents should be obvious from its name), \file{psifiles.h}, and; \file{ccfiles.h}, among others. These files are installed in; \$prefix/include. \item \shellvar{\$PSI4}\file{/src/util} -- Source code for the utility; program \module{tocprint}. (Note that the \module{tmpl} module is; no longer used and will eventually disappear.). \item \shellvar{\$PSI4}\file{/src/lib} -- Source code for the; libraries, including \library{libpsio}, \library{libipv1},; \library{libchkpt}, etc. The include files from the library; source are used directly during the compilation of PSI to ; avoid problems associated with incomplete installations. Some; include files are architecture-dependent and go in an include; subdirectory of the compilation (object) directory. \item \shellvar{\$PSI4}\file{/src/bin} -- Source code for the; executable modules.; \end{it",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:17128,install,installed,17128,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['install'],['installed']
Deployability,"es undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals. The definition changed with Libint2 but still single integer. Default fine for production."" 5); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /); option_with_default(psi4_INSTALL_CMAKEDIR ""Directory to which psi4 CMake config files installed."" share/cmake/psi4); option_with_default(TargetLAPACK_INSTALL_CMAKEDIR ""Directory to which psi4 CMake config files installed."" share/cmake/TargetLAPACK); option_with_default(TargetHDF5_INSTALL_CMAKEDIR ""Directory to which psi4 CMake config files installed."" share/cmake/TargetHDF5); option_with_default(ENABLE_GENERIC ""Enables mostly static linking of language libraries for shared library"" OFF); option_with_default(CMAKE_INSTALL_MESSAGE ""Specify verbosity of installation messages"" LAZY); option_with_default(psi4_CXX_STANDARD ""Specify C++ standard for core Psi4"" 17); option_with_default(psi4_CXX_STANDARD_Libint2 ""Specify C++ standard for Psi4 files including Libint2 headers. Older (e.g., 2021.4) Intel compilers may need 14"" 17); option_with_default(SIMINT_VECTOR ""Vectorization type to use for simint (scalar sse avx avxfma micavx512)"" avx); option_with_default(SPHINX_THEME ""Theme for Sphinx documentation and extensions"" sphinx_psi_theme); option_with_default(SPHINXMAN_STRICT ""Turn warnings into errors for docs target sphinxman"" OFF); option_with_defau",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:11778,install,installed,11778,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['installed']
Deployability,"es v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Buil",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4136,install,installation,4136,doc/sphinxman/source/libint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst,1,['install'],['installation']
Deployability,"es. This will allow you to continue development until next; patch release is created and the bug fix is incorporated into the; main trunk code in the repository. However you should {\em never}; merge such changes into the main trunk yourself.; \item If the bug fix is not critical (e.g. a documentation; update/fix), then you should wait until next patch release when it; will be merged into the main trunk automatically.; \end{enumerate}. \noindent; The following are some of the most commonly used SVN commands for checking; out and updating working copies of the \PSIfour\ source code. \noindent; $\bullet$ To checkout a working copy of the head of the main trunk:. {\tt svn co https://sirius.chem.vt.edu/svn/psi4/trunk/ psi4} . \noindent; $\bullet$ To check out a working copy of the head of a specific release branch,; e.g., the branch labelled {\tt psi-4-0}:. {\tt svn co https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0 psi4}. \noindent Note that subsequent {\tt svn update} commands in this; working copy will provide updates only on the chosen branch. Note; also that after you have checked out a fresh working copy of the code; you must run the {\tt autoconf} command to generate a {\tt configure}; script for building the code. (See the installation manual for; configuration, compilation, and testing instructions.). \noindent For each of the above commands, the working copy of your; code will be placed in the directory \file{psi4}, regardless of your; choice of branch. In this manual, we will refer to this directory; from now on as {\tt \$PSI4}. Subsequent SVN commands are usually run; within this top-level directory. \noindent; $\bullet$ To update your current working copy to include the latest revisions:. {\tt svn update}. \noindent; Notes: (a) This will update only the revisions on your current branch;; (b) The old {\tt -d} and {\tt -P} flags required by CVS are not necessary with SVN. . \noindent; $\bullet$ To convert your working copy to the head of a specific branch",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:5618,update,update,5618,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,2,['update'],"['update', 'updates']"
Deployability,"et up a specific path for |PSIfour| scratch file and keep them; for later use through the :ref:`psi4_io <sec:Scratch>` handler. .. _`faq:psi4PBS`:. How to use Psi4 within a PBS queue; ----------------------------------. You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60115,update,update,60115,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['update'],['update']
Deployability,"etching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they're called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). * If the previous release hasn't had a snapshot saved, copy ``construct.yaml`` into a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:24935,install,installers,24935,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installers']
Deployability,"etrieve them in NumPy format, and then write the; remaining code using standard Python and/or NumPy syntax. This approach does; not require any recompilation of code, resulting in a particularly facile; development workflow. Detailed examples and tutorials are available in the; `Psi4NumPy <https://github.com/psi4/psi4numpy>`_ repository. .. _`sec:prog_plugins`:. Avoiding the need to modify Psi4, using plugins; -----------------------------------------------. In the early days when |PSIfour| was still primarily a C++ code, development; was very cumbersome due to a lengthy build process. To expedite development, a; plugin system was developed. This plugin machinery allows developers to access; the classes defined in the innards of |PSIfour|, with only the small plugin; code requiring recompilation during development. The resulting lightweight; code can be maintained and distributed independently of |PSIfour|, making this; a good strategy for development, especially in cases where tighter integration; of the new code with existing |PSIfour| machinery is required than that; afforded by the Numpy based strategy outlined in the :ref:`sec:prog_psi4numpy`; section. For details about how to write these plugins, see the; :ref:`sec:plugins` section. .. _`sec:prog_fullintegration`:. Incorporating code into |PSIfour|; ---------------------------------. For features to be incorporated fully into the |PSIfour| ecosystem, changes to; the core routines are inevitable. However, the programmer should think very; carefully about the most appropriate language for the task in hand. Let's; consider a new feature that downloads some data from an external source and; then performs some kind of expensive matrix operation on those data. Because; Python has a rich set of tools for obtaining data from external sources,; writing this tool in the Python layer is a natural choice. If we know that the; matrix will always be small enough to fit in memory, we can simply rely on the; routines present i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst:4715,integrat,integration,4715,doc/sphinxman/source/prog_ways_to_add.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_ways_to_add.rst,1,['integrat'],['integration']
Deployability,"f ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> cond",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9165,update,update,9165,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['update'],['update']
Deployability,"f the main trunk:. {\tt svn switch https://sirius.chem.vt.edu/svn/psi4/trunk/}. \noindent; $\bullet$ To find out what branch your working copy is on, run this in your; top-level \PSIfour\ source directory:. {\tt svn info | grep URL}. \noindent; This will return the SVN directory from which your working copy was; taken, e.g.,. \noindent; {\tt URL: https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; Some words of advice:; \begin{enumerate}; \item Most SVN commands are reasonably safe, . \item Unlike CVS, you shouldn't use {\tt svn update} to see the status; of your working copy. With SVN you should use {\tt svn status} to; see if you've modified any files or directories. If you want a; direct comparison with the repository, you should use {\tt svn status -u}.; \item Read the SVN manual. Seriously.; \begin{center}; \htmladdnormallink{{\tt; http://svnbook.red-bean.com/}}{http://svnbook.red-bean.com/}; \end{center}; \item If you're about to start some significant development or bug-fixes,; first update your working copy to the latest version on your branch.; In addition, if you do development over a long period of time (say weeks to; months) on a specific module or modules, be sure to run a {\tt svn status -u}; occasionally. In can be {\em very} frustrating to try to check in lots; of changes, only to find out that the \PSIfour\ has changed dramatically; since your last update.; \end{enumerate}. \subsection{Checking in altered \PSIfour\ binaries or libraries}. If you have changes to Psi binaries or libraries which already exist, one; of two series of steps is necessary to check these changes in to the main; repository. The first series may be followed if all changes have been made; only to files which already exist in the current version. The second series; should be followed if new files must be added to the code in the repository. \begin{itemize}; \item No new files need to be added to the repository. We will use; \library{libciomr} as an example. ; \begi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:7798,update,update,7798,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['update'],['update']
Deployability,"f:`Keywords <apdx:pcm>`, :ref:`PSI Variables <apdx:pcm_psivar>`, :source:`PCMSolver <psi4/src/psi4/libpsipcm/>`. .. image:: https://img.shields.io/badge/home-PCMSolver-5077AB.svg; :target: https://github.com/PCMSolver/pcmsolver. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the PCMSolver library developed; by R. Di Remigio and L. Frediani.; The PCMSolver library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable continuum model (PCM), a continuum solvation model [Tomasi:2005:2999]_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/pcmsolver/badges/version.svg; :target: https://anaconda.org/psi4/pcmsolver. * PCMSolver is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, PCMSolver has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; PCMSolver can be obtained through ``conda install pcmsolver -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_PCMSolver`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect PCMSolver and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. pcmsolver from conda without thinking, consult. * To remove a conda installation, ``conda remove pcmsolver``. **Source**. * .. image:: https://img.shields.io/github/tag/PCMSolver/pcmsolver.svg?maxAge=2592000; :target: https://github.com/PCMSolver/pcmsolver. * If using |PSIfour| built from source and you want PCMSolver built from; from source also,; enable it as a feature with :makevar:`ENABLE_PCMSolver`,; and let the build system fetch and build it and activate dependent code. .. i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst:2363,install,installed,2363,doc/sphinxman/source/pcmsolver.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst,1,['install'],['installed']
Deployability,"family.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC; """""""""""""""""""""""""""""""""""""""""""". The operation of BrianQC is transparent from a user's point of view; every; internal computation is either performed by |PSIfour| (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and D",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:3633,install,installation,3633,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,1,['install'],['installation']
Deployability,"find_package(Doxygen QUIET); if(NOT TARGET Doxygen::doxygen); message(STATUS ""No Doxygen, no docs.""); else(); message(STATUS ""Documentation targets available: doxyman (html)""). # Configuration of the Doxygen configuration file; set(HAVE_QHELP ""NO""); set(QHELP_GENERATOR """"); set(HAVE_DOT ""NO""); set(DOT_PATH """"); configure_file(doxygen.cfg.in doxygen.cfg @ONLY). add_custom_target(doxyman; VERBATIM; COMMAND Doxygen::doxygen ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg; COMMENT ""Build Doxygen html documentation ...""); endif(). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/doxygen/CMakeLists.txt:208,configurat,configuration,208,doc/doxygen/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/doxygen/CMakeLists.txt,1,['configurat'],['configuration']
Deployability,"find_package(Libxc 6.1.0 CONFIG QUIET COMPONENTS C). if(${Libxc_FOUND}); get_property(_loc TARGET Libxc::xc PROPERTY LOCATION); message(STATUS ""${Cyan}Found Libxc${ColourReset}: ${_loc} (found version ${Libxc_VERSION})""); add_library(libxc_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_Libxc}); message(VERBOSE ""Suitable Libxc located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_Libxc}); message(FATAL_ERROR ""Suitable Libxc could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable Libxc could not be located, ${Magenta}Building Libxc${ColourReset} instead.""); ExternalProject_Add(libxc_external; # Default: use a stable release tarball of libxc. To use the; # development version of libxc, instead, comment the URL line,; # and uncomment the GIT lines.; URL https://gitlab.com/libxc/libxc/-/archive/6.2.2/libxc-6.2.2.tar.gz; #GIT_REPOSITORY https://gitlab.com/libxc/libxc.git; #GIT_TAG 5.1.5; #UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; -DNAMESPACE_INSTALL_INCLUDEDIR=/; -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}; # OpenMP irrelevant; -DENABLE_XHOST=${ENABLE_XHOST}; -DBUILD_FPIC=${BUILD_FPIC}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DBUILD_TESTING=OFF; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}). set(Libxc_DIR ${STAGED_INSTALL_PREFIX}/lib/cmake/Libxc CACHE PATH ""path to internally built LibxcConfig.cmake"" FORCE); endif(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libxc/CMakeLists.txt:722,release,release,722,external/upstream/libxc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libxc/CMakeLists.txt,1,['release'],['release']
Deployability,"fn); :noindex:. Options; ~~~~~~~. .. include:: autodir_options_c/gdma__gdma_limit.rst; .. include:: autodir_options_c/gdma__gdma_origin.rst; .. include:: autodir_options_c/gdma__gdma_multipole_units.rst; .. include:: autodir_options_c/gdma__gdma_radius.rst; .. include:: autodir_options_c/gdma__gdma_switch.rst. .. _`cmake:gdma`:. How to configure gdma for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, GDMA is a library that provides additional; quantum chemical capabilities (multipole analysis). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) gdma. * Upstream Dependencies |w---w| gdma |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_gdma` |w---w| CMake variable toggling whether Psi4 builds with gdma; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gdma, set to an installation directory containing ``include/GDMA/GDMA_MANGLE.h``; * :makevar:`gdma_DIR` |w---w| CMake variable to specify where pre-built gdma can be found. Set to installation directory containing ``share/cmake/gdma/gdmaConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gdma` |w---w| CMake variable to force internal build of gdma instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gdma` |w---w| CMake variable to force detecting pre-built gdma and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON. B. Build *without* gdma. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/gdma/root. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -Dgdma_DIR=/path/to/gdma/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_gdma=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/gdma/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gdma=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst:6485,install,installation,6485,doc/sphinxman/source/gdma.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gdma.rst,1,['install'],['installation']
Deployability,"fp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-gau2grid-5077AB.svg; :target: https://github.com/dgasmith/gau2grid. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://github.com/dgasmith/gau2grid/blob/master/README.md. |PSIfour|, relies upon the gau2grid library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:2282,install,installed,2282,doc/sphinxman/source/gau2grid.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst,2,['install'],"['install', 'installed']"
Deployability,"g in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads"";",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30197,install,install-generator,30197,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['install-generator']
Deployability,"g is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR w",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36771,release,releases,36771,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['releases']
Deployability,"g.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:2533,continuous,continuous,2533,.github/CONTRIBUTING.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md,2,"['continuous', 'integrat']","['continuous', 'integration']"
Deployability,"gation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``dat",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29480,install,installs,29480,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installs']
Deployability,"ge, the |PSIfour| add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just for |PSIfour|. Installing just the ``psi4`` package; itself will get you |PSIfour|, whatever add-ons require linking in to; |PSIfour| (*e.g.*, CheMPS2 and PCMSolver), and the correct versions of; packages. However, just the ``psi4`` package won't get you add-ons that; don't need linking (*e.g.*, adcc and v2rdm_casscf). .. Conda Proficients; .. ^^^^^^^^^^^^^^^^^; ..; .. or dependencies; .. from the ""right"" channels, which can be important for issues of fPIC; .. and libc++ vs. libstdc++. So ``conda create -c psi4 -n p4env psi4 dftd3; .. v2rdm_casscf`` *should* be equivalent to running the psi4conda installer,; .. but I wouldn't count on it. Instead, an `explicit environment spec; .. <http://conda.pydata.org/docs/using/envs.html#build-identical-conda-environments-with-urls>`_; .. will be available for download.; ..; .. .. code-block:: bash; ..; .. # Linux; .. >>> curl -o explicit-latest.sh ""https://repo.continuum.io/miniconda/explicit2-latest-Linux-x86_64.txt""; .. >>> conda create --name p4env --file explicitenv2-latest-Linux-x86_64.txt; .. >>> conda activate p4env; ..; .. .. code-block:: bash; ..; .. # Mac; .. >>> curl -o explicit-latest.sh ""https://repo.continuum.io/miniconda/explicit2-latest-MacOSX-x86_64.txt""; .. >>> conda create --name p4env --file explicitenv2-latest-MacOSX-x86_64.txt; .. >>> conda activate p4env. .. _`sec:quickconda`:. Quick Installation; ^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour|. Installs; Miniconda into ``$HOME/miniconda`` and the |PSIfour| executable into the; main conda environment at ``$HOME/min",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:15327,install,installer,15327,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installer']
Deployability,"get: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_prin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2444,install,installed,2444,doc/sphinxman/source/adcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst,1,['install'],['installed']
Deployability,"gure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:25070,install,installation,25070,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,"gy [E_h] and correlation energy component [E_h]; for the modified CCSDT(Q) level of theory. .. psivar:: CEPA(0) DIPOLE. Dipole array [e a0] for the coupled electron pair approximation variant 0 level of theory, (3,). .. psivar:: CEPA(0) QUADRUPOLE. Redundant quadrupole array [e a0^2] for the coupled electron pair approximation variant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION EN",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:23878,configurat,configuration,23878,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,"h order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_TYPE ""Target LAPACK distribution for math detection; # (default: search order MKL>FLEXIBLAS>OPENBLAS>ESSL>ATLAS>ACML>SYSTEM_NATIVE on Linux; MKL>Accelerate>... on Mac)""; # - LAPACK_LIBRARIES ""Location of BLAS/LAPACK libraries as "";""-separated list of full paths, bypassing math detection""; # - LAPACK_INCLUDE_DIRS ""Location of BLAS/LAPACK headers (only needed for MKL), bypassing math detection""; # - OpenMP_LIBRARY_DIRS ""Location of OpenMP libraries (iomp5/gomp/omp) as "";""-separated list, hinting OpenMP detection"". # <<< Install >>>; #; # - CMAKE_INSTALL_PREFIX ""Location to which Psi4 and internally built add-ons are installed (default: /usr/local/psi4)""; # - CMAKE_INSTALL_BINDIR ""Location within CMAKE_INSTALL_PREFIX to which executables are installed (default: bin)""; # - CMAKE_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_PREFIX to which libraries are installed (default: lib)""; # - CMAKE_INSTALL_DATADIR ""Location within CMAKE_INSTALL_PREFIX to which resources are installed (default: share)""; # - CMAKE_INSTALL_INCLUDEDIR ""Location within CMAKE_INSTALL_PREFIX to which headers are installed (default: include)""; # - PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed (default: /); # Must start with: / . Used to imitate python install: /python3.6/site-packages ."". ############################ Options: Build What? ############################; option(ENABLE_ambit ""Enables the ambit tensor library"" OFF); option(ENABLE_bse ""Enables the basis_set_exchange for requesting basis sets (requires jsonschema, regex; can also be added at runtime)"" OFF); option(ENABLE_CheMPS2 ""Enables CheMPS2 for DMRG (requires HDF5)"" OFF); option(ENABLE_cppe ""Enables CPPE for Polarizable Embedding"" OFF); option(ENABLE_adcc ""Enables adcc for algebraic-diagrammatic construction methods (requires libtensorlight; can also be added at runtime)"" OFF); op",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:5034,install,installed,5034,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,6,['install'],['installed']
Deployability,"h:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. *",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26953,install,install,26953,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"hannels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21934,install,installed,21934,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installed']
Deployability,"he EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_available_efpfrag. .. include:: autodoc_available_efpfrag.rst. .. _`cmake:libefp`:. How to configure libefp for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, libefp is a library that provides additional; molecular modeling capabilities (EFP). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) libefp. * Upstream Dependencies |w---w| libefp |dr| BLAS/LAPACK. **CMake Variables**. * :makevar:`ENABLE_libefp` |w---w| CMake variable toggling whether Psi4 builds with libefp; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For libefp, set to an installation directory containing ``include/efp.h``; * :makevar:`libefp_DIR` |w---w| CMake variable to specify where pre-built libefp can be found. Set to installation directory containing ``share/cmake/libefp/libefpConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_libefp` |w---w| CMake variable to force internal build of libefp instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_libefp` |w---w| CMake variable to force detecting pre-built libefp and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON. B. Build *without* libefp. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/libefp/root. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -Dlibefp_DIR=/path/to/libefp/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_libefp=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/lib",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:12244,install,installation,12244,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['install'],['installation']
Deployability,"he corresponding branch,; not on the main trunk. The next step depends on the severity of the bug:; \begin{enumerate}; \item If the bug fix is critical and potentially affects every; developer of the code on the main trunk, then \PSIfour\; administrators should be notified of the fix. If deemed necessary,; appropriate steps to create a new patch release will be made. Once; the next patch release is created then the bug fixes will be merged; onto the main trunk. If the bug fix doesn't warrant an immediate; new patch release, then you can incorporate the bug fix into your; local copy of the main trunk code manually or using SVN merge; features. This will allow you to continue development until next; patch release is created and the bug fix is incorporated into the; main trunk code in the repository. However you should {\em never}; merge such changes into the main trunk yourself.; \item If the bug fix is not critical (e.g. a documentation; update/fix), then you should wait until next patch release when it; will be merged into the main trunk automatically.; \end{enumerate}. \noindent; The following are some of the most commonly used SVN commands for checking; out and updating working copies of the \PSIfour\ source code. \noindent; $\bullet$ To checkout a working copy of the head of the main trunk:. {\tt svn co https://sirius.chem.vt.edu/svn/psi4/trunk/ psi4} . \noindent; $\bullet$ To check out a working copy of the head of a specific release branch,; e.g., the branch labelled {\tt psi-4-0}:. {\tt svn co https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0 psi4}. \noindent Note that subsequent {\tt svn update} commands in this; working copy will provide updates only on the chosen branch. Note; also that after you have checked out a fresh working copy of the code; you must run the {\tt autoconf} command to generate a {\tt configure}; script for building the code. (See the installation manual for; configuration, compilation, and testing instructions.). \noindent For each of",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:4944,update,update,4944,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,3,"['patch', 'release', 'update']","['patch', 'release', 'update']"
Deployability,"he formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `git diff --relative --name-only HEAD -- *.py`. How and when to *",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3129,install,install,3129,doc/sphinxman/source/code_style.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst,1,['install'],['install']
Deployability,"he one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset. Find the ``CMakeLists.txt`` governing the target Add-On in; :source:`external` and make changes analogous to the below::. #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you're changing the |PSIfour| repo codebase between compiles, there's; nothing more to do as CMake will handle the code rebuild deps for you. If you're changing the local Add-On repo codebase between compiles,; CMake *does not* know when ``libaddon.[a|so|dylib]`` needs rebuilding. It; is recommended that the |PSIfour| build be initially configured with; ``-DBUILD_SHARED_LIBS=ON`` (easier to notice changes). And to trigger; Add-On library rebuild, ``rm -rf {objdir}/external/upstream/addon/``; and ``rm -rf {objdir}/stage/share/cmake/AddOn``. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; |PSIfour| that interface to it, and relink the main ``core.so``.; If you're modifying the Add-On's file or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. N",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:67745,install,install,67745,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability,"he orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psiv",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48754,configurat,configuration,48754,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,"hift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (log",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29278,install,installs,29278,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,2,['install'],"['installer', 'installs']"
Deployability,"hitectures; .. index:: compilers. Supported Systems; =================. Architectures; The majority of |PSIfour| was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; |PSIfour| program package may be obtained at `psicode.org <http://psicode.org>`_.; The package is available as a binary (:ref:`Installing from Binary; <sec:conda>`) for Linux, macOS (both Intel and Apple Silicon), or Windows (both native and via Windows Subsystem for; Linux aka `Bash on Ubuntu on Windows; <https://docs.microsoft.com/en-us/windows/wsl/about>`_); or as source code (git repository or zipped archive from; https://github.com/psi4/psi4.; Compilers; |PSIfour| has been successfully compiled using Intel, GCC, and Clang; compilers. :ref:`Compiler requirements <faq:approvedcxx>` are primarily; C++17 compliance (now GCC version 7.0 or above).; For some architectures, a :ref:`precompiled binary; <sec:conda>` is available. See :ref:`Compiling and Installing; <sec:installFile>` for details.; Python; |PSIfour| 1.1 and 1.2 are supported on Python 2.7, 3.5,; and 3.6. After 1.2, only Python 3 will be supported; `in accordance with other scientific software projects; <https://python3statement.org/>`_).; |PSIfour| 1.3 supports Python 3.6 and 3.7.; |PSIfour| 1.4 supports Python 3.6, 3.7, 3.8, and 3.9.; |PSIfour| 1.5 supports Python 3.7, 3.8, and 3.9.; |PSIfour| 1.6 supports Python 3.8, 3.9, and 3.10.; |PSIfour| 1.7 supports Python 3.8, 3.9, 3.10, and 3.11 (no binary packages for 3.11).; |PSIfour| 1.8 supports Python 3.8, 3.9, 3.10, and 3.11.; |PSIfour| 1.9 supports Python 3.8, 3.9, 3.10, 3.11, and 3.12.; The future plan is to (1) be compatible with 3.8 and above until there is a good reason to drop; older versions but (2) only build and test for versions conda-forge supports.; The current master supports 3.8, 3.9, 3.10, 3.11, and 3.12. .. index:: license. License; =======. |PSIfour| is distributed under the GNU Lesser General Public License; ve",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:27633,install,installFile,27633,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['install'],['installFile']
Deployability,"hosen eigenvalue of the effective Hamiltonian,; :math:`\textrm{H}^{eff}_{\mu \nu}`. .. math:: \sum_\nu \textrm{H}^{eff}_{\mu \nu} c_\nu =E c_\nu. where . .. math:: \textrm{H}^{eff}_{\mu \nu} = \left \langle \Phi_\mu \right | \hat{H}e^{\hat{T}^\nu} \left | \Phi_\nu \right \rangle \, \textrm{.}. |PSIfour| currently implements Mk-MRCC with singles and doubles; [Mk-MRCCSD] and Mk-MRCCSD with perturbative triples [Mk-MRCCSD(T)]; as formulated in [Evangelista:2010:074107]_. A companion perturbation; method (Mk-MRPT2) has been developed based on the Mukherjee formalisim; as shown in [Evangelista:2009:4728]_. The current version of the code is limited to reference active spaces; in which all determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include ; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CASCI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure. The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CASCI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CASCI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying |mcscf__reference| to be ``twocon``).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSI",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst:3938,configurat,configuration,3938,doc/sphinxman/source/psimrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst,1,['configurat'],['configuration']
Deployability,"hould; re-clone the Add-On, rebuild and install it, rebuild any parts of; |PSIfour| that interface to it, and relink the main ``core.so``.; If you're modifying the Add-On's file or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68713,update,update,68713,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['update'],['update']
Deployability,"ht year`_; * `Update counter scripts`_. .. _`faq:prereleaseprocedure`:. Pre-Release (e.g., ``v1.3rc1``); -------------------------------. * `Update samples`_; * `Collect new authors`_; * `Anticipate next release`_; * `Build Conda ecosystem stack`_; * `Tag (pre)release`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_. .. _`faq:releaseprocedure`:. Release (e.g., ``v1.3``); ------------------------. * `Update samples`_ (if no prerelease); * `Collect new authors`_ (if no prerelease); * `Anticipate next release`_ (if no prerelease); * `Build Conda ecosystem stack`_ (if no prerelease); * `Run long tests`_; * `Do final pass before release tag`_; * `Tag (pre)release`_; * `Initialize release branch`_; * `Build extra Conda packages for Psi4 channel`_; * `Build Psi4conda set`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub release`_; * `Publish psicode.org release`_; * `Finalize release`_. .. _`faq:postreleaseprocedure`:. Post-Release (e.g., ``v1.8.2``); -------------------------------. * `Assemble postrelease changes`_; * `Tweak Conda for postrelease`_; * `Tag postrelease`_; * `Build Psi4conda set`_; * `Build extra Conda packages for Psi4 channel`_; * `Generate download page for psicode.org`_; * `Collect documentation snapshot`_; * `Publish GitHub postrelease`_; * `Publish psicode.org release`_; * `Finalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:2171,release,release,2171,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,2,['release'],['release']
Deployability,"https://doi.org/10.1063/1.4739423>`_). DC-12:. * ""Density cumulant functional theory: The DC-12 method, an improved; description of the one-particle density matrix,"" A. Yu. Sokolov,; A. C. Simmonett, and H. F. Schaefer, *J. Chem. Phys.* **138**, 024107; (2013).; (doi: `10.1063/1.4773580 <https://doi.org/10.1063/1.4773580>`_). ODC-06 and ODC-12:. * ""Orbital-optimized density cumulant functional theory,"" A. Yu. Sokolov, and; H. F. Schaefer, *J. Chem. Phys.* **139**, 204110 (2013).; (doi: `10.1063/1.4833138 <https://doi.org/10.1063/1.4833138>`_). ODC-13:. * ""Density cumulant functional theory from a unitary transformation:; N-representability, three-particle correlation effects, and application; to O4+,"" A. Yu. Sokolov, H. F. Schaefer, and W. Kutzelnigg,; *J. Chem. Phys.* **141**, 074111 (2014).; (doi: `10.1063/1.4892946 <https://doi.org/10.1063/1.4892946>`_). Configuration Interaction (CI); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. PSI has a highly optimized code for full configuration interaction; and highly correlated configuration interaction, as described in. * ""The Configuration Interaction Method: Advances in Highly; Correlated Approaches,"" C. D. Sherrill and H. F. Schaefer, in; *Adv. Quantum Chem.*, vol. 34, P.-O. L\ |o_dots|\ wdin, Ed.; (Academic Press, New York, 1999), pp. 143-269.; (doi: `10.1016/S0065-3276(08)60532-8; <https://doi.org/10.1016/S0065-3276(08)60532-8>`_). Coupled Cluster (CC); ^^^^^^^^^^^^^^^^^^^^. A general discussion of coupled cluster theory is given in. * ""An Introduction to Coupled Cluster Theory for Computational; Chemists,"" T. D. Crawford and H. F. Schaefer, *Rev. Comp. Chem.*; **14**, 33-136 (2000).; (doi: `10.1002/9780470125915.ch2; <https://doi.org/10.1002/9780470125915.ch2>`_). Implementation of frozen natural orbital (FNO) coupled cluster theory; in PSI and its performance for non-covalent interactions is discussed; in. * ""Accurate Noncovalent Interaction Energies Using Truncated Basis Sets; Based on Frozen Natural Orbitals,"" A. E. DePrince ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:10329,configurat,configuration,10329,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,2,['configurat'],['configuration']
Deployability,"ially**. Just go to http://www.psicode.org/downloads.html, select ""Installer"",; ""Stable Release"", and your choice of architecture and Python version,; and follow the instructions there. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4. * **Contribute Back**. Not applicable as not under git control. .. _`faq:binarypackage`:. Conda Binary Package; --------------------. * **Get Initially**. The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to :ref:`directions <faq:psi4pkg>`. Locally, install into; a conda environment as below. .. code-block:: bash. >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. .. code-block:: bash. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4 -c conda-forge. * **Contribute Back**. Not applicable as not under git control. .. _`faq:clonepsi4public`:. Clone from GitHub Repository; ----------------------------. * **Get Initially**. The |PSIfour| repository at https://github.com/psi4/psi4 works like; `every other GitHub repo; <https://help.github.com/articles/which-remote-url-should-i-use/>`_.; Locally, clone as below. .. code-block:: bash. # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. * **Build** :ref:`directions <faq:buildquick>`. * **Get Updates**. .. code-block:: bash. # on branch master; >>> git pull origin master. * **Contribute Back**. Contributions cannot be made directly to the main rep",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:5830,release,release,5830,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['release'],['release']
Deployability,"iant 0 level of theory, (3, 3). .. psivar:: CEPA(0) TOTAL ENERGY; CEPA(0) CORRELATION ENERGY; CEPA(1) TOTAL ENERGY; CEPA(1) CORRELATION ENERGY; CEPA(2) TOTAL ENERGY; CEPA(2) CORRELATION ENERGY; CEPA(3) TOTAL ENERGY; CEPA(3) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested variant of coupled electron pair approximation level of theory. .. psivar:: CFOUR ERROR CODE. The non-zero return value from a Cfour execution. .. psivar:: CI DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psiva",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24228,configurat,configuration,24228,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,"icenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and collect testing status from any compare_* in input file; if os.path.isfile(infile):; - exelist = [psi, infile, outfile, '-l', psidatadir]; + exelist = [psi, infile, outfile, '-l', psidatadir, '-n2']; # On Windows set Python interpreter explicitly as the shebang is ignored; if sys.platform.startswith('win'):. - Pytest (API)::. +++ b/tests/pytests/conftest.py; @@ -22,6 +22,7 @@ def pytest_collection_modifyitems(config, items):; def set_up_overall(request, tmp_path_factory):; import psi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:4112,release,release,4112,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"id library for Gaussian collocations for DFT. gau2grid; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* gau2grid. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gau2grid/badges/version.svg; :target: https://anaconda.org/psi4/gau2grid. * gau2grid is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, gau2grid has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; gau2grid can be obtained through ``conda install gau2grid -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect gau2grid and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built g",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:2678,install,installation,2678,doc/sphinxman/source/gau2grid.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst,1,['install'],['installation']
Deployability,"if(${ENABLE_adcc}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_adcc})); include(FindPythonModule); find_python_module(adcc ATLEAST 0.15.16 QUIET); endif(). if(${adcc_FOUND}); message(STATUS ""${Cyan}Found adcc${ColourReset}: ${PY_adcc} (found version ${adcc_VERSION})""); add_library(adcc_external INTERFACE) # dummy. else(); if(${CMAKE_INSIST_FIND_PACKAGE_adcc}); message(FATAL_ERROR ""Suitable adcc could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable adcc could not be located, ${Magenta}Building adcc${ColourReset} instead.""). ExternalProject_Add(adcc_external; BUILD_ALWAYS 1; URL https://github.com/adc-connect/adcc/archive/v0.15.16.tar.gz; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-lib=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}); endif(); else(); add_library(adcc_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/adcc/CMakeLists.txt:853,install,install,853,external/downstream/adcc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/adcc/CMakeLists.txt,2,['install'],"['install', 'install-lib']"
Deployability,"if(${ENABLE_bse}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_bse})); include(FindPythonModule); find_python_module(basis_set_exchange ATLEAST 0.9.0 QUIET); endif(); ; if(${basis_set_exchange_FOUND}); message(STATUS ""${Cyan}Found bse${ColourReset}: ${PY_basis_set_exchange} (found version ${basis_set_exchange_VERSION})""); add_library(bse_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_bse}); message(VERBOSE ""Suitable bse located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_bse}); message(FATAL_ERROR ""Suitable bse could not be externally located as user insists""); endif(); ; include(ExternalProject); message(STATUS ""Suitable bse could not be located, ${Magenta}Building bse${ColourReset} instead.""); ; file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); ; ExternalProject_Add(bse_external; BUILD_ALWAYS 1; URL https://github.com/MolSSI-BSE/basis_set_exchange/archive/v0.9.tar.gz; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-lib=${_install_lib}); endif(); else(); add_library(bse_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/bse/CMakeLists.txt:1139,install,install,1139,external/upstream/bse/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/bse/CMakeLists.txt,2,['install'],"['install', 'install-lib']"
Deployability,"if(${ENABLE_ddx}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_ddx})); include(FindPythonModule); find_python_module(pyddx ATLEAST 0.4.2 QUIET); endif(). if(${pyddx_FOUND}); message(STATUS ""${Cyan}Found ddx${ColourReset}: ${PY_pyddx} (found version ${pyddx_VERSION})""); add_library(ddx_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_ddx}); message(VERBOSE ""Suitable ddx located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_ddx}); message(FATAL_ERROR ""Suitable ddx could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable ddx could not be located, ${Magenta}Building ddx${ColourReset} instead.""). file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}"" _install_bin). ExternalProject_Add(ddx_external; BUILD_ALWAYS 1; URL https://github.com/ddsolvation/ddX/archive/v0.4.5.tar.gz; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-scripts=${_install_bin}; --install-lib=${_install_lib}); endif(); else(); add_library(ddx_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ddx/CMakeLists.txt:1153,install,install,1153,external/upstream/ddx/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/ddx/CMakeLists.txt,3,['install'],"['install', 'install-lib', 'install-scripts']"
Deployability,"if(${ENABLE_gpu_dfcc}); find_package(gpu_dfcc 0.3 CONFIG QUIET); if(${gpu_dfcc_FOUND}); get_property(_loc TARGET gpu_dfcc::gpu_dfcc PROPERTY LOCATION); message(STATUS ""${Cyan}Found gpu_dfcc${ColourReset}: ${_loc} (found version ${gpu_dfcc_VERSION})""); add_library(gpu_dfcc_external INTERFACE) # dummy. else(); if(${CMAKE_INSIST_FIND_PACKAGE_gpu_dfcc}); message(FATAL_ERROR ""Suitable gpu_dfcc could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable gpu_dfcc could not be located, ${Magenta}Building gpu_dfcc${ColourReset} instead.""). ExternalProject_Add(gpu_dfcc_external; DEPENDS psi4-core; URL https://github.com/edeprince3/gpu_dfcc/archive/b98c6f1.tar.gz # v0.3 + 1 (install fix); UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_CUDA_COMPILER=${CMAKE_CUDA_COMPILER}; -DCUDA_TOOLKIT_ROOT_DIR=${CUDA_TOOLKIT_ROOT_DIR}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DPYMOD_INSTALL_LIBDIR=${PYMOD_INSTALL_LIBDIR}; -DENABLE_XHOST=${ENABLE_XHOST}; -DENABLE_GENERIC=${ENABLE_GENERIC}; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -Dpsi4_DIR=${STAGED_INSTALL_PREFIX}/share/cmake/psi4; -Dpybind11_DIR=${pybind11_DIR}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}; -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; -DCMAKE_CUDA_FLAGS:STRING=${CMAKE_CUDA_FLAGS}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}; -DCMAKE_PREFIX_PATH:PATH=${STAGED_INSTALL_PREFIX}). set(gpu_dfcc_DIR ${STAGED_INSTALL_PREFIX}/share/cmake/gpu_dfcc CACHE PATH ""path to internally built gpu_dfccConfig.cmake"" FORCE); endif(); else(); add_library(gpu_dfcc_external INTERFACE) # dummy; endif(). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/gpu_dfcc/CMakeLists.txt:724,install,install,724,external/downstream/gpu_dfcc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/gpu_dfcc/CMakeLists.txt,1,['install'],['install']
Deployability,"if(${ENABLE_snsmp2}); if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_snsmp2})); include(FindPythonModule); find_python_module(snsmp2 ATLEAST 1.0.0 QUIET); endif(). if(${snsmp2_FOUND}); message(STATUS ""${Cyan}Found snsmp2${ColourReset}: ${PY_snsmp2} (found version ${snsmp2_VERSION})""); add_library(snsmp2_external INTERFACE) # dummy. else(); if(${CMAKE_INSIST_FIND_PACKAGE_snsmp2}); message(FATAL_ERROR ""Suitable snsmp2 could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable snsmp2 could not be located, ${Magenta}Building snsmp2${ColourReset} instead.""). ExternalProject_Add(snsmp2_external; DEPENDS qcelemental_external; BUILD_ALWAYS 1; URL https://github.com/DEShawResearch/sns-mp2/archive/12462c6.tar.gz # v1.0 + 26; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-lib=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}); endif(); else(); add_library(snsmp2_external INTERFACE) # dummy; endif(); #--install-scripts=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}; #--install-data=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}; #--install-headers=${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/snsmp2/CMakeLists.txt:924,install,install,924,external/downstream/snsmp2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/downstream/snsmp2/CMakeLists.txt,5,['install'],"['install', 'install-data', 'install-headers', 'install-lib', 'install-scripts']"
Deployability,"if(ENABLE_ambit OR ENABLE_CheMPS2 OR ENABLE_Einsums); project(TargetHDF5); set(PN ${PROJECT_NAME}). # <<< ""Build"" >>>. find_package(HDF5 QUIET REQUIRED). add_library(hdf5 INTERFACE); set_property(TARGET hdf5 PROPERTY INTERFACE_LINK_LIBRARIES ${HDF5_LIBRARIES}); set_property(TARGET hdf5 PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${HDF5_INCLUDE_DIRS}); set (${PN}_VERSION ${HDF5_VERSION}). get_property(_ill TARGET hdf5 PROPERTY INTERFACE_LINK_LIBRARIES); get_property(_iid TARGET hdf5 PROPERTY INTERFACE_INCLUDE_DIRECTORIES); set(${PN}_MESSAGE ""Found HDF5: ${_ill} (found version ${${PN}_VERSION})""); list(GET _ill 0 _ill0); message(STATUS ""${Cyan}Found HDF5${ColourReset}: ${_ill0};... (found version ${${PN}_VERSION})""). install(TARGETS hdf5; EXPORT ""${PN}Targets""). # <<< Export Config >>>. include(CMakePackageConfigHelpers). set(CMAKECONFIG_INSTALL_DIR ""${TargetHDF5_INSTALL_CMAKEDIR}""); configure_package_config_file(${PN}Config.cmake.in; ""${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake""; INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}); write_basic_package_version_file (${CMAKE_CURRENT_BINARY_DIR}/${PN}ConfigVersion.cmake; VERSION ${${PN}_VERSION}; COMPATIBILITY ExactVersion); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PN}Config.cmake; ${CMAKE_CURRENT_BINARY_DIR}/${PN}ConfigVersion.cmake; DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(EXPORT ""${PN}Targets""; NAMESPACE ""tgt::""; DESTINATION ${CMAKECONFIG_INSTALL_DIR}). unset(HDF5_FOUND); unset(HDF5_VERSION); unset(HDF5_LIBRARIES); unset(HDF5_INCLUDE_DIRS). add_custom_target(hdf5_external; ${CMAKE_COMMAND} ""-DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}"" -P ""${PROJECT_BINARY_DIR}/cmake_install.cmake""; COMMENT ""Installing Psi4-detected HDF5""). set(${PN}_DIR ${STAGED_INSTALL_PREFIX}/${TargetHDF5_INSTALL_CMAKEDIR} CACHE PATH ""path to externally detected ${PN}Config.cmake"" FORCE); else(); add_library(hdf5_external INTERFACE) # dummy; endif(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/common/hdf5/CMakeLists.txt:720,install,install,720,external/common/hdf5/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/common/hdf5/CMakeLists.txt,3,['install'],['install']
Deployability,"if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_optking})); include(FindPythonModule); find_python_module(optking ATLEAST 0.2.1 QUIET); endif(). if(${optking_FOUND}); message(STATUS ""${Cyan}Found optking${ColourReset}: ${PY_optking} (found version ${optking_VERSION})""); add_library(optking_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_optking}); message(VERBOSE ""Suitable optking located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_optking}); message(FATAL_ERROR ""Suitable optking could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable optking could not be located, ${Magenta}Building optking${ColourReset} instead.""). file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib). ExternalProject_Add(optking_external; BUILD_ALWAYS 1; URL https://github.com/psi-rking/optking/archive/0.2.1.tar.gz; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; --record=record.txt; --single-version-externally-managed; --install-lib=${_install_lib}); endif(). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/optking/CMakeLists.txt:1097,install,install,1097,external/upstream/optking/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/optking/CMakeLists.txt,2,['install'],"['install', 'install-lib']"
Deployability,"if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.26.0 QUIET); endif(). if(${qcelemental_FOUND}); message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); message(VERBOSE ""Suitable qcelemental located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); endif(). include(ExternalProject); message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""). file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib). ExternalProject_Add(qcelemental_external; BUILD_ALWAYS 1; URL https://github.com/MolSSI/QCElemental/archive/v0.27.1.tar.gz; DOWNLOAD_NO_EXTRACT 1; CONFIGURE_COMMAND """"; UPDATE_COMMAND """"; BUILD_COMMAND """"; BUILD_IN_SOURCE 1; INSTALL_COMMAND ${Python_EXECUTABLE} -m pip install <DOWNLOADED_FILE>; --target=${_install_lib}; --no-deps; #-v; ); endif(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/qcelemental/CMakeLists.txt:1145,install,install,1145,external/upstream/qcelemental/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/qcelemental/CMakeLists.txt,1,['install'],['install']
Deployability,"ify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:buildrunfaq`:. ===============; Build & Run FAQ; ===============. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. Obtaining and Updating |PSIfour|; --------------------------------. #. :ref:`faq:obtainpsi4`; #. :ref:`faq:quiz`; #. :ref:`faq:binary`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public`; #. :ref:`faq:tarballpsi4public`; #. :ref:`faq:recompile`. .. #. :ref:`faq:psi3sourceforge`. Configuring and Installing |PSIfour| via Binary; -----------------------------------------------. #. :ref:`faq:psicodedownload`; #. :ref:`sec:psi4conda`; #. :ref:`faq:psi4pkg`; #. :ref:`faq:updatepsi4`; #. :ref:`faq:psi4deps`; #. :ref:`sec:condadetails`; #. :ref:`faq:condamaxameri`. Configuring, Building, and Installing |PSIfour| via Source; ----------------------------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`fa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:1371,install,installs,1371,doc/sphinxman/source/build_faq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst,1,['install'],['installs']
Deployability,"iles.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Pyth",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:1205,install,install,1205,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,2,"['install', 'update']","['install', 'updated']"
Deployability,"in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7449,integrat,integration,7449,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['integrat'],['integration']
Deployability,"include <cmath> constants, unless _USE_MATH_DEFINES is defined.; # _CRT_* to squash some getenv, strdup, strncpy, ctime, fopen warnings; add_compile_definitions(; _USE_MATH_DEFINES; _CRT_NONSTDC_NO_DEPRECATE; _CRT_NONSTDC_NO_WARNINGS; _CRT_SECURE_NO_WARNINGS; ); # Set the exception handling model; add_compile_options(""/EHsc""); endif(). include_directories(include); include_directories(src); add_subdirectory(src); if(ENABLE_CYTHONIZE); add_subdirectory(driver); endif(). # <<< Version >>>; # * computes version from metadata.py and git info; # * calls cmake to run write_basic_package_version_file. add_custom_target(update_version ALL; COMMAND ${Python_EXECUTABLE} versioner.py --metaout ${CMAKE_CURRENT_BINARY_DIR}/metadata.py; --cmakeout ${CMAKE_CURRENT_BINARY_DIR}/metadata.cmake; COMMAND ${CMAKE_COMMAND} -DWTO=""${CMAKE_CURRENT_BINARY_DIR}/${CMAKECONFIG_INSTALL_DIR}""; -DPN=""psi4""; -P ${CMAKE_CURRENT_BINARY_DIR}/metadata.cmake; WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}; COMMENT ""Generating version info""); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/metadata.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). # <<< Install >>>. # <<< install bin/ >>>; configure_file(run_psi4.py psi4 @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}). if(WIN32); # Generate a batch script, which wraps ""bin/psi4"" script to ""python bin/psi4""; configure_file(psi4.bat psi4.bat @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4.bat; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}); endif(). # <<< install lib/ >>>; if(NOT ENABLE_CYTHONIZE); install(DIRECTORY driver; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; FILES_MATCHING; PATTERN ""*.py""; PATTERN pytest EXCLUDE; ); endif(). install(FILES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); conf",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:9702,install,install,9702,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability,"include:: @SFNX_INCLUDE@samples/tu1-h2o-energy/input.dat. .. note:: The memory and basis set specifications are placed *before* the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in ; :srcsample:`tu1-h2o-energy`.; You can run it if you wish.; Once |PSIfour| is in your path (see the ; :ref:`User Configuration <faq:runordinaryexe>`; section of the installation instructions), you can run this computation by typing. >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree--Fock energy in a section like this::. Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about :math:`1.0 \times 10^{-6}`, so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. :ref:`sec:installFile`). This very simple input is sufficient to run the requested information.; Notice that we didn't tell the program some otherwise useful information; like the charge on the molecule (0, it's neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree--Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords. Let's consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let's run a computation; on methylene (CH\ :sub:`2`\ ), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity :math:`2S+1 = 3`).; In this case, the default spin multiplicity (1) is not correct, so ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:4238,install,installation,4238,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,2,['install'],['installation']
Deployability,"indent A frequently encountered problem is what to do about bug fixes; that are necessary for uninterrupted code development of the code on the; main trunk. As Rule 1 of the above policy states, all bug fixes of the code; already in the recent stable release must go on the corresponding branch,; not on the main trunk. The next step depends on the severity of the bug:; \begin{enumerate}; \item If the bug fix is critical and potentially affects every; developer of the code on the main trunk, then \PSIfour\; administrators should be notified of the fix. If deemed necessary,; appropriate steps to create a new patch release will be made. Once; the next patch release is created then the bug fixes will be merged; onto the main trunk. If the bug fix doesn't warrant an immediate; new patch release, then you can incorporate the bug fix into your; local copy of the main trunk code manually or using SVN merge; features. This will allow you to continue development until next; patch release is created and the bug fix is incorporated into the; main trunk code in the repository. However you should {\em never}; merge such changes into the main trunk yourself.; \item If the bug fix is not critical (e.g. a documentation; update/fix), then you should wait until next patch release when it; will be merged into the main trunk automatically.; \end{enumerate}. \noindent; The following are some of the most commonly used SVN commands for checking; out and updating working copies of the \PSIfour\ source code. \noindent; $\bullet$ To checkout a working copy of the head of the main trunk:. {\tt svn co https://sirius.chem.vt.edu/svn/psi4/trunk/ psi4} . \noindent; $\bullet$ To check out a working copy of the head of a specific release branch,; e.g., the branch labelled {\tt psi-4-0}:. {\tt svn co https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0 psi4}. \noindent Note that subsequent {\tt svn update} commands in this; working copy will provide updates only on the chosen branch. Note; also that a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:4700,patch,patch,4700,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,2,"['patch', 'release']","['patch', 'release']"
Deployability,"indent; {\tt URL: https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; Some words of advice:; \begin{enumerate}; \item Most SVN commands are reasonably safe, . \item Unlike CVS, you shouldn't use {\tt svn update} to see the status; of your working copy. With SVN you should use {\tt svn status} to; see if you've modified any files or directories. If you want a; direct comparison with the repository, you should use {\tt svn status -u}.; \item Read the SVN manual. Seriously.; \begin{center}; \htmladdnormallink{{\tt; http://svnbook.red-bean.com/}}{http://svnbook.red-bean.com/}; \end{center}; \item If you're about to start some significant development or bug-fixes,; first update your working copy to the latest version on your branch.; In addition, if you do development over a long period of time (say weeks to; months) on a specific module or modules, be sure to run a {\tt svn status -u}; occasionally. In can be {\em very} frustrating to try to check in lots; of changes, only to find out that the \PSIfour\ has changed dramatically; since your last update.; \end{enumerate}. \subsection{Checking in altered \PSIfour\ binaries or libraries}. If you have changes to Psi binaries or libraries which already exist, one; of two series of steps is necessary to check these changes in to the main; repository. The first series may be followed if all changes have been made; only to files which already exist in the current version. The second series; should be followed if new files must be added to the code in the repository. \begin{itemize}; \item No new files need to be added to the repository. We will use; \library{libciomr} as an example. ; \begin{enumerate}; \item {\tt cd \$PSI4/src/lib/libciomr}; \item {\tt svn ci -m ``Put comments here.''}; \end{enumerate}; \item New files must be added to the repository. Again, we use ; \library{libciomr}; as an example. Suppose the new file is named \file{great\_code.cc} .; \begin{enumerate}; \item {\tt cd \$PSI4/src/lib/libciomr} ;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:8180,update,update,8180,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['update'],['update']
Deployability,"index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30053,release,release,30053,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,2,"['install', 'release']","['install-generator', 'release']"
Deployability,"ing that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::te",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64309,install,installed,64309,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installed']
Deployability,"ing using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Pytho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:2024,install,install,2024,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability,"install(FILES share/psi4/quadratures/1_x/error${_endian_ext}.bin; RENAME quadratures/1_x/error.bin; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4). install(DIRECTORY include/psi4/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}/psi4). # <<< install external's share/ to psi4 share/ >>>. if(TARGET libefp::efp); # bring libefp's fraglib to PSIDATADIR's attention; set(_fraglib_in_psi4_dir ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4/efpfrag). add_custom_target(consolidate_psidatadir ALL; VERBATIM; COMMAND ${CMAKE_COMMAND} -E make_directory ${_fraglib_in_psi4_dir}; COMMENT ""Symlink external resources into PSIDATADIR""). file(GLOB _dotefps ""${libefp_FRAGLIB_DIRS}/*.efp""); foreach(_dotefp ${_dotefps}); get_filename_component(_efpfile ${_dotefp} NAME); add_custom_command(TARGET consolidate_psidatadir; POST_BUILD; COMMAND ${CMAKE_COMMAND} -E create_symlink ${_dotefp} ${_fraglib_in_psi4_dir}/${_efpfile}); endforeach(); endif(). # <<< Export Config >>>. configure_file(psi4PluginCache.cmake.in psi4PluginCache.cmake @ONLY). install(FILES ${CMAKE_BINARY_DIR}/psi4PluginCache.cmake; ${PSI4_ROOT}/cmake/psi4OptionsTools.cmake; ${PSI4_ROOT}/cmake/custom_static_library.cmake; ${PSI4_ROOT}/cmake/custom_cxxstandard.cmake; ${PSI4_ROOT}/cmake/xhost.cmake; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKECONFIG_INSTALL_DIR}). # <<< Export Config for Plugins >>>; # Determine relative path from Psi4's include directory to PyBind11's; file(RELATIVE_PATH RELATIVE_PYBIND11_INCLUDE_DIR; ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}; ${pybind11_INCLUDE_DIR}); configure_package_config_file(; psi4Config.cmake.in; ${CMAKE_CURRENT_BINARY_DIR}/${psi4_INSTALL_CMAKEDIR}/psi4Config.cmake; INSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${psi4_INSTALL_CMAKEDIR}/psi4Config.cmake; ${CMAKE_CURRENT_BINARY_DIR}/${psi4_INSTALL_CMAKEDIR}/psi4ConfigVersion.cmake; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKECONFIG_INSTALL_DIR}); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:14079,install,install,14079,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,2,['install'],['install']
Deployability,"int2_GENERATOR ""If prebuilt not found, don't build Libint2 from source tarball but instead build and run generator (several hours for production library). Edit angular momentum and integrals classes directly in `external/upstream/libint2/CMakeLists.txt` (requires Ninja)."" OFF); option_with_default(psi4_SHGAUSS_ORDERING ""Ordering for shells of solid harmonic Gaussians: standard -- standard ordering (-l, -l+1 ... l) -or- gaussian -- the Gaussian ordering (0, 1, -1, 2, -2, ... l, -l). Changing this is experimental, expert only, and not a future plan. Internal calculations should be correct and fchk files should be correct, but other exports like Molden and QCSchema.Wavefunction won't be."" gaussian); include(custom_int_orderings). ######################## Process & Validate Options ##########################; include(GNUInstallDirs); include(autocmake_safeguards); include(custom_color_messages). if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT); set(CMAKE_INSTALL_PREFIX ""/usr/local/psi4"" CACHE PATH ""Install path"" FORCE); endif(); message(STATUS ""Psi4 install: ${CMAKE_INSTALL_PREFIX}""). # Python use in psi4 (not incl. external/); # * interpreter: run the versioner in psi4-core. run tests and build docs in psi4; # * headers: Python.h for pybind11 to build against in psi4-core; # * library: not at all. set(Python_ADDITIONAL_VERSIONS 3.12 3.11 3.10 3.9 3.8) # adjust with CMake minimum FindPythonInterp; find_package(Python 3.8 COMPONENTS Interpreter Development NumPy REQUIRED); message(STATUS ""${Cyan}Found Python ${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}${ColourReset}: ${Python_EXECUTABLE} (found version ${Python_VERSION})""). set(STAGED_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/stage); message(STATUS ""Psi4 staging: ${STAGED_INSTALL_PREFIX}""); message(STATUS ""CMAKE_CXX_FLAGS: ${CMAKE_CXX_FLAGS}""); add_subdirectory(external/common); add_subdirectory(external/upstream). # external projects manage their own OpenMP and c++YY flags, so only add to CXX_FLAGS for psi4-core; include(cus",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:13799,install,install,13799,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability,"inum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation models; are currently implemented using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.; For a concise introduction to the; `theory behind ddx <https://ddsolvation.github.io/ddX/md_docs_theory.html>`_; or further `literature references <https://ddsolvation.github.io/ddX/label_references.html>`_; see the ddx documentation. The usage of ddx-based solvation models is enabled; by specifying |globals__ddx| ``true`` in your input file.; The solvation model itself is selected using the |ddx__ddx_model| parameter.; Additionally the definition of the solvent and solute cavity is required; and further parameters allow to influence details of discretisation,; numerical integration and iterative solvers,; see the next sections for details. .. note:: At present PCM can only be used for energy calculations with SCF; wavefunctions in the PTE approximation [Cammi:2009:164104]_.; All ERI algorithms (``PK``, ``OUT_OF_CORE``, ``DIRECT``, ``DF``, ``CD``) are supported. .. note:: linear response calculations (static polarisabilities, TD-SCF) are supported for RHF/UHF if available. .. warning:: Currently the ddx interface **cannot** exploit molecular point group symmetry. .. warning:: Analytic gradients and Hessians are currently **not available**; with dd-based solvation models. A minimal input for a Hartree--Fock calculation with dd-based PCM would look like; the following: ::. import psi4; nh3 = psi4.geometry(""""""; N -0.0000000001 -0.1040380466 0.0000000000; H -0.9015844116 0.4818470201 -1.5615900098; H -0.9015844116 0.4818470201 1.5615900098; H 1.8031688251 0.4818470204 0.0000000000; symmetry c1; no_reorient; no_com",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:4168,integrat,integration,4168,doc/sphinxman/source/ddx.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst,1,['integrat'],['integration']
Deployability,"io/badge/home-PCMSolver-5077AB.svg; :target: https://github.com/PCMSolver/pcmsolver. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the PCMSolver library developed; by R. Di Remigio and L. Frediani.; The PCMSolver library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable continuum model (PCM), a continuum solvation model [Tomasi:2005:2999]_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/pcmsolver/badges/version.svg; :target: https://anaconda.org/psi4/pcmsolver. * PCMSolver is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, PCMSolver has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; PCMSolver can be obtained through ``conda install pcmsolver -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_PCMSolver`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect PCMSolver and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. pcmsolver from conda without thinking, consult. * To remove a conda installation, ``conda remove pcmsolver``. **Source**. * .. image:: https://img.shields.io/github/tag/PCMSolver/pcmsolver.svg?maxAge=2592000; :target: https://github.com/PCMSolver/pcmsolver. * If using |PSIfour| built from source and you want PCMSolver built from; from source also,; enable it as a feature with :makevar:`ENABLE_PCMSolver`,; and let the build system fetch and build it and activate dependent code. .. index:: PCM; Using PCM. .. _`sec:usingPCM`:. Using the polarizable continuum model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PCM",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst:2468,install,installed,2468,doc/sphinxman/source/pcmsolver.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst,2,['install'],"['install', 'installed']"
Deployability,"ion *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; ---------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22695,release,release,22695,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['release'],['release']
Deployability,"ions of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` so that QCEngine can detect it. Check if and where; found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular gcp compilation, simply adjust its; position in the path environment variables. Running gCP; ~~~~~~~~~~~. At present there is a limited interface to gCP that is used; only to implement the ""HF-3c"" [Sure:2013:1672]_, ""PB",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:2719,install,installation,2719,doc/sphinxman/source/gcp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst,1,['install'],['installation']
Deployability,"is set specifictation is; molecule mymol {; # water dimer where; O -2 0 0; H_hb -1 0 0; H -1 -1 0; --; O 2 0 0; H_hb 1 0 0; H 2 1 0; }; * per molecule; set basis cc-pv(d+d)z; --or--; basis mydz {; assign cc-pv(d+d)z; }; ; * per element; basis mydz {; assign cc-pv(d+d)z; ; * per . <<< Q for Jet/Andy/Rob >>>. * Shouldn't lock_frame_ be reset to False for set_basis_all_atoms/by_symbol/by_label?; Need to trigger reeval of symm upon geometry_update(). Doing this with set_shell.... * Ok that maybe can't form a basisset name using a key that's not a keyword. * Ok to remove parser from arg list. * since set_basis by number being removed from user domain, switching it to 0-indexing (more natural; for c-side prog code) and to not indluce dummies (why give a dummy a basis set). * ok that symm lowering won't show up until basis built?. * order of searching for basissets. * get approval for bas search order: strings, here, PSIPATH, library (I think). <<< todo >>>. * make sure PSIDATDIR getting searched right, esp for installed copy. * transfer load_basis printing to output file. * check puream handling. * get correct full PT basis aux sets. * empty mol before adding basis sets in basis {} block; * establish that a basis spec must cover the whole molecule. << boost::shared_ptr<BasisSetParser> parser(new Gaussian94BasisSetParser());; << basisset_ = BasisSet::construct(parser, molecule_, ""BASIS"");. >> basisset_ = BasisSet::pyconstruct(molecule_, ""BASIS"", options_.get_str(""BASIS""));. << boost::shared_ptr<BasisSet> auxiliary = BasisSet::construct(parser, primary->molecule(), ""DF_BASIS_SCF"");. >> boost::shared_ptr<BasisSet> auxiliary = BasisSet::pyconstruct(primary->molecule(),; ""DF_BASIS_SCF"", options.get_str(""DF_BASIS_SCF""), ""JKFIT"", options.get_str(""BASIS""));. boost::shared_ptr<BasisSetParser> parser(new Gaussian94BasisSetParser(old_forced_puream));; molecule_->set_basis_all_atoms(basisname, ""DUAL_BASIS_SCF"");; boost::shared_ptr<BasisSet> dual_basis = BasisSet::construct(parser, mo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst:8306,install,installed,8306,doc/sphinxman/source/attic/prog_basissets.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/prog_basissets.rst,1,['install'],['installed']
Deployability,"it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; -----------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1329,install,install,1329,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,"['install', 'update']","['install', 'updated']"
Deployability,"it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speakin",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1571,install,installed,1571,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['install'],['installed']
Deployability,"ite; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructio",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29749,update,update,29749,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['update'],['update']
Deployability,"ith the contributors. Before venturing into projects on GitHub where you don't know the maintainers, it doesn't hurt to read https://snarky.ca/setting-expectations-for-open-source-participation/ . b) Psi4 is a learning tool for all involved, so partial reviews in areas of confidence and questions and comments on PRs in general are encouraged. c) Approving before CI completes is fine, though it can be mildly personally embarrassing when CI catches something you didn't. d) All main branches (master and `1.N.x` maintenance) are protected by GitHub, including administrators, so even with write access, no one can accidentally push (master) or rewrite the history (master and maintenance). e) PR owners who also have maintainer status can merge their PRs as GitHub enforces two external reviews. f) Unless there's been a lot of discussion on core-dev about merge order, generally the 2nd positive reviewer merges the PR. Also fine to add review and leave merge for later. g) Presently only Azure is set up as a required-to-merge service. Incomplete GHA Ecosystem or Docs won't block merging, but we do usually let it complete before merging unless it's a trivial PR. h) We don't enforce branches to be up to date before merging since that'd be a lot of extra CI time and coordination when merging several PRs in a day. So, if a PR hasn't been updated in a while, and a reviewer is nervous about PR interference, fine to ask submitter to rebase. Or, there's an update button on the PR -- but if this is used, warn the submitted that their remote and local branches will be out of sync. For this reason, we try to merge newer contributors first so the rebase falls on more experienced contributors. i) Ideally a PR consists of atomic, compilable commits. It almost never happens, so unless there's been discussion, squash merge all PRs. j) When discussion on issue has overcome the original problem and settled on needing long-term work, fine to move the long-term item to Wish List and close issue. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst:11694,update,updated,11694,doc/sphinxman/source/manage_git.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_git.rst,2,['update'],"['update', 'updated']"
Deployability,"itor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `git diff --relative --name-only HEAD -- *.py`. How and when to *not* apply code styling to your contributions; --------------------------------------------------------------. TODO",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3221,install,install,3221,doc/sphinxman/source/code_style.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst,1,['install'],['install']
Deployability,"kiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:24056,install,installers,24056,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installers']
Deployability,"king copy to include the latest revisions:. {\tt svn update}. \noindent; Notes: (a) This will update only the revisions on your current branch;; (b) The old {\tt -d} and {\tt -P} flags required by CVS are not necessary with SVN. . \noindent; $\bullet$ To convert your working copy to the head of a specific branch:. {\tt svn switch https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; $\bullet$ To convert your working copy to the head of the main trunk:. {\tt svn switch https://sirius.chem.vt.edu/svn/psi4/trunk/}. \noindent; $\bullet$ To find out what branch your working copy is on, run this in your; top-level \PSIfour\ source directory:. {\tt svn info | grep URL}. \noindent; This will return the SVN directory from which your working copy was; taken, e.g.,. \noindent; {\tt URL: https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; Some words of advice:; \begin{enumerate}; \item Most SVN commands are reasonably safe, . \item Unlike CVS, you shouldn't use {\tt svn update} to see the status; of your working copy. With SVN you should use {\tt svn status} to; see if you've modified any files or directories. If you want a; direct comparison with the repository, you should use {\tt svn status -u}.; \item Read the SVN manual. Seriously.; \begin{center}; \htmladdnormallink{{\tt; http://svnbook.red-bean.com/}}{http://svnbook.red-bean.com/}; \end{center}; \item If you're about to start some significant development or bug-fixes,; first update your working copy to the latest version on your branch.; In addition, if you do development over a long period of time (say weeks to; months) on a specific module or modules, be sure to run a {\tt svn status -u}; occasionally. In can be {\em very} frustrating to try to check in lots; of changes, only to find out that the \PSIfour\ has changed dramatically; since your last update.; \end{enumerate}. \subsection{Checking in altered \PSIfour\ binaries or libraries}. If you have changes to Psi binaries or libraries which a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:7327,update,update,7327,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['update'],['update']
Deployability,"l or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:19632,install,installation,19632,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installation']
Deployability,"lated CI wavefunctions that can be helpful in more ; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]_. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]_. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF and RASSCF computations are types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:4496,configurat,configuration,4496,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['configurat'],['configuration']
Deployability,"le (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general :ref:`scratch documentation <sec:Scratch>`. .. _`faq:psi4fileretention`:. How do I retain specific Psi4 scratch files; -------------------------------------------. You can set up a specific path for |PSIfour| scratch file and keep them; for later use through the :ref:`psi4_io <sec:Scratch>` handler. .. _`faq:psi4PBS`:. How to use Psi4 within a PBS queue; ----------------------------------. You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:59762,update,updates,59762,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['update'],['updates']
Deployability,"le and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:30618,install,installation,30618,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,"le-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured ``psi4`` itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install ``psi4-dev`` for build tools. The :ref:`sec:psi4conda` uses a `conda constructor; <https://github.com/conda/constructor>`_ to package up Miniconda,; the |PSIfour| conda package, the |PSIfour| add-on conda packages, dependencies; thereof (possibly from particular channels), and the psi4 channel; as a default. This is very convenient for novice users and robust; against differing channel settings in ``~/.condarc``. But proficient; conda users may prefer to treat ``psi4`` as a normal conda package and; not have another large Miniconda installation (including the hefty MKL); lying around just ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:13761,install,install,13761,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"lease (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` from Linux; .. * Run ``kitandkapoodle.py`` and allow stack to upload to anaconda.org to ``psi4/label/dev``. Poodle emits with ``--label dev`` so will go to the subchannel. May need to delete packages to clear out space on anaconda.org; .. * Copy ``meta.yaml`` and ``build.sh`` of at least ``psi4-multiout`` and ``psi4-rt`` to e.g., v121-build.sh files for easy reference or rebuilding as dependencies in master change. .. Publish to main conda label (pre-Spring 2023); .. ---------------------------------------------; ..; .. * Go through each active conda package off https://anaconda.org/psi4/repo; ..; .. - Find the most recent build set (Linux/Mac, active py versions) that ``psi4``/``psi4-rt``/``psi4-dev`` is using; .. - _add_ (not replace) the ``main`` label.; ..; .. * This makes a ``conda install psi4 -c psi4`` get everything psi4 needs. For the moment ``conda install psi4 -c psi4/label/dev`` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. May help to check versions and build versions against ltrtver in ``conda_build_config.yaml``.; .. * This step is manual, so takes a while. (It gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unifie",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:21310,install,install,21310,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['install']
Deployability,"licitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; :py:func:`~psi4.core.set_num_threads` Psithon method or the default environmental variables. .. index:: PBS queueing system, threading; .. _`sec:PBS`:. PBS job file; ============. To run a |PSIfour| job on a PBS queueing system, you need to properly set up; all necessary variables in the PBS job file. Below is a minimal example of; a PBS job file for a threaded job, and a short explanation for each section. .. code-block:: bash. #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i input.in -o input.out -n 4. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end. The top section features PBS-specific commands. These depend on the ; specific characteristics of your PBS queuing system but they may include: ::. #!/bin/tcsh; #PBS -j oe ; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V; ; The ``PBS -j oe`` option instructs PBS to write any output or error message; from the queuing system in dedicated files. ``PBS -l pmem=2120mb`` requests ; 2120 MB of memory for each thread on the node. The total memory requested for ; the job by PBS should generally be slightly greater than what indicated ; in the input file (see :ref:`memory setting <sec:memory>`). .. In the next section, we define :envvar:`OMP_NUM_THREADS` and :envvar:`MKL_NUM_THREADS`; .. to use 4 threads for OpenMP parallelization a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:14152,install,install,14152,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['install'],['install']
Deployability,list(APPEND sources; algebra_interface.cc; blas.cc; blas_algorithms.cc; blas_compatibile.cc; blas_diis.cc; blas_interface.cc; blas_parser.cc; blas_solve.cc; heff.cc; heff_diagonalize.cc; idmrpt2.cc; idmrpt2_Heff.cc; idmrpt2_Heff_doubles.cc; idmrpt2_Heff_singles.cc; idmrpt2_add_matrices.cc; idmrpt2_f_int.cc; idmrpt2_t1_amps.cc; idmrpt2_t2_amps.cc; index.cc; index_iterator.cc; main.cc; manybody.cc; manybody_denominators.cc; matrix.cc; matrix_addressing.cc; matrix_memory_and_io.cc; matrixtmp.cc; mp2_ccsd.cc; mp2_ccsd_add_matrices.cc; mp2_ccsd_amps.cc; mp2_ccsd_f_int.cc; mp2_ccsd_t1_amps.cc; mp2_ccsd_t2_amps.cc; mp2_ccsd_w_int.cc; mp2_ccsd_z_int.cc; mrcc.cc; mrcc_Heff.cc; mrcc_add_matrices.cc; mrcc_compute.cc; mrcc_energy.cc; mrcc_f_int.cc; mrcc_pert_triples.cc; mrcc_t1_amps.cc; mrcc_t2_amps.cc; mrcc_t_amps.cc; mrcc_tau.cc; mrcc_w_int.cc; mrcc_z_int.cc; mrccsd_t.cc; mrccsd_t_compute.cc; mrccsd_t_compute_restricted.cc; mrccsd_t_compute_spin_adapted.cc; mrccsd_t_form_matrices.cc; mrccsd_t_heff.cc; mrccsd_t_heff_a.cc; mrccsd_t_heff_a_restricted.cc; mrccsd_t_heff_ab.cc; mrccsd_t_heff_ab_restricted.cc; mrccsd_t_heff_b.cc; mrccsd_t_heff_b_restricted.cc; mrccsd_t_heff_restricted.cc; mrccsd_t_setup.cc; operation.cc; operation_compute.cc; operation_contraction.cc; operation_sort.cc; psimrcc_wfn.cc; sort.cc; sort_mrpt2.cc; sort_out_of_core.cc; special_matrices.cc; transform.cc; transform_block.cc; transform_mrpt2.cc; transform_presort.cc; transform_read_so.cc; updater.cc; updater_bw.cc; updater_mk.cc; ); psi4_add_module(bin psimrcc sources); ,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/psimrcc/CMakeLists.txt:1471,update,updater,1471,psi4/src/psi4/psimrcc/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/psimrcc/CMakeLists.txt,1,['update'],['updater']
Deployability,"list(APPEND sources; augmented_hessian; mcscf_solver; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/procrouting/mcscf); endforeach(). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/CMakeLists.txt:631,install,install,631,psi4/driver/procrouting/mcscf/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/procrouting/mcscf/CMakeLists.txt,1,['install'],['install']
Deployability,"list(APPEND sources; exceptions; fcidump; fchk; inpsight; numpy_helper; optproc; p4regex; procutil; python_helpers; solvers; testing; text; util; writer; ). foreach(py ${sources}); execute_process(COMMAND ${Python_EXECUTABLE} -c; ""from Cython.Build import cythonize; cythonize('${CMAKE_CURRENT_SOURCE_DIR}/${py}.py', language_level=3)""; RESULT_VARIABLE _exec_python_err); file(COPY ${py}.c DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); file(REMOVE ${py}.c). add_library(${py} SHARED ""${py}.c""); target_include_directories(${py} PRIVATE ""${Python_INCLUDE_DIRS}""); set_target_properties(${py} PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME ${py}; SUFFIX ""${PYTHON_MODULE_EXTENSION}"") # for python module; ; install(TARGETS ${py}; LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/driver/p4util); endforeach(); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/CMakeLists.txt:731,install,install,731,psi4/driver/p4util/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/driver/p4util/CMakeLists.txt,1,['install'],['install']
Deployability,"ll determinants are connected to each other by no more than two; excitations. In practice, this usually means that the active space can have; at most two particles, or at most two holes. Examples would include ; CAS(2,2), CAS(2,8), CAS(4,3), etc., where CAS(n,m) refers to a; complete-active-space configuration interaction (CASCI) reference with n; electrons in m orbitals. If the user specifies active spaces that do not fit; these limitations, then the code will still run, but some relevant; determinants will be missing, and the answer obtained will be an approximation; to the true Mk-MRCC procedure. The PSIMRCC code itself does not perform orbital optimization. Hence, the; references used might be considered CASCI references, but not CASSCF; references (CASSCF implies that the orbitals have been optimized specifically; to minimize the energy of the CASCI reference). However, if one wishes to; use two-configuration self-consistent-field (TCSCF) orbitals, those can; be obtained using the multi-configuration self-consistent-field (MCSCF); component of PSIMRCC (specifying |mcscf__reference| to be ``twocon``).; This is suitable for describing diradicals. Otherwise, one may use RHF or; ROHF orbitals as input to PSIMRCC. Due to a current limitation in the code,; one must obtain orbitals using PSIMRCC's MCSCF module regardless of what; orbital type is chosen, ``twocon``, ``rhf``, or ``rohf``. An example of the; MCSCF input is given below. PSIMRCC is most commonly used for low-spin cases (singlets or open-shell; singlets). It is capable of performing computations on higher spin states; (*e.g.*, triplets), but in general, not all the required matrix elements have; been coded for high-spin cases, meaning that results will correspond to an; approximate Mk-MRCC computation for high-spin cases. A Simple Example; ________________ . The |psimrcc__corr_wfn| allows you to select one of three methods; Mk-MRPT2 [``PT2``], Mk-MRCCSD [``CCSD``], or Mk-MRCCSD(T) [``CCSD_T``].; The |psimrc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst:4554,configurat,configuration,4554,doc/sphinxman/source/psimrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst,2,['configurat'],['configuration']
Deployability,"llowing precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not trip), ``TRIPLETS`` (not trip), ``SINGLES`` (not sing),; ``SINGLETS`` (not sing). * ``CONVERGENCE`` (not conv, not converge) and ``TOLERANCE`` (not tol). * Convergence of a method should be governed by an ``E_CONVERGENCE`` for; energy and either a ``D_CONVERGENCE`` for density or a ``R_CONVERGENCE``; for residual/amplitudes. All of these should be doubles- let the input; parser handle the flexible input format. * Diis should have a boolean ``DIIS`` (not do_diis, not use_diis) to turn; on/off diis extrapolation, a ``DIIS_MIN_VECS`` and ``DIIS_MAX_VECS`` for; m",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:7638,install,install,7638,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['install'],['install']
Deployability,"lock:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.17; ..; .. * It is of greatest importance that the |PSIfour| executable be linked against conda libpython.so *not* against any system libpython.so. This is arranged by setting ``RPATH`` to seek libraries relative to executable (than",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27539,install,install,27539,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"lso,; follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a; Fortran compiler, and run make). From version 3.1.0 onwards, DFTD3 can; be used as-is; for earlier versions, patches are available:; :source:`psi4/share/psi4/scripts/patch_grimme_dftd3.3.0.2`. To be used by |PSIfour|, the classic program binary (``dftd3``) must be; found in your :envvar:`PATH` or the s-dftd3 module in your :envvar:`PYTHONPATH`; so QCEngine can detect it. Check if and where found through ``qcengine info``. If; |PSIfour| is unable to execute the binary, an error will be reported.; To preferentially use a particular dftd3 compilation, simply adjust its; position in the path environment variables. .. >>> cd dftd3; .. >>> ls; .. dftd3.tar; .. patch_grimme_dftd3.3.0.2; .. >>> tar -xvf dftd3.tar; .. copyc6.f; .. dftd3.f; .. Makefile; .. man.pdf; .. pars.f; .. param; .. >>> patch < patch_grimme_dftd3.3.0.2; .. patching file dftd3.f; .. >>> make; .. making dftd3.o from dftd3.f; .. ifort -O -c dftd3.f -o dftd3.o; .. making copyc6.o from copyc6.f; .. ifort -O -c copyc6.f -o copyc6.o; .. ifort dftd3.o copyc6.o -o ./dftd3; .. >>> ls; .. Makefile copyc6.o dftd3.f dftd3.tar param patch_grimme_dftd3.3.0.2; .. copyc6.f dftd3 dftd3.o man.pdf pars.f. Theory; ~~~~~~. The local or semilocal character of conventional density functionals; necessarily leads to neglect of the long-range correlation interactions; which capture attractive van der Waals forces. Initially proposed by Yang; [Wu:2002:515]_ and assiduously developed by Grimme, [Grimme:2004:1463]_; [Grimme:2006:1787]_ [Grimme:2010:154104]_ the DFT+Dispersion method; appends to the base functional a scaled, damped, and fitted leading term; to the well-known dispersion energy series, :math:`E_{disp} = -C_6/R^6; -C_8/R^8 -C_{10}/R^{10}-\cdots`. The DFT-D2 [Grimme:2006:1787]_ variant; takes the explicit form below. Here, dispersion coefficients,; :math:`C_6^{ij}`",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:8366,patch,patching,8366,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['patch'],['patching']
Deployability,"lude:: autodir_options_c/detci__fci.rst; .. include:: autodir_options_c/globals__frozen_docc.rst; .. include:: autodir_options_c/globals__restricted_docc.rst; .. include:: autodir_options_c/globals__restricted_uocc.rst; .. include:: autodir_options_c/globals__frozen_uocc.rst; .. include:: autodir_options_c/detci__ci_maxiter.rst; .. include:: autodir_options_c/detci__num_roots.rst; .. include:: autodir_options_c/detci__icore.rst; .. include:: autodir_options_c/detci__diag_method.rst; .. include:: autodir_options_c/detci__opdm.rst; .. include:: autodir_options_c/detci__tdm.rst; .. include:: autodir_options_c/detci__dipmom.rst; .. include:: autodir_options_c/detci__mpn.rst. For larger computations, additional keywords may be required, as; described in the DETCI section of the Appendix :ref:`apdx:detci`. .. index:: ; pair: CI; spin multiplicities of higher roots. Spin Multiplicities of Higher Roots; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. As mentioned above, DETCI works in a basis of Slater determinants, rather than; configuration state functions. The correct value of :math:`M_s` is easily enforced; by fixing the number of alpha and beta electrons to be constant across all determinants ; selected for the CI computation. However, determinant-based codes like DETCI do; not necessarily enforce the correct spin :math:`S`. For example, diagonalizing the; Hamiltonian in a space spanned by determinants with :math:`M_s = 0` can yield ; both singlet and triplet solutions, because triplets (:math:`S = 1`) also have an; :math:`M_s = 0` component. (Indeed, even higher spin multiplicities may be encountered; if the excitation level is high enough). For closed-shell references with :math:`M_s = 0`,; the program will assume by default that a singlet (:math:`S = 0`) computation is desired,; and will utilize alpha/beta interchange symmetries to speed up the computation ; (this is controlled by the advanced keyword |detci__ms0|, which defaults to ``TRUE``).; Thus, if a user requests multiple",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:10293,configurat,configuration,10293,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['configurat'],['configuration']
Deployability,"ly, instead of just running; \file{config.status}, because the latter contains no information about; the new code. \subsection{Updating checked out code}. If the code in the main repository has been altered, other users' working; copies will of course not automatically be updated. In general, it is; only necessary to execute the following steps in order to completely update; your working copy of the code:. \begin{enumerate}; \item {\tt cd \$PSI4}; \item {\tt svn update}; \end{enumerate}. This will examine each entry in your working copy and compare it to; the most recent version in the main repository. When the file in the; main repository is more recent, your version of the code will be; updated. If you have made changes to your version, but the version in; the main repository has not changed, the altered code will be; identified to you with an ``M''. If you have made changes to your; version of the code, and one or more newer versions have been updated; in the main repository, SVN will examine the two versions and attempt; to merge them -- this process often reveals conflicts, however, and is; sometimes unsuccessful. You will be notified of any conflicts that; arise (labelled with a ``C'') and you must resolve them manually. If new directories have been added to the repository, the update above; will automatically add them to your working copy. However, you may; need to re-run {\tt autoconf} and configure ({\tt; \$objdir/config.status --recheck} is a convenient command) to be; able to build the new code. \subsection{Removing code from the repository}; If alterations of libraries or binaries under Psi involves the deletion of ; source code files from the code, these must be explicitly removed through SVN. The following steps will remove a source code file named \file{bad\_code.F} ; from a binary module named \module{great\_code}:; \begin{enumerate}; \item {\tt cd \$PSI4/src/bin/great\_code}; \item {\tt svn remove bad\_code.F}; \item {\tt svn ci -m ``Put comments he",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:14495,update,updated,14495,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['update'],['updated']
Deployability,"make -DMAX_AM_ERI=6. * Relevant CMake Options:. .. code-block:: bash. MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since |PSIfour| 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all |PSIfour| builds detect that installation at compile-time. To switch a finished build to a larger Libint, enter ``<objdir>``,; remove the result of ``make install`` (if ever invoked), remove; ``external/upstream/libint/``. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove ``stage/include/libint/``, ``stage/share/cmake/Libint/``,; ``stage/lib/libint2.so.2``. Edit MAX_AM_ERI; value in ``CMakeCache.txt``. Reinvoke ``make`` and check the number; beside ``Found Libint`` in the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum integrals from conda; -----------------------------------------------------. Libint2 conda packages are available from conda for Linux, Mac, and Windows. The Linux package has base ``MAX_AM_ERI=7`` and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:17632,install,installation,17632,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,"mand tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-l",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:18470,install,install,18470,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"me. Make sure the tests get the; addon CTest label and that at least one of them gets the smoke label. * :source:`doc/sphinxman/`. * Create a new `.rst` page, copying one of the Add-Ons with similar; language and dependency requirements. Edit it; as appropriate. Add this page to the list in; :source:`doc/sphinxman/source/interfacing.rst`. * Add a bullet to :source:`doc/sphinxman/source/build_planning.rst`. * Add the new page to the long list in; :source:`doc/sphinxman/CMakeLists.txt`. If there are any files or; images referred to, add them to the file, too, following precedent. else; ----. * Build conda packages. * Recipes in https://github.com/psi4/psi4meta/tree/master/conda-recipes. * |PSIfour| and Add-On Projects Working Together. * Obligations of the External Project owners are to:. (1) allow us to contribute some CMake files to your build system; so that compile flags and dependencies (e.g., BLAS/LAPACK) can be; consistent with the |PSIfour| build and so the installed project can; be readily detected by |PSIfour| or any interested party (through a; CMake imported target). (2) provide us a tag at a tested commit/version number so their; development may be ongoing. (3) communicate with us when they've made improvements and minted; a new tag. * In return, for Add-Ons the |PSIfour| project will:. (1) leave control of their code under your purview. (2) maintain any interfacing code needed. (3) regularly run integration tests between |PSIfour| and your code. (4) build a mostly statically linked conda package so that any; of your users can obtain a pre-built binary distribution through; ``conda install addon --channel psi4``. (5) provide a development sandbox for your code through |PSIfour| plugins. (6) provide conda download counts independent of |PSIfour|. .. _`faq:readoptions`:. How to name keywords in ``psi4/src/read_options.cc``; ----------------------------------------------------. A few guidelines for standardizing option names among modules. * ``TRIPLES`` (not ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst:6996,install,installed,6996,doc/sphinxman/source/manage_addon.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_addon.rst,1,['install'],['installed']
Deployability,"mentum settings are available here; :source:`external/upstream/libint2/CMakeLists.txt`; . .. Since February 2019, the |PSIfour| conda package on Linux has been the; .. large AM8. Likewise, this is the package you get upon ::; ..; .. conda install libint -c psi4; ..; .. There is no need for the extra ``am8`` argument previously documented here.; ..; .. On Mac, the Libint conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configuration options are available; ---------------------------------------------------------. CMake doesn't provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. .. literalinclude:: @SFNX_INCLUDE@CMakeLists.txt; :lines: 14-142; :language: none. Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. -D STRING forward directly to cmake (example: -D ENABLE_THIS=1; .. -D ENABLE_THAT=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:19847,configurat,configuration,19847,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['configurat'],['configuration']
Deployability,"mg.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__roots_per_irrep.rst. .. _`cmake:adcc`:. How to configure adcc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use |PSIfour| as the backend for; self-consistent field calculations and required integrals. * Downstream Dependencies |w---w| |PSIfo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:3216,install,installed,3216,doc/sphinxman/source/adcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst,2,['install'],"['install', 'installed']"
Deployability,"mint.rst gcp.rst; index_tutorials.rst prog_faq.rst manage_index.rst manage_git.rst; prog_style_c.rst prog_blas.rst add_tests.rst plugin_snsmp2.rst dftnl.rst; libxc.rst gau2grid.rst prog_conduct.rst prog_intro.rst prog_newcode.rst; prog_setup.rst prog_welcome.rst prog_ways_to_add.rst; prog_full_integration.rst prog_style_py.rst prog_help.rst; prog_debug_profile.rst manage_release.rst plugin_psi4fockci.rst; brianqc.rst tdscf.rst prog_integrals.rst prog_tour.rst mcscf.rst; code_style.rst nitpick-exceptions external_apis.rst ecpint.rst; capabilities.rst; ). # * compute relative path btwn top_srcdir and objdir/doc/sphinxman; execute_process(COMMAND ${Python_EXECUTABLE} -c; ""import sys; import os; print('/' + os.path.relpath('${psi4_SOURCE_DIR}', '${CCBD}') + '/../')""; OUTPUT_VARIABLE SFNX_INCLUDE OUTPUT_STRIP_TRAILING_WHITESPACE); # * add ipynb doc if build env can handle it; execute_process(COMMAND ${Python_EXECUTABLE} -c; ""import nbsphinx; import jupyter_client; import ipykernel""; OUTPUT_QUIET ERROR_QUIET RESULT_VARIABLE _exec_python_err); if(_exec_python_err); message(STATUS ""Some ipynb docs require extra modules (try: conda install nbsphinx jupyter_client ipykernel -c conda-forge)""); list(APPEND STATICDOC ""psiapi.rst""); set(_jupy """"); set(_jupyconf """"); else(); list(APPEND STATICDOC ""psiapi.ipynb""); set(_jupy ""w/Jupyter ""); set(_jupyconf ""'nbsphinx',""); endif(); # configure Sphinx build; configure_file(; ""${CCSD}/source/conf.py.in""; ""${CCBD}/source/conf.py""; @ONLY); # * copy all over to objdir, substituting literalinclude along the way; foreach(rst ${STATICDOC}); configure_file(; ${CCSD}/source/${rst}; ${CCBD}/source/${rst}; @ONLY); endforeach(); # * duplicate index.rst as contents.rst for toc link; execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CCBD}/source/index.rst ${CCBD}/source/contents.rst). # Static resource png and pdf files; set(STATICRES; psi4square.png; favicon-psi4.ico; AlphaMOs.png; gdma-2.3.pdf; Total.png; VA.png; prflow.001.jpeg; prflo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt:4296,install,install,4296,doc/sphinxman/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/CMakeLists.txt,1,['install'],['install']
Deployability,"model; add_compile_options(""/EHsc""); endif(). include_directories(include); include_directories(src); add_subdirectory(src); if(ENABLE_CYTHONIZE); add_subdirectory(driver); endif(). # <<< Version >>>; # * computes version from metadata.py and git info; # * calls cmake to run write_basic_package_version_file. add_custom_target(update_version ALL; COMMAND ${Python_EXECUTABLE} versioner.py --metaout ${CMAKE_CURRENT_BINARY_DIR}/metadata.py; --cmakeout ${CMAKE_CURRENT_BINARY_DIR}/metadata.cmake; COMMAND ${CMAKE_COMMAND} -DWTO=""${CMAKE_CURRENT_BINARY_DIR}/${CMAKECONFIG_INSTALL_DIR}""; -DPN=""psi4""; -P ${CMAKE_CURRENT_BINARY_DIR}/metadata.cmake; WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}; COMMENT ""Generating version info""); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/metadata.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). # <<< Install >>>. # <<< install bin/ >>>; configure_file(run_psi4.py psi4 @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}). if(WIN32); # Generate a batch script, which wraps ""bin/psi4"" script to ""python bin/psi4""; configure_file(psi4.bat psi4.bat @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4.bat; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}); endif(). # <<< install lib/ >>>; if(NOT ENABLE_CYTHONIZE); install(DIRECTORY driver; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; FILES_MATCHING; PATTERN ""*.py""; PATTERN pytest EXCLUDE; ); endif(). install(FILES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_L",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:9930,install,install,9930,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability,"move chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:chemps2_calls`:. .. table:: Density matrix renormalization group capabilities of |PSIfour| through CheMPS2. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+==============================================================+======================+======================+; | dmrg-ci | DMRG configuration interaction (CI) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | dmrg-scf | DMRG complete active space SCF (CASSCF) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | dmrg-caspt2 | DMRG CAS with 2nd-order perturbation theory (CASPT2) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------------------+----------------------+----------------------+. DMRG Keywords; ~~~~~~~~~~~~~. .. include:: /autodir_options_c/dmrg__dmrg_caspt2_calc.rst; .. include:: /autodir_options_c/dmrg__dmrg_caspt2_imag.rst; .. include:: /autodir_options_c/dmrg__dmrg_caspt2_ipea.rst; .. include:: /autodir_options_c/dmrg__dmrg_caspt2_orbs.rst; .. include:: /autodir_options_c/dmrg__dmrg_diis.rst; .. include:: /autodir_options_c/dmrg__dmrg_diis_write.rst; .. include:: /autodir_options_c/dmrg__dmrg_excitation.rst; .. include:: /autodir_options_c/dmrg__dmrg_irrep.rst; .. include:: /autodir_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:4206,configurat,configuration,4206,doc/sphinxman/source/chemps2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst,1,['configurat'],['configuration']
Deployability,"mputes version from metadata.py and git info; # * calls cmake to run write_basic_package_version_file. add_custom_target(update_version ALL; COMMAND ${Python_EXECUTABLE} versioner.py --metaout ${CMAKE_CURRENT_BINARY_DIR}/metadata.py; --cmakeout ${CMAKE_CURRENT_BINARY_DIR}/metadata.cmake; COMMAND ${CMAKE_COMMAND} -DWTO=""${CMAKE_CURRENT_BINARY_DIR}/${CMAKECONFIG_INSTALL_DIR}""; -DPN=""psi4""; -P ${CMAKE_CURRENT_BINARY_DIR}/metadata.cmake; WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}; COMMENT ""Generating version info""); install(FILES ${CMAKE_CURRENT_BINARY_DIR}/metadata.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). # <<< Install >>>. # <<< install bin/ >>>; configure_file(run_psi4.py psi4 @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}). if(WIN32); # Generate a batch script, which wraps ""bin/psi4"" script to ""python bin/psi4""; configure_file(psi4.bat psi4.bat @ONLY); install(PROGRAMS ${CMAKE_BINARY_DIR}/psi4.bat; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}); endif(). # <<< install lib/ >>>; if(NOT ENABLE_CYTHONIZE); install(DIRECTORY driver; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; FILES_MATCHING; PATTERN ""*.py""; PATTERN pytest EXCLUDE; ); endif(). install(FILES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:10166,install,install,10166,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability,"n energy [E_h] for EFP/EFP computations. .. psivar:: EFP TORQUE. The torque, not gradient for EFP/EFP computations. .. psivar:: ENTHALPY. Total enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. .. psivar:: GRID ELECTRONS TOTAL; GRID ELECTRONS ALPHA; GRID ELECTRONS BETA. The number of electrons integrated by the xc quadrature grid. .. psivar:: HF TOTAL ENERGY. The total electronic energy [E_h] for the Hartree--Fock method, without; any dispersion correction; the first three (or four, since; :math:`E_{xc} = 0`) terms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM. .. psivar:: HF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the Hartree--Fock method, ({nat}, 3). .. psivar:: HF DIPOLE GRADIENT. The derivative of the Hartree--Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: HF TOTAL HESSIAN. The total ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:35503,integrat,integrated,35503,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['integrat'],['integrated']
Deployability,"n environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17376,install,installation,17376,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installation']
Deployability,"n no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:34602,release,releases,34602,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['releases']
Deployability,"n preprocessor; wraps strings in quotes by default, we have to tell it that ``basis_set`` is a; Python variable, not a string, by prefixing it with a dollar sign. . The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water::. molecule h2o{; O; H 1 R; H 1 R 2 A; }; ; Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2); ; set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). The declarations of ``Rvals`` and ``Avals`` are both completely standard Python syntax.; Having named our molecule ``h2o`` we can then set the values of ``R`` and ``A`` within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the ``set`` keyword. Cartesian geometries, because of details of the geometry update process,; need to be specified within the loop(s) along with their basis set when; geometry scans are performed. See :srcsample:`scf4` for analogous Z-matrix; and Cartiesian scans. .. _`sec:resultsTables`:. Tables of Results; =================. The Psithon function ``psi4.driver.p4util.Table`` has been removed,; as the Python ecosystem provides many more flexible alternatives. An; example tabulating a potential energy surface scan for water with Pandas; is shown below::. molecule h2o {; O; H 1 R; H 1 R 2 A; }; ; Rvals=[0.9,1.0,1.1]; Avals=range(100,103,2); ; rows = []; table = []; ; set basis cc-pvdz; ; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = variable('SCF TOTAL ENERGY'); edfmp2 = variable('MP2 TOTAL ENERGY'); escsmp2 = variable('SCS-MP2 TOTAL ENERGY'); rows.append((R, A)); table.append([escf, escsmp2, edfmp2]); ; import pandas as pd; df = pd.DataFrame(table, columns = [""E(SCF)"", ""E(SCS)"", ""E(DFMP2)""], index=rows); print(df). # E(SCF) E(SCS) E(DFMP2); # (0.9, 100) -76.020",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:13739,update,update,13739,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['update'],['update']
Deployability,"n-derivative integrals. .. warning:: The interface between erd and libderiv is not fully; debugged. So analytic gradients, particularly density-fitted ones,; are wrong, as are ESP calculations and some energies for long-range; corrected (""omega"") functionals. Insofar as faulty answers are; anticipated with |globals__integral_package| ``erd``, |PSIfour| will; throw an error if you try to execute that class of computation. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alt",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:2898,install,installed,2898,doc/sphinxman/source/erd.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst,2,['install'],"['install', 'installed']"
Deployability,"n. But; there may be more, so use with caution. .. warning:: erd seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/erd/badges/version.svg; :target: https://anaconda.org/psi4/erd. * ERD is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). .. * If using the |PSIfour| binary, erd has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; erd can be obtained through ``conda install erd -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_erd`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect erd and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. erd from conda without thinking, consult. * To remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``inclu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:3325,install,installation,3325,doc/sphinxman/source/erd.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst,1,['install'],['installation']
Deployability,"n. The dotted lines in the figure indicate merge points: just; prior to each public release, changes made to the code on the stable release; branch will be merged into the main trunk. \begin{figure}[h]; \begin{center}; \epsfig{file=svn/svn.eps,height=6.5cm}; \end{center}; \caption{\PSIfour\ SVN branch structure with examples of branch- and; release-tag labelling.}; \label{Fig:svn}; \end{figure}. \noindent A frequently encountered problem is what to do about bug fixes; that are necessary for uninterrupted code development of the code on the; main trunk. As Rule 1 of the above policy states, all bug fixes of the code; already in the recent stable release must go on the corresponding branch,; not on the main trunk. The next step depends on the severity of the bug:; \begin{enumerate}; \item If the bug fix is critical and potentially affects every; developer of the code on the main trunk, then \PSIfour\; administrators should be notified of the fix. If deemed necessary,; appropriate steps to create a new patch release will be made. Once; the next patch release is created then the bug fixes will be merged; onto the main trunk. If the bug fix doesn't warrant an immediate; new patch release, then you can incorporate the bug fix into your; local copy of the main trunk code manually or using SVN merge; features. This will allow you to continue development until next; patch release is created and the bug fix is incorporated into the; main trunk code in the repository. However you should {\em never}; merge such changes into the main trunk yourself.; \item If the bug fix is not critical (e.g. a documentation; update/fix), then you should wait until next patch release when it; will be merged into the main trunk automatically.; \end{enumerate}. \noindent; The following are some of the most commonly used SVN commands for checking; out and updating working copies of the \PSIfour\ source code. \noindent; $\bullet$ To checkout a working copy of the head of the main trunk:. {\tt svn co",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:4335,patch,patch,4335,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,2,"['patch', 'release']","['patch', 'release']"
Deployability,"nalize release`_. On January first; ----------------. * Screenshot https://anaconda.org/psi4/psi4 .; * Screenshot https://anaconda.org/conda-forge/psi4 .; * Add new year title and images to website; https://github.com/psi4/psicode-hugo-website/edit/master/content/posts/downloads.md .; * On the next day, check that the new year's plot appears at https://psicode.netlify.app/posts/downloads/ . Update copyright year; ---------------------. * ``cd ~/path/to/psi4``; * Primary target is licenses. - ``grep -rl ""(c) 2007-2017"" * | xargs sed -i '' ""s/(c) 2007-2017/(c) 2007-2018/g""``; - On Linux, drop the ``''`` in above command; - Need to do ``psi4/`` and ``docs/`` dirs. * Also, license in these files. - ``tests/runtest.py``; - ``README.md``. * Also, in content of :source:`doc/sphinxman/source/conf.py.in#L130`. Update counter scripts; ----------------------. * Log onto vergil as cdsgroup.; * Add new years, Python versions, and Psi4 versions as needed.; * check vergil /home/cdsgroup/psi4meta/download-analysis/installer: vi downloads_updater.py any new patterns to add?; * check vergil if changing any download patterns. Update samples; --------------. * Run ``make sphinxman`` at least once by hand; * Check in resulting ``psifiles.py`` and all the updated and new ``samples/`` files and dirs; * Make a lone PR and warn reviewers not to read it, since autogenerated. Collect new authors; -------------------. * Survey contributions to current Milestone. Add new contributors to the release notes GitHub issue.; * Figure out any new ""Additional Contributors"" authors since last release.; * Get permission of new authors and their particulars for ``codemeta.json``.; * Edit ``psi4/header.py`` accordingly and make PR. Run long tests; --------------. * Run the full test suite with threading parallelism on. There's one CC test that's a known fail; in parallel b/c it sets memory very low, iirc. - CTest (CLI)::. +++ b/tests/runtest.py; @@ -104,7 +104,7 @@ def backtick(exelist):. # run psi4 and col",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:3639,install,installer,3639,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installer']
Deployability,"ncluding molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument::; 	; 	python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). 3. As an example, take the cube files generated from the water calculation from the above input file.; Using vmd_cube the alpha molecular orbitals can be rendered and output in one image with::. python vmd_cube.py /path/to/cube/files/ --opacity=0.5",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:8091,install,installed,8091,doc/sphinxman/source/cubeprop.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst,1,['install'],['installed']
Deployability,"nd LOCATION; # 3.8: CXX_STANDARD recognizes C++17; # 3.3: EP_add(DEPENDS interfacelib, CheckFortranCompilerFlag; # 3.2: continue(); # 3.1: CMAKE_CXX_STANDARD, BUILD_ALWAYS. set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Choose the type of build."") # foil Ninja Debug on Windows. project(psi4; LANGUAGES C CXX); set(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); #",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:1471,install,install,1471,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability,"nd `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit inst",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:2326,integrat,integrated,2326,doc/sphinxman/source/code_style.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst,1,['integrat'],['integrated']
Deployability,"ndent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far longer than in Libint1 for production builds. .. _`cmake:libint`:. How to configure Libint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Libint is a library that provides essential; two-body molecular integrals over Gaussian functions. * Downstream Dependencies |w---w| |PSIfour| |dr| Libint. * Upstream Dependencies |w---w| Libint |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For Libint, set to an installation directory containing ``include/libint2.h``; * :makevar:`Libint2_DIR` |w---w| CMake variable to specify where pre-built Libint can be found. Set to installation directory containing ``lib/cmake/libint2/libint2-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_Libint2` |w---w| CMake variable to force internal build of Libint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_Libint2` |w---w| CMake variable to force detecting pre-built Libint and not falling back on internal build; * :makevar:`BUILD_Libint2_GENERATOR` |w---w| CMake variable to allow internal build to start from generator source, not generated source; * :makevar:`MAX_AM_ERI` |w---w| CMake variable to specify minimum highest angular momentum built or detected. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/libint/root. .. code-block:: bash. >>> cmake -DLibint_DIR2=/path/to/libint/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/libint/root/and/wanted/other/dependencies/root -DCMAKE_DISAB",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:4296,install,installation,4296,doc/sphinxman/source/libint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst,1,['install'],['installation']
Deployability,"ne-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:9975,patch,patch,9975,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['patch'],['patch']
Deployability,"nformation and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__roots_per_irrep.rst. .. _`cmake:adcc`:. How to configure adcc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies*",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2975,install,installation,2975,doc/sphinxman/source/adcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst,1,['install'],['installation']
Deployability,"ng 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang++; -- Check for working CXX compiler: /usr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in ``$PATH`` or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory; ---------------------------. In addition to the main ``myplugin.cc`` file, a fresh plugin directory contains the following files. * **CMakeLists.txt** |w---w| CMake file governing project *plugin*.; The plugin source and CMakeLists.txt is independent of platform; and |PSIfour| installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; |PSIfour| installation. Run ``psi4 --plugin-compile`` to get a command; to execute to generate the Makefile. What that command is doing is; loading the compilers and options used to build the parent |PSIfour|; (the ``-C psi4PluginCache`` part) which in turn can be overridden; by passing ``-Doption=value`` commands to ``cmake`` *and* pointing; toward a particular |PSIfour| (and probably pybind11) library to; link against (the ``CMAKE_PREFIX_PATH`` part) *and* telling it to; do an in-source build (the ``.`` part). Then just run ``make`` in; your plugin directory. After any change to the plugin C++ code,; ``make`` must be run in the plugin directory to recompile the; ``myplugin.so`` executable, but recompiling the main |PSIfour| code; is not necessary. Should you add additional (non-header) files to; the plugin or need to link to additional external libra",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:7668,install,installation,7668,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['install'],['installation']
Deployability,"nsums=${ENABLE_Einsums}; -DENABLE_erd=${ENABLE_erd}; -DENABLE_simint=${ENABLE_simint}; -DENABLE_gdma=${ENABLE_gdma}; -DENABLE_PCMSolver=${ENABLE_PCMSolver}; -DENABLE_ddx=${ENABLE_ddx}; -DENABLE_mdi=${ENABLE_mdi}; -DENABLE_BrianQC=${ENABLE_BrianQC}; -DENABLE_OPENMP=${ENABLE_OPENMP}; -DTargetLAPACK_DIR=${TargetLAPACK_DIR}; -DTargetHDF5_DIR=${TargetHDF5_DIR}; -DEigen3_DIR=${Eigen3_DIR}; -Dambit_DIR=${ambit_DIR}; -DCheMPS2_DIR=${CheMPS2_DIR}; -Ddkh_DIR=${dkh_DIR}; -Decpint_DIR=${ecpint_DIR}; -Dlibefp_DIR=${libefp_DIR}; -DEinsums_DIR=${Einsums_DIR}; -Derd_DIR=${erd_DIR}; -Dgau2grid_DIR=${gau2grid_DIR}; -Dgdma_DIR=${gdma_DIR}; #-DLibint_DIR=${Libint_DIR}; -DLibint2_DIR=${Libint2_DIR}; -DPCMSolver_DIR=${PCMSolver_DIR}; -Dmdi_DIR=${mdi_DIR}; -Dpybind11_DIR=${pybind11_DIR}; -Dpylibefp_DIR=${pylibefp_DIR}; -Dsimint_DIR=${simint_DIR}; -DLibxc_DIR=${Libxc_DIR}; -DBrianQC_DIR=${BrianQC_DIR}; -DFortran_ENABLED=${Fortran_ENABLED}; -DLIBC_INTERJECT=${LIBC_INTERJECT}; -DRESTRICT_KEYWORD=${RESTRICT_KEYWORD}; -DFC_SYMBOL=${FC_SYMBOL}; -DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}; -DCMAKE_EXPORT_COMPILE_COMMANDS=ON; -DENABLE_CYTHONIZE=${ENABLE_CYTHONIZE}; -Dpsi4_SHGSHELL_ORDERING=${psi4_SHGSHELL_ORDERING}; CMAKE_CACHE_ARGS -DCMAKE_PREFIX_PATH:PATH=${CMAKE_PREFIX_PATH}; -DCMAKE_C_COMPILER_ARG1:STRING=${CMAKE_C_COMPILER_ARG1}; -DCMAKE_CXX_COMPILER_ARG1:STRING=${CMAKE_CXX_COMPILER_ARG1}; -DCMAKE_Fortran_COMPILER_ARG1:STRING=${CMAKE_Fortran_COMPILER_ARG1}; # CMAKE_<lang>_COMPILER_ARG1 vars pass args thru when CMAKE_<lang>_COMPILER set as ""compiler --vital-args""; USES_TERMINAL_BUILD 1; BUILD_ALWAYS 1). add_subdirectory(external/downstream); add_subdirectory(doc); include(ConfigTesting). # <<< Install >>>. install(DIRECTORY ${STAGED_INSTALL_PREFIX}/; DESTINATION ${CMAKE_INSTALL_PREFIX}; USE_SOURCE_PERMISSIONS; PATTERN ""*.pyc"" EXCLUDE). install(DIRECTORY samples; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}/psi4; USE_SOURCE_PERMISSIONS; PATTERN ""example_psi4rc_file"" EXCLUDE); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:18544,install,install,18544,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,2,['install'],['install']
Deployability,"nt | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | vcc | | |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsdt | none | ecc | mrcc | mrc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | mrcc | mrcc | mrcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | mrcc | mrcc | mrcc |; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment properties same as grad; .. comment 2nd deriv ecc only for ccsd(t). Specification Details; ~~~~~~~~~~~~~~~~~~~~~. The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between |PSIfour| and; Cfour specification format are generally resolved behind the scenes:; not according to a *simple* rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a |PSIfour| module). Much can be gleaned by just running; inputs and inspecting the ``ZMAT`` passed to Cfour, but when questions; arise, here are the specifics, the governing laws. * Specifying a piece of input in |PSIfour| format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through :samp:`molecule; {optional_molecule_name} \\{...\\}`), memory (through :samp:`memory; {value} {unit}`), computational method (through . If Cfour keywords; are specified with values that contradict the |PSIfour| input,; execution is halted. As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the ``cfour_units; angstrom`` setting is permissible, since it concurs with the value; implied in",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:35265,integrat,integration,35265,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['integrat'],['integration']
Deployability,"ntains code to interface to the ddx FORTRAN library developed; by A. Mikhalev *et. al.*. The library provides a linear-scaling implementation; of standard continuum solvation models using a domain-decomposition ansatz; [Cances:2013:054111]_ [Stamm:2016:054101]_.; Currently the conductor-like screening model (COSMO) [Klamt:1993:799]_ [Lipparini:2014:184108]_,; the polarisable continuum model (PCM) [Tomasi:2005:2999]_ [Nottoli:2019:6061]_; and the linearized poisson-boltzmann model (LPB) [Lu:2008:973]_ [Jha:2023:104105]_ are supported.; No additional licence or configuration is required to use ddx with Psi4. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/conda-forge/pyddx/badges/version.svg; :target: https://anaconda.org/conda-forge/pyddx. * .. image:: https://img.shields.io/pypi/v/pyddx; :target: https://pypi.org/project/pyddx. * ddx is available for Linux and macOS in form of the ``pyddx`` package; on conda-forge and on pypi. * To install from conda run ``conda install pyddx -c conda-forge``. * To remove a conda installation, ``conda remove pyddx``. **Source**. * .. image:: https://img.shields.io/github/tag-date/ddsolvation/ddx.svg?maxAge=2592000; :target: https://github.com/ddsolvation/ddx. * If using |PSIfour| built from source and you want ddx installed as well,; enable it as a feature with :makevar:`ENABLE_ddx`,; and let the build system fetch and install it. .. _`sec:usingDDX`:. Using dd-based continum solvation models; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. In |PSIfour| two option to enable continuum solvation models; are currently implemented using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about PCMSolver see the :ref:`section on PCMsolver <sec:pcmsolver>`.; For a concise introduction to the; `theory behind ddx <https://ddsolvation.github.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:2644,install,install,2644,doc/sphinxman/source/ddx.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst,2,['install'],['install']
Deployability,"ntegrals code; (Russ Pitzer, 1978, now at Ohio State). From 1978-1987, the package was; know as the {\tt BERKELEY} suite, and after the Schaefer group moved to the; Center for Computational Quantum Chemistry at the University of Georgia,; the package was renamed {\tt PSI}. Thanks primarily to the efforts of Curt; Janssen (Sandia Labs, Livermore) and Ed Seidl (LLNL), the package was; ported to UNIX systems, and substantially improved with new input formats; and a C-based I/O system. Beginning in 1999, an extensive effort was begun to develop \PSIthree\; --- a {\tt PSI} suite with a completely new face. As a result of this; effort, all of the legacy Fortran code was removed, and everything was; rewritten in C and C++, including new integral/derivative integral,; coupled cluster, and CI codes. In addition, new I/O libraries have; been added, as well as an improved checkpoint file structure and greater; automation of typical tasks such as geometry optimization and frequency; analysis. The package has the capability to determine wavefunctions,; energies, analytic gradients, and various molecular properties based on; a variety of theories, including spin-restricted, spin-unrestricted, and; restricted open-shell Hartree-Fock (RHF, UHF, and ROHF); configuration; interaction (CI) (including a variety of multireference CI's and full; CI); coupled-cluster (CC) including CC with variationaly optimized; orbitals; second-order M{\o}ller-Plesset perturbation theory (MPPT); including explicitly correlated second-order M{\o}ller-Plesset energy; (MP2-R12); and complete-active-space self-consistent field (CASSCF); theory. By January 2008, all of the C code in \PSIthree\ was ; converted to C++ to enable a path toward more object-oriented design; and a single-excecutable framework that will facilitate code reuse and ; ease efforts at parallelization. At this same time, all of the legacy I/O; routines from {\tt PSI2} were removed, greatly streamlining the; \library{libciomr.a} library.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/history.rst:1971,configurat,configuration,1971,doc/sphinxman/source/attic/history.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/history.rst,1,['configurat'],['configuration']
Deployability,"nual, so takes a while. (It gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:22595,release,release,22595,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"o access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policies: Which Branch Should I Use?}; \label{section:branches}. The \PSIfour\ repository comprises a main trunk and several; release branches. The branch you should use depends on the sort of ; work you plan for the codes:; \begin{enumerate}; \item For any piece of code already in the most recent release, bug; fixes (defined as anything that doesn't add functionality ---; including documentation updates) should be made {\em only} on the; most recent stable release branch.; \item The main trunk is reserved for development of new functionality.; This allows us to keep new, possibly unstable code away from public; access until the code is ready.; \item Code that you do not want to put into next major release of; \PSIfour\ should be put onto a separate branch off the main; trunk. You will be solely responsible for maintenance of the new; branch, so you should read the SVN manual before attempting this.; \end{enumerate}. \noindent Fig.~\ref{Fig:svn} provides a schematic of the SVN revision-control; structure and branch labeling. Two release branches are shown, the current; stable branch, named {\tt psi-3-4}, and a planned future release, to be named; {\tt psi-3-5}. The tags on the branches indicate release shapshots, where; bugs have been fixed and the code has been or will be exported for pub",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:2293,release,release,2293,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,3,"['release', 'update']","['release', 'updates']"
Deployability,"o convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. -D STRING forward directly to cmake (example: -D ENABLE_THIS=1; .. -D ENABLE_THAT=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable ``CMAKE_INSTALL_PREFIX``; before compiling. * Build with Specific Install Directory. .. code-block:: bash. cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:21187,install,installation,21187,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,"o expected place. |PSIfour| plugins can also be created using Conda for both |PSIfour|; binary and development environment. On Linux (or Ubuntu shell on Windows), one can use the ``gcc``; compiler installed alongside ``psi4`` itself in the Conda distribution; or environment (below, ``$PSI4CONDA``). On Mac, one must use; ``libc++.so`` (*not* ``libstdc++.so``), and this can be accomplished by; installing XCode from the App Store that provides ``clang`` and; ``clang++`` compilers. * Check environment:. .. code-block:: bash. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. * Create and compile plugin:. .. code-block:: bash. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>> `psi4 --plugin-compile` # Linux; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: $PSI4CONDA/bin/g++; -- Check for working CXX compiler: $PSI4CONDA/bin/g++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin; >>> `psi4 --plugin-compile` # Mac; loading initial cache file $PSI4CONDA/share/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is AppleClang 7.0.0.7000176; -- Check for working CXX compiler: /usr/bin/clang",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:5743,install,install,5743,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['install'],['install']
Deployability,"o fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS li",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4225,integrat,integration,4225,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['integrat'],['integration']
Deployability,"o that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. - GHA sphinx-build controller is :source:`.github/workflows/docs.yml`; - GHA gh-pages deploy controller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/n",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:33718,release,releases,33718,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['releases']
Deployability,"o your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3018,configurat,configuration,3018,doc/sphinxman/source/code_style.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst,1,['configurat'],['configuration']
Deployability,"o, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; .. * GHA controller is :source:`.github/workflows/docs.yml`; .. * This setup works great for ""latest"" docs, but it won't build a nice copy on the tag because the tag commit is pushed before the tag itself, so the version shows up ""undefined"".; .. * So, anytime after ""Tag (pre)release"" is over, navigate on psi4 GH to the tag commit (not the record commit) and retrigger the docs GHA. Download the artifact (zipped docs dir) at the end to a local computer.; .. * In your hugo site clone, create a new directory under ``static/psi4manual``. Copy t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:31276,deploy,deploy,31276,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['deploy'],['deploy']
Deployability,"o/badge/docs-latest-5077AB.svg; :target: http://www.bennyp.org/research/simint/. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding ``set; integral_package simint`` (do this in ``~/.psi4rc`` for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is ``$$(gg|gg)$$``. .. warning:: simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/simint/badges/version.svg; :target: https://anaconda.org/psi4/simint. * SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * The conda package is compiled to least-common-denominator, namely SSE instruction set. * If using the |PSIfour| binary, simint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; simint can be obtained through ``conda install simint -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_simint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect simint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. simint from conda without thinking, consult. * To remove a conda installation, ``conda remove simint``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/simint.svg?maxAge=2592000. .. :target: https://github.com/psi4/simint TODO BPP. * If using |PSIfour| built from source and you want simint built from; from source also,; enable it as a feature with :makevar:`ENABLE_simint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:simint`:. How to conf",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst:2565,install,installed,2565,doc/sphinxman/source/simint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst,1,['install'],['installed']
Deployability,"o/badge/home-cppe-informational.svg; :target: https://github.com/maxscheurer/cppe. .. .. raw:: html; .. ; .. <br>; .. ; .. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:2377,install,installed,2377,doc/sphinxman/source/cppe.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst,1,['install'],['installed']
Deployability,"ob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. Probably long-term stable. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Installers.yml; ``matrix.cfg`` list if Python versions or target architectures have changed.; * All conda packages must already have been built and present in the right channels on; https://anaconda.org/conda-forge/psi4/files .; * Commit ``construct.yaml`` to trigger installer builds. (Even workflow edits need a dummy commit to; ``construct.yaml`` to retrigger.); * When all build successfully, hover over the artifacts, and note the smallest and largest of the; near-consecutive numbers GH has assigned them. These artifacts only linger for a day.; * Log in to vergil root and cd to ``/var/www/html/psicode-download``.; * Use the pull_gha_installers.sh script to download the installers from GH to vergil. First two; arguments are first and last of the artifact numbers, and third argument is an auth token.; ``bash pull_gha_installers.sh 47226565 47226573 715...4f3``.; * Make WindowsWSL and any other symlinks the script frontmatter advises. Build Docker images; -------------------. Docker images are built through GHA on the https://github.com/psi4/psi4meta repository from a Conda; environment specification and get served from DockerHub, https://hub.docker.com/r/psi4/psi4/tags . * Edit specification https://github.com/psi4/psi4meta/blob/master/docker/environment.yaml. - Edit the packages and channels info if necessary. Probably long-term stable.; - Don't edit the Python version, as that's controlled by the GHA. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to tri",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:26389,install,installers,26389,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installers']
Deployability,"obals__relativistic.rst; .. include:: autodir_options_c/globals__dkh_order.rst. Reference; ~~~~~~~~~. When using this code please make reference to the appropriate following paper:. * ""The Generalized Douglas-Kroll Transformation,"" A. Wolf,; M. Reiher, and B. A. Hess, *J. Chem. Phys.* **117**, 9215 (2002).; (doi: `10.1063/1.1515314 <https://doi.org/10.1063/1.1515314>`_). .. _`cmake:dkh`:. How to configure dkh for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, DKH is a library that provides additional; quantum chemical capabilities (relativistic effects). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) dkh. * Upstream Dependencies |w---w| dkh |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_dkh` |w---w| CMake variable toggling whether Psi4 builds with dkh; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For dkh, set to an installation directory containing ``include/DKH/DKH_MANGLE.h``; * :makevar:`dkh_DIR` |w---w| CMake variable to specify where pre-built dkh can be found. Set to installation directory containing ``share/cmake/dkh/dkhConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_dkh` |w---w| CMake variable to force internal build of dkh instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_dkh` |w---w| CMake variable to force detecting pre-built dkh and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON. B. Build *without* dkh. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/dkh/root. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -Ddkh_DIR=/path/to/dkh/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_dkh=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/dkh/root/and/wanted/other/dependencies/root -DC",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:4410,install,installation,4410,doc/sphinxman/source/dkh.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst,1,['install'],['installation']
Deployability,"ocation of the associated |PSIfour| Python module. .. option:: -n <threads>, --nthread <threads>. Number of threads to use (overrides :envvar:`OMP_NUM_THREADS`).; Also controls the testing parallelism with pytest. .. option:: -o <filename>, --output <filename>. Output file name. Use ``stdout`` as <filename> to redirect; to the screen. Default: when the input filename is ""input.dat"",; then the output filename defaults to ""output.dat"". Otherwise, the; output filename defaults to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are li",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:19762,install,installed,19762,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['install'],['installed']
Deployability,"ocs-latest-5077AB.svg; :target: https://github.com/DEShawResearch/sns-mp2/blob/master/README.md. This plugin is an implementation of the SNS-MP2 algorithm developed by McGibbon ; et. al. [McGibbon:2017:161725]_. The SNS-MP2 method uses neural networking to ; improve the accuracy of MP2 (:ref:`sec:dfmp2`) interaction energies for dimer molecules.; The plugin is distributed under the 2-clause BSD license. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/snsmp2/badges/version.svg; :target: https://anaconda.org/psi4/snsmp2. * snsmp2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the Psi4conda installer, snsmp2 has already been installed alongside. * If using the |PSIfour| conda package, the snsmp2 conda package can; be obtained through ``conda install snsmp2 -c psi4`` or ``conda install; psi4-rt -c psi4``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; snsmp2 can be obtained through ``conda install snsmp2 -c psi4``.; Then, hint its location with :envvar:`PYTHONPATH`. * To remove a conda installation, ``conda remove snsmp2``. **Source**. * .. image:: https://img.shields.io/github/tag/DEShawResearch/sns-mp2.svg?maxAge=2592000; :target: https://github.com/DEShawResearch/sns-mp2. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/DEShawResearch/sns-mp2. * Once dowloaded, the plugin can be installed as outlined in the documentation:. .. code-block:: bash. >>> cd {top-level-sns-mp2-directory}; >>> PSI4_PYTHON=$(head $(which psi4) -n 1 | sed -r 's/^.{2}//'); >>> $PSI4_PYTHON -m pip install . Sample Input; ~~~~~~~~~~~~. A sample input file, adapted from the documentation, is shown below::. # Sample SNS-MP2 calculation for two helium atoms. molecule dimer {; He 0 0 0; --; He 2 0 0; }. energy('sns-mp2'); ; Note that the two monomers are separated by doub",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_snsmp2.rst:2437,install,installed,2437,doc/sphinxman/source/plugin_snsmp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_snsmp2.rst,2,['install'],"['install', 'installed']"
Deployability,"oking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60506,install,installed,60506,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installed']
Deployability,"olecules, but the quality of MP2 does not degrade for larger molecules.; Coupled-cluster singles and doubles (CCSD) is another size-extensive; alternative; it is only slightly more costly computationally than CISD,; but it typically provides significantly more accurate results. The CI code in |PSIfour| is described in detail in ; [Sherrill:1999:CI]_. For the reasons stated above, the CI code in; |PSIfour| is not optimized for CISD computations, and it uses data structures; that are particularly inefficient for CISD and may result in the program; running out of memory and crashing for CISD except on very small molecules.; Instead, DETCI was designed to be efficient; in handling more highly correlated CI wavefunctions that can be helpful in more ; challenging cases such as highly strained molecules or bond breaking reactions. The CI; code is based on the fast, determinant-based string formalism; of Handy [Handy:1980]_. It can solve for restricted active space; configuration interaction (RAS CI) wavefunctions as described by Olsen,; Roos, Jorgensen, and Aa. Jensen [Olsen:1988]_. Excitation-class; selected multi-reference CI wavefunctions, such as second-order CI,; can be formulated as RAS CI's. A RAS CI selects determinants for the; model space as those which have no more than :math:`n` holes in the lowest set; of orbitals (called RAS I) and no more than :math:`m` electrons in the highest; set of orbitals (called RAS III). An intermediate set of orbitals, if; present (RAS II), has no restrictions placed upon it. All determinants; satisfying these rules are included in the RAS CI. The DETCI module is also very efficient at computing full configuration; interaction; wavefunctions, and it is used in this capacity in the complete-active-space; self-consistent-field (CASSCF) code. It can also perform approximate; CASSCF computations in which one uses RAS restrictions on the CI excitations,; rather than doing a full CI in the active space. This is called a ; RASSCF. CASSCF a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:3807,configurat,configuration,3807,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['configurat'],['configuration']
Deployability,"ollowing example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; |dct__diis_start_convergence| option to the value greater than; :math:`10^{-3}` by one or two orders of magnitude (*e.g.* :math:`10^{-2}` or; :math:`10^{-1}`). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations. * If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm. * When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the |dct__qc_coupling| option to FALSE for efficiency; reasons (set by default). * For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set |dct__odc_guess| to TRUE). This can often lead to; s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:17990,update,update,17990,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['update'],['update']
Deployability,"ollowing line; >>> start /wait """" Psi4conda-1.4rc1-py38-Windows-x86_64.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%UserProfile%\psi4conda; >>> psi4 --test. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. It works because :envvar:`PSI_SCRATCH`; defaults to ``/tmp``. Now you need only specify a permanent scratch; directory (see :ref:`sec:Scratch`) by replacing the placeholder in the; following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. Configuration for this set-up is summarized at :ref:`faq:runfrombinary`. .. note:: |PSIfour| installs a Python distribution alongside, so you should choose an installer based on the Python version you *want*, irrespective of any Python version you *have*. .. _`faq:psi4pkg`:. How to install a Psi4 binary into an Ana/Miniconda distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Conda command to install the latest nightly build of |PSIfour| + compiled; add-ons + runtime add-ons into an existing Anaconda or Miniconda; distribution. .. code-block:: bash. # Linux or Mac or Windows; # substitute x.x by 3.6|3.7|3.8|3.9 for alternate python versions; # remove `-c psi4/label/dev` to get stable releases instead of nightly builds; >>> conda create -n p4env python=x.x psi4 -c psi4/label/dev. Activate environment and make the adjustments to :envvar:`PATH` and; :envvar:`PSI_SCRATCH` that it suggests at the end. Test with ``psi4; --test``. Configuration for this set-up is summarized at; :ref:`faq:runfrombinary`. **Details:**. * It is advised to place |PSIfour| into a conda; environment where its libraries can't interfere with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substitut",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:7011,install,install,7011,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"olo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://support.hdfgroup.org/HDF5/; * zlib http://www.zlib.net/. .. * :ref:`erd <cmake:erd>` |",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10106,install,installed,10106,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installed']
Deployability,"ompilers. presently disabled in conda package. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/simint/badges/version.svg; :target: https://anaconda.org/psi4/simint. * SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * The conda package is compiled to least-common-denominator, namely SSE instruction set. * If using the |PSIfour| binary, simint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; simint can be obtained through ``conda install simint -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_simint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect simint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. simint from conda without thinking, consult. * To remove a conda installation, ``conda remove simint``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/simint.svg?maxAge=2592000. .. :target: https://github.com/psi4/simint TODO BPP. * If using |PSIfour| built from source and you want simint built from; from source also,; enable it as a feature with :makevar:`ENABLE_simint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:simint`:. How to configure simint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, simint is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) simint. * Upstream Dependencies |w---w| simint |dr| None. **CMake Variables**. * :makevar:`ENABLE_simint` |w---w| CMake variable toggling whether |PSIfour| builds with simint; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation dir",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst:3113,install,installation,3113,doc/sphinxman/source/simint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst,1,['install'],['installation']
Deployability,"on is built automatically by GHA from the latest psi4 master commit. It gets pushed to; a special ""master"" folder on the https://github.com/psi4/psi4docs repository. From there, it and; other docs snapshots are built and served to https://psi4.github.io/psi4docs/master/ (independent; of psicode.org). The netlify psicode.org site has a redirect so that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. - GHA sphinx-build controller is :source:`.github/workflows/docs.yml`; - GHA gh-pages deploy controller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:33402,release,releases,33402,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['releases']
Deployability,"on takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:19271,install,install,19271,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"on, ``conda remove simint``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/simint.svg?maxAge=2592000. .. :target: https://github.com/psi4/simint TODO BPP. * If using |PSIfour| built from source and you want simint built from; from source also,; enable it as a feature with :makevar:`ENABLE_simint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:simint`:. How to configure simint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, simint is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) simint. * Upstream Dependencies |w---w| simint |dr| None. **CMake Variables**. * :makevar:`ENABLE_simint` |w---w| CMake variable toggling whether |PSIfour| builds with simint; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing ``include/simint/simint.h``; * :makevar:`simint_DIR` |w---w| CMake variable to specify where pre-built simint can be found. Set to installation directory containing ``share/cmake/simint/simintConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_simint` |w---w| CMake variable to force internal build of simint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_simint` |w---w| CMake variable to force detecting pre-built simint and not falling back on internal build; * :makevar:`SIMINT_VECTOR` |w---w| CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is ``avx``, *not* detected, so ``sse`` may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_simint=ON. B. Build *without* simint. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_simint=ON -DCMAKE_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst:4106,install,installation,4106,doc/sphinxman/source/simint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst,1,['install'],['installation']
Deployability,"onfigure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); l",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:25223,install,installed,25223,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installed']
Deployability,"ons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:12190,release,release,12190,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['release'],['release']
Deployability,"op_orbitals.rst; .. include:: autodir_options_c/globals__cubeprop_basis_functions.rst; .. include:: autodir_options_c/globals__cubic_grid_spacing.rst; .. include:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument::; 	; 	python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:7721,install,installed,7721,doc/sphinxman/source/cubeprop.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst,1,['install'],['installed']
Deployability,"optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; .. * GHA controller is :source:`.github/workflows/docs.yml`; .. * This setup works great for ""latest"" docs,",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30834,install,installs,30834,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installs']
Deployability,"or source, turn on the keyword,; but parts can only run in serial and parts benefit from parallel, so; it's not recommended. All the AM generation settings would need to be; edited in the above ``CMakeLists.txt`` rather than passing them into; the |PSIfour| build directly. * Build with Higher Angular Momentum. .. code-block:: bash. >>> cmake -DMAX_AM_ERI=6. * Relevant CMake Options:. .. code-block:: bash. MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since |PSIfour| 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all |PSIfour| builds detect that installation at compile-time. To switch a finished build to a larger Libint, enter ``<objdir>``,; remove the result of ``make install`` (if ever invoked), remove; ``external/upstream/libint/``. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove ``stage/include/libint/``, ``stage/share/cmake/Libint/``,; ``stage/lib/libint2.so.2``. Edit MAX_AM_ERI; value in ``CMakeCache.txt``. Reinvoke ``make`` and check the number; beside ``Found Libint`` in the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum int",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:17273,install,install,17273,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['install'],"['install', 'installation']"
Deployability,"ork nicely. * GNU: ``gcc``, ``g++``; * Intel: ``icc``, ``icpc``; * Clang: ``clang``, ``clang++``. On Mac, the following work nicely. * Apple Clang: ``clang``, ``clang++``; * Intel: ``icc``, ``icpc``. |PSIfour| requires *full* C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; :source:`cmake/custom_cxxstandard.cmake`, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both ``icpc`` and ``gcc`` versions are checked.; Intel OneAPI Classic compilers work fine. OneAPI beta compilers build but have; been only minimally tested. * :ref:`faq:modgcc`. .. _`faq:macxcode`:. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; -----------------------------------------------------------------------------. The easiest compiler to obtain is ``clang`` which is a drop-in replacement; for ``gcc`` and ``g++``. Just install `XCode; <https://apps.apple.com/us/app/xcode/id497799835>`_. Some old versions; of XCode can't handle some of the advanced C++ language features, but this; is a *software* not *hardware* limitation. Checks for version compliance; performed at build-time. Note that this ""AppleClang"" will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives. Another route to obtaining ``clang`` compilers without the above limitations; is through conda. .. code-block:: bash. # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DC",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:39289,install,install,39289,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability,"ot matter, although the ``molecule`` keyword itself must; be aligned within the input according to standard Python syntax. For more; examples of geometry specification, see the :srcsample:`mints1` input file in the samples; folder. It is also possible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the :srcsample:`mints4` and; :srcsample:`mints6` sample input files. For example, consider the following; geometry specification, taken from the :srcsample:`mints6` input::. molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808; ; aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:3031,patch,patch,3031,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['patch'],['patch']
Deployability,"ourceforge <https://sourceforge.net/projects/psicode/files/psi/3.4.0/>`_, but you're on your own. .. comment * I am a core |PSIfour| developer, yet I'm still taking this quiz.; .. comment ; .. comment * I have minions whose Psi4 development work I want to supervise through this repository instance. Preferably, [Goto Fork-from-GitHub](#forkpsi4public); otherwise [Goto Fork-from-GitHub-Private](#forkpsi4private); .. comment ; .. comment * Just give me a repository to commit to directly. Preferably, [Goto Clone-from-GitHub](#clonepsi4public); otherwise [Goto Clone-from-GitHub-Private](#clonepsi4private). .. _`faq:binary`:. Binary Installer; ----------------. * **Get Initially**. Just go to http://www.psicode.org/downloads.html, select ""Installer"",; ""Stable Release"", and your choice of architecture and Python version,; and follow the instructions there. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4. * **Contribute Back**. Not applicable as not under git control. .. _`faq:binarypackage`:. Conda Binary Package; --------------------. * **Get Initially**. The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to :ref:`directions <faq:psi4pkg>`. Locally, install into; a conda environment as below. .. code-block:: bash. >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. .. code-block:: bash. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4 -c conda-forge. * **Contribute Back**. Not applicable as",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:5123,update,update,5123,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['update'],['update']
Deployability,"out even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:documentation`:. Updating the |PSIfour| Users' and Programmers' Manual; =====================================================. |PSIfours| documentation is generated by `Sphinx <https://www.sphinx-doc.org/>`_; and lives in :source:`doc/sphinxman`. It is available online at; `<http://psicode.org/psi4manual/master/index.html>`_; for the latest development branch. Installing Sphinx; ^^^^^^^^^^^^^^^^^. Installing Sphinx is only necessary to build the documentation ; yourself, locally. The docs are served from; from psicode, so most users and developers won't need Sphinx; installed. Nevertheless, installation is easy.; Math is rendered through MathJax, so LaTeX and dvipng are no longer needed.; The sphinx executable should be in your path at CMake configure time for; documentation targets to be available. * Binary: ``conda install sphinx``; * Binary: ``conda env create -f devtools/conda-envs/docs-cf.yaml``; * Binary: ``pip install -U Sphinx``; * Source: https://pypi.org/project/Sphinx/. * Check:. >>> which sphinx-build; //anaconda/bin/sphinx-build; >>> sphinx-build --version # needs >= 3.5; Sphinx (sphinx-build) 3.5.3; >>> cmake; ...; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); ... Documentation Structure; ^^^^^^^^^^^^^^^^^^^^^^^. Sphinx has nice capabilities for extracting docstrings from python files,; presenting both auto-generated and narrative documentation in the same; format, hyperlinking within and to external websites, and generating; documentat",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst:1643,install,installed,1643,doc/sphinxman/source/documentation.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/documentation.rst,1,['install'],['installed']
Deployability,"ow, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--disable-addons]; [--disable-mkl] [--intel | --intel-multiarch | --gcc]; ; Build and Run path advisor for Psi4; ; optional arguments:; -h, --help sho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9503,update,update,9503,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['update'],['update']
Deployability,"ower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum integrals from conda; -----------------------------------------------------. Libint2 conda packages are available from conda for Linux, Mac, and Windows. The Linux package has base ``MAX_AM_ERI=7`` and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted. The Mac and Windows packages have base ``MAX_AM_ERI=5`` and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted. Details about angular momentum settings are available here; :source:`external/upstream/libint2/CMakeLists.txt`; . .. Since February 2019, the |PSIfour| conda package on Linux has been the; .. large AM8. Likewise, this is the package you get upon ::; ..; .. conda install libint -c psi4; ..; .. There is no need for the extra ``am8`` argument previously documented here.; ..; .. On Mac, the Libint conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configuration options are available; ---------------------------------------------------------. CMake doesn't provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. .. literalinclude:: @SFNX_INCLUDE@CMakeLists.txt; :lines: 14-142; :language: none. Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:19065,install,install,19065,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability,"pare recipe, make sure ``psi4-cf`` is the only target uncommented in ``kitandkapoodle.py``, set; crontab, view in ``kpd-anom.log``.; * Files will upload to ``psi4/label/dev``. For releases and postreleases, on the anaconda.org site; (logged in as psi4), *add*, not replace, ``main`` label, so accessible from ``psi4/label/main``. .. Build Conda Psi4 stack at specific commit (pre-Spring 2023); .. -----------------------------------------------------------; ..; .. By ""Psi4 stack"", mean packages ``psi4``, ``psi4-rt``, ``psi4-dev``.; .. Package ``psi4-docs`` used to be in ""Psi4 stack"", but it's handled by GHA and netlify now, not Conda, so skip directions below.; .. Other packages, the ""ecosystem stack"" (e.g., ``libint``, ``v2rdm_casscf``) should be already built.; ..; .. * Check poodle for stray channels that may have crept in for dependencies (like c-f for ACS season). Copy over new dependencies if needed to psi4 channel; .. * Particularly before release (not prerelease), consider max pinnings on dependencies, particularly any fast-moving dependencies (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; .. * Nightly conda-builds work from ``master`` psi4. (Postrelease ""practice"" works from ``1.N.x`` psi4.); ..; .. - Instead, switch ``source/git_tag`` from ``master`` to tag (e.g., ``v1.3rc1``) in:; ..; .. * psi4-multiout on Linux & Mac, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L10; .. * psi4-docs on Linux, https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-docs/meta.yaml#L10 on L; ..; .. - In cbcy, edit ``psi4ver`` to ""v""-less tag; ..; .. * For releases and postreleases (not prereleases), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new non-dev label (probably a ditto) matching the release (e.g., ""1.3""); .. * Set ``kitandkapoodle.py`` to the normal ``***`` stack. Should be (``psi4``, ``psi4-rt``, ``psi4-dev``) * python_versions for Linux & Mac. Also single ``psi4-docs`` ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:19468,release,release,19468,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"pecifications are placed *before* the; energy function is called. Any user options need to; be set before the procedure they are meant to affect. For your convenience, the above example can be found in ; :srcsample:`tu1-h2o-energy`.; You can run it if you wish.; Once |PSIfour| is in your path (see the ; :ref:`User Configuration <faq:runordinaryexe>`; section of the installation instructions), you can run this computation by typing. >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree--Fock energy in a section like this::. Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about :math:`1.0 \times 10^{-6}`, so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. :ref:`sec:installFile`). This very simple input is sufficient to run the requested information.; Notice that we didn't tell the program some otherwise useful information; like the charge on the molecule (0, it's neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree--Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords. Let's consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let's run a computation; on methylene (CH\ :sub:`2`\ ), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity :math:`2S+1 = 3`).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, |PSIfour|; can get the cha",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:4320,install,installFile,4320,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['install'],['installFile']
Deployability,"pint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://libecpint.readthedocs.io/en/latest/index.html. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libecpint/badges/version.svg; :target: https://anaconda.org/psi4/libecpint. * .. image:: https://anaconda.org/conda-forge/libecpint/badges/version.svg; :target: https://anaconda.org/conda-forge/libecpint. * LibECPInt is available as a conda package for Linux and macOS. * If using the |PSIfour| binary, LibECPInt has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; LibECPInt can be obtained through ``conda install libecpint``.; Then enable it as a feature with :makevar:`ENABLE_ecpint`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect LibECPInt and activate dependent code. * To remove a conda installation, ``conda remove libecpint``. **Source**. * .. image:: https://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependen",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:2350,install,installation,2350,doc/sphinxman/source/ecpint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst,1,['install'],['installation']
Deployability,"pk; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. More examples can be found in the directories with PCM tests; :srcsample:`pcmsolver/ccsd-pte`,; :srcsample:`pcmsolver/scf`,; :srcsample:`pcmsolver/opt-fd`,; :srcsample:`pcmsolver/dft`, and; :srcsample:`pcmsolver/dipole`. Keywords for PCMSolver; ~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/globals__pcm.rst; .. include:: autodir_options_c/pcm__pcm_scf_type.rst; .. include:: autodir_options_c/pcm__pcm_cc_type.rst. .. _`cmake:pcmsolver`:. How to configure PCMSolver for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, PCMSolver is a library that provides additional; quantum chemical capabilities (solvation modeling). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) PCMSolver. * Upstream Dependencies |w---w| PCMSolver |dr| Fortran, zlib. **CMake Variables**. * :makevar:`ENABLE_PCMSolver` |w---w| CMake variable toggling whether Psi4 builds with PCMSolver; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For PCMSolver, set to an installation directory containing ``include/PCMSolver/pcmsolver.h``; * :makevar:`PCMSolver_DIR` |w---w| CMake variable to specify where pre-built PCMSolver can be found. Set to installation directory containing ``share/cmake/PCMSolver/PCMSolverConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_PCMSolver` |w---w| CMake variable to force internal build of PCMSolver instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_PCMSolver` |w---w| CMake variable to force detecting pre-built PCMSolver and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_PCMSolver=ON. B. Build *without* PCMSolver. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst:7291,install,installation,7291,doc/sphinxman/source/pcmsolver.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst,2,['install'],['installation']
Deployability,"ples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61912,install,installed,61912,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installed']
Deployability,"pole array [e a0] for the requested configuration interaction level of theory, (3,). .. psivar:: CI QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n -> ROOT m DIPOLE. Transition dipole array [e a0] between roots *n* and *m* for the requested configuration interaction level of theory, (3,). .. psivar:: CI ROOT n -> ROOT m QUADRUPOLE. Redundant transition quadrupole array [e a0^2] between roots *n* and *m* for the requested configuration interaction level of theory, (3, 3). .. psivar:: CI ROOT n DIPOLE. Dipole array [e a0] for the requested configuration interaction level of theory and root *n*, (3,). .. psivar:: CI ROOT n QUADRUPOLE. Redundant quadrupole array [e a0^2] for the requested configuration interaction level of theory and root *n*, (3, 3). .. psivar:: CI ROOT n TOTAL ENERGY; CI ROOT n CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root; *n* (numbering starts at 0). .. psivar:: CI STATE-AVERAGED TOTAL ENERGY; CI STATE-AVERAGED CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for state-averaged CI/CASSCF levels of theory. .. psivar:: CI TOTAL ENERGY; CI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the requested configuration interaction level of theory and root. .. psivar:: CISD DIPOLE. Dipole array [e a0] for the configuration interaction singles and doubles level of theory, (3,). .. psivar:: CISD QUADRUPOLE. Redundant quadrupole array [e a0^2] for the configuration interaction singles and doubles level of theory, (3, 3). .. psivar:: CISD TOTAL ENERGY; CISD CORRELATION ENERGY; CISDT TOTAL ENERGY; CISDT CORRELATION ENERGY; CISDTQ CORRELATION ENERGY; CISDTQ TOTAL ENERGY; CIn CORRELATION ENERGY; CIn TOTAL ENERGY. The total electronic energy [E_h] and correlation energy",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:24719,configurat,configuration,24719,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,"pped docs there, unpack, rearrange so that ``static/psi4manual/<new-tag>/index.html`` is present. Check in. Collect documentation snapshot; ------------------------------. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to; a special ""master"" folder on the https://github.com/psi4/psi4docs repository. From there, it and; other docs snapshots are built and served to https://psi4.github.io/psi4docs/master/ (independent; of psicode.org). The netlify psicode.org site has a redirect so that; https://psicode.org/psi4manual/master/index.html presents the psi4docs repo content. - GHA sphinx-build controller is :source:`.github/workflows/docs.yml`; - GHA gh-pages deploy controller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:33317,release,release,33317,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"pple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. .. _`faq:modgcc`:. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; --------------------------------------------------------------------------. .. code-block:: bash. # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you're not using GCC as a compiler, your Intel compiler seeks; `gcc` to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager *or* install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below. .. code-block:: bash. # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:41170,update,update,41170,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,"['install', 'update']","['install', 'update']"
Deployability,"providing; a list of radii (one per atom, exactly in the order of the input geometry); using the |ddx__ddx_radii| parameter. Note that the same unit as for the molecular; input is expected for the radii. .. include:: autodir_options_c/globals__ddx.rst; .. include:: autodir_options_c/ddx__ddx_model.rst; .. include:: autodir_options_c/ddx__ddx_radii.rst; .. include:: autodir_options_c/ddx__ddx_radii_scaling.rst; .. include:: autodir_options_c/ddx__ddx_radii_set.rst; .. include:: autodir_options_c/ddx__ddx_solvent_epsilon.rst; .. include:: autodir_options_c/ddx__ddx_solvent.rst; .. include:: autodir_options_c/ddx__ddx_solvent_kappa.rst. Numerical integration and discretisation parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: aut",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:8819,integrat,integration,8819,doc/sphinxman/source/ddx.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst,1,['integrat'],['integration']
Deployability,"psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github.com/psi4/psi4/pulls); -->. Psi4 is an open-source suite of *ab initio* quantum chemistry programs; designed for efficient, high-accuracy simulations of; molecular properties. We routinely perform computations with >2500 basis functions on multi-core machines. With computationally demanding portions written in C++, exports; of many C++ classes into Python via Pybind11, and a flexible Python driver, Psi4; strives to be friendly to both users and developers. * **Users' Website** www.psicode.org. * **Downloading and Installing Psi4** https://psicode.org/psi4manual/master/build_faq.html (for the CMake adept, see [CMakeLists.txt](CMakeLists.txt#L27). * **Manual** [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:4504,release,release,4504,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['release'],['release']
Deployability,"quations for orbitals and density; cumulant. At the present moment three iterative algorithms for the solution of the; equations are available. The choice of the algorithm is controlled using the; |dct__algorithm| option. SIMULTANEOUS [Default]; In the simultaneous algorithm the DCT equations are solved in macroiterations.; Each macroiteration consists of a single iteration of the cumulant update; followed by a single iteration of the orbital update and orbital transformation; of the integrals. The macroiterations are repeated until the simultaneous; convergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:10363,update,update,10363,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['update'],['update']
Deployability,"quires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer""); option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); option_with_flags(ENABLE_UBSAN ""Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=undefined -fno-omit-frame-pointer""); option_with_flags(ENABLE_MSAN ""Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=memory -fPIE -pie -fno-omit-frame-pointer""); option_with_default(MAX_AM_ERI ""Maximum angular momentum for integrals. The definition changed with Libint2 but still single integer. Default fine for production."" 5); option_with_default(FC_SYMBOL ""The type of Fortran name mangling"" 2); option_with_default(BUILD_FPIC ""Compile static libraries with position independent code"" ON); option_with_default(CMAKE_INSTALL_LIBDIR ""Directory to which libraries installed"" lib); option_with_default(PYMOD_INSTALL_LIBDIR ""Location within CMAKE_INSTALL_LIBDIR to which python modules are installed"" /); option_with_default(psi4_INSTALL_CMAKEDIR ""Directory to which psi4 CMake config files installed."" share/cmake/psi4); option_with_default(TargetLAPACK_INSTALL_CMAKEDIR ""Directory to which psi4 CMake config files installed."" share/cmake/TargetLAPACK); option_with_default(TargetHDF5_INSTALL_CMAKEDIR ""Directory to which psi4 CMake config files installed."" share/cmake/TargetHDF5); option_with_default(ENABLE_GENERIC ""Enables mostly static linking of language libraries for shared library"" OFF); option_with_default(CMAKE_INSTALL_MESSAGE ""Specify verbosity of installation messages"" LAZY); option_with_default(psi4_CXX_STANDARD ""Specify C++ standard for core Psi4"" 17); option_with_default(psi4_CXX_STANDARD_Libint2 ""Specify C++ standard for Psi4 files including Libint2 headers. Older (e.g., 2021.4) Intel compilers may need 14"" 17); option_with_default(SIMINT",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:11428,install,installed,11428,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,3,['install'],['installed']
Deployability,"r General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: adcc, ADC. .. _`sec:adcc`:. Interface to adcc by M. F. Herbst and M. Scheurer; =================================================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:adc>`, :ref:`PSI Variables <apdx:adc_psivar>`. .. image:: https://img.shields.io/badge/home-adcc-informational.svg; :target: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makev",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:1712,configurat,configuration,1712,doc/sphinxman/source/adcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst,1,['configurat'],['configuration']
Deployability,"r Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured `",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:12984,install,install,12984,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"r adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install; --disable-addons Disengage building against the psi4-dev-provided _optional_ link-time Add-Ons like CheMPS2.; --disable-mkl Disengage building against the psi4-dev-provided MKL libraries (`libmkl_rt`).; --intel Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++.; --intel-multiarch Engage self-provided icc/icpc/ifort compilers backed by conda's psi4-dev-provided gcc/g++ PLUS compile for multiple architectures (useful for cluster deployments).; --gcc Engage conda's psi4-dev-provided gcc/g++/gfortran compilers. # execute or adapt `cmake` commands above; DepsCache handles python & addons;; # DepsMKLCache handles math; further psi4-path-advisor options handle compilers.; >>> `psi4-path-advisor [your args]` -Dany_addl_cmake_vals=ON; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`; >>> make install. Same for Linux/Mac/WSL. Substitute desired python version: 3.6, 3.7, 3.8, 3.9. Fine; to choose your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:11970,install,install,11970,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"r more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CI. .. index::; pair: CI; theory. .. _`sec:ci`:. CI: Configuration Interaction; =============================. .. codeauthor:: Daniel G. A. Smith, C. David Sherrill, and Matthew L. Leininger; .. sectionauthor:: Daniel G. A. Smith and C. David Sherrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. Configuration interaction (CI) is one of the most general ways to; improve upon Hartree--Fock theory by adding a description of the; correlated motions of electrons. Simply put, a CI wavefunction; is a linear combination of Slater determinants (or spin-adapted; configuration state functions), with the linear coefficients being; determined variationally via diagonalization of the Hamiltonian in the; given subspace of determinants. For a ""single-reference"" CI based; on reference function :math:`| \Phi_0 \rangle`, we can write the CI expansion as; follows:. .. math:: | \Psi \rangle = c_0 | \Phi_0 \rangle; + \sum_i^{\rm occ} \sum_a^{\rm vir} c_i^a | \Phi_i^a \rangle; + \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} c_{ij}^{ab} ; | \Phi_{ij}^{ab} \rangle; + \sum_{i<j<k}^{\rm occ} \sum_{a<b<c}^{\rm vir} c_{ijk}^{abc}; | \Phi_{ijk}^{abc} \rangle + \cdots; :label: CIexpansion. The simplest standard CI method that improves upon Hartree--Fock is a CI; that adds all singly :math:`| \Phi_i^a \rangle` and doubly ; :math:`| \Phi_{ij}^{ab} \rangle`; substituted determinants (CISD) to the reference determinant; :math:`| \Phi_0 \rangle`. The CISD wavefunction has fallen out of favor; because truncated CI wavefunctions are not size-extensive, meaning; that their quality degrades for larger molecules. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:1708,configurat,configuration,1708,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['configurat'],['configuration']
Deployability,"r:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2179,install,installation,2179,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,2,"['configurat', 'install']","['configuration', 'installation']"
Deployability,"r; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additional C flags""; # - CMAKE_CXX_COMPILER ""C++ compiler""; # - CMAKE_CXX_FLAGS ""Additional C++ flags""; # - CMAKE_Fortran_COMPILER ""Fortran compiler (required for some add-ons)""; # - CMAKE_Fortran_FLAGS ""Additional Fortran flags"". # <<< Detecting dependencies and add-ons >>>; #; # - Python_EXECUTABLE ""Python interpreter to use (e.g., /path/to/bin/python3.7)""; # - Python_LIBRARY ""Python library that goes with the interpreter (e.g., /path/to/lib/python3.7.so)""; # - Python_INCLUDE_DIR ""Path to the python include files (e.g., /path/to/include/python3.7)""; # - SPHINX_ROOT ""Root directory for Sphinx: 'bin/sphinx-build' (or similar) should be in this dir.""; #; # For any ${AddOn} of: ambit, CheM",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:2412,install,install,2412,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability,"r; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `git diff --relative --name-only HEAD -- *.py`. How and when to *not* apply code styling to your contributions; --------------------------------------------------------------. TODO. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3277,install,install,3277,doc/sphinxman/source/code_style.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst,4,"['install', 'integrat']","['install', 'installed', 'integrating']"
Deployability,"rbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The energy contribution [E_h] from the polarizable embedding model for solvation. .. psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:48974,configurat,configuration,48974,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,"rch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In the end, should have several installers; ..; .. ::; ..; .. >>> ls -l build/psi4conda-1.3-py3.*/*64.sh; .. -rwxr-xr-x. 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; .. -rwxr-xr-x. 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; .. -rwxr-xr-x. 299M Feb 28 20:31 build/psi4conda-1.3-py3.7-osx-64/psi4conda-1.3-py37-MacOSX-x86_64.sh; ..; ..; .. * Upload installer files to vergil, ``scp -r build/Psi4*/Psi4*sh root@vergil.chemistry.gatech.edu:/var/www/html/psicode-download/``; .. * Log in to vergil root and make WindowsWSL symlinks. Build Psi4conda set; -------------------. Installers are build using the project ``constructor`` to build binary bash or exe scripts, one per; OS per Python version. For example, there's 16 installers when OSes are linux-64, win-64, osx-64,; osx-arm64 and pythons are 38, 39, 310, 311. In analogy to Miniconda, they're called Psi4Conda. They; are built through GHA on the https://github.com/psi4/psi4meta repository and get served from vergil; (the cdsgroup webserver). * If the previous release hasn't had a snapshot saved, copy ``construct.yaml`` into a version-labeled; file and check it in.; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration, mainly the ``release`` field. See snapshots in directory for examples.; - Edit the packages and channels info if necessary. P",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:24564,install,installer,24564,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installer']
Deployability,"re details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libxc, DFT, functionals. .. _`sec:libxc`:. Interface to Libxc by M. A. L. Marques; ======================================. .. codeauthor:: M. A. L. Marques and Micael Oliveira; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAg",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:1770,configurat,configuration,1770,doc/sphinxman/source/libxc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst,1,['configurat'],['configuration']
Deployability,"re environment. Preceding steps have placed ``conda`` and ``psi4`` in your :envvar:`PATH`, either permanently through rc-files or temporarily in this terminal session. You can keep or undo these changes. For general psi4 use, you must enable the ``psi4`` executable to be found through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26306,install,install,26306,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['install'],['install']
Deployability,"reation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:8928,update,update,8928,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,3,"['install', 'release', 'update']","['installation', 'release', 'update']"
Deployability,"rectories:. \begin{itemize}; \item \shellvar{\$PSI4}\file{/lib} -- Source files for; OS-independent ``library'' data. This includes the main basis set; data file (\file{pbasis.dat}) and the \PSIfour\ program execution; control file (\file{psi.dat}), among others. These files are; installed in \file{\$prefix/share}. \item \shellvar{\$PSI4}\file{/include} -- Source files for; OS-independent header files, including \file{physconst.h} (whose; contents should be obvious from its name), \file{psifiles.h}, and; \file{ccfiles.h}, among others. These files are installed in; \$prefix/include. \item \shellvar{\$PSI4}\file{/src/util} -- Source code for the utility; program \module{tocprint}. (Note that the \module{tmpl} module is; no longer used and will eventually disappear.). \item \shellvar{\$PSI4}\file{/src/lib} -- Source code for the; libraries, including \library{libpsio}, \library{libipv1},; \library{libchkpt}, etc. The include files from the library; source are used directly during the compilation of PSI to ; avoid problems associated with incomplete installations. Some; include files are architecture-dependent and go in an include; subdirectory of the compilation (object) directory. \item \shellvar{\$PSI4}\file{/src/bin} -- Source code for the; executable modules.; \end{itemize}. After compilation and installation, the \file{\$prefix} directory; contains the executable codes and other necessary files. {\bf NB:}; The files in this area should never be directly modified; rather, the; working copy should be modified and the \PSIfour\ \file{Makefile}; hierarchy should handle installation of any changes. The structure of; the installation area is:. \begin{itemize}; \item \file{\$prefix/bin} -- The main executable directory. This; directory must be in your path in order for the driver program,; \module{PSI4}, to find the modules. \item \file{\$prefix/lib} -- The \PSIfour\ code libraries. (NB: The; description of \PSIfour\ \file{Makefiles} later in this manual will; explain ho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:17910,install,installations,17910,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['install'],['installations']
Deployability,"ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from lit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3527,install,installation,3527,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['install'],['installation']
Deployability,"release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured ``psi4`` itself, all link-time qc addons, all; run-time qc addons, and minimal gcc runtime libraries. Developers should additionally install ``psi4-dev`` for build tools. The :ref:`sec:psi4conda` uses a `",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:13162,install,installer,13162,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installer']
Deployability,"remove a conda installation, ``conda remove erd``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/erd.svg?maxAge=2592000; :target: https://github.com/psi4/erd. * If using |PSIfour| built from source and you want erd built from; from source also,; enable it as a feature with :makevar:`ENABLE_erd`,; and let the build system fetch and build it and activate dependent code. .. .. _`sec:erdinput`:. .. _`cmake:erd`:. How to configure erd for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, ERD is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) erd. * Upstream Dependencies |w---w| erd |dr| Fortran. **CMake Variables**. * :makevar:`ENABLE_erd` |w---w| CMake variable toggling whether |PSIfour| builds with erd; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For erd, set to an installation directory containing ``include/ERD/ERD_MANGLE.h``; * :makevar:`erd_DIR` |w---w| CMake variable to specify where pre-built erd can be found. Set to installation directory containing ``share/cmake/erd/erdConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_erd` |w---w| CMake variable to force internal build of erd instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_erd` |w---w| CMake variable to force detecting pre-built erd and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_erd=ON. B. Build *without* erd. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/erd/root. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -Derd_DIR=/path/to/erd/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_erd=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/erd/root/and/wanted/other/dependencies/root -DC",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst:4291,install,installation,4291,doc/sphinxman/source/erd.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/erd.rst,1,['install'],['installation']
Deployability,"representability conditions derived from ; second-order perturbation theory and differ in the description of the; correlated (non-idempotent) part :math:`\boldsymbol{\tau}` of the one-particle density; matrix and orbital optimization. While in the DC-06 and ODC-06 methods :math:`\boldsymbol{\tau}` is derived from the density cumulant; in an approximate way (labelled by '06'), the DC-12 and ODC-12 methods derive this contribution exactly, and; take full advantage of the N-representability conditions (which is denoted by '12'). The corresponding DC and ODC methods; have similar description of the :math:`\boldsymbol{\gamma_1}` N-representability, but differ in describing the orbital relaxation:; the former methods account for the relaxation only partially, while the latter fully relax the orbitals.; Both DC-06 and DC-12 methods have similar computational cost, same is true when comparing ODC-06 and ODC-12. ; Meanwhile, the DC methods are generally more efficient than their ODC analogs, due to a more expensive orbital update step; needed for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution :math:`\boldsymbol{\tau}`, respectively,; and the orbitals are variationally optimized. ; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [:math:`\mbox{ODC-13$(\lambda_3)$}`] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our :ref:`publications <intro:dctcitations>`. The DCT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\la",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:7127,update,update,7127,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['update'],['update']
Deployability,"rface scan for water with Pandas; is shown below::. molecule h2o {; O; H 1 R; H 1 R 2 A; }; ; Rvals=[0.9,1.0,1.1]; Avals=range(100,103,2); ; rows = []; table = []; ; set basis cc-pvdz; ; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = variable('SCF TOTAL ENERGY'); edfmp2 = variable('MP2 TOTAL ENERGY'); escsmp2 = variable('SCS-MP2 TOTAL ENERGY'); rows.append((R, A)); table.append([escf, escsmp2, edfmp2]); ; import pandas as pd; df = pd.DataFrame(table, columns = [""E(SCF)"", ""E(SCS)"", ""E(DFMP2)""], index=rows); print(df). # E(SCF) E(SCS) E(DFMP2); # (0.9, 100) -76.020680 -76.217006 -76.221189; # (0.9, 102) -76.021305 -76.217439 -76.221605; # (1.0, 100) -76.021264 -76.224987 -76.228727; # (1.0, 102) -76.021460 -76.224946 -76.228668; # (1.1, 100) -75.990195 -76.201891 -76.205087; # (1.1, 102) -75.990085 -76.201498 -76.204676. .. _`sec:wrappers`:. Python Wrappers; ===============. The Python foundations of the |PSIfour| driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the |PSIfour| suite. . As seen in the neon dimer example from the :ref:`tutorial <sec:tutorial>` section,; the :py:func:`~psi4.driver.driver_nbody.nbody` wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example, ::. energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules. |PSIfour| also provides the :py:func:`~psi4.driver.cbs` wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,::. # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:15218,integrat,integrated,15218,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['integrat'],['integrated']
Deployability,"rg__dmrg_sweep_noise_prefac.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_states.rst; .. include:: /autodir_options_c/dmrg__dmrg_unitary_write.rst. .. _`cmake:chemps2`:. How to configure CheMPS2 for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CheMPS2. * Upstream Dependencies |w---w| CheMPS2 |dr| BLAS/LAPACK, HDF5 |dr| zlib. **CMake Variables**. * :makevar:`ENABLE_CheMPS2` |w---w| CMake variable toggling whether Psi4 builds with CheMPS2; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled de",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:7198,install,installation,7198,doc/sphinxman/source/chemps2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst,1,['install'],['installation']
Deployability,"rget: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/manGCP.pdf. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/gcp/badges/version.svg; :target: https://anaconda.org/psi4/gcp. * There are two implementations of gCP; see :ref:`table:empdispimpl` . The newer; ""mctc"" one is preferred, while the older ""classic"" one will work for the immediate future.; |PSIfour| will automatically select whichever is available.; Starting with v1.9, only ""mctc-gcp"" is supported, though the now untested; ""classic"" continues to work for many applications. * gCP is available as a conda package for Linux and macOS and Windows. * If using the Psi4conda installer, gCP has already been installed alongside. * If using the |PSIfour| conda package, the classic gcp conda package can; be obtained through ``conda install gcp -c psi4`` or the newer implementation; through ``conda install gcp-correction -c conda-forge``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; the gcp executable can be obtained through ``conda install gcp -c psi4``; or ``conda install gcp-correction -c conda-forge``. * To remove a conda installation, ``conda remove gcp`` or ``conda remove gcp-correction``. **Source**. * .. image:: https://img.shields.io/badge/home-gCP-5077AB.svg; :target: https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/gcp/getgcp. * If using |PSIfour| built from source and you want to build gCP from; from source also, follow the instructions provided with the source; (essentially, download the freely available tarball, unpack the source,; edit the Makefile to select a Fortran compiler, and run make). To be used by |PSIfour|, the program binary (``gcp`` or ``mctc-gcp``) must be; found in your :envvar:`PATH` s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst:2329,install,install,2329,doc/sphinxman/source/gcp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gcp.rst,2,['install'],['install']
Deployability,"ri_c2_d2_l3). Psi4 will automatically fall back to finite difference.""); # endif(); add_library(libint2_external INTERFACE) # dummy. if(${CMAKE_INSIST_FIND_PACKAGE_Libint2}); message(VERBOSE ""Suitable Libint2 located externally as user insists""); endif(). else(); if(${CMAKE_INSIST_FIND_PACKAGE_Libint2}); message(FATAL_ERROR ""Suitable Libint2 could not be externally located as user insists""); endif(). # stopgap to avert a report that static lib not working on Linux; set(_build_shared_libs ""ON""). # reportedly Debug takes forever to build on Mac; set(_cmake_build_type ""Release""). include(ExternalProject). if(NOT ${BUILD_Libint2_GENERATOR}); if (${MAX_AM_ERI} GREATER 5); set(_url_am_src ""7-7-4-12-7-5"") # passes E&G 7z conv and 6z df, H Qz conv and df. covers all internal basis sets for energy and gradient; elseif (${MAX_AM_ERI} LESS_EQUAL 5); set(_url_am_src ""5-4-3-6-5-4"") # passes full. production Mac, temp production Linux; endif(). set(_url_l2_tarball ""https://github.com/loriab/libint/releases/download/v0.1/libint-2.8.1-${_url_am_src}_mm10f12ob2_0.tgz""). message(STATUS ""Suitable Libint2 could not be located, ${Magenta}Building Libint2 ${_url_am_src}${ColourReset} instead.""). if (MSVC); # Windows shared (dll) can't work; set(_build_shared_libs ""OFF""); endif(). ExternalProject_Add(libint2_external; URL ${_url_l2_tarball}; CMAKE_ARGS -GNinja; -DCMAKE_INSTALL_PREFIX=${STAGED_INSTALL_PREFIX}; -DCMAKE_BUILD_TYPE=${_cmake_build_type}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_INSTALL_BINDIR=${CMAKE_INSTALL_BINDIR}; -DCMAKE_INSTALL_LIBDIR=${CMAKE_INSTALL_LIBDIR}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DBoost_DIR=${Boost_DIR}; -DBOOST_ROOT=${BOOST_ROOT}; -DEigen3_DIR=${Eigen3_DIR}; -DEigen3_ROOT=${Eigen3_ROOT}; -DBUILD_SHARED_LIBS=${_build_shared_libs}; -DREQUIRE_CXX_API=ON; -DENABLE_FORTRAN=OFF; -DLIBINT2_PYTHON=OFF; -DENABLE_XHOST=${ENABLE_XHOST}; -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET};",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt:6460,release,releases,6460,external/upstream/libint2/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/external/upstream/libint2/CMakeLists.txt,1,['release'],['releases']
Deployability,"rking to ; improve the accuracy of MP2 (:ref:`sec:dfmp2`) interaction energies for dimer molecules.; The plugin is distributed under the 2-clause BSD license. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/snsmp2/badges/version.svg; :target: https://anaconda.org/psi4/snsmp2. * snsmp2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the Psi4conda installer, snsmp2 has already been installed alongside. * If using the |PSIfour| conda package, the snsmp2 conda package can; be obtained through ``conda install snsmp2 -c psi4`` or ``conda install; psi4-rt -c psi4``. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; snsmp2 can be obtained through ``conda install snsmp2 -c psi4``.; Then, hint its location with :envvar:`PYTHONPATH`. * To remove a conda installation, ``conda remove snsmp2``. **Source**. * .. image:: https://img.shields.io/github/tag/DEShawResearch/sns-mp2.svg?maxAge=2592000; :target: https://github.com/DEShawResearch/sns-mp2. * Download the plugin from the GitHub repository:. .. code-block:: bash. >>> git clone https://github.com/DEShawResearch/sns-mp2. * Once dowloaded, the plugin can be installed as outlined in the documentation:. .. code-block:: bash. >>> cd {top-level-sns-mp2-directory}; >>> PSI4_PYTHON=$(head $(which psi4) -n 1 | sed -r 's/^.{2}//'); >>> $PSI4_PYTHON -m pip install . Sample Input; ~~~~~~~~~~~~. A sample input file, adapted from the documentation, is shown below::. # Sample SNS-MP2 calculation for two helium atoms. molecule dimer {; He 0 0 0; --; He 2 0 0; }. energy('sns-mp2'); ; Note that the two monomers are separated by double dashes, indicating that; they should be treated as separate molecules. (See ; :ref:`sec:tutorial_tu5` for more details on; setting up dimer molecules.) This input file can be run in the usual fashion:. .. code-block:: bash. >>> psi4 input.dat. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_snsmp2.rst:2985,install,installed,2985,doc/sphinxman/source/plugin_snsmp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugin_snsmp2.rst,2,['install'],"['install', 'installed']"
Deployability,"rm stable.; - Don't edit the Python version, as that's controlled by the GHA. * Edit the GHA control file https://github.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to trigger GHA Docker builds.; * Check at DockerHub for new images. .. Generate download page for psicode.org (pre-Fall 2023); .. ------------------------------------------------------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28074,install,install-generator,28074,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['install-generator']
Deployability,"rms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) |. <!-- -->; <!-- [![Last release date](https://img.shields.io/github/release-date/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) -->; <!-- [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/README.md:2617,release,release,2617,README.md,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md,1,['release'],['release']
Deployability,"rrill. *Module:* :ref:`Keywords <apdx:detci>`, :ref:`PSI Variables <apdx:detci_psivar>`, :source:`DETCI <psi4/src/psi4/detci>`. As the cost of Full CI scales exponentially with respect to the number of; active orbitals it is often advantageous to neglect orbitals that do not; exhibit strong correlation. These orbitals are variationally optimized; simultaneously with the CI coefficients and known as Multi-Configurational; Self-Consistent Field (MCSCF). The most commonly used MCSCF procedure is the; complete-active-space self-consistent-field (CASSCF) approach [Roos:1980]_,; which includes all possible determinants (with the proper symmetry) that can be; formed by distributing a set of active electrons among a set of active; orbitals. The MCSCF module performs CASSCF optimization of molecular orbitals; via a two-step procedure in which the CI coefficients and orbitals are; optimized in an alternating manner. The program uses a fairly simple; approximate orbital Hessian [Chaban:1997:88]_ and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_. We have also implemented; the RASSCF method [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF; which is typically less complete (and less expensive) than CASSCF. Inactive orbitals in the MCSCF may be specified by the; |globals__restricted_docc| and |globals__restricted_uocc| keywords. These; orbitals will remain doubly-occupied or doubly-unoccupied, respectively, in the; MCSCF wavefunction. However, the form of these orbitals will be optimized in; the MCSCF procedure. It is also possible to literally freeze inactive orbitals; in their original (SCF) form using the |globals__frozen_docc| and; |globals__frozen_uocc| keywords. This is not normally what one wishes to do in; an MCSCF computation (*e.g.*, it complicates the computation of gradients), but; it can make the computations faster and is helpful in some circumstances where; unphysical mixing of inactive and active occupied orbitals might occur.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst:2457,update,update,2457,doc/sphinxman/source/mcscf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mcscf.rst,1,['update'],['update']
Deployability,"rroneous; modifications to the code may be easily removed once they have been; identified. This section describes how to use SVN to access and; modify the \PSIfour\ source code. (Note that compilation and; installation instructions are given in a separate document.). The main repository for the \PSIfour\ Source code is currently; maintained by the Crawford group at Virginia Tech. To check out the; code, one must first obtain an SVN account by emailing; \htmladdnormallink{{\tt crawdad@vt.edu}}{mailto:crawdad@vt.edu}.; After you have a login-id and password, you are now ready to access; the repository via a secure, SSL-based WebDAV connection, but first; you must decide which version of the code you need. The \PSIfour\ SVN repository contains three top-level directories:; \begin{itemize}; \item {\tt trunk}: The main development area.; \item {\tt branches}: Release branches and private development; branches are stored here.; \item {\tt tags:} Snapshots of the repository corresponding to public; releases are stored here and should {\em never} be modified.; \end{itemize}; If you have a PSI4 SVN account, you can peruse these directories if; you like by pointing web browser to:. \noindent; {\tt https://sirius.chem.vt.edu/svn/psi4/}. \subsection{\PSIfour\ SVN Policies: Which Branch Should I Use?}; \label{section:branches}. The \PSIfour\ repository comprises a main trunk and several; release branches. The branch you should use depends on the sort of ; work you plan for the codes:; \begin{enumerate}; \item For any piece of code already in the most recent release, bug; fixes (defined as anything that doesn't add functionality ---; including documentation updates) should be made {\em only} on the; most recent stable release branch.; \item The main trunk is reserved for development of new functionality.; This allows us to keep new, possibly unstable code away from public; access until the code is ready.; \item Code that you do not want to put into next major release of; \PSIfour\",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:1729,release,releases,1729,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['release'],['releases']
Deployability,"rt of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:casscf`:. Complete-Active-Space Self-Consistent-Field (CASSCF); ====================================================. Multi-configurational self-consistent-field (MCSCF) ; is a general method for obtaining qualitatively correct; wavefunctions for highly strained molecules, diradicals, or bond; breaking reactions. The most commonly used MCSCF procedure; is the complete-active-space self-consistent-field (CASSCF); approach [Roos:1980]_, which includes all possible determinants; (with the proper symmetry) that can be formed by distributing ; a set of active electrons among a set of active orbitals.; The detcasman module performs; CASSCF optimization of molecular orbitals via a two-step; procedure in which the CI wavefunction is computed using; detci, and the orbital rotation step is computed using; detcas. The detcas program is fairly simple; and uses an approximate orbital Hessian [Chaban:1997:88]_; and a Newton-Raphson update,; accelerated by Pulay's DIIS procedure [Pulay:1980]_.; We have also implemented a prototype version of the RASSCF method; [Malmqvist:1990:RASSCF]_, which is another kind of MCSCF which ; is typically less complete (and less expensive) than CASSCF.; However, orbital convergenc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:1194,configurat,configurational,1194,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['configurat'],['configurational']
Deployability,"r| can be found in [DePrince:2013:293]_\. FNO computations; are controlled through the keywords |fnocc__nat_orbs| and; |fnocc__occ_tolerance|, or by prepending a valid method name with ""fno"" in; the energy call as ::. energy('fno-ccsd(t)'). If you wish to specify the number of active natural orbitals manually, use; the keyword |fnocc__active_nat_orbs|. This keyword will override the ; keyword |fnocc__occ_tolerance|. QCISD(T), CCSD(T), MP4, and CEPA; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The FNOCC module in |Psifour| supports several related many-body quantum; chemistry methods, including the CCSD(T) and QCISD(T) methods, several; orders of many-body perturbation theory (MP2-MP4), and a family methods; related to the coupled electron pair approximation (CEPA). Quadratic configuration interaction and coupled cluster; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The quadratic configuration interaction singles doubles (QCISD) method of; Pople, Head-Gordon, and Raghavachari [Pople:1987:5968]_\ was originally; presented as a size-consistent extension of configuration interaction; singles doubles (CISD). The method can also be obtained as a; simplified version of the coupled cluster singles doubles (CCSD); method [Purvis:1982]_\. Consider the set of equations defining CCSD:. .. math::; :label: CCSD. \langle \Psi_0 | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2)|\Psi_0\rangle = 0, \\; \langle \Psi_i^a | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2+T_1T_2+\frac{1}{3!}T_1^3)|\Psi_0\rangle = 0, \\; \langle \Psi_{ij}^{ab} | (H - E) (1 + T_1 + T_2 + \frac{1}{2}T_1^2 + T_1T_2+\frac{1}{3!}T_1^3+\frac{1}{2}T_2^2+\frac{1}{2}T_1^2T_2+\frac{1}{4!}T_1^4)|\Psi_0\rangle = 0, \\. where we have chosen the intermediate normalization, ; :math:`\langle \Psi_0| \Psi \rangle = 1`, and the symbols :math:`T_1` ; and :math:`T_2` represent single and double excitation operators. The ; QCISD equations can be obtained by omitting all but two terms that ; are nonlinear in :math:`T_1` and :math:`T_2`:",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:4722,configurat,configuration,4722,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,2,['configurat'],['configuration']
Deployability,"r} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plu",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24903,install,installation,24903,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,"s (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:13265,release,release,13265,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"s <apdx:scf_psivar>`, :source:`LIBFUNCTIONAL <psi4/src/psi4/libfunctional>`, :source:`LIBFOCK <psi4/src/psi4/libfock>`, :source:`LIBSCF_SOLVER <psi4/src/psi4/libscf_solver>`. Both density functional theory and Hartree--Fock theory are controlled; through the SCF module, and the :ref:`SCF Introduction <sec:scfintro>`; section is also relevant here. .. note:: Starting version 1.5, the |scf__wcombine| option is temporarily disabled. .. note:: Starting version 1.4 (tag v1.4a1 in the development repository), |PSIfour| uses an updated and extended (to 104 elements) set; of Bragg-Slater radii. This leads to minimal deviations in absolute energies (1E-06 au) and; relative energies (below 0.002 kcal/mol for S22), depending also on the applied grid, compared; to older versions. We advise not to mix absolute energies absolute energies from before and after this change for the; calculation of relative energies. .. note:: After May 2017 (anytime after the v1.1 release), |PSIfour|; switched from hand- (+Matlab) coded functionals to Libxc. Thus; many DFT results will be slightly different. Functionals more than; slightly different are B97-D, wB97X (note, *not* wB97X-D), SOGGA,; DFDL, and M05. Theory; ~~~~~~. Generalized Kohn--Sham Density Functional Theory (KS-DFT) [Kohn:1965:A1133]_ [Parr:1989]_ is one of the primary; workhorses of modern computational chemistry due to its phenomenal accuracy/cost; ratio. Pure Kohn--Sham DFT is built on the Hohenberg--Kohn theorems [Hohenberg:1964:136]_ which states: A) the energy is a universal; functional of the one-particle electronic density and B) there exists a set of; noninteracting quasiparticles with the same density as the true set of; electrons, with the quasiparticle states determined as eigenvectors of an; effective one-body potential encapsulating the true :math:`N`\ -body quantum; effects. The former idea allows the electronic density to be dealt with instead; of the much more complicated wavefunction, while the latter allows for t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:2321,release,release,2321,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['release'],['release']
Deployability,"s happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Con",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:3951,configurat,configuration,3951,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,3,"['configurat', 'install']","['configuration', 'install']"
Deployability,"s in solution with the; polarizable continuum model (PCM), a continuum solvation model [Tomasi:2005:2999]_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/pcmsolver/badges/version.svg; :target: https://anaconda.org/psi4/pcmsolver. * PCMSolver is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, PCMSolver has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; PCMSolver can be obtained through ``conda install pcmsolver -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_PCMSolver`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect PCMSolver and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. pcmsolver from conda without thinking, consult. * To remove a conda installation, ``conda remove pcmsolver``. **Source**. * .. image:: https://img.shields.io/github/tag/PCMSolver/pcmsolver.svg?maxAge=2592000; :target: https://github.com/PCMSolver/pcmsolver. * If using |PSIfour| built from source and you want PCMSolver built from; from source also,; enable it as a feature with :makevar:`ENABLE_PCMSolver`,; and let the build system fetch and build it and activate dependent code. .. index:: PCM; Using PCM. .. _`sec:usingPCM`:. Using the polarizable continuum model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PCM description of the solvent into your calculation; can be achieved in two ways in |PSIfour|, using either the PCMSolver or ddx package.; PCMSolver is based on a boundary-element discretisation [Cances:1998:309]_,; while ddx is based on a domain decomposition approach; [Cances:2013:054111]_ making it linear scaling.; For more details about ddx see the :ref:`section on ddx <sec:ddx>`. Using PCMsolver is achieved instead by setting |globals__pcm| ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst:2925,install,installation,2925,doc/sphinxman/source/pcmsolver.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/pcmsolver.rst,1,['install'],['installation']
Deployability,"s is at the second order:. .. math:: E_{\mathrm{MBPT}}^{(2)} = - \frac{1}{4} \frac{\langle ij|ab\rangle^2}{\epsilon_a + ; \epsilon_b - \epsilon_i - \epsilon_j}. In the DFMP2 module, the first-order contribution, or ""singles energy"" is; always evaluated. This term is a significant contributor to the total; second-order energy if a ROHF reference is used. In this case, we have chosen; to use the ROHF-MBPT(2) ansatz, in which the ROHF orbitals are; semicanonicalized, the resultant nonzero Fock matrix elements :math:`f_{ia}` are used; to form the singles amplitudes, and then the second-order amplitudes are formed; with the semicanonical spin orbitals via the same machinery as a UHF-MP2. Note; that the singles energy should be very close to zero for RHF and UHF references;; if it is not, there is a good chance your orbitals are not well converged.; Tighten the SCF |scf__e_convergence| and/or |scf__d_convergence| keywords; and try again. . To increase the efficiency of MP2 energy evaluation, spin integration; and simplification is carried out. This also allows for the identification of; Same-Spin (SS) and Opposite-Spin (OS) terms for use in Grimme's Spin-Component; Scaled (SCS) MP2. For RHF-MP2 (also labeled as RMP2), the spin-free equations are; (note that the integrals are now chemist's integrals over spatial orbitals). .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia|jb)(ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{[(ia|jb)-(ib|ja)](ia|jb)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. For UHF-MP2 (also labeled as UMP2) and the second-order contribution to; ROHF-MBPT(2) using semicanonical orbitals, the spin-free equations are. .. math:: E_{\mathrm{MBPT,OS}}^{(2)} = ; - \frac{(ia^\alpha|jb^\beta)(ia^\alpha|jb^\beta)}{\epsilon_a + \epsilon_b - \epsilon_i - \epsilon_j}. and . .. math:: E_{\mathrm{MBPT,SS}}^{(2)} = ; - \frac{1}{2}\frac{[(ia^\alpha|jb^\alpha)-(ib^\alpha|ja^\alpha)](ia^\alpha|jb",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst:7226,integrat,integration,7226,doc/sphinxman/source/dfmp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dfmp2.rst,1,['integrat'],['integration']
Deployability,"s printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:31659,install,installed,31659,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installed']
Deployability,"s using LibXC names; - `c_functionals`: dict, definition of correlation functionals using LibXC names; - `x_hf`: dict, parameters dealing with exact (HF) exchange settings for hybrid DFT; - `c_mp2`: dict, parameters dealing with MP2 correlation for double hybrid DFT; - `dispersion`: dict, definition of dispersion corrections; - `citation`: string, citation for the method, for printing purposes; - `description`: string, description of the method, for printing purposes. The full interface is defined in; :source:`psi4/driver/procrouting/dft/dft_builder.py`. All; standard functionals provided in |PSIfour| are implemented in the; ``*_functionals.py`` files in the same folder. .. literalinclude:: @SFNX_INCLUDE@psi4/driver/procrouting/dft/dft_builder.py; :lines: 29-77; :language: none. One can also use the ``dft_functional`` keyword argument to use the; orbitals generated by DFT for correlated wavefunction methods::. # MP2 with a PBE0 reference computation. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis 6-31G; dft_spherical_points 302; dft_radial_points 99; reference rks; }. mp2_dft = energy(""MP2"", dft_functional=""PBE0""). Note that this would only update the generic Psi variables (e.g., ""CURRENT ENERGY"") and not the MP2 or DFT variables.; Psi4 also supports easy customization and manipulation of DFT functionals. The values of `\alpha` and `\omega` can be adjusted with the |scf__dft_alpha|; and |scf__dft_omega| keywords. For example, for LRC functionals, one can control the fraction of long-range Hartree-Fock and short-range DFA by changing |scf__dft_omega|::. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set reference uhf; set guess gwh; set basis cc-pvdz; set e_convergence 8. # Override the default value of omega; set dft_omega 2.0. E = energy('wb97x'). # Revoke the change for later computations if needed; revoke_global_option_changed('DFT_OMEGA'). This feature would be useful after finishing the IP fitting procedure, for example. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:35251,update,update,35251,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['update'],['update']
Deployability,"s.h}, among others. These files are installed in; \$prefix/include. \item \shellvar{\$PSI4}\file{/src/util} -- Source code for the utility; program \module{tocprint}. (Note that the \module{tmpl} module is; no longer used and will eventually disappear.). \item \shellvar{\$PSI4}\file{/src/lib} -- Source code for the; libraries, including \library{libpsio}, \library{libipv1},; \library{libchkpt}, etc. The include files from the library; source are used directly during the compilation of PSI to ; avoid problems associated with incomplete installations. Some; include files are architecture-dependent and go in an include; subdirectory of the compilation (object) directory. \item \shellvar{\$PSI4}\file{/src/bin} -- Source code for the; executable modules.; \end{itemize}. After compilation and installation, the \file{\$prefix} directory; contains the executable codes and other necessary files. {\bf NB:}; The files in this area should never be directly modified; rather, the; working copy should be modified and the \PSIfour\ \file{Makefile}; hierarchy should handle installation of any changes. The structure of; the installation area is:. \begin{itemize}; \item \file{\$prefix/bin} -- The main executable directory. This; directory must be in your path in order for the driver program,; \module{PSI4}, to find the modules. \item \file{\$prefix/lib} -- The \PSIfour\ code libraries. (NB: The; description of \PSIfour\ \file{Makefiles} later in this manual will; explain how to use the libraries.). \item \file{\$prefix/include} -- Header files. These are not actually; used during the compilation of PSI but are useful for inclusion by; external programs because they are all in the same directory. \item \file{\$prefix/share} -- OS-independent data files, including; basis set information. (Do not edit this file directly; any changes; you make can be overwritten by subsequent {\tt make} commands.). \item \file{\$prefix/doc} -- \PSIfour\ documentation, including; installation, programmer, ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:18442,install,installation,18442,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['install'],['installation']
Deployability,"s://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the shortcode call at the bottom near ``ghRN``. * Add a new release page to the ``psi4_release_fireworks.key`` Keynote presentation. Run the slide; transition and screenshot the fireworks. Open the PNG file in Preview and save as JPEG while; downsampling to ~400kB. Place the file at e.g., ``static/images/portfolio/fireworks_slide_v182.jpg``.; Add it to the git index.; * Edit ``data/portfolio.yml`` to add a new block for the release (order matters).; * Include these changes in a PR. Check the generated preview if needed. Merge the PR yourself or ask; for it to be merged. Finalize release; ----------------. * Make new PR with; * edits to main ``README.md`` badges, python versions, etc.; * Tweet about release. .. Reset psi4meta for nightly operation (pre-Spring 2023); .. ------------------------------------------------------; ..; .. On both Linux and Mac:; ..; .. * After (post)release (not prerelease), in ``conda_build_config.yaml``, edit ``ltrtver`` to a new ""release.dev"" label; .. * After postrelease, unpin any dependencies in cbcy that needed older either ver or bld (e.g., v2rdm_casscf_bld); .. * Edit ``psi4ver`` back to ``''`` in cbcy; .. * Edit ``source/git_tag`` back to ``master`` for psi4-multiout, psi4-docs; .. * Edit build string back to ``0`` if psi4-multiout needed multiple passes; .. * Edit kitandkapoodle.py back to ``***`` stack; .. * Check in all release, construct, recipe changes on Linux and Mac. Synchronize both to GitHub psi4meta; .. * Copy meta.yaml and build.sh files to vMmp-prefixed files for the record.; .. * Edit crontab back to 2am ""norm"". Comment",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:37728,release,release,37728,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"s://sirius.chem.vt.edu/svn/psi4/trunk/ psi4} . \noindent; $\bullet$ To check out a working copy of the head of a specific release branch,; e.g., the branch labelled {\tt psi-4-0}:. {\tt svn co https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0 psi4}. \noindent Note that subsequent {\tt svn update} commands in this; working copy will provide updates only on the chosen branch. Note; also that after you have checked out a fresh working copy of the code; you must run the {\tt autoconf} command to generate a {\tt configure}; script for building the code. (See the installation manual for; configuration, compilation, and testing instructions.). \noindent For each of the above commands, the working copy of your; code will be placed in the directory \file{psi4}, regardless of your; choice of branch. In this manual, we will refer to this directory; from now on as {\tt \$PSI4}. Subsequent SVN commands are usually run; within this top-level directory. \noindent; $\bullet$ To update your current working copy to include the latest revisions:. {\tt svn update}. \noindent; Notes: (a) This will update only the revisions on your current branch;; (b) The old {\tt -d} and {\tt -P} flags required by CVS are not necessary with SVN. . \noindent; $\bullet$ To convert your working copy to the head of a specific branch:. {\tt svn switch https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; $\bullet$ To convert your working copy to the head of the main trunk:. {\tt svn switch https://sirius.chem.vt.edu/svn/psi4/trunk/}. \noindent; $\bullet$ To find out what branch your working copy is on, run this in your; top-level \PSIfour\ source directory:. {\tt svn info | grep URL}. \noindent; This will return the SVN directory from which your working copy was; taken, e.g.,. \noindent; {\tt URL: https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; Some words of advice:; \begin{enumerate}; \item Most SVN commands are reasonably safe, . \item Unlike CVS, you shouldn't use {\tt svn",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:6305,update,update,6305,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['update'],['update']
Deployability,"s_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which |PSIfour| would detect by default), the; input geometry must contain the line ``symmetry c1`` to force |PSIfour| to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. * By default, |PSIfour| uses density-fitted preiterations for SCF, which BrianQC; doesn't handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting |scf__df_scf_guess| to `False`.; * By default, |PSIfour| uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set |globals__scf_type| to `direct`. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__brianqc_enable.rst. Environment Variables; ~~~~~~~~~~~~~~~~~~~~~. .. envvar:: BRIANQC_SDK_INSTALL. Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_INSTALL_PATH. Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_ENABLE. Runtime toggle of whether to use BrianQC. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:6006,install,installation,6006,doc/sphinxman/source/brianqc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst,3,"['install', 'toggle']","['installation', 'toggle']"
Deployability,"se your own env name. Include ``-c psi4/label/dev`` to get dependencies to; build current master, as opposed to latest release.; Activate environment, ``conda activate; p4dev``. Go to where you've cloned psi4. Execute ``psi4-path-advisor``.; It gives you a basic cmake command covering python, sphinx, link-time qc; addons, and run-time qc addons. There's a help menu -h that gives more; info. There's other options that will also pre-configure compilers. For; example, at GaTech ``psi4-path-advisor --intel`` works. On Macs with; XCode, ``psi4-path-advisor --clang`` works. Just read the help. For users; who want a minimal build, there's a ``--disable-addons``, but it is generally not; encouraged. It gives you a fully; functional cmake command, but those are just setting up CMake cache; |w---w| like the plugins you can always add your own CMake variables to; the command. For run-time, you may also wish to install the optional runtime add-ons (*e.g.*, adcc). .. code-block:: bash. >>> conda install psi4-rt. .. _`sec:condadetails`:. What do the conda packages psi4 & psi4-dev and the installer psi4conda contain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``psi4`` - has full-featured psi4 itself and necessarily all the link-time qc; addons (e.g., chemps2). It has python, pytest, numpy, and a few more python; modules for specialized functions. Of gcc-ness, it has minimal, run-time; libraries (*e.g.*, libgcc-ng) not compilers.; It doesn't have the run-time qc addons ``psi4-rt`` (*e.g.*, snsmp2) or build tools (*e.g.*, g++, sphinx, cmake). ``psi4-dev`` - does not have psi4 itself or the run-time addons ``psi4-rt`` or numpy (though fine to install them; alongside). Does have all the link-time addons. Does have; cmake and sphinx (and python). Of gcc-ness, has full packages, that is,; compilers as well as runtime packages. Psi4conda installer - has full-featured ``psi4`` itself, all link-time qc addons, all; run-time qc addons, and minimal gcc run",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:13069,install,install,13069,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"shell MP2 energies.; .. ; .. * :source:`plugins/sointegrals/sointegrals.cc` ; .. An example that uses the LibMints library to generate and print SO basis (with symmetry) integrals. .. _`sec:condaplugins`:. Creating a New Plugin Using a Conda Pre-compiled Binary; -------------------------------------------------------. .. # prepare; .. >>> bash; .. >>> export PATH=$PSI4CONDA/bin:$PATH # usually already done from psi4 installation; .. >>> cd ""$(dirname $(which psi4))""/.. # move into distribution/environment directory, $PSI4CONDA; .. >>> conda install gcc # install compilers into expected place. |PSIfour| plugins can also be created using Conda for both |PSIfour|; binary and development environment. On Linux (or Ubuntu shell on Windows), one can use the ``gcc``; compiler installed alongside ``psi4`` itself in the Conda distribution; or environment (below, ``$PSI4CONDA``). On Mac, one must use; ``libc++.so`` (*not* ``libstdc++.so``), and this can be accomplished by; installing XCode from the App Store that provides ``clang`` and; ``clang++`` compilers. * Check environment:. .. code-block:: bash. # yes, the following returns a blank line. yes, LD_LIBRARY_PATH irrelevant; >>> echo $PYTHONHOME $PYTHONPATH $DYLD_LIBRARY_PATH $PSIDATADIR. >>> which python psi4 g++ gfortran # Linux; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/gcc++; $PSI4CONDA/bin/gfortran; >>> which python psi4 g++ gfortran clang++ # Mac; $PSI4CONDA/bin/python; $PSI4CONDA/bin/psi4; $PSI4CONDA/bin/g++; $PSI4CONDA/bin/gfortran; /usr/bin/clang++. >>> which cmake; $PSI4CONDA/bin/cmake; # if above empty, ``conda install cmake``. * Create and compile plugin:. .. code-block:: bash. >>> psi4 --plugin-name testplugin; -- Creating ""testplugin"" with ""basic"" template. -----------------; ==> Created plugin files (in testplugin as basic):; __init__.py, CMakeLists.txt, doc.rst, input.dat, plugin.cc, pymodule.py. # move into plugin directory; >>> cd testplugin. # configure using build info from parent psi4; >>",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:5113,install,installing,5113,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['install'],['installing']
Deployability,"shrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:30708,configurat,configuration,30708,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,"['configurat', 'install']","['configuration', 'installing']"
Deployability,"sr/bin/clang++ -- works; ...; -- Generating done; -- Build files have been written to: testplugin. # compile the plugin to produce testplugin.so; >>> make; Scanning dependencies of target testplugin; [ 50%] Building CXX object CMakeFiles/testplugin.dir/plugin.cc.o; [100%] Linking CXX shared module testplugin.so; [100%] Built target testplugin. # run sample input.dat; >>> psi4; Attention! This SCF may be density-fitted. Please note that the conda distribution must be in ``$PATH`` or the; conda enviroment must be activated before compilation and execution of; plugins created using this procedure. Files in a Plugin Directory; ---------------------------. In addition to the main ``myplugin.cc`` file, a fresh plugin directory contains the following files. * **CMakeLists.txt** |w---w| CMake file governing project *plugin*.; The plugin source and CMakeLists.txt is independent of platform; and |PSIfour| installation. You use CMake (version 3.1 or later); to generate a Makefile for the plugin by pointing it to a specific; |PSIfour| installation. Run ``psi4 --plugin-compile`` to get a command; to execute to generate the Makefile. What that command is doing is; loading the compilers and options used to build the parent |PSIfour|; (the ``-C psi4PluginCache`` part) which in turn can be overridden; by passing ``-Doption=value`` commands to ``cmake`` *and* pointing; toward a particular |PSIfour| (and probably pybind11) library to; link against (the ``CMAKE_PREFIX_PATH`` part) *and* telling it to; do an in-source build (the ``.`` part). Then just run ``make`` in; your plugin directory. After any change to the plugin C++ code,; ``make`` must be run in the plugin directory to recompile the; ``myplugin.so`` executable, but recompiling the main |PSIfour| code; is not necessary. Should you add additional (non-header) files to; the plugin or need to link to additional external libraries, add that; information here. * **input.dat** |w---w| Sample input file for the plugin.; Since the ``__",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst:7798,install,installation,7798,doc/sphinxman/source/plugins.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/plugins.rst,1,['install'],['installation']
Deployability,"st-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O """,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17889,install,installation,17889,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installation']
Deployability,"stalls; Miniconda into ``$HOME/miniconda`` and the |PSIfour| executable into the; main conda environment at ``$HOME/miniconda/bin/psi4``. .. code-block:: bash. # Linux or Mac, Py2 or Py3 for main environment (immaterial to Py for Psi4): select between four lines; # Windows: in Ubuntu shell, select either Linux line; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh""; >>> curl -o Miniconda-latest.sh ""https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh"". .. code-block:: bash. >>> bash; >>> bash Miniconda-latest.sh -b -p $HOME/miniconda # agrees to conda's license terms; >>> echo ""export PATH=$HOME/miniconda/bin:\$PATH"" >> ~/.bashrc # Mac: use ~/.bash_profile; # log out, log back in so conda in path; >>> conda update --yes --all; >>> conda config --add channels http://conda.anaconda.org/psi4; >>> conda install --yes psi4; >>> psi4 ""$(dirname $(which psi4))""/../share/psi4/samples/sapt1/test.in # test installation. works b/c PSI_SCRATCH defaults to /tmp. That last command tested that ``psi4`` is in your path, and it's finding; all the libraries it needs. Now you need only specify a scratch directory; (see :ref:`sec:Scratch`) by replacing the placeholder in the following:. .. code-block:: bash. >>> echo ""export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files"" >> ~/.bashrc; # log out, log back in so variable takes effect. All done!. .. note:: Above commands use bash for installation and set up your environment for bash at runtime. To use csh at runtime, follow the on-screen directions at the end of the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/la",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:17183,update,update,17183,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['update'],['update']
Deployability,"stems and molecules with; open-shell character it is recommended to use the simultaneous algorithm.; Efficiency of the simultaneous algorithm can be greatly increased by avoiding; the transformation of the four-index virtual two-electron integrals; :math:`(vv|vv)` and computing the terms that involve these integrals in the AO; basis. In order to do that one needs to set the |dct__ao_basis| option to; DISK (currently used by default). For more recommendations on the choice of the algorithm see; :ref:`Recommendations <sec:dctrecommend>`. .. _`sec:dctgradients`:. Analytic Gradients; ~~~~~~~~~~~~~~~~~~. Analytic gradients are available for the DC-06, ODC-06, ODC-12, and ODC-13 methods.; For DC-06, the evaluation of the analytic gradients requires the solution of the; coupled response equations. Two algorithms are available for their iterative; solution: ``TWOSTEP`` (default) and ``SIMULTANEOUS``. These algorithms are similar to those; described for the orbital and cumulant updates in the :ref:`Iterative Algorithms <sec:dctalgorithms>`; section and usually exhibit similar efficiency. The choice of the algorithm can; be made using the |dct__response_algorithm| option. For the DC-12 method the; analytic gradients are not yet available, one has to use numerical gradients to; perform the geometry optimizations. For the ODC-06, ODC-12 and ODC-13 methods no response equations; need to be solved, which makes the computation of the analytic gradients very; efficient. Analytic gradients are not available for the three-particle energy; correction :math:`(\lambda_3)`. .. _`sec:dctmethodsummary`:. Methods Summary; ~~~~~~~~~~~~~~~. The table below summarizes current DCT code features:. .. _`table:dct_methods_summary`:. +-------------------------------------+--------------------------------------------------------------+---------+----------+------------------------+; | Method | Available algorithms | Energy | Gradient | Reference |; +=====================================+=============",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:13495,update,updates,13495,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['update'],['updates']
Deployability,"strative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable ``CMAKE_INSTALL_PREFIX``; before compiling. * Build with Specific Install Directory. .. code-block:: bash. cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in S",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22134,release,release,22134,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['release'],['release']
Deployability,"stsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63588,install,installed,63588,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['install'],"['installation', 'installed']"
Deployability,"sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__version__ = '1.3rc2'; +__version_long = '1.3rc2+zzzzzzz'; +__version_upcoming_annotated_v_tag = '1.3rc3'. >>> git add psi4/metadata.py; >>> git commit -m ""v1.3rc2""; [master bc8d7f5] v1.3rc2. >>> git log --oneline | head -1; bc8d7f5 v1.3rc2; >>> git tag -a v1.3rc2 bc8d7f5 -m ""v1.3rc2"". # goto GH:psi4/psi4 > Settings > Branches > master > Edit; # https://github.com/psi4/psi4/settings/branch_protection_rules/424295; # uncheck ""Do not allow bypassing th",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:13590,release,release,13590,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"t EXCLUDE; ); endif(). install(FILES header.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). configure_file(__init__.py __init__.py @ONLY); configure_file(extras.py extras.py @ONLY); install(FILES ${CMAKE_BINARY_DIR}/__init__.py; ${CMAKE_BINARY_DIR}/extras.py; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4). install(; FILES ../pytest.ini; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4; ); install(; DIRECTORY; ../tests/pytests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ""test_*.py""; PATTERN ""__init__.py""; PATTERN ""addons.py""; PATTERN ""conftest.py""; PATTERN ""standard_suite_runner.py""; PATTERN ""standard_suite_ref_local.py""; PATTERN ""adcc_reference_data.json""; PATTERN ""oei_reference_data.json""; PATTERN ""f12_libint1.json""; PATTERN ""tdscf_reference_data.json""; PATTERN ""utils.py""; ); install(; DIRECTORY; ../tests/pytests/test_fchk_writer; ../tests/pytests/test_molden_writer; ../tests/pytests/test_psi4_qcschema; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; ). install(; DIRECTORY; ../tests/; DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}/psi4/tests/; FILES_MATCHING; PATTERN ../tests/pytests EXCLUDE; PATTERN ../tests/cfour EXCLUDE; PATTERN ""test_input.py""; PATTERN ""input.dat""; PATTERN ""input.py""; PATTERN ""__pycache__"" EXCLUDE; PATTERN ""*pyc"" EXCLUDE; # below place extra files the ctests-run-as-pytests need; PATTERN ""adcc/formaldehyde-pe-adc1/fa_6w.pot""; PATTERN ""adcc/formaldehyde-pe-adc2/fa_6w.pot""; PATTERN ""ci-property/grid.dat""; PATTERN ""scf-property/grid.dat""; PATTERN ""mp2-property/grid.dat""; PATTERN ""cubeprop*/*cube.ref""; PATTERN ""fcidump/*INTDUMP.ref""; PATTERN ""psithon2/psiaux1/*""; PATTERN ""psithon2/psiaux1/myplugin1/*""; PATTERN ""psithon2/psiaux2/*""; PATTERN ""dftd3/psithon2/psiaux1/*""",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt:11487,install,install,11487,psi4/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/CMakeLists.txt,1,['install'],['install']
Deployability,"t and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good,",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:1359,install,installs,1359,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['install'],['installs']
Deployability,"t conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configuration options are available; ---------------------------------------------------------. CMake doesn't provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. .. literalinclude:: @SFNX_INCLUDE@CMakeLists.txt; :lines: 14-142; :language: none. Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. -D STRING forward directly to cmake (example: -D ENABLE_THIS=1; .. -D ENABLE_THAT=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installati",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:20180,configurat,configuration,20180,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['configurat'],['configuration']
Deployability,"t of two-electron integrals) by providing the appropriate TOC; keyword, a size, and a starting address relative to the beginning of; the TOC entry. In short, the TOC design hides all information about; the global structure of the file from the programmer and; allows him/her to be concerned only with the structure of individual; entries.; II. The structure of libpsio; file. The first element in every libpsio file is a single; integer, toclen, indicating the number of entries in the; file. Each entry is stored together with its TOC ""header"", i.e., the; keyword-string and global-address information for the data. When the; file is opened, the first entry's TOC header is read from the file; into an in-core TOC list. If a second entry exists, the; ending-address data from the first entry is used to lseek(); to the next entry, whose header is read into the in-core TOC, and so; on. If a new entry is added or an existing entry is modified (e.g.,; extended), both the in-core TOC and the corresponding TOC header; on-disk are updated automatically. This prevents most cases of; corruption of the file in case of a program crash. Apart from the toclen integer, the file itself is viewed by; the library as a series of pages, each of which contains an identical; number of bytes. The global address of the beginning of a given entry; is stored on the TOC as a page/offset pair comprised of the starting; page and byte-offset on that page where the data reside.; The entry-relative page/offset addresses which the programmer; must provide work in exactly the same manner, but the 0/0 (PSIO_ZERO); position is taken to be the beginning of the desired entry rather than; the beginning of the file. II. The user interface. All of the functions needed to carry out basic I/O are described in; this subsection. Proper declarations of these routines are provided; by the header file psio.h. Note; that before any open/close functions may be called, the input parsing; library, libipv1 must be initialized s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html:2938,update,updated,2938,doc/sphinxman/source/attic/libpsio.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libpsio.html,1,['update'],['updated']
Deployability,"t opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15445,install,installed,15445,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['install'],['installed']
Deployability,"t with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfour| on Linux,; Mac, Windows (Ubuntu shell for Windows accepts Linux installers), or native Windows.; Installs Miniconda+Psi4+AddOns into ``$HOME/psi4conda`` and; the |PSIfour| executable into the main conda environment at; ``$HOME/psi4conda/bin/psi4``. .. code-block:: bash. # Linux or WSL (Windows Subsystem for Linux); # py38|py39|py310 for altern",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3391,install,install,3391,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['install'],"['install', 'installer']"
Deployability,"t"", True). - Pytest (CLI)::. +++ b/tests/pytests/addons.py; @@ -223,8 +223,8 @@ def ctest_runner(inputdatloc, *, extra_infiles: List = None, outfiles: List = No; if Path(psi4.executable).suffix == "".exe"":; command = [psi4.executable, inputdat]; else:; - command = [sys.executable, psi4.executable, inputdat]; - _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=False); + command = [sys.executable, psi4.executable, inputdat, ""-n2""]; + _, output = execute(command, infiles_with_contents, outfiles, environment=env, scratch_messy=True). success = output[""proc""].poll() == 0; assert success, output[""stdout""] + output[""stderr""]. * Run a full stdsuite tests to generate new capabilities tables for docs. Detailed instructions are; in :source:`psi4/share/psi4/scripts/merge_stdsuite.py` . Anticipate next release; -----------------------. * Bump version in ``codemeta.json``, :source:`codemeta.json#L9`; * Add to branch list in ``azure-pipelines.yml``, :source:`azure-pipelines.yml`. Build Conda ecosystem stack; ---------------------------. * By ""ecosystem stack"", we mean packages that are upstream, downstream, required, and optional for; a fully featured Psi4 build and which we have some role in packaging.; * These packages (e.g., ``libint``, ``gdma``) should already be updated and built on conda-forge.; Survey them to check version tick and other key PRs have been merged.; * Changes to targets' ""source"" and ""version"" in individual recipes should be edited in psi4; ``external/*/*/CMakeLists.txt`` files; * Edit any added or dropped dependencies in main :source:`CMakeLists.txt` and docs; :source:`doc/sphinxman/source/build_planning.rst` . .. Build Conda ecosystem stack (pre-Spring 2023); .. ---------------------------------------------; ..; .. By ""ecosystem stack"", mean packages that are upstream, downstream, required, and optional for a fully featured Psi4 build and which we can't get from ""defaults"" or ""conda-forge"" channels.; ..; .. * Main d",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:6480,pipeline,pipelines,6480,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['pipeline'],['pipelines']
Deployability,"t(psi4_URL ""http://www.psicode.org/""); set(psi4_EMAIL ""psi4aiqc+cmake@gmail.com""); set(psi4_LICENSE ""GNU Lesser General Public License, version 3 (LGPL-3.0)""); set(psi4_DESCRIPTION ""Open-Source Quantum Chemistry""). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake). message(STATUS ""Building using CMake ${CMAKE_VERSION} Generator ${CMAKE_GENERATOR}""). ################ Options: Overview and Not Otherwise Mentioned ###############. # <<< CMake build overview >>>; #; # >>> ls; # external/ COPYING psi4/ tests/ ...; # >>> cmake -S. -Bobjdir -DCMAKE_INSTALL_PREFIX=/path/to/install-psi4 ...; # ...; # -- Generating done; # -- Build files have been written to: /current/dir/objdir; # >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. # <<< Required build dependencies that Psi4 can't build itself >>>; #; # - CMake (e.g., `conda install cmake`); # - C++ and C compilers (C++17 compliant); # - BLAS/LAPACK (also runtime; e.g., `conda install mkl-devel`); # - Python (also runtime; interpreter and headers; e.g., `conda install python`); # - NumPy (also runtime; avoidable at buildtime if gau2grid pre-built; e.g., `conda install numpy`); # - networkx >=2.4 (runtime only; e.g., `conda install networkx`); # - pint >=0.10 (runtime only; e.g., `conda install pint -c conda-forge`); # - pydantic >=1.0 (runtime only; e.g., `conda install pydantic -c conda-forge`); # - msgpack-python (runtime only; e.g., `conda install msgpack-python`); # - Eigen (for Libint2; e.g., `conda install eigen`); # - Boost (header-only libs for Libint2; e.g., `conda install boost-cpp`); # - SciPy (runtime only; avoidable through keyword setting; e.g., `conda install scipy`); # - py-cpuinfo (runtime only; e.g., `conda install py-cpuinfo`); # - psutil (runtime only; e.g., `conda install psutil`). # These three ""### Options ###"" sections contain useful CMake variables for build configuration. # <<< Compilers and flags >>>; #; # - CMAKE_C_COMPILER ""C compiler""; # - CMAKE_C_FLAGS ""Additi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt:1709,install,install,1709,CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/CMakeLists.txt,1,['install'],['install']
Deployability,"t. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69969,install,installation,69969,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,4,['install'],"['install', 'installation']"
Deployability,"t; $\bullet$ To check out a working copy of the head of a specific release branch,; e.g., the branch labelled {\tt psi-4-0}:. {\tt svn co https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0 psi4}. \noindent Note that subsequent {\tt svn update} commands in this; working copy will provide updates only on the chosen branch. Note; also that after you have checked out a fresh working copy of the code; you must run the {\tt autoconf} command to generate a {\tt configure}; script for building the code. (See the installation manual for; configuration, compilation, and testing instructions.). \noindent For each of the above commands, the working copy of your; code will be placed in the directory \file{psi4}, regardless of your; choice of branch. In this manual, we will refer to this directory; from now on as {\tt \$PSI4}. Subsequent SVN commands are usually run; within this top-level directory. \noindent; $\bullet$ To update your current working copy to include the latest revisions:. {\tt svn update}. \noindent; Notes: (a) This will update only the revisions on your current branch;; (b) The old {\tt -d} and {\tt -P} flags required by CVS are not necessary with SVN. . \noindent; $\bullet$ To convert your working copy to the head of a specific branch:. {\tt svn switch https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; $\bullet$ To convert your working copy to the head of the main trunk:. {\tt svn switch https://sirius.chem.vt.edu/svn/psi4/trunk/}. \noindent; $\bullet$ To find out what branch your working copy is on, run this in your; top-level \PSIfour\ source directory:. {\tt svn info | grep URL}. \noindent; This will return the SVN directory from which your working copy was; taken, e.g.,. \noindent; {\tt URL: https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0}. \noindent; Some words of advice:; \begin{enumerate}; \item Most SVN commands are reasonably safe, . \item Unlike CVS, you shouldn't use {\tt svn update} to see the status; of your working copy. With",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:6381,update,update,6381,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['update'],['update']
Deployability,"t; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. -D STRING forward directly to cmake (example: -D ENABLE_THIS=1; .. -D ENABLE_THAT=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable ``CMAKE_INSTALL_PREFIX``; before compiling. * Build with Specific Install Directory. .. code-block:: bash. cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:20983,install,installation,20983,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,"t; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4/label/dev; >>> conda activate p4env. * (K) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4/label/dev. .. Troubleshooting; .. ^^^^^^^^^^^^^^^; ..; .. * If the target computer doesn't have libc >= 2.7 (released c.2007; for reference, 2.10 is newer than 2.7; unlike most libraries, libc generally not available in multiple versions on a computer), the |PSIfour| conda package won't work. ::; ..; .. # unsuitable computer; .. >>> ldd --version; .. ldd (GNU libc) 2.5; .. # suitable computer; .",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:27274,install,install,27274,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"t`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; -----------------------------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-psi4-dir}`. * ``cd {top-level-psi4-dir} && cmake -S. -Bobjdir``; * ``cd {top-level-psi4-dir} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library head",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24450,install,install-libint,24450,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install-libint']
Deployability,"tal electonic energy [E_h] . Not unique because orbital spaces vary. .. psivar:: EFP DISP ENERGY; EFP ELST ENERGY; EFP EXCH ENERGY; EFP IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for EFP/EFP; computations. The sum of these four components yields; :psivar:`EFP TOTAL ENERGY`. .. psivar:: EFP TOTAL ENERGY. The total electronic interaction energy [E_h] for EFP/EFP computations. .. psivar:: EFP TORQUE. The torque, not gradient for EFP/EFP computations. .. psivar:: ENTHALPY. Total enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. .. psivar:: GRID ELECTRONS TOTAL; GRID ELECTRONS ALPHA; GRID ELECTRONS BETA. The number of electrons integrated by the xc quadrature grid. .. psivar:: HF TOTAL ENERGY. The total electronic energy [E_h] for the Hartree--Fock method, without; any dispersion correction; the first three (or four, since; :math:`E_{xc} = 0`) terms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:35096,configurat,configuration,35096,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,"te; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28596,install,installing,28596,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installing']
Deployability,"teration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note that the quadratically-convergent algorithm is not yet fully; optimized and often converges slowly when the RMS of the cumulant or; the orbital gradient is below :math:`10^{-7}`. The choice of the iterative algorithm can significantly affect the cost of the; energy computation. While the two-step algorithm requires a small number of; disk-intensive :math:`{\cal O}(N^5)` integral transformations, the simultaneous; algorithm benefits from a smaller number of expensive :math:`{\cal O}(N^6)`; cumulant updates. As a result, for small closed-",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:11416,update,update,11416,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,2,['update'],['update']
Deployability,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61394,continuous,continuous,61394,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,"['continuous', 'integrat']","['continuous', 'integration']"
Deployability,"test-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove libint2``. **Source**. * .. image:: https://img.shields.io/github/tag/evaleev/libint.svg?maxAge=2592000; :target: https://github.com/evaleev/libint/pull/233. Note that |PSIfour| uses v2 and a modified branch. * If using |PSIfour| built from source and you want Libint built from; from source also,; let the build system fetch and build it and activate dependent code.; Note that Libint2 has many more integral class enabling and AM knobs; than Libint1 and that the generation step (generator source to; library source) preceding the compilation step (library source to; built library) takes far lo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:2551,install,installed,2551,doc/sphinxman/source/libint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst,2,['install'],"['install', 'installed']"
Deployability,"the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30509,install,installs,30509,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installs']
Deployability,"the installation or consult step 7 below. .. _`sec:slowconda`:. Detailed Installation of Miniconda; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. https://docs.conda.io/en/latest/miniconda.html. .. 0. Sanity check. If you already have Miniconda or Anaconda, skip to step 5. The whole installation takes ~5 min; reading this page takes far longer.; ..; .. 1. Get ``bzip2``. You'll need this slightly exotic command so run ``which`` to test for availability, and install from ``yum``, source, *etc.* if unavailable. You'll also need an internet connection for downloading; computers behind a firewall or with restricted login domains are eligible. So long as you can ssh *into* the computer to an account with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:19019,install,installer,19019,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installer']
Deployability,"the subchannel. May need to delete packages to clear out space on anaconda.org; .. * Copy ``meta.yaml`` and ``build.sh`` of at least ``psi4-multiout`` and ``psi4-rt`` to e.g., v121-build.sh files for easy reference or rebuilding as dependencies in master change. .. Publish to main conda label (pre-Spring 2023); .. ---------------------------------------------; ..; .. * Go through each active conda package off https://anaconda.org/psi4/repo; ..; .. - Find the most recent build set (Linux/Mac, active py versions) that ``psi4``/``psi4-rt``/``psi4-dev`` is using; .. - _add_ (not replace) the ``main`` label.; ..; .. * This makes a ``conda install psi4 -c psi4`` get everything psi4 needs. For the moment ``conda install psi4 -c psi4/label/dev`` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. May help to check versions and build versions against ltrtver in ``conda_build_config.yaml``.; .. * This step is manual, so takes a while. (It gets checked when Psi4conda installers are built b/c that pulls from ""main"", not ""dev""). .. Build Psi4conda set (pre-Spring 2021); .. -------------------------------------; ..; .. Installers are build using the project ``constructor`` to build binary bash scripts, one per OS per Python version (e.g., 16 total for linux-64/osx-64/win-64/osx-arm64 and py38/39/310/311). In analogy to Miniconda, they're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:21655,install,installers,21655,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installers']
Deployability,"the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repos/psi4/psi4/releases/tags/v1.8.2 (substituting tag) and note the ``id``; field value.; * Copy and edit a new file akin to ``content/posts/v182.md``. Add it to the git index. - e.g., ``v1.8.2`` is used for Title and Release Notes.; - e.g., ``1.8.x`` is used for Documentation and Source.; - e.g., ``v182`` (edition string) is used for Image and Installers.; - Use the ``id`` value in the sh",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:36123,release,releases,36123,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,2,['release'],"['release', 'releases']"
Deployability,"theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of configuration interaction convergence. .. psivar:: DFT FUNCTIONAL TOTAL ENERGY. The total electronic energy [E_h] for the underlying functional of the; requested DFT method, without any dispersion correction; the first four; terms in Eq. :eq:`SCFterms` or :eq:`DFTterms`. Quantity; :math:`E_{\text{FCTL}}` in Eqs. :eq:`SCFterms` and :eq:`DFTterms`.; Unless the method includes a dispersion correction, this quantity is; equal to :psivar:`SCF TOTAL ENERGY`. .. psivar:: DFT TOTAL ENERGY. The total electronic energy [E_h] for the requested DFT method,; :math:`E_{\text{DFT}}` in Eq. :eq:`DFTterms`. .. math::; :nowrap:; :label: DFTterms. \begin{align*}; E_{\text{DFT}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{FCTL}} + E_{\text{-D}} + E_{\text{DH}} \\; & = E_{\text{SCF}} + E_{\text{DH}}; \end{align*}. Unless the method is a DFT double-hybrid, this quantity is equal to; :psivar:`SCF TOTAL ENERGY`. If the method is neither a; double-hybrid, nor dispersion corre",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:30895,configurat,configuration,30895,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['configurat'],['configuration']
Deployability,"thor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libxc-5077AB.svg; :target: https://gitlab.com/libxc/libxc. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: https://www.tddft.org/programs/libxc/manual/. |PSIfour|, relies upon the Libxc library for density functionals. Libxc; requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libxc. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libxc/badges/version.svg; :target: https://anaconda.org/psi4/libxc. * Libxc is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, Libxc has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libxc can be obtained through ``conda install libxc -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libxc and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libxc from conda without thinking, consult. * To remove a conda installation, ``conda remove libxc``. **Source**. * .. image:: https://img.shields.io/github/tag/loriab/libxc.svg?maxAge=2592000; :target: https://github.com/loriab/libxc/tree/libxc4retweaked. Note that |PSIfour| has forked and slightly modified upstream Libxc from; https://gitlab.com/libxc/libxc to regain functionality. * If using |PSIfour| built from source and you want Libxc built from; from source also,; let the build system fetch and build it and activate dependent code. .. _`cmake:libxc`:. How to configure Libxc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst:2247,install,installed,2247,doc/sphinxman/source/libxc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libxc.rst,2,['install'],"['install', 'installed']"
Deployability,"thub.com/psi4/psi4meta/blob/master/.github/workflows/Docker.yml; ``matrix.cfg`` list for changed Python version and to label the tags with current Psi4 from c-f.; * Commit ``environment.yaml`` or ``Docker.yml`` to trigger GHA Docker builds.; * Check at DockerHub for new images. .. Generate download page for psicode.org (pre-Fall 2023); .. ------------------------------------------------------; ..; .. * Be in repo psicode-hugo-website; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md. Note the edition string ``v13rc2`` in frontmatter for this and future filenames; .. * Copy and edit new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; .. * Enter ``scripts/`` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't po",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:28172,install,install-generator,28172,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['install-generator']
Deployability,"thub.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintenance branch.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API. Publish psicode.org release; ---------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Execute https://api.github.com/repos/psi4/psi4/releases/latest or; https://api.github.com/repo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35753,release,release,35753,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"tions; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad64=py36_sse41_0 -c psi4/label/subchannel -c psi4. .. _`faq:psi4deps`:. How to use conda to compile Psi4 faster and easier; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: console. # Linux # c. v1.2rc1 ###or Mac or Windows; # substitute x.x by 3.5|3.6|3.7 for alternate python versions; >>> conda create -n p4dev python=x.x psi4-dev -c psi4/label/dev -c psi4; >>> conda activate p4dev. >>> cd {top-level-psi4-dir}; >>> psi4-path-advisor --help; usage: psi4-path-advisor [-h] [--psi4-compile] [--di",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:9353,update,update,9353,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,"['install', 'update']","['installation', 'update']"
Deployability,"tml>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * updated nightly so new features accessible. * standardizes python distribution so no need to find/install libpython packages. * add-ons (plugins, extra features requiring Fortran compiler, etc.) can be made available as conda packages. * develop |PSIfour| through plugins without a pre-existing development environment, see :ref:`sec:condaplugins`. The |PSIfour| binary repository is at `Anaconda (formerly Binstar) <https://anaconda.org/psi4>`_. For commands to get a default installation, go to :ref:`sec:psi4conda`; or the :psicode:`psicode downloads page <installs/latest/>` .; Users proficient with conda may prefer to consult :ref:`sec:condadetails`.; For more flexibility and a detailed explanation, go to; :ref:`sec:slowconda` and :ref:`sec:slowpsi4`. .. _`faq:psicodedownload`:. How to install a Psi4 binary with the Psi4conda installer, download site; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. `Download one of the nine installers; <http://psicode.org/downloads.html>`_ (Linux/Mac/Windows; Py38/39/310).; ``bash`` it. Follow the prompts and *do* make the adjustments to; :envvar:`PATH` and :envvar:`PSI_SCRATCH` that it suggests at the end. Test; with ``psi4 --test`` (green and yellow good; red bad). Done. Explicit commands at :ref:`sec:psi4conda`. .. _`sec:psi4conda`:. How to install a Psi4 binary with the Psi4conda installer, command-line; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sequence of commands to get you to a working |PSIfou",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:3073,install,installation,3073,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,2,['install'],"['installation', 'installs']"
Deployability,"to a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |########################################",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:22477,install,installation,22477,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installation']
Deployability,"to be; edited in the above ``CMakeLists.txt`` rather than passing them into; the |PSIfour| build directly. * Build with Higher Angular Momentum. .. code-block:: bash. >>> cmake -DMAX_AM_ERI=6. * Relevant CMake Options:. .. code-block:: bash. MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since |PSIfour| 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all |PSIfour| builds detect that installation at compile-time. To switch a finished build to a larger Libint, enter ``<objdir>``,; remove the result of ``make install`` (if ever invoked), remove; ``external/upstream/libint/``. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove ``stage/include/libint/``, ``stage/share/cmake/Libint/``,; ``stage/lib/libint2.so.2``. Edit MAX_AM_ERI; value in ``CMakeCache.txt``. Reinvoke ``make`` and check the number; beside ``Found Libint`` in the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum integrals from conda; -----------------------------------------------------. Libint2 conda packages are available from conda for Linux, Mac, and Windows. The Linux packag",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:17487,install,install,17487,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability,"to`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. ---------------------------------------------; ..; .. * In psi4-* recipes, find the best combination of master meta.yaml/build.sh and the v1N(x-1)-labeled ones; ..; .. - comment out any dependencies in master but not yet in postrelease; .. - add ``{{ dep_bld }}`` entries if needed to step back build. make sure normal operation is ``''``; ..; .. * In cbcy,; ..; .. - create a postrelease new line and record anything not in continuous order with <> or blanking; .. - step back any dependencies versions or build numbers to ones compatible with the postrelease. Tweak Conda for postrelease; ---------------------------. * Start a PR to https://github.com/conda-forge/psi4-feedstock . Always store the PR branch on your; fork, never on the conda-forge feedstock (or your branch itself will get publically packaged).; https://github.com/conda-forge/psi4-feedstock/pull/15 is an example. - Always: edit ``version`` and ``commit`` jinja variables.; - Possibly: edit ``source/url`` field for trial locations.; - Always: edit ``sha256`` jinja variable from e.g., ``curl -sL https://github.com/psi4/psi4/archive/v1.8.2.tar.gz | openssl sha256``; - Always: edit ``build/number``. Either reset to 0 if version increments or bump if version *doesn't* increment.; - Possibly: uncomment ``skip: true # [py != 310]`` if you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:11267,continuous,continuous,11267,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['continuous'],['continuous']
Deployability,"todoc_abbr_options_c.rst. .. index:: DKH; .. _`sec:DKH`:. Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess; ======================================================. .. codeauthor:: Justin M. Turney; .. sectionauthor:: Justin M. Turney. *Module:* :ref:`Keywords <sec:dkhkeywords>`, :ref:`Samples <apdx:testSuitedkh>`. .. image:: https://img.shields.io/badge/home-dkh-5077AB.svg; :target: https://github.com/psi4/dkh. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://www.reiher.ethz.ch/software/dkh-x2c.html. .. _`sec:dkhinstall`:. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/dkh/badges/version.svg; :target: https://anaconda.org/psi4/dkh. * DKH is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, dkh has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; dkh can be obtained through ``conda install dkh -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_dkh`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect dkh and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. dkh from conda without thinking, consult. * To remove a conda installation, ``conda remove dkh``. **Source**. * .. image:: https://img.shields.io/github/tag/psi4/dkh.svg?maxAge=2592000; :target: https://github.com/psi4/dkh. * If using |PSIfour| built from source and you want dkh built from; from source also,; enable it as a feature with :makevar:`ENABLE_dkh`,; and let the build system fetch and build it and activate dependent code. .. _`sec:dkhinput`:. Input; ~~~~~. For all electron calculations one can use the Douglas-Kroll-Hess (DKH); Hamiltonian to take into account scalar relativistic effects. Minimal input for DKH single-point computat",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst:2023,install,installed,2023,doc/sphinxman/source/dkh.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dkh.rst,2,['install'],"['install', 'installed']"
Deployability,"tps://img.shields.io/badge/docs-latest-5077AB.svg; .. :target: http://pcmsolver.readthedocs.io/en/latest/. |PSIfour| contains code to interface to the CPPE library developed; by M. Scheurer.; The CPPE library requires no additional licence, downloads, or; configuration. The library allows for calculations in solution with the; polarizable embedding model (PE), an explicit, fragment-based solvent model [Olsen:2010:3721]_. For a general tutorial on how to prepare/perform PE calculations, read the; `tutorial review <https://onlinelibrary.wiley.com/doi/full/10.1002/qua.25717>`_. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/cppe/badges/version.svg; :target: https://anaconda.org/psi4/cppe. * CPPE is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CPPE has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CPPE can be obtained through ``conda install cppe -c psi4``.; Then enable it as a feature with :makevar:`ENABLE_cppe`,; hint its location with :makevar:`cppe_DIR`,; and rebuild |PSIfour| to detect CPPE and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. cppe from conda without thinking, consult. * To remove a conda installation, ``conda remove cppe``. **Source**. * .. image:: https://img.shields.io/github/tag-date/maxscheurer/cppe.svg?maxAge=2592000; :target: https://github.com/maxscheurer/cppe. * If using |PSIfour| built from source and you want CPPE built from; from source also,; enable it as a feature with :makevar:`ENABLE_cppe`,; and let the build system fetch and build it and activate dependent code. .. index:: PE; Using PE. .. _`sec:usingPE`:. Using the polarizable embedding model; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. The inclusion of a PE description of the solvent into your calculation",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst:2482,install,installed,2482,doc/sphinxman/source/cppe.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cppe.rst,2,['install'],"['install', 'installed']"
Deployability,"treet, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:sowreap`:. Embarrassing Parallelism; ========================. Many of the tasks automated by Python wrappers consist of a number of; independent |PSIfour| calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. - Prepare an input file, simply adding ``mode='sow'`` to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations. - According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation. - The 'sow' stage also produces a *master* input file (with a; ``mode='reap'`` directive). When all the jobs in the above step are; completed, place their output files in the same location as the; *master* input, and run this last, quick job to collect the results. - Sow/reap procedures are governed by the **mode** keyword, choices being; ``'continuous'``, ``'sow'``, and ``'reap'``. Only ``'sow'`` is likely to; be used by the user, as ``'continuous'`` is always the default, and; input files with ``'reap'`` are autogenerated. - Embarrassingly parallel algorithm available at present for:. - :ref:`sec:db()` ; - finite difference operation of :ref:`sec:opt()` ; - finite difference of energies of :ref:`sec:freq()`; - finite difference of gradients of :ref:`sec:freq()`. .. caution:: Some features are not yet implemented. Buy a developer a coffee. - Local options (*e.g.*, ``set scf e_convergence 9``) will not get transmitted to the child jobs. - Array options (*e.g.*, ``set states_per_irrep [2, 1]``) will not get transmitted to the child jobs. - Function intercalls (*e.g.*, db(opt())) are not tested with sow/reap procedures. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst:2149,continuous,continuous,2149,doc/sphinxman/source/sowreap.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sowreap.rst,2,['continuous'],['continuous']
Deployability,"treleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push the tag commit, then push the tag, GHA will build the docs at the tag commit, but the version will show up as ""undefined"".; - If you ``atomic`` push the tag commit and tag together and wait, GHA will build the docs at v1.Y, as desired. Publish GitHub release; ----------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8, 2023-05-11``; * Fill in frontmatter style and links from previous GitHub release; * Fill in RN from hopefully existing RN issue.; * Fill in RN by going through the frontmatter from all PRs from this milestone, particularly the; ""User API & Changelog headlines"" section.; * Save the draft release until tag is finalized.; * ""publish"" release. This establishes the release date for the GitHub API.; * Close the RN issue.; * Close the milestone (should be 100% complete).; * Open a milestone for the release that's a year out. Publish GitHub postrelease; --------------------------. * With an anticipated or newly minted tag, go to https://github.com/psi4/psi4/releases/new (or; ""Draft a new release"" button on GitHub site).; * Release title takes the form: ``v1.8.2, 2023-10-03``; * Fill in frontmatter style and links from previous GitHub release.; * Fill in RN bullets for changes cherry-picked or edited to the maintena",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:35360,release,releases,35360,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,2,['release'],"['release', 'releases']"
Deployability,"tributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software st",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1499,update,updated,1499,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['update'],['updated']
Deployability,"troller is https://github.com/psi4/psi4docs/blob/master/.github/workflows/docs.yml; - Netlify psicode redirect controller is https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml#L10-L15. * This setup works great for ""latest"" docs, but it won't necessarily build a nice copy on the tag; commit itself for release and postrelease snapshots. Get a snapshot *on the tag* by some means:. - For releases and postreleases, any commit to the maintenance branch will build docs and upload; to the branch name in psi4docs. This should be pre-positioned by GHA, so check that docs with; the right version are deployed and then no further action required (can skip ahead to README.md; and netlify.toml steps).; - For releases, you can do the ``atomic`` push of the tag commit, wait for the docs build to; complete, download the GHA artifact (zipped docs dir), then continue by pushing the record commit.; - For releases beyond the ``atomic`` push, navigate on psi4 GH to the tag commit (not the record; commit) and retrigger the docs GHA, then download the GHA artifact (zipped docs dir).; - For postreleases, build the docs locally at the tag and collect the docs dir. * In your local clone of https://github.com/psi4/psi4docs, find the appropriate folder and unpack; your docs snapshot into it. - For releases, you'll need to make a new folder, e.g. ``sphinxman/1.8.x``.; - For postreleases, you'll overwrite the contents of the existing folder.; - Unpack and rearrange so that in the end, e.g., ``sphinxman/1.8.x/index.html`` is present. * Commit all your docs files and push to ``master``.; * For releases, add a line to the top-level table https://github.com/psi4/psi4docs/edit/master/README.md .; * For releases, add a new redirects block to https://github.com/psi4/psicode-hugo-website/edit/master/netlify.toml . * Details:. - If you sequentially push the tag commit, push the tag, push the record commit, GHA will build the docs at v1.{Y+1}.dev1, not at v1.Y .; - If you sequentially push",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:33912,release,releases,33912,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['releases']
Deployability,"ts to the the input filename with; "".out"" extension. .. option:: --psiapi-path. Generates a bash command to source correct Python interpreter and path for ``python -c ""import psi4""``. .. option:: --qcschema, --schema. Runs input files as QCSchema. Can either be JSON or MessagePack input. .. option:: -s <name>, --scratch <name>. This overrides the value of :envvar:`PSI_SCRATCH` and provides; a path to the location of scratch files. .. option:: -t <subset>, --test <subset>. Runs pytest tests. If ``pytest-xdist`` installed, parallel with :option:`-n`. .. .. option:: --new-plugin <name>; ..; .. Creates a new directory <name> with files for writing a; .. new plugin. An additional argument specifies a template; .. to use, for example: ``--new-plugin name +mointegrals``.; .. See :ref:`plugins <sec:plugins>` for available templates. .. option:: -v, --verbose. Print the Psithon to Python translation of the input file. .. option:: -V, --version. Print version information. ::. # stable release; >>> psi4 --version; 1.3.2. # development snapshot between 1.3 and 1.4; >>> psi4 --version; 1.4a2.dev525. .. .. option:: -w, --wipe. .. Clean out scratch area. .. _`sec:environmentVariables`:. Environment Variables; =====================. These environment variables will influence |PSIfours| behavior. .. envvar:: CONDA_PREFIX. Set when a conda environment is activated. Note that if |PSIfour| has been; built against any library in CONDA_PREFIX, the path has been baked into the; program, so any available dependencies are liable to been loaded from the environment. .. envvar:: HOST. Set when a conda environment with conda compilers is activated. Used; when compatibly building |PSIfour| from source against conda; dependencies. .. envvar:: MKL_NUM_THREADS. Number of threads to use by operations with Intel threaded BLAS libraries. .. deprecated: 1.1; See :ref:`sec:threading` for alternatives. .. envvar:: OMP_NESTED. Do access nested DGEMM in OpenMP sections in DFMP2 for multi-socket; platforms.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:20236,release,release,20236,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['release'],['release']
Deployability,"ttps://img.shields.io/github/tag/robashaw/libecpint.svg?maxAge=2592000; :target: https://github.com/robashaw/libecpint. * If using |PSIfour| built from source and you want LibECPInt built from; from source also,; enable it as a feature with :makevar:`ENABLE_ecpint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:ecpint`:. How to configure LibECPInt for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, LibECPInt is a library that provides additional; quantum chemical capabilities (ECP integrals). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) LibECPInt. * Upstream Dependencies |w---w| LibECPInt |dr| None. **CMake Variables**. * :makevar:`ENABLE_ecpint` |w---w| CMake variable toggling whether Psi4 builds with LibECPInt; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For LibECPInt, set to an installation directory containing ``include/libecpint.hpp``; * :makevar:`ecpint_DIR` |w---w| CMake variable to specify where pre-built LibECPInt can be found. Set to installation directory containing ``lib/cmake/ecpint/ecpint-config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_ecpint` |w---w| CMake variable to force internal build of ecpint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_ecpint` |w---w| CMake variable to force detecting pre-built LibECPInt and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON. B. Build *without* LibECPInt. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/to/ecpint/root. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -Decpint_DIR=/path/to/ecpint/configdir. D. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_ecpint=ON -DCMAKE_PREFIX_PATH=/path/",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst:3404,install,installation,3404,doc/sphinxman/source/ecpint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ecpint.rst,1,['install'],['installation']
Deployability,"tware Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Libint, integrals. .. _`sec:libint`:. Interface to Libint by E. Valeev; ================================. .. codeauthor:: Edward F. Valeev and Justin T. Fermann; .. sectionauthor:: Lori A. Burns. .. *Module:* :ref:`Keywords <apdx:efp>`, :ref:`PSI Variables <apdx:efp_psivar>`, :source:`LIBEFP <src/lib/libefp_solver>`. .. image:: https://img.shields.io/badge/home-libint-5077AB.svg; :target: https://github.com/evaleev/libint. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://evaleev.github.io/libint/. |PSIfour|, particularly libmints utterly relies upon the Libint library; developed by E. Valeev from early roots by J. Fermann. Libint requires no; additional licence, downloads, or configuration. Conversely, |Psifour|; cannot build *without* Libint. .. note:: As of Nov 2020 or release v1.4, |PSIfour| uses Libint2, not Libint1.; Compared to many other open-source QC codes, |PSIfour| requires a separate; Libint compilation with a different integrals ordering. See notes at top of; :source:`external/upstream/libint2/CMakeLists.txt` . Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://anaconda.org/psi4/libint2/badges/version.svg; :target: https://anaconda.org/psi4/libint2. * Libint is available as a conda package for Linux and macOS and Windows. * If using the |PSIfour| binary, Libint has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; Libint can be obtained through ``conda install libint2 -c psi4``.; Then, hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect Libint and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use ; .. Libint from conda witho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst:1906,release,release,1906,doc/sphinxman/source/libint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libint.rst,1,['release'],['release']
Deployability,"ub.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in pla",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29923,release,releases,29923,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['releases']
Deployability,"ub.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; .. * Run the ``install-generator.py`` in place. It will dump new files into ``data/installs/`` _subdirs_. Be sure to ``git add`` them.; .. * Installer page is now ready.; .. * Shift ""latest"" alias in frontmatter from whichever page is currently active to the new page. This makes sure ""Downloads"" on the navigation bar points to new page.; .. * Conscientiously, one should test; ..; .. - installer downloads in Mac and Linux. And actually installing them and ``psi4 --test`` them.; .. - that download button and ``curl`` downloading register on the download counters on vergil; ..; .. * Commit the new files, PR, and deploy psicode site; .. * Petition on Slack for testers. Generate download page for psicode.org; --------------------------------------. * Be in local clone of repository https://github.com/psi4/psicode-hugo-website .; * Copy and edit a new file akin to ``content/installs/v182.md``. Add it to the git index. - Note the edition string ``v182`` in frontmatter for this and future filenames.; - Don't postdate the date string in frontmatter or it won't render.; - Ultimately, make sure the ``aliases:\n - /installs/latest/`` lines are *added* to this new file; and *removed* from the previous latest file, but this can wait until the installer page has been tested. * Copy and edit a new file akin to ``data/installs/v182.yaml``. Add it to the git index. - Glance through the menu and notes content to make sure they're up-to-date. This file determines; the structure of the install page.; - Add or remove python versions and architectures if necessary.; - Every couple years, update the default python version in ``datakey: python``/``selected`` *and*; in ``optsHandler`` at the end.; - Always adjust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:29038,install,installs,29038,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installs']
Deployability,"ude:: autodir_options_c/globals__cubic_grid_overage.rst. Orbital Visualization with VMD; ==============================. Included in |PSIfour| is functionality to automatically render specified surfaces, including molecular orbitals,; densities, and basis functions, using VMD. The vmd_cube.py script takes the .cube files generated; in a calculation and generates images aligned with user-input specifications. The script is located; in :source:`psi4/share/psi4/scripts/vmd_cube.py`. Script Prerequisites; --------------------. 1. VMD must be installed, and it can be downloaded for free at (http://www.ks.uiuc.edu/Research/vmd/). Additionally,; the script needs to know where to find the VMD executable, and this is defined as :envvar:`VMDPATH`. VMDPATH must be defined as; an environment variable. 2. To generate images with multiple surfaces, ImageMagick must also be installed. ImageMagick is a free program which; can be installed using homebrew/pip or from http://www.imagemagick.org/script/binary-releases.php . 3. With ImageMagick installed, an environment variable called :envvar:`MONTAGE` needs to be created which points to the montage executable.; This executable can be found in the /bin/ sub-directory wherever ImageMagick was installed. .. envvar:: VMDPATH. Filesystem path to the VMD executable. .. envvar:: MONTAGE. Filesystem path to the Montage executable of ImageMagick. Running the Script; ------------------. 1. Run a |PSIfour| calculation, generating .cube files as detailed in the above documentation. 2. Add vmd_cube.py to your path. Call vmd_cube.py and pass the directory containing; the .cube files as an argument::; 	; 	python vmd_cube.py /path/to/cube/files/. By default the script will search for cube files in the directory in which it is called.; In addition to individual image files for each orbital, vmd_cube will also generate an image containing all surfaces in an array; (very useful for hand-picking orbital spaces). 3. As an example, take the cube files gener",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:7854,release,releases,7854,doc/sphinxman/source/cubeprop.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst,1,['release'],['releases']
Deployability,"ultiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; .. Extracting packages ...; .. [ COMPLETE ]|#########################",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:22620,install,installs,22620,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installs']
Deployability,"un ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available. ::. >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. .. _`faq:psidatadir`:. Why not to set :envvar:`PSIDATADIR`; -----------------------------------. :envvar:`PSIDATADIR` is an environment variable containing the location of the; text resource parts of the |PSIfour| codebase (*e.g.*, basis sets,; databases, EFP fragments). It is for developer use only. In |PSIfour| 1.1; and beyond, the program *always* knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in |PSIfour| 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory. At runtime. .. code-block:: bash. >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. .. _`cmake:cxx`:. How to configure C++ and C compilers for building Psi4; ------------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a C++ compiler is vital for building the code. * Downstream Dependencies |w---w| |PSIfour| |dr| C++ Compiler. **CMake Variables**. * :makevar:`CMAKE_CXX_COMPILER` |w---w| CMake variable to specify name or full path to C++ compiler.; * :makevar:`CMAKE_C_COMPILER` |w---w| CMake variable to specify name or full path to C compiler.; * :makevar:`CMAKE_CXX_F",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:34553,install,installed,34553,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installed']
Deployability,"un tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTAL",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63562,install,installation,63562,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,"und through any of:. #. prepending to :envvar:`PATH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file; #. activating the conda environment (p4env above) in shell, ``~/.bashrc``, or PBS ``cmd`` file; #. supplying full path to executable (shell or PBS ``cmd`` file). Similarly, the scratch directory (see :ref:`sec:Scratch`) must be specified through:. #. defining :envvar:`PSI_SCRATCH` in shell, ``~/.bashrc``, ``~/.tcshrc``, or PBS ``cmd`` file. .. Suitable values for these variables have been printed to screen during installation (see last codeblock in step 6). Useful Commands; ^^^^^^^^^^^^^^^. * (A) Initially install |PSIfour| stable release. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4; >>> conda install psi4 --channel psi4. * (B) Initially install |PSIfour| stable release with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4. * (C) Update to latest |PSIfour| stable release. .. code-block:: console. >>> conda update psi4 -c psi4. * (D) Initially install stable release into a conda environment ""p4env"" instead of ""root"". This creates a sandbox with |PSIfour| and python (loaded as dependency). .. code-block:: console. >>> conda create -y -n p4env psi4 -c psi4; >>> conda activate p4env. * (E) Install a particular |PSIfour| version. .. code-block:: console. >>> conda install psi4=1.4 -c psi4. * (F) Uninstall |PSIfour| from current environment. .. code-block:: console. >>> conda remove psi4. * (G) Initially install |PSIfour| nightly build. .. code-block:: console. # equivalent; >>> conda install psi4 -c psi4/label/dev; >>> conda install psi4 --channel psi4/label/dev. * (H) Initially install |PSIfour| nightly build with non-current python. .. code-block:: console. >>> conda install psi4 python=3.8 -c psi4/label/dev. * (I) Update to latest |PSIfour| nightly build. .. code-block:: console. >>> conda update psi4 -c psi4/label/dev. * (J) Initially install nightly build into a conda environment ""p4env"" inst",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:26593,update,update,26593,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['update'],['update']
Deployability,"unk and several; release branches. The branch you should use depends on the sort of ; work you plan for the codes:; \begin{enumerate}; \item For any piece of code already in the most recent release, bug; fixes (defined as anything that doesn't add functionality ---; including documentation updates) should be made {\em only} on the; most recent stable release branch.; \item The main trunk is reserved for development of new functionality.; This allows us to keep new, possibly unstable code away from public; access until the code is ready.; \item Code that you do not want to put into next major release of; \PSIfour\ should be put onto a separate branch off the main; trunk. You will be solely responsible for maintenance of the new; branch, so you should read the SVN manual before attempting this.; \end{enumerate}. \noindent Fig.~\ref{Fig:svn} provides a schematic of the SVN revision-control; structure and branch labeling. Two release branches are shown, the current; stable branch, named {\tt psi-3-4}, and a planned future release, to be named; {\tt psi-3-5}. The tags on the branches indicate release shapshots, where; bugs have been fixed and the code has been or will be exported for public; distribution. The dotted lines in the figure indicate merge points: just; prior to each public release, changes made to the code on the stable release; branch will be merged into the main trunk. \begin{figure}[h]; \begin{center}; \epsfig{file=svn/svn.eps,height=6.5cm}; \end{center}; \caption{\PSIfour\ SVN branch structure with examples of branch- and; release-tag labelling.}; \label{Fig:svn}; \end{figure}. \noindent A frequently encountered problem is what to do about bug fixes; that are necessary for uninterrupted code development of the code on the; main trunk. As Rule 1 of the above policy states, all bug fixes of the code; already in the recent stable release must go on the corresponding branch,; not on the main trunk. The next step depends on the severity of the bug:; \begin{enum",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:3039,release,release,3039,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,2,['release'],['release']
Deployability,"ur/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63783,install,installation,63783,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installation']
Deployability,"urn correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its dependencies (including python) into a sandbox unaffected by any other software installed in Ana/Miniconda. This is recommended for developers to avoid interference between multiple versions (including github/conda versions) or to test python versions, *etc.*. In practical terms, installing into a conda environment means you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works fo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:21221,install,install,21221,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"us bullet had details. To build |PSIfour| from source and use; .. gau2grid from conda without thinking, consult. * To remove a conda installation, ``conda remove gau2grid``. **Source**. * .. image:: https://img.shields.io/github/tag/dgasmith/gau2grid.svg?maxAge=2592000; :target: https://github.com/dgasmith/gau2grid/tree/master. * If using |PSIfour| built from source and you want gau2grid built from; from source also, let the build system fetch and build it and activate; dependent code. .. _`cmake:gau2grid`:. How to configure gau2gridfor building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, gau2grid is a library that provides essential; grid operations for DFT. * Downstream Dependencies |w---w| |PSIfour| |dr| gau2grid. * Upstream Dependencies |w---w| gau2grid |dr| None. **CMake Variables**. * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For gau2grid, set to an installation directory containing ``include/gau2grid/gau2grid.h``; * :makevar:`gau2grid_DIR` |w---w| CMake variable to specify where pre-built gau2grid can be found. Set to installation directory containing ``share/cmake/gau2grid/gau2gridConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force internal build of gau2grid instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_gau2grid` |w---w| CMake variable to force detecting pre-built gau2grid and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake. B. Link against pre-built. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/gau2grid/root. .. code-block:: bash. >>> cmake -Dgau2grid_DIR=/path/to/gau2grid/configdir. C. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DCMAKE_PREFIX_PATH=/path/to/unwanted/gau2grid/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_gau2grid=ON. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst:3544,install,installation,3544,doc/sphinxman/source/gau2grid.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/gau2grid.rst,2,['install'],['installation']
Deployability,"using |PSIfour| built from source and you want simint built from; from source also,; enable it as a feature with :makevar:`ENABLE_simint`,; and let the build system fetch and build it and activate dependent code. .. _`cmake:simint`:. How to configure simint for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, simint is a library that provides alternate; integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) simint. * Upstream Dependencies |w---w| simint |dr| None. **CMake Variables**. * :makevar:`ENABLE_simint` |w---w| CMake variable toggling whether |PSIfour| builds with simint; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing ``include/simint/simint.h``; * :makevar:`simint_DIR` |w---w| CMake variable to specify where pre-built simint can be found. Set to installation directory containing ``share/cmake/simint/simintConfig.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_simint` |w---w| CMake variable to force internal build of simint instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_simint` |w---w| CMake variable to force detecting pre-built simint and not falling back on internal build; * :makevar:`SIMINT_VECTOR` |w---w| CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is ``avx``, *not* detected, so ``sse`` may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_simint=ON. B. Build *without* simint. .. code-block:: bash. >>> cmake. C. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. .. code-block:: bash. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. D. Build bundled despite pre-built being detectable.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst:4271,install,installation,4271,doc/sphinxman/source/simint.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/simint.rst,1,['install'],['installation']
Deployability,"ust the ``datakey: branch``/``stable`` block.; - For releases, adjust the ``datakey: branch``/``previous`` and ``nightly`` blocks. * Enter the ``scripts/`` directory. If the previous release hasn't had a snapshot saved, copy; ``install-generator.py`` into a version-labeled file, and add it to the git index.; * Edit ``scripts/install-generator.py``. - Primarily, edit ``edition`` at the top.; - Also, edit other arrays (stuff above ``## Outputs``) or messages (logic below ``## Outputs``); that should change. * Run the ``install-generator.py`` in place. It will dump two new files, e.g.,; ``data/installs/cmd/{edition}.json`` and ``data/installs/dlbtn/{edition}.json``. Add these to the; index (no need to inspect them). * The installer page is now ready for inspection. Run ``hugo server --watch=false`` and view in; browser at http://localhost:1313/ . Click around the options to make sure the buttons and; instructions all look right. * Iterate on the ``data/installs/{edition}.yaml`` and the ``install-generator.py`` until correct.; It's fine to push to psicode.org to see it in place. But wait until it's final (and all the; packages and installers are ready) to shift ""latest"" alias in frontmatter from whichever page is; currently active to the new page, ``content/installs/{edition}.md``. This makes sure ""Downloads""; on the navigation bar points to the new page. * Commit the new files, PR, and deploy psicode site. .. Collect documentation snapshot (pre-Fall 2023); .. ----------------------------------------------; ..; .. * Documentation is built automatically by GHA from the latest psi4 master commit. It gets pushed to the psi4/psi4docs repository and thence served by netlify to a site independent of psicode.org. The netlify psicode.org site has a redirect so that psicode.org/psi4manual/master presents the psi4docs netlify content.; .. * GHA controller is :source:`.github/workflows/docs.yml`; .. * This setup works great for ""latest"" docs, but it won't build a nice copy on the t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:30870,install,install-generator,30870,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['install-generator']
Deployability,"ux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that contains the |PSIfour| package and several dependency packages. Make sure this shows up in your ``~/.condarc`` file. .. code-block:: bash. >>> conda config --add channels http://conda.anaconda.org/psi4; # check; >>> cat ~/.condarc; channels:; - http://conda.anaconda.org/psi4; - defaults. 6. Install |PSIfour|. You can install into the main conda environment so that whenever commands ``conda`` or (Ana/Miniconda's) ``python`` are available, then ``psi4`` is available, too. .. code-block:: bash. >>> conda install psi4; # check; >>> which psi4; /path/to/miniconda/bin/psi4. Or, you can install into a `conda environment <https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#>`_ that places |PSIfour| and its",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:20438,update,updates,20438,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['update'],['updates']
Deployability,"vdson_rtol.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_energy_conv.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_max_sweeps.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_noise_prefac.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_states.rst; .. include:: /autodir_options_c/dmrg__dmrg_unitary_write.rst. .. _`cmake:chemps2`:. How to configure CheMPS2 for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CheMPS2. * Upstream Dependencies |w---w| CheMPS2 |dr| BLAS/LAPACK, HDF5 |dr| zlib. **CMake Variables**. * :makevar:`ENABLE_CheMPS2` |w---w| CMake variable toggling whether Psi4 builds with CheMPS2; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:7032,install,installation,7032,doc/sphinxman/source/chemps2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst,1,['install'],['installation']
Deployability,"vergence of the cumulant and orbitals is achieved.; Convergence of the simultaneous algorithm is accelerated using the; DIIS extrapolation technique. TWOSTEP; In the two-step algorithm each macroiteration consists of two sets of; microiterations. In the first set, the density cumulant equations are solved; iteratively, while the orbitals are kept fixed. After the density cumulant is; converged, the second set of microiterations is performed for the; self-consistent update of the orbitals with the fixed density cumulant. Each; macroiteration is completed by performing the orbital transformation of the; integrals. As in the simultaneous algorithm, the DIIS; extrapolation is used to accelerate convergence. Two-step algorithm is; only available for the DC-06 and DC-12 methods. QC; In the quadratically-convergent algorithm, the; orbital and cumulant update equations are solved using the Newton-Raphson; method. Each macroiteration of the quadratically-convergent algorithm consists; of a single Newton-Raphson update followed by the orbital transformation; of the integrals. The solution of the Newton-Raphson equations is performed; iteratively using the preconditioned conjugate gradients method, where only the; product of the electronic Hessian with the step vector is computed for; efficiency. By default, the electronic Hessian is build for both the cumulant and orbital; updates and both updates are performed simultaneously. Setting the |dct__qc_type|; option to ``TWOSTEP`` will perform the Newton-Raphson update only for the orbitals,; while the equations for the cumulant will be solved using a standard Jacobi update.; If requested by the user (set |dct__qc_coupling| to TRUE), the electronic Hessian can include; matrix elements that couple the orbitals and the density cumulant.; The computation of these coupling elements increases; the cost of the macroiteration, but usually leads to faster convergence and is; recommended for open-shell systems.; It is important to note tha",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:10911,update,update,10911,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['update'],['update']
Deployability,"ware package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1078,install,installFile,1078,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installFile']
Deployability,"wed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24923,install,installation,24923,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['install'],"['install', 'installation']"
Deployability,"with other programs; rather than the main; Anaconda or Miniconda environment. Hence the creation of the environment; above, but the environment name (:samp:`{p4env}` above) can be; substituted. * The ``psi4-rt`` package can be added to the package list to get the; QC runtime add-ons; could say any combination of ``v2rdm_casscf snsmp2; resp`` etc. instead of ``psi4-rt``.; As of |PSIfour| v1.7, the ``psi4-rt`` package is being slowly retired; due to more optional dependencies being on conda-forge. Similar collections; of dependencies can be obtained from environment spec files like :source:`devtools/conda-envs` . * Grab a Miniconda through one of the below, selecting OS. >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh""; >>> curl -O ""https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Windows-x86_64.exe"". .. _`faq:updatepsi4`:. How to update a Psi4 binary; ^^^^^^^^^^^^^^^^^^^^^^^^^^^. A. Conda command to update an existing |PSIfour| conda installation to the; newest stable release (roughly annually). It's often a better idea to create; a new environment rather than updating the old one. .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4; >>> # Windows; >>> conda update psi4 -c psi4 -c conda-forge. # if psi4 channel in defaults (true for Psi4conda installers); >>> conda update psi4. B. Conda command to update an existing |PSIfour| conda installation to the; latest development head (roughly nightly). .. code-block:: bash. >>> # Linux/MacOS; >>> conda update psi4 -c psi4/label/dev; >>> # Windows; >>> conda update psi4 -c psi4/label/dev -c conda-forge. C. Conda command to install a very specific package, including version,; build string, and subchannel. The final `-c psi4` represents any; additional channels or subchannels needed to locate all dependencies. .. code-block:: bash. >>> conda install psi4=1.2a1.dev249+623ad6",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:8857,update,update,8857,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['update'],['update']
Deployability,"with write permissions and can connect to the internet *from* the computer, all is well.; ..; .. .. code-block:: bash; ..; .. # check; .. >>> which bzip2; .. /usr/bin/bzip2; .. >>> curl -O ""http://psicode.org/psi4manual/master/introduction.html""; .. >>> ls -1; .. introduction.html; ..; .. 2. Get Miniconda installer script. Either issue the command below or download from http://conda.pydata.org/miniconda.html by clicking on the appropriate link for your OS. If you already have or would prefer to use Anaconda rather than Miniconda, that's fine. Locate or install Anaconda, check that ``conda`` is in your path, and skip to step 4.; ..; .. .. code-block:: bash; ..; .. >>> curl -O ""http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh""; .. # check; .. >>> ls -1; .. Miniconda-latest-Linux-x86_64.sh; ..; .. 3. Install Miniconda. Execute the script and answer its questions, particularly your choice of installation location. You may need to replace the filename below with the correct filename for the OS/version of installer you downloaded. Execute with ``bash`` regardless of ``csh``/``bash`` shell. If you're a ``bash`` user, it's convenient to agree to its offer to prepend ``conda`` commands to your :envvar:`PATH` in ``~/.bashrc``. If you're a ``csh``/``tcsh`` user, it's convenient to do the same by hand to your ``~/.tcshrc``: ``setenv PATH /path/to/miniconda/bin:${PATH}``. Further directions assume that the ``conda`` command is in your path; you may have to log out and log back in for ``which conda`` to return correctly.; ..; .. .. code-block:: bash; ..; .. >>> bash Miniconda-latest-Linux-x86_64.sh; .. # check; .. >>> which conda; .. /path/to/miniconda/bin/conda; ..; .. 4. Update conda. This updates the package manager itself.; ..; .. .. code-block:: bash; ..; .. >>> conda update conda. .. _`sec:slowpsi4`:. Detailed Installation of |PSIfour|; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. 5. Subscribe to |PSIfour|. Subscribe to our channel at https://anaconda.org/psi4 that",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:19746,install,installer,19746,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installer']
Deployability,"without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:conda`:. Conda Binary Distribution; =========================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. warning:: As of v1.2rc1, new (conda build 3; updated compilers); conda packages are available for Linux but not Mac).; Psi4conda installers are not ready for either platform. |PSIfour| is available as a pre-compiled binary for Mac and Linux (and; Windows, through the Ubuntu shell) and native Windows architectures; through `Anaconda (formerly Continuum Analytics; <https://www.anaconda.com/products/individual>`_, the company that produces; `Anaconda Python <http://docs.continuum.io/anaconda/index.html>`_ (a; full-fledged scientific python environment with package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_) and, more particularly, `Miniconda; <https://docs.conda.io/en/latest/miniconda.html>`_ (a lightweight Python; distribution with same package manager `conda; <https://conda.io/projects/conda/en/latest/user-guide/getting-started.html>`_). Some nice features for us:. * cross-platform. * no root, administrator, or sudo access required. * built with high-performance math libraries. * lightweight software stack (<100 MB w/o |PSIfour|; ~1 GB including |PSIfour|, numpy, and MKL). * upda",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:1583,install,installers,1583,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['installers']
Deployability,"xes will be merged; onto the main trunk. If the bug fix doesn't warrant an immediate; new patch release, then you can incorporate the bug fix into your; local copy of the main trunk code manually or using SVN merge; features. This will allow you to continue development until next; patch release is created and the bug fix is incorporated into the; main trunk code in the repository. However you should {\em never}; merge such changes into the main trunk yourself.; \item If the bug fix is not critical (e.g. a documentation; update/fix), then you should wait until next patch release when it; will be merged into the main trunk automatically.; \end{enumerate}. \noindent; The following are some of the most commonly used SVN commands for checking; out and updating working copies of the \PSIfour\ source code. \noindent; $\bullet$ To checkout a working copy of the head of the main trunk:. {\tt svn co https://sirius.chem.vt.edu/svn/psi4/trunk/ psi4} . \noindent; $\bullet$ To check out a working copy of the head of a specific release branch,; e.g., the branch labelled {\tt psi-4-0}:. {\tt svn co https://sirius.chem.vt.edu/svn/PSI4/branches/psi-4-0 psi4}. \noindent Note that subsequent {\tt svn update} commands in this; working copy will provide updates only on the chosen branch. Note; also that after you have checked out a fresh working copy of the code; you must run the {\tt autoconf} command to generate a {\tt configure}; script for building the code. (See the installation manual for; configuration, compilation, and testing instructions.). \noindent For each of the above commands, the working copy of your; code will be placed in the directory \file{psi4}, regardless of your; choice of branch. In this manual, we will refer to this directory; from now on as {\tt \$PSI4}. Subsequent SVN commands are usually run; within this top-level directory. \noindent; $\bullet$ To update your current working copy to include the latest revisions:. {\tt svn update}. \noindent; Notes: (a) This wi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:5447,release,release,5447,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['release'],['release']
Deployability,"xt`` files; .. * Once everything's working on Linux, repeat on Mac; .. * At this point, ready to fine-tune builds of ""Psi4 stack"". Assemble postrelease changes; ----------------------------. * Collect PRs with ""backport"" label, and request other backport suggestions through slack.; * Be on the maintenance branch (e.g., ``1.8.x``). ``git fetch upstream`` or any other remotes you're; going to be cherry-picking from.; * Cherry-pick backport PRs and commits (``git cherry-pick sha``), apply other changes manually, not; forgetting CI files or samples.; * Possibly apply other changes manually, including:. - CI file tweaks like LLVM version or dependency constraint.; - samples files from a docs build.; - :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. * Tag it (`Tag postrelease`_ for details). This is needed to compute a version on a maintenance; branch to even run. Until the release is published on GH (final step of; `Publish GitHub postrelease`_), it's ok to revise a tag (force push to maintenance branch). - Add or increment patch number in ``psi4/metadata.py``; leave the ""z""s. Commit file.; - Tag with ``git tag -a v1.8.2 -m ""v1.8.2""``, then push ``git push --atomic upstream 1.8.x v1.8.2``. * Test core |PSIfour| thoroughly locally (ecosystem will get tested by c-f) by running; ``pytest ../tests/ -n auto`` (psithon and psiapi tests). Possibly you may have to step back for; dependency versions from what master needs.; * Start `Tweak Conda for postrelease`_ PR at conda-forge. This will thoroughly test the ecosystem.; * If more changes are needed, ``git tag -d v1.8.2`` to delete the tag, then make more commits,; retag, push, and repeat. Try to finalize the postrelease tag within a session or a day, so; tentative tags don't linger.; * Start the draft parts of `Publish GitHub postrelease`_ from the backported PRs assembled here. .. Tweak Conda for postrelease (pre-Spring 2023); .. -----------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:9821,release,release,9821,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['release']
Deployability,"y dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5788,install,install,5788,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['install']
Deployability,"y instance. Preferably, [Goto Fork-from-GitHub](#forkpsi4public); otherwise [Goto Fork-from-GitHub-Private](#forkpsi4private); .. comment ; .. comment * Just give me a repository to commit to directly. Preferably, [Goto Clone-from-GitHub](#clonepsi4public); otherwise [Goto Clone-from-GitHub-Private](#clonepsi4private). .. _`faq:binary`:. Binary Installer; ----------------. * **Get Initially**. Just go to http://www.psicode.org/downloads.html, select ""Installer"",; ""Stable Release"", and your choice of architecture and Python version,; and follow the instructions there. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4. * **Contribute Back**. Not applicable as not under git control. .. _`faq:binarypackage`:. Conda Binary Package; --------------------. * **Get Initially**. The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to :ref:`directions <faq:psi4pkg>`. Locally, install into; a conda environment as below. .. code-block:: bash. >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. .. code-block:: bash. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4 -c conda-forge. * **Contribute Back**. Not applicable as not under git control. .. _`faq:clonepsi4public`:. Clone from GitHub Repository; ----------------------------. * **Get Initially**. The |PSIfour| repository at https://github.com/psi4/psi4 works like; `every other GitHub repo; <https://help.github.com/articles/which-remote-url-should-i-",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:5372,install,installed,5372,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['install'],['installed']
Deployability,"y're called Psi4Conda. They can be built anywhere (Mac can be built on Linux) and get served from vergil (cdsgroup webserver).; ..; .. * Need a conda env with ``constructor`` and ``cookiecutter``. This env presently accessed through ``conda activate cookie``.; .. * Enter ""constructor-cutter-unified"" in the psi4meta repo. There's a good README there, https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md; .. * Edit ``cookiecutter/cookiecutter.json`` for control; ..; .. - Edit which python versions, if necessary; .. - Edit ``release`` field; .. - Edit ``hash`` field. This is the 7-char hash that's on every psi4 conda pkg as part of version; .. - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; .. - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; .. - Leave this file set to a ""rc"" with Git, as that has more details; ..; .. * For (post)releases (not prereleases), copy cookiecutter.json to cookiecutter.json-vXXX; .. * Edit ``cookiecutter/{{.../construct.yaml`` for templating. This is rarely needed; .. * If it's been a while or you need the space, clear out ``~/.conda/constructor``, where the downloaded packages are cached; .. * Note that installers get written to ``build/`` and this gets regenerated each time. Clear out between runs.; .. * ``python run.py``; .. * [Outdated] Watch out for ``py_`` in buildstring as this means a noarch package has been pulled. It must be eliminated. Constructors can't handle ""noarch"" packages and will fail at runtime. If see a ""noarch"" package, must find the recipe and rebuild for all OS & Python combinations. Then run constructor again.; .. * [Replacement] After adding a post_install to reposition the noarch packages, they are safe to include.; .. * If fetching times out, may have to run run.py several times. Clear out build/ in between. It's the fetching that takes a long time, not constucting; .. * In",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:23009,release,releases,23009,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['release'],['releases']
Deployability,"y, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run *and* develop in |PSIfour|. * In keeping with the open-source philosophy, I don't mind my code being; as public as Psi4 itself during the development process. |w---w|; :ref:`Goto Fork-from-GitHub <faq:forkpsi4public>`. * I want to develop *using* |PSIfour| infrastructure and libraries, not; *on* them; I think a plugin might do. * I've got a |PSIfour| compilat",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:2800,install,installer,2800,doc/sphinxman/source/build_obtaining.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst,1,['install'],['installer']
Deployability,"y-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://suppo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10033,install,installed,10033,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['install'],['installed']
Deployability,"y. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; |dct__diis_start_convergence| option to the value greater than; :math:`10^{-3}` by one or two orders of magnitude (*e.g.* :math:`10^{-2}` or; :math:`10^{-1}`). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations. * If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm. * When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set the |dct__qc_coupling| option to FALSE for efficiency; reasons (set by default). * For the ODC computations, the user has a choice of performing the computation of the guess orbitals and cumulants; using the corresponding DC method (set |dct__odc_guess| to TRUE). This can often lead to; significant computational savings, since the orbital update step in the DC methods is cheap.; Convergence of the guess orbitals and cumulants can be controlled using the; |dct__guess_r_convergence| option. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:18974,update,update,18974,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['update'],['update']
Deployability,"you can turn |PSIfours| availability on/off by switching conda environments without turning on/off the whole Ana/Miniconda installation. Below, |PSIfour| is installed into an environment called ``p4env``. Then the environment is activated, removing the main Ana/Miniconda ``bin`` and adding ``envs/p4env/bin`` to :envvar:`PATH`. The ``conda activate`` command (conda >=4.4; December 2017) works in all shells, but if you're using old ``source activate`` that only works for ``bash``; adjust as needed for ``csh``/``tcsh``. .. code-block:: bash. >>> conda create -n p4env psi4; >>> conda activate p4env; # check; >>> which psi4; /path/to/miniconda/envs/p4env/bin/psi4. .. The output for either of the installation commands above looks like the following. It checks what packages are needed, gets your approval for downloading them, fetches and installs them, prints out some useful information, and runs a |PSIfour| test case to check that all's well.; ..; .. .. code-block:: bash; ..; .. >>> conda install psi4; .. Using Anaconda Cloud api site https://api.anaconda.org; .. Fetching package metadata: ......; .. Solving package specifications: .........; ..; .. Package plan for installation in environment /theoryfs2/ds/cdsgroup/miniconda/envs/tpsi4:; ..; .. The following packages will be downloaded:; ..; .. package | build; .. ---------------------------|-----------------; .. psi4-0.4.322 | py27_g84b3aa1 44.4 MB http://conda.anaconda.org/psi4/linux-64/; ..; .. The following NEW packages will be INSTALLED:; ..; .. psi4: 0.4.322-py27_g84b3aa1 http://conda.anaconda.org/psi4/linux-64/; ..; .. Proceed ([y]/n)? y; ..; .. Fetching packages ...; .. psi4-0.4.322-p 100% |####################################################################################| Time: 0:00:08 5.77 MB/s; .. Extracting packages ...; .. [ COMPLETE ]|#######################################################################################################| 100%; .. Linking packages ...; ..; ..; .. Thank you for installing p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst:22775,install,install,22775,doc/sphinxman/source/conda.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/conda.rst,1,['install'],['install']
Deployability,"you want to test one Python version on all; architectures before the whole build matrix (currently 16 builds). After editing this (and; opening the PR), you'll have to issue a comment ``@conda-forge-admin, please rerender`` for the; matrix slimming to take effect.; - Possibly: remove any old patches that are now in the main codebase.; - Possibly: add in or remove any dependency or ecosystem packages.; - Possibly: for any relevant addition, make sure ``-D CMAKE_INSIST_FIND_PACKAGE_<project>=ON`` or; ``-D ENABLE_<project>=ON`` is set in ``build.sh`` and ``bld.bat``.; - Possibly: add or release version constraints or architecture constraints (e.g., ``[not win]``) on packages. * Submit the PR and rerender (cmd above). Monitor the CI.; * When all CI lanes are passing *and* the tag is final on the maintenance branch, rerender (may be; no-op) and merge the PR.; * After all the packages are built on main and show up at https://anaconda.org/conda-forge/psi4/files; with a couple downloads, this means they're been mirrored and are generally installable. Announce; on slack general channel. Do final pass before release tag; --------------------------------. * Check that :source:`external/` repos and commits have been updated to match conda recipes sources. Also check versions with ``conda_build_config.yaml``; * Check :source:`doc/sphinxman/source/introduction.rst` for any compiler and Python minimum requirements to edit. Tag (pre)release; ----------------. * Thorough version bump directions at master http://psicode.org/psi4manual/master/manage_git.html#how-to-bump-a-version; * Below is tl;dr. ::. # be on clean master up-to-date with upstream in both commits and tags; # * mind which version strings get ""v"" and which don't; # * if not fork, replace ""upstream"" with ""origin"". >>> vi psi4/metadata.py; >>> git diff; diff --git a/psi4/metadata.py b/psi4/metadata.py; ...; -__version__ = '1.3rc1'; -__version_long = '1.3rc1+5a7522a'; -__version_upcoming_annotated_v_tag = '1.3rc2'; +__vers",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst:13195,install,installable,13195,doc/sphinxman/source/manage_release.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/manage_release.rst,1,['install'],['installable']
Deployability,"{enumerate}; (Note that \$prefix and \$objdir to the installation and compilation; directories defined in the \PSIfour\ installation instructions.); Your original version of the code remains under \file{great\_code.bak},; but should be no longer necessary if the above steps work. Note that it is; necessary to re-run \file{configure} explicitly, instead of just running; \file{config.status}, because the latter contains no information about; the new code. \subsection{Updating checked out code}. If the code in the main repository has been altered, other users' working; copies will of course not automatically be updated. In general, it is; only necessary to execute the following steps in order to completely update; your working copy of the code:. \begin{enumerate}; \item {\tt cd \$PSI4}; \item {\tt svn update}; \end{enumerate}. This will examine each entry in your working copy and compare it to; the most recent version in the main repository. When the file in the; main repository is more recent, your version of the code will be; updated. If you have made changes to your version, but the version in; the main repository has not changed, the altered code will be; identified to you with an ``M''. If you have made changes to your; version of the code, and one or more newer versions have been updated; in the main repository, SVN will examine the two versions and attempt; to merge them -- this process often reveals conflicts, however, and is; sometimes unsuccessful. You will be notified of any conflicts that; arise (labelled with a ``C'') and you must resolve them manually. If new directories have been added to the repository, the update above; will automatically add them to your working copy. However, you may; need to re-run {\tt autoconf} and configure ({\tt; \$objdir/config.status --recheck} is a convenient command) to be; able to build the new code. \subsection{Removing code from the repository}; If alterations of libraries or binaries under Psi involves the deletion of ; s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst:14232,update,updated,14232,doc/sphinxman/source/attic/proggit.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/proggit.rst,1,['update'],['updated']
Deployability,"}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; -----------------------------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22778,release,release,22778,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,2,['release'],['release']
Deployability,"~~~~~~~~~~~~~~~~~~. These parameters can be altered to balance the cost and accuracy; of the implict description of the solvation. |ddx__ddx_solute_radial_points| and |ddx__ddx_solute_spherical_points| influence; the accuracy of the numerical grid used to obtain the representation; of the electric potential / field of the solute density,; since a standard DFT integration grid is used to obtain these quantities.; In contrast to the integration of DFT quantities much lower accuracy; is required, such that for this step considerably smaller grids are employed.; If extremely high accuracy reference solutions are required, the DDX; DFT integration parameters might need to be increased, but this is rarely needed. |ddx__ddx_lmax| and |ddx__ddx_n_lebedev| determine the accuracy of the computations; on the boundary of the spheres around each atom performed by DDX. |ddx__ddx_lmax|; determines the largest angular momentum of the spherical harmonics basis used; to discretise quantities on the atomic spheres and |ddx__ddx_n_lebedev| determines the; number of points of the Lebedev angular grid used for integration on the spheres.; |ddx__ddx_n_lebedev| should be chosen higher than |ddx__ddx_solute_spherical_points|; and the defaults are usually good. .. include:: autodir_options_c/ddx__ddx_solute_radial_points.rst; .. include:: autodir_options_c/ddx__ddx_solute_spherical_points.rst; .. include:: autodir_options_c/ddx__ddx_lmax.rst; .. include:: autodir_options_c/ddx__ddx_n_lebedev.rst. Iterative solver parameters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. These parameters determine how the forward and adjoint linear systems; of the solvation model are solved. Usually these parameters do not need; to be changed. Occasionally |ddx__ddx_solvation_convergence| might need to be adapted,; e.g. if only a very crude or a highly accurate SCF solution is targeted. .. include:: autodir_options_c/ddx__ddx_diis_max_vecs.rst; .. include:: autodir_options_c/ddx__ddx_maxiter.rst; .. include:: autodir_options_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:9563,integrat,integration,9563,doc/sphinxman/source/ddx.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst,1,['integrat'],['integration']
Energy Efficiency," # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. Notes on Options; ================. .. comment warning:: Python naming practices of file_that_includes_function.function_name(); are followed below. In psi4 input files, it is only necessary to call the; function name alone. That is, use ``energy('scf')``, not ``driver.energy('scf')``. .. note:: The Python options referred to in the :ref:`sec:psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst:1260,energy,energy,1260,doc/sphinxman/source/notes_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst,1,['energy'],['energy']
Energy Efficiency, ${CMAKE_CURRENT_SOURCE_DIR}/add_ref_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/add_ref_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_A.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_A_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_A_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_A_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_X.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_Z.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_Z_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_Z_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_Z_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/build_ex_tdensity.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cache.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ccdensity.cc; #${CMAKE_CURRENT_SOURCE_DIR}/classify.cc; ${CMAKE_CURRENT_SOURCE_DIR}/deanti.cc; ${CMAKE_CURRENT_SOURCE_DIR}/deanti_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/deanti_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/deanti_UHF.cc; #${CMAKE_CURRENT_SOURCE_DIR}/distribute.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dump_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dump_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dump_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_oscillator_strength.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_rotational_strength.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_sort_td_rohf.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_sort_td_uhf.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_td_cleanup.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_td_print.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_td_setup.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_tdensity.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ex_tdensity_intermediates.cc; #${CMAKE_CURRENT_SOURCE_DIR}/file_build.cc; ${CMAKE_CURRENT_SOURCE_DIR}/fold.cc; ${CMAKE_CURRENT_SOURCE_DIR}/fold_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/fold_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/fold_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_frozen.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_rho_params.cc; ${CMAKE_CURRENT_SOURCE_DI,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccdensity/CMakeLists.txt:1911,energy,energy,1911,psi4/src/psi4/cc/ccdensity/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccdensity/CMakeLists.txt,1,['energy'],['energy']
Energy Efficiency," ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:58768,energy,energy,58768,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'uhf', 'fcae': 'f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:64134,energy,energy,64134,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:76987,energy,energy,76987,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'uhf', 'fcae': 'f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:82353,energy,energy,82353,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 's",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:131147,energy,energy,131147,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 's",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:134921,energy,energy,134921,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," ''}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'uhf', 'f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:170825,energy,energy,170825,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'r",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:131324,energy,energy,131324,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:133422,energy,energy,133422,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'r",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:135098,energy,energy,135098,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_typ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:167806,energy,energy,167806,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rohf'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:479103,energy,energy,479103,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:443742,energy,energy,443742,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'aaaa-', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:57430,energy,energy,57430,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:166100,energy,energy,166100,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'bccd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'aaaa-'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:52469,energy,energy,52469,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'bccd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'uhf', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:54883,energy,energy,54883,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'cc2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell gradients for cc2 by ccenergy'}; {'module': 'psi4-ccenergy', 'driver': 'gradient', 'method': 'cc2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'gradient', 'method': 'cc2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:75852,energy,energy,75852,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy',",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:136874,energy,energy,136874,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'cor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:238254,energy,energy,238254,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'cor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:241316,energy,energy,241316,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:238440,energy,energy,238440,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:241502,energy,energy,241502,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'conv', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:32451,energy,energy,32451,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'st",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:209489,energy,energy,209489,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_ty",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:416711,energy,energy,416711,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_ty",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:423678,energy,energy,423678,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd',",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:364797,energy,energy,364797,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:366798,energy,energy,366798,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc',",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:30223,energy,energy,30223,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'b3lyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note': ''}; {'module': 'psi4', 'driver': 'gradient', 'method': 'b3lyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:32814,energy,energy,32814,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no hessians for mp2'}; {'module': 'psi4-occ', 'driver': 'hessian', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': ''}; {'module': 'psi4-occ', 'driver': 'hessian', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc conv gradients for mp2 by occ'}; {'module': 'psi4-occ', 'driver': 'hessian', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no hessians for mp2'}; {'module': 'psi4-occ', 'driver': 'hessian', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'r",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:272323,energy,energy,272323,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'uhf', 'fc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:340443,energy,energy,340443,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:442785,energy,energy,442785,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note': ''}; {'module': 'psi4', 'driver': 'gradient', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd gradients by occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:449828,energy,energy,449828,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'svwn', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:498814,energy,energy,498814,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:182076,energy,energy,182076,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'olccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:338069,energy,energy,338069,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:478148,energy,energy,478148,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:232340,energy,energy,232340,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:235745,energy,energy,235745,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:201868,energy,energy,201868,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:204578,energy,energy,204578,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'cor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:208759,energy,energy,208759,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note': ''}; {'module': 'psi4', 'driver': 'gradient', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd gradients by occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:211284,energy,energy,211284,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'st",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:299434,energy,energy,299434,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:415981,energy,energy,415981,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:422948,energy,energy,422948,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'cor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:362024,energy,energy,362024,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'cor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:369743,energy,energy,369743,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:245637,energy,energy,245637,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note': ''}; {'module': 'psi4', 'driver': 'gradient', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd gradients for mp2 by occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd gradients for mp2 by occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'mp2', 'reference': 'rhf', 'fcae':",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:248682,energy,energy,248682,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:339352,energy,energy,339352,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:441694,energy,energy,441694,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:448737,energy,energy,448737,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv ccd by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'sta",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:98522,energy,energy,98522,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'pbe', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'pbe', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'pbe', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'pbe', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'pbe', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'pbe', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'pbe', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'pbe', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'pbe', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'pbe', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'pbe', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_ty",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:467825,energy,energy,467825,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method':",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:10217,energy,energy,10217,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'dr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:11579,energy,energy,11579,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method':",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:15475,energy,energy,15475,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'dr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:16837,energy,energy,16837,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:24745,energy,energy,24745,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no ope",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:227884,energy,energy,227884,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'energy', 'method': 'cepa(1)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'n",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:158424,energy,energy,158424,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'energy', 'method': 'cepa(3)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'n",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:163760,energy,energy,163760,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'energy', 'method': 'cisd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no uhf cisd by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no uhf cisd by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'fci', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'fci', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'fci', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'fci', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'fci', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'fci', 'reference': 'roh",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:172775,energy,energy,172775,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:205707,energy,energy,205707,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fca",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:329113,energy,energy,329113,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'pbe', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'pbe', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'pbe', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'pbe', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'pbe', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'pbe', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'pbe', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'pbe', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'pbe', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'pbe', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:466358,energy,energy,466358,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5',",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:279056,energy,energy,279056,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'dri",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:329492,energy,energy,329492,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note':",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:332314,energy,energy,332314,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp2.5', 'refe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:390775,energy,energy,390775,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp2.5', 'refe",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:397818,energy,energy,397818,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:161184,energy,energy,161184,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'method': 'ccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv ccd by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv ccd by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:87878,energy,energy,87878,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver':",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:329677,energy,energy,329677,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:331067,energy,energy,331067,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'mol2']:; filen = mol + '.xyz'; p4mol = Molecule.init_with_xyz(filen) # create molecule from file above; fragmentedmol = auto_fragments(molecule=p4mol) # fragment with BFS algorithm; activate(fragmentedmol) # activate returned molecule (for sapt). e = energy('sapt0') # run SAPT that requires 2 fragments; compare_values(sapt[mol], e, 5, '%s sapt ok' % mol); compare_values(nre[mol], p4mol.nuclear_repulsion_energy(), 4, '%s ok' % mol); clean() # clean scratch between loop calcs. * The essential element, mass and coordinate information of the molecule is accessible ::. molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyne.symbol(iat), # element symbol; eneyne.label(iat), # input element label; eneyne.charge(iat), # element charge; eneyne.x(iat), # x-coordinate; eneyne.y(iat), # y-coordinate; eneyne.z(iat), # z-coordinate; eneyne.mass(iat), # mass; ). # 6.0 C C_ENE 6.0000 -0.031900 -1.218981 -3.948079 12.000000; # 6.0 C C_ENE 6.0000 -0.031900 1.304098 -3.948079 12.000000; # 1.0 H H_ENE 1.0000 1.713491 -2.286062 -3.950962 2.014000; # 1.0 H H_ENE 1.0000 -1.777290 -2.286062 -3.950962 1.007825; # 1.0 H H_ENE 1.0000 -1.777290 2.371180 -3.950962 1.007825; # 0.0 H H_ENE 0.0000 1.713491 2.371180 -3.950962 1.007825; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 5.548101 12.000000; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 3.266705 12.000000; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 1.252468 1.007825; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 7.557685 1.007825. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:25362,charge,charge,25362,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,2,['charge'],['charge']
Energy Efficiency," 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:273406,energy,energy,273406,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:275941,energy,energy,275941,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:279776,energy,energy,279776,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:282311,energy,energy,282311,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'st",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:108574,energy,energy,108574,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'note': ''}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'gradient', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'gradient', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'gradient', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:40838,energy,energy,40838,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:421507,energy,energy,421507,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:499402,energy,energy,499402,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:417837,energy,energy,417837,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'st",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:108751,energy,energy,108751,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:327089,energy,energy,327089,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk',",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:341756,energy,energy,341756,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:32084,energy,energy,32084,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv ccd by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv ccd by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:88234,energy,energy,88234,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:444106,energy,energy,444106,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:101115,energy,energy,101115,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:104829,energy,energy,104829,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:2068,energy,energy,2068,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:4678,energy,energy,4678,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'svwn', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'cor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:499204,energy,energy,499204,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rohf",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:362570,energy,energy,362570,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'omp2', 'reference': 'rh",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:370289,energy,energy,370289,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'd",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:329869,energy,energy,329869,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:331259,energy,energy,331259,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:487861,energy,energy,487861,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:60311,energy,energy,60311,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'fc', 'sdsc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:78530,energy,energy,78530,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:133053,energy,energy,133053,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:131891,energy,energy,131891,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd(",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:135665,energy,energy,135665,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'qcisd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type':",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:487683,energy,energy,487683,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:205922,energy,energy,205922,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:486668,energy,energy,486668,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:481898,energy,energy,481898,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc conv gradients for mp3 by occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'mp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:323482,energy,energy,323482,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'remp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'remp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'remp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'remp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'remp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'remp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'remp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:491730,energy,energy,491730,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'mo",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:394663,energy,energy,394663,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module':",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:394843,energy,energy,394843,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'remp2',",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:486884,energy,energy,486884,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'm",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:396522,energy,energy,396522,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'sc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:237882,energy,energy,237882,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'sc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:240944,energy,energy,240944,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'sc', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:240770,energy,energy,240770,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'ene",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:333390,energy,energy,333390,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'olccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'olccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:334035,energy,energy,334035,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:239879,energy,energy,239879,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:242941,energy,energy,242941,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:300324,energy,energy,300324,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_typ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:178850,energy,energy,178850,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'rhf', 'fcae': 'fc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:362379,energy,energy,362379,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:370098,energy,energy,370098,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:183146,energy,energy,183146,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:14923,energy,energy,14923,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv open-shell a-ccsd(t) by ccenergy'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:9448,energy,energy,9448,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:392272,energy,energy,392272,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'omp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:389300,energy,energy,389300,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 's",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:203495,energy,energy,203495,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:237708,energy,energy,237708,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv open-shell a-ccsd(t) by ccenergy'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:8824,energy,energy,8824,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:13436,energy,energy,13436,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell e",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:18694,energy,energy,18694,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:167409,energy,energy,167409,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:168916,energy,energy,168916,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'st",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:202783,energy,energy,202783,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc conv gradients for lccd by occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc conv gradients for lccd by occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'lccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccsd', 'reference': '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:224939,energy,energy,224939,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," (as opposed to |cfour__cfour_spherical|). * Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ecc since that's best practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc since *hidden* default overwritten by keyword ::. set cfour_cc_program vcc; energy('c4-ccsd'). * Specifying certain keywords that are nominally applicable for pure-\; |PSIfour| modules directs them to fulfil analogous roles; in the Cfour program (*e.g.*, |scf__maxiter| is used to set; |cfour__cfour_scf_maxcyc|). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that |PSIfours| defaults don't; get imposed on Cfour. Also, in the case where a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:38735,energy,energy,38735,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['energy'],['energy']
Energy Efficiency," (h) -> ROOT n (i) ROTATORY STRENGTH (VEL); TD-fctl ROOT 0 (h) -> ROOT n (i) ROTATORY STRENGTH (VEL). The velocity-gauge oscillator strength of the transition from root *m* to root *n*,; which are in irreps *h* and *i*, respectively..; DFT functional labeled if canonical. .. psivar:: ADC ROOT 0 -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION; CCname ROOT m -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION; TD-fctl ROOT 0 -> ROOT n ROTATORY STRENGTH (VEL) - h TRANSITION. The velocity-gauge oscillator strength of the transition from root *m* to root *n*,; and the transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: AQCC DIPOLE. Dipole array [e a0] for the averaged quadratic coupled-cluster level of theory, (3,). .. psivar:: AQCC QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged quadratic coupled-cluster level of theory, (3, 3). .. psivar:: AQCC TOTAL ENERGY; AQCC CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged quadratic coupled-cluster level of theory.; .. psivar:: BRUECKNER CONVERGED. Value 1 (0) when the Brueckner orbitals have (have not) converged. .. psivar:: CBS NUMBER; NBODY NUMBER; FINDIF NUMBER. Number of tasks [] the named procedure performs. These are immediate; tasks, so if procedures are nested, the total number of tasks is; the product. .. psivar:: CBS TOTAL ENERGY; CBS CORRELATION ENERGY; CBS REFERENCE ENERGY. The total electronic energy [E_h] and its breakdown into reference total; energy [E_h] and correlation correction components [E_h] for the compound; method requested through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:9092,energy,energy,9092,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,2,['energy'],['energy']
Energy Efficiency," +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | x | normal mode, normalized un-mass-weighted | a0 | ndarray(ndof, ndof) float |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | degeneracy | degree of degeneracy | | ndarray(ndof) int |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | TRV | translation/rotation/vibration | | ndarray(ndof) str 'TR' or 'V' or '-' for partial |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | gamma | irreducible representation | | ndarray(ndof) str irrep or None if unclassifiable |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | mu | reduced mass | u | ndarray(ndof) float (+/+) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | k | force constant | mDyne/A | ndarray(ndof) float (+/-) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | DQ0 | RMS deviation v=0 | a0 u^1/2 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | Qtp0 | Turning point v=0 | a0 u^1/2 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | Xtp0 | Turning point v=0 | a0 | ndarray(ndof) float (+/0) |; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | theta_vib | char temp | K | ndarray(n",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst:4791,reduce,reduced,4791,doc/sphinxman/source/freq.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/freq.rst,1,['reduce'],['reduced']
Energy Efficiency," -6.368443 -0.968607 3.273516; nocom; unit angstrom; }; ; # Create a python dictionary and convert to string for pass through to optking; MTdimer = """"""{; ""Natoms per frag"": [12, 16],; ""A Frag"": 1,; ""A Ref Atoms"": [[1, 3, 4, 6, 8], [8], [11]],; ""A Label"": ""methylthiophene"",; ""B Frag"": 2,; ""B Ref Atoms"": [[13, 14, 15, 16, 17, 18], [13], [15]],; ""B Label"": ""tyrosine"",; ""Frozen"": [""theta_A"", ""theta_B"", ""tau"", ""phi_A"", ""phi_B""],; }""""""; ; set {; basis 6-31+G ; frag_mode MULTI; interfrag_coords $MTdimer ; }. optimize(""mp2""). Dealing with problematic optimizations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Although optking is continuously improved with robustness in mind, some; attempted optimizations will inevitably fail to converge to the desired minima.; For difficult cases, the following suggestions are made. * As for any optimizer, computing the Hessian and limiting the step size will; successfully converge a higher percentage of cases. The default settings have; been chosen because they perform efficiently for common, representative test sets.; More restrictive, cautious steps are sometimes necessary. * |optking__dynamic_level| allows optking to change the method of optimization; toward algorithms that, while often less efficient, may help to converge difficult; cases. If this is initially set to 1, then optking, as poor steps are detected,; will increase the dynamic level through several forms of more robust and cautious algorithms.; The changes will reduce the trust radius, allow backward steps (partial line; searching), add cartesian coordinates, switch to cartesian coordinates, and take; steepest-descent steps. * The developers have found the |optking__opt_coordinates| set to ""BOTH"" which; includes both the redundant internal coordinate set, as well as cartesian coordinates,; works well for systems with long 'arms' or floppy portions of a molecule poorly; described by local internals. * Optking does support the specification of ghost atoms. Certain internal coordina",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst:18294,efficient,efficiently,18294,doc/sphinxman/source/optking.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/optking.rst,1,['efficient'],['efficiently']
Energy Efficiency," .. comment activate(mB); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2p4'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling psi4 Disp class)'); .. comment set dft_dispersion_parameters [0.75, 20.0]; .. comment energy('b3lyp-d2gr'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (calling dftd3 -old)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3zero'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -zero)'); .. comment set dft_dispersion_parameters [1.000, 0.7875, 0.4289, 4.4407]; .. comment energy('b3lyp-d3bj'); .. comment compare_values(ref_pbe_d3bj[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (calling dftd3 -bj)'); .. comment ; .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d2'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D2 (alias)'); .. comment set dft_dispersion_parameters [1.0, 0.722, 1.217, 14.0]; .. comment energy('b3lyp-d3'); .. comment compare_values(ref_pbe_d3zero[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D3 (alias)'); .. comment set dft_dispersion_parameters [0.75]; .. comment energy('b3lyp-d'); .. comment compare_values(ref_pbe_d2[2], get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene -D (alias)'); .. comment activate(mA); .. comment set dft_dispersion_parameters [1.0]; .. comment energy('wb97x-d'); .. comment compare_values(-0.000834247063, get_variable('DISPERSION CORRECTION ENERGY'), 7, 'Ethene wb97x-d (chg)'); .. comment ; .. comment print_stdout(' non-default -D correction from Py-side'); .. comment eneyne.update_geometry(); .. comment eneyne.run_dftd3('b3lyp', 'd2gr', {'s6': 0.75}); .. comment compare_values(ref_pbe_d2[0], get_variable('DISPERSION CO",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:29901,energy,energy,29901,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['energy'],['energy']
Energy Efficiency," 2.05367e-01 2.58009e-02; @DF-UHF iter 2: -149.62349901753706 -2.85358e-02 6.68980e-03 DIIS; @DF-UHF iter 3: -149.62639942687878 -2.90041e-03 2.19285e-03 DIIS; @DF-UHF iter 4: -149.62689561367233 -4.96187e-04 5.99497e-04 DIIS; @DF-UHF iter 5: -149.62694151275420 -4.58991e-05 1.27338e-04 DIIS; @DF-UHF iter 6: -149.62694337910040 -1.86635e-06 1.65616e-05 DIIS; @DF-UHF iter 7: -149.62694340915198 -3.00516e-08 2.68990e-06 DIIS; @DF-UHF iter 8: -149.62694340999315 -8.41169e-10 2.61249e-07 DIIS. DF guess converged.; ... @UHF iter 9: -149.62730705472407 -3.63645e-04 8.63697e-05 DIIS; @UHF iter 10: -149.62730737348096 -3.18757e-07 1.50223e-05 DIIS; @UHF iter 11: -149.62730738537113 -1.18902e-08 3.80466e-06 DIIS; @UHF iter 12: -149.62730738624032 -8.69193e-10 7.06634e-07 DIIS. The first set of iterations are from the DF portion of the computation, the; second set uses the exact (but much slower) Direct algorithm. Within the DF portion; of the computation, the zeroth-iteration uses a non-idempotent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay's DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals. After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. A",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:3958,energy,energy,3958,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['energy'],['energy']
Energy Efficiency," ::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used. ::. energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No PSI Variables for properties: *e.g.*, :psivar:`SCF DIPOLE`. - No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. .. rubric:: Gradients and Arrays. In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the ``GRD`` file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by |PSIfour|; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal ori",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:23596,energy,energy,23596,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['energy'],['energy']
Energy Efficiency," :math:`V` and in :math:`W_A+W_B`; the; subscript, :math:`resp`, indicates that orbital relaxation effects are included. .. math:: E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}; :label: SAPT2. .. math:: E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}; :label: SAPT2p. .. math:: E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}; :label: SAPT2pparen3. .. math:: E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}; :label: SAPT2p3. For SAPT(DFT), the SAPT expansion is truncated at the same level of SAPT0, but the zeroth-order Hamiltonian is chosen to be :math:`K_A+K_B`, the monomer Kohn-Sham operators, instead of the Fock operators. The dispersion term needs to be computed with orbital relaxation for the result to be reasonable, and this is possible by computing dispersion energy through coupled frequency-dependent density susceptibility (FDDS). The exchange-dispersion term is estimated by scaling the uncoupled exchange-dispersion energy. . .. math:: E_{SAPT(DFT)} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; E_{exch-ind,resp}^{(20)} + E_{disp,resp}^{(20)} + E_{exch-disp,resp}^{(20)}(est.) + \delta_{HF}^{(2)}; :label: SAPTDFT; .. math:: E_{disp,resp}^{(20)} = -\frac{1}{2\pi}\int_0^\infty d\omega \int d\mathbf{r}_A d\mathbf{r}'_A d\mathbf{r}_B d\mathbf{r}'_B \frac{1}{\left|\mathbf{r}_A-\mathbf{r}_B\right|}\frac{1}{\left|\mathbf{r}'_A-\mathbf{r}'_B\right|}\chi^A_{coup}\left(\mathbf{r}_A,\mathbf{r}'_A|i\omega\right)\chi^B_{coup}\left(\mathbf{r}_B,\mathbf{r}'_B|i\omega\right). .. math:: \chi_{coup}\left(\mathbf{r},\mathbf{r}'|\omega\right) = \chi_0\left(\mathbf{r},\mathbf{r}'|\omega\right) + \int d\omega d\mathbf{r}_1 d\mathbf{r}_2 \chi_0\left(\mathbf{r},\mathbf{r}_1|\omega\right)\left[\frac{1}{r_{12}} + f_{x",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:7077,energy,energy,7077,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['energy'],['energy']
Energy Efficiency," ; LIBDPD --- The Direct-Product Decomposition Library. Programmer's Manual for LIBDPD: A Library for Including; Spatial Symmetry in Quantum Chemistry Programs. T. Daniel Crawford ; Version: June 18, 2001 ; crawdad@vt.edu. I. Introduction. In many-body theories such as coupled cluster or MBPT, one finds many; complicated algebraic expressions involving products of multi-index; quantities such as one- and two-electron integrals, cluster; amplitudes, density matrices, etc. Efficient evaluation of; these products can require a great deal of effort, particularly if one; wishes to use Abelian point-group symmetry to reduce the number of; terms that must be computed and stored. The direct-product; decomposition library, LIBDPD, is designed to assist the programmer; with this problem by providing (1) a symmetry-blocked, matrix-based; storage scheme for all two- and four-index quantities, (2) a set of; functions for evaluating various types of products among them, and (3); a set of utilities for sorting them to different index orderings. The; library is currently used in the set of coupled cluster and; perturbation theory energy and analytic gradient codes under; development in the PSI package of quantum chemical programs. This; manual describes the design of the library and provides a set of; examples for its use. The header file dpd.h provides proper declarations for all; structures and functions used in the library. II. Fundamental Symmetry Concepts. In the current version of libdpd, I assume that all multi-index; quantities are totally symmetric, i.e., the direct product of; the irreducible representations (irreps) associated with the component; orbital indices corresponds to the totally symmetric irrep of the; given point group. (This assumption is in the process of being; removed, however.) Furthermore, each orbital subset of interest; (e.g., occupied or virtual orbitals) must be grouped by; symmetry. This allows one to organize the given quantity in a; symmetry-blocke",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html:619,reduce,reduce,619,doc/sphinxman/source/attic/libdpd.html,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/libdpd.html,1,['reduce'],['reduce']
Energy Efficiency," API routines in ``<omp.h>`` and; .. ``<mkl.h>``, and runs all applicable code with 4 threads. .. rubric:: (2) The -n Command Line Flag. To change the number of threads at runtime, the :option:`psi4 -n` flag may be used. An; example is:. .. code-block:: bash. psi4 -i input.dat -o output.dat -n 4. which will run on four threads. Note that is is not available for PsiAPI mode of operation. .. rubric:: (3) Setting Thread Numbers in an Input. For more explicit control, the Process::environment class in |PSIfour| can; override the number of threads set by environment variables. This functionality; is accessed via the :py:func:`~psi4.core.set_num_threads` function, which controls; both MKL and OpenMP thread numbers. The number of threads may be changed; multiple times in a |PSIfour| input file. An example input for this feature is::. # A bit small-ish, but you get the idea; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; }. # Run from 1 to 4 threads, for instance, to record timings; for nthread in range(1, 5):; set_num_threads(nthread); energy(""scf/cc-pvdz""). In PsiAPI mode of operation, this syntax, ``psi4.set_num_threads(nthread)``, is; the primary way to control threading. .. rubric:: (4) Method-Specific Control. Even more control is possible in certain circumstances. For instance, the; threaded generation of AO density-fitted integrals involves a memory requirement; proportional to the number of threads. This requirement may exceed the total; memory of a small-memory node if all threads are involved in the generation of; these integrals. For general DF algorithms, the user may specify::. set MODULE_NAME df_ints_num_threads n. to explicitly control the number of threads used for integral formation. Setting; this variable to 0 (the default) uses the number of threads specified by the; :py:func:`~psi4.core.set_num_threads` Psithon method or the default environmental variables. .. index:: PBS queueing system, threading; .. _`sec:PBS`:. PBS job file; ============. To run a",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:12459,energy,energy,12459,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['energy'],['energy']
Energy Efficiency," Comput. Mol. Sci.*, (2020).; (DOI: `10.1002/wcms.1462 <https://doi.org/10.1002/wcms.1462>`_, Preprint https://adc-connect.org/q/publications. Density Matrix Renormalization Group (DMRG); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; * ""CheMPS2: a free open-source spin-adapted implementation of the density; matrix renormalization group for ab initio quantum chemistry,""; S. Wouters, W. Poelmans, P. W. Ayers and D. Van Neck,; *Comput. Phys. Commun.* **185** (6), 1501-1514 (2014).; (doi: `10.1016/j.cpc.2014.01.019 <https://doi.org/10.1016/j.cpc.2014.01.019>`_). * ""The density matrix renormalization group for ab initio quantum chemistry,""; S. Wouters and D. Van Neck, *Eur. Phys. J. D* **68** (9), 272 (2014).; (doi: `10.1140/epjd/e2014-50500-1 <https://doi.org/10.1140/epjd/e2014-50500-1>`_). Scalar Relativistic Corrections; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. General theory for the exact two-component approach (X2C). * ""Analytic energy gradients for the spin-free exact two-component theory; using an exact block diagonalization for the one-electron Dirac; Hamiltonian,""; L. Cheng and J. Gauss, *J. Chem. Phys.* **135**, 084114 (2011).; (doi: `10.1063/1.3624397 <https://doi.org/10.1063/1.3624397>`_). Implementation within Psi4. * ""Predicting Near Edge X-ray Absorption Spectra with the Spin-Free; Exact-Two-Component Hamiltonian and Orthogonality Constrained Density; Functional Theory,""; P. Verma, W. D. Derricotte and F. A. Evangelista,; *J. Chem. Theory Comput.* (2015).; (doi: `10.1021/acs.jctc.5b00817 <https://doi.org/10.1021/acs.jctc.5b00817>`_). .. index:: architectures; .. index:: compilers. Supported Systems; =================. Architectures; The majority of |PSIfour| was developed on Mac and Linux machines; in; principle, it should work on any Unix system. The latest version of the; |PSIfour| program package may be obtained at `psicode.org <http://psicode.org>`_.; The package is available as a binary (:ref:`Installing from Binary; <sec:conda>`) for Linux, macOS (both Intel ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:25984,energy,energy,25984,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['energy'],['energy']
Energy Efficiency," ENERGY`; by 0.25, atop the SCS-OMP2 energy, with any singles carried along. .. psivar:: SOS-MP2 TOTAL ENERGY; SOS-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.3 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP2 TOTAL ENERGY; SOS-OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP2-like method formed by reweighting :psivar:`OMP2 DOUBLES ENERGY`; by 1.2 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: SOS-OMP3 TOTAL ENERGY; SOS-OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the OMP3-like method formed by reweighting the difference between; :psivar:`OMP3 DOUBLES ENERGY` and :psivar:`OMP2 DOUBLES ENERGY`; by 0.25, atop the SOS-OMP2; energy using non-canonical weighting, with any singles carried along. .. psivar:: SOS-PI-MP2 TOTAL ENERGY; SOS-PI-MP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2-like method formed by reweighting :psivar:`MP2 DOUBLES ENERGY`; by 1.4 opposite-spin and 0 same-spin contributions, with; any singles carried along. .. psivar:: TD-fctl ROOT 0 -> ROOT n ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from the ground state to root *m*.; DFT functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (IN h) -> ROOT n (IN i) ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [e a0] in velocity gauge, for the transition; from the ground state, which is of irrep *h*, to root *n* within irrep *i*.; DFT functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) ELECTRIC TRANSITION DIPOLE MOMENT (VEL). The electric transition dipole moment [",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:62473,energy,energy,62473,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['energy'],['energy']
Energy Efficiency," FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:proc_py`:. Adding Methods to Driver; ========================. ``proc.py``; -----------. Methods that are computable by only one module should be added to the ``procedures`` dictionary in; :source:`psi4/driver/procrouting/proc_table.py`; that associates method names with functions; to run them located in :source:`psi4/driver/procrouting/proc.py`. The function should start with a declaration, as below. ``methodname`` is; never seen by users, so it's good to be specific to method or module.; The function must always take as arguments ``(name, **kwargs)``. ::. # energy method; def run_methodname(name, **kwargs):. # gradient method; def run_methodname_gradient(name, **kwargs):. If the function needs to test the identity of ``name`` several times, it; can be convenient to predefine the lowercase version of the variable. The; case of all other py-side options (in kwargs) has already been handled by; :py:func:`~psi4.driver.energy()`, etc. in driver.py and need not be repeated here. ::. # include if convenient; lowername = name.lower(). # never include; kwargs = kwargs_lower(kwargs). The function often needs to set options for the; c-side modules it calls. In order that the state of the options set by the; user remains when control is returned to the user, an; :py:class:`~psi4.driver.p4util.OptionsState` object is set up. See; :ref:`sec:handlingOptions_py` for details. *All* options set by the; function need to be included here, and *only* options set by the function; should be included. Most options should be associated with a particular; module, but a few (see below) ar",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst:1636,energy,energy,1636,doc/sphinxman/source/proc_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/proc_py.rst,1,['energy'],['energy']
Energy Efficiency," GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. Notes on Options; ================. .. comment warning:: Python naming practices of file_that_includes_function.function_name(); are followed below. In psi4 input files, it is only necessary to call the; function name alone. That is, use ``energy('scf')``, not ``driver.energy('scf')``. .. note:: The Python options referred to in the :ref:`sec:psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energy``, ``none``, or ``0`` for 0th derivative, ``gradient``, ``first``, or ``1`` for 1st derivative, and ``hessian``, ``second``, or ``2``",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst:1447,energy,energy,1447,doc/sphinxman/source/notes_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst,1,['energy'],['energy']
Energy Efficiency," H 1 0.9; }; ; set basis cc-pvdz; set reference rhf; energy('scf') # on H2; ; clean(). molecule h {; H; }; ; set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H\ :sub:`2`, while the second is for H atom. The last molecule to be; specified is the ""active"" molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first. ::. molecule h2 {; H; H 1 0.9; }; ; molecule h {; H; }; ; activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2; ; clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. :ref:`sec:jobControl` provides more details about the job control; and calculation keywords used in the above examples. .. index:: ; single: Ghost Atoms; single: molecule; ghost; .. _`sec:ghosts`:. Ghost Atoms; ===========. While many common computations, particularly SAPT and counterpoise corrections, can; be greatly simplified using the notation described in :ref:`sec:fragments`,; manual specification of ghost atoms is sometimes required. Either ::. molecule he2 {; He; Gh(He) 1 2.0; }. or ::. molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer with the second atom ghosted, *i.e.*, possessing; basis functions but no electrons or nuclear charge. See :srcsample:`dfmp2-1`; and :srcsample:`ghosts` for a demonstration of both mechanisms for specifying; ghost atoms. .. index:: ; single: Isotopes; single: molecule; isotope; .. _`sec:isotope`:. Isotopic Substitution; =====================. .. caution:: Use of isotopic substitution in |PSIfour| is not wel",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:7629,energy,energy,7629,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['energy'],['energy']
Energy Efficiency," Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; cbs(); see: complete_basis_set(); cbs(); single: basis set; delta correction. .. _`sec:cbs()`:. Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the fun",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:1804,energy,energy,1804,doc/sphinxman/source/cbs.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst,1,['energy'],['energy']
Energy Efficiency," Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; relativistic. .. _`sec:relativistic`:. Scalar relativistic Hamiltonians; ================================. .. codeauthor:: Prakash Verma and Francesco A. Evangelista; .. sectionauthor:: Prakash Verma, Wallace D. Derricotte, and Francesco A. Evangelista. The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; |PSIfour| implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian :math:`H_{\rm X2C}`:. .. math:: H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}. that is a sum of a kinetic energy (:math:`T_{\rm X2C}`) and potential energy; (:math:`V_{\rm X2C}`) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114]_.; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass--Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos' ANO basis sets. .. note:: See also :ref:`sec:DKH` for another relativistic Hamiltonian. .. _`sec:ScalarRelativistic`:. A First Example; ^^^^^^^^^^^^^^^. The following is a simple input that will perform a Hartree--Fock calculation; using the X2C Hamiltonian. ::. molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result::. @RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total E",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst:1685,energy,energy,1685,doc/sphinxman/source/relativistic.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst,2,['energy'],['energy']
Energy Efficiency, OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2 level of theory. .. psivar:: OMP2.5 TOTAL ENERGY; OMP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP2.5 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP2.5 level of theory. .. psivar:: OMP3 TOTAL ENERGY; OMP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP3 level of theory. .. psivar:: OMP3 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized MP3 level of theory. .. psivar:: OREMP2 TOTAL ENERGY; OREMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized retaining-the-excitation-degree |MollerPlesset|; hybrid perturbation theory level. .. psivar:: OREMP2 REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized retaining-the-excitation-degree; |MollerPlesset| hybrid perturbation theory level. .. psivar:: ONE-ELECTRON ENERGY. The one-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{1e^-}` in Eq. :eq:`SCFterms`. .. psivar:: PCM POLARIZATION ENERGY. The energy contribution [E_h] from the polarizable continuum model for solvation. .. psivar:: DD SOLVATION ENERGY. The energy contribution [Eh] from continuum solvation models based on a; domain-decomposition ansatz. .. psivar:: PE ENERGY. The ene,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:47511,energy,energy,47511,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['energy'],['energy']
Energy Efficiency," PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: ; pair: cbs(); theory. .. _`eq:cbs`:. .. math:: E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}. Here, :math:`\mathcal{F}` is an energy or energy extrapolation scheme, and the following also hold. .. math:: \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right). .. math:: \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right). .. math:: \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right). .. math:: \delta_{\textbf{delt",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs_eqn.rst:1668,energy,energy,1668,doc/sphinxman/source/cbs_eqn.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs_eqn.rst,2,['energy'],['energy']
Energy Efficiency," Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; cbs(); see: complete_basis_set(); cbs(); single: basis set; delta correction. .. _`sec:cbs()`:. Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:1836,energy,energy,1836,doc/sphinxman/source/cbs.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst,1,['energy'],['energy']
Energy Efficiency," Python options referred to in the :ref:`sec:psithonFunc` section below; are placed as arguments to a Python; function (like ``energy()``), not in ``set`` blocks or commands.; .. comment and indexed in :ref:`apdx:options_py`. .. note:: All |PSIfour| keyword names and values are insensitive to case, both; those that are placed in ``set`` blocks and as Python function arguments.; The one exception is documented for the *subset* option in the :py:func:`~psi4.driver.wrapper_database.database`; function, where case structure must match the database file. .. _`op_py_bool`:. .. _`op_py_boolean`:. .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_py_dertype`:. .. note:: The derivative level type for :py:func:`~psi4.driver.optimize` and :py:func:`~psi4.driver.frequency` functions can be specified by ``energy``, ``none``, or ``0`` for 0th derivative, ``gradient``, ``first``, or ``1`` for 1st derivative, and ``hessian``, ``second``, or ``2`` for 2nd derivative. For finite difference, as opposed to analytic, derivatives, the :term:`POINTS <POINTS (FINDIF)>` option can be increased to ``5`` for greater accuracy at increased cost. .. _`op_py_function`:. .. note:: Function option for the Psithon function called by the current function;; the default is usually :py:func:`~psi4.driver.energy`. See Sec. :ref:`sec:intercalls`; for a fuller description. Note that the value of the keyword is a Python object; and so is not wrapped in quotes like a string. .. _`op_py_molecule`:. .. note:: The molecule to be acted upon by the current function; the default is the; ""active"" molecule, which is the nearest preceeding molecule declared in a; ``molecule mymol {...}`` block or in an ``activate(mymol)`` statement. Note; that the value of this keyword (``mymol`` in the example) is a Python object; and so is not wrapped in quotes like a string. Technically, this is ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst:2262,energy,energy,2262,doc/sphinxman/source/notes_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_py.rst,1,['energy'],['energy']
Energy Efficiency," SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psiv",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:51646,energy,energy,51646,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['energy'],['energy']
Energy Efficiency," SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electr",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:52376,energy,energy,52376,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['energy'],['energy']
Energy Efficiency," SAPT2+3DMP2 DISP ENERGY; SAPT2+3DMP2 ELST ENERGY; SAPT2+3DMP2 EXCH ENERGY; SAPT2+3DMP2 IND ENERGY; SAPT2+(CCD)DMP2 DISP ENERGY; SAPT2+(CCD)DMP2 ELST ENERGY; SAPT2+(CCD)DMP2 EXCH ENERGY; SAPT2+(CCD)DMP2 IND ENERGY; SAPT2+(3)(CCD)DMP2 DISP ENERGY; SAPT2+(3)(CCD)DMP2 ELST ENERGY; SAPT2+(3)(CCD)DMP2 EXCH ENERGY; SAPT2+(3)(CCD)DMP2 IND ENERGY; SAPT2+3(CCD)DMP2 DISP ENERGY; SAPT2+3(CCD)DMP2 ELST ENERGY; SAPT2+3(CCD)DMP2 EXCH ENERGY; SAPT2+3(CCD)DMP2 IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory that incorporates MP2 induction correction.; The sum of these four components yields the :samp:`{SAPT Level} TOTAL ENERGY`. .. psivar:: SAPT2+DMP2 TOTAL ENERGY; SAPT2+(3)DMP2 TOTAL ENERGY; SAPT2+3DMP2 TOTAL ENERGY; SAPT2+(CCD)DMP2 TOTAL ENERGY; SAPT2+(3)(CCD)DMP2 TOTAL ENERGY; SAPT2+3(CCD)DMP2 TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory that incorporates MP2 induction correction. .. psivar:: SCF ITERATIONS; ADC ITERATIONS; CCSD ITERATIONS; OPTIMIZATION ITERATIONS. Number of iterations [] in the named iterative method or optimization procedure. .. psivar:: SCF DIPOLE. Dipole array [e a0] for the SCF stage, (3,). .. psivar:: SCF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the SCF stage, (3, 3). .. psivar:: SCF TOTAL ENERGY. The total electronic energy [E_h] of the SCF stage of the calculation.; The :samp:`{method} CORRELATION ENERGY` variables from subsequent stages of a; calculation are often the corresponding :samp:`{method} TOTAL ENERGY`; variables less this quantity. Constructed from Eq. :eq:`SCFterms`,; where this quantity is :math:`E_{\text{SCF}}`. .. math::; :nowrap:; :label: SCFterms. \begin{align*}; E_{\text{SCF}} & = E_{NN} + E_{1e^-} + E_{2e^-} + E_{xc} + E_{\text{-D}} \\; & = E_{\text{FCTL/HF}} + E_{\text{-D}}; \end{align*}. Unless the method includes a dispersion correction, thi",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:57297,energy,energy,57297,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['energy'],['energy']
Energy Efficiency," TOTAL ENERGY'); rows.append((R, A)); table.append([escf, escsmp2, edfmp2]); ; import pandas as pd; df = pd.DataFrame(table, columns = [""E(SCF)"", ""E(SCS)"", ""E(DFMP2)""], index=rows); print(df). # E(SCF) E(SCS) E(DFMP2); # (0.9, 100) -76.020680 -76.217006 -76.221189; # (0.9, 102) -76.021305 -76.217439 -76.221605; # (1.0, 100) -76.021264 -76.224987 -76.228727; # (1.0, 102) -76.021460 -76.224946 -76.228668; # (1.1, 100) -75.990195 -76.201891 -76.205087; # (1.1, 102) -75.990085 -76.201498 -76.204676. .. _`sec:wrappers`:. Python Wrappers; ===============. The Python foundations of the |PSIfour| driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the |PSIfour| suite. . As seen in the neon dimer example from the :ref:`tutorial <sec:tutorial>` section,; the :py:func:`~psi4.driver.driver_nbody.nbody` wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example, ::. energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules. |PSIfour| also provides the :py:func:`~psi4.driver.cbs` wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,::. # all equivalent. energy('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree--Fock energy in the; largest basis (cc-pVTZ). :py:func:`~psi4.driver.cbs` can; be configured behind-the-scenes with explicit arguments, as in the; first example, or the convenience syntax of the equivalent second; example can be used. Another very useful and powerful feature of |PSIfour| is the ability; to compute re",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst:15517,energy,energy,15517,doc/sphinxman/source/psithoninput.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithoninput.rst,1,['energy'],['energy']
Energy Efficiency," The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY HF. The FI-SAPT Hartree--Fock interaction energy [E_h] implemented for F/I-SAPT. .. psivar:: SAPT ELST12,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT EXCH11(S^2) ENERGY; SAPT EXCH12(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT2. .. psivar:: SAPT IND22 ENERGY; SAPT EXCH-IND22 ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT2. .. .. psivar:: SAPT HF TOTAL ENERGY; .. .. psivar:: SAPT CT ENERGY. .. psivar:: SAPT DISP21 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP22(SDQ) ENERGY; SAPT DISP22(T) ENERGY; SAPT EST.DISP22(T) ENERGY. Dispersion-classified MBPT-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT DISP2(CCD) ENERGY; SAPT DISP22(S)(CCD) ENERGY; SAPT DISP22(T)(CCD) ENERGY; SAPT EST.DISP22(T)(CCD) ENERGY. Dispersion-classified coupled-cluster-based SAPT term energy [E_h] implemented for SAPT2+. .. psivar:: SAPT ELST13,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT2+(3). .. psivar:: SAPT IND30,R ENERGY; SAPT IND-DISP30 ENERGY; SAPT EXCH-IND30,R ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+3. .. psivar:: SAPT EXCH-IND30(S^INF) ENERGY; SAPT EXCH-IND30,R(S^INF) ENERGY. A induction-classified SAPT term energy [E_h] implemented for SAPT2+",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:52744,energy,energy,52744,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['energy'],['energy']
Energy Efficiency," The total electronic energy [E_h] and its breakdown into reference total; energy [E_h] and correlation correction components [E_h] for the compound; method requested through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (h) TOTAL ENERGY; TD-fctl ROOT n (h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n*, which is of irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n TOTAL ENERGY - h TRANSITION; TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. The total electronic energy [E_h] for the requested theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n* within irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n (h) CORRELATION ENERGY. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n*, which is of irrep *h* (*n* starts at 0). .. psivar:: CCname ROOT n CORRELATION ENERGY - h TRANSITION. The correlation energy [E_h] for the requested coupled cluster level of theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n DIPOLE. Dipole array [e a0] for the requested coupled cluster level of theory and root *n* (*n* starts at 0), (3,). .. psivar:: CCname ROOT ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:10541,energy,energy,10541,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['energy'],['energy']
Energy Efficiency," Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ecc since that's best practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc since *hidden* default overwritten by keyword ::. set cfour_cc_program vcc; energy('c4-ccsd'). * Specifying certain keywords that are nominally applicable for pure-\; |PSIfour| modules directs them to fulfil analogous roles; in the Cfour program (*e.g.*, |scf__maxiter| is used to set; |cfour__cfour_scf_maxcyc|). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that |PSIfours| defaults don't; get imposed on Cfour. Also, in the case where a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF conv crit since that's Cfour's default; for |cfour__cfour_scf_conv| ::. energy('c4-scf'). * uses :math:`10^{-6}` SCF con",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:38868,energy,energy,38868,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['energy'],['energy']
Energy Efficiency," [#f2] [Grimme:2006:1787]_; .. [#f3] [Grimme:2010:154104]_; .. [#f4] [Grimme:2011:1456]_; .. [#f5] [Smith:2016:2197]_; .. [#f6] [Hujo:2011:3866]_; .. [#f7] [Chai:2010:6615]_; .. [#f8] [Pernal:2009:263201]_; .. [#f9] [Podeszwa:2010:550]_. .. [#f10] Keyword not used for user-defined functionals where the ``dft_dict[""dispersion""][""params""]``; is easily editable for this purpose. See :ref:`sec:dftdictbuilder`. .. [#f11] [Caldeweyher:2019:154122]_. A few practical examples:. * DFT-D2 single point with default parameters (``dftd3`` not called) ::. energy('bp86-d'). * DFT-D3BJ optimization with default parameters ::. optimize('pbe-d3bj'). * DFT-D2 optimization with custom s6 parameter ::. set dft_dispersion_parameters [1.20]; optimize('b3lyp-d2'). * DFT-D3ZERO single point (b3lyp) with custom s8 parameter (reset all four values) ::. set dft_dispersion_parameters [1.0, 2.0, 1.261, 14.0]; energy('b3lyp-d3'). * DFT-D2 single point with ``dftd3`` instead of |PSIfours| libdisp ::. energy('pbe-d2', engine='dftd3'). If only dispersion corrections (rather than total energies) are of; interest, the dispersion programs can be run independently of the scf; through the python function :py:func:`~qcdb.Molecule.run_dftd3` or :py:func:`~qcdb.Molecule.run_dftd4`. (These functions; call QCEngine, which is the same |PSIfour| + ``dftd3``/``dftd4`` interface that is called during an scf job.); This ""D-only"" route is much faster than running a DFT-D energy.; This route is NOT available for ``s-dftd3``. File an issue if a definite need arises. Note that in a DFT+D energy or gradient calculation, user-specified; dispersion parameters override any information provided about the; functional. The same holds true for a ``dftd3`` ""D-only"" calculation. But; in a ``dftd4`` ""D-only"" calculation, functional information overrides; any user-specified dispersion parameters. * Some set-up::. molecule nene {; Ne; Ne 1 2.0; }; ; nene.update_geometry(). * The same four dispersion corrections/gradients as the se",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst:23626,energy,energy,23626,doc/sphinxman/source/dftd3.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dftd3.rst,1,['energy'],['energy']
Energy Efficiency," [<integer>]] [--fontsize [<integer>]]; [--interactive] [--gzip] [--national_scheme]; [--silver_scheme] [--bright_scheme] [--electron_scheme]; [<cubefile dir>]. vmd_cube is a script to render cube files with vmd. To generate cube files; with Psi4 add the command cubeprop() at the end of your input file. positional arguments:; <cubefile dir> The directory containing the cube files. optional arguments:; -h, --help show this help message and exit; --color1 [<integer>] the color ID of surface 1 (integer, default = 3); --color2 [<integer>] the color ID of surface 2 (integer, default = 23); --iso [<isovalue>] the isosurface value (float, default = 0.05); --rx [<angle>] the x-axis rotation angle (float, default = 30.0); --ry [<angle>] the y-axis rotation angle (float, default = 40.0); --rz [<angle>] the z-axis rotation angle (float, default = 15.0); --tx [<length>] the x-axis translation (float, default = 0.0); --ty [<length>] the y-axis translation (float, default = 0.0); --tz [<length>] the z-axis translation (float, default = 0.0); --opacity [<opacity>]; opacity of the isosurface (float, default = 1.0); --scale [<factor>] the scaling factor (float, default = 1.0); --no-montage call montage to combine images. (string, default =; false); --no-labels do not add labels to images. (string, default = false); --imagesize [<integer>]; the size of each image (integer, default = 250); --imagew [<integer>] the width of images (integer, default = 250); --imageh [<integer>] the height of images (integer, default = 250); --fontsize [<integer>]; the font size (integer, default = 20); --interactive run in interactive mode (default = false); --gzip gzip cube files (default = false); --national_scheme use a red/blue color scheme. (string, default = false); --silver_scheme use a gray/white color scheme. (string, default =; false); --bright_scheme use a soft yellow/blue color scheme. (string, default; = false); --electron_scheme use a purple/green color scheme. (string, default =; false). ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst:11635,green,green,11635,doc/sphinxman/source/cubeprop.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cubeprop.rst,1,['green'],['green']
Energy Efficiency," [e] by the method of Mulliken, (nat,). .. psivar:: NAUX (SCF); NAUX (CC). Convenience storage of number of functions [] in the auxiliary basis; set for named stage of the calculation. .. psivar:: NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY. The total energy [E_h] of a component of the requested N-Body energy.; The first parenthetical list over *i*, *j*, ..., *k* enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over *a*, *b*,; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from each of fragments 1, 2, 3, & 4 included in; the basis set. Therefore, the basis functions from fragments 3 and 4; are included as ghost functions within the energy computation. .. psivar:: NUCLEAR REPULSION ENERGY. The nuclear repulsion energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{NN}` in Eq. :eq:`SCFterms`. .. math:: E_{NN} = \sum_{i, j<i}^{N_{atom}}\frac{Z_i Z_j}{|\mathbf{R}_i - \mathbf{R}_j|}; :label: ENN. .. psivar:: OCEPA(0) TOTAL ENERGY; OCEPA(0) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized CEPA(0) level of theory. .. psivar:: OLCCD TOTAL ENERGY; OLCCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized linearized coupled cluster doubles level of theory. .. psivar:: OLCCD REFERENCE CORRECTION ENERGY. The difference [E_h] between the single-determinant energy of the final and; initial orbitals for the orbital-optimized linearized coupled cluster; doubles level of theory. .. psivar:: OMP2 TOTAL ENERGY; OMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the orbital-optimized MP2 level of theory. .. psivar:: OMP2",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:45677,energy,energy,45677,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,2,['energy'],['energy']
Energy Efficiency," ``'triplet'``.; To compute both without making a spin distinction, select ``'any'``.; The latter is default for unrestricted references. The special |adc__kind| value ``'spin_flip'`` selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for ``CVS-ADC(n)`` methods,; see table :ref:`table:adcsummary`. **Using the core-valence separation.**; For tackling core-valence excitations using the ``CVS-ADC(n)``; methods, the keyword argument |adc__num_core_orbitals|; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of ``2`` indicates, for example,; that the two lowest-energy :math:`\alpha` and the two; lowest-energy :math:`\beta` orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space. *Example:* Consider furane, :math:`C_4H_4O`. In order to tackle; the oxygen 1s edge, *i.e* simulate a O 1s XAS spectrum, one may; just set |adc__num_core_orbitals| to ``1``. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the |adc__num_core_orbitals| value needs; to be set to ``5``, such that both the O 1s and all four C 1s orbitals; are part of the core space. **Other keywords and examples.**; Apart from the mentioned keywords, the following are common:. .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__cutoff_amps_print.rst. The full list is provided in appendix :ref:`apdx:adc_psivar`; and many more sample input files can be found in the adc and adcc; subfolders of :source:`samples`.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:9058,energy,energy,9058,doc/sphinxman/source/adc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst,1,['energy'],['energy']
Energy Efficiency," ``n`` etc.; The full list understood by ddx can be obtained using ::. import pyddx; print(pyddx.data.solvent_epsilon.keys()). For when an LPB solvent model is selected (|ddx__ddx_model| is ``LPB``); additionally the **Debye-Hückel parameter** |ddx__ddx_solvent_kappa| needs to be provided; (in units of inverse Bohr or inverse Angström, depending on the unit used to define; the molecular geometry). ``pyddx`` provides a handy utility function to compute; the Debye-Hückel parameter. For example ::. import pyddx; from qcelemental import constants. list_of_ions = [(+1, 0.1), (-1, 0.1)]; dielectric_constant = pyddx.data.solvent_epsilon[""water""]; temperature = 298.15 # Kelvin; kappa_invbohr = pyddx.solvent_kappa(list_of_ions, dielectric_constant, temperature); kappa_invang = kappa_invbohr / constants.bohr2angstroms. computes the parameter (in inverse Angström) for a 0.1 mol/l solution of sodium; chloride in water, thus a solution woith 0.1 mol/l of a ``+1``-charged ion; and 0.1 mol/l of a ``-1``-charged ion. The **cavity** in ddx is defined as a union of spheres around each atom.; Usually the spehere radii for each atom are determined using a standard; set of tabulated radii per atomic species, determined by the |ddx__ddx_radii_set| parameter.; Currently ``bondi`` [Bondi:1964:441]_ and ``uff`` [Rappe:1992:114]_; are supported for |ddx__ddx_radii_set| with ``uff`` selected by default.; These radius values are conventionally scaled by an additional factor before use,; conventionally 1.1 for ``uff`` and 1.2 for ``bondi``. Customisation of the scaling; is possible using the |ddx__ddx_radii_scaling| parameter.; A more fine-grained control over the sphere radii is available by explicitly providing; a list of radii (one per atom, exactly in the order of the input geometry); using the |ddx__ddx_radii| parameter. Note that the same unit as for the molecular; input is expected for the radii. .. include:: autodir_options_c/globals__ddx.rst; .. include:: autodir_options_c/ddx__ddx_mod",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst:7029,charge,charged,7029,doc/sphinxman/source/ddx.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/ddx.rst,1,['charge'],['charged']
Energy Efficiency," a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also available. .. _`sec:fnocepa`:. Coupled electron pair approximation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Coupled-pair methods can be viewed ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7724,energy,energy,7724,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['energy'],['energy']
Energy Efficiency," a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF conv crit since that's Cfour's default; for |cfour__cfour_scf_conv| ::. energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; keyword ::. set cfour_scf_conv 6; energy('c4-scf'). * uses :math:`10^{-5}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword ::. set d_convergence 5; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword (local scope works, too) where; the |PSIfours| more flexible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten; and Cfour module keyword trumps |PSIfour| SCF module keyword ::. set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the :ref:`Cfour module<apdx:cfour>` along with; |mints__basis| and |globals__puream| (opt, too?). Misc. Running; ~~~~~~~~~~~~~. Naturally, in |PSIfour| multiple jobs can be run in succession from the input file. Control optimizations with optking keywords HERE. Cfour ``GRD`` file is; written to |PSIfour| output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the |PSIfour|; output file and is available from input as :py:func:`~psi4.core.Wavefunction.gradient`. sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it i",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:40538,energy,energy,40538,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['energy'],['energy']
Energy Efficiency," and as Python function arguments.; The few exceptions are documented for the :py:func:`~psi4.driver.wrapper_database.database` function,; where case structure must match the database file. .. _`op_c_bool`:; .. _`op_c_boolean`:; .. note:: Boolean options can be specified by ``yes``, ``on``, ``true``, or ``1``; for affirmative and ``no``, ``off``, ``false``, or ``0`` for negative,; all insensitive to case. .. _`op_c_conv`:; .. note:: Certain convergence and tolerance keywords, of type *double* (real numbers),; may be specified using either a real number or an integer; and integer *X* is then; treated as the number of converged decimal digits required. For example, to request; as energy converged to :math:`10^{-6} E_h`, the user may set the ``e_convergence``; keyword to ``0.000001``, ``1.0e-6``, or ``6``. .. _`sec:psivarnotes`:. Notes on PSI Variables; ======================. .. note:: Starting in 1.6, there are three standard ways to access an excited state; property. We give examples below, but the method name and property name may change. * ``method ROOT 0 -> ROOT m property`` to get root ``m``.; * ``method ROOT 0 -> ROOT m property - h TRANSITION`` to get root m and; independently specify that the total transition symmetry is ``h``, e.g., A2.; * ``method ROOT 0 (h) -> ROOT m (i) property`` to get the transition; between two roots, specifying the symmetry of both states and the index of the target; roots among states of their own symmetry. For example, to target the second excited-state, which is also the lowest energy state; of its irrep, the first two calls will take m = 2, while the last takes m = 0.; Methods that use this interface are: TD-fctl.; Note that numberings are associated with the calculation much more strongly than ; with the molecular system. Changing the number of roots sought, the symmetry ; subspace or the symmetry apportionment of roots under which the computation is run, ; or the excited state method are all likely to scramble root numberings. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst:3003,energy,energy,3003,doc/sphinxman/source/notes_c.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/notes_c.rst,1,['energy'],['energy']
Energy Efficiency," and virtual orbitals can be frozen during the ; energy calculation, but not for the calculation of the ; one-particle density matrix or the analytic gradient. .. table:: Summary of MP2 and MP2-R12 capabilities in |PSIfour|. +-----------+-----------+---------------+--------------------------+----------+; | Reference | Method | Energy (conv) | Energy (integral-direct) | Gradient |; +===========+===========+===============+==========================+==========+; | RHF | MP2 | Y | Y | Y |; +-----------+-----------+---------------+--------------------------+----------+; | UHF | MP2 | Y | --- | --- |; +-----------+-----------+---------------+--------------------------+----------+; | ROHF | MP2 | Y | --- | --- |; +-----------+-----------+---------------+--------------------------+----------+; | RHF | MP2-R12/A | --- | Y | --- |; +-----------+-----------+---------------+--------------------------+----------+. Basic Keywords; --------------. To compute a ground-state MP2 or MP2-R12 energy at a fixed geometry,; the following keywords are common:. \item[WFN = string]\mbox{}\\; Acceptable values are {\tt mp2} for MP2, {\tt mp2r12} [for MP2-R12/A]; There is no default. . \item[REFERENCE = string]\mbox{}\\; The only acceptable value are {\tt rhf, uhf, and rohf}.; There is no default. \item[JOBTYPE = string]\mbox{}\\; Acceptable values are {\tt sp} and {\tt opt}. There is no default. \item[MEMORY = (real MB)]\mbox{}\\; Specified the amount of core memory to be used, in MB. Defaults to 256.; Other units (*e.g.*, KB or GB) are also allowed. .. comment include:: autodir_options_c/detci__reference.rst. \item[DIRECT = boolean]\mbox{}\\; Specifies whether to use the conventional ({\tt false}) or; integral-direct ({\tt true}) algorithm. Default is {\tt false}. \item[NUM\_THREADS = integer]\mbox{}\\; Specified the number of threads to be used in the integral-direct; computation (only valid if {\tt DIRECT} is set to {\tt true}).; Default is 1. \item[FREEZE\_CORE = boolean]\mbox{}\\; Speci",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst:3163,energy,energy,3163,doc/sphinxman/source/attic/mp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst,1,['energy'],['energy']
Energy Efficiency," as to be difficult to follow. Since quantum chemical methods in |PSIfour| are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; :source:`psi4/driver/aliases.py` file is intended for editing by the user for; this purpose. As an example, the MP2.5 method; (which admittedly is already built in to |PSIfour|); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy. ::. def run_mp2_5(name, **kwargs):; ; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); ; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; ; print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); ; return e_mp25. Compare the above to the method that resides in :source:`psi4/driver/aliases.py`.; The rationale for the changes is indicated in the comments below. ::. def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names; ; # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3; ; # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('M",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickaddalias.rst:2427,energy,energy,2427,doc/sphinxman/source/quickaddalias.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickaddalias.rst,1,['energy'],['energy']
Energy Efficiency," balanced basis [Kutzelnigg:1984]_ treatment. ; In the X2C treatment, the positive-energy block of the Hamiltonian ( :math:`h^{FW}_{\rm ++}` ); is given by the sum; of a transformed kinetic (:math:`T_{\rm X2C}`) and potential energy ( :math:`V_{\rm X2C}` ) contribution.; Relativistic kinetic energy ( :math:`T_{\rm X2C}` ) and nuclear-electron interaction potential ( :math:`V_{\rm X2C}` ) is given in terms of non-relativisitc kinetic (:math:`T=\hat{p}^2/2`) energy and nuclear-electron interaction potential (:math:`V`), coupling matrix ( :math:`X`) and renormalization matrix ( :math:`R`). . .. math::; T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R . .. math::; V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R. The coupling matrix ( :math:`{X} = C^{S} (C^{L})^{-1}` ) is obtained from the large (:math:`C^{\rm L}`) and small (:math:`C^{\rm S}`) components of the :math:`N` positive energy solutions of the Dirac equation.; The renormalization matrix ; :math:`{R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}`,; depends on the modified overlap matrix; :math:`\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX`. The integrals :math:`W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle` can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators :math:`T_{X2C}` and :math:`V_{X2C}`. It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]_) transformation is obtained in kinetically balance basis. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__relativistic.rst; .. include:: autodir_options_c/globals__basis_relativistic.rst. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst:6078,energy,energy,6078,doc/sphinxman/source/relativistic.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/relativistic.rst,1,['energy'],['energy']
Energy Efficiency," beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n* within irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 (h) -> ROOT n (i) RIGHT EIGENVECTOR BETA. The right beta spin eigenvectors of the named method; from ground state, which is in irrep *h*, to root *n*, which is in irrep *i*. DFT; functional labeled if canonical. .. psivar:: TD-fctl ROOT 0 -> ROOT n RIGHT EIGENVECTOR BETA - h TRANSITION. The right alpha and beta spin eigenvectors of the named method; from ground state to root *n*, and the transition is of irrep *h*. DFT; functional labeled if canonical. .. psivar:: THERMAL ENERGY. Total thermal energy E [E_h] at given temperature. .. psivar:: THERMAL ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the thermal energy at given temperature. .. psivar:: TWO-ELECTRON ENERGY. The two-electron energy contribution [E_h] to the total SCF energy.; Quantity :math:`E_{2e^-}` in Eq. :eq:`SCFterms`. .. psivar:: UNCP-CORRECTED 2-BODY INTERACTION ENERGY. The interaction energy [E_h] considering only two-body interactions,; computed without counterpoise correction.; Related variable :psivar:`CP-CORRECTED 2-BODY INTERACTION ENERGY`. .. math:: E_{\text{IE}} = E_{dimer} - \sum_{monomer}^{n}{E_{monomer}^{\text{unCP}}}. .. psivar:: WIBERG LOWDIN INDICES. Property of Wiberg bond indices using orthogonal L\ |o_dots|\ wdin orbitals, (nat, nat). .. psivar:: ZAPTn TOTAL ENERGY; ZAPTn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled Z-averaged perturbation theory level.; *n* is ZAPT perturbation order. .. psivar:: ZERO K ENTHALPY. Total electronic and zero-point energy [E_h] at 0 [K]. .. psivar:: ZPVE. Vibrational zero-point energy [E_h] at 0 [K]. .. psivar:: 2-BODY PAIRWISE DISPERSION CORRECTION ANALYSIS. The interatomic contributions to the dispersion correction [E_h].; Sums to the dispersion energy. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:68991,energy,energy,68991,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,6,['energy'],['energy']
Energy Efficiency," by Grimme,; whose ""-D2"" and more modern ""-D3"" approaches are a de facto industry standards. Minimal Input; ~~~~~~~~~~~~~. Minimal input for a KS-DFT computation is a molecule block, basis set; option, and a call to ``energy('b3lyp')`` (or other valid functional name)::. molecule {; He; }. set basis sto-3g. energy('b3lyp'). This will run a B3LYP Restricted Kohn--Sham (RKS) on neutral singlet Helium in; :math:`D_{2h}` spatial symmetry with a minimal ``STO-3G`` basis, 1.0E-6 energy; and density convergence criteria, a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess (because single atom). For more information on; any of these options, see the relevant section below, or in the preceding; :ref:`Hartree--Fock section <sec:scf>`. Spin/Symmetry Treatment; ~~~~~~~~~~~~~~~~~~~~~~~. |PSIfour| implements the most popular spin specializations of KS-DFT, including:. Restricted Kohn--Sham (RKS) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Kohn--Sham (UKS); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; the resultant; wavefunction may not be an eigenfunction of the :math:`\hat S^2` operator.; However, spin contamination is usually less of a problem with UKS than with; UHF, as the spin contamination of the noninteracting quasiparticles (the; :math:`S^2` metric printed in the output) is usually a severe overestimation; of the spin contamination of the true electrons. These are set in the |scf__reference| option. Note that there are not equivalents to ROHF or CUHF, *e.g.*, no ROKS or CUKS. This; is because ROHF is implicitly assumed to be followed by a correlated method;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:15194,efficient,efficient,15194,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['efficient'],['efficient']
Energy Efficiency," by orbital eigenvalue, *i.e.*, by choosing the set; of new orbitals which looks most like some previously known ""good"" set. The; ""good"" set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations :math:`N,N+2,\ldots`, invoking; |scf__mom_start| ``N`` can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent; iterations can quench oscillations. This mixing, known as; ""damping"" can be activated by setting the; |scf__damping_percentage| keyword to a nonzero percent. Damping is; turned off when the DIIS error is smaller than; |scf__damping_convergence|.; Level shifting [Off by default]; A commonly used alternative to damping is to use level shifting,; which decreases the mixing of occupied and unoccupied orbitals in; the SCF update by moving the unoccupied orbitals up in energy. It; can be shown that the SCF procedure always converges with a; suitably large level shift; however, the larger the shift is, the; slower the convergence becomes, and the calculation may end up; converging onto a higher lying SCF solution. Because of this, in; practice level shifting is most useful in the initial phase of the; calculation to reduce the orbital error enough for DIIS to work; well. The level shift is controlled by the parameter; |scf__level_shift|, and it is turned off when the DIIS error is; smaller than |scf__level_shift_cutoff|. Reasonable values for; the shift and convergence threshold are 5.0 and 1e-2,; respectively.; SOSCF [Off by Default]; See :ref:`sec:soscf`. .. _`sec:scferi`:. ERI Algorithms; ~~~~~~~~~~~~~~. The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are ava",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:27071,energy,energy,27071,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['energy'],['energy']
Energy Efficiency," closely related to perturbation theory, and the; MP2, MP3, and MP4(SDQ) correlation energies can be obtained as a free; by-product of a CCSD or QCISD computation. The following is an ; example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also avail",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7587,energy,energy,7587,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['energy'],['energy']
Energy Efficiency," coupled cluster lambda (response) equations. .. psivar:: LOWDIN CHARGES. Property of partial atomic charges [e] by the method of L\ |o_dots|\ wdin, (nat,). .. psivar:: MAYER INDICES. Property of Mayer bond indices, (nat, nat). .. psivar:: MBIS CHARGES; MBIS DIPOLES; MBIS OCTUPOLES; MBIS QUADRUPOLES. Per-atom charges [e], dipoles [e a0], quadrupoles [e a0^2], and octupoles [e a0^3]; resulting from partitioning the total electron density through the Minimal Basis; Iterative Stockholder (MBIS) Charge Partitioning Scheme. .. psivar:: MBIS FREE ATOM n VOLUME. Free-atom volume [a0^3] for atom n, computed using the MBIS charge; partitioning scheme. Free atom densities are computed at the same; level of theory as the parent MBIS calculation, with UHF turned on; as needed. .. psivar:: MBIS RADIAL MOMENTS <R^3>. Per-atom expectation value of r^3 [a0^3], equivalent to the volume; of the MBIS-partitioned density. .. psivar:: MBIS VALENCE WIDTHS. Per-atom density width [a0] of the associated valence charge computed; from an MBIS partitioned density. Equivalent to the inverse of the; linear decay rate of the atomic density. .. psivar:: MBIS VOLUME RATIOS. Per-atom ratio between the atomic volume (<R^3>) and the free-atomic; volume, unitless. .. psivar:: MCSCF TOTAL ENERGY. Multiconfigurational self-consistent-field energy [E_h] in the course of; a configuration interaction computation. May be single-root or state-averaged. .. psivar:: mtd DIPOLE. Dipole array [e a0] for the named method, (3,). .. psivar:: mtd QUADRUPOLE. Redundant quadrupole array [e a0^2] for the named method, (3, 3). .. psivar:: mtd OCTUPOLE. Redundant octupole array [e a0^3] for the named method, (3, 3, 3). .. psivar:: mtd HEXADECAPOLE. Redundant hexadecapole array [e a0^4] for the named method, (3, 3, 3, 3). .. psivar:: mtd 32-POLE. Redundant 32-pole array [e a0^5] for the named method, (3, 3, 3, 3, 3). .. psivar:: mtd 64-POLE. Redundant 64-pole array [e a0^6] for the named method, (3, 3, 3, 3, 3, 3). .. psiv",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:38489,charge,charge,38489,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['charge'],['charge']
Energy Efficiency," df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv open-shell a-ccsd(t) by ccenergy'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv open-shell a-ccsd(t) by ccenergy'}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:6632,energy,energy,6632,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency, dfccd-grad1 dfccsd1 dfccsdl1 dfccsd-grad1; dfccsd-t-grad1; dfccsdt1 dfccsdat1 dfmp2-1 dfmp2-2 dfmp2-3 dfmp2-4 dfmp2-5 dfmp2-fc dfmp2-freq1 dfmp2-freq2; dfccsd-grad2 dfccsd-t-grad2 dfccsdat2 dfccsdt2; dfmp2-grad1 dfmp2-grad2 dfmp2-grad3 dfmp2-grad4 dfmp2-grad5 dfomp2-1 dfomp2-2 dfomp2-3; dfomp2-4 dfomp2-grad1 dfomp2-grad2 dfomp2-grad3 dfomp3-1 dfomp3-2; dfomp3-grad1 dfomp3-grad2 dfomp2p5-1 dfomp2p5-2 dfomp2p5-grad1; dforemp-grad1 dforemp-grad2 dfremp-1 dfremp-2; dft-grad-lr1 dft-grad-lr2 dft-grad-lr3 dft-grad-disk; dfomp2p5-grad2 dfrasscf-sp dfscf-bz2 dft-b2plyp dft-grac dft-ghost dft-grad-meta; dft-freq dft-freq-analytic1 dft-freq-analytic2 dft-grad1 dft-grad2 dft-psivar dft-b3lyp dft1 dft-vv10; dft1-alt dft2 dft3 dft-omega dft-dens-cut dlpnomp2-1 dlpnomp2-2 dlpnomp2-3; docs-bases docs-dft explicit-am-basis extern1 extern2 extern3 extern4; fsapt1 fsapt2 fsapt-terms fsapt-allterms fsapt-ext fsapt-ext-abc fsapt-ext-abc2; fsapt-ext-abc-au isapt1 isapt2 isapt-siao1 fisapt-siao1 isapt-charged; fci-dipole fci-h2o fci-h2o-2 fci-h2o-fzcv fci-tdm fci-tdm-2; fci-coverage; fcidump; fd-freq-energy fd-freq-energy-large fd-freq-gradient; fd-freq-gradient-large fd-gradient freq-isotope1 freq-isotope2 fnocc1 fnocc2; fnocc3 fnocc4 fnocc5 fnocc6 fnocc7 frac frac-ip-fitting frac-sym frac-traverse ghosts gibbs; lccd-grad1 lccd-grad2 matrix1 matrix2; mbis-1 mbis-2 mbis-3 mbis-4 mbis-5 mbis-6 mcscf1 mcscf2 mcscf3; mints1 mints2 mints3 mints4 mints5 mints6 mints8 mints-benchmark mints-helper; mints9 mints10 mints15 molden1 molden2 mom mom-h2o-3 mom-h2o-4; mp2-1 mp2-def2 mp2-grad1 mp2-grad2 mp2-h mp2p5-grad1 mp2p5-grad2 mp3-grad1 mp3-grad2; mp2-property mpn-bh nbody-he-cluster nbody-intermediates nbody-nocp-gradient; nbo nbody-cp-gradient nbody-vmfc-gradient nbody-vmfc-hessian nbody-hessian nbody-convergence; nbody-freq nbody-multi-level nbody-multi-level-2 numpy-array-interface; olccd-freq1 olccd-grad1 olccd-grad2 olccd1 olccd2 olccd3; omp2-1 omp2-2 omp2-3 omp2-4 omp2-5 omp2-grad1 omp2-g,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:3209,charge,charged,3209,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['charge'],['charged']
Energy Efficiency, dfmp2-fc dfmp2-freq1 dfmp2-freq2; dfccsd-grad2 dfccsd-t-grad2 dfccsdat2 dfccsdt2; dfmp2-grad1 dfmp2-grad2 dfmp2-grad3 dfmp2-grad4 dfmp2-grad5 dfomp2-1 dfomp2-2 dfomp2-3; dfomp2-4 dfomp2-grad1 dfomp2-grad2 dfomp2-grad3 dfomp3-1 dfomp3-2; dfomp3-grad1 dfomp3-grad2 dfomp2p5-1 dfomp2p5-2 dfomp2p5-grad1; dforemp-grad1 dforemp-grad2 dfremp-1 dfremp-2; dft-grad-lr1 dft-grad-lr2 dft-grad-lr3 dft-grad-disk; dfomp2p5-grad2 dfrasscf-sp dfscf-bz2 dft-b2plyp dft-grac dft-ghost dft-grad-meta; dft-freq dft-freq-analytic1 dft-freq-analytic2 dft-grad1 dft-grad2 dft-psivar dft-b3lyp dft1 dft-vv10; dft1-alt dft2 dft3 dft-omega dft-dens-cut dlpnomp2-1 dlpnomp2-2 dlpnomp2-3; docs-bases docs-dft explicit-am-basis extern1 extern2 extern3 extern4; fsapt1 fsapt2 fsapt-terms fsapt-allterms fsapt-ext fsapt-ext-abc fsapt-ext-abc2; fsapt-ext-abc-au isapt1 isapt2 isapt-siao1 fisapt-siao1 isapt-charged; fci-dipole fci-h2o fci-h2o-2 fci-h2o-fzcv fci-tdm fci-tdm-2; fci-coverage; fcidump; fd-freq-energy fd-freq-energy-large fd-freq-gradient; fd-freq-gradient-large fd-gradient freq-isotope1 freq-isotope2 fnocc1 fnocc2; fnocc3 fnocc4 fnocc5 fnocc6 fnocc7 frac frac-ip-fitting frac-sym frac-traverse ghosts gibbs; lccd-grad1 lccd-grad2 matrix1 matrix2; mbis-1 mbis-2 mbis-3 mbis-4 mbis-5 mbis-6 mcscf1 mcscf2 mcscf3; mints1 mints2 mints3 mints4 mints5 mints6 mints8 mints-benchmark mints-helper; mints9 mints10 mints15 molden1 molden2 mom mom-h2o-3 mom-h2o-4; mp2-1 mp2-def2 mp2-grad1 mp2-grad2 mp2-h mp2p5-grad1 mp2p5-grad2 mp3-grad1 mp3-grad2; mp2-property mpn-bh nbody-he-cluster nbody-intermediates nbody-nocp-gradient; nbo nbody-cp-gradient nbody-vmfc-gradient nbody-vmfc-hessian nbody-hessian nbody-convergence; nbody-freq nbody-multi-level nbody-multi-level-2 numpy-array-interface; olccd-freq1 olccd-grad1 olccd-grad2 olccd1 olccd2 olccd3; omp2-1 omp2-2 omp2-3 omp2-4 omp2-5 omp2-grad1 omp2-grad2; omp2p5-1 omp2p5-2 omp2p5-grad1 omp2p5-grad2 omp3-1 omp3-2; omp3-3 omp3-4 omp3-5 omp3-grad1 omp3-grad2 opt-lindep-,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:3325,energy,energy-large,3325,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['energy'],['energy-large']
Energy Efficiency," each grid point may be captured as Python arrays in the input file::. E, wfn = prop('scf', properties=[""GRID_ESP"", ""GRID_FIELD""], return_wfn=True); Vvals = wfn.oeprop.Vvals(); Exvals = wfn.oeprop.Exvals(); Eyvals = wfn.oeprop.Eyvals(); Ezvals = wfn.oeprop.Ezvals(). In this example, the *Vvals* array contains the electrostatic potential at each; grid point, in the order that the grid was specified, while the *Exvals*,; *Eyvals* and *Ezvals* arrays contain the *x*, *y* and *z* components of the; electric field, respectively; all of these arrays can be iterated and; manipulated using standard Python syntax. For a complete demonstration of this; utility, see the :srcsample:`props4` test case. .. index:: ISA; MBIS. .. _`sec:oeprop_mbis`:. Minimal Basis Iterative Stockholder; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The Minimal Basis Iterative Stockholder (MBIS) method is one of many procedures; that partitions a molecular one-particle density matrix into atomic electron densities.; Running MBIS in |PSIfour| will calculate atomic valence charge widths, volume ratios,; atomic charges, as well as dipoles, quadrupoles, and octupoles. ; Additionally, all expectation values of radial moments of n-th order (:math:`<r^n>`) ; are computed up to fourth order. Higher moments can be computed by specifying |globals__max_radial_moment|.; The volume ratios are computed as the ratio between the volume of the atomic density; (:math:`<r^3>`) and the volume of the free atom computed using the same level; of theory, but with a potentially unrestricted reference. The allowed number of iterations and convergence criteria for the stockholder ; algorithm is controlled by |globals__mbis_maxiter| and |globals__mbis_d_convergence|. Note ; that the density is partitioned on a molecular quadrature grid, the details of which can be; controlled with the keywords |globals__mbis_radial_points|, |globals__mbis_spherical_points|, and ; |globals__mbis_pruning_scheme|. (Associated Paper: [Verstraelen:2016]_); ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst:9846,charge,charge,9846,doc/sphinxman/source/oeprop.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/oeprop.rst,2,['charge'],"['charge', 'charges']"
Energy Efficiency," electronic gradient [E_h/a0] of the MP2 level of theory, ({nat}, 3). .. psivar:: MP2 DIPOLE GRADIENT. The derivative of the MP2 level of theory dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: MP2 TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the MP2 level of theory, (3 * {nat}, 3 * {nat}). .. psivar:: MP2.5 TOTAL ENERGY; MP2.5 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP2.5 level of theory. .. psivar:: MP3 TOTAL ENERGY; MP3 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP3 level of theory. .. psivar:: MP4(T) CORRECTION ENERGY. The MP4 triples component [E_h]. Quantity is second right-hand term in; Eq. :eq:`MP4terms`. .. psivar:: MP4(SDQ) TOTAL ENERGY; MP4(SDQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP4 singles, doubles, quadruples level of theory. Quantity; :psivar:`MP4(SDQ) CORRELATION ENERGY` is; first right-hand term in Eq. :eq:`MP4terms`. .. psivar:: MP4 TOTAL ENERGY; MP4 CORRELATION ENERGY; MP4(SDTQ) TOTAL ENERGY; MP4(SDTQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full MP4 level of theory. Quantity :psivar:`MP4 CORRELATION; ENERGY` / :psivar:`MP4(SDTQ) CORRELATION ENERGY`; is left-hand term in Eq. :eq:`MP4terms`. .. math:: E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}; :label: MP4terms. .. psivar:: MPn TOTAL ENERGY; MPn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled |MollerPlesset| perturbation theory level.; *n* is MP perturbation order. .. psivar:: MP2 DOUBLES ENERGY; MP2.5 DOUBLES ENERGY; MP3 DOUBLES ENERGY; CEPA(0) DOUBLES ENERGY; CEPA(1) DOUBLES ENERGY; CEPA(2) DOUBLES ENERGY; CEPA(3) DOUBLES ENERGY; ACPF DOUBLES ENERGY;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:40739,energy,energy,40739,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,2,['energy'],['energy']
Energy Efficiency," energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 |kcalpermol|; (``Elst10,r`` where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the ``Disp20``; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 |kcalpermol|. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractive; because the H atoms in acetylene bear a partial positive charge, while the; electron-rich double bond in ethylene bears a partial negative charge. At; the same time, the dispersion interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon; ==========================================================================. Finally, let's consider an example that shows how the Python driver; in |PSIfour| simplifies some routine tasks. |PSIfour| can interpret; valid Python code in addition to the computational chemistry directives; we've seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previousl",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:16390,charge,charge,16390,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,2,['charge'],['charge']
Energy Efficiency," enthalpy H [E_h] at given temperature. .. psivar:: ENTHALPY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the enthalpy at given temperature. .. psivar:: ESP AT CENTER n. Property of electrostatic potential [E_h / e] at location, usually atom center, n. .. psivar:: FCI TOTAL ENERGY; FCI CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full configuration interaction level of theory. .. psivar:: GIBBS FREE ENERGY. Total Gibbs free energy [E_h], free enthalpy at given temperature. .. psivar:: GIBBS FREE ENERGY CORRECTION. Sum of electronic, translational, rotational, and vibrational corrections [E_h] to the free enthalpy at given temperature. .. psivar:: GRID ELECTRONS TOTAL; GRID ELECTRONS ALPHA; GRID ELECTRONS BETA. The number of electrons integrated by the xc quadrature grid. .. psivar:: HF TOTAL ENERGY. The total electronic energy [E_h] for the Hartree--Fock method, without; any dispersion correction; the first three (or four, since; :math:`E_{xc} = 0`) terms in Eq. :eq:`SCFterms`. Quantity :math:`E_{\text{HF}}`; in Eq. :eq:`SCFterms`. .. psivar:: HF KINETIC ENERGY. The total kinetic energy [E_h] of the Hartree--Fock method. .. psivar:: HF POTENTIAL ENERGY. The total potential energy [E_h] of the Hartree--Fock method. .. psivar:: HF VIRIAL RATIO. The virial ratio of the Hartree--Fock method. Only defined for a fully quantum mechanical computation, i.e., not QM/MM. .. psivar:: HF TOTAL GRADIENT. The total electronic gradient [E_h/a0] of the Hartree--Fock method, ({nat}, 3). .. psivar:: HF DIPOLE GRADIENT. The derivative of the Hartree--Fock method dipole [E_h a0/u] = [(e a0/a0)^2/u] with respect to nuclear perturbations; as a degree-of-freedom by dipole component array, (3 * {nat}, 3). .. psivar:: HF TOTAL HESSIAN. The total electronic second derivative [E_h/a0/a0] for the Hartree-Fock method, (3 * {nat}, 3 * {nat}). .. psivar:: LCCD TOTAL ENERGY; LCCD CORRELATION E",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:35591,energy,energy,35591,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['energy'],['energy']
Energy Efficiency," even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; cbs(); see: complete_basis_set(); cbs(); single: basis set; delta correction. .. _`sec:cbs()`:. Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:1594,energy,energy,1594,doc/sphinxman/source/cbs.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst,1,['energy'],['energy']
Energy Efficiency," example of the results for a computation run with the call; ``energy('fno-qcisd')`` to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also available. .. _`sec:fnocepa`:. Coupled electron pair approximation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive mod",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7771,energy,energy,7771,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['energy'],['energy']
Energy Efficiency," fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'm",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:10405,energy,energy,10405,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'acpf', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'acpf', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'};",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:11767,energy,energy,11767,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'm",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:15663,energy,energy,15663,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'aqcc', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'};",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:17025,energy,energy,17025,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this section must be dotted with the weightings in column Wt; to get the total cbs energy. Finally, in the CBS section, are listed the results for each stage; of the cbs procedure. The stage energies of this section sum outright to the total cbs energy. ::. ==> Components <==; ; ----------------------------------------------------------------------------------; Method / Basis Rqd Energy [H] Variable; ----------------------------------------------------------------------------------; scf / aug-cc-pvqz * -1.11916375 SCF TOTAL ENERGY; mp2 / aug-cc-pvqz * -0.03407997 MP2 CORRELATION ENERGY; scf / aug-cc-pvdz -1.11662884 SCF TOTAL ENERGY; mp2 / aug-cc-pvdz * -0.02881480 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz * -0.03893812 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvdz -0.03893812 CCSD CORRELATION ENERGY; scf / aug-cc-pvtz -1.11881134 SCF TOTAL ENERGY; mp2 / aug-cc-pvtz * -0.03288936 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz * -0.04201004 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvtz -0.04201004 CCSD CORRELATION ENERGY; ----------------------------------------------------------------------------------; ; ==> Stages <==; ; -----------------------------------------------------------------------",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:6067,energy,energy,6067,doc/sphinxman/source/cbs.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst,1,['energy'],['energy']
Energy Efficiency," for the MP3 level of theory. .. psivar:: MP4(T) CORRECTION ENERGY. The MP4 triples component [E_h]. Quantity is second right-hand term in; Eq. :eq:`MP4terms`. .. psivar:: MP4(SDQ) TOTAL ENERGY; MP4(SDQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the MP4 singles, doubles, quadruples level of theory. Quantity; :psivar:`MP4(SDQ) CORRELATION ENERGY` is; first right-hand term in Eq. :eq:`MP4terms`. .. psivar:: MP4 TOTAL ENERGY; MP4 CORRELATION ENERGY; MP4(SDTQ) TOTAL ENERGY; MP4(SDTQ) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the full MP4 level of theory. Quantity :psivar:`MP4 CORRELATION; ENERGY` / :psivar:`MP4(SDTQ) CORRELATION ENERGY`; is left-hand term in Eq. :eq:`MP4terms`. .. math:: E_{\text{MP4}} = E_{\text{MP4(SDQ)}} + E_{\text{MP4(T)}}; :label: MP4terms. .. psivar:: MPn TOTAL ENERGY; MPn CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the labeled |MollerPlesset| perturbation theory level.; *n* is MP perturbation order. .. psivar:: MP2 DOUBLES ENERGY; MP2.5 DOUBLES ENERGY; MP3 DOUBLES ENERGY; CEPA(0) DOUBLES ENERGY; CEPA(1) DOUBLES ENERGY; CEPA(2) DOUBLES ENERGY; CEPA(3) DOUBLES ENERGY; ACPF DOUBLES ENERGY; AQCC DOUBLES ENERGY; CISD DOUBLES ENERGY; QCISD DOUBLES ENERGY; REMP2 DOUBLES ENERGY; LCCD DOUBLES ENERGY; CCD DOUBLES ENERGY; LCCSD DOUBLES ENERGY; CCSD DOUBLES ENERGY; OMP2 DOUBLES ENERGY; OMP2.5 DOUBLES ENERGY; OMP3 DOUBLES ENERGY; OREMP2 DOUBLES ENERGY; OLCCD DOUBLES ENERGY. The doubles portion [E_h] of the named correlation energy; including same-spin and opposite-spin correlations. .. psivar:: MP2 SINGLES ENERGY; MP2.5 SINGLES ENERGY; MP3 SINGLES ENERGY; CEPA(0) SINGLES ENERGY; CEPA(1) SINGLES ENERGY; CEPA(2) SINGLES ENERGY; CEPA(3) SINGLES ENERGY; ACPF SINGLES ENERGY; AQCC SINGLES ENERGY; CISD SINGLES ENERGY; QCISD SINGLES ENERGY; REMP2 SINGLES ENERGY; LCCD SINGLES ENERGY; CCD SINGLES ENERGY; LC",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:41450,energy,energy,41450,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,2,['energy'],['energy']
Energy Efficiency," for the full orbital optimization. In the ODC-13 method, the third- and; fourth-order N-representability conditions are used for the density cumulant; and the correlated contribution :math:`\boldsymbol{\tau}`, respectively,; and the orbitals are variationally optimized. ; For most of the applications, it is recommended to use the ODC-12 method, which; provides an optimal balance between accuracy and efficiency, especially for; molecules with open-shell character. If highly accurate results are desired, a; combination of the ODC-13 method with a three-particle energy correction; [:math:`\mbox{ODC-13$(\lambda_3)$}`] can be used (see below).; For the detailed comparison of the quality of these methods, we refer; users to our :ref:`publications <intro:dctcitations>`. The DCT functional can be specified by the |dct__dct_functional| option. The; default choice is the ODC-12 functional. The DCT code can also be used to; compute the :math:`(\lambda_3)` energy correction that perturbatively accounts; for three-particle correlation effects, similarly to the (T) correction in coupled; cluster theory. Computation of the :math:`(\lambda_3)` correction can be; requested by setting the |dct__three_particle| option to PERTURBATIVE. A; combination of the ODC-13 functional with the :math:`(\lambda_3)` correction; [denoted as :math:`\mbox{ODC-13$(\lambda_3)$}`] has been shown to provide highly; accurate results for open-shell molecules near equilibrium geometries. At the present moment, all of the DCT methods support unrestricted reference; orbitals (|scf__reference| ``UHF``), which can be used to perform energy and; gradient computations for both closed- and open-shell molecules. In addition,; the ODC-06 and ODC-12 methods support restricted reference orbitals; (|scf__reference| ``RHF``) for the energy and gradient computations of; closed-shell molecules. Note that in this case restricted reference orbitals; are only available for |dct__algorithm| ``SIMULTANEOUS``. .. _`sec:dctalgor",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:8106,energy,energy,8106,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['energy'],['energy']
Energy Efficiency," for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). .. _`sec:scfrestart`:. Restarting the SCF; ~~~~~~~~~~~~~~~~~~. Reading orbital data from a previous calculations is done via the ``restart_file`` option,; where the actual file is a serialized ``wfn`` object (see :ref:`saving the wfn <sec:save_wfn>`); By default, the orbital data file of the converged SCF(``psi.PID.name.180.npy``) is deleted; after |PSIfour| exits or the ``clean()`` function is called. The orbital guess is automatically; set to ``READ`` when ``restart_file`` is given a ``wfn`` file.; To write the orbitals after every iteration and keep the orbitals from the last iteration, the ``write_orbitals`` options is available: ::. energy('scf', write_orbitals='my_mos'),. which writes a ``Wavefunction`` object converted (serialized) to a numpy file called ``my_mos.npy``.; The restart can then be done as follows: ::. energy('scf', restart_file='my_mos'). Specifying the ``.npy`` suffix when writing and reading restart files is optional. Alternatively, the restart can also be done from any previously saved ``wfn`` object. ::. energy, scf_wfn = energy('scf',return_wfn=True); scf_wfn.to_file('my_wfn'); energy('scf', restart_file='my_wfn'). For advanced users manipulating or writing custom wavefunction files, note; that |PSIfour| expects the numpy file on disk to have the ``.npy`` extension, not, e.g., `.npz`. .. index:: DIIS, MOM, damping. .. _`sec:scfconv`:. Convergence Stabilization; ~~~~~~~~~~~~~~~~~~~~~~~~~. A summary of Psi's supported convergence stabilization techniques is presented below:. DIIS [On by Default]; DIIS uses previous iterates of the Fock matrix together; with an error criterion based on the orbital gradient to produc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:23190,energy,energy,23190,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['energy'],['energy']
Energy Efficiency, foreach(test_name aediis-1; casscf-fzc-sp casscf-semi casscf-sa-sp ao-casscf-sp casscf-sp castup1; castup2 castup3 cbs-delta-energy cbs-parser cbs-xtpl-alpha cbs-xtpl-energy; cbs-xtpl-freq cbs-xtpl-gradient cbs-xtpl-opt cbs-xtpl-func cbs-xtpl-nbody; cbs-xtpl-wrapper cbs-xtpl-dict cc1 cc10 cc11 cc12 cc13 cc13a cc13b cc13c; cc13d cc14 cc15 cc16 cc17 cc18 cc19 cc2 cc21 cc22 cc23 cc24 cc25 cc26 cc27 cc28; cc29 cc3 cc30 cc31 cc32 cc33 cc34 cc35 cc36 cc37 cc38 cc39; cc4 cc40 cc41 cc42 cc43 cc44 cc45 cc46 cc47 cc48 cc49 cc4a; cc50 cc51 cc52 cc53 cc54 cc55 cc56 cc5 cc6 cc7 cc8 cc8a cc8b cc8c; cc9 cc9a cdomp2-1 cdomp2-2 cdoremp-energy1 cdoremp-energy2 cdremp-1 cdremp-2 cepa1; cepa2 cepa3 cepa-module ci-multi cisd-h2o+-0 cisd-h2o+-1; cisd-h2o+-2 cisd-h2o-clpse cisd-opt-fd cisd-sp cisd-sp-2; ci-property cubeprop cubeprop-frontier decontract ,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:1284,energy,energy,1284,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,2,['energy'],['energy']
Energy Efficiency," from the Hartree--Fock supermolecular interaction energy; :math:`E_{int}^{HF}` and are only available in dimer-centered basis SAPT; computations, which is the default (see below for monomer-centered basis ; computations). They are defined by:. .. math:: \delta_{HF}^{(2)} = E_{int}^{HF} - (E_{elst}^{(10)} + E_{exch}^{(10)} ; + E_{ind,resp}^{(20)} + E_{exch-ind,resp}^{(20)}); :label: dHF2. .. math:: \delta_{HF}^{(3)} = \delta_{HF}^{(2)} - (E_{exch-ind}^{(30)} ; + E_{ind,resp}^{(30)}); :label: dHF3. Additionally, high-order coupling between induction and dispersion can be ; extracted from the supermolecular MP2 interaction energy:. .. math:: \delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)}). .. math:: \delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}). where :math:`E_{int}^{MP2, corr}` is the correlation part of the supermolecular MP2 ; interaction energy. :math:`\delta_{MP2}^{(2)}` and :math:`\delta_{MP2}^{(3)}` also improve the ; description of electrostatically dominated complexes. :math:`\delta_{MP2}^{(2)}`; can be applied to SAPT2+ or SAPT2+(3) energies whereas :math:`\delta_{MP2}^{(3)}` ; should be applied to SAPT2+3 energies. A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs]_,; and a systematic study of the accuracy of these truncations (with and ; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106]_. The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in |PSIfour|, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exa",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:9376,energy,energy,9376,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['energy'],['energy']
Energy Efficiency," fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the :math:`\hat S^2` operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to a; ROHF to avoid this ""spin-contamination"" problem.; Restricted Open-Shell Hartree--Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree--Fock (CUHF); A variant of ROHF that starts from a UHF ansatz and is therefore often; easier to converge. These can be invoked by the |scf__reference| keyword, which defaults to ``RHF``.; The charge and multiplicity may either be specified in the molecule definition::. molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object::. h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in |PSIfour| and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in some methods, to obtain significant performance; gains. The point group of the molecule is inferred when reading the molecule; section, and may be overridden by the :ref:`symmetry <sec:moleculeKeywords>` flag, as in::. molecule h {; 0 2; H; symmetry c1; }. or by the ``reset_point_group`` Python molecule attribute::. h.reset_point_group('c2v'). During the SCF procedure, the occupation of orbitals is typically determined by; the Aufbau principal across all spatial symmetries. This may result in the; occupation shifting between iterations. If the occupations are known *a priori*,; they may",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:10927,charge,charge,10927,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['charge'],['charge']
Energy Efficiency," gradients by ccenergy'}; {'module': 'psi4-ccenergy', 'driver': 'gradient', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'gradient', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:129648,energy,energy,129648,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," has gained some popularity (though perhaps not as; much as GGA functionals) is the meta approximation, in which information about; the second derivative of the density is incorporated. The most canonical variant; of these functionals rely on the spin kinetic energy density :math:`\tau_\alpha`; and :math:`\tau_\beta`,. .. math:: \tau_\sigma(\vec r_1) = \sum_{i} \left | \nabla \psi_i^{\sigma} (\vec r_1) \right | ^2; = \sum_{i} \left | C_{\mu i}^{\sigma} \nabla \phi_{\mu} (\vec r_1) \right |; ^2 = D_{\mu\nu}^{\sigma} \nabla \phi_{\mu} (\vec r_1) \cdot \nabla; \phi_{\nu} (\vec r_1). A generic local meta-GGA functional may then be written as,. .. math:: E_{\mathrm{xc}}^{\mathrm{DFA}} = \int_{\mathbb{R}^3} f_{\mathrm{xc}}; \left(; \rho_{\alpha} (\vec r_1),; \rho_{\beta} (\vec r_1),; \gamma_{\alpha\alpha} (\vec r_1),; \gamma_{\alpha\beta} (\vec r_1),; \gamma_{\beta\beta} (\vec r_1),; \tau_{\alpha} (\vec r_1),; \tau_{\beta} (\vec r_1); \right) \ \mathrm{d} ^3 r_1. The potential corresponding to this energy functional is,. .. math:: V_{\mu\nu}^{\mathrm{xc},\alpha} =. \int_{\mathbb{R}^3}; \left(\frac{\partial f}{\rho_\alpha}\right); \phi_{\mu}; \phi_{\nu}; \ \mathrm{d} ^3 r_1. .. math:: +; \int_{\mathbb{R}^3}; \left(2 \frac{\partial f}{\gamma_{\alpha\alpha}} \nabla \rho_\alpha + \frac{\partial; f}{\gamma_{\alpha\beta}}\nabla \rho_\beta \right); \nabla\left(\phi_{\mu}; \phi_{\nu}\right); \ \mathrm{d} ^3 r_1. .. math:: +; \int_{\mathbb{R}^3}; \left(\frac{\partial f}{\tau_\alpha}\right); \nabla \phi_{\mu}; \nabla \phi_{\nu}; \ \mathrm{d} ^3 r_1. This potential is used to build the Kohn--Sham matrix,. .. math:: F_{\mu\mu}^{\alpha} = H_{\mu\nu} + J_{\mu\nu} +; V_{\mu\nu}^{\mathrm{xc},\alpha}. which is diagonalized to form the Kohn--Sham orbitals in the same manner as in; Hartree--Fock. In practice the local functional kernel :math:`f_{\mathrm{xc}}` and its required; partial derivatives are exceedingly complex and are not analytically; integrable. In this case, atom-centered numeri",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:6812,energy,energy,6812,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['energy'],['energy']
Energy Efficiency," if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that |PSIfours| defaults don't; get imposed on Cfour. Also, in the case where a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF conv crit since that's Cfour's default; for |cfour__cfour_scf_conv| ::. energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; keyword ::. set cfour_scf_conv 6; energy('c4-scf'). * uses :math:`10^{-5}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword ::. set d_convergence 5; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword (local scope works, too) where; the |PSIfours| more flexible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten; and Cfour module keyword trumps |PSIfour| SCF module keyword ::. set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the :ref:`Cfour module<apdx:cfour>` along with; |mints__basis| and |globals__puream| (opt, too?). Misc. Running; ~~~~~~~~~~~~~. Naturally, in |PSIfour| multiple jobs can be run in succession from the input file. Control optimizations with optking keywords HERE. Cfour ``GRD`` file is; written to |PSIfour| output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the |PSIfour|; output file and is available from input as :py:func:`~psi4.core.Wavefunc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:40348,energy,energy,40348,doc/sphinxman/source/cfour.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst,1,['energy'],['energy']
Energy Efficiency," image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; keyword. The default setting ``fisapt_link_assignment c`` assigns the entire pair to the linker C together with; a +1 nuclear charge from the connecting atoms of A/B to preserve the electrical neutrality of each fragment.; However, as already noticed in [Parrish:2015:051103]_, such a partitioning might result in unphysical dipole; moments at the interfragment boundaries. Imagine, for example, that I-SAPT is used to examine the interaction; of two methyl groups connected by some linker fragment. When the linking bonds are assigned to C, the carbon atoms; of the methyl groups are missing electrons on one of their *sp^3* hybrid or",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:16661,charge,charges,16661,doc/sphinxman/source/fisapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst,2,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency," implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(HF). The Hartree--Fock localized energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY C. The Hartree--Fock energy [E_h] of subsystem C implemented for F/I-SAPT. .. psivar:: SAPT HF(",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:51303,energy,energy,51303,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['energy'],['energy']
Energy Efficiency," in PSI, and its performance for non-covalent interactions; and reaction energies, is discussed in. * ""Accuracy and Efficiency of Coupled-Cluster Theory Using; Density Fitting / Cholesky Decomposition, Frozen Natural Orbitals,; and a T1-Transformed Hamiltonian,"" A. E. DePrince and C. D. Sherrill,; *J. Chem. Theory Comput.* **9**, 2687-2696 (2013).; (doi: `10.1021/ct400250u <https://doi.org/10.1021/ct400250u>`_). Implementation of the asymmetric triples correction for the density-fitted; and cholesky-decomposed coupled-cluster singles and doubles method. * ""A noniterative asymmetric triple excitation correction for the density-fitted; coupled-cluster singles and doubles method: Preliminary applications,""; U. Bozkaya, *J. Chem. Phys.* **144**, 144108 (2016).; (doi: `10.1063/1.4945706 <https://doi.org/10.1063/1.4945706>`_). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles method. * ""Analytic energy gradients for the coupled-cluster singles and doubles method with; the density-fitting approximation,""; U. Bozkaya and C. D. Sherrill, *J. Chem. Phys.* **144**, 174103 (2016).; (doi: `10.1063/1.4948318 <https://doi.org/10.1063/1.4948318>`_). Implementation of analytic gradients for the density-fitted; coupled-cluster singles and doubles with perturbative triples method. * ""Analytic energy gradients for the coupled-cluster singles and doubles; with perturbative triples method with the density-fitting approximation,""; U. Bozkaya and C. D. Sherrill, *J. Chem. Phys.* **147**, 044104 (2017).; (doi: `10.1063/1.4994918 <https://doi.org/10.1063/1.4994918>`_). Mukherjee State-Specific Multi-Reference Coupled Cluster (Mk-MRCC); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; |PSIfour| features production-level Mukherjee-style state-specific; coupled-cluster theory, including perturbative triples and also associated; multi-reference perturbation theories. The theory and |PSIfour|; implementation of these methods is dis",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst:12526,energy,energy,12526,doc/sphinxman/source/introduction.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/introduction.rst,1,['energy'],['energy']
Energy Efficiency," interaction should be smaller because the; perpendicular geometry does not allow much overlap between the monomers.; Hence, the SAPT analysis helps clarify (and quantify) our physical; understanding about the interaction between the two monomers. Potential Surface Scans and Counterpoise Correction Made Easy with Psithon; ==========================================================================. Finally, let's consider an example that shows how the Python driver; in |PSIfour| simplifies some routine tasks. |PSIfour| can interpret; valid Python code in addition to the computational chemistry directives; we've seen in the previous examples; we call this mixture Psithon.; The Python computer language is very easy to pick up, and even users; previously unfamiliar with Python can use it to simplify tasks by; modifying some of the example input files supplied with |PSIfour|; in the :source:`samples` directory. Suppose you want to do a limited potential energy surface scan, such as; computing the interaction energy between two neon atoms at various; interatomic distances. One simple but unappealing way to do this is to; create separate input files for each distance to be studied. Most of; these input files are identical, except that the interatomic distance is; different. Psithon lets you specify all this in a single input file,; looping over the different distances with an array like this:; ``Rvals=[2.5, 3.0, 4.0]``. Let's also suppose you want to do counterpoise (CP) correction to compute interaction energies.; Counterpoise correction involves computing the dimer energy and then; subtracting out the energies of the two monomers, each evaluated in the; dimer basis. Again, each of these computations could be run in a separate; input file, but because counterpoise correction is a fairly standard; procedure for intermolecular interactions, |PSIfour| knows about it and has; a built-in routine to perform counterpoise correction. It only needs to; know what method you want to ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:17475,energy,energy,17475,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,2,['energy'],['energy']
Energy Efficiency," is expected to be the final step, thus restricting the; solution to positive definite spin polarization is not physical. See the; section in [Szabo:1982]_ on methyl radical for an example. Functional Selection; ~~~~~~~~~~~~~~~~~~~~. |PSIfour| features an extensive list of LSDA, GGA, Meta, Hybrid, LRC, and -D; functionals. These can be specified by a variety of means. Perhaps the simplest; is to use the functional name as the energy procedure call::. energy('b3lyp'). Note that if you are running an unrestricted computation, you should set the; |scf__reference| option before the call to ``energy``::. set reference uks; energy('b3lyp'). The functional may also be manually specified by calling ``energy`` (or any driver function); with a ``dft_functional`` argument::. energy('scf', dft_functional = 'b3lyp'). Another alternative is providing a specially crafted `dict`-ionary to the ``dft_functional``; argument::. custom_functional = { ""name"": ""my_unique_name"", ... }; energy('scf', dft_functional = custom_functional). For further details about this so called `dict_func` syntax, see; :ref:`sec:dftdictbuilder`. For hybrid functionals, the fraction of exact exchange is controlled by the; |scf__dft_alpha| option. For the LRC functionals, the fraction of long-range; Hartree--Fock and short-range DFA is controlled by the |scf__dft_omega| option.; Changing these will override the default behavior of the requested functional. A brief summary of some of the more notable functionals in |PSIfour|, and links; to the complete listing of all functionals of each class are presented below:. :ref:`All Functionals <table:dft_all>`; All functionals, including LSDA-only functionals. Note that here and; throughout, functionals which end in `_X` or `_C` are exchange or; correlation only, and should not be used for most production-level; computations. Examples include `PBE_X` and `PBE_C`, which contain the; separate definitions of the PBE exchange and correlation holes. In most cases,; the unit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst:17269,energy,energy,17269,doc/sphinxman/source/dft.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dft.rst,1,['energy'],['energy']
Energy Efficiency," is present.; Charge and multiplicity specifications are encoded in the fragment file; and so are not read from input. Any combination of EFP and QM fragments can be placed in a molecule; even; the oddity below is legitimate. Note that symmetry and reorientation are; automatically turned off when EFP fragments are present (``symmetry c1``; and ``no_com`` and ``no_reorient`` are implied). ::. molecule qmefp {; efp nh3 0.0 0.0 5.0 5 2 8; --; C 0.0 0.0 0.0; O 0.0 1.5 0.0; O 0.0 -1.5 0.0; --; efp h2o 5.0 0.0 0.0 5 2 8; --; He -3.0 4.0 4.0; He -4.0 5.0 4.0; --; efp ch3oh; 1.275 -2.447 -4.673; 0.709 -3.191 -3.592; 2.213 -1.978 -4.343; }. Running EFP ; ~~~~~~~~~~~~. EFP can be invoked in similar fashion as other theories provided in |PSIfour|.; For example, if you want to obtain the EFP interaction energy for benzene and two waters,; simply provide the following::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o 4.0 0.0 0.0 0.0 0.0 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; energy('efp'). This computation involves purely EFP/EFP fragment interactions and is; performed entirely by the LIBEFP library. |PSIfour| can also handle mixed; systems of quantum mechanical (QM) and EFP fragments through the native; :ref:`SCF <sec:scf>` code augmented by calls to the LIBEFP library. For; example, turning one of the waters in the example above into a QM; fragment is shown below. ::. molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0 ; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }; ; set basis 6-31g; energy('scf'). Whenever an EFP fragment is present in the active molecule, the SCF energy; will include EFP contributions. .. warning:: Although the EFP geometry is specified alongside the QM; geometry in a ``molecule name {...}`` block, internally the handling; of EFP is not so clean. In straightforward input files that involve; any number of [molecule block, energy/opt/etc, clean()] portions,; there should be no problem; the energy/opt c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:8076,energy,energy,8076,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,1,['energy'],['energy']
Energy Efficiency," jobs in the same scratch, the; process ID (PID) of the |PSIfour| instance is incorporated into the full file; name; therefore, it is safe to use the same scratch directory for calculations; running simultaneously. Elementary Restart; ==================. The |PSIfour| intermediate files use the following naming scheme ::. psi.PID.name.filenumber. where by default, PID is the process number, name the name of the molecule,; and filenumber is listed in :ref:`content <apdx:psiFiles>`. For those modules providing restart capabilities, the previous file can; be provided through the``restart_file`` option ::. energy('scf',restart_file='./psi.PID.name.filenumber'). Only the filenumber is necessary for the driver to appropriately rename the; file and copy it to the scratch directory where |PSIfour| will expect it.; The restart capabilities of a specific method (if any) are found in that method's documentation. To provide multiple files, pass them as arguments of a Python list ::. energy('scf',restart_file=['./file1.filenumber','./file2.filenumber']). Note that the ``restart_file`` options is only available for energy procedures as of now. Executing |PSIfour| with the :option:`psi4 -m` (for; messy) flag will prevent files being deleted at the end of the run::. psi4 -m. The mechanism for restarting HF/DFT calculations is described in details :ref:`here <sec:scfrestart>`. .. _`sec:save_wfn`:. Saving the Wavefunction; =======================. A core object of |PSIfour| is the Wavefunction (short ``wfn``) object ::. energy, wfn = energy('scf',return_wfn=True). This C++/Python object (:py:class:`psi4.core.Wavefunction`) contains orbital; data, basis set information, result variables and more.; It can be saved either to a numpy file or converted to a python dictionary ::. # write the wavefunction to file; wfn.to_file('my_wfn'). # alternatively store the dict representation of the wavefunction in memory; wfn_dict = wfn.to_file(). In either form, its attributes can be set and edited.",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst:5853,energy,energy,5853,doc/sphinxman/source/external.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/external.rst,1,['energy'],['energy']
Energy Efficiency," linK-2 linK-3; cbs-xtpl-energy-conv ddd-deriv nbody-he-4b ddd-function-kwargs; ); add_subdirectory(${test_name}); endforeach(). # Add internal projects; add_subdirectory(psi4numpy); add_subdirectory(cookbook); add_subdirectory(python); add_subdirectory(json); if(ENABLE_pasture); add_subdirectory(pasture-ccsorttransqt2); message(STATUS ""${Cyan}Found Pasture${ColourReset}""); message(STATUS ""Adding test cases: Psi4 + Pasture""); endif(). message(STATUS ""Adding test cases: Psi4""). ########################### External Project Tests ###########################. # For code that (1) is built or detected in the Psi4 superbuild but isn't; # maintained in the Psi4 codebase and (2) has Psi4-dependent tests _not_ in; # the external codebase, tests should; # * get their own directory in tests (e.g., tests/dftd3); # * have a name that doesn't repeat the exe (e.g., tests/dftd3/energy, not tests/dftd3/dftd3-energy); # * be listed in the test case CMakeLists.txt as addon-testname (e.g., `add_regression_test(dftd3-energy ...`); # * alphabetize the addons. # <<< BSE >>>. if(ENABLE_bse); add_subdirectory(mints2-bse); message(STATUS ""Adding test cases: Psi4 + bse""); endif(). # <<< CFOUR >>>. find_program(CFOUR_EXECUTABLE; NAMES xcfour; DOC ""Path to Stanton and Gauss's xcfour executable""). if(CFOUR_EXECUTABLE); add_subdirectory(cfour); message(STATUS ""${Cyan}Found CFOUR${ColourReset}: ${CFOUR_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + CFOUR""); endif(). # <<< CHEMPS2 >>>. if(ENABLE_CheMPS2); add_subdirectory(chemps2); message(STATUS ""Adding test cases: Psi4 + CheMPS2""); endif(). # <<< DFTD3 >>>. find_program(DFTD3_EXECUTABLE; NAMES s-dftd3 dftd3; DOC ""Path to Grimme's dftd3 executable""). if(DFTD3_EXECUTABLE); add_subdirectory(dftd3); add_subdirectory(sapt0-d); add_subdirectory(fsapt-d); add_subdirectory(fsaptd-terms); message(STATUS ""${Cyan}Found DFTD3${ColourReset}: ${DFTD3_EXECUTABLE}""); message(STATUS ""Adding test cases: Psi4 + DFTD3""); endif(). # <<< DFTD4 >>>. find_progra",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt:7104,energy,energy,7104,tests/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/tests/CMakeLists.txt,1,['energy'],['energy']
Energy Efficiency," load up any EFP portion of that; molecule. This divergent treatment is a stopgap while we determine; how best to handle molecules with different domains. At this time, |PSIfour| is only able to perform pure-efp single-points and; geometry optimizations and mixed qm/efp SCF single-points. .. _`table:libefpauto`:. .. _`table:libefp_methods`:. +-------------------------+----------------------+--------------------------------------------------------------------------+; | name | molecule composition | calls method |; +=========================+======================+==========================================================================+; | efp | pure EFP | EFP interaction energy (IE) on all frags |; + +----------------------+--------------------------------------------------------------------------+; | efp | mixed QM/EFP | EFP IE on EFP frags only |; + +----------------------+--------------------------------------------------------------------------+; | efp | pure QM | *error* |; +-------------------------+----------------------+--------------------------------------------------------------------------+; | scf | pure EFP | *error* |; + +----------------------+--------------------------------------------------------------------------+; | scf | mixed QM/EFP | SCF energy on QM frags w/coupling to EFP frags, plus EFP IE on EFP frags | ; + +----------------------+--------------------------------------------------------------------------+; | scf | pure QM | SCF energy on all frags (normal |Psifour| operation) |; +-------------------------+----------------------+--------------------------------------------------------------------------+. .. index:: EFP; library fragments. .. _`sec:availableEFPFragments`:. Fragment Library; ~~~~~~~~~~~~~~~~. Below are documented the EFP fragments available from the LIBEFP library.; These systems are accessible in ``molecule {...}`` blocks without; additional configuration. ----. .. comment This toctree directive only here to suppress warning",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst:10151,energy,energy,10151,doc/sphinxman/source/libefp.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/libefp.rst,3,['energy'],['energy']
Energy Efficiency," manipulating or writing custom wavefunction files, note; that |PSIfour| expects the numpy file on disk to have the ``.npy`` extension, not, e.g., `.npz`. .. index:: DIIS, MOM, damping. .. _`sec:scfconv`:. Convergence Stabilization; ~~~~~~~~~~~~~~~~~~~~~~~~~. A summary of Psi's supported convergence stabilization techniques is presented below:. DIIS [On by Default]; DIIS uses previous iterates of the Fock matrix together; with an error criterion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be; accomplished via :term:`options <DIIS (SCF)>`.; ADIIS [On by Default]; ADIIS uses previous iterates of the Fock and density matrices to produce an; informed estimate of the next Fock matrix. ADIIS estimates are based on minimizing; an energy estimate rather than zeroing the residual, so this performs best in the early; iterations. By default, Psi will start using ADIIS before blending the ADIIS step with; the DIIS step, eventually using the pure DIIS step. The closely-related EDIIS procedure; may be used instead by setting |scf__scf_initial_accelerator|. This is formally identical; to ADIIS for HF, but the methods will differ for more general DFT.; MOM [Off by Default]; MOM was developed to combat a particular class of convergence failure:; occupation flipping. In some cases, midway though the SCF procedure, a partially; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbital which should be; destined to be a virtual orbital. This results in the virtual orbital being; spuriously occupied for one or more iterations. Sometimes this resolves itself; without help, other times the occupation flips back and forth between two, four,; or more orbitals. This is t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:24695,energy,energy,24695,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['energy'],['energy']
Energy Efficiency," math::; (\mathbf{A} - \mathbf{B})^{\frac{1}{2}}(\mathbf{A} + \mathbf{B})(\mathbf{A} - \mathbf{B})^{\frac{1}{2}} \mathbf{T}_{n}; =; \omega^{2}_{n} \mathbf{T}_{n},. assuming the SCF reference is stable, *i.e.* :math:`(\mathbf{A}-\mathbf{B})` is positive-definite.; The paired vectors :math:`| \mathbf{X}_{n} - \mathbf{Y}_{n}\rangle` are left; eigenvectors and form a biorthonormal set together; with the right eigenvectors :math:`| \mathbf{X}_{n} + \mathbf{Y}_{n}\rangle`. The algorithm for the subspace iteration Hamiltonian solver implemented in |PSIfour|; was first described by Stratmann *et al.* [stratmann:1998]_.; As already mentioned, the formation and storage of the matrix-vector products; :math:`(\mathbf{A}+\mathbf{B})\mathbf{b}_{i}` and; :math:`(\mathbf{A}-\mathbf{B})\mathbf{b}_{i}` for all trial vectors :math:`\mathbf{b}_{i}`; are the most compute- and memory-intensive operations in the Hamiltonian solver.; These matrix-vector products are equivalent to building generalized Fock; matrices and thus use the efficient :math:`JK` build infrastructure of |PSIfour|. The excitation energies and eigenvectors can then be used to compute transition moments, such as; electric and magnetic transition dipole moments, and spectroscopic intensities,; such as oscillator strengths and rotatory strengths [Pedersen1995-du]_, [Lestrange2015-xn]_.; For example, |PSIfour| will compute compute oscillator strengths from; the MO basis electric dipole moment integrals, :math:`\mathbf{\mu}_{u}`, and the right; excitation vectors, :math:`|\mathbf{X}_{n}+\mathbf{Y}_{n}\rangle`:. .. math::; f = \frac{2}{3} \omega_{n} \sum_{u=x,y,z}\sum_{ia}|(\mathbf{X}_{n}+\mathbf{Y}_{n})_{ia}\mu_{ai, u}|^{2}. Psithon keywords; ~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/scf__tdscf_states.rst; .. include:: autodir_options_c/scf__tdscf_triplets.rst; .. include:: autodir_options_c/scf__tdscf_tda.rst; .. include:: autodir_options_c/scf__tdscf_r_convergence.rst; .. include:: autodir_options_c/scf__tdscf_maxit",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tdscf.rst:9071,efficient,efficient,9071,doc/sphinxman/source/tdscf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tdscf.rst,1,['efficient'],['efficient']
Energy Efficiency," molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }; ; dimer = psi4.get_active_molecule() ; ; set {; reference uhf; scf_type df; basis cc-pVDZ; df_basis_sapt cc-pVDZ-ri; guess sad; }; ; dimer = psi4.get_active_molecule(); ; set df_ints_io save; psi4.IO.set_default_namespace('dimer'); Edim, wfn_dimer = energy('scf',molecule=dimer,return_wfn=True); set df_ints_io load; ; monomerA = dimer.extract_subsets(1,2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); set {; stability_analysis follow; }; EmonA, wfn_monA = energy('scf',molecule=monomerA,return_wfn=True); ; monomerB = dimer.extract_subsets(2,1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); set {; stability_analysis none; }; EmonB, wfn_monB = energy('scf',molecule=monomerB,return_wfn=True); ; psi4.IO.change_file_namespace(97, 'monomerB', 'dimer'); psi4.IO.set_default_namespace('dimer'); ; aux_basis = psi4.core.BasisSet.build(wfn_dimer.molecule(), ""DF_BASIS_SAPT"",; psi4.core.get_global_option(""DF_BASIS_SAPT""),; ""RIFIT"", psi4.core.get_global_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis); ; psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be tweaked for individual fragments.; For optimal efficiency, the example uses ``set df_ints_io save`` to keep file 97,; which contains the three-index integrals for density fitting. ``set df_ints_io load``; then instructs the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use ``psi4.IO.set_default_namespace`` to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; ``psi4.IO.change_fil",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:18849,energy,energy,18849,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['energy'],['energy']
Energy Efficiency," no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:324223,energy,energy,324223,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:325774,energy,energy,325774,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," non-interacting and; Hartree--Fock-interacting moieties. We have developed a set of template; ``.pymol`` scripts to help with this process. These can be obtained by running::. >>> copy_pymol2.py. and then in PyMol::. >>> @run.pymol. This last command runs all of the individual ``.pymol`` files (*e.g.*,; ``DA.pymol``), which in turn load in the molecule and cube file data; (contained in the ``.cube`` file), set up the visualization, and render a; ``.png`` image of the scene. Generally the view orientation and some specific; details of the ``.pymol`` files require some small tweaks to permit; publication-quality renderings. .. image:: /VA.png; :align: center; :scale: 50%; :alt: ESP of monomer A. Adding Point Charges to F/I-SAPT Computations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. Citation: Alenaizan, A; Cheney, D. L.; Sherrill, C. D. Electrostatically embedded; .. symmetry adapted pertubration theory. In preparation. Point charges can be added to the interacting subsystems A and B as well; as to the ``linking`` fragment C. Briefly, the interaction between the point charges in A(B); and fragment B(A) enters the SAPT0 interaction energy. It explicitly affects the electrostatics; and induction components, and implicitly affects other SAPT0 components by polarizing the orbitals.; If point charges are present in both subsystems A and B, an additional charge-charge interaction; term is also added to the electrostatic energy. When point charges are assigned to subsystem C, the point; charges in C only polarize the orbitals in both fragment A and B. However, the presence of charges in C does not; directly contribute to the SAPT0 interaction energy. Examples :srcsample:`fsapt-ext-abc` and :srcsample:`fsapt-ext-abc2`; illustrate the use of point charges in F/I-SAPT procedure. Link Orbital Partitioning in I-SAPT; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The assignment of the A-C and B-C linking electron pairs is controlled by the |fisapt__fisapt_link_assignment|; k",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst:16005,charge,charges,16005,doc/sphinxman/source/fisapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fisapt.rst,1,['charge'],['charges']
Energy Efficiency," occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:138063,energy,energy,138063,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: temporary: cc(t) disabled w/o qc_module=occ in dfocc until further optimization '}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 's",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:139482,energy,energy,139482,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv ccd by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no conv ccd by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:88058,energy,energy,88058,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won't allow them. If you're determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. - The first line for each xyz file should be the number of atoms in the system. - The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment). - The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what's the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. * Run script :source:`psi4/share/psi4/scripts/ixyz2database.py`. Move into the directory where all your xyz files are located. Run the; script. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. * Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into :source:`psi4/share/psi4/databases`.; Alternately, append the directory containing your new database into; :envvar:`PSIPATH`. ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickadddatabase.rst:3952,charge,charge,3952,doc/sphinxman/source/quickadddatabase.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/quickadddatabase.rst,2,['charge'],['charge']
Energy Efficiency," of the very popular aug-cc-pVDZ basis set); that |PSIfour| correctly guesses that we want the jun-cc-pVDZ-JKFIT; auxiliary basis for the Hartree--Fock, and the jun-cc-pVDZ-RI basis set; for the SAPT procedure. To speed up the computation a little, we also tell the SAPT procedure to; freeze the core electrons with ``freeze_core True``. The SAPT; procedure is invoked with the simple call, ``energy('sapt0')``. This; call knows to automatically run two monomer computations and a dimer; computation and then use these results to perform the SAPT analysis. The; various energy components are printed at the end of the output, in addition; to the total SAPT0 interaction energy. An explanation of the various; energy components can be found in the review by Jeziorski, Moszynski, and; Szalewicz [Jeziorski:1994:1887]_, and this is discussed in more detail; in the SAPT section later in this manual. For now, we'll note that most of; the SAPT energy components are negative; this means those are attractive; contributions (the zero of energy in a SAPT computation is defined as; non-interacting monomers). The exchange contributions are positive; (repulsive). In this example, the most attractive contribution between; ethylene and acetylene is an electrostatic term of -2.12 |kcalpermol|; (``Elst10,r`` where the 1 indicates the first-order; perturbation theory result with respect to the intermolecular interaction,; and the 0 indicates zeroth-order with respect to intramolecular electron; correlation). The next most attractive contribution is the ``Disp20``; term (2nd order intermolecular dispersion, which looks like an MP2 in which; one excitation is placed on each monomer), contributing an attraction of; -1.21 |kcalpermol|. It is not surprising that the electrostatic; contribution is dominant, because the geometry chosen for this example has the; acetylene perpendicular to the ethylene, with the acetylene hydrogen; pointing directly at the double bond in ethylene; this will be attractiv",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:15271,energy,energy,15271,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,2,['energy'],['energy']
Energy Efficiency," or if you don't want the bother of dealing with `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_, just write an ordinary docstring. It will get slurped into the documentation in plain text. - Your python function should follow `PEP8 <http://www.python.org/dev/peps/pep-0008/>`_ conventions (without the line-length restriction). I'm aiming for files to pass the line below, unless for good reason. The second line is for database Python files. >>> pep8.py -r --ignore=E501 pythonfile.py; >>> pep8.py -r --ignore=E501,E221,E222,E241,E201,E202 databasefile.py. - Your python function should not prevent any test case from passing. A test case(s) should be written and checked in for any major python function, so that others do not break your code. If most of your work was on the python (as opposed to c++) side, the test case prefix pywrap\_ is suggested. - Be sure to set any new PSI variables through lines like those below. Especially if the function returns an energy, set the 'current energy' variable. This last is needed to communicate with the optimizer. ::. psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25); psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25). - Once your python function is fairly stable on its own, it's potential for interoperability with energy()/opt()/cp()/db()/cbs()/etc. should be evaluated. If it makes physical sense that it should work, you should strive to make that interoperability a reality. Some steps:. - If any interoperability is possible, define an argument xx_func, where xx is a short name for your function. Add near the top of your function code like the below (less the final two lines). The net result of this code is that if the user specifies no \*_func arguments, then energy() gets called. If the user defines xx_func, then its value gets called. If the user defines func, then its value gets reassigned to xx_func, func itself is deleted, and xx_func() gets called",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst:5245,energy,energy,5245,doc/sphinxman/source/attic/bestpractices_py.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/bestpractices_py.rst,2,['energy'],['energy']
Energy Efficiency," order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for doing this in DETCI is inefficient compared to optimized; lower-order coupled-cluster codes and should not be used for CCSD,; where the CCENERGY module is much more efficient. For higher-order; CC (like CCSDT and beyond), the code is also not as efficient as the; MRCC code by K\ |a_acute|\ llay, to which |PSIfour| can interface (see Section; :ref:`sec:mrcc`); however, it may allow certain truncations of the model; space that might not be available presently in MRCC. For very small; systems, the code can be useful for testing of, for example, CCSDTQ or; its active-space CCSDtq analog [Piecuch:1999:6103]_. To perform arbitrary-order coupled-cluster, set the DETCI; option |detci__cc| to TRUE, and set; |detci__cc_ex_level| (note: not |detci__ex_level|); to the desired coupled-cluster excitation level, and invoke ; ``energy('detci')``. Various other DETCI options have a similar; option for coupled-cluster, usually named beginning with CC. The full; list of options is given in Appendix :ref:`apdx:detci`.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:14768,efficient,efficient,14768,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,3,"['efficient', 'energy']","['efficient', 'energy']"
Energy Efficiency," point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH-DISP20(S^INF) ENERGY. A dispersion-classified SAPT term energy [E_h] implemented for SAPT0. See :ref:`sec:saptinf`. .. psivar:: SAPT SAME-SPIN DISP20 ENERGY; SAPT SAME-SPIN EXCH-DISP20 ENERGY. The portion of :psivar:`SAPT DISP20 ENERGY` or; :psivar:`SAPT EXCH-DISP20 ENERGY` resulting from; from same-spin or triplet doubles correlations. .. psivar:: SAPT HF(2) ENERGY ABC(HF). The total Hartree--Fock energy [E_h] of the supersystem implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(0). The Hartree--Fock energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(0). The Hartree--Fock energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(0). The Hartree--Fock energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY B(0). The Hartree--Fock energy [E_h] of subsystem B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AC(HF). The Hartree--Fock localized energy [E_h] of subsystems A and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY BC(HF). The Hartree--Fock localized energy [E_h] of subsystems B and C implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY AB(HF). The Hartree--Fock localized energy [E_h] of subsystems A and B implemented for F/I-SAPT. .. psivar:: SAPT HF(2) ENERGY A(HF). The Hartree--Fock localized energy [E_h] of subsystem A implemented for F/I-SAPT. .. psivar:",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:51074,energy,energy,51074,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['energy'],['energy']
Energy Efficiency," portion [E_h] of the named correlation energy; from same-spin or triplet doubles correlations. .. psivar:: MP2 OPPOSITE-SPIN CORRELATION ENERGY; MP2.5 OPPOSITE-SPIN CORRELATION ENERGY; MP3 OPPOSITE-SPIN CORRELATION ENERGY; CEPA(0) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(1) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(2) OPPOSITE-SPIN CORRELATION ENERGY; CEPA(3) OPPOSITE-SPIN CORRELATION ENERGY; CISD OPPOSITE-SPIN CORRELATION ENERGY; QCISD OPPOSITE-SPIN CORRELATION ENERGY; ACPF OPPOSITE-SPIN CORRELATION ENERGY; AQCC OPPOSITE-SPIN CORRELATION ENERGY; REMP2 OPPOSITE-SPIN CORRELATION ENERGY; LCCD OPPOSITE-SPIN CORRELATION ENERGY; CCD OPPOSITE-SPIN CORRELATION ENERGY; LCCSD OPPOSITE-SPIN CORRELATION ENERGY; CCSD OPPOSITE-SPIN CORRELATION ENERGY; OMP2 OPPOSITE-SPIN CORRELATION ENERGY; OMP2.5 OPPOSITE-SPIN CORRELATION ENERGY; OMP3 OPPOSITE-SPIN CORRELATION ENERGY; OREMP2 OPPOSITE-SPIN CORRELATION ENERGY; OLCCD OPPOSITE-SPIN CORRELATION ENERGY. The unscaled portion [E_h] of the named correlation energy; from opposite-spin or singlet doubles correlations. .. psivar:: MRPT TOTAL ENERGY; MP2-CCSD TOTAL ENERGY; MRCC TOTAL ENERGY. Energies [E_h] from correlated multi-reference theories. .. psivar:: MULLIKEN CHARGES. Property of partial atomic charges [e] by the method of Mulliken, (nat,). .. psivar:: NAUX (SCF); NAUX (CC). Convenience storage of number of functions [] in the auxiliary basis; set for named stage of the calculation. .. psivar:: NBODY (i, j, ..., k)@(a, b, ..., c) TOTAL ENERGY. The total energy [E_h] of a component of the requested N-Body energy.; The first parenthetical list over *i*, *j*, ..., *k* enumerates; molecular fragments included in the computation in 1-indexed,; input-file order, while the second enumerates list over *a*, *b*,; ..., *c* enumerates which fragments contribute basis functions to the; computation. For example, ``(1, 2)@(1, 2, 3, 4)`` indicates that the; fragments 1 and 2 are explicitly included in the energy computation,; with basis functions from",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:44436,energy,energy,44436,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['energy'],['energy']
Energy Efficiency," psivar:: QCISD TOTAL ENERGY; QCISD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles level; of theory. .. psivar:: QCISD(T) TOTAL ENERGY; QCISD(T) CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the quadratic configuration interaction singles and doubles with; perturbative triples correction level of theory. .. psivar:: QCISD(T) CORRECTION ENERGY. The quadratic configuration interaction singles and doubles perturbative; triples correction [E_h]. .. psivar:: REMP2 TOTAL ENERGY; REMP2 CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the retaining-the-excitation-degree |MollerPlesset| hybrid perturbation; theory level. .. psivar:: SAPT DISP ENERGY; SAPT ELST ENERGY; SAPT EXCH ENERGY; SAPT IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; requested SAPT level of theory. The sum of these four components yields; :psivar:`SAPT TOTAL ENERGY`. .. psivar:: SAPT TOTAL ENERGY; SAPT ENERGY. The total electronic interaction energy [E_h] for the requested SAPT; level of theory. .. psivar:: SAPT ELST10,R ENERGY. An electrostatics-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT ELST EXTERN-EXTERN ENERGY. Electrostatic interaction [E_h] between the point charges in fragments; A and B in F/I-SAPT. .. psivar:: SAPT EXCH10 ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT EXCH10(S^2) ENERGY. An exchange-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT IND20,R ENERGY; SAPT EXCH-IND20,R ENERGY; SAPT IND20,U ENERGY; SAPT EXCH-IND20,U ENERGY. An induction-classified SAPT term energy [E_h] implemented for SAPT0. .. psivar:: SAPT DISP20 ENERGY; SAPT EXCH-DISP20 ENERGY. A dispersion-classified SA",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:49639,energy,energy,49639,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['energy'],['energy']
Energy Efficiency," psivar:: SAPT2+(CCD) TOTAL ENERGY; SAPT2+(3)(CCD) TOTAL ENERGY; SAPT2+3(CCD) TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory that incorporates coupled-cluster dispersion. .. psivar:: SAPT2+DMP2 DISP ENERGY; SAPT2+DMP2 ELST ENERGY; SAPT2+DMP2 EXCH ENERGY; SAPT2+DMP2 IND ENERGY; SAPT2+(3)DMP2 DISP ENERGY; SAPT2+(3)DMP2 ELST ENERGY; SAPT2+(3)DMP2 EXCH ENERGY; SAPT2+(3)DMP2 IND ENERGY; SAPT2+3DMP2 DISP ENERGY; SAPT2+3DMP2 ELST ENERGY; SAPT2+3DMP2 EXCH ENERGY; SAPT2+3DMP2 IND ENERGY; SAPT2+(CCD)DMP2 DISP ENERGY; SAPT2+(CCD)DMP2 ELST ENERGY; SAPT2+(CCD)DMP2 EXCH ENERGY; SAPT2+(CCD)DMP2 IND ENERGY; SAPT2+(3)(CCD)DMP2 DISP ENERGY; SAPT2+(3)(CCD)DMP2 ELST ENERGY; SAPT2+(3)(CCD)DMP2 EXCH ENERGY; SAPT2+(3)(CCD)DMP2 IND ENERGY; SAPT2+3(CCD)DMP2 DISP ENERGY; SAPT2+3(CCD)DMP2 ELST ENERGY; SAPT2+3(CCD)DMP2 EXCH ENERGY; SAPT2+3(CCD)DMP2 IND ENERGY. Respectively, the dispersion, electrostatics, exchange, and induction; components of the total electronic interaction energy [E_h] for the; given SAPT level of theory that incorporates MP2 induction correction.; The sum of these four components yields the :samp:`{SAPT Level} TOTAL ENERGY`. .. psivar:: SAPT2+DMP2 TOTAL ENERGY; SAPT2+(3)DMP2 TOTAL ENERGY; SAPT2+3DMP2 TOTAL ENERGY; SAPT2+(CCD)DMP2 TOTAL ENERGY; SAPT2+(3)(CCD)DMP2 TOTAL ENERGY; SAPT2+3(CCD)DMP2 TOTAL ENERGY. The total electronic interaction energy [E_h] for the labeled SAPT level; of theory that incorporates MP2 induction correction. .. psivar:: SCF ITERATIONS; ADC ITERATIONS; CCSD ITERATIONS; OPTIMIZATION ITERATIONS. Number of iterations [] in the named iterative method or optimization procedure. .. psivar:: SCF DIPOLE. Dipole array [e a0] for the SCF stage, (3,). .. psivar:: SCF QUADRUPOLE. Redundant quadrupole array [e a0^2] for the SCF stage, (3, 3). .. psivar:: SCF TOTAL ENERGY. The total electronic energy [E_h] of the SCF stage of the calculation.; The :samp:`{method} CORRELATION ENERGY` variables from subsequent stages",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:56906,energy,energy,56906,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['energy'],['energy']
Energy Efficiency," reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{| \textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn} | }. .. psivar:: db_name DATABASE MEAN SIGNED DEVIATION. The mean deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \frac{1}{n}\sum_{rxn}^{n}{\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn}}. .. psivar:: db_name DATABASE ROOT-MEAN-SQUARE DEVIATION. The rms deviation [\ |kcalpermol|\ ] of the requested method *name*; from the stored reference values for the requested reactions in; database *db_name*. If no reference is available, this will be a large; and nonsensical value. .. math:: \sqrt{\frac{1}{n}\sum_{rxn}^{n}{(\textsf{\textsl{name}}_{rxn}-\text{REF}_{rxn})^2}}. .. psivar:: DCT LAMBDA ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 2-electron cumulant's contribution contribution to the reduced; density matrix energy expression. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT SCF ENERGY. An energy term in density cumulant theory [E_h]. This term is the; 1-electron reduced density matrix (1RDM) contribution to the reduced; density matrix energy expression, plus the contribution of the; antisymmetrized product of 1RDMs. Not recommended for interpretative; use except by reduced density matrix specialists. .. psivar:: DCT THREE-PARTICLE ENERGY. The three-particle correlation energy correction [E_h] in density cumulant; theory, akin to :psivar:`(T) CORRECTION ENERGY` in coupled-cluster. .. psivar:: DCT TOTAL ENERGY. Total energy [E_h] in density cumulant theory. Sum of :psivar:`DCT SCF ENERGY`,; :psivar:`DCT LAMBDA ENERGY`, and :psivar:`DCT THREE-PARTICLE ENERGY` when present. .. psivar:: DETCI AVG DVEC NORM. A measure of c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:29875,energy,energy,29875,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,1,['energy'],['energy']
Energy Efficiency," reference to obtain a guess for the DCT orbitals. After SCF is; converged, the program will perform the energy computation using the ODC-12; method. By default, simultaneous algorithm will be used for the solution of; the equations. One can also request to perform geometry; optimization following example below::. molecule { ; H; H 1 1.0; }. set basis cc-pvdz; ; optimize('dct'). The ``optimize('dct')`` call will first perform all of the procedures; described above to obtain the ODC-12 energy. After that, the ODC-12 analytic; gradients code will be executed and geometry optimization will be performed. . .. _`sec:dctrecommend`:. Recommendations; ~~~~~~~~~~~~~~~. Here is a list of recommendations for the DCT module:. * Generally, the use of the simultaneous algorithm together with the; |dct__ao_basis| ``DISK`` option is recommended (set by default). * In cases when available memory is insufficient, the use of the |dct__ao_basis| ``DISK`` option; is recommended. This will significantly reduce the memory requirements. However, when; used together with the two-step algorithm, this option can significantly; increase the cost of the energy computation. * In cases when the oscillatory convergence is observed before the DIIS; extrapolation is initialized, it is recommended to increase the threshold for; the RMS of the density cumulant or orbital update residual, below which the; DIIS extrapolation starts. This can be done by setting the; |dct__diis_start_convergence| option to the value greater than; :math:`10^{-3}` by one or two orders of magnitude (*e.g.* :math:`10^{-2}` or; :math:`10^{-1}`). This can be particularly useful for computations using the; ODC methods, because it can greatly reduce the number of iterations. * If oscillatory convergence is observed for atoms or molecules with high; symmetry, it is recommended to use the quadratically-convergent algorithm. * When using the quadratically-convergent algorithm for the closed-shell molecules, it; is recommended to set",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst:17629,reduce,reduce,17629,doc/sphinxman/source/dct.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/dct.rst,1,['reduce'],['reduce']
Energy Efficiency," reference) and for Z-averaged perturbation theory; (ZAPTn, open-shell systems with a ROHF reference). However, please; note that these computations are essentially doing high-order CI (up to; full CI) computations to obtain these results, and hence they will only; be possible for very small systems (generally a dozen electrons or less). The simplest way to run high-order perturbation theory computations is to; call, *e.g.*, ``energy('mp10')`` to invoke a MP10 computation or; ``energy('zapt25')`` to invoke a ZAPT25 computation. This will; automatically set several additional user options to their appropriate; values. The program uses the Wigner (2n+1) rule to obtain higher-order; energies from lower-order wavefunctions. For the interested reader, the additional user options that are; automatically set up by the calls above are as follows. A call like; ``energy('mp10')`` sets |detci__mpn| to TRUE.; The program uses the Wigner (2n+1) rule by default; (|detci__mpn_wigner| = TRUE); and figures out what order of wavefunction is; necessary to reach the desired order in the energy. The program then; sets |detci__max_num_vecs| to the required order in the; wavefunction.; By default, the requested n-th order energy is saved as the current; energy to the process environment. ZAPTN works essentially the same; way for an ROHF reference. .. index:: ; pair: CI; arbitrary-order coupled-cluster theory. Arbitrary Order Coupled-Cluster Theory; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. *This DETCI-based version of this feature is not yet released. However,; the current version of the code does include an interface to*; :ref:`Kallay's MRCC <sec:mrcc>` *code.*. The DETCI module is also capable of computing arbitrary-order; coupled-cluster energies, using an approach similar to that of Hirata; and Bartlett [Hirata:2000:216]_, or of Olsen [Olsen:2000:7140]_.; Notably, the approach in DETCI also allows arbitrary-order ; *active space* coupled-cluster procedures. The general algorithm; for do",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:13689,energy,energy,13689,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['energy'],['energy']
Energy Efficiency," rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:25301,energy,energy,25301,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," root *m* to root *n*,; and the transition is of irrep *h*.; DFT functional labeled if canonical. .. psivar:: AQCC DIPOLE. Dipole array [e a0] for the averaged quadratic coupled-cluster level of theory, (3,). .. psivar:: AQCC QUADRUPOLE. Redundant quadrupole array [e a0^2] for the averaged quadratic coupled-cluster level of theory, (3, 3). .. psivar:: AQCC TOTAL ENERGY; AQCC CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the averaged quadratic coupled-cluster level of theory.; .. psivar:: BRUECKNER CONVERGED. Value 1 (0) when the Brueckner orbitals have (have not) converged. .. psivar:: CBS NUMBER; NBODY NUMBER; FINDIF NUMBER. Number of tasks [] the named procedure performs. These are immediate; tasks, so if procedures are nested, the total number of tasks is; the product. .. psivar:: CBS TOTAL ENERGY; CBS CORRELATION ENERGY; CBS REFERENCE ENERGY. The total electronic energy [E_h] and its breakdown into reference total; energy [E_h] and correlation correction components [E_h] for the compound; method requested through cbs(). .. psivar:: CCname ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (IN h) TOTAL ENERGY; TD-fctl ROOT n (IN h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n* within irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n (h) TOTAL ENERGY; TD-fctl ROOT n (h) TOTAL ENERGY. The total electronic energy [E_h] for the requested theory and root *n*, which is of irrep *h* (*n* starts at 0).; DFT functional labeled if canonical. .. psivar:: CCname ROOT n TOTAL ENERGY - h TRANSITION; TD-fctl ROOT n TOTAL ENERGY - h TRANSITION. The total electronic energy [E_h] for the requested theory and root *n*, and the transition is of irrep *h*, (*n* starts at 0). .. psivar:: CCname ROOT n ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:9605,energy,energy,9605,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,2,['energy'],['energy']
Energy Efficiency," scaling the uncoupled term for; :math:`E_{exch-ind,resp}^{(30)}`. S^inf Keywords; ~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__do_ind_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_disp_exch_sinf.rst; .. include:: autodir_options_c/sapt__do_ind30_exch_sinf.rst. .. _`sec:saptd`:. SAPT0-D; ~~~~~~~. In SAPT0, the computation of :math:`E_{disp}^{(20)} + E_{exch-disp}^{(20)}` represents; the computational bottleneck. One can avoid this bottleneck by replacing these; dispersion terms with the empirical D3 corrections developed by Grimme.; ; :ref:`Grimme's dispersion corrections are discussed here. <sec:dftd3>`. The corresponding method, termed SAPT0-D, thus relies on empirically fit parameters; specific to SAPT0/jun-cc-pVDZ. While SAPT0-D can be used with any of the -D ; variants using default parameters optimized for Hartee--Fock interaction energies, ; we recommend using the refit parameters with Becke-Johnson damping, as described in; [Schriber:2021:234107]_. Again, use of SAPT0-D with a basis set other than; jun-cc-pVDZ is not tested and not guaranteed to give meaningful results without; refitting the dispersion parameters. ; A simple water dimer computation using SAPT0-D may look like::. 	molecule water_dimer {; 	 0 1; 	 O -1.551007 -0.114520 0.000000; 	 H -1.934259 0.762503 0.000000; 	 H -0.599677 0.040712 0.000000; 	 --; 	 0 1; 	 O 1.350625 0.111469 0.000000; 	 H 1.680398 -0.373741 -0.758561; 	 H 1.680398 -0.373741 0.758561; 	; 	 units angstrom; 	 no_reorient; 	 symmetry c1; 	}; 	; 	set basis jun-cc-pvdz. 	energy('sapt0-d3mbj') # runs the recommended dispersion correction; energy('sapt0-d3') # tests an alternative damping scheme/parameterization. Given the naturally pairwise-atomic nature of these empirical dispersion corrections,; integration with existing FSAPT functionality is also available simply by calling; ``energy(""fsapt0-d3mbj"")``. See :ref:`FSAPT <sec:fisapt>` documentation for more details on using FSAPT; for functional group analyses.; ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:47071,energy,energy,47071,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,3,['energy'],['energy']
Energy Efficiency," sense to use; the single-basis method. Larger Calculations; -------------------. Here are a few recommendations for carrying out extended integral-direct MP2 and; MP2-R12 calculations with |PSIfour|: . * While the integral-direct MP2 algorithm doesn't need any; significant disk storage,; the integral-direct algorithm for the MP2-R12 energy; stores the transformed integrals to disk, hence very large; computations will require a lot of disk space. In general; the storage requirement is :math:`16 o^2N^2` bytes, where :math:`o`; is the number of occupied orbitals, and :math:`N` is the size of the basis. * If there is not enough memory to perform the computation in one pass,; the program will do multiple passes through the entire set of integrals,; hence your computation will run that many times longer.; In such case, find the machine with the most memory and processors available. * On SMP machines, set the {\tt NUM\_THREADS} to the number of; processors available for the job, or, if all processors are allocated for; your job, set {\tt NUM\_THREADS} to {\em twice} the number of processors; you have. Modern operating systems schedulers are usually very efficient; at handling multithreaded programs, so the overhead of thread context; switching is not significant, but using more threads may lead to better; load balancing, and lower execution times. For example, on a 32-processor; IBM eServer p690 we found that the optimal number of threads was 128.; For the optimal performance, do a few runs with different number of threads; and see which number works best.; Avoid excessively large; number of threads, as this descreases the net amount of memory available to; the computation and thus may increase the number of passes. . * Set the {\tt MEMORY} keyword to the 90% of the available physical; memory, at most. There is a small amount of overhead associated with the; integral-direct algorithms that is not accounted for by the internal memory; handling routines. * The implementation",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst:6974,allocate,allocated,6974,doc/sphinxman/source/attic/mp2.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/mp2.rst,1,['allocate'],['allocated']
Energy Efficiency," specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; length gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 SPECIFIC ROTATION (VEL) @ xNM; CCSD SPECIFIC ROTATION (VEL) @ xNM. The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 SPECIFIC ROTATION (MVG) @ xNM; CCSD SPECIFIC ROTATION (MVG) @ xNM. The specific rotation [deg/(dm (g/cm^3))] calculated at the CC level in the; modified velocity gauge for a given (x) wavelength, (x) rounded to nearest integer. .. psivar:: CC2 ROTATION (LEN) ORIGIN-DEPENDENCE @ xNM; CCSD ROTATION (LEN) ORIGIN-DEPENDENCE @ xNM. The origin-dependence of the CC specific rotation in deg/[dm (g/cm^3)]/bohr and the; length gauge, computed at (x) wavelength, (x) rounded to nearest integer. .. psivar:: CCD TOTAL ENERGY; CCD CORRELATION ENERGY. The total electronic energy [E_h] and correlation energy component [E_h]; for the coupled-cluster doubles level of theory. .. psivar:: CC ALPHA-ALPHA PAIR ENERGIES; CCSD ALPHA-ALPHA PAIR ENERGIES; CC2 ALPHA-ALPHA PAIR ENERGIES; CC3 ALPHA-ALPHA PAIR ENERGIES; MP2 ALPHA-ALPHA PAIR ENERGIES. Restricted-reference same-spin pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC ALPHA-BETA PAIR ENERGIES; CCSD ALPHA-BETA PAIR ENERGIES; CC2 ALPHA-BETA PAIR ENERGIES; CC3 ALPHA-BETA PAIR ENERGIES; MP2 ALPHA-BETA PAIR ENERGIES. Restricted-reference opposite-spin (alpha first) pair energies for coupled-cluster; theories. Size number of active doubly occupied orbitals, square. .. psivar:: CC SINGLET PAIR ENERGIES; CCSD SINGLET PAIR ENERGIES; CC2 SINGLET PAIR ENERGIES; CC3 SINGLET PAIR ENERGIES; MP2 SINGLET PAIR ENERGIES. Restricted-reference singlet-adapted pair energies for coupled-cluster theories.; Size number of active doubly occupied orbitals, square. .. psivar:: CC TRIPLET PAIR ENERGIES; CCSD",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst:19228,energy,energy,19228,doc/sphinxman/source/glossary_psivariables.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/glossary_psivariables.rst,2,['energy'],['energy']
Energy Efficiency," than 10**(-n). The ; default is 4 for energy calculations and 7 for gradients. Note that; this is a different convergence criterion than for the \PSIdetci\; program itself. These can be differentiated, if changed by the user,; by placing the {\tt CONVERGENCE} keywords within separate sections of; input, such as {\tt detcas: ( convergence = x )}. ENERGY\_CONVERGENCE = integer; Convergence desired on the total MCSCF energy. The default is 7.; \item[RESTRICTED\_DOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of lowest energy doubly occupied orbitals in each irreducible; representation from which there will be no excitations. ; These orbitals are optimized in the MCSCF.; The Cotton ordering of the irredicible representations is used.; The default is the zero vector. RESTRICTED\_UOCC = (integer array); Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of highest energy unoccupied orbitals in each irreducible; representation into which there will be no excitations.; These orbitals are optimized in the MCSCF.; The default is the zero vector. FROZEN\_DOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of lowest energy doubly occupied orbitals in each irreducible; representation from which there will be no excitations. ; These orbitals are literally frozen and are not optimized in the MCSCF;; usually one wishes to use {\tt RESTRICTED\_DOCC} instead.; The current version of the program does not allow both; {\tt RESTRICTED\_DOCC} and {\tt FROZEN\_DOCC}.; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The Cotton ordering of the irredicible representations is used.; The default is the zero vector. FROZEN\_UOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of highest energy unoccupied orbitals in each irreducible; representation into which there will be no",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:5540,energy,energy,5540,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['energy'],['energy']
Energy Efficiency," than 2 or less than 0, hence may violate the N-representability condition. They further ; discussed that the orbital response equations generally have a singularity problem at the unrestriction point ; where spin-restricted orbitals become unstable to unrestriction. This singularity yields to extremely large or ; small eigenvalues of the one-particle density matrix (OPDM). These abnormal eigenvalues may lead to unphysical ; molecular properties such as vibrational frequencies. However, orbital-optimized MP2 (also MP3); will solve this N-representability problem by disregarding orbital response contribution of one-particle; density matrix. . Although the performance of coupled-cluster singles and doubles (CCSD) and orbital-optimized ; CCD (OD) is similar, the situation is different in the case of triples corrections, especially at stretched ; geometries [Bozkaya:2012:odtl]_. Bozkaya and Schaefer demonstrated that orbital-optimized coupled cluster based ; triple corrections, especially those of asymmetrics, provide significantly better potential energy curves than ; CCSD based triples corrections. . A lot of the functionality in OCC has been enabled with Density Fitting (DF) and Cholesky ; Decomposition (CD) techniques, which can greatly speed up calculations and reduce memory; requirements for typically negligible losses in accuracy. **NOTE**: As will be discussed later, all methods with orbital-optimization functionality have non-orbital ; optimized counterparts. Consequently, there arise two possible ways to call density-fitted MP2. In most; cases, users should prefer the DF-MP2 code described in the :ref:`DF-MP2 <sec:dfmp2>` section because it is; faster. If gradients are needed (like in a geometry optimization), then the procedures outlined hereafter; should be followed.; In general, choose the desired method, reference, and ERI type (*e.g.*,; ``set reference uhf``, ``set mp2_type df``, ``opt('mp2')``) and the most; efficient module will be selected automaticall",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst:4379,energy,energy,4379,doc/sphinxman/source/occ.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/occ.rst,1,['energy'],['energy']
Energy Efficiency," the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_s",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5801,energy,energy,5801,doc/sphinxman/source/add_tests.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst,1,['energy'],['energy']
Energy Efficiency," the input; file. The next section, beginning with ``for R in Rvals:``, loops over the; interatomic distances, ``R``, in our array ``Rvals``. In Python,; loops need to be indented, and each line in the loop has to be indented; by the same amount. The first line in the loop, ``dimer.R = R``,; sets the Z-matrix variable ``R`` of the molecule called ``dimer``; to the ``R`` value extracted from the ``Rvals`` array. The next line,; ``ecp[R] = energy('ccsd(t)', bsse_type='cp')``, computes the counterpoise-corrected; CCSD(T) energy and places it in the ``ecp`` dictionary with ``R`` as; the index. Note we didn't need to specify ghost atoms, and we didn't need; to call the monomer and dimer computations separately. The built-in; Psithon function :py:func:`~psi4.driver.driver_nbody.nbody` does it all for us, automatically. Near the very end of the output file, the counterpoise correction Python; function will print a nice summary of the results of the counterpoise; computation (the energies of the dimer, of monomer 1 with the ghost functions; of monomer 2, of monomer 2 with the ghost functions of monomer 1, and the; overall counterpoise-corrected interaction energy)::. N-Body: Computing complex (1/2) with fragments (2,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (2,), basis = (1, 2): -128.70932405488924); ...; N-Body: Computing complex (2/2) with fragments (1,) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (1,), basis = (1, 2): -128.70932405488935); ...; N-Body: Computing complex (1/1) with fragments (1, 2) in the basis of fragments (1, 2).; ...; N-Body: Complex Energy (fragments = (1, 2), basis = (1, 2): -257.41867403127321); ...; ==> N-Body: Counterpoise Corrected (CP) energies <==. n-Body Total Energy [Eh] I.E. [kcal/mol] Delta [kcal/mol]; 1 -257.418648109779 0.000000000000 0.000000000000; 2 -257.418674031273 -0.016265984132 -0.016265984132. And that's it! The only remaining part of the example input is a little",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:21765,energy,energy,21765,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['energy'],['energy']
Energy Efficiency," the presence of significant linear; dependencies [Lehtola:2020:134108]_. In |PSIfour|, symmetric orthogonalization is used by default, unless; the smallest overlap eigenvalue falls below the user-supplied double; option |scf__s_tolerance|, which defaults to 1E-7. If the smallest; eigenvalue is below this cutoff, canonical orthogonalization is; forced, and all eigenvectors corresponding to eigenvalues below the; cutoff are eliminated. If the eigendecomposition is detected to be numerically unstable - the; reciprocal condition number of the overlap matrix to be smaller than; the machine epsilon - the partial Cholesky decomposition is undertaken; until |scf__s_cholesky_tolerance|, which defaults to 1E-8. Use of symmetric, canonical, and partial Cholesky orthogonalization; can be forced by setting the |scf__s_orthogonalization| option to; ``SYMMETRIC``, ``CANONICAL``, or ``PARTIALCHOLESKY``,; respectively. Note that in practice, the MOs and OSOs are built separately within; each irrep from the symmetry-adapted combinations of AOs known as; Unique Symmetry Orbitals (USOs). For canonical orthogonalization,; this implies that the number of MOs and OSOs per irrep may be slightly; smaller than the number of USOs per irrep. A contrived example demonstrating OSOs/MOs vs. AOs with symmetry is shown; below::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c2 # Two irreps is easier to comprehend; }. set {; s_tolerance 0.0001 # Set an unreasonably tight; # tolerance to force canonical; basis aug-cc-pv5z # This diffuse basis will have; # small-ish eigenvalues for even H2O; print 3; }. energy('scf'). Output::. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 145 145 0 0 0 0; B 142 142 0 0 0 0; -------------------------------------------------------; Total 287 287 5 5 5 0; -------------------------------------------------------. ... Minimum ei",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:15830,adapt,adapted,15830,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['adapt'],['adapted']
Energy Efficiency," the symmetry of the molecule. When this happens; symmetry-dependent arrays, such as |globals__socc|, are automatically remapped; to the lower symmetry. For example, if we were to investigate the :math:`^2B_1`; state of water cation, we can specify ::. SOCC = [0, 0, 1, 0]. in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; :math:`C_s` (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as::. SOCC = [0, 1]. Some caution is required, however. The :math:`^2A_1` state can be obtained with; the ::. SOCC = [1, 0, 0, 0]. specification, which would become ::. SOCC = [1, 0]. under the above-mentioned reduction in symmetry. The :math:`^2B_2` state,; whose singly-occupied orbitals are ::. SOCC = [0, 0, 0, 1]. would be mapped to ::. SOCC = [1, 0]. which is the same occupation as the :math:`^2A_1` state. In this case, the; :math:`^2A_1` state is lower in energy, and is not problematic. The distorted; geometries for the :math:`^2B_2` state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it's easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. .. index:: molecule; multiple fragments; .. _`sec:fragments`:. Non-Covalently Bonded Molecule Fragments; ========================================. |PSIfour| has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. |PSIfour| provides a very simple mechanism; for doing so: simply define the complex's geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fra",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst:18049,energy,energy,18049,doc/sphinxman/source/psithonmol.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psithonmol.rst,1,['energy'],['energy']
Energy Efficiency," the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also supported in the MRCC interface.; To optimize CH\ :sub:",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:3098,energy,energy,3098,doc/sphinxman/source/mrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst,1,['energy'],['energy']
Energy Efficiency," the use of MP2 NO-based approximations should ; cite the following: [Hohenstein:2010:104107]_. Basic Keywords Controlling MP2 NO Approximations; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/sapt__nat_orbs_t2.rst; .. include:: autodir_options_c/sapt__nat_orbs_t3.rst; .. include:: autodir_options_c/sapt__nat_orbs_v4.rst; .. include:: autodir_options_c/sapt__occ_tolerance.rst. .. comment Advanced Keywords Controlling MP2 NO Approximations; .. comment ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. comment .. include:: autodir_options_c/sapt__nat_orbs_t2.rst. .. index:: SAPT; charge-transfer. .. _`sec:saptct`:. Charge-Transfer in SAPT; ^^^^^^^^^^^^^^^^^^^^^^^. It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy ; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201]_. Charge-transfer energies can be obtained from the following calls to the; energy function. ::. energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0. A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results::. SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol];",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:30314,energy,energy,30314,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['energy'],['energy']
Energy Efficiency," theories provided in |PSIfour|.; To indicate MRCC as the target software, set |globals__qc_module|\ ``=MRCC``.; This is a change as of October 2022; previously, one prefixed the method by ""mr""; to indicate MRCC (e.g., ``energy('mrccsdt')``).; For example, if you want to obtain the CCSDT energy for water with cc-pVDZ using; MRCC simply provide the following::. molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; qc_module mrcc; }; energy('ccsdt'). ``'ccsdt'`` in the call to :py:func:`~psi4.driver.energy` plus ``qc_module=mrcc`` instructs |PSIfour| to first; perform an RHF calculation and then call MRCC to compute the CCSDT energy.; Here the ``qc_module=mrcc`` is optional since |PSIfour| has no builtin module; that can perform CCSDT. For a method like CCSD, no specification of |globals__qc_module|; will default to the CCENERGY module, and specification with value ``mrcc`` is; required to route the computation to the MRCC program.; For a CCSDT(Q) energy, simply use ``'ccsdt(q)'`` in the call to; :py:func:`~psi4.driver.energy`. MRCC can be used to perform geometry optimization and; frequency calculations for electronic ground states only. At this time, |PSIfour| is only able to automatically generate the proper; input file for MRCC for the methods listed in table below.; To utilize any method described in the table, you can call it directly; For other methods, you will be required to; use the MRCC keywords described in Appendix :ref:`apdx:mrcc`.; Perturbative methods (``ccsd(t)``, ``ccsdtqp(h)_l``, etc.); are available with |scf__reference| ROHF in versions of MRCC published; at least after July 1, 2014. When using ROHF-CCSDT(Q), MRCC will compute and report two variants:; CCSDT(Q)/A and CCSDT(Q)/B. [Kallay:2008:144101]_ |PSIfour| will save both energies but will use; the CCSDT(Q)/B as the CCSDT(Q) energy. CCSDT(Q)/B has been found to be; more robust by Martin. [Martin:2014:785]_. .. include:: mrcc_table_energy.rst. Frozen-core approximation is also sup",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst:3025,energy,energy,3025,doc/sphinxman/source/mrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/mrcc.rst,1,['energy'],['energy']
Energy Efficiency," throughout the procedure by using the |globals__docc| and; |globals__socc| options. For instance, all good quantum chemists know that; :math:`C_{2v}` water is; actually,::. molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; docc [3, 0, 1, 1] # 1A1 2A1 1B1 3A1 1B2; basis cc-pvdz; }. energy('scf'). .. _`sec:scfbrokensymm`:. Broken Symmetry; ~~~~~~~~~~~~~~~. For certain problems, such diradicals, allowing the spin-up and spin-down; orbitals to differ in closed-shell computations can be advantageous;; this is known as symmetry breaking. The resulting unrestricted wavefunction; will often provide superior energetics, due to the increased flexibility,; but it will suffer non-physical spin contamination from higher multiplicity states.; A convenient approach to break symmetry is to perform a UHF or UKS calculation; with the guess HOMO and LUMO orbitals mixed.; Mixing of the guess orbitals can be requested by setting the |scf__guess_mix|; keyword to true::. set reference uhf; set guess_mix true; energy('scf'). .. _`sec:scflindep`:. Orthogonalization; ~~~~~~~~~~~~~~~~~. One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital; basis (known as the AO basis). The Molecular Orbital basis (MO basis); is then built as a particular unitary transformation of the OSO; basis. In |PSIfour|, the determination of the OSO basis is; accomplished via either symmetric, canonical, or partial Cholesky; orthogonalization. Symmetric orthogonalization uses the symmetric inverse square root of; the overlap matrix for the orthogonalization matrix. Use of symmetric; orthogonalization always yields the same number of OSO functions (and; thereby MOs) as AO functions. However, this may lead to numerical; problems if the overlap matrix has small eigenvalues, which may occur; for large systems or for systems where diffuse basis sets are used. This problem may be avoided by using canonical orthogonalization, in; wh",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:12987,energy,energy,12987,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['energy'],['energy']
Energy Efficiency," to :py:func:`~psi4.driver.energy`:. .. code-block:: none. QCISD iterations converged!. OS MP2 FNO correction: -0.000819116338; SS MP2 FNO correction: -0.000092278158; MP2 FNO correction: -0.000911394496. OS MP2 correlation energy: -0.166478414245; SS MP2 correlation energy: -0.056669079827; MP2 correlation energy: -0.223147494072; * MP2 total energy: -76.258836941658. OS MP2.5 correlation energy: -0.171225850256; SS MP2.5 correlation energy: -0.054028401038; MP2.5 correlation energy: -0.225254251294; * MP2.5 total energy: -76.260943698880. OS MP3 correlation energy: -0.175973286267; SS MP3 correlation energy: -0.051387722248; MP3 correlation energy: -0.227361008515; * MP3 total energy: -76.263050456101. OS MP4(SDQ) correlation energy: -0.180324322304; SS MP4(SDQ) correlation energy: -0.048798468084; MP4(SDQ) correlation energy: -0.230995119324; * MP4(SDQ) total energy: -76.266684566910. OS QCISD correlation energy: -0.181578117924; SS QCISD correlation energy: -0.049853548145; QCISD correlation energy: -0.231431666069; * QCISD total energy: -76.267121113654. The first set of energies printed corresponds to the second-order FNO ; correction mentioned previously. Results for many-body perturbation ; theory through partial fourth order are then provided.; The notation MP4(SDQ) indicates that we have included all contributions to; the correlation energy through fourth order, with the exception of that; from connected triple excitations. . One need not run a full QCISD or CCSD computation to obtain these; perturbation theory results. The keywords for invoking perturbation; theory computations are given below in; Table :ref:`FNOCC Methods <table:fnocc_methods>`. Full MP4 correlation; energies are also available. .. _`sec:fnocepa`:. Coupled electron pair approximation; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Coupled-pair methods can be viewed as approximations to CCSD or as; size-extensive modifications of CISD. The methods have the same; complexity as CISD, and solving the C",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst:7860,energy,energy,7860,doc/sphinxman/source/fnocc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/fnocc.rst,1,['energy'],['energy']
Energy Efficiency," to the single and *D* to the double excitation manifolds.; This matrix is typically sparse and thus may be diagonalised iteratively,; for example using Davidson's method [Dreuw:2014:82]_. An alternative viewpoint; has been addressed for example in [Haettig:2002]_, where ADC(2) is related; to other response theories such as CC2-LR, CIS(D) and CIS(D\ :math:`_n`).; In this sense one may consider the ADC matrix the correlated response matrix; to a response problem based on CIS; and apply the simultaneous expansion method (SEM),; in which the |sigma|-vectors (ADC matrix-vector products); are constructed several times. The structure and order of the blocks in the equation above; depend on the ADC level employed. With this also the computational cost changes.; The key computational step, namely the formation of the matrix-vector products; scales as :math:`{\cal O}(N^5)` for ADC(2) and :math:`{\cal O}(N^6)`; for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]_; and the `adcc theory documentation <https://adc-connect.org/latest/theory.html>`_. Available ADC methods; ---------------------; .. sectionauthor:: Michael F. Herbst. Several ADC methods are available in |PSIfour| for the computation of excited states,; see :ref:`table:adcsummary`.; The methods are available via an interface to the `adcc <https://adc-connect.org>`_ python module.; After a more general introduction, specific aspects of the implementation will be highlighted; in section :ref:`sec:interfaceadcc`. .. _`table:adcsummary`:. .. ta",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:3736,reduce,reduce,3736,doc/sphinxman/source/adc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst,1,['reduce'],['reduce']
Energy Efficiency," types of multi-configurational; self-consistent-field procedures, and are described in :ref:`sec:mcscf`. As mentioned above, the DETCI module is designed for challenging; chemical systems for which simple CISD is not suitable. Because; CI wavefunctions which go beyond CISD (such as RAS CI) are fairly complex,; typically the DETCI code will be used in cases where the; tradeoffs between computational expense and completeness of the; model space are nontrivial. Hence, the user is advised to develop; a good working knowledge of multi-reference and RAS CI methods before; attempting to use the program for a production-level project. This user's; manual will provide only an elementary introduction to the most; important keywords. Additional information is available in the complete; list of keywords for DETCI provided in Appendix :ref:`apdx:detci`. For single-reference CI computations, the easiest way to invoke a CI; computation with DETCI is simply to call :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.optimize`, *etc.*,; with the common name for that CI wavefunction, like ``energy('cisd')`` ; for a CISD single-point energy. The Python driver; recognizes ``cisd``, ``cisdt``, and ``cisdtq``. As mentioned above, codes; written specifically for CISD will be more efficient than DETCI for a ; CISD computation, and ``energy('cisd')`` by default will call other,; more efficient modules. To force a CISD computation with DETCI,; set |globals__qc_module| = DETCI. . Higher order single-reference CI wavefunctions, like those including singles through; 6-fold excitations, can be invoked using numbers, like ``ci6``. A full; CI can be specified by ``fci``. More complicated CI computations, like; RASCI, can be performed by setting the appropriate keywords and calling the; module generically like ``energy('detci')``. The latter approach; will also work for any of the previously-mentioned CI wavefunctions for; which the driver has built-in shortcuts, so long as the relevant options;",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst:5848,energy,energy,5848,doc/sphinxman/source/detci.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/detci.rst,1,['energy'],['energy']
Energy Efficiency," will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:prog_integrals`:. ======================; Integrals in |PSIfour|; ======================. Introduction; ------------. |PSIfour| has a number of backends available to compute integrals. In order to; accomodate these options, while providing a clean interface to the programmer,; an abstraction layer is implemented within Libmints. A recent upgrade to the; primary integral engine has seen some important changes to the way this; interface layer is used; this document is designed to aid new developers as; well as those familiar with the older calling conventions to ensure that the; most efficient calling conventions are applied. The older style; ---------------. A very simple loop that does not use permutational symmetry might look; something like this in the old scheme:. .. code-block:: cpp. auto sieve = std::make_shared<ERISieve>(basisset, cutoff);; auto factory= std::make_shared<IntegralFactory>(basisset);; int deriv_level = 0;; bool use_shell_pairs = true;; auto eri = factory->eri(deriv_level, use_shell_pairs);; const double* buffer = eri_->buffer();; for (int P = 0; P < basisset->nshell(); ++P) {; const auto& Pshell = basisset->shell(P);; for (int Q = 0; Q < basisset->nshell(); ++Q) {; const auto& Qshell = basisset->shell(Q);; for (int R = 0; R < basisset->nshell(); ++R) {; const auto& Rshell = basisset->shell(R);; for (int S = 0; S < basisset->nshell(); ++S) {; const auto& Sshell = basisset->shell(S);; if(sieve->shell_significant(P, Q, R, S) {; eri->comput",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst:1659,efficient,efficient,1659,doc/sphinxman/source/prog_integrals.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/prog_integrals.rst,1,['efficient'],['efficient']
Energy Efficiency," with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; single: multireference; single: Mk-MRCC. .. _`sec:psimrcc`:. PSIMRCC Implementation of Mk-MRCC Theory; ========================================. .. codeauthor:: Francesco A. Evangelista and Andrew C. Simmonett ; .. sectionauthor:: Alexander E. Vaughn. *Module:* :ref:`Keywords <apdx:psimrcc>`, :ref:`PSI Variables <apdx:psimrcc_psivar>`, :source:`PSIMRCC <psi4/src/psi4/psimrcc>`. State-specific Multireference coupled cluster theories provide highly; accurate energies and properties of electronic states that require; a multiconfigurational zeroth-order wavefunction. The PSIMRCC; module contained in |PSIfour| implements the state-specific; multireference coupled-cluster approach of Mukherjee and co-workers; (Mk-MRCC). This method is implemented and shown to be a powerful tool in; [Evangelista:2006:154113]_ and [Evangelista:2008:124104]_. Mk-MRCC is; based on the Jeziorski-Monkhorst ansatz [Jeziorski:1981:1668]_ for the; wavefunction, :math:`\Psi`. .. math:: \left| \Psi \right \rangle = \sum_\mu^d e^{\hat{T}^\mu} \left| \Phi_\mu \right\rangle c_\mu \, \text{,}. where :math:`\Phi_\mu` are the reference determinants,; :math:`\hat{T}^\mu` are reference-specific excitation operators, and; :math:`c_\mu` are expansion coefficients obtained through diagonalization; of the Mk-MRCC effective Hamiltonian matrix that allows the various; reference determinants to interact. As an example of how this works; the Mk-MRCCSD excitation operators for each reference is contracted; two-body terms. .. math:: \hat{T}^\mu = \hat{T}^\mu_1 + \hat{T}^\mu_2. where. .. math:: \hat{T}^\mu_1 = \sum_i^{\textrm{occ}(\mu)} \sum_a^{\textrm{vir}(\mu)} t_i^a (\mu) \hat{a}^\dagger_a \hat{a}_i. and. .. math:: \hat{T}^\mu_2 =\frac{1}{4} \sum_i^{\textrm{occ}(\mu)} \sum_a^{\textrm{vir}(\mu)} t_{ij}^{",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst:1842,power,powerful,1842,doc/sphinxman/source/psimrcc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/psimrcc.rst,1,['power'],['powerful']
Energy Efficiency," you wish.; Once |PSIfour| is in your path (see the ; :ref:`User Configuration <faq:runordinaryexe>`; section of the installation instructions), you can run this computation by typing. >>> psi4 input.dat output.dat. If everything goes well, the computation should complete and should report; a final restricted Hartree--Fock energy in a section like this::. Energy converged. @RHF Final Energy: -76.02663273410671. By default, the energy should be converged to about :math:`1.0 \times 10^{-6}`, so agreement; is only expected for about the first 6 digits after the decimal. If the; computation does not complete, there is probably a problem with the; compilation or installation of the program (see the installation; instructions in Sec. :ref:`sec:installFile`). This very simple input is sufficient to run the requested information.; Notice that we didn't tell the program some otherwise useful information; like the charge on the molecule (0, it's neutral), the spin multiplicity; (1 for a closed-shell molecule with all electrons paired), or the reference; wavefunction to use (restricted Hartree--Fock, or RHF, is usually; appropriate for a closed-shell molecule). The program correctly guessed; all of these options for us. We can change the default behavior through; additional keywords. Let's consider what we would do for an open-shell molecule, where; not all electrons are paired. For example, let's run a computation; on methylene (CH\ :sub:`2`\ ), whose ground electronic state has two unpaired; electrons (triplet electronic state, or a spin multiplicity :math:`2S+1 = 3`).; In this case, the default spin multiplicity (1) is not correct, so we; need to tell the program the true value (3). Like many programs, |PSIfour|; can get the charge and multiplicity as the first two integers in the; Z-matrix. Note the line with ``0 3`` at the beginning of the molecule; specification below. In this example we will also specify the bond length; and bond angle as variables (:math:`R` and :math:`",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst:4490,charge,charge,4490,doc/sphinxman/source/tutorial.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/tutorial.rst,1,['charge'],['charge']
Energy Efficiency," {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:2641,energy,energy,2641,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fca",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:61452,energy,energy,61452,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fca",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:79671,energy,energy,79671,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," {'module': 'psi4', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy',",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:41804,energy,energy,41804,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," {'module': 'psi4', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'ener",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:43175,energy,energy,43175,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," {'module': 'psi4', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy',",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:47302,energy,energy,47302,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," {'module': 'psi4', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:48673,energy,energy,48673,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," {'module': 'psi4', 'driver': 'energy', 'method': 'wb97x', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'wb97x', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'wb97x', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd for lrc in dft'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:516639,energy,energy,516639,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:170648,energy,energy,170648,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency," {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc':",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:478926,energy,energy,478926,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency, {\tt detcas: ( convergence = x )}. ENERGY\_CONVERGENCE = integer; Convergence desired on the total MCSCF energy. The default is 7.; \item[RESTRICTED\_DOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of lowest energy doubly occupied orbitals in each irreducible; representation from which there will be no excitations. ; These orbitals are optimized in the MCSCF.; The Cotton ordering of the irredicible representations is used.; The default is the zero vector. RESTRICTED\_UOCC = (integer array); Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of highest energy unoccupied orbitals in each irreducible; representation into which there will be no excitations.; These orbitals are optimized in the MCSCF.; The default is the zero vector. FROZEN\_DOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of lowest energy doubly occupied orbitals in each irreducible; representation from which there will be no excitations. ; These orbitals are literally frozen and are not optimized in the MCSCF;; usually one wishes to use {\tt RESTRICTED\_DOCC} instead.; The current version of the program does not allow both; {\tt RESTRICTED\_DOCC} and {\tt FROZEN\_DOCC}.; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The Cotton ordering of the irredicible representations is used.; The default is the zero vector. FROZEN\_UOCC = (integer array)]\mbox{}\\; Should be in {\tt psi:()} or {\tt default:()} sections of input.; The number of highest energy unoccupied orbitals in each irreducible; representation into which there will be no excitations.; These orbitals are literally frozen and are not optimized in the MCSCF;; usually one wishes to use {\tt RESTRICTED\_UOCC} instead.; The current version of the program does not allow both; {\tt RESTRICTED\_UOCC} and {\tt FROZEN\_UOCC}.; Should be in {\tt psi:()} or {\tt default:()} sections of inpu,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst:5850,energy,energy,5850,doc/sphinxman/source/attic/detcas.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/detcas.rst,1,['energy'],['energy']
Energy Efficiency," |; +---------------+------------+---------------+--------------------------------------------+; | CVS-ADC(1) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2)-x | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(3) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+. The leftmost column of table :ref:`table:adcsummary` provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function :py:func:`~psi4.driver.energy`.; For example, ``energy('adc(2)-x')`` will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function :py:func:`~psi4.driver.properties`; with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like ``properties('adc(2)', properties=[""oscillator_strength""])``. Running ADC calculations; ------------------------; .. sectionauthor:: Michael F. Herbst. Running an ADC calculation with |PSIfour| requires; the call to :py:func:`~psi4.driver.properties` as discussed above; as well as one or more mandatory keyword arguments. The most important keyword argument is |adc__roots_per_irrep|,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element o",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:6538,energy,energy,6538,doc/sphinxman/source/adc.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst,1,['energy'],['energy']
Energy Efficiency," |scf__reference| needs to be ``UHF`` or ``ROHF`` for the open-shell computation to proceed. Advanced example; ^^^^^^^^^^^^^^^^. Open-shell computations can be difficult to converge in certain cases, thus you may; want to have more control over the SCF procedure. You have the option of ; doing the driver job in the input file, by performing the dimer and monomer computations; yourself. In the example below, we do a stability analysis for the open-shell monomer only ::. molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }; ; dimer = psi4.get_active_molecule() ; ; set {; reference uhf; scf_type df; basis cc-pVDZ; df_basis_sapt cc-pVDZ-ri; guess sad; }; ; dimer = psi4.get_active_molecule(); ; set df_ints_io save; psi4.IO.set_default_namespace('dimer'); Edim, wfn_dimer = energy('scf',molecule=dimer,return_wfn=True); set df_ints_io load; ; monomerA = dimer.extract_subsets(1,2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); set {; stability_analysis follow; }; EmonA, wfn_monA = energy('scf',molecule=monomerA,return_wfn=True); ; monomerB = dimer.extract_subsets(2,1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); set {; stability_analysis none; }; EmonB, wfn_monB = energy('scf',molecule=monomerB,return_wfn=True); ; psi4.IO.change_file_namespace(97, 'monomerB', 'dimer'); psi4.IO.set_default_namespace('dimer'); ; aux_basis = psi4.core.BasisSet.build(wfn_dimer.molecule(), ""DF_BASIS_SAPT"",; psi4.core.get_global_option(""DF_BASIS_SAPT""),; ""RIFIT"", psi4.core.get_global_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis); ; psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst:18342,energy,energy,18342,doc/sphinxman/source/sapt.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/sapt.rst,1,['energy'],['energy']
Energy Efficiency," ✓̲ ✓̲ | ✓̲ ✓̳ ✓̳ | ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | ✓̲ ✓̳ ✓̳ | ✓̲ ✓̳ ✓̳ ✓̲ ✓̲ | ✓̲ ✓̳ ✓̳ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | omp2.5\ [#c10]_ | |globals__mp_type| | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | omp3\ [#c10]_ | |globals__mp_type| | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | oremp2\ [#c10]_ | |globals__cc_type| | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+; | olccd\ [#c10]_ | |globals__cc_type| | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ ✓̲ ✓̲ | ✓̳ ✓̲ ✓̲ |; +--------------------------+-------------------------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+. .. [#c1] Algorithm type selection keyword below. Values to the right: conventional ``CV``, density-fitted ``DF``, and Cholesky-decomposed ``CD``.; .. [#c2] Active orbital values to the right: all-electron ``A`` and frozen-core ``F``.; .. [#c3] Finite difference gradients are not marked explicitly by ""∷"", but the capability can be gleaned from the energy availability.; .. [#c10] Also available for DFT references RKS/UKS",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_occ_oo.rst:3886,energy,energy,3886,doc/sphinxman/source/preview_capabilities_occ_oo.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/preview_capabilities_occ_oo.rst,1,['energy'],['energy']
Energy Efficiency,""". H. Build with explicit non-MKL LAPACK. .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". I. Build with MKL and GCC (iomp5 needed instead of gomp for threading. use OpenMP_LIBRARY_DIRS to hint location.). .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=/opt/intel/mkl/lib/intel64/libmkl_rt.so -DLAPACK_INCLUDE_DIRS=/opt/intel/mkl/include -DOpenMP_LIBRARY_DIRS=/opt/intel/compiler/lib/intel64/. **Notes**. * Much of |PSIfours| speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:. * It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:49474,efficient,efficient,49474,doc/sphinxman/source/build_planning.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst,1,['efficient'],['efficient']
Energy Efficiency,"# @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: SCF, HF, Hartree--Fock; .. _`sec:scf`:. HF: Hartree--Fock Theory; ========================. .. codeauthor:: Justin M. Turney, Robert M. Parrish, and Andrew C. Simmonett; .. sectionauthor:: Robert M. Parrish and Jerome F. Gonthier. *Module:* :ref:`Keywords <apdx:scf>`, :ref:`PSI Variables <apdx:scf_psivar>`, :source:`LIBSCF_SOLVER <psi4/src/psi4/libscf_solver>`, :source:`LIBMINTS <psi4/src/psi4/libmints>`, :source:`LIBFOCK <psi4/src/psi4/libfock>`, :source:`LIBDIIS <psi4/src/psi4/libdiis>`. .. _`sec:scfintro`:. Introduction; ~~~~~~~~~~~~. Self-Consistent-Field (SCF) theory forms the cornerstone of *ab initio* quantum; chemistry. Here SCF refers both to conventional Hartree--Fock (HF) molecular; orbital theory and also to generalized Kohn--Sham Density Functional Theory; (KS-DFT). |PSIfour| contains a wholly rewritten SCF code, including many of the; most popular spin specializations, several efficient numerical methods for; treating Fock Matrix construction, and a brand new KS-DFT code featuring many of; the most popular DFT functional technologies. An illustrative example of using the SCF module is as follows::. molecule {; 0 3; O; O 1 1.21; }. set {; basis cc-pvdz; guess sad; reference uhf; scf_type direct; }. energy('scf'). This will run a UHF computation for triplet molecular oxygen (the ground state); using a Direct algorithm for the Electron Repulsion Integrals (ERI) and starting; from a Superposition of Atomic Densities (SAD) guess. DF integrals are; automatically used to converge the DF-SCF solution before the Direct algorithm is; activated. After printing all manner of titles, geometries, sizings, and; algorithm choices, the SCF finally reaches the iterations::. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 0: -149.80032977420572 -1.49800e+02 1.48808e-01; @DF-UHF iter 1: -149.59496320631871 2.05367e-01 2.58009e-02; @DF-UHF iter 2: -149.62349901753706 -2.85358e-02 6.68980e-03 DIIS; @DF-",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst:1976,efficient,efficient,1976,doc/sphinxman/source/scf.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/scf.rst,1,['efficient'],['efficient']
Energy Efficiency,${CMAKE_CURRENT_SOURCE_DIR}/cc2_WabeiT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_WabijT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_WmbijT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_Wmnij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_faeT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_fmiT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc2_t2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wabei.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wamef.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmbij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmnie.cc; ${CMAKE_CURRENT_SOURCE_DIR}/cc3_Wmnij.cc; ${CMAKE_CURRENT_SOURCE_DIR}/ccenergy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/converged.cc; ${CMAKE_CURRENT_SOURCE_DIR}/d1diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/d2diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/denom.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diagnostic.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_RHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_ROHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/diis_UHF.cc; ${CMAKE_CURRENT_SOURCE_DIR}/dijabT2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/energy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/fock_build.cc; ${CMAKE_CURRENT_SOURCE_DIR}/form_df_ints.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_moinfo.cc; ${CMAKE_CURRENT_SOURCE_DIR}/get_params.cc; ${CMAKE_CURRENT_SOURCE_DIR}/halftrans.cc; ${CMAKE_CURRENT_SOURCE_DIR}/init_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/lmp2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/local.cc; ${CMAKE_CURRENT_SOURCE_DIR}/mp2_energy.cc; ${CMAKE_CURRENT_SOURCE_DIR}/new_d1diag.cc; ${CMAKE_CURRENT_SOURCE_DIR}/pair_energies.cc; ${CMAKE_CURRENT_SOURCE_DIR}/priority.cc; ${CMAKE_CURRENT_SOURCE_DIR}/rotate.cc; ${CMAKE_CURRENT_SOURCE_DIR}/sort_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/spinad_amps.cc; ${CMAKE_CURRENT_SOURCE_DIR}/status.cc; ${CMAKE_CURRENT_SOURCE_DIR}/t1.cc; ${CMAKE_CURRENT_SOURCE_DIR}/t1_ijab.cc; ${CMAKE_CURRENT_SOURCE_DIR}/t2.cc; ${CMAKE_CURRENT_SOURCE_DIR}/tau.cc; ${CMAKE_CURRENT_SOURCE_DIR}/taut.cc; ${CMAKE_CURRENT_SOURCE_DIR}/tsave.cc; ${CMAKE_CURRENT_SOURCE_DIR}/update.cc; ); ,MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccenergy/CMakeLists.txt:1963,energy,energy,1963,psi4/src/psi4/cc/ccenergy/CMakeLists.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/psi4/src/psi4/cc/ccenergy/CMakeLists.txt,1,['energy'],['energy']
Energy Efficiency,"%; % History of Psi; %; % Daniel Crawford, 24 January, 1996; %. The PSI suite of {\em ab initio} quantum chemistry programs is the result; of an ongoing attempt by a cadre of graduate students, postdoctoral; associates, and professors to produce code that is efficient but also; easy to extend to new theoretical methods. Significant effort has been; devoted to the development of libraries which are robust and easy to use.; Some of the earliest contributions to what is now referred to as ``PSI''; include a direct configuration interaction (CI) program (Robert Lucchese,; 1976, now at Texas A\&M), the well-known graphical unitary group CI program; (Bernie Brooks, 1977-78, now at N.I.H.), and the original integrals code; (Russ Pitzer, 1978, now at Ohio State). From 1978-1987, the package was; know as the {\tt BERKELEY} suite, and after the Schaefer group moved to the; Center for Computational Quantum Chemistry at the University of Georgia,; the package was renamed {\tt PSI}. Thanks primarily to the efforts of Curt; Janssen (Sandia Labs, Livermore) and Ed Seidl (LLNL), the package was; ported to UNIX systems, and substantially improved with new input formats; and a C-based I/O system. Beginning in 1999, an extensive effort was begun to develop \PSIthree\; --- a {\tt PSI} suite with a completely new face. As a result of this; effort, all of the legacy Fortran code was removed, and everything was; rewritten in C and C++, including new integral/derivative integral,; coupled cluster, and CI codes. In addition, new I/O libraries have; been added, as well as an improved checkpoint file structure and greater; automation of typical tasks such as geometry optimization and frequency; analysis. The package has the capability to determine wavefunctions,; energies, analytic gradients, and various molecular properties based on; a variety of theories, including spin-restricted, spin-unrestricted, and; restricted open-shell Hartree-Fock (RHF, UHF, and ROHF); configuration; interaction (CI",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/history.rst:259,efficient,efficient,259,doc/sphinxman/source/attic/history.rst,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/attic/history.rst,1,['efficient'],['efficient']
Energy Efficiency,"''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc2', 'reference': 'rohf', 'fca",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:60107,energy,energy,60107,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3 by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'cc3', 'reference': 'rohf', 'fca",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:78326,energy,energy,78326,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"''}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd by detci'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd by detci'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no uhf by detci'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'uhf', ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:527797,energy,energy,527797,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference':",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:100729,energy,energy,100729,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd', 'reference': ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:104443,energy,energy,104443,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'oremp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:447271,energy,energy,447271,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:130187,energy,energy,130187,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf',",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:130369,energy,energy,130369,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'referen",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:130738,energy,energy,130738,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:133961,energy,energy,133961,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf',",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:134143,energy,energy,134143,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'referen",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:134512,energy,energy,134512,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:130551,energy,energy,130551,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'f",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:134325,energy,energy,134325,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'cc3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'cc3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'cc3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:175964,energy,energy,175964,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-mrcc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_ty",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:177591,energy,energy,177591,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'refere",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:1676,energy,energy,1676,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'a-ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'a-ccsd(t)', 'referen",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:4286,energy,energy,4286,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:133784,energy,energy,133784,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 're",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:130920,energy,energy,130920,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 're",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:134694,energy,energy,134694,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'lccd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:202049,energy,energy,202049,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:20838,energy,energy,20838,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:22844,energy,energy,22844,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:26032,energy,energy,26032,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b3lyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type':",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:28038,energy,energy,28038,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:22113,energy,energy,22113,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'b2plyp', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:27307,energy,energy,27307,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'driver': 'energy', 'method': 'bccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'refer",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:44959,energy,energy,44959,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:166670,energy,energy,166670,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:390596,energy,energy,390596,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:397639,energy,energy,397639,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'metho",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:279406,energy,energy,279406,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no conventional scf for df/cd cc in fnocc'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd(t)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:137285,energy,energy,137285,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd cc2/cc3/bccd/bccd(t) by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'bccd(t)', 'reference': 'rhf', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:49301,energy,energy,49301,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'c",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:326410,energy,energy,326410,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'method': 'zapt2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd by detci'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: retire rhf zapt by detci'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd by detci'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd by detci'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: retire rhf zapt by detci'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd by detci'}; {'module': 'psi4', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd by detci'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'zapt2', 'reference': 'rohf', ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:525886,energy,energy,525886,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:418193,energy,energy,418193,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'svwn', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf for dft'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'svwn', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:499579,energy,energy,499579,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'note': ''}; {'module': 'psi4-scf', 'driver': 'gradient', 'method': 'pbe', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'gradient', 'method': 'pbe', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'gradient', 'method': 'pbe', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd ci by psi4'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'qcisd', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:477593,energy,energy,477593,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:327766,energy,energy,327766,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk',",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:418553,energy,energy,418553,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'note': 'nyi: no open-shell mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd except ccsd/ccsd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq)', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4(sdq",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:328892,energy,energy,328892,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'note': 'nyi: no rohf for dft'}; {'module': 'psi4', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd for lrc in dft'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'wb97x', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'wb97x', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd for lrc in dft'}; {'module': 'psi4', 'driver': 'gradient', 'method': 'wb97x', 'reference': 'rhf', 'fcae': 'ae', 'sdsc'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:517194,energy,energy,517194,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 're",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:273783,energy,energy,273783,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:274680,energy,energy,274680,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:391495,energy,energy,391495,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp2.5', 'ref",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:276318,energy,energy,276318,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no rohf mp2.5/mp3/remp2/lccd by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:277214,energy,energy,277214,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'psi4', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd rohf ccd/ccsd/ccsd(t)/a-ccsd(t) by occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-ccenergy', 'driver': 'energy', 'method': 'ccsd', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'ccsd', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd',",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:107821,energy,energy,107821,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 're",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:280153,energy,energy,280153,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf'",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:281050,energy,energy,281050,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note': ''}; {'module': 'psi4', 'driver': 'gradient', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd gradients",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:398538,energy,energy,398538,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2.5', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'mp2.5', '",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:282688,energy,energy,282688,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:415609,energy,energy,415609,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'rohf', 'fcae':",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:417426,energy,energy,417426,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:422576,energy,energy,422576,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note': ''}; {'module': 'psi4', 'driver': 'gradient', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd gradients by occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'omp3', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'omp3', 're",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:424393,energy,energy,424393,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:245813,energy,energy,245813,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note': ''}; {'module': 'psi4', 'driver': 'gradient', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd gradients for mp2 by occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no cd gradients for mp2 by occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'fd', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'gradient', 'method': 'mp2', 'reference': 'rhf', 'fc",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:248858,energy,energy,248858,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'meth",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:392636,energy,energy,392636,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'hf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-scf', 'driver': 'energy', 'method': 'hf', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:180635,energy,energy,180635,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc conv gradients for mp3 by occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'mp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc conv gradients for mp3 by occ'}; {'module': 'psi4-occ', 'driver': 'gradient', 'method': 'mp3', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'fd', 'note': 'default'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no df/cd mp4(sdq)/mp4/qcisd/qcisd(t) by fnocc'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-detci', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-fnocc', 'driver': 'energy', 'method': 'mp4', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'p",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:323307,energy,energy,323307,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no fc/fv for oo in occ'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'default'}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'omp2.5', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'meth",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:392816,energy,energy,392816,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(1)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:159497,energy,energy,159497,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'rohf', 'fcae': 'fc', 'sdsc': 'sc', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'error', 'note': 'nyi: no open-shell energies in fnocc'}; {'module': 'psi4', 'driver': 'energy', 'method': 'cepa(3)', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'error', 'note': 'nyi: ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:164833,energy,energy,164833,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:233588,energy,energy,233588,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': 'defaultdefault'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'rohf', 'fcae': 'ae', 'sdsc': 'sc', 'scf_type': 'df', 'corl_t",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:237171,energy,energy,237171,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
Energy Efficiency,"', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'conv', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'ae', 'sdsc': 'sd', 'scf_type': 'pk', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'cd', 'status': 'pass', 'note': 'default'}; {'module': 'psi4-dfmp2', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'psi4-occ', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'cd', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': 'pass', 'note': ''}; {'module': 'aaaa-', 'driver': 'energy', 'method': 'mp2', 'reference': 'uhf', 'fcae': 'fc', 'sdsc': 'sd', 'scf_type': 'df', 'corl_type': 'df', 'status': ",MatchSource.DOCS,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt:246162,energy,energy,246162,samples/stdsuite_psi4.txt,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/samples/stdsuite_psi4.txt,1,['energy'],['energy']
