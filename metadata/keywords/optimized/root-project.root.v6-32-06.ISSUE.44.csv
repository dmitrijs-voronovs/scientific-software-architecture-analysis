quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Performance,Could you post performance numbers before and after that change? I am interested in how much that affects single line statements as well as a 1000 line code snippet.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14267#issuecomment-1914135073:15,perform,performance,15,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1914135073,1,['perform'],['performance']
Performance,"Created a new library for RooFit that contains the computation functions of the PDFs. It gets compiled for specific architectures (SSE, AVX, AVX2, AVX512) and automatically loaded at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6665:173,load,loaded,173,https://root.cern,https://github.com/root-project/root/pull/6665,1,['load'],['loaded']
Performance,"Current screenshot:. ```; root [0] .?. Cling (C/C++ interpreter) meta commands usage; All commands must be preceded by a '.', except; for the evaluation statement { }; ==============================================================================================; Syntax: .Command [arg0 arg1 ... argN]. .Tab				- Autocomplete or print suggestions. .L <filename>		- Load the given file or library. .(x|X) <filename>(args)	- Same as .L and runs a function with; 				 signature: ret_type filename(args). .> <filename>		- Redirect command to a given file; '>' or '1>'		- Redirects the stdout stream only; '2>'			- Redirects the stderr stream only; '&>' (or '2>&1')		- Redirects both stdout and stderr; '>>'			- Appends to the given file. .undo [n]			- Unloads the last 'n' inputs lines. .U <filename>		- Unloads the given file. .(I|include) [path]		- Shows all include paths. If a path is given,; 				 adds the path to the include paths. .O <level>			- Sets the optimization level (0-3); 				 If no level is given, prints the current setting. .class <name>		- Prints out class <name> in a CINT-like style (one-level).; 				 If no name is given, prints out list of all classes. .Class <name>			- Prints out class <name> in a CINT-like style (all-levels).; 				 If no name is given, prints out list of all classes. .namespace			- Prints list of all known namespaces. .typedef <name>		- Prints out typedef <name> in a CINT-like style; 				 If no name is given, prints out list of all typedefs. .files			- Prints names of all included (parsed) files. .fileEx			- Prints out included (parsed) file statistics; 				 as well as a list of their names. .g <var>				- Prints out information about global variable; 				 'var' - if no name is given, print them all. .@ 				- Cancels and ignores the multiline input. .rawInput [0|1]		- Toggle wrapping and printing the; 				 execution results of the input. .dynamicExtensions [0|1]	- Toggles the use of the dynamic scopes; 				 and the late binding. .debug <level>		- ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10121#issuecomment-1084927674:365,Load,Load,365,https://root.cern,https://github.com/root-project/root/pull/10121#issuecomment-1084927674,2,"['Load', 'optimiz']","['Load', 'optimization']"
Performance,Current state:; ```; 18:10:43 Performing patch step for 'clad'; 18:10:43 clad_array_size_type.patch:25: trailing whitespace.; 18:10:43 CUDA_HOST_DEVICE T& operator[](std::ptrdiff_t i) { return m_arr[i]; }; 18:10:43 clad_local_array.patch:50: trailing whitespace.; 18:10:43 m_arr[i] = arr ? arr[i] : 0;; 18:10:43 clad_local_array.patch:62: trailing whitespace.; 18:10:43 double func6(double seed) {; 18:10:43 clad_local_array.patch:63: trailing whitespace.; 18:10:43 double sum = 0;; 18:10:43 clad_local_array.patch:64: trailing whitespace.; 18:10:43 for (int i = 0; i < 3; i++) {; 18:10:43 fatal: corrupt patch at line 149; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12833#issuecomment-1552055360:30,Perform,Performing,30,https://root.cern,https://github.com/root-project/root/pull/12833#issuecomment-1552055360,1,['Perform'],['Performing']
Performance,"Currently modules in ACLiC are not properly loaded, that's why we; suppress the diagnostic if the library was ACLiC-generated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3714:44,load,loaded,44,https://root.cern,https://github.com/root-project/root/pull/3714,1,['load'],['loaded']
Performance,"Currently we are using ROOT 6.22 for CMS offline SW (CMSSW). It works great on all our supported archs e.g. **amd64, ppc64le, aarch64, slc7/cc8** using **gcc 9.3 10.3, 11.2**. Now we are trying to move to ROOT 6.24 for CMS Offline Software ( CMSSW) but for . **OS: slc7; Compiler: GCC 9.3; ARCH: ppc64le**. when we try to load CMSSW dictionaries then pyROOT fails with error [see full log](https://cmssdt.cern.ch/SDT/cgi-bin/buildlogs/slc7_ppc64le_gcc9/CMSSW_12_2_ROOT624_X_2021-11-14-2300/DataFormats/Math); ```; #8 <signal handler called>; #9 0x000010081a5b0038 in ?? (); #10 0x00001000026e2df4 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /scratch/cmsbuild/jenkins_b/workspace/build-any-ib/w/tmp/BUILDROOT/6b889b481d3981a81f0cdda02720a661/opt/cmssw/slc7_ppc64le_gcc9/cms/cmssw/CMSSW_12_2_ROOT624_X_2021-11-14-2300/external/slc7_ppc64le_gcc9/lib/libCling.so; #11 0x000001000c853a50 in ?? (); ```. In order to debug this issue when I tried to build root in debug mode `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug` then root failed to build with error [see full log](https://cmssdt.cern.ch/SDT/jenkins-artifacts/build-any-ib/CMSSW_12_2_ROOT624_X_2021-11-15-1100/slc7_ppc64le_gcc9/118878/lcg/root/6.24.07-e593e28202aa32887e370aba99847071/log); ```; root.exe: /scratch/cmsbuild/jenkins_a/workspace/build-any-ib/w/BUILD/slc7_ppc64le_gcc9/lcg/root/6.24.07-e593e28202aa32887e370aba99847071/root-6.24.07/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp:81: std::unique_ptr<llvm::TargetMachine> cling::{anonymous}::CreateHostTargetMachine(const clang::CompilerInstance&): Assertion `TM->getCodeModel() >= CodeModel::Large' failed.; ```. Any idea what could be wrong here ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297:322,load,load,322,https://root.cern,https://github.com/root-project/root/issues/9297,1,['load'],['load']
Performance,"Currently, 36 tests are failing for runtime modules:; https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/; We want to make these test pass so that we can say that the runtime modules is; finally working. This patch enables ROOT to preload all modules at startup time. In my; environment, this patch fixes 14 tests for runtime cxxmodules. Preloading all the modules has several advantages. 1. We do not have to; rely on rootmap files which don't support some features (namespaces and; templates) 2. Lookup would be faster because we don't have to do; trampoline via rootmap files. The only disadvantage of preloading all the modules is the startup time performance.; `root.exe -q -l memory.C`; This is a release build without modules:; ```; cpu time = 0.091694 seconds; sys time = 0.026187 seconds; res memory = 133.008 Mbytes; vir memory = 217.742 Mbytes; ```; This is a release build with modules, with this patch:; ```; cpu time = 0.234134 seconds; sys time = 0.066774 seconds; res memory = 275.301 Mbytes; vir memory = 491.832 Mbytes; ```; As you can see, preloading all the modules makes both time and memory 2; to 3 times worse **at a startup time**. **Edit** : With hsimple.C; `root.exe -l -b tutorials/hsimple.C -q ~/CERN/ROOT/memory.C`; Release build without modules:; ```; Processing tutorials/hsimple.C... ; hsimple : Real Time = 0.04 seconds Cpu Time = 0.05 seconds ; (TFile *) 0x555ae2a9d560 ; Processing /home/yuka/CERN/ROOT/memory.C... ; cpu time = 0.173591 seconds ; sys time = 0.011835 seconds ; res memory = 135.32 Mbytes ; vir memory = 209.664 Mbytes ; ```; Release build with modules, with this patch:; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.04 seconds Cpu Time = 0.04 seconds; (TFile *) 0x55d1b036d230; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 0.290742 seconds; sys time = 0.043851 seconds; res memory = 256.844 Mbytes; vir memory = 438.484 Mbytes; ```. However, it is a matter of course that we get slower startup t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1814:677,perform,performance,677,https://root.cern,https://github.com/root-project/root/pull/1814,1,['perform'],['performance']
Performance,"Currently, `TGraph::Sort` does not check if the data is already sorted (stored in bit `TGraph::kIsSortedX`). For the implemented quicksort, sorting already sorted data is the worst case performance scenario, so I believe a check would be helpful.; Since the user can supply a custom `greaterfunc`, a check similar to https://github.com/root-project/root/blob/1dba738f4e5c472d7b6777da49e00ef041696dba/hist/hist/src/TGraph.cxx#L2394 might be appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6352:186,perform,performance,186,https://root.cern,https://github.com/root-project/root/issues/6352,1,['perform'],['performance']
Performance,"Currently, all user-provided build flags are overwritten without notice.; By making the build flags cache variables, they are only set if the user; didn't set them explicitly.; Further, the printing of the build flags now also correctly prints the; flags being set by the build type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4196:100,cache,cache,100,https://root.cern,https://github.com/root-project/root/pull/4196,1,['cache'],['cache']
Performance,"Currently, if ::Name() interface is called we pretty print the Decl name. This is suboptimal because it causes many memory allocations for something which is essentially immutable. This PR introduces step-by-step working cache if ::Name() was called. It reduces the temporary memory allocations by 12 Mb in standard ROOT and 130Mb in -Druntime_cxxmodules=On cache. The benchmarking test was provided by @pcanal in #3012. It is important to reduce the temporary allocations because they can contribute to increasing of the peak memory usage of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3616:221,cache,cache,221,https://root.cern,https://github.com/root-project/root/pull/3616,2,['cache'],['cache']
Performance,"Currently, some sections of TFile::ReadProcessID are only protected; from concurrent access if Internal::IsParTreeProcessingEnabled(); is true. The only entity that enables ParTreeProcessing in ROOT; is TTreeProcessorMT::Process. With this patch, concurrent access to TFile::ReadProcessID is always protected. Rationale: if TTreeProcessorMT::Process needs that protection, everyone needs it. Note that `TParTreeProcessing` is unused after this change, so if you agree the change can go in, I'll add a commit that removes `TParTreeProcessing` from ROOT. If you _don't_ agree the change can go in: why does `TTreeProcessorMT::Process` need this protection but other usecases do not (note that `TParTreeProcessing` is in `ROOT::Internal`, so we do not expect users to activate these locks)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5288:74,concurren,concurrent,74,https://root.cern,https://github.com/root-project/root/pull/5288,2,['concurren'],['concurrent']
Performance,Custom functionality loaded as modules and not as prerequicities.; Although old method with `_prereq` will continue to work. Fix minor problems with TTree player in JSROOT. Small code adjustments in THttp classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10267:21,load,loaded,21,https://root.cern,https://github.com/root-project/root/pull/10267,1,['load'],['loaded']
Performance,D-FR-Robots.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Robots.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNLPGrid.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SDG-G2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Robots.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7a819ef2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNLPGrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d71343e8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d71343e8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d7e8dc79.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SlovakGrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/728fa56d.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SlovakGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/728fa56d.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e13e,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:52676,load,load,52676,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"DAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=h9OXPXSoNf6rog1YhZy1Iuiji7Tq8asNeePutHMw2rs%3D&reserved=0>,O=Grid,C=CA; >>>>>> * start date: Apr 08 16:29:03 2021 GMT; >>>>>> * expire date: May 08 16:29:03 2022 GMT; >>>>>> * common name: dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>; >>>>>> * issuer: CN=Grid Canada Certificate Authority,O=Grid,C=CA; >>>>>> * NSS error -8179 (SEC_ERROR_UNKNOWN_ISSUER); >>>>>> * Peer's Certificate issuer is not recognized.; >>>>>> * Closing connection 0; >>>>>> curl: (60) Peer's Certificate issuer is not recognized.; >>>>>> More details here: http://curl.haxx.se/docs/sslcerts.html ; >>>>>> <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fcurl.haxx.se%2Fdocs%2Fsslcerts.html&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400460996291%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=s%2FTzkvNzM41e0GBRqYtbxaUzcM3edlGm0YFY9wV%2BN2M%3D&reserved=0>; >>>>>>; >>>>>> curl performs SSL certificate verification by default, using a ; >>>>>> ""bundle""; >>>>>>  of Certificate Authority (CA) public keys (CA certs). If the default; >>>>>>  bundle file isn't adequate, you can specify an alternate file; >>>>>>  using the --cacert option.; >>>>>> If this HTTPS server uses a certificate signed by a CA represented in; >>>>>>  the bundle, the certificate verification probably failed due to a; >>>>>>  problem with the certificate (it might be expired, or the name might; >>>>>>  not match the domain name in the URL).; >>>>>> If you'd like to turn off curl's verification of the certificate, use; >>>>>>  the -k (or --insecure) option.; >>>>>> ***@***.*** t5]$; >>>>>; >>>>>; >>>>> I am unfamiliar with how to use curl with X509 and everything I ; >>>>> tried so far has not worked. eg; >>>>> *curl*-v ; >>>>> https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840016493:5705,perform,performs,5705,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840016493,1,['perform'],['performs']
Performance,DECREF' in /usr/include/python2.7/object.h:825; /usr/include/python2.7/object.h:774:9: expanded from macro 'Py_DECREF'; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:2082:9: 'pyobj' is null; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:2082:5: Taking false branch; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:2087:16: Calling 'IsPyCArgObject'; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:164:10: 'pycarg_type' is null; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:164:5: Taking true branch; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:165:9: 'ctmod' initialized here; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:166:13: Assuming 'ctmod' is null; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:166:9: Taking true branch; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:176:9: Access to field 'ob_refcnt' results in a dereference of a null pointer (loaded from variable 'ctmod'); /usr/include/python2.7/object.h:774:9: expanded from macro 'Py_DECREF'; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:1132:9: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:1143:9: Assuming the condition is true; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:1143:9: Left side of '&&' is true; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:1143:34: Assuming the condition is false; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:1143:5: Taking false branch; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:1146:25: Call to 'realloc' has an allocation size of 0 bytes; /opt/root_src/bindings/pyroot/cppyy/CPyCppyy/src/Converters.cxx:1201:9: As,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7400#issuecomment-792738257:6162,load,loaded,6162,https://root.cern,https://github.com/root-project/root/issues/7400#issuecomment-792738257,1,['load'],['loaded']
Performance,"DF::RJittedAction>(std::shared_ptr<ROOT::Internal::RDF::RJittedAction> const&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT8Internal3RDF16MakeSharedOnHeapI4TH1DEEPSt10shared_ptrIT_ERKS6_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::shared_ptr<TH1D>* ROOT::Internal::RDF::MakeSharedOnHeap<TH1D>(std::shared_ptr<TH1D> const&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6Detail3RDF13MakeResultPtrI4TH1DEENS_3RDF10RResultPtrIT_EERKSt10shared_ptrIS6_ERNS1_12RLoopManagerES8_INS_8Internal3RDF11RActionBaseEE' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::RDF::RResultPtr<TH1D> ROOT::Detail::RDF::MakeResultPtr<TH1D>(std::shared_ptr<TH1D> const&, ROOT::Detail::RDF::RLoopManager&, std::shared_ptr<ROOT::Internal::RDF::RActionBase>); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZSteqI4TH1DEbRKSt10shared_ptrIT_EDn' unresolved while linking [cling interface function]!; You are probably missing the definition of bool std::operator==<TH1D>(std::shared_ptr<TH1D> const&, decltype(nullptr)); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT8Internal3RDF16MakeSharedOnHeapINS_6Detail3RDF9RNodeBaseEEEPSt10shared_ptrIT_ERKS8_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZStneIN4ROOT8Internal3RDF11RActionBaseEEbRKSt10shared_ptrIT_EDn' unresolved while linking [cling interface function]!; You are probably ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-1573184913:5398,load,load,5398,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-1573184913,1,['load'],['load']
Performance,"DF::TActionImpl<Helper>; * Helper(Helper &&): a move-constructor is required. Copy-constructors are discouraged.; * ColumnTypes_t: alias for a ROOT::TypeTraits::TypeList instantiation that specifies the types of the; columns to be passed to this action helper.; * Result_t: alias for the type of the result of this action helper. Must be default-constructible.; * ROOT::Detail::TDF::ColumnNames_t GetColumnNames() const: return the names of the columns processed by this; action. The number of names must be equal to the size of ColumnTypes_t.; * void Exec(unsigned int slot, ColumnTypes...columnValues): each working thread shall call this method; during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value:; this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of; the requested columns for the particular entry being processed.; * void InitTask(TTreeReader *, unsigned int slot): each working thread shall call this method during the event; loop, before processing a batch of entries (possibly read from the TTreeReader passed as argument, if not null).; This method can be used e.g. to prepare the helper to process a batch of entries in a given thread. Can be no-op.; * void Initialize(): this method is called once before starting the event-loop. Useful for setup operations.; Can be no-op.; * void Finalize(): this method is called at the end of the event loop. Commonly used to finalize the contents; of the result.; * Result_t &PartialUpdate(unsigned int slot): this method is optional, i.e. can be omitted. If present, it should; return the value of the partial result of this action for the given 'slot'. Different threads might call this; method concurrently, but will always pass different 'slot' numbers.; * std::shared_ptr<Result_t> GetResultPtr() const: return a shared_ptr to the result of this action (of type; Result_t). The TResultPtr returned by Book will point to this object.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1905:2194,concurren,concurrently,2194,https://root.cern,https://github.com/root-project/root/pull/1905,1,['concurren'],['concurrently']
Performance,"Data sources such as RNTuple that have efficient ways to get the; size of a collection can recognize the `__rdf_sizeof_` prefix and; connect that variable to the column representing the size of `var`. To do:; - [x] test interaction of `#var` and `Alias`; - [x] nicer error handling in case of column name that is just `""#""` (Jakob's comment); - [x] do not expand `#define`, `#pragma` and other preprocessor directives; - [x] do not return `__rdf_sizeof_XXX` columns from `GetColumnNames` (RNTupleDS can, but RDF should filter them out); - [x] ignore `__rdf_sizeof_XXX` columns in `Snapshot` (~~printing a warning~~ throwing if passed explicitly by the user); - [x] same for `Cache`; - [x] document interaction of `Snapshot` and `Cache` with the `#var` columns; - [x] test interaction of `Cache` and `#var`; - [x] RNTuple's `#var` columns should probably be `std::size_t` instead of `unsigned int`s? that would be the less surprising. Also I got _some_ numbers out rather than an exception when I used the wrong type",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7354:675,Cache,Cache,675,https://root.cern,https://github.com/root-project/root/pull/7354,3,['Cache'],['Cache']
Performance,"Data {; std::unique_ptr<RBrowserDataCleanup> fCleanupHandle; ///<! cleanup handle for RecursiveRemove; };. // RBrowserData.cxx; class RBrowserDataCleanup : public TObject {};; ```. Which leads to failures in `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`:. ```; 1548: +Error in <TProtoClass::FindDataMember>: data member with index 0 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >; 1548: +Error in <CreateRealData>: Cannot find data member # 0 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog!; 1548: +Error in <TProtoClass::FindDataMember>: data member with index 1 is not found in class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> >; 1548: +Error in <CreateRealData>: Cannot find data member # 1 of class tuple<ROOT::Experimental::RBrowserDataCleanup*,default_delete<ROOT::Experimental::RBrowserDataCleanup> > for parent ROOT::Experimental::RFileDialog!; ```. As per the discussion in the linked PR, it seems that `TClass` is always generating dictionaries for the `std::unique_ptr` data member, even if it's transient. As things stand, the only ""fix"" is to move the `RBrowserDataCleanup` class from the implementation file to the header, and adding `ClassDef` macro since it inherits from `TObject`. An alternative workaround was changing `std::unique_ptr<RBrowserDataCleanup>` to `RBrowserDataCleanup *`, which is treated transparently in case of a transient member. ### Reproducer. 1. Revert the changes in #13134 ; 2. Run the following macro; ```cpp; void rbrowserdatacleanup(){; gSystem->LoadAllLibraries();; ROOT::Detail::TStatusBitsChecker::CheckAllClasses();; }; ```. ### ROOT version. master. ### Installation method. built from sources. ### Operating system. linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13361:2142,Load,LoadAllLibraries,2142,https://root.cern,https://github.com/root-project/root/issues/13361,1,['Load'],['LoadAllLibraries']
Performance,"DataClass->InheritsFrom(cl)) {; (gdb) bt; #0 0x00007ffff23d256b in TBuildRealData::Inspect (this=this@entry=0x7fffffffbc70, cl=cl@entry=0x97df820, pname=0x97df410 """", mname=mname@entry=0x7ffff274a79b ""fClassName"", ; add=add@entry=0x432d540) at /u/rlalik/hades/software/root-v5/core/meta/src/TClass.cxx:549; #1 0x00007ffff2538d3a in ROOTDict::TClassRef_ShowMembers (obj=0x432d540, R__insp=...) at /u/rlalik/hades/software/root-v5/build_cmake/core/meta/G__Meta.cxx:3082; #2 0x00007ffff23c55e1 in TClass::CallShowMembers (this=this@entry=0x97dc950, obj=obj@entry=0x432d540, insp=..., isATObject=isATObject@entry=-1); at /u/rlalik/hades/software/root-v5/core/meta/src/TClass.cxx:1866; #3 0x00007ffff23d215d in TClass::BuildRealData (this=this@entry=0x97dc950, pointer=pointer@entry=0x432d540, isTransient=true); at /u/rlalik/hades/software/root-v5/core/meta/src/TClass.cxx:1719; #4 0x00007ffff23d29b4 in TBuildRealData::Inspect (this=this@entry=0x7fffffffbe50, cl=cl@entry=0x97b0bf0, pname=<optimized out>, mname=mname@entry=0x7fffefc2b0d9 ""fTargetClass"", ; add=add@entry=0x432d540) at /u/rlalik/hades/software/root-v5/core/meta/src/TClass.cxx:620; #5 0x00007fffefba86af in TBranchElement::ShowMembers (this=0x432d290, R__insp=...) at /u/rlalik/hades/software/root-v5/build_cmake/tree/tree/G__Tree.cxx:3835; #6 0x00007ffff23c571d in TClass::CallShowMembers (this=this@entry=0x97b0bf0, obj=obj@entry=0x432d290, insp=..., isATObject=<optimized out>, isATObject@entry=-1); at /u/rlalik/hades/software/root-v5/core/meta/src/TClass.cxx:1883; #7 0x00007ffff23d215d in TClass::BuildRealData (this=this@entry=0x97b0bf0, pointer=pointer@entry=0x432d290, isTransient=isTransient@entry=false); at /u/rlalik/hades/software/root-v5/core/meta/src/TClass.cxx:1719; #8 0x00007ffff1447bad in TBufferFile::WriteClassBuffer (this=this@entry=0xb5bea80, cl=0x97b0bf0, pointer=pointer@entry=0x432d290); at /u/rlalik/hades/software/root-v5/io/io/src/TBufferFile.cxx:3960; #9 0x00007fffefbd0606 in TBranchElement::Streamer (this=",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9564:1802,optimiz,optimized,1802,https://root.cern,https://github.com/root-project/root/issues/9564,1,['optimiz'],['optimized']
Performance,"Dear @Esword618 ,. I see what you mean now, thanks for the clarification. That feature is not available in ROOT. It would also somehow conflict with the policy of lazily loading the different parts of ROOT that happens today in PyROOT (by design). But you can let us know if you need help in understanding some parts of the codebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14427#issuecomment-1920095029:170,load,loading,170,https://root.cern,https://github.com/root-project/root/issues/14427#issuecomment-1920095029,1,['load'],['loading']
Performance,"Dear @couet ,. 1) sorry for diappearing. DESY has changed the mail setup and I've noticed that quite late... Now reading the mails. 2) >I do not get a crash. So I do not really understand the protection you added. I see that in the code I do; ``` ; g++ $(root-config --glibs --cflags ) arrow.cxx -g -o arrow.exe ; ./arrow.exe; ```; and get. ```; $ ./arrow.exe . *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fa672acc46c in __libc_waitpid (pid=1369358, stat_loc=stat_loc; entry=0x7ffc45f54860, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fa672a49f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fa67745b5dc in TUnixSystem::StackTrace (this=0x1c20980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fa67745e06a in TUnixSystem::DispatchSignals (this=0x1c20980, sig=kSigFloatingException) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 TArrow::PaintArrow (this=0x2812cd0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>, arrowsize=<optimized out>, option=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/graf/src/TArrow.cxx:275; #6 0x0000000000400e1b in main (argc=1, argv=0x7ffc45f57528) at arrow.cxx:85; ===========================================================. ```. The reason if quite simple: when the pad is too small the coordinated rounded from float to int are the same.; Then the code divides over their difference which is 0. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6513#issuecomment-702670088:860,optimiz,optimized,860,https://root.cern,https://github.com/root-project/root/pull/6513#issuecomment-702670088,7,['optimiz'],['optimized']
Performance,"Dear @cxwx, in absence of a reproducer, I will close the issue: if you think this should not be done please re-open it with a comment.; However, let me try to propose a solution, even if a lot of guessing is done without knowing anything about the header file you want to include. Why don't you generate a dictionary and ""precompile""that header in the form of a pcm? Alternatively, you could refactor the code inside it and create a library and a very thin header to then load the library and include the header at startup. I hope this helps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6719#issuecomment-1774002137:472,load,load,472,https://root.cern,https://github.com/root-project/root/issues/6719#issuecomment-1774002137,1,['load'],['load']
Performance,"Dear ROOT developers,. this Pull Request tries to address [this issue](https://root-forum.cern.ch/t/using-tfitshdu-to-read-a-table-with-arrays-as-column-elements/37867) I have opened in the ROOT forum. A limitation of the `TFITSHDU` class was its impossibility to read within columns of a FITS table containing a variable-length array. My patch adds such a possibility. I have modified the `Column` and `Cell` `struct`s adding objects necessary to read a variable-length arrays embedded in a cell. The`LoadHDU` function (fundamentally the initialiser of the `TFITSHDU` class) was modified accordingly such that this objects could be assigned. I have modified the functions dealing with printing and reading values from a table such that the occurrence of a column with variable-length arrays embedded can be properly signalled. In order not to interfere with the previous development of data handling I created a function to read within a cell for this specific case: it is called `GetTabVarLengthVectorCell`. I believe it does not make sense to read the entire column in this case (returning an array of variable-length arrays). The user is allowed to access the single cell, when attempting to use any other function (e.g. `GetTabRealVectorColumn`) to read the entire column, a warning is issued pointing him to this specific function. Last I added a tutorial in `tutorials/fitsio/FITS_tutorial8.C` with a test file illustrating the application of this case. I would kindly ask for a review,. Best. Cosimo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5099:502,Load,LoadHDU,502,https://root.cern,https://github.com/root-project/root/pull/5099,1,['Load'],['LoadHDU']
Performance,"Dear ROOT team,. I am attempting to compile LHCb's Allen with the following command on a RHEL9 machine with CVMFS:. ```; mkdir build; cd build; cmake -DSTANDALONE=ON -DCMAKE_TOOLCHAIN_FILE=/cvmfs/lhcb.cern.ch/lib/lhcb/lcg-toolchains/LCG_103/x86_64_v3-el9-gcc11-opt+g.cmake -GNinja ..; ninja; ```. Compilation works fine, but upon execution of the produced executable I encounter the following error:. ```; $ ./Allen --sequence hlt1_pp_default; ...; <<< cling interactive line includer >>>: fatal error: module file '/build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-6.28.00/src/ROOT-6.28.00-build/lib/Vc.pcm' not found: module file not found; <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.28.00-98349/x86_64-centos9-gcc11-opt/lib/MathCore.pcm'; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; ...; Failed to load module SessionViewer; input_line_4:2:2: error: unknown type name 'include'; #include ""TError.h""; ^; input_line_4:2:1: error: expected unqualified-id; #include ""TError.h""; ^; input_line_4:4:2: error: unknown type name 'define'; #define _ClassDefInterp_(name,id,virtual_keyword, overrd) \; ^; input_line_4:21:7: error: expected ';' after top level declarator; #undef ClassDef; ^; ;; input_line_5:1:2: error: unknown type name 'include'; #include ""cling/Interpreter/DynamicLookupRuntimeUniverse.h""; ^; input_line_5:1:1: error: expected unqualified-id; #include ""cling/Interpreter/DynamicLookupRuntimeUniverse.h""; ^; Failed to load module MathCore; Info in <TInterpreter::TCling::RegisterModule>: Module MathCore in modulemap failed to load.; ```. Please note that the folder `/build/jenkins` does not exist in the machine I am building on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12458:850,load,load,850,https://root.cern,https://github.com/root-project/root/issues/12458,8,['load'],['load']
Performance,"Dear ROOT team,. This is the code for Interior Point OPTimizer (Ipopt) . You can find more documentation on http://oproject.org/pages/Ipopt.html. Thanks; Omar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3249:53,OPTimiz,OPTimizer,53,https://root.cern,https://github.com/root-project/root/pull/3249,1,['OPTimiz'],['OPTimizer']
Performance,"Dear all, I just pushed the discussed performance improvements for the asymptotic method. The main improvement is to only create one RooDerivative object for each varied parameter. The changes lead to a significant speedup, for the rf611_weightedfits.C example, the speedup for the calculation of the specific matrix corresponds to a factor of ~4. Numerically, the results are identical. The full tutorial is sped up by a factor of ~2. The speed improvement will be larger for a larger number of free parameters (the tutorial only fits 2).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4640#issuecomment-571989574:38,perform,performance,38,https://root.cern,https://github.com/root-project/root/pull/4640#issuecomment-571989574,1,['perform'],['performance']
Performance,"Depends on: #1317, adds only one other commit:. It seems automatically loading TreePlayer when TDataFrame is used; without the appropriate include never worked. This was previously; fixed by just adding TreePlayer (which contains TDF) to the PCH.; ; As always, let's recreate this hack with modules to make restore; the old behavior with modules turned on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1328:71,load,loading,71,https://root.cern,https://github.com/root-project/root/pull/1328,1,['load'],['loading']
Performance,"Describe the bug; When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt.; The message is related to SOFIE:. ```; IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'!; You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&); Maybe you need to load the corresponding shared library?; Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'?; ```. ROOT 6.24/06 works fine. ### Expected behavior; No warning message. ### To Reproduce; Steps to reproduce the behavior:; 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 ; 2. Source dev4arm; `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`; 3. Start ROOT, e.g. `root -b -q`. ### Setup; 1. ROOT version: 6.26/04; 2. Operating system: aarch64, centos7; 3. LCG stack. ### Additional context; Affecting ATLAS (first noticed by Asoka Da Silva)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10877:1410,load,load,1410,https://root.cern,https://github.com/root-project/root/issues/10877,1,['load'],['load']
Performance,Dict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module setDict: ; - Warning in &lt;GenerateModule&gt;: warning: Couldn't find the following specified headers in the module dequeDict: . And 7 more. ### Failing tests:; - [projectroot.test.test_stressfit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10207/testReport/projectroot/test/test_stressfit/); - [projectroot.test.test_stressmathmore](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10207/testReport/projectroot/test/test_stressmathmore/); - [projectroot.test.test_stressHistFactory](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10207/testReport/projectroot/test/test_stressHistFactory/); - [projectroot.test.test_stressentrylist](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10207/testReport/projectroot/test/test_stressentrylist/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_autocache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10207/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_autocache/); - [projectroot.test.test_stressshapes](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10207/testReport/projectroot/test/test_stressshapes/); - [projectroot.test.test_stressvector_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10207/testReport/projectroot/test/test_stressvector_interpreted/); - [projectroot.test.test_stressHistFactory_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10207/testReport/projectroot/test/test_stressHistFactory_interpreted/); - [projectroot.test.test_stressentrylist_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10207/testReport/projectroot/test/test_stressentrylist_interpreted/); - [projectroot.test.test_stressIOPlugins_http](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/10207/testReport/projectroot/test/test_stressIOPlugins_http/). And 115 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1255#issuecomment-340790525:2185,cache,cache,2185,https://root.cern,https://github.com/root-project/root/pull/1255#issuecomment-340790525,1,['cache'],['cache']
Performance,"DictionaryInitialization_libvectorDict_Impl () at G__vectorDict.cxx:982; #6 0x00007fffe54fffdf in (anonymous namespace)::DictInit::DictInit (this=0x7fffe55301d9 <(anonymous namespace)::__TheDictionaryInitializer>) at G__vectorDict.cxx:990; #7 0x00007fffe550011e in __static_initialization_and_destruction_0 (__initialize_p=1, __priority=65535) at G__vectorDict.cxx:992; #8 0x00007fffe5500134 in _GLOBAL__sub_I_G__vectorDict.cxx(void) () at G__vectorDict.cxx:996; #9 0x00007ffff7fe437a in call_init (l=<optimized out>, argc=argc@entry=2, argv=argv@entry=0x7fffffffe4a8, env=env@entry=0x555556b4eb50) at dl-init.c:72; #10 0x00007ffff7fe4476 in call_init (env=0x555556b4eb50, argv=0x7fffffffe4a8, argc=2, l=<optimized out>) at dl-init.c:30; #11 _dl_init (main_map=0x555558799bf0, argc=2, argv=0x7fffffffe4a8, env=0x555556b4eb50) at dl-init.c:119; #12 0x00007ffff7fe82d3 in dl_open_worker (a=a@entry=0x7fffffffc6c0) at dl-open.c:517; #13 0x00007ffff7b4fb2f in __GI__dl_catch_exception (exception=<optimized out>, operate=<optimized out>, args=<optimized out>) at dl-error-skeleton.c:196; #14 0x00007ffff7fe7bba in _dl_open (file=0x555558d0abf0 ""/home/eguiraud/ROOT/install_dbg_includepaths/lib/libvectorDict.so"", mode=-2147483391, caller_dlopen=0x7fffefed6582 <cling::utils::platform::DLOpen(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)+41>, nsid=<optimized out>, argc=2, argv=0x7fffffffe4a8, env=0x555556b4eb50) at dl-open.c:599; #15 0x00007ffff7f83256 in dlopen_doit (a=a@entry=0x7fffffffc8e0) at dlopen.c:66; #16 0x00007ffff7b4fb2f in __GI__dl_catch_exception (exception=exception@entry=0x7fffffffc880, operate=<optimized out>, args=<optimized out>) at dl-error-skeleton.c:196; #17 0x00007ffff7b4fbbf in __GI__dl_catch_error (objname=0x5555559ab150, errstring=0x5555559ab158, mallocedp=0x5555559ab148, operate=<optimized out>, args=<optimized out>) at dl-error-skeleton.c:215;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7108#issuecomment-769679628:3620,optimiz,optimized,3620,https://root.cern,https://github.com/root-project/root/issues/7108#issuecomment-769679628,3,['optimiz'],['optimized']
Performance,Did you make any performance studies?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8804#issuecomment-893594643:17,perform,performance,17,https://root.cern,https://github.com/root-project/root/pull/8804#issuecomment-893594643,1,['perform'],['performance']
Performance,Didn't recognize `ROOT-performance-centos7-multicore`/`default.` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6445#issuecomment-698669501:23,perform,performance-,23,https://root.cern,https://github.com/root-project/root/pull/6445#issuecomment-698669501,1,['perform'],['performance-']
Performance,Didn't recognize `ROOT-performance-centos8-multicore`/`defaul` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6854#issuecomment-734003611:23,perform,performance-,23,https://root.cern,https://github.com/root-project/root/pull/6854#issuecomment-734003611,1,['perform'],['performance-']
Performance,Didn't recognize `ROOT-performance-centos8-multicore`/`default.` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760#issuecomment-1022683619:23,perform,performance-,23,https://root.cern,https://github.com/root-project/root/pull/3760#issuecomment-1022683619,1,['perform'],['performance-']
Performance,"Direct I/O bypasses the OS page cache and allows to reach much higher bandwidths. However, it introduces strict alignment requirements to the offset and size of all write requests, as well as the userspace pointer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16144:32,cache,cache,32,https://root.cern,https://github.com/root-project/root/pull/16144,1,['cache'],['cache']
Performance,Disable Cling optimizations in TCanvas::SaveSource,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9467:14,optimiz,optimizations,14,https://root.cern,https://github.com/root-project/root/pull/9467,1,['optimiz'],['optimizations']
Performance,Disable validation of the diagnostic options when loading the C++ module,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2680:50,load,loading,50,https://root.cern,https://github.com/root-project/root/pull/2680,1,['load'],['loading']
Performance,Distributed RunGraphs always submits concurrently,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13344:37,concurren,concurrently,37,https://root.cern,https://github.com/root-project/root/pull/13344,1,['concurren'],['concurrently']
Performance,"Do not set up the iterator in the ctor.; ; Many interfaces in ROOT namely TCling do not need to iterate over decls to find what they look for. They use the regular lookup facilities which are provided by cling or clang.; ; In a few cases we still use the pattern:; `TClingClassInfo(fInterpreter) ci; ci.GetDataMember(..);`; where we are supposed to look for a ROOT's definition of a data member on the global scope. In turn, this pattern does not walk the decls but performs a 'regular' lookup.; ; This patch removes the expensive setup of the iterators (triggering humongous amount of deserializations). We lazily set up the iterators only when we are about to start iterating (most notably coming from the legacy PyROOT interfaces).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1668:466,perform,performs,466,https://root.cern,https://github.com/root-project/root/pull/1668,1,['perform'],['performs']
Performance,"Do not skip the condition to avoid to build a normalization ratio integrals for the composite terms of the conditional RooProdPdf. The code which was avoid to create the ratio of integrals when the provided range is equal to the default range of the variables was skipped. Not clear why, it is now re-added. This seems to fix the performance issue observed in ; https://root-forum.cern.ch/t/bug-range-command-enforces-numerical-integral/43350.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7178:330,perform,performance,330,https://root.cern,https://github.com/root-project/root/pull/7178,1,['perform'],['performance']
Performance,Do we have an idea of what the performance numbers are after landing this PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13133#issuecomment-1988687940:31,perform,performance,31,https://root.cern,https://github.com/root-project/root/pull/13133#issuecomment-1988687940,1,['perform'],['performance']
Performance,"Do we intent on allowing the user to elect whether to store the data in big-endian or little-endian order (i.e. in case they want to optmized read performance on big-endian platforms)?. > for columns whose on-storage representation is inherently little-endian. . What do you mean by ""inherently"" here? And what are the columns are not in that category?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10402#issuecomment-1099288995:147,perform,performance,147,https://root.cern,https://github.com/root-project/root/pull/10402#issuecomment-1099288995,1,['perform'],['performance']
Performance,"Do you mean that RDataFrame is not used at all in those 2 examples? i.e. If RDataFrame is used, it is the one (indirectly) calling GetAddress/GetWhere and the solution is to cache the address and have the address/cache refreshed once every file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3216#issuecomment-456450811:174,cache,cache,174,https://root.cern,https://github.com/root-project/root/pull/3216#issuecomment-456450811,2,['cache'],['cache']
Performance,"Do you meaning this patch? [[clang-repl] Support statements on global scope in incremental mode](https://reviews.llvm.org/D127284) ; It looks almost identical to unnamed macro support. So I assumed clang-repl (and later cling) will have that feature soon.; However, both ""on load"" feature implemented with that patch or unnamed macro bring a problem that the script file is not a valid c++ source file anymore so a compiler, not an interpreter like cling, cannot compile it. While my proposed approaches do not have this limitation. But of course, we can `#include ""a_valid_cxx_file.cpp""` in a `.C` script file containing unnamed macro for ""on load"". Just a little indirect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11299#issuecomment-1235284590:275,load,load,275,https://root.cern,https://github.com/root-project/root/issues/11299#issuecomment-1235284590,2,['load'],['load']
Performance,"Does RDF have a test for this scenario?. I thought about that and I am not really sure if that'd work. If the semantics of the Cache/Snapshot suppose resolution of missing entities while running the produced code then it'd indeed fail. I can imagine this can be detected at the string generation time and we could explicitly load the relevant library beforehand. This can reduce the implicitness of how things happen and improve performance for the 'regular' code (assuming your example is exotic). Either way, if that's not the intended semantics I would be totally fine if we close this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3765#issuecomment-489132467:127,Cache,Cache,127,https://root.cern,https://github.com/root-project/root/pull/3765#issuecomment-489132467,3,"['Cache', 'load', 'perform']","['Cache', 'load', 'performance']"
Performance,"Does `gSystem->Load(""libDict.so"")` help? (Sorry for the slow response.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10512#issuecomment-1320970858:15,Load,Load,15,https://root.cern,https://github.com/root-project/root/issues/10512#issuecomment-1320970858,1,['Load'],['Load']
Performance,"Does this help:. 2020-12-16 12:22:18,612 | INFO | Thread-1 | gfal2 | connect | [gfal_module_load] plugin /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/emi/4.0.2-1_200423.fix1/usr/lib64/gfal2-plugins//libgfal_plugin_xrootd.so loaded with success",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-746399469:231,load,loaded,231,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746399469,1,['load'],['loaded']
Performance,Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive; - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics; - [x] Look for another solution for the static `TRegex` members; - [x] Add a random sleep to the test cases to stir things up; - [x] Add tests for `Cache` and `Snapshot`; - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6266:318,Cache,Cache,318,https://root.cern,https://github.com/root-project/root/pull/6266,1,['Cache'],['Cache']
Performance,"Done:; * 646e20138a - (6 hours ago) Respect the semantic of MATH_NO_PLUGIN_MANAGER in DefaultMinimizerType — Philippe Canal (HEAD -> v6-12-00-patches, origin/v6-12-00-patches); * bd8476c068 - (18 hours ago) Protect MinimizerOptions::DefaultMinimizerType from multi-threaded calls — Philippe Canal. but too late for 6.12/06",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1611#issuecomment-364557352:259,multi-thread,multi-threaded,259,https://root.cern,https://github.com/root-project/root/pull/1611#issuecomment-364557352,1,['multi-thread'],['multi-threaded']
Performance,"Due to a failing test and the resulting investigation, we decide to change the pythonization of Get() and __getattr__ in the classes TDirectory, TDirectoryFile and TFile.; The situation is now the following:; . - __getattr__ : TDirectory --> TDirectoryFile --> TFile; - caches the returned object for future attempts; - raises AttributeError if object not found; ; - Get() : TDirectoryFile --> TFile; - does not cache the returned object; - returns nullptr if object not found. A new test to check the caching functionality has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4156:270,cache,caches,270,https://root.cern,https://github.com/root-project/root/pull/4156,2,['cache'],"['cache', 'caches']"
Performance,"Due to some planned major improvements to RVec (namely the addition of; a small buffer optimization) the layout of RVec objects will change in; a backward-incompatible way between v6.24 and v6.26. Because of this, we now print a warning if an application is reading or; writing a ROOT::RVec object from/to a ROOT file. We assume this is an; exceedingly rare case, as the ROOT interface typically used to; manipulate RVecs is RDataFrame, and RDataFrame performs an on-the-fly; RVec <-> std::vector conversion rather than writing RVecs to disk. Note that, currently, RVecs written e.g. in a TTree cannot be read back; using certain ROOT interfaces (e.g. TTreeReaderArray and RDataFrame).; These limitations will also be lifted in v6.26.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7222:87,optimiz,optimization,87,https://root.cern,https://github.com/root-project/root/pull/7222,2,"['optimiz', 'perform']","['optimization', 'performs']"
Performance,"Due to the way it works by default, sourcing a root version built with; current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the; following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with; pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4693:198,perform,performed,198,https://root.cern,https://github.com/root-project/root/pull/4693,2,['perform'],['performed']
Performance,DynamicLibraryManager::loadLibrary if the parameter resolve is false,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10593:23,load,loadLibrary,23,https://root.cern,https://github.com/root-project/root/pull/10593,1,['load'],['loadLibrary']
Performance,E.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/seegrid-ca-2013.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNIC.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/seegrid-ca-2013.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b2771d44.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b2771d44.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SRCE.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e2023333.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NCSA-slcs-2013.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e2023333.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2fc6b233.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Personnels.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2fc6b233.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ff94d436.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/0e635db3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8fa17d52.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/0e635db3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IGCA2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/RDIG.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Personnels.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/156a0f0f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/seegrid-ca-2013.signing_policy',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:43006,load,load,43006,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"EDIT: to merge if nightlies are green for master. This resolves ROOT-9456, ""[Jenkins][DF] Sporadic failures in test_snapshotNFiles"". The issue is due to interleaved TBB task execution in the same thread. When nested task spawning is present (i.e. when TBB tasks spawn other; TBB tasks and the thread pool contains at least three threads), the TBB; task stealing mechanism makes it possible that a thread starts executing; a new instance of the ""parent"" tasks before it finishes the execution of; the previous parent task (this happens when the thread is waiting for a; ""stolen"" child task to finish, so it steals another threads' parent; task). In the case of a multi-thread snapshot, one needs to write at least two; branches for the multi-thread branch writing to kick in and have nested; task spawning. The crash was caused by a new parent task overwriting the output TTree; of the previous parent task in a given thread. When the previous parent; task resumed execution, it ended up trying to flush out the contents of; the deleted output TTree. The solution adopted is to use thread-local stacks of output TTrees (as; opposed to single output TTrees), that tasks push and pop when they; start and finish respectively.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2228:662,multi-thread,multi-thread,662,https://root.cern,https://github.com/root-project/root/pull/2228,2,['multi-thread'],['multi-thread']
Performance,EGIS.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1691b9ba.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/cc5645bd.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GermanGrid.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/cc5645bd.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f4cf8fb6.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b3f5558.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GermanGrid.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b3f5558.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GermanGrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA3G3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA3G3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/87429ba3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TRGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7c27c6a1.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HellasGrid-CA-2016.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HellasGrid-CA-2016.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HellasGrid-CA-2016.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HellasGrid-CA-2016.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f4cf8fb6.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/6999cae3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-securit,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:35812,load,load,35812,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,EK.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MYIFAM.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dbf09133.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dbf09133.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8f016f43.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8f016f43.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GermanGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d0a33f8e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d0a33f8e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dd4b34ea.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b2783ac.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b2783ac.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dd4b34ea.signing_policy',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:28859,load,load,28859,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,EP-2013.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b93d6240.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/39d30eba.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b93d6240.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e7734335.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30351739.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/39d30eba.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30351739.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e7734335.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/61cd35bd.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IHEP-2013.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/61cd35bd.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HPCI.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HPCI.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ead666c8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/06769ccd.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HPCI.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/06769ccd.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/522b8537.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NorduGrid-2015.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/522b8537.signing_policy' from CURLOPT_CAPA,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:56482,load,load,56482,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"E]; [-experimental-io-features EXPERIMENTAL_IO_FEATURES]; TARGET SOURCES. This program will add histograms, trees and other objects from a list; of ROOT files and write them to a target ROOT file. The target file is; newly created and must not exist, or if -f (""force"") is given, must; not be one of the source files. OPTIONS:; -a Append to the output; -f Force overwriting of output file; -f[0-9] Gives the ability to specify the compression level of the target file.; Default is 1 (kDefaultZLIB), 0 is uncompressed, 9 is maximum; compression (see TFile::TFile documentation). You can also specify the; full compresion algorithm, e.g. -f206; -fk Sets the target file to contain the baskets with the same compression; as the input files (unless -O is specified). Compresses the meta data; using the compression level specified in the first input or the; compression setting after fk (for example 206 when using -fk206); -ff The compression level use is the one specified in the first input; -k Skip corrupt or non-existent files, do not exit; -O Re-optimize basket size when merging TTree; -T Do not merge Trees; -v Explicitly set the verbosity level: 0 request no output, 99 is the; default; -j Parallelize the execution in 'J' processes. If the number of processes; is not specified, use the system maximum.; -dbg Enable verbosity. If -j was specified, do not not delete partial files; stored inside working directory.; -d Carry out the partial multiprocess execution in the specified; directory; -n Open at most 'N' files at once (use 0 to request to use the system; maximum); -cachesize Resize the prefetching cache use to speed up I/O operations (use 0 to; disable); -experimental-io-features Used with an argument provided, enables the corresponding experimental; feature for output trees. See ROOT::Experimental::EIOFeatures; TARGET Target file; SOURCES Source files. If TARGET and SOURCES have different compression settings a slower; method is used. For options that takes a size as argument,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14910#issuecomment-1985435516:1318,optimiz,optimize,1318,https://root.cern,https://github.com/root-project/root/issues/14910#issuecomment-1985435516,1,['optimiz'],['optimize']
Performance,"Each module has a set of identifier tables which aid lookup. Based on this information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same identifier lookup tables across multiple modules. Since lookup is a heavily used operation in compilers clang tries to optimize it as much as possible. In case it sees more than 4 such lookup tables it merges them together into a single table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:; * The progam will use only a small superset of the modules it needs;; * The program will be compiled in multiple TUs and merging of tables will not be called often;. In the interpreter context where we make all module available the merging of such tables becomes CPU intense operation at runtime which produces a lot of temporary reallocations. Moreover, we have seen a lot of profiles where the merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4761:341,optimiz,optimize,341,https://root.cern,https://github.com/root-project/root/pull/4761,1,['optimiz'],['optimize']
Performance,"Each module has a set of identifier tables which aid lookup. Based on this; information clang decides if it needs a declaration to be deserialized. Namespace partitions and other C++ entities may have semantically the same; identifier lookup tables across multiple modules. Since lookup is a heavily used; operation in compilers clang tries to optimize it as much as possible. In case; it sees more than 4 such lookup tables it merges them together into a single; table aiming to keep the lookup algorithmic complexity of O(1). This logic approach has several assumptions:; * The progam will use only a small superset of the modules it needs;; * The program will be compiled in multiple TUs and merging of tables will not; be called often;. In the interpreter context where we make all module available the merging of; such tables becomes CPU intense operation at runtime which produces a lot of; temporary reallocations. Moreover, we have seen a lot of profiles where the; merging operation dominates (by around 18%). This patch tries to make the merging far less often. On some short benchmarks ran; locally we get (70-80%) runtime improvement and ~10% reduction in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4774:344,optimiz,optimize,344,https://root.cern,https://github.com/root-project/root/pull/4774,1,['optimiz'],['optimize']
Performance,"Earlier, ATLAS was seeing a nasty race condition involving ROOT dictionary; information (see [ATR-25049](https://its.cern.ch/jira/browse/ATR-25049)). The ROOT internal class TClassTable records information about all classes; that could potentially be created. This is effectively a singleton,; but TClassTable itself does no locking. Rather, it depends on callers; already having acquired the root internal mutex. When a shared library; is loaded that contains dictionary information, TClassTable gets calls; to register information for classes defined in that file. However,; the ROOT lock is not acquired in that case. So a shared library load; could race with TClass::GetClass and result in corruption of TClassTable. This change modifies TGenericClassInfo::Init so that we will take the lock; when a shared library is loaded. (ATLAS is currently working around this by hacking shared library loading; in order to acquire the lock, but this hack is not possible with newer; versions of glibc, so this will eventually become a blocker for; moving to centos9.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11263:34,race condition,race condition,34,https://root.cern,https://github.com/root-project/root/pull/11263,5,"['load', 'race condition']","['load', 'loaded', 'loading', 'race condition']"
Performance,Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11722:30,load,loading,30,https://root.cern,https://github.com/root-project/root/issues/11722,1,['load'],['loading']
Performance,EmulatedMapProxy.cxx:96; 10: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 12: The value 0 is assigned to 'loop' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:104; 13: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:104; 14: Null pointer value stored to 'addr' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:105; 15: Null pointer value stored to 'helper' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:106; 16: Control jumps to 'case kIsEnum:' at line 110 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:108; 17: Control jumps to 'case kFloat_t:' at line 118 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:111; 18: Forming reference to null pointer in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:118; /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:120:28: warning: Access to field 'flt' results in a dereference of a null pointer (loaded from variable 'helper') [clang-analyzer-core.NullDereference]; 1: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:240; 2: Assuming field 'fObject' is null in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:243; 3: Taking false branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:243; 4: Assuming 'nElements' is > 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:246; 5: Taking true branch in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:246; 6: Calling 'TEmulatedMapProxy::ReadMap' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:247; 7: Assuming the condition is false in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:94; 8: Left side of '&&' is false in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:94; 9: Initializing to 0 in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:96; 10: 'idx' is < 'nElements' in /opt/root_src/io/io/src/TEmulatedMapProxy.cxx:102; 11: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TEmulatedMapPro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:25251,load,loaded,25251,https://root.cern,https://github.com/root-project/root/issues/7431,1,['load'],['loaded']
Performance,Enable CMake race condition checking for linking/generating dicts,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3395:13,race condition,race condition,13,https://root.cern,https://github.com/root-project/root/pull/3395,1,['race condition'],['race condition']
Performance,Enable the semantic global module index to boost performance. Add GMI tabcompletion support.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5847:49,perform,performance,49,https://root.cern,https://github.com/root-project/root/pull/5847,1,['perform'],['performance']
Performance,"Enabled with `TWebCanvas::BatchImageMode()` static method. Allows to process many images with single headless browser invocation and; increase performance of image production - without change of user code. . When many canvases are stored as image in difference places, ; they first collected in batch as JSON and then processed; when at least `n` images are there. Only then headless browser invoked; and create all these images at once. . Provide macro demonstrating this functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16414:143,perform,performance,143,https://root.cern,https://github.com/root-project/root/pull/16414,1,['perform'],['performance']
Performance,Ensures that the cluster prefetch thread flushes all queued requests before processing the termination signal.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9224:53,queue,queued,53,https://root.cern,https://github.com/root-project/root/pull/9224,1,['queue'],['queued']
Performance,"Env: Macos 13.3.1, xcode 14.3. -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_cppzmq builtin_freetype builtin_ftgl builtin_gl2ps builtin_glew builtin_gtest builtin_llvm builtin_nlohmannjson builtin_openssl builtin_openui5 builtin_pcre builtin_tbb builtin_unuran builtin_vdt builtin_veccore builtin_xxhash builtin_zeromq cefweb clad cocoa dataframe davix exceptions fortran gdml http imt libcxx mlp minuit2 minuit2_mpi minuit2_omp mpi opengl pyroot qt5web roofit roofit_multiprocess webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum unuran vdt veccore XML. The error is following:. [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingMethodInfo.cxx.o; [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingRdictModuleFileExtension.cxx.o; [ 79%] Building CXX object core/metacling/src/CMakeFiles/MetaCling.dir/TClingTypedefInfo.cxx.o; While building module 'Core':; While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from ./include/Rtypes.h:195:; In file included from <module-includes>:4:; ./include/TClassEdit.h:29:10: fatal error: 'cxxabi.h' file not found; #include <cxxabi.h>; ^~~~~~~~~~; In file included from input_line_3:2:; ./include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'; #include ""TIsAProxy.h""; ~~~~~~~~^~~~~~~~~~~~~; Error: Error loading the default rootcling header files.; make[2]: *** [core/G__Core.cxx] Error 1; make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12644:1427,load,loading,1427,https://root.cern,https://github.com/root-project/root/issues/12644,1,['load'],['loading']
Performance,"EvalCode (co=0x7ffa50ee45b0, globals=0x7ffa50ee0500, locals=<optimized out>) at /usr/local/src/conda/python-3.10.4/Python/ceval.c:1134; #101 0x000055b06812bc1f in builtin_exec_impl (module=<optimized out>, locals=0x7ffa50ee0500, globals=0x7ffa50ee0500, source=0x7ffa50ee45b0) at /usr/local/src/conda/python-3.10.4/Python/bltinmodule.c:1003; #102 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.4/Python/clinic/bltinmodule.c.h:371; #103 0x000055b06807e5bf in cfunction_vectorcall_FASTCALL (func=0x7ffa5132ca90, args=0x7ffa510c5cd8, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.4/Objects/methodobject.c:430; #104 0x000055b0680733ac in do_call_core (kwdict=0x7ffa50ee05c0, callargs=0x7ffa510c5cc0, func=0x7ffa5132ca90, trace_info=0x7fff519cd190, tstate=<optimized out>) at /usr/local/src/conda/python-3.10.4/Python/ceval.c:5891; #105 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=<optimized out>, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.4/Python/ceval.c:4277; #106 0x000055b06807e3cf in _PyEval_EvalFrame (throwflag=0, f=0x7ffa512df130, tstate=0x55b069159680) at /usr/local/src/conda/python-3.10.4/Python/ceval.c:5052; #107 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7ffa512f9520, tstate=0x55b069159680) at /usr/local/src/conda/python-3.10.4/Python/ceval.c:5065; #108 _PyFunction_Vectorcall (func=0x7ffa512f9510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.4/Objects/call.c:342; #109 0x000055b06807229b in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7ffa5135d188, callable=0x7ffa512f9510, tstate=0x55b069159680) at /usr/local/src/conda/python-3.10.4/Include/cpython/abstract.h:114; #110 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7ffa5135d188, callable=0x7ffa512f9510) at /usr/local/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10676:18587,optimiz,optimized,18587,https://root.cern,https://github.com/root-project/root/issues/10676,3,['optimiz'],['optimized']
Performance,"EvalCode (co=0x7ffa51255160, globals=0x7ffa51237840, locals=<optimized out>) at /usr/local/src/conda/python-3.10.4/Python/ceval.c:1134; #147 0x000055b06812bc1f in builtin_exec_impl (module=<optimized out>, locals=0x7ffa51237840, globals=0x7ffa51237840, source=0x7ffa51255160) at /usr/local/src/conda/python-3.10.4/Python/bltinmodule.c:1003; #148 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.4/Python/clinic/bltinmodule.c.h:371; #149 0x000055b06807e5bf in cfunction_vectorcall_FASTCALL (func=0x7ffa5132ca90, args=0x7ffa5124b098, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.4/Objects/methodobject.c:430; #150 0x000055b0680733ac in do_call_core (kwdict=0x7ffa511ecf00, callargs=0x7ffa5124b080, func=0x7ffa5132ca90, trace_info=0x7fff519cdf80, tstate=<optimized out>) at /usr/local/src/conda/python-3.10.4/Python/ceval.c:5891; #151 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=<optimized out>, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.4/Python/ceval.c:4277; #152 0x000055b06807e3cf in _PyEval_EvalFrame (throwflag=0, f=0x7ffa51038c10, tstate=0x55b069159680) at /usr/local/src/conda/python-3.10.4/Python/ceval.c:5052; #153 _PyEval_Vector (kwnames=<optimized out>, argcount=<optimized out>, args=<optimized out>, locals=0x0, con=0x7ffa512f9520, tstate=0x55b069159680) at /usr/local/src/conda/python-3.10.4/Python/ceval.c:5065; #154 _PyFunction_Vectorcall (func=0x7ffa512f9510, stack=<optimized out>, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.4/Objects/call.c:342; #155 0x000055b06807229b in _PyObject_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7ffa51025888, callable=0x7ffa512f9510, tstate=0x55b069159680) at /usr/local/src/conda/python-3.10.4/Include/cpython/abstract.h:114; #156 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7ffa51025888, callable=0x7ffa512f9510) at /usr/local/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10676:27235,optimiz,optimized,27235,https://root.cern,https://github.com/root-project/root/issues/10676,3,['optimiz'],['optimized']
Performance,"EvalFrameDefault () from /usr/lib/libpython3.10.so.1.0; #9 0x00007f23441e9538 in _PyFunction_Vectorcall () from /usr/lib/libpython3.10.so.1.0; #10 0x00007f23441d9ca5 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.10.so.1.0; #11 0x00007f23441e9538 in _PyFunction_Vectorcall () from /usr/lib/libpython3.10.so.1.0; #12 0x00007f23441d9ca5 in _PyEval_EvalFrameDefault () from /usr/lib/libpython3.10.so.1.0; #13 0x00007f23441f4cc5 in ?? () from /usr/lib/libpython3.10.so.1.0; #14 0x00007f23442da4f6 in ?? () from /usr/lib/libpython3.10.so.1.0; #15 0x00007f23442b0024 in ?? () from /usr/lib/libpython3.10.so.1.0; #16 0x00007f2343ec0259 in start_thread () from /usr/lib/libpthread.so.0; #17 0x00007f2343fd65e3 in clone () from /usr/lib/libc.so.6. Thread 1 (Thread 0x7f2343d62740 (LWP 13922) ""python""):; #0 0x00007f2343fa3a2f in wait4 () from /usr/lib/libc.so.6; #1 0x00007f2343f21a2b in do_system () from /usr/lib/libc.so.6; #2 0x00007f23434ea0bf in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x55fe35ea2d00) at /home/b/bendavid/rootdev19/root/core/unix/src/TUnixSystem.cxx:2108; #3 TUnixSystem::StackTrace (this=0x55fe35ea2d00) at /home/b/bendavid/rootdev19/root/core/unix/src/TUnixSystem.cxx:2399; #4 0x00007f233e3d7c28 in cling::MultiplexInterpreterCallbacks::PrintStackTrace() () from /home/b/bendavid/rootdev19/install/lib/libCling.so; #5 0x00007f233e3cbe0c in cling_runtime_internal_throwIfInvalidPointer () from /home/b/bendavid/rootdev19/install/lib/libCling.so; #6 0x00007f233324203a in ?? (); #7 0x00007fff669129b0 in ?? (); #8 0x00007fff66912be0 in ?? (); #9 0x00007f233e3cbdb0 in ?? () from /home/b/bendavid/rootdev19/install/lib/libCling.so; #10 0x00007f234368a20f in WrapperCall (method=94550400788944, nargs=0, args_=0x7fff66912be0, self=0x0, result=0x7fff669129b0) at /home/b/bendavid/rootdev19/root/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778; #11 0x00007f234368ad50 in CallT<double> (args=<optimized out>, nargs=<optimized out>, self=<optimized ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9112#issuecomment-1011105337:2481,optimiz,optimized,2481,https://root.cern,https://github.com/root-project/root/issues/9112#issuecomment-1011105337,1,['optimiz'],['optimized']
Performance,Evaluate using Profile-Guided Optimization (PGO) for optimizing Root's performance,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15778:30,Optimiz,Optimization,30,https://root.cern,https://github.com/root-project/root/issues/15778,3,"['Optimiz', 'optimiz', 'perform']","['Optimization', 'optimizing', 'performance']"
Performance,"EvaluateInternal (this=0x4f17a0, input=..., CO=..., V=0x7fffffffcc70, wrapPoint=<optimized out>) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1379; > #70 0x00007fffee95d98f in TCling::Calc (this=0x4f0e00, line=0x1c224b0 ""ROOT::Internal::RDF::JitFilterHelper(R_rdf::lambda0, new const char*[1]{\""a\""}, 1, \""\"", reinterpret_cast<std::weak_ptr<ROOT::Detail::RDF::RJittedFilter>*>(0x21269a0), reinterpret_cast<std::shared_ptr<ROO""..., error=0x7fffffffcd0c) at /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:3556; > #71 0x00007ffff7fc97b3 in ROOT::Internal::RDF::InterpreterCalc(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::$_0::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (; > codeSlice=""ROOT::Internal::RDF::JitFilterHelper(R_rdf::lambda0, new const char*[1]{\""a\""}, 1, \""\"", reinterpret_cast<std::weak_ptr<ROOT::Detail::RDF::RJittedFilter>*>(0x21269a0), reinterpret_cast<std::shared_ptr<ROO""..., this=<optimized out>) at /home/jhahnfel/ROOT/llvm13/src/tree/dataframe/src/RDFUtils.cxx:339; > #72 ROOT::Internal::RDF::InterpreterCalc (code=""ROOT::Internal::RDF::JitFilterHelper(R_rdf::lambda0, new const char*[1]{\""a\""}, 1, \""\"", reinterpret_cast<std::weak_ptr<ROOT::Detail::RDF::RJittedFilter>*>(0x21269a0), reinterpret_cast<std::shared_ptr<ROO""..., context=""RLoopManager::Run"") at /home/jhahnfel/ROOT/llvm13/src/tree/dataframe/src/RDFUtils.cxx:362; > #73 0x00007ffff7fd2f04 in ROOT::Detail::RDF::RLoopManager::Jit (this=<optimized out>) at /home/jhahnfel/ROOT/llvm13/src/tree/dataframe/src/RLoopManager.cxx:720; > ```; > ; > It _looks_ like we have a problem with re-entrant JITing, but I have absolutely no idea if that's supposed to work or points to a problem somewhere else @vgvassilev. I am hoping that @weliveindetail or @lhames could give us a hint.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1098026446:17712,optimiz,optimized,17712,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1098026446,2,['optimiz'],['optimized']
Performance,"Even after https://github.com/root-project/root/pull/11331 reading from xrootd with RDF and many threads has some remaining lock contention. A few problematic spots are (in v6-26-00-patches). ```; #10 ROOT::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>::WriteLock (this=0x563dbbbec828) at /home/b/bendavid/rootdev25/root/core/thread/src/TReentrantRWLock.cxx:190; #11 0x00007f0a34260f7a in ROOT::TVirtualRWMutex::Lock (this=<optimized out>) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79; #12 0x00007f0a34937e62 in TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f0822ff9b30) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80; #13 TClass::LoadClass (requestedname=0x563dc5dcf309 ""TNetXNGFile"", silent=silent@entry=false) at /home/b/bendavid/rootdev25/root/core/meta/src/TClass.cxx:5740; #14 0x00007f0a3488a1f7 in TPluginHandler::LoadPlugin (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/src/TPluginManager.cxx:261; #15 0x00007f0a342e14d3 in TFile::Open (url=<optimized out>, options=options@entry=0x7f0a1a224b68 ""READ_WITHOUT_GLOBALREGISTRATION"", ftitle=<optimized out>, ftitle@entry=0x7f0a1a226b82 """", compress=<optimized out>, compress@entry=101, netopt=<optimized out>, netopt@entry=0) at /home/b/bendavid/rootdev25/root/io/io/src/TFile.cxx:4164; #16 0x00007f0a1a1b56fb in TChain::LoadTree (this=0x7f055c0090d0, entry=0) at /home/b/bendavid/rootdev25/root/tree/tree/src/TChain.cxx:1499; ```. and. ```; #11 0x00007f0a342e49c8 in ROOT::TVirtualRWMutex::Lock (this=0x563dbbbec820) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualRWMutex.h:79; #12 TLockGuard::TLockGuard (mutex=0x563dbbbec820, this=0x7f09113f2b28) at /home/b/bendavid/rootdev25/root/core/base/inc/TVirtualMutex.h:80; #13 TPluginHandler::ExecPluginImpl<char const*, char const*, char const*, int, int> (this=this@entry=0x563dc5dcf2c0) at /home/b/bendavid/rootdev25/root/core/base/inc/TPluginManager.h:156; #14 0x00007f0a342e109b in TPlu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7710#issuecomment-1286316399:438,optimiz,optimized,438,https://root.cern,https://github.com/root-project/root/issues/7710#issuecomment-1286316399,3,"['Load', 'optimiz']","['LoadClass', 'LoadPlugin', 'optimized']"
Performance,"Even if something within the event loop throws, we still need to call `CleanUpTask` to make sure `SnapshotHelperMT::FinalizeTask` gets called, to avoid teardown issues due to input and output TTrees of a Snapshot being deleted concurrently.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5214:227,concurren,concurrently,227,https://root.cern,https://github.com/root-project/root/pull/5214,1,['concurren'],['concurrently']
Performance,"Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11669:244,cache,caches,244,https://root.cern,https://github.com/root-project/root/pull/11669,1,['cache'],['caches']
Performance,"Even though the `RooResolutionModel` inherits from RooAbsPdf, it is; special because it has it's own overload of `getValV`. This is; problematic for the new RooFit batch mode, because it doesn't use; `getValV` but instead `RooAbsReal::evaluate()` directly. Then for pdfs; it does the normalization, and for non-pdfs it doesn't. The `RooResolutionModel::getValV` is implemented such that the; resolution model behaves like a pdf when used on it's own (i.e., it will; be normalized), but when used for an analytical convolution via; `RooAbsAnaConvPdf`, it is not normalized. In this commit, the function `RooResolutionMode::selfNormalized` is; implemented to return `true` if the resolution model is used in a; convolution. Like this, it's behavior as a pdf is consistent with the; `getValV` implementation and the batch mode had no problems using that; class anymore. One complication after this change was the integral code in; `RooAbsAnaConvPdf`. In that code, the RooResolutionModel's integral; value is retrieved by getting it's normalization integral, but now that; the resolution model is proclaiming to be self-normalized the integral; is always trivially one. This problem is solved by getting the; normalization integral directly via `getNormObj` from the normalization; integral cache manager, in which case the check for self-normalization; is not done. In fact, this has already been done before in the case of; ranged fits, so the change in this commit is actually a simplification; of the code because it removes a code branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9212:1288,cache,cache,1288,https://root.cern,https://github.com/root-project/root/pull/9212,1,['cache'],['cache']
Performance,"Every worker stores the RDataFrame created and the computation graph jitted during the first task in a process-wide dictionary serving as a cache. This is required in order to avoid having to re-jit the computation graph at each task. This commit introduces a post-execution cleanup job for the Dask workers so that when a distributed execution ends, the workers are instructed to remove the artifacts generated by the execution from the caches. In particular, if the RDataFrame execution was processing a TTree-based dataset, removing the artifact from the cache also notably deallocates the corresponding TTreeCache, one per RDataFrame in-flight in the process. Here are some memory usage flamegraphs obtained with memray running the AGC analysis script. https://cernbox.cern.ch/s/YPEmBfULdvy8CbN. You will find the following:; * report_1sample_1file_2task_master.html : 1 RDataFrame, 1 file, 2 partitions. Total memory seen 293 MB; * report_1sample_1file_2task_cleancache.html : 1 RDataFrame, 1 file, 2 partitions. Total memory seen 238 MB; * report_5sample_1file_2task_master.html: 5 RDataFrames, 1 file each, 2 partitions each. Total memory seen 521 MB; * report_5sample_1file_2task_cleancache.html: 5 RDataFrames, 1 file each, 2 partitions each. Total memory seen 249 MB. One can search for the `TTreeCache` symbol and notice that e.g. between the second and the first flamegraphs the difference is ~40MB which is the size of the TTreeCache. Similarly between the 4th and 3rd there is approximately a difference of ~5 TTreeCache sizes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16094:140,cache,cache,140,https://root.cern,https://github.com/root-project/root/pull/16094,3,['cache'],"['cache', 'caches']"
Performance,"Excellent question! It would if you had them linked together into one `.so` - but here it's the runtime loader / dynamic linker that would have to complain. And that doesn't - it's supporting this (e.g. `LD_PRELOAD` makes use of this), but it's supporting this in a way that isn't helpful. Bottom line: it's an error without a diagnostic. Let me know if there's a bug in ROOT somewhere and I'll re-open. Next time for these kind of questions I'd appreciate if you could do a post in https://root-forum.cern.ch rather than a bug report.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8256#issuecomment-851564110:104,load,loader,104,https://root.cern,https://github.com/root-project/root/issues/8256#issuecomment-851564110,1,['load'],['loader']
Performance,"Excellent work, @bendavid and apologies for not doing this myself, in time. Would it be an option to simply repeat the lookup without the RAII in case of failure to find an overload? It's only in the error case, where performance isn't as crucial anyway, and simplifies the interplay between PyROOT/cppyy and cling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854#issuecomment-1455544084:218,perform,performance,218,https://root.cern,https://github.com/root-project/root/issues/11854#issuecomment-1455544084,1,['perform'],['performance']
Performance,Extremely long startup time when loading dictionaries with pyroot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14223:33,load,loading,33,https://root.cern,https://github.com/root-project/root/issues/14223,1,['load'],['loading']
Performance,"F. Rademakers |; | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |; | From heads/master@v6-25-01-4921-gdfd0f52391 |; | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] .q; /tmp$ root -l main.cpp ; root [0] ; Processing main.cpp... *** Break *** segmentation violation. ===========================================================; There was a crash (kSigSegmentationViolation).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f7b9f49845a in __GI___wait4 (pid=95642, stat_loc=stat_loc; entry=0x7ffd4f13a298, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30; #1 0x00007f7b9f49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7ffd4f13a298, options=options; entry=0) at ./posix/waitpid.c:38; #2 0x00007f7b9f3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171; #3 0x00007f7b9fc5bc22 in TUnixSystem::Exec (this=0x55d680e3b800, shellcmd=0x55d681cbf580 ""/opt/root_bld/etc/gdb-backtrace.sh 95620 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104; #4 0x00007f7b9fc5c4d3 in TUnixSystem::StackTrace (this=0x55d680e3b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395; #5 0x00007f7b9fc60174 in TUnixSystem::DispatchSignals (this=0x55d680e3b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615; #6 0x00007f7b9fc5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395; #7 0x00007f7b9fc60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586; #8 0x00007f7b9fc509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f7ba0144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99; #9 0x00007f7b9fc506ec in (",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11707#issuecomment-1315454187:2142,optimiz,optimized,2142,https://root.cern,https://github.com/root-project/root/issues/11707#issuecomment-1315454187,1,['optimiz'],['optimized']
Performance,FCA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ef7d3e44.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/84c78b97.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ef7d3e44.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/530f7122.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/9c979c2b.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceCA-2B.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/9c979c2b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/62c4a178.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a603ba9c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8dd53007.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/943fd5f3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG4-runbytheissuer.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG4-runbytheissuer.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d41ec82f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b85d64aa.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/598b583e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-C,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:14669,load,load,14669,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,FFTW; >Failed to load module GuiBld; >Failed to load module ROOTWebDisplay; >Failed to load module RooFitCore; >Failed to load module Gui; >Failed to load module SQLIO; >Failed to load module XMLIO; >Failed to load module ROOT_Rtypes; >Failed to load module std; >Failed to load module ROOTHistDraw; >Failed to load module GX11TTF; >Failed to load module RIO; >Failed to load module ProofPlayer; >Failed to load module ASImage; >Failed to load module libc; >Failed to load module ROOT_Foundation_C; >Failed to load module MathMore; >Failed to load module Foam; >Failed to load module RSQLite; >Failed to load module SpectrumPainter; >Failed to load module Minuit2; >Failed to load module Core; >Failed to load module MLP; >Failed to load module ROOTDataFrame; >Failed to load module GenVector; >Failed to load module NetxNG; >Failed to load module ROOTBrowserv7; >Failed to load module Minuit; >Failed to load module RootAuth; >Failed to load module Graf3d; >Failed to load module TMVA; >Failed to load module ASImageGui; >Failed to load module Graf; >Failed to load module GX11; >Failed to load module Gdml; >Failed to load module ProofBench; >Failed to load module Cling_Runtime_Extra; >Failed to load module MathCore; >Failed to load module Gviz3d; >Failed to load module WebGui6; >Failed to load module ROOTTPython; >Failed to load module ROOTHist; >Failed to load module TreePlayer; >Failed to load module Gviz; >Failed to load module ROOTGraphicsPrimitives; >Failed to load module ROOTFitPanelv7; >Failed to load module Smatrix; >Failed to load module SessionViewer; >Failed to load module Thread; >input_line_4:1:2: error: unknown type name 'ifdef'; >#ifdef complex; > ^; ><<< cling interactive line includer >>>:1:1: error: expected unqualified-id; >input_line_5:1:2: error: unknown type name 'ifdef'; >#ifdef PI; > ^; ><<< cling interactive line includer >>>:1:1: error: expected unqualified-id; >input_line_6:1:2: error: unknown type name 'ifdef'; >#ifdef ERROR; > ^; ><<< cling interactive ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7055:6174,load,load,6174,https://root.cern,https://github.com/root-project/root/issues/7055,1,['load'],['load']
Performance,FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR;,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-752250076:4782,load,load,4782,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076,1,['load'],['load']
Performance,"FWIW many of the failures are due to; ```; root [0] std::string_view sv;; root [1] (std::string) sv;; IncrementalExecutor::executeFunction: symbol '_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12__sv_wrapperC1ESt17basic_string_viewIcS2_E' unresolved while linking [cling interface function]!; You are probably missing the definition of std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper::__sv_wrapper(std::basic_string_view<char, std::char_traits<char> >); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17_S_to_string_viewESt17basic_string_viewIcS2_E' unresolved while linking [cling interface function]!; You are probably missing the definition of std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_S_to_string_view(std::basic_string_view<char, std::char_traits<char> >); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ENS4_12__sv_wrapperERKS3_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::__sv_wrapper, std::allocator<char> const&); Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11601#issuecomment-1282548277:526,load,load,526,https://root.cern,https://github.com/root-project/root/issues/11601#issuecomment-1282548277,3,['load'],['load']
Performance,"FWIW, we need to fix this odd behavior in the ASTReader. This PR is a good for ROOT because it eliminates some bad coding practices. However, there is a lot of code out there which we cannot control and makes sense fixing. The underlying issue is that the clang ASTReader eagerly deserializes vtables and inlines upon PCH/PCM loading time. There is no good reason for doing that and we can switch this code to lazily deserialize the entities on demand.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1790#issuecomment-378259193:326,load,loading,326,https://root.cern,https://github.com/root-project/root/pull/1790#issuecomment-378259193,1,['load'],['loading']
Performance,"FYI (to be seen after the llvm upgrade), via `-opt-bisect-limit=` I have tracked this down to an issue in the optimization pass ""X86 DAG->DAG Instruction Selection"" during codegen for the assignment statement:; ```c++; root [1] z = 1; ```. Specifically, the instructions emitted for the `-O0` version that works are; ```; renamable $xmm0 = MOVSDrm_alt $noreg, 1, $noreg, %const.0, $noreg; MOVSDmr $noreg, 1, $noreg, @""?z@__cling_N50@@3NA"", $noreg, renamable $xmm0 :: (store 8 into @""?z@__cling_N50@@3NA""); ```; while the following version (`-O1`), for some reason, does not (?); ```; MOV32mi $noreg, 1, $noreg, @""?z@__cling_N50@@3NA"" + 4, $noreg, 1072693248 :: (store 4 into @""?z@__cling_N50@@3NA"" + 4); MOV32mi $noreg, 1, $noreg, @""?z@__cling_N50@@3NA"", $noreg, 0 :: (store 4 into @""?z@__cling_N50@@3NA"", align 8); ```. Maybe this is also of interest to @vgvassilev, @hahnjo.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9809#issuecomment-1047760926:110,optimiz,optimization,110,https://root.cern,https://github.com/root-project/root/issues/9809#issuecomment-1047760926,1,['optimiz'],['optimization']
Performance,FYI I'm in contact with the EOS team regarding the ROOT-performance-centos7-multicore/default. failures.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5856#issuecomment-643193052:56,perform,performance-,56,https://root.cern,https://github.com/root-project/root/pull/5856#issuecomment-643193052,1,['perform'],['performance-']
Performance,"FYI I'm on it, I will continue after the break early 2023. It currently seems to be a combination of slower jitting and missing optimization, I am working on fixing the latter today. We saw these effects also in our own benchmarks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11927#issuecomment-1360923665:128,optimiz,optimization,128,https://root.cern,https://github.com/root-project/root/issues/11927#issuecomment-1360923665,1,['optimiz'],['optimization']
Performance,"FYI: A 2GB opendata file in eos home, read & processed using 4 threads with RDF.; | Throughput vs time | Aggregated Throughput |; | --- | --- |; | <img width=""1022"" alt=""image"" src=""https://user-images.githubusercontent.com/16205615/200814639-3549ae50-64e8-4d15-88d5-8b8dfc72e24f.png""> | ![image](https://user-images.githubusercontent.com/16205615/200810939-c0ed8674-116c-43b1-8266-fb5fe24546a4.png) |. In case somebody wonders:; The very first read through fuse apparently came from a hot OS cache.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644#issuecomment-1308565934:84,Throughput,Throughput,84,https://root.cern,https://github.com/root-project/root/pull/11644#issuecomment-1308565934,3,"['Throughput', 'cache']","['Throughput', 'cache']"
Performance,"FYI: The reason for the slow test execution and many of the timeouts was `ReuseExistingWeakSymbols`, added mostly as an optimization in commit adec92d1e763143dfcd151718418a3c1834824a8. It calls `getSymbolAddress` for a lot of `GlobalValue`s which is apparently much more expensive with LLVM 13 (probably due to locking, discussed above). However, the original commit message also mentions that this actually solves problems on M1, so we'll have to see later on how to re-enable it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1124936547:120,optimiz,optimization,120,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1124936547,1,['optimiz'],['optimization']
Performance,Failed in projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make / spurious load of libRooFit. I have reverted this PR in 4b57fdf3e2eb8a7ba76d57765572652dde4f0a4b,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547#issuecomment-385386061:86,load,load,86,https://root.cern,https://github.com/root-project/root/pull/1547#issuecomment-385386061,1,['load'],['load']
Performance,Failed to load module Core; Failed to load module Rint; Failed to load module RIO; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module RMySQL; Failed to load module Unuran; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module GeomPainter; Failed to load module Genetic; Failed to load module Eve; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module ROOTTMVASofieParser; Failed to load module PgSQL; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module Html; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module Hbook; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module RooFitRDataFrameHelpers; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to l,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11901:3024,load,load,3024,https://root.cern,https://github.com/root-project/root/issues/11901,1,['load'],['load']
Performance,Failed to load module Eve; >Failed to load module GeomPainter; >Failed to load module TreeViewer; >Failed to load module Physics; >Failed to load module EG; >Failed to load module Tree; >Failed to load module HistFactory; >Failed to load module Spectrum; >Failed to load module Matrix; >Failed to load module Html; >Failed to load module Hist; >Failed to load module GuiHtml; >Failed to load module _Builtin_intrinsics; >Failed to load module Gpad; >Failed to load module TMVAGui; >Failed to load module Postscript; >Failed to load module ROOTEve; >Failed to load module RGL; >Failed to load module Fumili; >Failed to load module Net; >Failed to load module Geom; >Failed to load module RooFitMore; >Failed to load module ROOTGpadv7; >Failed to load module X3d; >Failed to load module Cling_Runtime; >Failed to load module SPlot; >Failed to load module EGPythia8; >Failed to load module RooFit; >Failed to load module RCsg; >Failed to load module Rint; >Failed to load module XMLParser; >Failed to load module MultiProc; >Failed to load module RooStats; >Failed to load module GeomBuilder; >Failed to load module Proof; >Failed to load module FITSIO; >Failed to load module Ged; >Failed to load module Recorder; >Failed to load module FFTW; >Failed to load module GuiBld; >Failed to load module ROOTWebDisplay; >Failed to load module RooFitCore; >Failed to load module Gui; >Failed to load module SQLIO; >Failed to load module XMLIO; >Failed to load module ROOT_Rtypes; >Failed to load module std; >Failed to load module ROOTHistDraw; >Failed to load module GX11TTF; >Failed to load module RIO; >Failed to load module ProofPlayer; >Failed to load module ASImage; >Failed to load module libc; >Failed to load module ROOT_Foundation_C; >Failed to load module MathMore; >Failed to load module Foam; >Failed to load module RSQLite; >Failed to load module SpectrumPainter; >Failed to load module Minuit2; >Failed to load module Core; >Failed to load module MLP; >Failed to load module ROOTDataFrame; >Faile,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7055:4939,load,load,4939,https://root.cern,https://github.com/root-project/root/issues/7055,1,['load'],['load']
Performance,Failed to load module FitPanel; >Failed to load module ROOTVecOps; >Failed to load module ProofDraw; >Failed to load module Quadp; >Failed to load module ROOTNTuple; >Failed to load module ROOT_Foundation_Stage1_NoRTTI; >Failed to load module Genetic; >Failed to load module Eve; >Failed to load module GeomPainter; >Failed to load module TreeViewer; >Failed to load module Physics; >Failed to load module EG; >Failed to load module Tree; >Failed to load module HistFactory; >Failed to load module Spectrum; >Failed to load module Matrix; >Failed to load module Html; >Failed to load module Hist; >Failed to load module GuiHtml; >Failed to load module _Builtin_intrinsics; >Failed to load module Gpad; >Failed to load module TMVAGui; >Failed to load module Postscript; >Failed to load module ROOTEve; >Failed to load module RGL; >Failed to load module Fumili; >Failed to load module Net; >Failed to load module Geom; >Failed to load module RooFitMore; >Failed to load module ROOTGpadv7; >Failed to load module X3d; >Failed to load module Cling_Runtime; >Failed to load module SPlot; >Failed to load module EGPythia8; >Failed to load module RooFit; >Failed to load module RCsg; >Failed to load module Rint; >Failed to load module XMLParser; >Failed to load module MultiProc; >Failed to load module RooStats; >Failed to load module GeomBuilder; >Failed to load module Proof; >Failed to load module FITSIO; >Failed to load module Ged; >Failed to load module Recorder; >Failed to load module FFTW; >Failed to load module GuiBld; >Failed to load module ROOTWebDisplay; >Failed to load module RooFitCore; >Failed to load module Gui; >Failed to load module SQLIO; >Failed to load module XMLIO; >Failed to load module ROOT_Rtypes; >Failed to load module std; >Failed to load module ROOTHistDraw; >Failed to load module GX11TTF; >Failed to load module RIO; >Failed to load module ProofPlayer; >Failed to load module ASImage; >Failed to load module libc; >Failed to load module ROOT_Foundation_C; >Failed to loa,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7055:4686,load,load,4686,https://root.cern,https://github.com/root-project/root/issues/7055,1,['load'],['load']
Performance,Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Fai,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-752250076:3643,load,load,3643,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076,1,['load'],['load']
Performance,Failed to load module Genetic; Failed to load module Eve; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module ROOTTMVASofieParser; Failed to load module PgSQL; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module Html; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module Hbook; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module RooFitRDataFrameHelpers; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module Vc; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ROOTTMVASofie; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module RooFitHS3; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to l,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11901:3728,load,load,3728,https://root.cern,https://github.com/root-project/root/issues/11901,1,['load'],['load']
Performance,Failed to load module HistPainter; >Failed to load module PyMVA; >Failed to load module RDAVIX; >Failed to load module RHTTP; >Failed to load module FitPanel; >Failed to load module ROOTVecOps; >Failed to load module ProofDraw; >Failed to load module Quadp; >Failed to load module ROOTNTuple; >Failed to load module ROOT_Foundation_Stage1_NoRTTI; >Failed to load module Genetic; >Failed to load module Eve; >Failed to load module GeomPainter; >Failed to load module TreeViewer; >Failed to load module Physics; >Failed to load module EG; >Failed to load module Tree; >Failed to load module HistFactory; >Failed to load module Spectrum; >Failed to load module Matrix; >Failed to load module Html; >Failed to load module Hist; >Failed to load module GuiHtml; >Failed to load module _Builtin_intrinsics; >Failed to load module Gpad; >Failed to load module TMVAGui; >Failed to load module Postscript; >Failed to load module ROOTEve; >Failed to load module RGL; >Failed to load module Fumili; >Failed to load module Net; >Failed to load module Geom; >Failed to load module RooFitMore; >Failed to load module ROOTGpadv7; >Failed to load module X3d; >Failed to load module Cling_Runtime; >Failed to load module SPlot; >Failed to load module EGPythia8; >Failed to load module RooFit; >Failed to load module RCsg; >Failed to load module Rint; >Failed to load module XMLParser; >Failed to load module MultiProc; >Failed to load module RooStats; >Failed to load module GeomBuilder; >Failed to load module Proof; >Failed to load module FITSIO; >Failed to load module Ged; >Failed to load module Recorder; >Failed to load module FFTW; >Failed to load module GuiBld; >Failed to load module ROOTWebDisplay; >Failed to load module RooFitCore; >Failed to load module Gui; >Failed to load module SQLIO; >Failed to load module XMLIO; >Failed to load module ROOT_Rtypes; >Failed to load module std; >Failed to load module ROOTHistDraw; >Failed to load module GX11TTF; >Failed to load module RIO; >Failed to load module Pro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7055:4559,load,load,4559,https://root.cern,https://github.com/root-project/root/issues/7055,1,['load'],['load']
Performance,Failed to load module Net; >Failed to load module Geom; >Failed to load module RooFitMore; >Failed to load module ROOTGpadv7; >Failed to load module X3d; >Failed to load module Cling_Runtime; >Failed to load module SPlot; >Failed to load module EGPythia8; >Failed to load module RooFit; >Failed to load module RCsg; >Failed to load module Rint; >Failed to load module XMLParser; >Failed to load module MultiProc; >Failed to load module RooStats; >Failed to load module GeomBuilder; >Failed to load module Proof; >Failed to load module FITSIO; >Failed to load module Ged; >Failed to load module Recorder; >Failed to load module FFTW; >Failed to load module GuiBld; >Failed to load module ROOTWebDisplay; >Failed to load module RooFitCore; >Failed to load module Gui; >Failed to load module SQLIO; >Failed to load module XMLIO; >Failed to load module ROOT_Rtypes; >Failed to load module std; >Failed to load module ROOTHistDraw; >Failed to load module GX11TTF; >Failed to load module RIO; >Failed to load module ProofPlayer; >Failed to load module ASImage; >Failed to load module libc; >Failed to load module ROOT_Foundation_C; >Failed to load module MathMore; >Failed to load module Foam; >Failed to load module RSQLite; >Failed to load module SpectrumPainter; >Failed to load module Minuit2; >Failed to load module Core; >Failed to load module MLP; >Failed to load module ROOTDataFrame; >Failed to load module GenVector; >Failed to load module NetxNG; >Failed to load module ROOTBrowserv7; >Failed to load module Minuit; >Failed to load module RootAuth; >Failed to load module Graf3d; >Failed to load module TMVA; >Failed to load module ASImageGui; >Failed to load module Graf; >Failed to load module GX11; >Failed to load module Gdml; >Failed to load module ProofBench; >Failed to load module Cling_Runtime_Extra; >Failed to load module MathCore; >Failed to load module Gviz3d; >Failed to load module WebGui6; >Failed to load module ROOTTPython; >Failed to load module ROOTHist; >Failed to load modul,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7055:5547,load,load,5547,https://root.cern,https://github.com/root-project/root/issues/7055,1,['load'],['load']
Performance,Failed to load module ProofDraw; Failed to load module Unuran; Failed to load module Quadp; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module X3d; Failed to load module SPlot; Failed to load module Hbook; Failed to load module RooFit; Failed to load module RCsg; Failed to load module RooStats; Failed to load module RooFitRDataFrameHelpers; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module ROOTTMVASofie; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module MathMore; Failed to load module RooFitHS3; Failed to load module Foam; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module MathCore;,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1029801305:2657,load,load,2657,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1029801305,1,['load'],['load']
Performance,Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module RooFitRDataFrameHelpers; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module Vc; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ROOTTMVASofie; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module RooFitHS3; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11901:4632,load,load,4632,https://root.cern,https://github.com/root-project/root/issues/11901,31,['load'],['load']
Performance,Failed to load module Unuran; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module GeomPainter; Failed to load module Genetic; Failed to load module Eve; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module ROOTTMVASofieParser; Failed to load module PgSQL; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module Html; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module Hbook; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module RooFitRDataFrameHelpers; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module Vc; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ROOTTMVASofie; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module ROOT_Foundat,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11901:3547,load,load,3547,https://root.cern,https://github.com/root-project/root/issues/11901,1,['load'],['load']
Performance,Failure is unrelated (apparent race condition in build system).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5404#issuecomment-617147235:31,race condition,race condition,31,https://root.cern,https://github.com/root-project/root/pull/5404#issuecomment-617147235,1,['race condition'],['race condition']
Performance,Failure on `ROOT-performance-centos7-multicore` has nothing to do with SQL - merging,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4017#issuecomment-507201763:17,perform,performance-,17,https://root.cern,https://github.com/root-project/root/pull/4017#issuecomment-507201763,1,['perform'],['performance-']
Performance,"Failures are expected because OpenMP cannot be enabled when using ROOT fitting. It requires a full thread safe implementation of the objective function, and this is not done to cache some quantities such as parameter values or normalization integrals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9327#issuecomment-996584783:177,cache,cache,177,https://root.cern,https://github.com/root-project/root/pull/9327#issuecomment-996584783,1,['cache'],['cache']
Performance,Failures on Ubuntu2004 are due to use std::regex before loading the PyTorch module. ; See PyTorch issue: https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091. regex comes from libROOTNtuple (days component) loaded by TMVA dependency on RDataframe. ; Unfortunately cannot disable DAOS when running with `testing=On`. Try now building without RDataframe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13674#issuecomment-1733208800:56,load,loading,56,https://root.cern,https://github.com/root-project/root/pull/13674#issuecomment-1733208800,2,['load'],"['loaded', 'loading']"
Performance,"Fair enough. . Was the `#ifndef __CLING__` really needed? (i.e. it is not supposed to). The extra ""main"" in the tutorials is awkward as it may confused reader on whether it is needed in a macros or not and adding a main in every single tutorials (the logic consequence) would mean technically an ODR violation upon loading (more than one) tutorials .. well actually upon loading even a single one ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6337#issuecomment-691135659:315,load,loading,315,https://root.cern,https://github.com/root-project/root/pull/6337#issuecomment-691135659,2,['load'],['loading']
Performance,"Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #7 0x00007f1de3cb56ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so; #8 0x00007f1de01f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #9 0x00007f1de01f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #10 0x00007f1de01f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #11 0x00007f1ddc1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #12 0x00007f1de3cc147e in call_init (l=<optimized out>, argc=argc; entry=1, argv=argv; entry=0x7ffc77af7118, env=env; entry=0x7ffc77af7128) at ./elf/dl-init.c:70; #13 0x00007f1de3cc1568 in call_init (env=0x7ffc77af7128, argv=0x7ffc77af7118, argc=1, l=<optimized out>) at ./elf/dl-init.c:33; #14 _dl_init (main_map=0x55a9235852d0, argc=1, argv=0x7ffc77af7118, env=0x7ffc77af7128) at ./elf/dl-init.c:117; #15 0x00007f1de2374905 in __GI__dl_catch_exception (exception=exception; entry=0x0, operate=operate; entry=0x7f1de3cc8f40 <call_dl_init>, args=args; entry=0x7ffc77af6a80) at ./elf/dl-error-skeleton.c:182; #16 0x00007f1de3cc8ff6 in dl_open_worker (a=0x7ffc77af6c20) at ./elf/dl-open.c:808; #17 dl_open_worker (a=a; entry=0x7ffc77af6c20) at ./elf/dl-open.c:771; #18 0x00007f1de23748a8 in __GI__dl_catch_exception (exception=exception; entry=0x7ffc77af6c00, operate=operate; entry=0x7f1de3cc8f60 <dl_open_worker>, args=args; entry=0x7ffc77af6c20) at ./elf/dl-error-skeleton.c:208; #19 0x00007f1de3cc934e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13511#issuecomment-1867607489:6588,optimiz,optimized,6588,https://root.cern,https://github.com/root-project/root/issues/13511#issuecomment-1867607489,1,['optimiz'],['optimized']
Performance,"Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so; #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #12 0x00007f7902d6a47e in call_init (l=<optimized out>, argc=argc; entry=1, argv=argv; entry=0x7ffeb2a74cf8, env=env; entry=0x7ffeb2a74d08) at ./elf/dl-init.c:70; #13 0x00007f7902d6a568 in call_init (env=0x7ffeb2a74d08, argv=0x7ffeb2a74cf8, argc=1, l=<optimized out>) at ./elf/dl-init.c:33; #14 _dl_init (main_map=0x5572a98c1920, argc=1, argv=0x7ffeb2a74cf8, env=0x7ffeb2a74d08) at ./elf/dl-init.c:117; #15 0x00007f7901b74905 in __GI__dl_catch_exception (exception=exception; entry=0x0, operate=operate; entry=0x7f7902d71f40 <call_dl_init>, args=args; entry=0x7ffeb2a74550) at ./elf/dl-error-skeleton.c:182; #16 0x00007f7902d71ff6 in dl_open_worker (a=0x7ffeb2a746f0) at ./elf/dl-open.c:808; #17 dl_open_worker (a=a; entry=0x7ffeb2a746f0) at ./elf/dl-open.c:771; #18 0x00007f7901b748a8 in __GI__dl_catch_exception (exception=exception; entry=0x7ffeb2a746d0, operate=operate; entry=0x7f7902d71f60 <dl_open_worker>, args=args; entry=0x7ffeb2a746f0) at ./elf/dl-error-skeleton.c:208; #19 0x00007f7902d7234e in _dl_open (file=<optimized out>, mode=-2147483647, caller_dlopen",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13511#issuecomment-1867607489:2125,optimiz,optimized,2125,https://root.cern,https://github.com/root-project/root/issues/13511#issuecomment-1867607489,1,['optimiz'],['optimized']
Performance,"Feature: Save training progress to root file, present it in TMVAGui. Add training history object for TMVA, here I incorporate usage to log DNN epoch performance with DNN_CPU and PyKeras. The tool is intended to be general enough that it can be used by any ML algorithm. For example, XGBoost could also record its progress per iteration with this object. A request for this functionality can be found on the root forums; https://root-forum.cern.ch/t/how-to-get-training-history-using-tmva-keras-interface/28799. My solution does not require tensorboard and records are stored within the root file. Test:; ```; . bin/thisroot.sh; cd tutorials/tmva/; make; ./TMVAClassification; root -l; TMVA::TMVAGui(""TMVA.root""); //Click on Training History... See the DNN_CPU_valError and trainingError plotted, not that data points are only added for every epoch printed in MethodDNN.cxx ; .q. cd keras; python ClassificationKeras.py; root -l; TMVA::TMVAGui(""TMVA.root""); //Click on Training History... See Keras training history for PyKeras_val_acc, PyKeras_acc, PyKeras_loss and PyKeras_val_loss; ```. Feedback welcomed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4337:149,perform,performance,149,https://root.cern,https://github.com/root-project/root/pull/4337,1,['perform'],['performance']
Performance,"File::ApplySequence (this=0x7fffffffdd60, sequence=..., obj=0x555557627868); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3577; #94 0x00007ffff7846fc2 in TBufferFile::ReadClassBuffer (this=0x7fffffffdd60, cl=0x555556b015f0, pointer=0x555557627868, ; onFileClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfo.h:209; #95 0x00007ffff7a84dd9 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555556b015f0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:609; #96 TStreamerInfo::ReadBuffer<char**> (this=0x555556977820, b=..., arr=@0x7fffffffc1c0: 0x7fffffffc1b8, compinfo=0x555557621438, ; first=first@entry=0, last=last@entry=1, narr=1, eoffset=0, arrayMode=2); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1316; #97 0x00007ffff7900d10 in TStreamerInfoActions::GenericReadAction (buf=..., addr=<optimized out>, config=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:194; #98 0x00007ffff783f24d in TStreamerInfoActions::TConfiguredAction::operator() (object=0x555557627820, buffer=..., this=0x5555574e8d10); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #99 TBufferFile::ApplySequence (this=0x7fffffffdd60, sequence=..., obj=0x555557627820); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3577; #100 0x00007ffff7846fc2 in TBufferFile::ReadClassBuffer (this=this@entry=0x7fffffffdd60, cl=0x555555ea1490, ; pointer=pointer@entry=0x555557627820, onFileClass=onFileClass@entry=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfo.h:209; #101 0x00007ffff5c3a4e9 in RooAbsArg::Streamer (this=0x555557627820, R__b=...); at /home/rembserj/spaces/master/root/src/root/roofit/roofitcore/src/RooAbsArg.cxx:2429; #102 0x00007ffff7e0cee8 in TStreamerBase::ReadBuffer (this=this@entry=0x555556b94bc0, b=..., ; pointer=0x55555762",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1084517200:21759,optimiz,optimized,21759,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1084517200,2,['optimiz'],['optimized']
Performance,"File::ApplySequence (this=0x7fffffffdd60, sequence=..., obj=0x555557646098); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3577; #58 0x00007ffff7846fc2 in TBufferFile::ReadClassBuffer (this=0x7fffffffdd60, cl=0x555556b015f0, pointer=0x555557646098, ; onFileClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfo.h:209; #59 0x00007ffff7a84dd9 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555556b015f0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:609; #60 TStreamerInfo::ReadBuffer<char**> (this=0x555556977820, b=..., arr=@0x7fffffffb660: 0x7fffffffb658, compinfo=0x555557621438, ; first=first@entry=0, last=last@entry=1, narr=1, eoffset=0, arrayMode=2); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1316; #61 0x00007ffff7900d10 in TStreamerInfoActions::GenericReadAction (buf=..., addr=<optimized out>, config=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:194; #62 0x00007ffff783f24d in TStreamerInfoActions::TConfiguredAction::operator() (object=0x555557646050, buffer=..., this=0x5555574e8d10); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #63 TBufferFile::ApplySequence (this=0x7fffffffdd60, sequence=..., obj=0x555557646050); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3577; #64 0x00007ffff7846fc2 in TBufferFile::ReadClassBuffer (this=this@entry=0x7fffffffdd60, cl=0x555555ea1490, ; pointer=pointer@entry=0x555557646050, onFileClass=onFileClass@entry=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfo.h:209; #65 0x00007ffff5c3a4e9 in RooAbsArg::Streamer (this=0x555557646050, R__b=...); at /home/rembserj/spaces/master/root/src/root/roofit/roofitcore/src/RooAbsArg.cxx:2429; #66 0x00007ffff7e0cee8 in TStreamerBase::ReadBuffer (this=this@entry=0x555556b94bc0, b=..., ; pointer=0x55555764605",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1084517200:13804,optimiz,optimized,13804,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1084517200,2,['optimiz'],['optimized']
Performance,"File::ApplySequence (this=0x7fffffffdd60, sequence=..., obj=0x55555767cdf8); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3577; #22 0x00007ffff7846fc2 in TBufferFile::ReadClassBuffer (this=0x7fffffffdd60, cl=0x555556b015f0, pointer=0x55555767cdf8, ; onFileClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfo.h:209; #23 0x00007ffff7a84dd9 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555556b015f0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:609; #24 TStreamerInfo::ReadBuffer<char**> (this=0x555556977820, b=..., arr=@0x7fffffffab00: 0x7fffffffaaf8, compinfo=0x555557621438, ; first=first@entry=0, last=last@entry=1, narr=1, eoffset=0, arrayMode=2); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1316; #25 0x00007ffff7900d10 in TStreamerInfoActions::GenericReadAction (buf=..., addr=<optimized out>, config=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:194; #26 0x00007ffff783f24d in TStreamerInfoActions::TConfiguredAction::operator() (object=0x55555767cdb0, buffer=..., this=0x5555574e8d10); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #27 TBufferFile::ApplySequence (this=0x7fffffffdd60, sequence=..., obj=0x55555767cdb0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3577; #28 0x00007ffff7846fc2 in TBufferFile::ReadClassBuffer (this=this@entry=0x7fffffffdd60, cl=0x555555ea1490, ; pointer=pointer@entry=0x55555767cdb0, onFileClass=onFileClass@entry=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfo.h:209; #29 0x00007ffff5c3a4e9 in RooAbsArg::Streamer (this=0x55555767cdb0, R__b=...); at /home/rembserj/spaces/master/root/src/root/roofit/roofitcore/src/RooAbsArg.cxx:2429; #30 0x00007ffff7e0cee8 in TStreamerBase::ReadBuffer (this=this@entry=0x555556b94bc0, b=..., ; pointer=0x55555767cdb",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1084517200:5859,optimiz,optimized,5859,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1084517200,2,['optimiz'],['optimized']
Performance,"First reported at https://root-forum.cern.ch/t/question-about-aliases-in-rdataframe/51155 . Reproducer:. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <TTree.h>. int main() {; TTree t(""t"", ""t"");; auto x = std::make_pair(42, 84);; // This is a weird way to build a tree, but for the purposes of this test; // we we just need to mock a TTree with branches ""topbranch"" and; // ""topbranch.something"" where `something` must not be a data member of the type of ""topbranch""; // (otherwise things ""happen"" to work due to the order in which we do substitutions in RDF, see below).; t.Branch(""topbranch"", &x);; t.Branch(""topbranch"", &x, ""a/I:b/I"");; t.Fill();. auto df = ROOT::RDataFrame(t).Alias(""alias"", ""topbranch"");; // Here we transform `""alias.a == 42""` into `[](std::pair<int, int> &var0) { return var0.a == 42; }`,; // which is not valid C++.; return df.Filter(""alias.a == 42"").Count().GetValue();; }; ```; which yields:. ```; input_line_8:2:45: error: no member named 'a' in 'std::pair<int, int>'; auto func0(pair<int,int>& var0){return var0.a == 42; ~~~~ ^; terminate called after throwing an instance of 'std::runtime_error'; what():; RDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of the crash; All RDF objects that have not run an event loop yet should be considered in an invalid state. fish: Job 1, './repro2' terminated by signal SIGABRT (Abort); ```. The solution is to perform alias substitution in the expression first and then, in a second pass, substitute branch names with dummy variable names (`var0`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11207:1437,perform,perform,1437,https://root.cern,https://github.com/root-project/root/issues/11207,1,['perform'],['perform']
Performance,"First reported at https://root-forum.cern.ch/t/sequence-of-loading-root-file/48601 . The following is a reproducer:. ```cpp; #include <TFile.h>; #include <TNtuple.h>; #include <iostream>. int main() {; TFile f0(""o1.root"");; TFile f1(""o2.root"");. TNtuple *B2L = f0.Get<TNtuple>(""B2Lc"");; std::cout << ""No clone:\n"";; B2L->GetEntry(0);; std::cout << ""done\n"";. //f0.cd(); uncommenting fixes the issue; TNtuple *B2Lc = static_cast<TNtuple *>(B2L->Clone());; f1.cd();; std::cout << ""Clone:\n"";; B2Lc->GetEntry(0);; std::cout << ""done\n"";; return 0;; }; ```; prints; ```; No clone:; done; Clone:; Error in <TBasket::Streamer>: The value of fKeylen is incorrect (-23644) ; trying to recover by setting it to zero; Error in <TBasket::Streamer>: The value of fObjlen is incorrect (-2020426277) ; trying to recover by setting it to zero; Error in <TBranch::GetBasket>: File: o2.root at byte:3872444835, branch:m, entry:0, badread=1, nerrors=1, basketnumber=0; done; ```. [files.zip](https://github.com/root-project/root/files/7969912/files.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9757:59,load,loading-root-file,59,https://root.cern,https://github.com/root-project/root/issues/9757,1,['load'],['loading-root-file']
Performance,"First, this PR factors out common parts of the code in commit/load of (sealed) pages. Specifically, this affects:; - `CommitPageImpl` and `CommitSealedPageImpl`.; - `PopulatePageFromCluster()` and `LoadSealedPage()`. Locating the RPageInfo from the cluster index is now a member function of RPageRange. Second, it provides support for sealed pages in the DAOS backend. Closes issue #8079.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8309:62,load,load,62,https://root.cern,https://github.com/root-project/root/pull/8309,2,"['Load', 'load']","['LoadSealedPage', 'load']"
Performance,"Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge; This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5626:67,multi-thread,multi-thread,67,https://root.cern,https://github.com/root-project/root/pull/5626,1,['multi-thread'],['multi-thread']
Performance,Fix #7093: race condition tripping TEnum::GetEnum,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7094:11,race condition,race condition,11,https://root.cern,https://github.com/root-project/root/pull/7094,2,['race condition'],['race condition']
Performance,Fix Load and Save in TASPaletteEditor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14970:4,Load,Load,4,https://root.cern,https://github.com/root-project/root/pull/14970,1,['Load'],['Load']
Performance,"Fix ROOT-10753, ""Wrong entries are loaded in case of TChain+TEntryList""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5667:35,load,loaded,35,https://root.cern,https://github.com/root-project/root/pull/5667,1,['load'],['loaded']
Performance,"Fix ROOT-9118 ""TDF: Cache and Snapshot do not trigger column definitions""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1342:20,Cache,Cache,20,https://root.cern,https://github.com/root-project/root/pull/1342,1,['Cache'],['Cache']
Performance,Fix ROOT-9662 race condition in TStreamerInfo loading.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2710:14,race condition,race condition,14,https://root.cern,https://github.com/root-project/root/pull/2710,4,"['load', 'race condition']","['loading', 'race condition']"
Performance,"Fix ROOT-9694, GetStreamerInfoList infinite recursion. Commit b6523df introduces the infinite recursion whenever; there was a problem reading the StreamerInfo record and; introduces a useless attempt to read from file in the case; of a class derived from TFile that overrid GetStreamerInfoList. To allow for increase run-time performance and increase thread; scalability the override ability of TFile::GetStreamerInfoList; is replaced by an override of TFile::GetStreamerInfoListImp with; updated return type and arguments. If a class override; TFile::GetStreamerInfoList you will now see a compilation error like:; {code}; /opt/build/root_builds/rootcling.cmake/include/TSQLFile.h:225:19: error: declaration of 'GetStreamerInfoList' overrides a 'final' function; virtual TList *GetStreamerInfoList();; ^; /opt/build/root_builds/rootcling.cmake/include/TFile.h:231:24: note: overridden virtual function is here; virtual TList *GetStreamerInfoList() final; // Note: to override behavior, please override GetStreamerInfoListImpl; ^; {code}. Instead you need to override the protected method:. {code}; InfoListRet GetStreamerInfoListImpl(bool lookupSICache);; {code}. which can be implemented as; {code}; InfoListRet DerivedClass::GetStreamerInfoListImpl(bool /*lookupSICache*/) {; ROOT::Internal::RConcurrentHashColl::HashValue hash;; TList *infolist = nullptr;; //; // Body of the former Derived::GetStreamerInfoList with the; // return statement replaced with something like:. // The second element indicates success or failure of the load.; // (i.e. {nullptr, 0, hash} indicates the list has already been processed; // {nullptr, 1, hash} indicates the list failed to be loaded; return {infolist, 0, hash};; }; {code}. See TFile::GetStreamerInfoListImpl implementation for an example on how to implement the caching.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2725:326,perform,performance,326,https://root.cern,https://github.com/root-project/root/pull/2725,4,"['load', 'perform', 'scalab']","['load', 'loaded', 'performance', 'scalability']"
Performance,Fix ROOT-9779 and improve performance for ROOT-9133,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3385:26,perform,performance,26,https://root.cern,https://github.com/root-project/root/pull/3385,1,['perform'],['performance']
Performance,Fix TROOT::LoadClass for C++runtime modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2167:11,Load,LoadClass,11,https://root.cern,https://github.com/root-project/root/pull/2167,1,['Load'],['LoadClass']
Performance,"Fix `TColor::SaveColor`, optimize `SavePrimitive` methos",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11925:25,optimiz,optimize,25,https://root.cern,https://github.com/root-project/root/pull/11925,1,['optimiz'],['optimize']
Performance,Fix a race condition for copymodulemap target,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3577:6,race condition,race condition,6,https://root.cern,https://github.com/root-project/root/pull/3577,1,['race condition'],['race condition']
Performance,"Fix detected bugs, add separate function for chunk loading with filters, add tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15510:51,load,loading,51,https://root.cern,https://github.com/root-project/root/pull/15510,1,['load'],['loading']
Performance,Fix diagnostics for `cling pragma load` with missing library,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7509:34,load,load,34,https://root.cern,https://github.com/root-project/root/pull/7509,2,['load'],['load']
Performance,Fix gSystem->Load() failure caused by recent macOS default,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1360:13,Load,Load,13,https://root.cern,https://github.com/root-project/root/pull/1360,1,['Load'],['Load']
Performance,Fix initialization of TFormula in multi-threads,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6218:34,multi-thread,multi-threads,34,https://root.cern,https://github.com/root-project/root/pull/6218,1,['multi-thread'],['multi-threads']
Performance,Fix issues with friends auto-loaded from file in RDF and TTreeReader,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6995:29,load,loaded,29,https://root.cern,https://github.com/root-project/root/pull/6995,1,['load'],['loaded']
Performance,Fix lazy loading of template specializations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13139:9,load,loading,9,https://root.cern,https://github.com/root-project/root/pull/13139,1,['load'],['loading']
Performance,Fix lazy loading of template specializations [v6.28],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13240:9,load,loading,9,https://root.cern,https://github.com/root-project/root/pull/13240,1,['load'],['loading']
Performance,Fix lazy template loading for macOS with C++17,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12062:18,load,loading,18,https://root.cern,https://github.com/root-project/root/pull/12062,1,['load'],['loading']
Performance,"Fix nullptr dereference bugs in TClass and TList, wrap TClass.cxx to 120 columns to follow coding conventions, and avoid StreamerInfo lookup when it is cached.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/953:152,cache,cached,152,https://root.cern,https://github.com/root-project/root/pull/953,1,['cache'],['cached']
Performance,Fix race condition in SnapshotHelper.; After this fix I am not able to reproduce crashes on this test in master anymore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/783:4,race condition,race condition,4,https://root.cern,https://github.com/root-project/root/pull/783,1,['race condition'],['race condition']
Performance,Fix race condition when building RCastor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/765:4,race condition,race condition,4,https://root.cern,https://github.com/root-project/root/pull/765,1,['race condition'],['race condition']
Performance,Fix race condition when generating RGL module.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/763:4,race condition,race condition,4,https://root.cern,https://github.com/root-project/root/pull/763,1,['race condition'],['race condition']
Performance,Fix race condition when loading dictionary shared libraries,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11263:4,race condition,race condition,4,https://root.cern,https://github.com/root-project/root/pull/11263,2,"['load', 'race condition']","['loading', 'race condition']"
Performance,Fix some race conditions in the build system,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/752:9,race condition,race conditions,9,https://root.cern,https://github.com/root-project/root/pull/752,1,['race condition'],['race conditions']
Performance,"Fix the `ntpl002_vector.C`, `ntpl005_introspection.C`, `ntpl006_friends.C`, and `ntpl007_mtFill.C` tutorials failing with the following errors:; ```; Processing ntpl002_vector.C...; IncrementalExecutor::executeFunction: symbol '_Smtx_unlock_shared' unresolved while linking [cling interface function]!; You are probably missing the definition of _Smtx_unlock_shared; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_Smtx_lock_shared' unresolved while linking [cling interface function]!; You are probably missing the definition of _Smtx_lock_shared; Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10262:385,load,load,385,https://root.cern,https://github.com/root-project/root/pull/10262,2,['load'],['load']
Performance,"Fix the following compilation errors when using the /std:c++17 flag on Windows:; ```; roofit\roofitcore\src\RooDataSet.cxx(2073,43): error C2664: 'RooDataSet::RooDataSet(std::string_view,std::string_view,RooDataSet *,const RooArgSet &,const RooFormulaVar *,const char *,size_t,size_t,Bool_t,const char *)': cannot convert argument 1 from 'TString' to 'std::string_view'; roofit\roofitcore\src\RooDataSet.cxx(2073,17): message : No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called; roofit\roofitcore\src\RooDataSet.cxx(625,13): message : see declaration of 'RooDataSet::RooDataSet'; roofit\roofitcore\src\RooDataSet.cxx(2074,43): error C2664: 'RooDataSet::RooDataSet(std::string_view,std::string_view,RooDataSet *,const RooArgSet &,const RooFormulaVar *,const char *,size_t,size_t,Bool_t,const char *)': cannot convert argument 1 from 'TString' to 'std::string_view'; roofit\roofitcore\src\RooDataSet.cxx(2074,17): message : No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called; roofit\roofitcore\src\RooDataSet.cxx(625,13): message : see declaration of 'RooDataSet::RooDataSet'; roofit\roofitcore\src\RooDataSet.cxx(2075,43): error C2664: 'RooDataSet::RooDataSet(std::string_view,std::string_view,RooDataSet *,const RooArgSet &,const RooFormulaVar *,const char *,size_t,size_t,Bool_t,const char *)': cannot convert argument 2 from 'TString' to 'std::string_view'; roofit\roofitcore\src\RooDataSet.cxx(2075,23): message : No user-defined-conversion operator available that can perform this conversion, or the operator cannot be called; roofit\roofitcore\src\RooDataSet.cxx(625,13): message : see declaration of 'RooDataSet::RooDataSet'; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8789:483,perform,perform,483,https://root.cern,https://github.com/root-project/root/pull/8789,3,['perform'],['perform']
Performance,Fix the following errors on Windows:; ```; 362: Error in <TCling::LoadPCM>: ROOT PCM C:\Users\bellenot\build\release\tree\tree\test\Release\libElementStructDict_rdict.pcm file does not exist; 362: [ OK ] TOffsetGeneration.offsetArrayValues (3014 ms); 362: [ RUN ] TOffsetGeneration.primitiveTest; 362: SysError in <TFile::TFile>: could not delete C:\Users\bellenot\build\release\tree\tree\test\TOffsetGeneration2.root (errno: 13) Permission denied; 362: Warning in <TFile::Write>: file TOffsetGeneration2.root not opened in write mode; 362: [ OK ] TOffsetGeneration.primitiveTest (142 ms); 362: [ RUN ] TOffsetGeneration.elementsTest; 362: SysError in <TFile::TFile>: could not delete C:\Users\bellenot\build\release\tree\tree\test\TOffsetGeneration2.root (errno: 13) Permission denied; 362: Warning in <TFile::Write>: file TOffsetGeneration2.root not opened in write mode; 362: [ OK ] TOffsetGeneration.elementsTest (136 ms); 362: [----------] 3 tests from TOffsetGeneration (3293 ms total); ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9320:66,Load,LoadPCM,66,https://root.cern,https://github.com/root-project/root/pull/9320,1,['Load'],['LoadPCM']
Performance,"Fix the isssue with the static constexpr class members of RColor not being properly exported, even with `CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS`, and causing the following kind of error, for example when trying to execute the root7 box.cxx macro:; ```; Processing box.cxx...; IncrementalExecutor::executeFunction: symbol '?kGreen@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]!; You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kGreen; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '?kRed@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]!; You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kRed; Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '?kBlue@RColor@Experimental@ROOT@@2V?$array@E$02@std@@B' unresolved while linking [cling interface function]!; You are probably missing the definition of public: static class std::array<unsigned char,3> const ROOT::Experimental::RColor::kBlue; Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6157:579,load,load,579,https://root.cern,https://github.com/root-project/root/pull/6157,3,['load'],['load']
Performance,"Fix the replacement of S,B with x,y in formula used for performance metrics when S and B appear in function name and not as variables. ; Example: RooStats::AsimovSignificance(S,B) which has a S in its function name",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3626:56,perform,performance,56,https://root.cern,https://github.com/root-project/root/pull/3626,1,['perform'],['performance']
Performance,Fix the support for 3d input tensors when performing 1d convolution.; Add also a test for 1D convolution in TestSofieModels,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9442:42,perform,performing,42,https://root.cern,https://github.com/root-project/root/pull/9442,1,['perform'],['performing']
Performance,Fix the update of time step for DL optimizer,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5042:35,optimiz,optimizer,35,https://root.cern,https://github.com/root-project/root/pull/5042,1,['optimiz'],['optimizer']
Performance,Fixed more race conditions in the build system.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/769:11,race condition,race conditions,11,https://root.cern,https://github.com/root-project/root/pull/769,1,['race condition'],['race conditions']
Performance,"Fixed pretty-printing, remaining issues seem related to autoloading:. ```; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6VecOps15SmallVectorBaseIjE8grow_podEPvmm' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::VecOps::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long); Maybe you need to load the corresponding shared library?; ```. Not sure what's going on on Windows, will have to investigate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-815646679:379,load,load,379,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-815646679,1,['load'],['load']
Performance,"Fixed race condition, implemented `Reduce` in terms of `Aggregate`.; _Now_ everything should be done and green 😅",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1454#issuecomment-353069690:6,race condition,race condition,6,https://root.cern,https://github.com/root-project/root/pull/1454#issuecomment-353069690,1,['race condition'],['race condition']
Performance,"Fixes for bug ROOT-1036 (FitResult::Scan); When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer !; This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. ; One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals.; Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4557:498,multi-thread,multi-thread,498,https://root.cern,https://github.com/root-project/root/pull/4557,2,['multi-thread'],"['multi-thread', 'multi-threading']"
Performance,Fixes for fitting when Multi-threading is enabled. This fixes FitResult::Scan (ROOT-10360) and also fitting with bin integrals,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4557:23,Multi-thread,Multi-threading,23,https://root.cern,https://github.com/root-project/root/pull/4557,1,['Multi-thread'],['Multi-threading']
Performance,"Fixes unnecessary loading of (wrong) cppyy library because a symbol named ""_PyExc_SyntaxError"" cannot be found by dlsym.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5829:18,load,loading,18,https://root.cern,https://github.com/root-project/root/pull/5829,1,['load'],['loading']
Performance,Fixing filemerger test and usage of __FAST_MATH__ with gcc for Optimized builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/971:63,Optimiz,Optimized,63,https://root.cern,https://github.com/root-project/root/pull/971,1,['Optimiz'],['Optimized']
Performance,"Following #14974, we see no change in the error message today:; ```; lxplus966:~$ source /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc11-opt/setup.sh ; lxplus966:~$ python -c ""import ROOT""; <<< cling interactive line includer >>>: fatal error: module file '/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/lib/Vc.pcm' not found: module file not found; <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Fri/ROOT/HEAD/x86_64-el9-gcc11-opt/lib/MathCore.pcm'; Failed to load module MathCore; [snip]; ```. (Some of the builds that you might see in our cdash could suffer from picking up Vc.pcm in the build location but from builds for other platforms...; which results in an error message like; ```; <<< cling interactive line includer >>>: fatal error: module file '/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/lib/Vc.pcm' is out of date and needs to be rebuilt: signature mismatch; ```; )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14964#issuecomment-2014753873:607,load,load,607,https://root.cern,https://github.com/root-project/root/issues/14964#issuecomment-2014753873,1,['load'],['load']
Performance,"Following a suggestion by @pcanal, I also tested a different scenario creating many (identical) branches to see the scaling behavior. I started with 10,000 entries and 10,000 branches (100k didn't fit into memory), then 100,000 entries with 1,000 branches, and so on:; ```; [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t1.log; ttreeTBufferMergerBranches.00-master.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.81; ttreeTBufferMergerBranches.01-limit.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.92; ttreeTBufferMergerBranches.02-no-queue.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.52; [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t64.log; ttreeTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27; ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11; ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18; [jonas@ntpl-perf01 20231114]$ ; [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log; ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10; ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29; ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39; [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log; ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43; ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99; ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48; [jonas@ntpl-perf01 20231114]$ ; [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1812441418:595,queue,queue,595,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1812441418,2,['queue'],['queue']
Performance,"Following up on a case reported by a CMS user, we identified a series of potential bottlenecks in the present implementation of TTreeReaderArray. An example can be seen bellow*. The profiles can be seen in attachment. One of the symptoms is the presence of multiple deserialisations. The problem appears when several TTreeReaderArrays bind to the same branch. This seems to be an exotic case, but it can happen easily in TDataFrame, for example creating several define nodes starting from the same column storing a collection. As the profiles show, optimisations for the individual TVirtualCollectionReader implementations: it's a non-negligible amount of work but it can be done. I was wondering if TTreeReaderArray could be really lazy and have all instances binding to the same branch share the same memory for the deserialised collections. For the multi threading, this would not be a problem given that nothing can be done anyway from different threads on a single branch (meaning, the very same one, with the same pointer). *; ```.cpp. #include <TFile.h>; #include <TStopwatch.h>; #include <TTreeReader.h>; #include <TTreeReaderArray.h>; #include <vector>; #include <iostream>. /*. // Dataset created with this function; void createFile(); {. // First create an instance of an engine.; random_device rnd_device;; // Specify the engine and distribution.; mt19937 mersenne_engine(rnd_device());; uniform_int_distribution<int> dist(1, 42);; auto gen = std::bind(dist, mersenne_engine);. std::vector<int> vec(983);; generate(begin(vec), end(vec), gen);. ROOT::Experimental::TDataFrame d(10000);; d.Define(""v"", [&](){std::shuffle(begin(vec), end(vec), mersenne_engine); return vec;}); .Snapshot<std::vector<int>>(""t"",""mytree.root"",{""v""});; }; */. void checkTTreeReaderArrayCost(); {; TFile f(""mytree.root"");; TTreeReader reader(""t"", &f);. auto nevents = 10000;; auto nreaderarrays = 3000;. std::vector<TTreeReaderArray<int>*> readerarrays(nreaderarrays);. for (auto &&raa : readerarrays) {; raa = new",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1765:83,bottleneck,bottlenecks,83,https://root.cern,https://github.com/root-project/root/pull/1765,1,['bottleneck'],['bottlenecks']
Performance,"For LLVM we don't have Optimized build, but only Debug, Release, RelWithDebInfo, and MinSizeRel.; Thats why to have correctly interpreted __FAST_MATH__ in ROOT macroses we need to add -ffast-math flag for LLVM default Release build type.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1039:23,Optimiz,Optimized,23,https://root.cern,https://github.com/root-project/root/pull/1039,1,['Optimiz'],['Optimized']
Performance,"For completeness dev3/Fri vs dev3/Thu. ```; ( lb-set-platform x86_64-centos7-gcc12-opt ; source /cvmfs/sft.cern.ch/lcg/views/dev3/Fri/${CMTCONFIG}/setup.sh ; echo $ROOTSYS ; time python -m profile ./tst100.py | tee root627_friday.txt ; ...; real	0m45.976s; user	0m36.305s; sys	0m5.073s. ( lb-set-platform x86_64-centos7-gcc12-opt ; source /cvmfs/sft.cern.ch/lcg/views/dev3/Thu/${CMTCONFIG}/setup.sh ; echo $ROOTSYS ; time python -m profile ./tst100.py | tee root627_thursday.txt ); ... real	0m31.001s; user	0m12.790s; sys	0m4.830s. ```. this time no factor of 2, but 1.5 . [log-files](https://gist.github.com/VanyaBelyaev/0e55d321d554af63b56b8f881804e7eb). but much more important for me - that [GitHub Action](https://github.com/OstapHEP/ostap/actions) tests for my real project clearly show a jump in bad direction for CPU performance - from something a bit smaller than 2 hours to something exceeding 6 hours with fails due to timeover",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11927#issuecomment-1361014198:825,perform,performance,825,https://root.cern,https://github.com/root-project/root/issues/11927#issuecomment-1361014198,1,['perform'],['performance']
Performance,"For example if we do like this,; ```; if (std::find(LoadModulesVec.begin(), LoadModulesVec.end(), ""R"") != LoadModulesVec.end()); fInterpreter->declare(""#ifdef PI\n #undef PI\n #endif\n"");; ```; will it sounds better for you? In this case we don't process(""#ifdef PI..."") unless -Dr=On.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1824#issuecomment-382009041:52,Load,LoadModulesVec,52,https://root.cern,https://github.com/root-project/root/pull/1824#issuecomment-382009041,3,['Load'],['LoadModulesVec']
Performance,For me this moves the read speed (without MT) from 2.4GB/s to 3.3GB/s:. ```; $ ./clear_page_cache; and ./lhcb -i B2HHH\~zstd.ntuple -p; Runtime-Initialization: 6817us; Runtime-Analysis: 1233370us; RNTupleReader.RPageSourceFile.nReadV||number of vector read requests|134; RNTupleReader.RPageSourceFile.nRead||number of byte ranges read|669; RNTupleReader.RPageSourceFile.szReadPayload|B|volume read from file (required)|736136759; RNTupleReader.RPageSourceFile.szReadOverhead|B|volume read from file (overhead)|177589135; RNTupleReader.RPageSourceFile.szUnzip|B|volume after unzipping|1129407576; RNTupleReader.RPageSourceFile.nClusterLoaded||number of partial clusters preloaded from storage|134; RNTupleReader.RPageSourceFile.nPageLoaded||number of pages loaded from storage|16848; RNTupleReader.RPageSourceFile.nPagePopulated||number of populated pages|16848; RNTupleReader.RPageSourceFile.timeWallRead|ns|wall clock time spent reading|280422405; RNTupleReader.RPageSourceFile.timeWallUnzip|ns|wall clock time spent decompressing|1118242890; RNTupleReader.RPageSourceFile.timeCpuRead|ns|CPU time spent reading|280221000; RNTupleReader.RPageSourceFile.timeCpuUnzip|ns|CPU time spent decompressing|1133459000; RNTupleReader.RPageSourceFile.bwRead|MB/s|bandwidth compressed bytes read per second|3258.391190; RNTupleReader.RPageSourceFile.bwReadUnzip|MB/s|bandwidth uncompressed bytes read per second|4027.522608; RNTupleReader.RPageSourceFile.bwUnzip|MB/s|decompression bandwidth of uncompressed bytes per second|1009.984133; RNTupleReader.RPageSourceFile.rtReadEfficiency||ratio of payload over all bytes read|0.805643; RNTupleReader.RPageSourceFile.rtCompression||ratio of compressed bytes / uncompressed bytes|0.651790; Runtime-Main: 1614633us; ```; :clap:,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6983#issuecomment-755228403:756,load,loaded,756,https://root.cern,https://github.com/root-project/root/pull/6983#issuecomment-755228403,1,['load'],['loaded']
Performance,"For my project (based on PyROOT) I regularly test it against decv LCG nightly builds.; For last days I see a significant degradation in the CPU performance ; e.g. for the very simple simple [script](https://gist.github.com/VanyaBelyaev/66b08ae5b974ae3a279e67ddd0ae33e8); I see a huge factor, almost an order of magnitude, degradation CPU performance with respect to ROOT 6.24 or 6.26.; I've checked the exiting dev3 builds and I see tat while even the earliest (laet week Tue) build is much slower than 6.24&6.26, ; but a factor of 2 in the performance comes from the last Friday build. ; Something bad happens between Thu and Fri slots... . You can find some numbers in the comment; to [this gist](https://gist.github.com/VanyaBelyaev/66b08ae5b974ae3a279e67ddd0ae33e8)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11927:144,perform,performance,144,https://root.cern,https://github.com/root-project/root/issues/11927,3,['perform'],['performance']
Performance,"For our users, it's important to fix certain parameters in the likelihood easily with any overhead. So far, this didn't work when using gradients from AD, because the gradients were only produced for the parameters that are floating at the time where the likelihood is created. However, it has no additional runtime overhead in backwards AD mode to simply generate the gradient for **all** parameters, and then filter out the right elements in the the RooMinimizer-related code. This is what is implemented in the second commit of this PR. Some changes in the RooAbsMinimizerFcn were necessary to do this filtering: so far it didn't store any information on all the parameters in order. It only stored two separate lists for floating and constant parameters. The first commit in this PR adds the necessary data members (`_allParams` and `_allParamsInit`) to the RooAbsMinimizerFcn for the filtering of parameters. Furthermore, the previous datamembers that stored the parameters separately are removed to avoid duplication and possible desync of information. On this occasion, the parameter management was completely rewritten to be more concise and robust. This will also help later when we integrate the discrete profiling from CMS combine, where changing the state and filtering of minimization parameters is also relevant. It was validated with the ATLAS and CMS likelihoods from ICHEP 2024 that this PR results in no performance regression, even though we are now generating the gradient for more parameters (roughly up to two times more, because for every floating nuisance parameter there is usually one constant global observable that constrains it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16750:1422,perform,performance,1422,https://root.cern,https://github.com/root-project/root/pull/16750,1,['perform'],['performance']
Performance,"For posterity, usage of ctypes to do try this from python, though I'm a bit uncertain about the divisions argument (is the GetNdivisions going to give the right number?); ```; import ctypes. def getNumberOfLabels(hist):. xLow = hist.GetXaxis().GetBinLowEdge(1); xHigh = hist.GetXaxis().GetBinLowEdge(hist.GetXaxis().GetNbins()+1); xDivisions = hist.GetXaxis().GetNdivisions(). # Setup ctypes to be optimized by THLimitsFinder::Optimize; xLowOptimized = ctypes.c_double(0.); xHighOptimized = ctypes.c_double(0.); xDivisionsOptimized = ctypes.c_int(0); xBinWidthOptimized = ctypes.c_double(0.). # Run the optimization; # Optimize (Double_t A1, Double_t A2, Int_t nold, Double_t &BinLow, Double_t &BinHigh, Int_t &nbins, Double_t &BWID, Option_t *option=""""); ROOT.THLimitsFinder.Optimize(xLow, xHigh, xDivisions, xLowOptimized, xHighOptimized, xDivisionsOptimized, xBinWidthOptimized, """"); return int(xDivisionsOptimized.value); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10279#issuecomment-1084524337:398,optimiz,optimized,398,https://root.cern,https://github.com/root-project/root/issues/10279#issuecomment-1084524337,5,"['Optimiz', 'optimiz']","['Optimize', 'optimization', 'optimized']"
Performance,"For reference: v6.24.02 fresh from lxplus:; ```; root [0] TClass::GetClass(""RooRealVar"")->GetStreamerInfo()->ls(); StreamerInfo for class: RooRealVar, version=7, checksum=0xfd173f72; RooAbsRealLValue BASE offset= 0 type= 0 Abstract modifiable real-valued object; double _error offset=776 type= 8 Symmetric error associated with current value; double _asymErrLo offset=784 type= 8 Low side of asymmetric error associated with current value; double _asymErrHi offset=792 type= 8 High side of asymmetric error associated with current value; RooAbsBinning* _binning offset=800 type=64 ; i= 0, RooAbsRealLValue type= 0, offset= 0, len=1, method=0; i= 1, _error type= 28, offset=776, len=3, method=0 [optimized]; i= 2, _binning type= 64, offset=800, len=1, method=0; ```; It's the same as far as I can see. Could it be that checksums in the base are different, and that makes ROOT compare members line by line?; Shouldn't it read in this case:; ```diff; double _asymErrHi offset=792 type= 8 High side of asymmetric error associated with current value; - RooAbsBinning* _binning offset=800 type=64 ; + unique_ptr<RooAbsBinning> _binning offset=800 type=64 ; i= 0, RooAbsRealLValue type= 0, offset= 0, len=1, method=0; ```; to match the v6.24 header?; https://github.com/root-project/root/blob/7d9f6812845f5c07551a5b2d542c21ed8975e18d/roofit/roofitcore/inc/RooRealVar.h#L152-L156",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8791#issuecomment-892675236:695,optimiz,optimized,695,https://root.cern,https://github.com/root-project/root/issues/8791#issuecomment-892675236,1,['optimiz'],['optimized']
Performance,"For some ROOT files, RDF and TTreeReader failed to retrieve branch `""i.x""`. Fixed by using `FindBranch` instead of `GetBranch` in the relevant routines. ~~Unfortunately, this seems to be a noticeable performance pessimization, but I'm out of ideas.~~ Fixed, see Axel's suggestion. Relevant tests are added, but will fail as long as `GetBranch(""x"")` returns `i.x` instead of the top-level `x` branch. **About test failures**. * the failures in `dataframe_snapshot`, `testTTreeRegressions` and `treetreeplayertestUnit` are those I mention above, and are expected; * if I understand correctly the failures in `roottest_root_tree_selectorreader_make` and `roottest_root_tree_reader_make` show that, surprisingly, `FindBranch` is not strictly more powerful than `GetBranch`: there are nested branches that could be found before and cannot be found now (EDIT: fixed by Axel's suggestion to default to `GetBranch` and go to `FindBranch` only if it returns a nullptr); * I don't understand the failures in `roottest_root_tree_entrylist_make` and `roottest_root_tree_chain_make`, my PR does not touch anything related to TTree/TChain/TEntryList",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5603:200,perform,performance,200,https://root.cern,https://github.com/root-project/root/pull/5603,1,['perform'],['performance']
Performance,"For some of the args created in the RooProdPdf cache, the ownership; model was wrong. They were attempted to be added to a list that is; actually not owning, but they should be added to the owning container of; the cache. This fixes an issue with 6.28 reported on the forum:; https://root-forum.cern.ch/t/plot-normalization-after-rooaddpdf-fixaddcoefrange/54480",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12660:47,cache,cache,47,https://root.cern,https://github.com/root-project/root/pull/12660,2,['cache'],['cache']
Performance,"For some reason root-config calls on macOS 10.13.2 are extremely slow (not sure if this is related to the meltdown / spectre mitigations). ```bash; [O2/latest] ~/work/active/sw/BUILD/ROOT-latest/ROOT %> time root-config --version; 6.13/01; root-config --version 0.24s user 1.06s system 131% cpu 0.989 total; ```. which than means that whatever dependent project using `FindROOT.cmake` is slowed down quite a lot when trying to do incremental builds. This is because of the multiple `root-config` invocations in such a macro, which are also not cached so they get done on any `make` invocation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1569:544,cache,cached,544,https://root.cern,https://github.com/root-project/root/pull/1569,1,['cache'],['cached']
Performance,"For some reason, the library needs to have the RPath also pointing to $ROOTSYS/lib. For example, if one patches the binary after linking with ; ```; install_name_tool foo_C.so -add_rpath $ROOTSYS/lib; ```; then, the command work w/o loading libRint by hand, i.e. the link to the lib is honoured (thanks to @vepadulano for the debugging session that led to this post!)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13734#issuecomment-1737131678:233,load,loading,233,https://root.cern,https://github.com/root-project/root/issues/13734#issuecomment-1737131678,1,['load'],['loading']
Performance,For some types of changes incremental builds are expected to fail (e.g. if source files are moved or removed). For those cases we probably need a way to ask the CI to rebuild from scratch rather than perform an incremental build.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12302:200,perform,perform,200,https://root.cern,https://github.com/root-project/root/issues/12302,1,['perform'],['perform']
Performance,For the `TObject` documentation I would add something along the line of:; ```; Classes derived from `TObject` can not use the `= default` syntax for their constructor as some compilers implement optimizations that prevents the `TObject::kIsOnHeap` detection mechanism from working properly.; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15469#issuecomment-2150845339:195,optimiz,optimizations,195,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2150845339,1,['optimiz'],['optimizations']
Performance,"For the `__file__` error you can use this patch:. ```diff; diff --git a/tutorials/dataframe/df105_WBosonAnalysis.py b/tutorials/dataframe/df105_WBosonAnalysis.py; index 00d323f472..d32bb75502 100644; --- a/tutorials/dataframe/df105_WBosonAnalysis.py; +++ b/tutorials/dataframe/df105_WBosonAnalysis.py; @@ -47,7 +47,7 @@ else: dataset_path = ""root://eospublic.cern.ch//eos/root-eos/reduced_atlas_opend. # Create a ROOT dataframe for each dataset; # Note that we load the filenames from the external json file placed in the same folder than this script.; -files = json.load(open(os.path.join(os.path.dirname(os.path.abspath(__file__)), ""df105_WBosonAnalysis.json""))); +files = json.load(open(os.path.join(ROOT.gROOT.GetTutorialsDir(), ""dataframe/df105_WBosonAnalysis.json""))); processes = files.keys(); df = {}; xsecs = {}; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10430#issuecomment-1106197292:461,load,load,461,https://root.cern,https://github.com/root-project/root/issues/10430#issuecomment-1106197292,3,['load'],['load']
Performance,"For the compatibility, this was introduced for TDataFrame. It can be done for TDataSource too. As usual, my fear is that in order to be too backward compatible we load ourselves with sterile tasks. I'll try to find a balance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2055#issuecomment-391251996:163,load,load,163,https://root.cern,https://github.com/root-project/root/pull/2055#issuecomment-391251996,1,['load'],['load']
Performance,"For the new RooFit BatchMode, the model pdf had to be ""compiled"" for a; fixed normalization set before being evaluated by the RooFit driver. This step was implemented in a rather hacky way, because it only became; clear gradually how important this step is, as many changes need to be; done to the computation graph before it can be used by the BatchMode. It started by ""unrolling"" the normalization integrals such that they are; separate nodes that can be evaluated by the RooFit driver. Then, it also covered the transformation of every RooProdPdf into a new; object that exposes the full intenal computation graph that is cached by; the RooProdPdf for a given norm set. These two changes where done in separate passes through the compute; graph, and there was also a third pass to figure out dependencies and; normalization sets in the graph, and some more recursive passes the; attach new servers. This all became very compilcated and hard to debug, as the separate; passes through the graph interfered with each other as well. With all the lessons learned, this commit suggests a new more general; way to compile a model for a given normalization set. It is now done in a **single recursive pass through the graph** via the; newly-proposed function; `RooAbsArg::compileForNormSet(RooAbsArg const& normSet, context)`. It's job is to make a clone of the RooAbsArg where the normalization set; is fixed to `normSet`, given some context. Now, the details of unrolling the integrals of a RooAbsPdf and replacing; the RooProdPdfs can be implemented in the overload for this function of; the specific class. There is even an overload for the RooSimultaneous; now, which contains all the logic of making the RooSimultaenous ready; for the NLL creation. There are still some rough edges in the new interface, but it is already; a big step forward that will make debugging much easier because it's now; much less compilcated to understand how the computation graph is set up; by the BatchMode. Also, this m",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12079:625,cache,cached,625,https://root.cern,https://github.com/root-project/root/pull/12079,1,['cache'],['cached']
Performance,"For the record the following issue is still left:; ```; Issues with 'interpreted' + load-file-first mode. Loading the file creates a TClass for the map. Additional code (eg accessing; the CollectionProxy) might also create a TClass for the pair. When the header file is loaded in the interpreter, unless there is explicit; uses of the map (or pair), there is no decl for the instantiation of thus; the TClass for the map and pair are not refreshed. When the pair or map are instantiated (eg. `gInterpreter->Declare(""pair<...> pl"")`),; the TClass for the pair is informed (via `TCling::UpdateClassInfoWithDecl`; and `TCling::RefreshClassInfo`). We could update `RefreshClassInfo` to refresh the `StreamerInfo` for the pair; but it would also need to also refresh the map's CollectionProxy (size,; hints, etc?) [and there is an arbitrary number because they are thread-local]. So at that point, it might actually be better to recreate the TClass for the; map ... But wait ... there is currently no support for generating a collection proxy for; an interpreted class ... so it is actually an emulated collection proxy ... That proxy does not match the interpreted (nor the compiled) version of the; map ... so there is no good point to match the pair either .... So the solution above are (a tad bit) complex and .... not enough ...; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10230#issuecomment-1078435016:84,load,load-file-first,84,https://root.cern,https://github.com/root-project/root/pull/10230#issuecomment-1078435016,3,"['Load', 'load']","['Loading', 'load-file-first', 'loaded']"
Performance,"For the record, I have done what I outlined above and updated the PR. I do see some drastic improvements for some of our workflows (250MB out of 1GB) where we have many processes initialising the interpreter. For others, where the usage of ROOT is limited to reading files in a single process, the improvement is not so obvious. Simply opening a file does show improvement as well (I am down to 49MB, when I also patch the FileInfo vector in the HeaderSearch). The PR somehow seems to die with some old memory corruption which I am pretty sure I fixed and I cannot reproduce anymore. Is there any need to clean some cache?. Notice I have also submitted the patch to llvm itself and it passes their CI (https://github.com/llvm/llvm-project/pull/66430#issuecomment-1720164026)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1720185060:616,cache,cache,616,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1720185060,1,['cache'],['cache']
Performance,"For the record, one such discussion yield the following:. a) Update the merging operation (if not already done) to make sure that the output file is kept open during the length of the process (this is to avoid re-reading the output TTree from the output file) and the TTree is written to the output file only once at the end. b) CMSSW can detect when a 'merge' operation was requested by checking the return value of Fill and the number of entry: if Fill succeed and the TTree has zero entries afterwards then a merge operation was requested (the TTree was reset). c) We need to call a callback (std::function) provided at CMS when a merge operation is completed (i.e all its baskets are on the output file and the output TTree has been updated accordingly). d) When CMSSW noticed that a 'merge' operation has been requested, it will shutdown the CMSSW output module (make it unavailable to other modules). This guarantees that if CMSSW has N output modules, there will be at most N queued merge operations and while the merge are going on only 1 thread is used for it (and the other N-1 can be used for other CMSSW work). e) We need to implement a queuing of the merge operations tasks without relying on the ROOT global write lock. See for example the way something similar is done in CSMSW: https://github.com/cms-sw/cmssw/blob/master/FWCore/Concurrency/interface/SerialTaskQueue.h. f) CMSSW need to call a 'finalization' API to 'close-out' the output file (without this call the output file is useless).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1866#issuecomment-387769514:983,queue,queued,983,https://root.cern,https://github.com/root-project/root/pull/1866#issuecomment-387769514,2,"['Concurren', 'queue']","['Concurrency', 'queued']"
Performance,"For the record, this issue is stil there as of 2022-11-10 acc8412782 as seen on https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/23 where the message is:; ```; <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature; <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'; Error: Module 'MathCore.pcm' failed to load.; ```; where as `Rint.pcm` is actually the newer of the 2 files:; ```; (base) neel@neel-ASUS-TUF-Gaming-A15-FA506QM-FA506QM:~/Desktop/Root/build$ ls -lart lib/Rint.pcm lib/MathCore.pcm; -rw-rw-r-- 1 neel neel 11538356 Nov 9 23:43 lib/MathCore.pcm; -rw-rw-r-- 1 neel neel 428436 Nov 9 23:58 lib/Rint.pcm; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7704#issuecomment-1311128901:580,load,load,580,https://root.cern,https://github.com/root-project/root/issues/7704#issuecomment-1311128901,1,['load'],['load']
Performance,"For the record, with v6.26/04 and gcc 11.3 Ubuntu 22. I get the same valgrind error and the following crash:; ```; #0 __pthread_kill_implementation (no_tid=0, signo=6, threadid=140737323350784) at ./nptl/pthread_kill.c:44; #1 __pthread_kill_internal (signo=6, threadid=140737323350784) at ./nptl/pthread_kill.c:78; #2 __GI___pthread_kill (threadid=140737323350784, signo=signo@entry=6) at ./nptl/pthread_kill.c:89; #3 0x00007ffff6cbc476 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #4 0x00007ffff6ca27f3 in __GI_abort () at ./stdlib/abort.c:79; #5 0x00007ffff6d036f6 in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff6e55b8c ""%s\n"") at ../sysdeps/posix/libc_fatal.c:155; #6 0x00007ffff6d1ad7c in malloc_printerr (str=str@entry=0x7ffff6e587b0 ""double free or corruption (out)"") at ./malloc/malloc.c:5664; #7 0x00007ffff6d1cef0 in _int_free (av=0x7ffff6e93c80 <main_arena>, p=0x7fffe2896000, have_lock=<optimized out>) at ./malloc/malloc.c:4588; #8 0x00007ffff6d1f4d3 in __GI___libc_free (mem=<optimized out>) at ./malloc/malloc.c:3391; #9 0x000055555555b133 in __gnu_cxx::new_allocator<char>::deallocate (this=0x7fffffffd4b0, __p=0x7fffe2896010 """", __t=27601898) at /usr/include/c++/11/ext/new_allocator.h:145 ; #10 0x000055555555ae34 in std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __p=0x7fffe2896010 """", __n=27601898) at /usr/include/c++/11/bits/alloc_traits.h:496 ; #11 0x000055555555a82c in std::_Vector_base<char, std::allocator<char> >::_M_deallocate (this=0x7fffffffd4b0, __p=0x7fffe2896010 """", __n=27601898); at /usr/include/c++/11/bits/stl_vector.h:354; #12 0x000055555555a32c in std::_Vector_base<char, std::allocator<char> >::~_Vector_base (this=0x7fffffffd4b0, __in_chrg=<optimized out>); at /usr/include/c++/11/bits/stl_vector.h:335; #13 0x000055555555a381 in std::vector<char, std::allocator<char> >::~vector (this=0x7fffffffd4b0, __in_chrg=<optimized out>) at /usr/include/c++/11/bits/stl_vector.h:683; #14 0x0000555555559c9b ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11853#issuecomment-1342997692:940,optimiz,optimized,940,https://root.cern,https://github.com/root-project/root/issues/11853#issuecomment-1342997692,1,['optimiz'],['optimized']
Performance,"Force deserialization also for unevaluated ESTs.; Deserializing the decl chain (as part of the linkage spec calculation); will update the EST between Start and End EH emission, causing an; asymmetry and triggering the assert. This forces the decl chain to be; loaded. Fixes roottest/root/treeformula/stl/assertSparseSelection.C on MacOS.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5534:260,load,loaded,260,https://root.cern,https://github.com/root-project/root/pull/5534,1,['load'],['loaded']
Performance,Foundation.framework/Versions/A/UIFoundation are out of sync. Falling back to library file for linking. ; - ld: warning: text-based stub file /System/Library/Frameworks//ApplicationServices.framework/Versions/A/ApplicationServices.tbd and library file /System/Library/Frameworks//ApplicationServices.framework/Versions/A/ApplicationServices are out of sync. Falling back to library file for linking. ; - ld: warning: text-based stub file /System/Library/Frameworks//Foundation.framework/Versions/C/Foundation.tbd and library file /System/Library/Frameworks//Foundation.framework/Versions/C/Foundation are out of sync. Falling back to library file for linking. ; - ld: warning: text-based stub file /System/Library/Frameworks//CoreGraphics.framework/Versions/A/CoreGraphics.tbd and library file /System/Library/Frameworks//CoreGraphics.framework/Versions/A/CoreGraphics are out of sync. Falling back to library file for linking. . And 77 more. ### Failing tests:; - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_autocache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/46767/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_autocache/); - [projectroot.roottest.root.tree.cloning.roottest_root_tree_cloning_exectrim](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/46767/testReport/projectroot.roottest.root.tree/cloning/roottest_root_tree_cloning_exectrim/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_TooSmall](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/46767/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_TooSmall/); - [projectroot.roottest.root.tree.fastcloning.roottest_root_tree_fastcloning_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/46767/testReport/projectroot.roottest.root.tree/fastcloning/roottest_root_tree_fastcloning_make/); - [projectroot.roottest.root.io.treeForeign.roottest_root_io_treeForeign_testForeignDraw](https://epsft-jenkins.cer,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2902#issuecomment-435413906:2755,cache,cache,2755,https://root.cern,https://github.com/root-project/root/pull/2902#issuecomment-435413906,1,['cache'],['cache']
Performance,Foundation_C; >Failed to load module ROOT_Rtypes; >Failed to load module ROOT_Foundation_Stage1_NoRTTI; >Failed to load module Core; >Failed to load module Rint; >Failed to load module RIO; >Failed to load module MathCore; >Failed to load module Hist; >Failed to load module ROOTBrowsable; >Failed to load module Unfold; >Failed to load module RHTTPSniff; >Failed to load module Imt; >Failed to load module HistPainter; >Failed to load module PyMVA; >Failed to load module RDAVIX; >Failed to load module RHTTP; >Failed to load module FitPanel; >Failed to load module ROOTVecOps; >Failed to load module ProofDraw; >Failed to load module Quadp; >Failed to load module ROOTNTuple; >Failed to load module ROOT_Foundation_Stage1_NoRTTI; >Failed to load module Genetic; >Failed to load module Eve; >Failed to load module GeomPainter; >Failed to load module TreeViewer; >Failed to load module Physics; >Failed to load module EG; >Failed to load module Tree; >Failed to load module HistFactory; >Failed to load module Spectrum; >Failed to load module Matrix; >Failed to load module Html; >Failed to load module Hist; >Failed to load module GuiHtml; >Failed to load module _Builtin_intrinsics; >Failed to load module Gpad; >Failed to load module TMVAGui; >Failed to load module Postscript; >Failed to load module ROOTEve; >Failed to load module RGL; >Failed to load module Fumili; >Failed to load module Net; >Failed to load module Geom; >Failed to load module RooFitMore; >Failed to load module ROOTGpadv7; >Failed to load module X3d; >Failed to load module Cling_Runtime; >Failed to load module SPlot; >Failed to load module EGPythia8; >Failed to load module RooFit; >Failed to load module RCsg; >Failed to load module Rint; >Failed to load module XMLParser; >Failed to load module MultiProc; >Failed to load module RooStats; >Failed to load module GeomBuilder; >Failed to load module Proof; >Failed to load module FITSIO; >Failed to load module Ged; >Failed to load module Recorder; >Failed to load module F,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7055:4174,load,load,4174,https://root.cern,https://github.com/root-project/root/issues/7055,1,['load'],['load']
Performance,"FpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=PNABpB6eQBLHoIjd3QUDm%2FMdUbyGTv6O%2BkpuRdme%2B3k%3D&reserved=0>,O=Grid,C=CA; >>>> * start date: Apr 08 16:29:03 2021 GMT; >>>> * expire date: May 08 16:29:03 2022 GMT; >>>> * common name: dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>; >>>> * issuer: CN=Grid Canada Certificate Authority,O=Grid,C=CA; >>>> * NSS error -8179 (SEC_ERROR_UNKNOWN_ISSUER); >>>> * Peer's Certificate issuer is not recognized.; >>>> * Closing connection 0; >>>> curl: (60) Peer's Certificate issuer is not recognized.; >>>> More details here: http://curl.haxx.se/docs/sslcerts.html ; >>>> <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fcurl.haxx.se%2Fdocs%2Fsslcerts.html&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428518448%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=uIrfnt21mOTnhAWQN7zxmDDm9NhvlwTvp4wDcEZqcgE%3D&reserved=0>; >>>>; >>>> curl performs SSL certificate verification by default, using a ""bundle""; >>>>  of Certificate Authority (CA) public keys (CA certs). If the default; >>>>  bundle file isn't adequate, you can specify an alternate file; >>>>  using the --cacert option.; >>>> If this HTTPS server uses a certificate signed by a CA represented in; >>>>  the bundle, the certificate verification probably failed due to a; >>>>  problem with the certificate (it might be expired, or the name might; >>>>  not match the domain name in the URL).; >>>> If you'd like to turn off curl's verification of the certificate, use; >>>>  the -k (or --insecure) option.; >>>> ***@***.*** t5]$; >>>; >>>; >>> I am unfamiliar with how to use curl with X509 and everything I ; >>> tried so far has not worked. eg; >>> *curl*-v ; >>> https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>> <https://can01.safelinks.pr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839989913:5017,perform,performs,5017,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839989913,1,['perform'],['performs']
Performance,From Axel: Empty token queue for late parsed templates also for pending instantiations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1838:23,queue,queue,23,https://root.cern,https://github.com/root-project/root/pull/1838,1,['queue'],['queue']
Performance,"Full discussion at https://github.com/root-project/roottest/pull/880 . Taking a look with `gdb` it looks like `kNotDeleted` is reset, but then those bits are immediately modified again by `_int_free`:. ```cpp; #0 tcache_put (tc_idx=0, chunk=0x55555562e400) at malloc.c:3183; #1 _int_free (av=0x7ffff4dfdbc0 <main_arena>, p=0x55555562e400, have_lock=0) at malloc.c:4481; #2 0x00007ffff4c9c8f3 in __GI___libc_free (mem=<optimized out>) at malloc.c:3391; #3 0x00007ffff7b30e64 in TStorage::ObjectDealloc (vp=0x55555562e410) at ../core/base/src/TStorage.cxx:362; #4 0x00007ffff7b14518 in TObject::operator delete (ptr=0x55555562e410) at ../core/base/src/TObject.cxx:1001; #5 0x00007ffff7b11cba in TObject::~TObject (this=0x55555562e410, __in_chrg=<optimized out>) at ../core/base/src/TObject.cxx:91; #6 0x0000555555556242 in main () at foo.cpp:9; ```. where the line that accidentally sets the bit again is 3181 here:. ```cpp; 3172 /* Caller must ensure that we know tc_idx is valid and there's room; 3173 for more chunks. */; 3174 static __always_inline void; 3175 tcache_put (mchunkptr chunk, size_t tc_idx); 3176 {; 3177 tcache_entry *e = (tcache_entry *) chunk2mem (chunk);; 3178; 3179 /* Mark this chunk as ""in the tcache"" so the test in _int_free will; 3180 detect a double free. */; 3181 e->key = tcache_key;; 3182; 3183 e->next = PROTECT_PTR (&e->next, tcache->entries[tc_idx]);; ```. and this version of the test circumvents that behavior of `_int_free` so it does not crash (at least on my laptop):. ```cpp; void *mem = malloc(sizeof(TObject));; auto o = new (mem) TObject();; auto l = new TList();; l->SetName(""my own list"");; l->Add(o);; o->~TObject();; l->Clear();; free(mem);; ```. If my understanding is correct, this also means that the test failure is real in the sense that the `kNotDeleted` mechanism does not correctly work on platforms where `free` has that behavior. From Philippe (https://github.com/root-project/roottest/pull/880#issuecomment-1239663370):. > We (I) need to extend ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11330:418,optimiz,optimized,418,https://root.cern,https://github.com/root-project/root/issues/11330,2,['optimiz'],['optimized']
Performance,"Functor::operator() (this=0x3167128); at /scratch/workspace/critic-slf/BUILDTYPE/debug/QUAL/e19/label1/swarm/label2/SLF7/build/art/v3_06_03-buildFW/src/art/Framework/Principal/Worker.cc:527; #10 0x00007ffff63e88f3 in hep::concurrency::SerialTaskQueueChain::runFunc<art::(anonymous namespace)::RunWorkerFunctor> (this=0x337e350, func=...); at /scratch/workspace/critic-slf/BUILDTYPE/debug/QUAL/e19/label1/swarm/label2/SLF7/build/hep_concurrency/v1_05_00/slf7.x86_64.e19.debug/include/hep_concurrency/SerialTaskQueueChain.h:83; #11 0x00007ffff63e8ce6 in hep::concurrency::SerialTaskQueueChain::<lambda()>::operator()(void) (this=0x337e350); at /scratch/workspace/critic-slf/BUILDTYPE/debug/QUAL/e19/label1/swarm/label2/SLF7/build/hep_concurrency/v1_05_00/slf7.x86_64.e19.debug/include/hep_concurrency/SerialTaskQueueChain.h:69; #12 0x00007ffff63e9939 in hep::concurrency::QueuedTask<hep::concurrency::SerialTaskQueueChain::passDown(unsigned int, const T&) [with T = art::(anonymous namespace)::RunWorkerFunctor]::<lambda()> >::execute(void); (this=0x7fffe8ec7940) at /scratch/workspace/critic-slf/BUILDTYPE/debug/QUAL/e19/label1/swarm/label2/SLF7/build/hep_concurrency/v1_05_00/slf7.x86_64.e19.debug/include/hep_concurrency/SerialTaskQueue.h:86; #13 0x00007ffff4e9db71 in tbb::internal::custom_scheduler<tbb::internal::IntelSchedulerTraits>::process_bypass_loop (this=0x7fffe8ed2600, context_guard=..., t=0x7fffe8ec7940, isolation=0); at ../../src/tbb/custom_scheduler.h:474. === end of File opening stack.; ```. On Dec 9, 2020, at 2:30 PM, Kyle Knoepfel <knoepfel@fnal.gov> wrote:. > Hi Philippe,; > ; > I have spent hours trying to debug a multi-threading error that appears when processing concurrent events with art's ROOT-based facilities. There are three ingredients required to reproduce the problem:; > • Must use multiple events and threads in flight; > • Must enable either art's TFileService or RootOutput module; > • Must use art's product-mixing module that wraps around to the beginning of",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6939:5333,concurren,concurrency,5333,https://root.cern,https://github.com/root-project/root/issues/6939,3,"['Queue', 'concurren']","['QueuedTask', 'concurrency']"
Performance,"Further testing indicated that, while 512B alignment is sufficient, it results in worse performance than 4kB alignment:; ![bandwidth-uncompressed](https://github.com/user-attachments/assets/bfb00384-0c84-470c-b8b8-e77ad21c9822). I changed the definitions of `kBlockAlign` and `kHeaderBlockSize` accordingly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16144#issuecomment-2260148571:88,perform,performance,88,https://root.cern,https://github.com/root-project/root/pull/16144#issuecomment-2260148571,1,['perform'],['performance']
Performance,G - Success; -- Performing Test CXX_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG; -- Performing Test CXX_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG - Success; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG - Success; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG - Success; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR - Failed; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG - Success; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL - Success; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP - Failed; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG - Success; -- Performing Test CXX_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test CXX_SUPPORTS_MISLEADING_INDENTATION_FLAG - Success; -- Performing Test C_SUPPORTS_FNO_FUNCTION_SECTIONS; -- Performing Test C_SUPPORTS_FNO_FUNCTION_SECTIONS - Success; -- Performing Test C_SUPPORTS_FFUNCTION_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:4359,Perform,Performing,4359,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,1,['Perform'],['Performing']
Performance,G1.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Services.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DCAROOT-G1.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Services.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DCAROOT-G1.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNLPGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Services.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/20b7db76.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IHEP-2013.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DCAROOT-G1.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IHEP-2013.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b93d6240.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/39d30eba.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b93d6240.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e7734335.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30351739.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/39d30eba.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30351739.signing_pol,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:55251,load,load,55251,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,GCA2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/RDIG.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Personnels.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/156a0f0f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/seegrid-ca-2013.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ff94d436.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3d5be7bc.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/55994d72.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/94b468c6.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3d5be7bc.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/94b468c6.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1ac0d46.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/RDIG.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1ac0d46.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/RDIG.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SlovakGrid.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4ce1cf99.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SiGNET-CA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4ce1cf99.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7a819ef2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1e4f9475.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7b54708e.namespaces' from CURLOPT_CAPATH,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:44616,load,load,44616,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,GL does not seem properly installed there: ; ```; $ glxgears; libGL error: No matching fbConfigs or visuals found; libGL error: failed to load driver: swrast; Error: glXCreateContext failed; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13418#issuecomment-1679025586:138,load,load,138,https://root.cern,https://github.com/root-project/root/issues/13418#issuecomment-1679025586,1,['load'],['load']
Performance,"GNU ld has a way to control the symbol versions by 'fixing' the library; appending @@somelib_version. In practice, ROOT's libraries contain a lot of undefined symbols which; are supposed to be resolved either in libc or glibc which are system; libraries. Our symbol dependency chain builder does not look into system; libraries for performance (and legacy reasons). Thus the undefined symbols; from the C/C++ runtime cause us to scan every time all non-system libraries; when we know what would be the outcome. More information can be found in the binutils documentation:; https://sourceware.org/binutils/docs/ld/VERSION.html. This patch optimizes dependency resolution speed for libTreePlayer by 450%",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4112:332,perform,performance,332,https://root.cern,https://github.com/root-project/root/pull/4112,2,"['optimiz', 'perform']","['optimizes', 'performance']"
Performance,GRID-FR-Personnels.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2fc6b233.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ff94d436.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/0e635db3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8fa17d52.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/0e635db3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IGCA2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/RDIG.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Personnels.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/156a0f0f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/seegrid-ca-2013.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ff94d436.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3d5be7bc.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/55994d72.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/94b468c6.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3d5be7bc.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/94b468c6.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1ac0d46.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/RDIG.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1ac0d46.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/RDIG.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SlovakGrid.crl_url' from ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:44048,load,load,44048,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"G_ARGS='-O1' gdb --args root.exe -l -b -q -x test.cpp++; GNU gdb (GDB) 11.1; Copyright (C) 2021 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-conda-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <https://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from root.exe...; (gdb) set auto-load safe-path /; (gdb) break CXXABICtxSwapper::SwapCtx; Function ""CXXABICtxSwapper::SwapCtx"" not defined.; Make breakpoint pending on future shared library load? (y or [n]) y; Breakpoint 1 (CXXABICtxSwapper::SwapCtx) pending.; (gdb) run; Starting program: /home/cburr/mambaforge/envs/root-debug/bin/root.exe -l -b -q -x test.cpp++; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib64/libthread_db.so.1"".; [Detaching after fork from child process 151706]; [Detaching after fork from child process 151708]; [Detaching after fork from child process 151713]; [Detaching after fork from child process 151715]; [Detaching after fork from child process 151803]; [Detaching after fork from child process 151807]. Breakpoint 1, (anonymous namespace)::CXXABICtxSwapper::SwapCtx (other=..., this=0x55555600d260) at /usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/ModuleBuilder.cpp:35; 35	/usr/local/src/conda/clang_packages-9.0.1/lib/CodeGen/ModuleBuilder.cpp: No such file or directory.; (gdb) set substitute-path /usr/local/src/conda/clang_packages-9.0.1/ /home/cburr/clang/; (gdb) l; 30	using namespace CodeGen;; 31; 32	namespace {;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9595#issuecomment-1021571360:1297,load,load,1297,https://root.cern,https://github.com/root-project/root/issues/9595#issuecomment-1021571360,1,['load'],['load']
Performance,"GarbageCollect (obj=0x7fffd4017590) at ../core/cont/src/TCollection.cxx:736; #9 0x00007ffff7cfbe70 in TObjArray::Delete (this=0x7fffd4011ab8) at ../core/cont/src/TObjArray.cxx:376; (More stack frames follow...). Thread 1 (Thread 0x7ffff42bec00 (LWP 312681) ""repro_ttreeproc""):; #0 0x00007ffff767d973 in TGenCollectionProxy::PopProxy (this=0x7fffd4016090) at ../io/io/src/TGenCollectionProxy.cxx:1333; #1 0x00007ffff656b78d in (anonymous namespace)::TCollectionLessSTLReader::GetSize (this=0x5555577ccb80, proxy=0x5555577cdde0) at ../tree/treeplayer/src/TTreeReaderArray.cxx:130; #2 0x0000555555561837 in ROOT::Internal::TTreeReaderArrayBase::GetSize (this=0x7fffffffc1c0) at /home/blue/ROOT/master/cmake-build-foo/include/TTreeReaderArray.h:35; #3 0x00005555555612bc in workload (r=...) at repro_ttreeprocmt.cpp:10; #4 0x0000555555563ef5 in std::__invoke_impl<void, void (*&)(TTreeReader&), TTreeReader&> (__f=@0x7fffffffde50: 0x555555561269 <workload(TTreeReader&)>) at /usr/include/c++/11.2.0/bits/invoke.h:61; #5 0x0000555555563784 in std::__invoke_r<void, void (*&)(TTreeReader&), TTreeReader&> (__fn=@0x7fffffffde50: 0x555555561269 <workload(TTreeReader&)>) at /usr/include/c++/11.2.0/bits/invoke.h:111; #6 0x0000555555562df8 in std::_Function_handler<void (TTreeReader&), void (*)(TTreeReader&)>::_M_invoke(std::_Any_data const&, TTreeReader&) (__functor=..., __args#0=...) at /usr/include/c++/11.2.0/bits/std_function.h:291; #7 0x00007ffff659e8a9 in std::function<void (TTreeReader&)>::operator()(TTreeReader&) const (this=0x7fffffffde50, __args#0=...) at /usr/include/c++/11.2.0/bits/std_function.h:560; #8 0x00007ffff659881c in operator() (__closure=0x7fffffffcf10, c=...) at ../tree/treeplayer/src/TTreeProcessorMT.cxx:555; #9 0x00007ffff6599d8c in operator() (__closure=0x7fffffffceb0, i=0) at ../core/imt/inc/ROOT/TThreadExecutor.hxx:231; (More stack frames follow...); ```. First reported at https://root-forum.cern.ch/t/root-6-26-00-issue-with-multi-threaded-rdataframe-and-rvec/49310 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10357:4452,multi-thread,multi-threaded-rdataframe-and-rvec,4452,https://root.cern,https://github.com/root-project/root/issues/10357,1,['multi-thread'],['multi-threaded-rdataframe-and-rvec']
Performance,Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_6:1:2: error: unknown type name 'ifdef'; #ifdef ERROR; ^; <<< cling interactive line,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-752250076:4812,load,load,4812,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076,1,['load'],['load']
Performance,Generate offset map performance improvement,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4568:20,perform,performance,20,https://root.cern,https://github.com/root-project/root/pull/4568,1,['perform'],['performance']
Performance,GermanGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d0a33f8e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d0a33f8e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dd4b34ea.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b2783ac.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b2783ac.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dd4b34ea.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f4db168.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f4db168.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/089450c2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy-CA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA3G3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy-CA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/089450c2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy-CA.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA3G3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/368bc755.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy-CA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/114,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:29991,load,load,29991,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"Given the fact that you found bugs in the safety algorithm and that you've added so many optimizations, I think we also need an improved version of the `parallel_world.C` test, that uses the new features you introduced. Now the rays are propagated based on the distance to the boundary, but we could make them for example change direction and move with the safety value if further than a given distance from the boundary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442#issuecomment-2354909585:89,optimiz,optimizations,89,https://root.cern,https://github.com/root-project/root/pull/16442#issuecomment-2354909585,1,['optimiz'],['optimizations']
Performance,Go back to use .h5 files instead of .keras due to a problem in Keras loading .keras files on MacOS ARM ; (see https://github.com/keras-team/tf-keras/issues/46 ),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13592:69,load,loading,69,https://root.cern,https://github.com/root-project/root/pull/13592,1,['load'],['loading']
Performance,Going to be replaced by #5285. I keep this one a little longer around to figure out which libraries we load on mac.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5252#issuecomment-608297605:103,load,load,103,https://root.cern,https://github.com/root-project/root/pull/5252#issuecomment-608297605,1,['load'],['load']
Performance,"Good point. I just dislike the submission computer having to open all files: it's potentially saturating the bandwidth, not as parallel as it could be (given there might be a whole cluster waiting), and the storage might be optimized for the cluster more than for the submission computer (a laptop?). Can we - as a first task - submit to the workers the opening of all files / reporting of their entries? Only once they have reported back would then the main task start, possibly only if it uses friends or rdfentry.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12190#issuecomment-1413220425:224,optimiz,optimized,224,https://root.cern,https://github.com/root-project/root/issues/12190#issuecomment-1413220425,1,['optimiz'],['optimized']
Performance,"Good question, but unfortunately I have to admit I don't really know why. I didn't have that much time to investigate but needed a fix for 6.28 for which I'm already late. The TFoam class is quite fundamental to RooFit, and the memory increase has affected many users. All I had was this hint by valgrind when checked the reproducer in the commit message:; ```; Conditional jump or move depends on uninitialised value(s); at 0x402E09: TStorage::UpdateIsOnHeap(unsigned int const volatile&, unsigned int volatile&) (TStorage.h:132); by 0x501B33D: TDirectory::TDirectory() (in /usr/lib64/root/libCore.so.6.26.10); by 0x5816D81: TDirectoryFile::TDirectoryFile() (in /usr/lib64/root/libRIO.so.6.26.10); by 0x5833AF8: TFile::TFile(char const*, char const*, char const*, int) (in /usr/lib64/root/libRIO.so.6.26.10); by 0xE2D86A6: TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /usr/lib64/root/libCling.so.6.26.10); by 0xE2D9A17: TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,; allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) (in /usr/lib64/root/libCling.so.6.26.10); by 0x4FF098E: TROOT::InitInterpreter() (in /usr/lib64/root/libCore.so.6.26.10); by 0x4FF0C9E: ROOT::Internal::GetROOT2() (in /usr/lib64/root/libCore.so.6.26.10); by 0x510209C: ROOT::TGenericClassInfo::GetClass() (in /usr/lib64/root/libCore.so.6.26.10); by 0x90B67CA: TFoamCell::Class() (in /usr/lib64/root/libFoam.so.6.26.10); by 0x504BE7A: TRef::operator=(TObject*) (in /usr/lib64/root/libCore.so.6.26.10); by 0x90B126F: TFoamCell::Fill(int, TFoamCell*, TFoamCell*, TFoamCell*) (in /usr/lib64/root/libFoam.so.6.26.10); Uninitialised value was created by a stack allocation; at 0xE2D8106: TCling::LoadPCM(std::__cxx11::basic_string<",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12061#issuecomment-1397463096:832,Load,LoadPCM,832,https://root.cern,https://github.com/root-project/root/pull/12061#issuecomment-1397463096,1,['Load'],['LoadPCM']
Performance,Grid-CA-2016.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HellasGrid-CA-2016.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HellasGrid-CA-2016.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f4cf8fb6.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/6999cae3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/6999cae3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UGRID-G2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UGRID-G2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UGRID-G2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UGRID-G2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c53e160f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c53e160f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8fa17d52.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/368bc755.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HKU-CA-2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c36f6349.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HKU-CA-2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c36f6349.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HKU-CA-2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IGCA2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HKU-CA-2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a7b21b05.namespaces' from CURLOPT_C,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:37347,load,load,37347,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,H; * failed to load '/etc/grid-security/certificates/67707166.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/67707166.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Grid-ICA-G2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MYIFAM.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Grid-ICA-G2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MYIFAM.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e91bd360.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2f573f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MYIFAM.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.signing_policy' from CURLOPT_CAPATH; *,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:27113,load,load,27113,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,H; * failed to load '/etc/grid-security/certificates/CESNET-CA-4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/COMODO-RSA-CA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceCA-2B.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/COMODO-RSA-CA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Grid-FR.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d4c339cb.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d6325660.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/InCommon-IGTF-Server-CA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceCA-2B.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/InCommon-IGTF-Server-CA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d11f973e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/82c2b224.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/InCommon-IGTF-Server-CA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d11f973e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ba240aa8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5f0dfc2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4339b4bc.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3cc00941.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/68aa9d51.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5168735f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:11117,load,load,11117,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,H; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLECCCA4.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLECCCA4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLECCCA4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/18700496.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5d9ea26d.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e732ef10.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/617ff41b.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58b08cb5.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e732ef10.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2f573f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certifi,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:22823,load,load,22823,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,H; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLECCCA4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/18700496.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5d9ea26d.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e732ef10.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/617ff41b.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58b08cb5.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e732ef10.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2f573f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/18700496.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/cert,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:23029,load,load,23029,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,H; * failed to load '/etc/grid-security/certificates/LIPCA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/LIPCA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/LIPCA.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e13e0fcf.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/BYGCA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/LIPCA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/064e0aa9.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/be87b272.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/BYGCA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/be87b272.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e21dc0c0.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/064e0aa9.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/036b3363.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/BYGCA.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/036b3363.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/126f0acf.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HPCI.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/126f0acf.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1f58a078.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ANSPGrid.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1f58a078.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ANSPGrid.info' from CURLOPT_CAPATH; * fa,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:49279,load,load,49279,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,H; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA3G3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/87429ba3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TRGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7c27c6a1.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HellasGrid-CA-2016.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HellasGrid-CA-2016.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HellasGrid-CA-2016.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HellasGrid-CA-2016.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f4cf8fb6.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/6999cae3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/6999cae3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UGRID-G2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UGRID-G2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UGRID-G2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UGRID-G2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c53e160f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c53e160f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8fa17d52.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/368bc755.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HKU-CA-2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c36f6349.namespaces' from CURLOPT_C,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:36796,load,load,36796,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,H; * failed to load '/etc/grid-security/certificates/ef7d3e44.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/530f7122.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/9c979c2b.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceCA-2B.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/9c979c2b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/62c4a178.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a603ba9c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8dd53007.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/943fd5f3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG4-runbytheissuer.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG4-runbytheissuer.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d41ec82f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b85d64aa.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/598b583e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a603ba9c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/82c2b224.signing_policy' from C,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:14877,load,load,14877,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,HAS_fno_rtti - Success; -- Performing Test C_HAS_Wno_strict_overflow; -- Performing Test C_HAS_Wno_strict_overflow - Success; -- Performing Test C_HAS_Wno_maybe_uninitialized; -- Performing Test C_HAS_Wno_maybe_uninitialized - Success; -- Performing Test C_HAS_Wno_parentheses_equality; -- Performing Test C_HAS_Wno_parentheses_equality - Success; -- Looking for m; -- Looking for m - not found; -- Use SSL API VERSION 1.1 for civetweb; -- Performing Test GCC_HAS_BIDI_CHARS_FLAG; -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Failed; -- Performing Test found_setresuid; -- Performing Test found_setresuid - Success; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_opplusequal_stringview; -- Performing Test found_opplusequal_stringview - Success; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Success; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Success; -- Performing Test found_stdindexsequence; -- Performing Test found_stdindexsequence - Success; -- Performing Test found_attribute_always_inline; -- Performing Test found_attribute_always_inline - Success; -- Performing Test has_found_attribute_noinline; -- Performing Test has_found_attribute_noinline - Success; -- Performing Test found_hardware_interference_size; -- Performing Test found_hardware_interference_size - Failed; Running /home/razorr/Softwares/Installed/HEP/Root/gitclone/build/unix/compiledata.sh; Making /home/razorr/Softwares/Installed/HEP/Root/build/ginclude/compiledata.h; -- ROOT Configuration. System Linux-5.15.37-1-lts; Processor 2 core Intel(R) Core(TM) i3-5010U CPU @ 2.10GHz (x86_64); Build type Release; Install path /home/razorr/Softwares/Installed/HEP/Root/install; Compiler GNU 11.2.0; Compiler flags:; C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG; C++ -std=c++17 -Wno-implicit-fa,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10528:10664,Perform,Performing,10664,https://root.cern,https://github.com/root-project/root/issues/10528,22,['Perform'],['Performing']
Performance,HEF.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MD-Grid-CA-T.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/072977ca.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IRAN-GRID-GCG-G2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/072977ca.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MD-Grid-CA-T.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58435df6.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IRAN-GRID-GCG-G2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58435df6.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IRAN-GRID-GCG-G2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NIIF-Root-CA-2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MD-Grid-CA-T.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NIIF-Root-CA-2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NIIF-Root-CA-2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/13ba0088.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NIIF-Root-CA-2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/16da7552.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MD-Grid-CA-T.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/13ba0088.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NIKHEF.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IRAN-GRID-GCG-G2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/cilogon-s,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:65209,load,load,65209,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,10,['load'],['load']
Performance,"HI, ; I think is nice to show in a tutorial that we can run different methods and TMVA and Keras at the same time. ; We could add a pre-processing macro for pymva, something like R__HAS_PYMVA; or even better fix the loading of the library using the ROOT plugin-manager. I will see if I can provide a PR for one of these tomorrow",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5559#issuecomment-625156542:216,load,loading,216,https://root.cern,https://github.com/root-project/root/pull/5559#issuecomment-625156542,1,['load'],['loading']
Performance,HROUGH_FLAG; -- Performing Test C_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG - Success; -- Performing Test CXX_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG; -- Performing Test CXX_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG - Success; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG - Success; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG - Success; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR - Failed; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG - Success; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL - Success; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP - Failed; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG - Success; -- Performing Test CXX_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test CXX_SUPPORTS_MISLEADING_INDENTATION_FLAG - Success; -- Performing Test C_SUPPORTS_FNO_FUNCTION_SECTIONS; -- Performing Test C_SUPPORTS_FNO_FU,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:4292,Perform,Performing,4292,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,1,['Perform'],['Performing']
Performance,"Ha, that was again a nice rabbit hole. Here's a summary of what I found:; 1. We'll never run into problems with GCC's `libstdc++` since [version 4.5](https://gcc.gnu.org/gcc-4.5/changes.html): ""The default behavior for comparing typeinfo names has changed, so in `<typeinfo>`, `__GXX_MERGED_TYPEINFO_NAMES` now defaults to zero"", which means that `operator==` performs the string comparison in all cases.; 2. `libc++` by now has three different implementations: https://github.com/llvm/llvm-project/blob/066b8f2fc6d584635a017a0a15494ce4460744e3/libcxx/include/typeinfo#L120-L169 For all platforms except Windows and Apple M1, the library ""assume[s] the Itanium C++ ABI and use[s] the Unique implementation"". This may be fine for compiled programs where the linker can unify the `type_info`s, but not if the JIT emits a new copy. I have yet to find an example where this can go wrong, it would be great to have a test that fails if somebody attempts to ""simplify"" things. For this particular method however, the Itanium ABI mandates that the `std::type_info` objects of the checked types live in the run-time support library: https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-emission With exactly one object for those types, even `operator==` cannot mess up.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7776#issuecomment-823939722:360,perform,performs,360,https://root.cern,https://github.com/root-project/root/pull/7776#issuecomment-823939722,1,['perform'],['performs']
Performance,"Handle line and fill attribute from individual bins ; Support ""p"" and ""*"" for markers drawing; Switch off color draw optimization. Now JSROOT should be very close to ROOT graphics. Other changes in JSROOT as:; - use localStorage instead of cookies (not exposed to network); - support URL options export when using ""Show in new tab"" menu command",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15000:117,optimiz,optimization,117,https://root.cern,https://github.com/root-project/root/pull/15000,1,['optimiz'],['optimization']
Performance,Handle the case where a typedef as a dictionary entry and thus an autoload entry (rootmap case) and this typedef point to an instance a class template with a default paramter. In this case we do not have a (forward) declaration of the typedef in the rootmap file (because we can't have a forward declaration of the class template). In those case our only source of information is in the list of type which is loaded as part of the dictionary for the typedef. If in addition the dictionary for the target of the typedef is in another library we actually need to load that library based on the resolved name of the typedef). This fixes #12378,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12488:409,load,loaded,409,https://root.cern,https://github.com/root-project/root/pull/12488,4,['load'],"['load', 'loaded']"
Performance,"Happens when try to find and execute static class method without arguments and which returns `void`. First detected with `TPluginHandler`. This is only plugin handler which defined with 0 arguments:; ```; gPluginMgr->AddHandler(""TGeoManagerEditor"", ""*"", ""TGeoManagerEditor"", ""GeomBuilder"", ""LoadLib()"");; ```; ROOT crashes when executed this plugin.; Problem can be cooked down to the reproducer - code which is executed by plugin handler:; ```; {; TClass *cl = TClass::GetClass(""TGeoManagerEditor"");. TString fCtor = ""LoadLib()"";. TString method = fCtor(0, fCtor.Index(""(""));; TString proto = fCtor(fCtor.Index(""("")+1, fCtor.Index("")"")-fCtor.Index(""("")-1);. auto fMethod = cl->GetMethodWithPrototype(method, proto);. auto fCallEnv = new TMethodCall;; fCallEnv->Init(fMethod);. fCallEnv->SetParams();. Longptr_t ret = 0;; fCallEnv->Execute(ret);; }. ```; It crashed when `fCallEnv->Execute` is called. . There is simple workaround:; ```; if (proto.Length() == 0) proto = ""()"";; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11930:291,Load,LoadLib,291,https://root.cern,https://github.com/root-project/root/issues/11930,2,['Load'],['LoadLib']
Performance,"Having a TBB dependency in core should be a ""big"" move (making the availability of TBB a pre-requirement to build ROOT). On your original (RDataFrame if I recall correctly) use case, what is the performance and scaling differences between the 3 cases; * Current; * std::shared_mutex; * ""TBBUnique"". ? (Some form of those results should also probably make it into the commit log before merging).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-742913420:195,perform,performance,195,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-742913420,1,['perform'],['performance']
Performance,"Having that bit set on TBranches causes _a lot_ of thread; contention (~TBranch -> ~TNamed -> RecursiveRemove).; Similarly for leaves. This mitigates performance issues with MT runs on certain samples; where all branches and leaves have this bit set. For a reproducer provided by a CMS user, this patch provides a factor 9 speed-up, up to a factor 30 for a stripped down version of said reproducer that exacerbates the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10729:150,perform,performance,150,https://root.cern,https://github.com/root-project/root/pull/10729,1,['perform'],['performance']
Performance,"He is using different code but our event counts are identical and track counts should be identical. Sorry about the irrelevant details. 14,957,212,539 are expected but 8,195,379,712 are performed. It is for the exact same set of files. I have not considered using an RDataFrame.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14215#issuecomment-1851609405:186,perform,performed,186,https://root.cern,https://github.com/root-project/root/issues/14215#issuecomment-1851609405,1,['perform'],['performed']
Performance,"Hello @sinnfashen, thank you very much for your PR!. I have rebased it on master, fixed the conflicts and ran your demo in `PTKDTree.C`. Unfortunately, depending on the number of `MAXN`, the code was either crashing, or the parallelization even resulted in a slowdown. As pointed out by @lmoneta and @dpiparo, to merge this it would be necessary to demonstrate a clear speedup in at least some usecases, and even better to show that these usecases also correspond to real-world problems. Since these concerns were not addressed and there was no further reply to the last comment of @lmoneta, I assume that you, @sinnfashen, have moved on from the project and I'll close this PR. Still, if you ever feel like playing with this again, and you can show that the parallelized algorithms performance scales well with the number of threads and gives the correct results, feel free to reopen this PR or open a new one!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2202#issuecomment-1808849990:783,perform,performance,783,https://root.cern,https://github.com/root-project/root/pull/2202#issuecomment-1808849990,1,['perform'],['performance']
Performance,"Hello there. I fail to see the difference between:; ```; h->Fill(3.1415); ``` ; and ; ```; h->Fill(3.1415,1.); ``` ; Why are we using defining different functions for both of them? I came across this when performing `h->Fill(""StringBarLabelHere"")` which fails as I always have to set the weight to `1.` in every call.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5010:205,perform,performing,205,https://root.cern,https://github.com/root-project/root/pull/5010,1,['perform'],['performing']
Performance,"Hello,. At the moment, the `ROOT::TLorentzVector` class uses a pseudorapidity-based calculation for the commonly-used DeltaR distance between vectors. For massive objects, such as jets, the rapidity should often be used instead. I have implemented a small switch within the `TLorentzVector::DeltaR` function to allow users to make this calculation with the vector's rapidity, instead of pseudorapidity. This has a default value of `kFALSE`, which means that the current behaviour will be the default one. I have cross-checked this new functionality with the `fastjet::pseudojet::delta_R` implementation and an internal ATLAS one, which all give the same results when performing the rapidity-based calculation. Please let me know if I have violated any contribution guidelines, and I will update this PR accordingly!. 🍻 Matt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7087:667,perform,performing,667,https://root.cern,https://github.com/root-project/root/pull/7087,1,['perform'],['performing']
Performance,"Hello,. I was trying to improve the throughput of a program that deals with ROOT files containing gazillions of histograms. I ended up using linux perf, and found that the culprit is; ```TDirectoryFile::GetObjectChecked(const char *namecycle, const TClass* expectedClass)```. A quick read through the code shows that the problem is that in the case of a histogram not yet read in memory, the iteration through the list of keys is linear !!! On the other hand the function; ```TKey *TDirectoryFile::GetKey(const char *name, Short_t cycle) const```; is correctly implemented, i.e see; ```TIter next( ((THashList *)(GetListOfKeys()))->GetListForObject(name) );```; to make use of the `THashList` capabilities of the list of keys. I ended up cutting the running time of my program by a factor 4-5 by replacing; ```m_baseDir->GetObject(hname, res);```; by; ```; TKey* res_key = m_baseDir->GetKey(hname);; if(res_key) {; res = (TH1*)(res_key->ReadObj());; }; ```. Would be nicer to fix `TDirectoryFile::GetObjectChecked` directly, as well as `TDirectoryFile::Get`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8046:36,throughput,throughput,36,https://root.cern,https://github.com/root-project/root/issues/8046,1,['throughput'],['throughput']
Performance,"Hello,. after I installed the most recent ROOT release 6.22.00, I noticed that the drawing performance of the marker styles 6 and 7 became significantly worse. Unfortunately, I got to admit this is due to the additions of my PR #4772.; The implementation of the marker line width required to use different line joins and line caps than default to look nice, but are a little bit slower. In usual cases you won't notice this, but when you draw 100.000+ points, it becomes significant. I wrote this patch to fix this problem and make the markers 6 and 7, which are meant to be used for huge amounts of points, fast again. I confirmed that the fix works in an X11 environment. It would be good if someone can approve it also on Windows and MacOS. Since this is a fix, it should also become part of the v6-22-00-patches branch, how ever I don't know exactly how to do this. Do I need to open a second PR for this?. All the best,; Simon",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6027:91,perform,performance,91,https://root.cern,https://github.com/root-project/root/pull/6027,1,['perform'],['performance']
Performance,"Hello. I have a Web service that has been using JSRoot script that is taken from the ROOT server with the following reference:. `<script src=""https://root.cern/js/latest/scripts/JSRoot.core.js""></script>; `. It used to be working fine with ROOT v6 but after the 'latest' soft link had been moved to 7.1.0 the page stopped working giving the following error in JS console:. ```; Uncaught (in promise) TypeError: Failed to resolve module specifier '../modules/core.mjs'. The base URL is about:blank because import() is called from a CORS-cross-origin script.; at JSRoot.core.js:325:21; at JSRoot.core.js:3:77; at JSRoot.core.js:5:3; ```. I have fixed the Web service by replacing the 'latest' token in the JSRoot reference with '6.3.4' but I think it will stop working again as soon as this version will be removed from the ROOT server. Am I doing something wrong or otherwise could this problem be fixed?. To reproduce the problem one should create an HTML file with the following content in a Web server and load it from a Web browser:. ```; <!DOCTYPE html>; <html>; <head>; <script src=""https://root.cern/js/latest/scripts/JSRoot.core.js""></script>; </head>; <body>; </body>; </html>. ```. Cheers,",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10727:1008,load,load,1008,https://root.cern,https://github.com/root-project/root/issues/10727,1,['load'],['load']
Performance,"Here a test file:. ```; #!/usr/bin/env python. from ROOT import TMVA, TFile, TTree, TCut; from subprocess import call; from os.path import isfile. # Load data; if not isfile('tmva_class_example.root'):; call(['curl', '-O', 'http://root.cern.ch/files/tmva_class_example.root']). data = TFile.Open('tmva_class_example.root'); signal = data.Get('TreeS'); background = data.Get('TreeB'). dataloader = TMVA.DataLoader('dataset'); for branch in signal.GetListOfBranches():; dataloader.AddVariable(branch.GetName()). dataloader.AddSignalTree(signal); dataloader.AddBackgroundTree(background); dataloader.PrepareTrainingAndTestTree(TCut(''), 'SplitMode=Random:NormMode=NumEvents:!V'). # Setup cross-validation; cv = TMVA.CrossValidation(dataloader); cv.BookMethod(TMVA.Types.kFisher, 'Fisher', '!H:!V:Fisher'); cv.Evaluate(); results = cv.GetResults(); results.Print(); ```. And the output:. ```; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree TreeS of type Signal with 6000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree TreeB of type Background with 6000 events; : Dataset[dataset] : Class index : 0 name : Signal; : Dataset[dataset] : Class index : 1 name : Background; : Evaluate method: Fisher; : Evaluation done.; <HEADER> CrossValidation : ==== Results ====; : Fold 0 ROC-Int : 0.8827; : Fold 1 ROC-Int : 0.8874; : Fold 2 ROC-Int : 0.8910; : Fold 3 ROC-Int : 0.9120; : Fold 4 ROC-Int : 0.8988; : ------------------------; : Average ROC-Int : 0.8944; : Std-Dev ROC-Int : 0.0115; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/281#issuecomment-255585984:149,Load,Load,149,https://root.cern,https://github.com/root-project/root/pull/281#issuecomment-255585984,1,['Load'],['Load']
Performance,"Here are some numbers:. | Test | `-O0` | `-O1` | `-O1 -mllvm -optimize-regalloc=0` |; | --- | --- | --- | --- |; | large RDF graph, 10k nodes | 8.7s | 33.5s | 12.4s |; | compiled `df102` (real/user) | 22s / 46s | 23s / 42s | 22s / 38s |; | compiled `df103`, no IMT | 3.8s | 4.3s | 4.2s |; | `df104` (real/user) | 16s / 1m4s | 17s / 49s | 17s / 54s |. Please note that all numbers are quite noisy due to network etc., but the directions look ok AFAICT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9342#issuecomment-979960384:62,optimiz,optimize-regalloc,62,https://root.cern,https://github.com/root-project/root/pull/9342#issuecomment-979960384,1,['optimiz'],['optimize-regalloc']
Performance,Here are the failing tests (without the `-fno-threadsafe-statics` flag):; ```; 7 - gtest-core-meta-test-testHashRecursiveRemove (Failed); 104 - gtest-tree-treeplayer-test-treetreeplayertestUnit (Failed); 105 - gtest-tree-treeplayer-test-dataframe-friends (Failed); 106 - gtest-tree-treeplayer-test-dataframe-alias (Failed); 107 - gtest-tree-treeplayer-test-dataframe-cache (Failed); 108 - gtest-tree-treeplayer-test-dataframe-callbacks (Failed); 110 - gtest-tree-treeplayer-test-dataframe-interface (Failed); 112 - gtest-tree-treeplayer-test-dataframe-regression (Failed); 113 - gtest-tree-treeplayer-test-dataframe-simple (Failed); 114 - gtest-tree-treeplayer-test-dataframe-snapshot (Failed); 116 - gtest-tree-treeplayer-test-datasource-more (Failed); 125 - tutorial-dataframe-tdf001_introduction (Failed); 126 - tutorial-dataframe-tdf002_dataModel (Failed); 127 - tutorial-dataframe-tdf003_profiles (Failed); 128 - tutorial-dataframe-tdf004_cutFlowReport (Failed); 129 - tutorial-dataframe-tdf005_fillAnyObject (Failed); 130 - tutorial-dataframe-tdf006_ranges (Failed); 131 - tutorial-dataframe-tdf007_snapshot (Failed); 132 - tutorial-dataframe-tdf008_createDataSetFromScratch (Failed); 133 - tutorial-dataframe-tdf009_FromScratchVSTTree (Failed); 134 - tutorial-dataframe-tdf010_trivialDataSource (Failed); 135 - tutorial-dataframe-tdf011_ROOTDataSource (Failed); 136 - tutorial-dataframe-tdf012_DefinesAndFiltersAsStrings (Failed); ```; With errors like:; ```; 131: Processing C:/Users/bellenot/git/master/tutorials/dataframe/tdf003_profiles.C...; 131: IncrementalExecutor::executeFunction: symbol '_Init_thread_header' unresolved while linking function '??__Eid@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@YAXXZcling_module_10_'!; 131: You are probably missing the definition of _Init_thread_header; 131: Maybe you need to load the corresponding shared library?; 131: IncrementalExecutor::executeFunction: symbol '__emutls_get_address' unresolved while li,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1607#issuecomment-364363584:367,cache,cache,367,https://root.cern,https://github.com/root-project/root/pull/1607#issuecomment-364363584,1,['cache'],['cache']
Performance,"Here is a summary of the tests I ran:. **Before changes from this branch:**; ```; Label Time Summary:; cling = 42.21 sec (98 tests); longtest = 942.83 sec (47 tests); matrix = 0.23 sec (1 test); regression = 41.80 sec (97 tests); roottest = 42.44 sec (99 tests); tutorial = 1067.05 sec (563 tests). Total Test time (real) = 3523.13 sec; ```. **After changes from this branch:**; ```; Label Time Summary:; cling = 53.62 sec (98 tests); longtest = 1296.42 sec (47 tests); matrix = 0.21 sec (1 test); regression = 53.21 sec (97 tests); roottest = 53.83 sec (99 tests); tutorial = 1061.13 sec (550 tests). Total Test time (real) = 4197.14 sec; ```. At first look, it seems there is a significant performance cost to these changes.; I will run more specific tests (e.g. my `TBufferMerger` test) now and check; how things change a bit more closely. I will also check if removing the lock on; MergeRecusrive is now possible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1251#issuecomment-343476882:692,perform,performance,692,https://root.cern,https://github.com/root-project/root/pull/1251#issuecomment-343476882,1,['perform'],['performance']
Performance,Here is hard-corded libs loading:. https://github.com/root-project/root/pull/4767/files#diff-ec80b78da8b78ffdfb70dd12d74ebdeeR182-R189. One needs more flexible solution - can be provided in following PRs,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4767#issuecomment-574072596:25,load,loading,25,https://root.cern,https://github.com/root-project/root/pull/4767#issuecomment-574072596,1,['load'],['loading']
Performance,"Here is some performance information for the reproducer code attached to [ROOT-9133](https://sft.its.cern.ch/jira/browse/ROOT-9133):. **perf stat (before)**; ```; Performance counter stats for 'root-9133':. 135566.779101 task-clock (msec) # 4.167 CPUs utilized ; 481,078 context-switches # 0.004 M/sec ; 710 cpu-migrations # 0.005 K/sec ; 3,512,992 page-faults # 0.026 M/sec ; 456,851,617,713 cycles # 3.370 GHz ; 310,271,051,553 instructions # 0.68 insn per cycle ; 65,664,345,345 branches # 484.369 M/sec ; 723,033,852 branch-misses # 1.10% of all branches . 32.535328793 seconds time elapsed; ```; **perf stat (after)**; ```; Performance counter stats for 'root-9133':. 115840.232563 task-clock (msec) # 6.254 CPUs utilized ; 343,733 context-switches # 0.003 M/sec ; 327 cpu-migrations # 0.003 K/sec ; 1,567,401 page-faults # 0.014 M/sec ; 391,763,587,760 cycles # 3.382 GHz ; 273,699,878,762 instructions # 0.70 insn per cycle ; 57,799,809,349 branches # 498.961 M/sec ; 635,168,730 branch-misses # 1.10% of all branches . 18.522277829 seconds time elapsed; ```; *Note the reduced number of cpu-migrations, page-faults, and context switches, as well as lower runtime.*. **massif (before)**; ![screenshot](https://user-images.githubusercontent.com/249404/52358705-ca2d1c80-2a38-11e9-823e-ea35219fbca1.png); ![screenshot](https://user-images.githubusercontent.com/249404/52359262-d5cd1300-2a39-11e9-8159-73730cbd79e6.png). **massif (after)**; ![screenshot](https://user-images.githubusercontent.com/249404/52358746-db762900-2a38-11e9-9f63-5d2340860f4d.png); ![screenshot](https://user-images.githubusercontent.com/249404/52359437-30666f00-2a3a-11e9-94ed-67dfad3cdbec.png); *Note how `TBuffer::Expand()` goes from 1.8GB allocated memory down to just ~50MB. Also, total memory used drops from 3.8GB to 3.1GB. The size of the output file is 3.1GB. The total amount of used memory is still high since tasks are accumulating large chunks of data into the `TBufferMergerFile`s before calling `Write()` to ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3385:13,perform,performance,13,https://root.cern,https://github.com/root-project/root/pull/3385,3,"['Perform', 'perform']","['Performance', 'performance']"
Performance,"Here is the full stack trace:; ```; ===========================================================; #8 0x00007f12f0e152c7 in TObject::TestBit (this=0x0, f=33554432) at /home/amadio/build/root/include/TObject.h:159; #9 0x00007f12f0f5ab9d in TList::RecursiveRemove (this=0x1d3c3e0, obj=0x7f1291fb56a0) at /home/amadio/src/root/core/cont/src/TList.cxx:717; #10 0x00007f12f0f57139 in THashList::RecursiveRemove (this=0x1d504b0, obj=0x7f1291fb56a0) at /home/amadio/src/root/core/cont/src/THashList.cxx:286; #11 0x00007f12f0ee27e1 in TObject::~TObject (this=0x7f1291fb56a0, __in_chrg=<optimized out>) at /home/amadio/src/root/core/base/src/TObject.cxx:88; #12 0x00007f12f0e7e6e8 in TNamed::~TNamed (this=0x7f1291fb56a0, __in_chrg=<optimized out>) at /home/amadio/build/root/include/TNamed.h:41; #13 0x00007f12efed42dd in TH1::~TH1 (this=0x7f1291fb56a0, __in_chrg=<optimized out>) at /home/amadio/src/root/hist/hist/src/TH1.cxx:575; #14 0x00007f12efef781d in TH1F::~TH1F (this=0x7f1291fb56a0, __in_chrg=<optimized out>) at /home/amadio/src/root/hist/hist/src/TH1.cxx:9192; #15 0x000000000040594d in test(int) (); ===========================================================; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/719#issuecomment-312199696:576,optimiz,optimized,576,https://root.cern,https://github.com/root-project/root/pull/719#issuecomment-312199696,4,['optimiz'],['optimized']
Performance,"Here it tells us that it loads the default modulemap of libcxx:; ```; '/usr/include/module.modulemap' does not exist. Mounting '/scratch/build/etc/cling/libc.modulemap' as '/usr/include/module.modulemap'; Loading '/products/clang/v14_0_6c/Linux64bit+3.10-2.17/bin/../include/c++/v1/module.modulemap'; modulemap.overlay.yaml; {; 'version': 0,; 'roots': [; { 'name': '/usr/include', 'type': 'directory',; 'contents': [; { 'name': 'libc.modulemap', 'type': 'file',; 'external-contents': '/scratch/build/etc/cling/libc.modulemap'; }; ]; }]; }; ]; }; ```. I will debug why this fails for 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1407338672:25,load,loads,25,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1407338672,2,"['Load', 'load']","['Loading', 'loads']"
Performance,"Here or in the RDataFrame section: support for RNTuple chains, improved multi-threaded work scheduling",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15630#issuecomment-2129039812:72,multi-thread,multi-threaded,72,https://root.cern,https://github.com/root-project/root/pull/15630#issuecomment-2129039812,1,['multi-thread'],['multi-threaded']
Performance,"Here the stack trace of the crash in the reproducer mentioned in the initial post:; ```; #0 0x00007ffff5efbb38 in ROOT::delete_RooAbsBinning (p=0x555557689430); at /home/rembserj/spaces/master/root/src/build/roofit/roofitcore/G__RooFitCore.cxx:18025; #1 0x00007ffff7841c2f in TBufferFile::ReadFastArray (this=0x7fffffffdd60, start=<optimized out>, cl=0x555556e2c360, ; n=<optimized out>, isPreAlloc=<optimized out>, streamer=<optimized out>, onFileClass=0x0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:1659; #2 0x00007ffff7a84d9b in TStreamerInfo::ReadBuffer<char**> (this=0x55555690b950, b=..., arr=@0x7fffffffa4d0: 0x555557689150, ; compinfo=compinfo@entry=0x5555576894f8, first=first@entry=0, last=last@entry=1, narr=1, eoffset=0, arrayMode=3); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1081; #3 0x00007ffff7941d82 in TStreamerInfoActions::VectorLooper::GenericRead (buf=..., start=<optimized out>, end=0x555557689448, ; loopconfig=<optimized out>, config=0x5555576894e0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1878; #4 0x00007ffff783ee54 in TStreamerInfoActions::TConfiguredAction::operator() (loopconf=0x555557687050, ; end_collection=0x555557689448, start_collection=0x555557689420, buffer=..., this=0x5555576894b0); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:131; #5 TBufferFile::ApplySequence (this=0x7fffffffdd60, sequence=..., start_collection=0x555557689420, end_collection=0x555557689448); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3643; #6 0x00007ffff79667b1 in TStreamerInfoActions::ReadSTLMemberWiseSameClass (buf=..., addr=<optimized out>, ; conf=conf@entry=0x5555573030b0, vers=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1152; #7 0x00007ffff79669dd in TStreamerInfoActions::ReadSTL<&TStreamerInfoActions::ReadSTLMemberWiseSameClass, &TStreamerInfo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1084517200:332,optimiz,optimized,332,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1084517200,4,['optimiz'],['optimized']
Performance,"Here you can find reports about performance of new zlib: https://indico.cern.ch/event/658075/; New zlib is showing ~3 ~4 times faster in case of ""write"" operations for 109 and 106 compression settings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/956:32,perform,performance,32,https://root.cern,https://github.com/root-project/root/pull/956,1,['perform'],['performance']
Performance,"Here's an explanation that at least satisfies me: I added a `module->dump();` to `IncrementalJIT::addModule()` so that I can see what code is handed over to LLVM when just starting `./bin/root -q -l`. My understanding is that this comes from the dicts that are loaded on startup. Looking for `GetPoolSize`, here's the relevant part of the LLVM IR:; ```llvm; ; Function Attrs: noinline uwtable; define i32 @_ZNK4ROOT8Internal9TExecutor11GetPoolSizeEv(%""class.ROOT::Internal::TExecutor""*) #0 align 2 {; ; contains calls to; %seq = call i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""* %9); %thread = call i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""* %13); %process = call i32 @_ZNK4ROOT16TProcessExecutor11GetPoolSizeEv(%""class.ROOT::TProcessExecutor""* %17); }. ; Function Attrs: noinline nounwind uwtable; define linkonce_odr i32 @_ZNK4ROOT19TSequentialExecutor11GetPoolSizeEv(%""class.ROOT::TSequentialExecutor""*) #1 comdat align 2 {; ; ...; }. declare i32 @_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv(%""class.ROOT::TThreadExecutor""*) #2; ```. So the dict contains the definition of `Executor::GetPoolSize()`, which is not `inline`, and references `TThreadExecutor::GetPoolSize()` defined in `libImt.so`, but obviously not in the dict. This symbol remains unresolved during JIT, leading to the error message we're seeing. Notice that `TSequentialExecutor::GetPoolSize()` is `linkonce_odr` due to being `inline`. When adding the `inline` keyword to `TExecutor::GetPoolSize()` (thanks Philippe for the less intrusive proposal), all these functions disappear from the loaded `llvm::Module` because unused `linkonce_odr` are dropped (recursively) before passing to JIT. So in essence I think this is not about symbols not being exported or inlined by the compiler, but what we need is the semantics of `inline` that the function can be dropped from the `llvm::Module`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7033#issuecomment-760022478:261,load,loaded,261,https://root.cern,https://github.com/root-project/root/pull/7033#issuecomment-760022478,2,['load'],['loaded']
Performance,"Here, HistFactory is streamlined a bit. The models are restructured from this:; [HFTest4_old.pdf](https://github.com/root-project/root/files/6466419/HFTest4_old.pdf). To this:; [HFTest4.pdf](https://github.com/root-project/root/files/6466420/HFTest4.pdf). The main difference is that first, all binned parts of the calculation are executed (in batches), and then all scale factors are applied to the fully interpolated binned distributions. This reduces the number of function calls and allows for non-uniform binning (ROOT-4958), since the bin width correction is not applied as the last step, but during the binned calculations. Further, prototypes of batch evaluations functions were added for all objects in HistFactory calculations. There are some possibilities for optimisations:; - [ ] ParamHistFunc::evaluateSpan always recalculates all indices; - [ ] RooBinIntegrator doesn't support multi-dimensional batch evaluations; - [ ] Auto-vectorisation should be checked, especially for performance-critical things like the piecewise interpolation; - [ ] Profiling with an example like in `testHistfactory` but with more bins should be done.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8167:989,perform,performance-critical,989,https://root.cern,https://github.com/root-project/root/pull/8167,1,['perform'],['performance-critical']
Performance,"Hi @Axel-Naumann , great! But here we are building the entire ROOT + cling with O3, something like an OPTIMIZED build - doesn't this potentially introduce changes in the results of the users?; I am not against it in principle, on the contrary, I encourage aggressive flags, but they may have a consequence, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1774#issuecomment-375288002:102,OPTIMIZ,OPTIMIZED,102,https://root.cern,https://github.com/root-project/root/pull/1774#issuecomment-375288002,1,['OPTIMIZ'],['OPTIMIZED']
Performance,"Hi @Axel-Naumann ,. > high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. Yes, I do understand that. However it would make sense to use ""fp-save"" flags for optimization for software that deals with numerics. One can assure that with gcc even at high optimization levels, but it looks a bit more complicated task for clang. > why fp exceptions are a topic for you. . In general I **always** turn the FP exceptions on for codes that deal with numerics either with or without ROOT. There is no other way to get reliable results. . In this particular case I was debugging an event display application. There is some math inside (e.g. to display tracking and calorimeter information) and that is important to be sure all the calculations are reasonable. . Best regards,; Andrii. Best regards,; Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713451376:27,optimiz,optimization,27,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713451376,4,['optimiz'],['optimization']
Performance,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. ; So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right?; If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,; Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713589532:476,optimiz,optimizer,476,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713589532,1,['optimiz'],['optimizer']
Performance,"Hi @Axel-Naumann - we discussed this again internally. . From our side, we're happy with whatever suits you best (it's not really our place to decide what the variable is called or how this is implemented). However it is at least conceivable that we might want to limit ROOT to less threads than provided by the queue, in which scenario we would need `ROOT_MAX_THREADS` (or whatever) anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9805#issuecomment-1033712287:312,queue,queue,312,https://root.cern,https://github.com/root-project/root/issues/9805#issuecomment-1033712287,1,['queue'],['queue']
Performance,"Hi @MarkusFrankATcernch ,. I am sorry you experienced this issue.; We know that importing ROOT using LCG releases, perhaps on lxplus nodes can be slow. For this reason, we implemented a first pack of optimisations in PyROOT for the ROOT release 6.30. Unfortunately, this is not available yet in any LCG stack.; Is it easy for you to perform the same measurement with a dev3 lcg stack? That would allow you to use ROOT master and benefit from the latest optimisations.; I know this might not be a solution to the problem you report, but it might be a start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14223#issuecomment-1858259151:333,perform,perform,333,https://root.cern,https://github.com/root-project/root/issues/14223#issuecomment-1858259151,1,['perform'],['perform']
Performance,"Hi @MohammadMohammadidoust! Looking at the stack trace, it doesn't look like it's a bug in ROOT because the stack trace shows `init_theory_modules () at init_theory.f:13` as the last call, and then something that is optimized out. I think this is rather an xFitter issue. For these kind of problems with ROOT user code, you can ask in the [ROOT forum](https://root.cern.ch/forum), but please remember to provide complete instructions and the files necessary to reproduce your issue. See you over there maybe! You can also try to engage with the xFitter community directly. For now, I will close this issue here because it doesn't look like this is a bug in ROOT. If you are convinced at some point that the problem is really a bug in ROOT, feel free to reopen or to create a new issue!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9179#issuecomment-950767959:216,optimiz,optimized,216,https://root.cern,https://github.com/root-project/root/issues/9179#issuecomment-950767959,1,['optimiz'],['optimized']
Performance,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6676#issuecomment-937759611:88,multi-thread,multi-threading,88,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-937759611,3,"['multi-thread', 'perform']","['multi-thread', 'multi-threading', 'performance']"
Performance,"Hi @ShamrockLee , thank you for opening this, the request makes absolute sense, but this might be a bit complicated for multi-thread Snapshots, where we need to write to the file from multiple threads and to do so we have to wrap the TFile in a `unique_ptr` and pass it to `TBufferMerger` (which would then close the file when it's done..). Can you elaborate on your usecase a bit more please? Why do you have the file where Snapshot writes already open, and why is it an annoyance to reopen it after Snapshot is done? Are you writing to the TDirectory before you pass it to Snapshot, or do you have it open in read mode?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9225#issuecomment-957961345:120,multi-thread,multi-thread,120,https://root.cern,https://github.com/root-project/root/issues/9225#issuecomment-957961345,1,['multi-thread'],['multi-thread']
Performance,"Hi @VanyaBelyaev ,; I ran your reproducer with LCG97apython3(ROOT 6.20/06) and LCG98python3(ROOT 6.22/00).; With the latter it seems that the call to `dill.dumps` is executed but I get a different error with a long stacktrace, I report the main parts:; ```; ...; input_line_38:16:29: error: allocating an object of abstract class type 'TInterpreter'; *ret = new (arena) TInterpreter[nary];; ^; Error in <TClingCallFunc::make_ctor_wrapper>: Failed to compile; ...; Error in <TClingCallFunc::ExecDefaultConstructor>: Called with no wrapper, not implemented!; Error in <TClingClassInfo::New()>: Call of default constructor failed to return an object for class: TInterpreter; Error in <TClass::New>: cannot create object of class TInterpreter; Error in <TBufferFile::ReadObject>: could not create object of class TInterpreter; TBufferFile::WriteObjectAny:0: RuntimeWarning: since TROOT has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it. <class cppyy.gbl.TH1D at 0x560bc237aa20>. Error in atexit._run_exitfuncs:; Traceback (most recent call last):; File ""/home/vpadulan/Programs/rootproject/rootinstall/v6-22-00-patches/lib/ROOT/__init__.py"", line 119, in cleanup; backend.gROOT.EndOfProcessCleanups(); ReferenceError: attempt to access a null-pointer; ```. The line `<class cppyy.gbl.TH1D at 0x560bc237aa20>` is there because I added a print to your reproducer just to check that `dill.loads` is executed. Actually this is the simplest command to reproduce the same stacktrace:. ```; python -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; ```. So it's possible that something in the new pyroot (default since 6.22) fixes the `dill` issue but triggers this other error.; @etejedor any thoughts?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6370#issuecomment-696687077:1538,load,loads,1538,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-696687077,2,['load'],['loads']
Performance,"Hi @VanyaBelyaev,. I confirm the following simple commands both work with ROOT 6.22/08 and ROOT master; ```; $ python2 -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; <class cppyy.gbl.TH1D at 0x564a995e04e0>; $ python3 -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; <class cppyy.gbl.TH1D at 0x559369cdb3a0>; ```. They should be similar to your original reproducer, can you confirm this is fixed for you as well now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6370#issuecomment-819457468:165,load,loads,165,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-819457468,2,['load'],['loads']
Performance,"Hi @bellenot , i had forked the roottest repo before the previous build was performed. Is there anything additional i have to do to connect it to the PR ? Thanks for your help !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7766#issuecomment-815510633:76,perform,performed,76,https://root.cern,https://github.com/root-project/root/pull/7766#issuecomment-815510633,1,['perform'],['performed']
Performance,"Hi @breitwieserCern ,; the functionality now looks good. Could you add a test in roottest about the new functionality?; This one should:; - Generate a dictionary with a selection xml; - Have a macro that loads it and checks that the custom streamer works fine; In order to achieve that, you can have a look to https://github.com/root-project/roottest/blob/master/root/meta/genreflex/CMakeLists.txt . Here you find the instructions about how to run tests: https://root.cern.ch/run-tests. In your case the CMake section could be something like:; ```. ROOTTEST_GENERATE_REFLEX_DICTIONARY(customStreamer customStreamer.h SELECTION customStreamer_selection.xml). ROOTTEST_ADD_TEST(customStreamer; MACRO customStreamer.C; OUTREF customStreamer.ref; DEPENDS ${GENERATE_REFLEX_TEST}); ```; This will generate the dictionary from *customStreamer.h* and *customStreamer_selection.xml*. The macro *customStreamer.C* will be then executed and you can check there that your streamer does what is supposed to do (print something? your call :) ). The output will be compared to customStreamer.ref . You can start from a simplified version of the actual classes you are working with.; Do not hesitate to contact me privately if you need more info!. Cheers,; D",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/864#issuecomment-325595999:204,load,loads,204,https://root.cern,https://github.com/root-project/root/pull/864#issuecomment-325595999,1,['load'],['loads']
Performance,"Hi @ccarels, thanks for your contribution!. Unfortunately we have to reject it for the following reasons:. * This would change ROOT in a way that fundamental classes like `TGraph` are not forward compatible anymore (old versions of ROOT can't read a `TGraph` written with a newer version); * That TGraphs share data when copied is quite a drastic change that would surely disturb users; * There is already a way to change the data in a TGraph as pointed out by Axel in the previous comment; * If you want to avoid TGraph copies in your user code, please fix this on your end. That being said, feel free to implement the move constructor for TGraph and friends, if it is not already implemented (as suggested by @Axel-Naumann )! That could be useful to avoid copies, without breaking compatibility!. If you need any advice or have suggestions on how to optimize the ROOT code, please continue to engage with us on GitHub, or the [ROOT forum](https://root-forum.cern.ch/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9610#issuecomment-1807127997:852,optimiz,optimize,852,https://root.cern,https://github.com/root-project/root/pull/9610#issuecomment-1807127997,1,['optimiz'],['optimize']
Performance,"Hi @couet ,. the reproducer is the same as in #6447 (Which is closed now, I know). But this time the crash happens later, in the destructor.; ```; ./pad4.exe ; Error in <TList::Clear>: A list is accessing an object (0x2b7f740) already deleted (list name = TList). *** Break *** segmentation violation. ===========================================================; There was a crash (kSigSegmentationViolation).; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007f9b7558746c in __libc_waitpid (pid=1463649, stat_loc=stat_loc; entry=0x7ffce938d760, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007f9b75504f62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f9b78f9a4bc in TUnixSystem::Exec (this=0x1e1e960, shellcmd=0x2b7f4b0 ""X/etc/gdb-backtrace.sh 1463630 1>&2"") at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:2120; #3 0x00007f9b78f9ad16 in TUnixSystem::StackTrace (this=0x1e1e960) at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:2411; #4 0x00007f9b78f9e5f4 in TUnixSystem::DispatchSignals (this=0x1e1e960, sig=kSigSegmentationViolation) at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:3649; #5 0x00007f9b78f96794 in SigHandler (sig=kSigSegmentationViolation) at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:407; #6 0x00007f9b78f9e4fc in sighandler (sig=11) at Projects/ROOT/root/core/unix/src/TUnixSystem.cxx:3620; #7 <signal handler called>; #8 0x0000000000000000 in ?? (); #9 0x00007f9b77f28ed4 in TCanvas::Close (this=0x1e9efd0, option=0x7f9b77f92e51 """") at Projects/ROOT/root/graf2d/gpad/src/TCanvas.cxx:782; #10 0x00007f9b77f28bc5 in TCanvas::Destructor (this=0x1e9efd0) at Projects/ROOT/root/graf2d/gpad/src/TCanvas.cxx:697; #11 0x00007f9b77f28969 in TCanvas::~TCanvas (this=0x1e9efd0, __in_chrg=<optimized out>) at Projects/ROOT/root/graf2d/gpad/src/TCanvas.cxx:668; #12 0x00007f9b77",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6537#issuecomment-702879711:788,optimiz,optimized,788,https://root.cern,https://github.com/root-project/root/pull/6537#issuecomment-702879711,1,['optimiz'],['optimized']
Performance,"Hi @dcervenkov , I believe you are counting the time spent just-in-time compiling (""jitting"") the cuts as if it was part of the event loop: RDataFrame, when strings are used as filters or defines, has a non-negligible start-up time because it's actually compiling those strings into C++ code. With ROOT master branch (and in v6.24, coming soon), you can retrieve the jitting time and the event loop time separately by adding the following line at the beginning of `main`:. ```cpp; auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);; ```. Here is a version without jitting that should run faster than the python version (make sure to add `-O2` to the compilation flags though -- C++ code needs those sweet compiler optimizations):. ```cpp; #include <iostream>; #include <vector>. #include ""ROOT/RDataFrame.hxx"". int which_time_bin(const double time) {; const double bin_edges[] = {0, 0.00025 * 1, 0.00025 * 2,; 0.00025 * 3, 0.00025 * 4, 0.00025 * 5,; 0.00025 * 6, 0.00025 * 7, 0.00025 * 8};; int bin = -1;; for (int i = 0; i < 9; i++) {; if (time < bin_edges[i]); return bin;; bin++;; }; return bin;; }. int main(int argc, char *argv[]) {; ROOT::RDataFrame df_raw(""DalitzEventList"", argv[1]);; auto df = df_raw.Define(""time_bin"", which_time_bin, {""D_decayTime""});. const int time_bins = 8;; ROOT::RDF::RResultPtr<ULong64_t> counts[time_bins];; for (int time_bin = 0; time_bin < time_bins; time_bin++) {; counts[time_bin] = df.Filter([=](int tb) { return tb == time_bin; }, {""time_bin""}).Count();; }. for (int time_bin = 0; time_bin < time_bins; time_bin++) {; std::cout << *counts[time_bin] << std::endl;; }. return 0;; }; ```. For larger datasets, with `RDataFrame` you can also easily run on multiple threads by adding `ROOT::EnableImplicitMT()` which will provide further speed-ups. For these few datapoints it won't really be beneficial.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7273#issuecomment-784408304:794,optimiz,optimizations,794,https://root.cern,https://github.com/root-project/root/issues/7273#issuecomment-784408304,1,['optimiz'],['optimizations']
Performance,"Hi @dpiparo ,. 1. I tested MainEvent.cxx with 500~50000 events on my desktop running Ubuntu 14.04. I repeated 10 runs for each test case and ~3% is average performance drop. I did not have a chance to run CMSSW skimming job. I am actually not familiar with CMSSW yet. 2. What you were saying is correct. Since my case only needs one thread to invoke TThreadExecutor, using tbb task_group run interface likely spends too much time on scheduler's receive_and_steal function (from the profiling results).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-330564042:156,perform,performance,156,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-330564042,1,['perform'],['performance']
Performance,"Hi @eguiraud and @hageboeck, thanks a lot for your reviews!. I implemented almost everything you requested in the new fixup commits, except for two things:. 1. https://github.com/root-project/root/pull/8769#issuecomment-891036930: I didn't generalize TRangeDynCast and TRangeStaticCast. They are tied to TCollection and fulfill a different purpose because of that. They are also part of `ROOT::Internal`, while my new functions are supposed to be also used by the RooFit users. I would suggest we leave them as they are, but if you think the new `static_range_cast` and `dynamic_range_cast` are useful for everyone we can move the new file if you want. But where?. 2. https://github.com/root-project/root/pull/8769#discussion_r680892053: I didn't add the `assert(dynamic_cast)` to the `static_range_cast` because the performance penalty it introduces in debug mode is not probably not expected by non-RooFit developers. 3. https://github.com/root-project/root/pull/8769#issuecomment-890998817: I stuck with the detection of `dynamic_cast` vs. `static_cast` at compile time to also support non-polymorphic types. Let me know where I still need to follow up, in particular concerning the more general location of the `RangeCast.h` file! Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8769#issuecomment-891126379:817,perform,performance,817,https://root.cern,https://github.com/root-project/root/pull/8769#issuecomment-891126379,1,['perform'],['performance']
Performance,"Hi @etejedor,; > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory?. TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier?. Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1219#issuecomment-338629908:610,queue,queue,610,https://root.cern,https://github.com/root-project/root/pull/1219#issuecomment-338629908,1,['queue'],['queue']
Performance,"Hi @goi42, thanks for opening the issue and providing the code. I could not reproduce your compilation error word-by-work in my ROOT 6.22 environment, but indeed I got an error as well. In your code, I noticed you run:; ```Python; r.gROOT.ProcessLine("".x RooSDSCBShape.cxx""); ```; This [website about cling](https://root.cern/cling/) says that `.x` loads the file and then runs the function called `RooSDSCBShape` if it exists. I think it's better to use `.L`. That would be the constructor in this case, which you don't want to run. For me, I also get an error that functions are defined already when I load the `cxx` file. So writing this line instead works for me:; ```Python; r.gROOT.ProcessLine("".L RooSDSCBShape.h""); ```. Could you please let me know if this also works for you?. On a sidenote: your custom class `SDSCBShape` is just a crystal ball with a single non-Gaussian tail on the right, no? We are working to shipping such a release also with the next ROOT version (see https://github.com/root-project/root/issues/7258), so you might not have to go through this custom-classes hassle anymore in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7249#issuecomment-782156378:349,load,loads,349,https://root.cern,https://github.com/root-project/root/issues/7249#issuecomment-782156378,2,['load'],"['load', 'loads']"
Performance,"Hi @guitargeek ,. Thanks a lot for checking this. I wonder what is the implication of this inconsistency in NLL values though. Does it mean a multi-range fit using RooFit is fundamentally flawed and should not be used?. In our use case, we are trying to obtain the values of the parameters in our background models by fitting to the data sideband. So we are more concerned about the best fit values of the variables in the workspace than the value of the NLL itself. Though from our validation plots, our background model shape obtained from the multi-range fit seems to agree well with the data. My question is then what is the right thing to do if we want to perform a multi-range fit using RooFit? This could potentially have a big impact on the community since a lot of analysis codes/frameworks rely on this multi-range fit method.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11447#issuecomment-1260694385:661,perform,perform,661,https://root.cern,https://github.com/root-project/root/issues/11447#issuecomment-1260694385,1,['perform'],['perform']
Performance,"Hi @hageboeck and @manolismih, thanks for you comments! Sorry for the late answer, it took me some time to come up with a better solution. Making the `RooAbsOptTestStatistic` aware of the batchmode is the biggest challenge in this PR, as you have noticed.; Like Stephan suggested, I have tried no to pass as much information as possible in the constructors to hopefully avoid some of the new member variables I introduced here. In part I have succeeded, because now the cache optimization will now always be skipped in the construction in batch mode is enabled. So I don't need a `_originallyCacheOptimized` flag to remember if the optimization has to be reverted after the construction which was not the nicest hack anyway. Still, I could not do without a new `_batchMode` flag in `RooAbsTestStatistic` because the cache optimization can also happen after the construction via `RooAbsTestStatistic::constOptimizeTestStatistic`. Adding a batch mode flag to the constructor also required me to change all the constructor signatures of `RooAbsTestStatistic` and derived classes. I took that opportunity to revisit how the configuration parameters are passed such that if the future it will be much easier to add a new parameter. This has been a significant refactor, so I made a new PR with these changes excluding the `RunContextTracker` which we could introduce in a second step:. https://github.com/root-project/root/pull/7616",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7344#issuecomment-802953807:470,cache,cache,470,https://root.cern,https://github.com/root-project/root/pull/7344#issuecomment-802953807,5,"['cache', 'optimiz']","['cache', 'optimization']"
Performance,"Hi @hageboeck, thanks for opening this issue! I investigated the first item (vectorization of normalization in RooAbsPdf), and according to the compiler (`-fopt-info-vec-optimized`) it is already vectorized:; ```; roofit/roofitcore/src/RooAbsPdf.cxx:375:26: optimized: loop vectorized using 16 byte vectors; ```; Am I missing something, or can we consider this part of the issue to be solved?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7032#issuecomment-773916639:170,optimiz,optimized,170,https://root.cern,https://github.com/root-project/root/issues/7032#issuecomment-773916639,2,['optimiz'],['optimized']
Performance,"Hi @pcanal ,. > How is this uses in a multi-thread enviroment. That is used in a multi-thread program. >not a description of what is being run. Yes, that is a kind of ""collaboration"" code for event display. It is not very large but not very small.; So far I haven't managed to mage a standalone reproducer, but as far as I understand there should be a general approach in ROOT how to deal with static variables within a class, so I've expected this will be quite an easy case for the ROOT experts even w/o a reproducer code. Best regards,; Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6510#issuecomment-701609586:38,multi-thread,multi-thread,38,https://root.cern,https://github.com/root-project/root/issues/6510#issuecomment-701609586,2,['multi-thread'],['multi-thread']
Performance,"Hi @pcanal ,; I usually run startup time and hsimple for performance measurements. If you think that disabling rdict.pcm is better for modules, I can create an another PR for it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2396#issuecomment-435334808:57,perform,performance,57,https://root.cern,https://github.com/root-project/root/pull/2396#issuecomment-435334808,1,['perform'],['performance']
Performance,"Hi @pcanal, our AddressSanitizer build reports a `heap-buffer-overflow`: https://lcgapp-services.cern.ch/root-jenkins/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastCompletedBuild/testReport/projectroot.roottest.root.tree/stl/roottest_root_tree_stl_make/. I bisected this to commit 2fa93de2a51e248a56418d8c6488b043746d0925; the error message says ""0x60700022d458 is located 8 bytes to the left of 80-byte region"". However, the stack trace points to the loop immediately after the added condition to perform the binary search. Could you take a look, please? What does `TMath::BinarySearch` return in case the element is not found?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12650#issuecomment-1517450219:508,perform,perform,508,https://root.cern,https://github.com/root-project/root/pull/12650#issuecomment-1517450219,1,['perform'],['perform']
Performance,"Hi @pcanal,. The input is a list of 133 files in the format root://x509up_u<userid>@xrootd.grid.surfsara.nl//pnfs/grid.sara.nl/data/lhcb/LHCb_USER/lhcb/user/v/username/2021_08/520789/520789382/x24mu__wmomsc_a.root. The limit is in the dCache storage system (xrootd.grid.surfsara.nl), not on the client side. This limit is there for a reason: it prevents the storage pools from being overloaded with transfers and crashing. When hadd tries to open all files at once, it tries to read more files concurrently than the limit per dCache storage pool allows. The first files are served, but the rest of the transfers are queued. This means, that they remain open but zero bytes are served, until some of the other transfers finish. But hadd never finishes those because it insists on reading from all files at the same time. So it gets stuck into a deadlock situation. If hadd would detect this situation (I'm getting data for some files but zero bytes for other files), it would make sense to stop reading all files concurrently, but instead continue reading from all files that it can, close those files, and then receive data for the other files. If hadd could do that, such a deadlock would be prevented, while performance would still be the maximum available. Cheers,; Onno",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11276#issuecomment-1240361937:494,concurren,concurrently,494,https://root.cern,https://github.com/root-project/root/issues/11276#issuecomment-1240361937,4,"['concurren', 'perform', 'queue']","['concurrently', 'performance', 'queued']"
Performance,"Hi @vgvassilev @Axel-Naumann,. I overlooked something. It's *only* loading the macro, not running it actually. I get:; 30s for compiling first time + loading.; 10 - 15s for loading the existing `.so`, e.g.; ```; /usr/bin/time root -b -q -e '.L ~tnanut/public/Stephan/RooThreshold.cpp+O' >/dev/null; 1.62user 3.11system 0:10.22elapsed 46%CPU (0avgtext+0avgdata 268244maxresident)k; ```. From a user perspective, that will feel slow. As a user I would expect this to complete in ~ 2s. I know that this is asking a lot, and it's certainly better than the 2 min that @malatara reported initally, but if you see any way to squeeze a bit more out of it, I would recommend that. I leave it to you three if you are happy to close this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7774#issuecomment-945587174:67,load,loading,67,https://root.cern,https://github.com/root-project/root/issues/7774#issuecomment-945587174,3,['load'],['loading']
Performance,"Hi @xkzl, . I'm sorry for a very late reply on this, but I would like to ask if you found the issue already? . Regarding increased verbosity, you could do something similar to what is described here:https://root-forum.cern.ch/t/rdataframes-caching-and-performance-compared-to-pandas/47450/4?u=mczurylo. Cheers, ; Marta",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13656#issuecomment-1859886275:252,perform,performance-compared-to-pandas,252,https://root.cern,https://github.com/root-project/root/issues/13656#issuecomment-1859886275,1,['perform'],['performance-compared-to-pandas']
Performance,"Hi @yamaguchi1024 @vgvassilev , I have a last comment. We provide in the ROOT type system an endpoint to check if the enum is available, `TEnum::GetEnum(const char*)`. It can be used as; ```; TEnum::GetEnum(""ROOT::Detail::VecOps::TAdoptAllocator<double>::EAllocType""); ```; I don't know if it can be used inside these utils but it would have an advantage wrt to the current solution, namely the ability to avoid lookups in case the enum is present in the type-system (selected by the user). This would avoid memory consumption in case of autoparsing being triggered.; The PR is a nice improvement, I am discussiong a *possible* performance improvement on top of it!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1715#issuecomment-371736535:628,perform,performance,628,https://root.cern,https://github.com/root-project/root/pull/1715#issuecomment-371736535,1,['perform'],['performance']
Performance,"Hi Andreas,. `dyld[7935]: Library not loaded: @rpath/libRIO.so` says that (as expected), macOS tries to find the library through the rpath mechanism. That's supposed to work - but doesn't, for you. If you run `otool -l /Users/suter_a/Applications/root/root_exec/bin/rootcling`, what does the section `cmd LC_RPATH` show?. Where did you get ROOT from?. Cheers, Axel",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10062#issuecomment-1141999874:38,load,loaded,38,https://root.cern,https://github.com/root-project/root/issues/10062#issuecomment-1141999874,1,['load'],['loaded']
Performance,"Hi Axel,. I cloned root.git from GitHub and compiled from source with the following configuration:. cmake ../ -Dgminimal=1 -Dasimage=1 -Dmathmore=1 -Dminuit2=1 -Dxml=1 -Dopengl=1 -Dbuiltin_glew=1 -DCMAKE_INSTALL_PREFIX=$HOME/Applications/root/root_exec; There is NO LC_RPATH (see the attached otool output. Best,; Andreas . > On 31 May 2022, at 13:16, Axel Naumann ***@***.***> wrote:; > ; > ; > Hi Andreas,; > ; > dyld[7935]: Library not loaded: @rpath/libRIO.so says that (as expected), macOS tries to find the library through the rpath mechanism. That's supposed to work - but doesn't, for you. If you run otool -l /Users/suter_a/Applications/root/root_exec/bin/rootcling, what does the section cmd LC_RPATH show?; > ; > Where did you get ROOT from?; > ; > Cheers, Axel; > ; > —; > Reply to this email directly, view it on GitHub <https://github.com/root-project/root/issues/10062#issuecomment-1141999874>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AJRV4WFL5UYCLGDEGQLT4Q3VMXYHJANCNFSM5QDEKDCQ>.; > You are receiving this because you authored the thread.; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10062#issuecomment-1142017612:439,load,loaded,439,https://root.cern,https://github.com/root-project/root/issues/10062#issuecomment-1142017612,1,['load'],['loaded']
Performance,"Hi Danilo, yes indeed I was running ROOT 6.26.02. I just removed it, but compilation is still failing.; The warning is still shown too. I wonder if this might not be related just to an issue with a specific AppleClang version.. (I have the last one installed) I don't need a specific version of ROOT, but I just some specific modules (not enabled by default.). So, I tried to to install ROOT 6.31, first not working but due to a Net module issue. I removed ROOT 6.26.02 and the compilation is successful. Would you maybe consider adding a warning at the end of the cmake command if an existing ROOT is already loaded ? This might spare some times for other users in the future, maybe ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14337#issuecomment-1890415411:610,load,loaded,610,https://root.cern,https://github.com/root-project/root/issues/14337#issuecomment-1890415411,1,['load'],['loaded']
Performance,"Hi Enrico, thank you very much for taking a look. > 1. I guess the behavior of TTaskGroup should mimic what TThreadExecutor does, e.g. it should use the task arena if it exists, and it should construct one if it doesn't. What's the rationale for doing things independently of ROOT's task arena? Does this mean users might see more cores used than they expect in some cases?. I believe this change only removes an unnecessary restriction on when `TTaskGroup` can be used (i.e. after looking through the implementation, I don't think having IMT globally enabled is a precondition for the use of `TTaskGroup` and test benchmarks using this implementation seem to perform the same). > 2. Are you ok with silently do nothing if R__IMT is undefined? Would it be better to print a warning?. Thank you, yes, a warning would probably be better. > 3. Can we also have a way to disable RNTuple's multi-threading even if implicit MT is enabled, like TTree has?. Yes, this makes sense to me. It will probably need a big warning in the docs about when to call it and/or some graceful shutdown logic. Even if this PR doesn't make it that method might be valuable by itself. > the rationale behind my question is that we should not have N different multi-threading behaviors for N components. I completely agree, it is very nice to be able to say ""if you want multithreading, call `EnableImplicitMT` and you're done"". > and we should play well with the TBB settings of frameworks such as CMSSW, but it's not clear to me how we do that now, actually. For the RNTuple NanoAOD project, we were hoping to plug in the CMSSW tbb instance with `RPageStorage::SetTaskScheduler` (for both page sink and source): https://github.com/root-project/root/blob/a9c61d56afd70b74425779f330a4ec2cc581bb0b/tree/ntuple/v7/inc/ROOT/RPageStorage.hxx#L136. by implementing a derived `RTaskScheduler` on the CMSSW side so they have control over task isolation etc. ; https://github.com/root-project/root/blob/4118c0cb6db03998ae77f56f57cc372ac",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8334#issuecomment-854977563:660,perform,perform,660,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-854977563,2,"['multi-thread', 'perform']","['multi-threading', 'perform']"
Performance,"Hi Ivan, thank you, I have some doubts about the changes:. - I don't think calling GetEntries more than once is actually expensive: the result is cached after the first call; - the error message was listing the entry range in the usual start-inclusive/end-exclusive way (same as what happens in typical for loops), I'm not sure the patch is less ambiguous. Maybe we can say instead ""Start entry (X) must be lower than the available entries (Y). Ignoring entry range."". Minor other thing, the commit message should use `[treereader]` insteadof `[DF]`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10705#issuecomment-1148383295:146,cache,cached,146,https://root.cern,https://github.com/root-project/root/pull/10705#issuecomment-1148383295,1,['cache'],['cached']
Performance,"Hi Jonas (@guitargeek) and Lorenzo (@lmoneta) ,. I am opening a draft pull request with the bulk of the code for the morphing class. The morphing class consist of the RooLagrangianMorphFunc which builds the necessary morphing function and is assisted by a lightweight config class which allows to configure the morphfunc in various ways. ; ; The code is WIP and there are more updates expected in subsequent PRs. The main discussion is the way the objects are handled by the config and the morphfunc and support for factory style syntax. The code for the tutorials and the optimizer for the choice of input templates is also postponed to a subsequent PR as this is tied to the previous issue. There are some more issues regarding having boost high precision which can be a separate PR.; ; Feel free to comment on this version to get the review started !; ; Cheers,; Rahul and Carsten (@cburgard)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7766:573,optimiz,optimizer,573,https://root.cern,https://github.com/root-project/root/pull/7766,1,['optimiz'],['optimizer']
Performance,"Hi Olivier,. I had a similar situation with a Fermilab server and requested computing support to install missing libraries. I do not have a CERN account so can't open a ticket for lxplus9, but it makes sense to install the libraries there to make the machine usable with ROOT. Andrei. ________________________________________; From: Olivier Couet ***@***.***>; Sent: Tuesday, August 15, 2023 9:27 AM; To: root-project/root; Cc: Andrei Gaponenko; Author; Subject: Re: [root-project/root] clip edit in GL viewer is still broken (Issue #13418). Gl does not seem properly installed there:. $ glxgears; libGL error: No matching fbConfigs or visuals found; libGL error: failed to load driver: swrast; Error: glXCreateContext failed. —; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_root-2Dproject_root_issues_13418-23issuecomment-2D1679025586&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=ejeOXHRM6NnnTa4TA470cGD4wj63fFxBITffmOQ02lc&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_AAXVCGSO4HWIKORE7ZRV24LXVOBONANCNFSM6AAAAAA3I665NU&d=DwMCaQ&c=gRgGjJ3BkIsb5y6s49QqsA&r=O47fc5vzDTR2V_gla4Ub0Q&m=pYI_UukDspkvToM08be43rqW1Ini373CaTW7YzYzXvzaAbgFN1hfOxDILOY5LkIt&s=Qa0IvEvjeyrinJUtkFkmyfcNPybfsSDQQI7cpx17nBw&e=>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13418#issuecomment-1679169141:674,load,load,674,https://root.cern,https://github.com/root-project/root/issues/13418#issuecomment-1679169141,1,['load'],['load']
Performance,"Hi Philippe, ; The PR shows the settings that we need for the BioDynaMo project (agent-based simulation framework).; We JIT a few functors at the beginning of the simulation and call them a couple hundred million times during simulation. The intent of this PR is to start a discussion. Fons dislikes the idea of using a patched ROOT version. Until https://sft.its.cern.ch/jira/browse/ROOT-10707 ships, would it be possible to add an e.g. rootrc parameter to influence the optimization level and pointer checks, or do you recommend waiting for ROOT-10707?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6038#issuecomment-661915249:472,optimiz,optimization,472,https://root.cern,https://github.com/root-project/root/pull/6038#issuecomment-661915249,1,['optimiz'],['optimization']
Performance,"Hi Philippe,. I think this technique is useful in the following cases (both assuming the file is larger than the TTC):; 1. We have a job reading the file's events out-of-order (i.e., randomly selecting events) and reading many events. This occurs when we have two open files and have to match events in file A with events in file B (and B's event order is very different than A).; 2. Cases where there is high latency and the events are read more than once. (Forgot to mention - have unit tests ready to be posted once this is merged.). Brian",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/146#issuecomment-250288035:410,latency,latency,410,https://root.cern,https://github.com/root-project/root/pull/146#issuecomment-250288035,1,['latency'],['latency']
Performance,"Hi Philippe,; ; > it might be impossible to avoid synonyms that are semantically distincts ... a good example is two free standings (not attached to any directory) histograms that happens to have the same name in two distinct and independent part of the code (e.g. two CMSSW modules). Good point. I admit that did not really think to this case. > The other major problem is that it unnecessary tie (via that global mutex) all the 'parallel' histogram, this means that the overall scalability is inherently decreased. > Rather than a completely global state, wouldn't it make sense to have a wrapper object (for example TThreadedObject) be the holder of the lock and list for a single set of related histogram.; > This would both reduce contention and guarantees that the histograms are really related. I agree on this and TThreadedObject could be the place where to control this. The drawback is that we would then not have a solution outside TThreadedObject, i.e. we will have to find a way to force the use of TThreadedObject in MT cases. > A 3rd significant problem (but fixeable) is that the operation covered by the ReadWrite lock are not atomic (and/or trivial) and for the look of it could plausibly indirectly request the ROOT global lock and thus can lead to deadlocks (from some other code that hold the ROOT global locks and request the Write part of the ReadWrite lock). Not sure to understand, you mean FindObject?; I will have a closer look. > A 4th deficiency is that once activated for one histogram it seems to apply to all histogram. i.e. as far as can tell if you one parallel histograms and 10,000 single-thread histograms, filling the single-thread histogram still has to go through the multi-thread registration/mechanism. Ok, a solution 'per histogram' would also address this. Thanks for going deep into it,; Gerri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/902#issuecomment-325703398:480,scalab,scalability,480,https://root.cern,https://github.com/root-project/root/pull/902#issuecomment-325703398,2,"['multi-thread', 'scalab']","['multi-thread', 'scalability']"
Performance,"Hi Philippe,; for the release note, I would suggest the following summary:. + David Clark, ANL (SULI),\; + Peter van Gemmeren, ANL,\. +- To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced.; + This change will prevent additional reads from occurring when reading events out of sequence.; + By setting TTree::SetClusterPrefetch(), an entire clusters will be loaded into memory, rather than single baskets.; + By setting the MaxVirtualSize of the tree to a negative value, previous clusters will be retained; + (the absolute value of MaxVirtualSize indicates how many additional clusters will be kept in memory). Does that sound ok?; Peter",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1065#issuecomment-334220882:152,multi-thread,multi-threaded,152,https://root.cern,https://github.com/root-project/root/pull/1065#issuecomment-334220882,2,"['load', 'multi-thread']","['loaded', 'multi-threaded']"
Performance,"Hi Pratyush, . I am not sure what happened here, maybe @bellenot can help you here?; `22:02:36 fatal: could not read Username for 'https://github.com': Invalid argument; 22:02:36 SetCTestConfiguration:SourceDirectory:C:/build/workspace/root-pullrequests-build/root; 22:02:36 SetCTestConfiguration:BuildDirectory:C:/build/workspace/root-pullrequests-build/build; 22:02:36 Run dashboard with model Pullrequests; 22:02:36 Source directory: C:/build/workspace/root-pullrequests-build/root; 22:02:36 Build directory: C:/build/workspace/root-pullrequests-build/build; 22:02:36 Track: Pullrequests; 22:02:36 First perform the initial checkout: C:/Program Files/CMake/bin/cmake.exe -E chdir C:/build/workspace/root-pullrequests-build/root C:/Program Files/Git/cmd/git.exe checkout -f ; 22:02:36 Perform checkout in directory: C:/build/workspace/root-pullrequests-build; 22:02:36 Initial checkout failed!; 22:02:36 CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:803 (ctest_start):; 22:02:36 ctest_start unknown error. `",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3405#issuecomment-462249852:607,perform,perform,607,https://root.cern,https://github.com/root-project/root/pull/3405#issuecomment-462249852,2,"['Perform', 'perform']","['Perform', 'perform']"
Performance,"Hi Rod,. Well, I added a 'print' before and after 1244 in the current jobs - didn't check it it. So this looks like:; ; ```; ATH_MSG_INFO( ""processEvents: try to open file: "" << file );. std::unique_ptr< TFile > ifile( TFile::Open( file.c_str(), ""READ"" ) );. ATH_MSG_INFO( ""processEvents: called TFile Open "" );; ```. and in the log, one sees:. `H4lAnalRun2 INFO processEvents: try to open file: root://eosatlas.cern.ch:1094//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/25/31/DAOD_HIGG2D1.23315648._000001.pool.root.1. === stderr ===; [2020-12-16 13:29:01.003032 +0100][Debug ][Utility ] Unable to process user config file: [ERROR] OS Error: No such file or directory; [2020-12-16 13:29:01.018152 +0100][Debug ][PlugInMgr ] Initializing plug-in manager...; [2020-12-16 13:29:01.018254 +0100][Debug ][PlugInMgr ] No default plug-in, loading plug-in configs...; [2020-12-16 13:29:01.018302 +0100][Debug ][PlugInMgr ] Processing plug-in definitions in /etc/xrootd/client.plugins.d...; [2020-12-16 13:29:01.020375 +0100][Debug ][PlugInMgr ] Processing plug-in definitions in /alrb/.xrootd/client.plugins.d...; [2020-12-16 13:29:01.020433 +0100][Debug ][PlugInMgr ] Unable to process directory /alrb/.xrootd/client.plugins.d: [ERROR] OS Error: No such file or directory; [2020-12-16 13:29:02.298776 +0100][Dump ][Utility ] URL: root://eosatlas.cern.ch//eos/atlas/atlasdatadisk/rucio/mc16_13TeV/25/31/DAOD_HIGG2D1.23315648._000001.pool.root.1; `. So one sees the 'try to open file', then there is the TFile::Open, and nothing else. So I conclude that this is coming from the Open. see you, RD",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-746602567:829,load,loading,829,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-746602567,1,['load'],['loading']
Performance,"Hi Sandro, . I understand this. But , I presume the performance gain needed for the const method of TLorentzVector::operator(). Is this correct ? ; In this case we could leave the old implementation for the other case. Best. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/166#issuecomment-222988341:52,perform,performance,52,https://root.cern,https://github.com/root-project/root/pull/166#issuecomment-222988341,1,['perform'],['performance']
Performance,"Hi Stephan, thanks for taking a look!. Indeed, I assume that for RooArgSet there are much more of these pointer comparisons around. That's why I only cover RooDataSet here, motivated by this strange increase in memory that is observed then using the memory pool for RooDataSet. So far, I have not seen any problems arising from the memory pool for RooArgSet. Do you happen to know other locations where things are cached based on the RooDataSet?. I think I can fix the counter initialization problem by putting them in the .cxx sources of the class that uses the counter. About the multi-threading problem: it's a very good point! But making the counter a `std::atomic` should solve this, right?. Explaining this change in the release notes is also a good idea. I'll do that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8324#issuecomment-857660916:414,cache,cached,414,https://root.cern,https://github.com/root-project/root/pull/8324#issuecomment-857660916,2,"['cache', 'multi-thread']","['cached', 'multi-threading']"
Performance,"Hi Vassil,. > We cannot control what's in the static init of user libraries. They can; use interpreter services. This approach used to work, why locking is; necessary? Aren't we 'just' reading?. Other threads could be trying to write the symbol tables at the same time,; so we still need to lock them for reading. In your case your lookup enters a generator (HostLookupLazyFallbackGenerator),; so it will end up writing as well as reading. :). The right thing to do here is to refactor HostLookupLazyFallbackGenerator; to do its work in two steps:; Step 1: Identify libraries that could be loaded to provide the requested; symbols, and record their paths but do not load them yet. Instead you; should record a map of libraries to the symbols they provide. E.g. [ (; ""liba.so"", [ ""foo"", ""bar"" ] ), ( ""libb.so"", [ ""baz"" ] ) ]. For each; library/symbol-set pair you can install a custom MaterializationUnit using; JITDylib::define.; Step 2: In the custom MaterializationUnit's materialize function you'll; walk the map from before, do the library load, and then resolve the symbols. Since step 2 happens outside the session lock the idea is that it should; prevent the kind of deadlock that you're seeing. Unfortunately if you can reference JIT'd code from static initializers in; precompiled code then there's still a chance for similar failures. Consider; a precompiled ""libx.so"" containing a global ""x"" and a static constructor; that calls a JIT'd function ""f"" which uses the ""x"" from ""libx.so"" (a; circular reference). I believe this will result in starvation or deadlock; (depending on the number of threads involved). The failure path looks like; this:. 1. A lookup for ""x"" enters the generator, which discovers that ""libx.so""; provides ""x"" and creates a MaterializationUnit, MU, to load ""libx.so"" and; resolve ""x"".; 2.1 Outside the lock, MU dlopens ""libx.so""...; 2.2. dlopen runs the initializers for ""libx.so"" which triggers a lookup in; the JIT for ""f"".; 2.2.1. The lookup for ""f"" finds and runs",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1274280300:590,load,loaded,590,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1274280300,2,['load'],"['load', 'loaded']"
Performance,"Hi all. The implementation of this feature radically changed wrt ~1 month ago. How is the ""Event"" benchmark performing? How is the ""CMSSW candle"" performing?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1010#issuecomment-336989890:108,perform,performing,108,https://root.cern,https://github.com/root-project/root/pull/1010#issuecomment-336989890,2,['perform'],['performing']
Performance,"Hi please check here:; https://root-forum.cern.ch/t/6-24-00-does-not-complile-on-redhat-8-3/45161. details:. Hello,; I’m running into problems compiling root 6.24.00:. $ cmake -Dclad=OFF -DCMAKE_INSTALL_PREFIX=…/root_install …/root-6.24.00; $ cmake --build . – install -j8. …; [ 76%] Linking CXX static library …/…/…/…/lib/libclingInterpreter.a; [ 76%] Built target clingInterpreter; Scanning dependencies of target CLING; [ 76%] Built target CLING; Scanning dependencies of target LLVMRES; [ 76%] Copying LLVM resource and header files; [ 76%] Built target LLVMRES; (stucks…). $ cmake --build . --install; [ 0%] Built target AFTERIMAGE; [ 0%] Built target OPENUI5; [ 0%] Built target LZMA; [ 0%] Performing download step (download, verify and extract) for ‘VDT’; (stucks). seems that vdt uses network access, which I do not have (not mentioned in the docs).; I think I do not need it anyhow…. so again:; $ rm -rf *; $ cmake -Dclad=OFF -Dvdt=OFF -DCMAKE_INSTALL_PREFIX=…/root_install …/root-6.24.00; $ cmake --build . --install; …; [ 79%] Generating G__Thread.cxx, …/…/lib/Thread.pcm; [ 79%] Generating G__forward_listDict.cxx, …/…/lib/libforward_listDict.rootmap; [ 79%] Generating G__vectorDict.cxx, …/…/lib/libvectorDict.rootmap; In file included from input_line_7:21:; /srv/ussapc/home/ussapc/sw/root_build/include/ROOT/TReentrantRWLock.hxx:26:10: fatal error: ‘tbb/enumerable_thread_specific.h’ file not found; #include “tbb/enumerable_thread_specific.h”; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; Error: /srv/ussapc/home/ussapc/sw/root_build/core/rootcling_stage1/src/rootcling_stage1: compilation failure (/srv/ussapc/home/ussapc/sw/root_build/lib/libThreaddb2bde6cdd_dictUmbrella.h); gmake[2]: *** [core/thread/CMakeFiles/G__Thread.dir/build.make:109: core/thread/G__Thread.cxx] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:27339: core/thread/CMakeFiles/G__Thread.dir/all] Error 2; gmake[1]: *** Waiting for unfinished jobs…. I found out that tbb is required by imt, so again; $ rm -rf *; $ cmake -D",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292:697,Perform,Performing,697,https://root.cern,https://github.com/root-project/root/issues/8292,1,['Perform'],['Performing']
Performance,"Hi sorry for the late reply, I tried and it works for ROOT 6.32 (I am finally able to see the right color in the loaded canvas), while with ROOT 6.30 I get ; ```; /test/./load_new.C:6:18: error: use 'template' keyword to treat 'Get' as a dependent template name; auto cnv = file->Get<TCanvas>(""c1"");; ^; template ; /test/./load_new.C:6:1: error: Syntax error; auto cnv = file->Get<TCanvas>(""c1"");; ^; FunctionDecl 0x5af6325fe230 <input_line_8:1:1, /test/./load_new.C:14:1> input_line_8:1:6 __cling_Un1Qu30 'void (void *)'; |-ParmVarDecl 0x5af6325fe178 <col:22, col:28> col:28 vpClingValue 'void *'; |-CompoundStmt 0x5af6326e1a70 <col:42, /test/./load_new.C:14:1>; | |-DeclStmt 0x5af6326de478 <line:3:1, col:35>; | | `-VarDecl 0x5af63264d6a8 <col:1, col:34> col:8 f 'TFile *' cinit; | | `-CXXNewExpr 0x5af6326de418 <col:12, col:34> 'TFile *' CXXMethod 0x5af6326db188 'operator new' 'void *(size_t)'; | | `-CXXConstructExpr 0x5af6326ddee0 <col:16, col:34> 'TFile':'TFile' 'void (const char *, Option_t *, const char *, Int_t)'; | | |-ImplicitCastExpr 0x5af6326dde68 <col:22> 'const char *' <ArrayToPointerDecay>; | | | `-StringLiteral 0x5af63264d788 <col:22> 'const char[11]' lvalue ""c_new.root""; | | |-CXXDefaultArgExpr 0x5af6326dde80 <<invalid sloc>> 'const char *'; | | |-CXXDefaultArgExpr 0x5af6326ddea0 <<invalid sloc>> 'const char *'; | | `-CXXDefaultArgExpr 0x5af6326ddec0 <<invalid sloc>> 'Int_t':'int'; | |-DeclStmt 0x5af6326df820 <line:6:1, col:36>; | | `-VarDecl 0x5af6326de508 <col:1, col:35> col:6 used cnv 'auto' cinit; | | `-CallExpr 0x5af6326df7c8 <col:12, col:35> '<dependent type>'; | | |-CXXDependentScopeMemberExpr 0x5af6326df6b0 <col:12, col:29> '<dependent type>' lvalue ->Get; | | | `-DeclRefExpr 0x5af6326de680 <col:12> '<dependent type>' lvalue Var 0x5af6326de578 'file' '<dependent type>'; | | `-StringLiteral 0x5af6326df7a8 <col:31> 'const char[3]' lvalue ""c1""; | |-CallExpr 0x5af6326df8c0 <line:8:1, col:11> '<dependent type>'; | | `-CXXDependentScopeMemberExpr 0x5af6326df87",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16560#issuecomment-2402546592:113,load,loaded,113,https://root.cern,https://github.com/root-project/root/issues/16560#issuecomment-2402546592,1,['load'],['loaded']
Performance,"Hi! :) RGL cmake file has already listed the dependency on ASImage before this. There are functions in TGLViewer that use TImage to export screenshots and to load textures. I assume the problem now is that there is an explicit include of stuff from TASImage. Should we just make this dependency explicit in the initial configure / cmake run?. Vincenzo also commented (in the above PR discussion or on MM) that builtin asimage is now always used, there is no external option. And asimage includes fallback implementations of all commonly use graphics file formats. How does TImage work if there is no TASImage? I guess it all just silently fails. And there is no other implementation of the TImage interface. I vote for cmake-time dependency -- as an error or to exclude RGL if asimage=off.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16250#issuecomment-2313078046:158,load,load,158,https://root.cern,https://github.com/root-project/root/issues/16250#issuecomment-2313078046,1,['load'],['load']
Performance,"Hi! I think the global caches are a bad idea, I'm still thinking of how to get rid of them without losing cache efficiency. For now, the workaround is to clear the global cache with:; ```C++; RooExpensiveObjectCache::instance().clearAll();; ```; Another solution is to use the RooWorkspace factory pattern to create your model, because then it uses a model local cache in the workspace that gets cleared when the workspace goes out of scope. Hope that helps for now!. edit 1: corrected ""mode local"" to ""model local""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10577#issuecomment-1133924183:23,cache,caches,23,https://root.cern,https://github.com/root-project/root/issues/10577#issuecomment-1133924183,4,['cache'],"['cache', 'caches']"
Performance,"Hi, . Adding the parallelisation in the TKDTree is a very nice developments. It will be useful to partition efficiently multi-dimensional data. I fully agree also with Danilo: . - the parallelisation should be moved to use the TThreadExecutor. Maybe you can maintain the one you have as a comparison for studying the performances and scalability; - include a test program showing the speed-up in using the parallelisation. For example in doing the multi-dim partitioning or binning (e.g. in tutorial tutorials/math/kdTreeBinning). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2202#issuecomment-397966042:317,perform,performances,317,https://root.cern,https://github.com/root-project/root/pull/2202#issuecomment-397966042,2,"['perform', 'scalab']","['performances', 'scalability']"
Performance,"Hi, . I would not change to unique_pointers, this could be done, but requires first a careful re-thinking and maybe re-design of the RooFit core classes. Changing them has very strong consequences on their I/O. All these should be discussed also with the RooFit author. . I would also leave the dynamic_cast. Removing will require adding an extra data member in the class. This code not be called where performances are critical.; In general I would minimise changes in existing RooFit classes, apart if they are needed (for performances improvements, fixing bugs, etc...). Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/363#issuecomment-302698570:403,perform,performances,403,https://root.cern,https://github.com/root-project/root/pull/363#issuecomment-302698570,2,['perform'],['performances']
Performance,"Hi, . Some time ago, I have had issues when invoking an `RDataFrame` analysis on a `TChain` that consisted of trees with **different names** in the **same file** (the canonical thing is just the other way around...). I first described the problem [here in the ROOT forum, rather long read, not absolutely necessary to understand this issue](https://root-forum.cern.ch/t/really-solved-rdataframe-for-tchain-loaded-with-ttrees-with-different-names/41756). Unluckily only my entire analysis chain was able to trigger the bug; i.e. I was not able to produce a condensed reproducer of the problem. The clearest indicator of the occurring mismatch was the following line repeatedly being printed on the terminal:; ```; Error in <TTreeReader::SetEntriesRange()>: first entry out of range 0..946274; ```. I also found a work-around, but the problem was still bothering me, which is why I invested some time in debugging it:. * The number of the error statement is identical to the number of entries in the *first* tree, which has fewer entries than its partner. It only occurs once `EntryClusters` from the second tree are being processed. I.e. the tree-switch is insufficient.; * The error seems to be caused by the following line:; https://github.com/root-project/root/blob/312dacbfdb2b76bfb1fa7af9532a01b3b08d03f1/tree/treeplayer/src/TTreeProcessorMT.cxx#L143; * Changing it as shown in this diff here seems to solve the problem:; ```; --- a/tree/treeplayer/src/TTreeProcessorMT.cxx	2021-02-07 20:22:19.290883093 +0000; +++ b/tree/treeplayer/src/TTreeProcessorMT.cxx	2021-02-07 20:32:00.000483321 +0000; @@ -140,8 +140,12 @@; const std::vector<Long64_t> &nEntries, const std::vector<std::vector<Long64_t>> &friendEntries); {; const bool usingLocalEntries = friendInfo.fFriendNames.empty() && entryList.GetN() == 0;; - if (fChain == nullptr || (usingLocalEntries && fileNames[0] != fChain->GetListOfFiles()->At(0)->GetTitle())); + if (fChain == nullptr || ( usingLocalEntries && (; +			 (fileNames[0] != fCh",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7143:406,load,loaded-with-ttrees-with-different-names,406,https://root.cern,https://github.com/root-project/root/issues/7143,1,['load'],['loaded-with-ttrees-with-different-names']
Performance,"Hi, ; @HDembinski The patch looks fine, although I might have some comments on having a global static instance available in the header file. I would prefer some static functions returning the cached values. ; However, I am surprised you see the MnPrecision constructor called many times. It should be called only once, in ModularFunction::Minimize and when creating the MnUserTransformation class, that also should be done one single time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2215#issuecomment-458622276:192,cache,cached,192,https://root.cern,https://github.com/root-project/root/pull/2215#issuecomment-458622276,1,['cache'],['cached']
Performance,"Hi, ; Thank you for the fix. I do not have anymore that crash in gPrefixStack. ; Yes, I can reproduce those failures of the other tests running with multi-thread and openMP. This is most likely caused by non-thread safe implementations of the likelihood functions used for the fitting. It is something needing a fix, but it is outside of the scope of this PR. . I think we are ready to merge this one. Let me run the CI first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-735713339:149,multi-thread,multi-thread,149,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-735713339,1,['multi-thread'],['multi-thread']
Performance,"Hi, @hahnjo are you still working on this? Can you share your ideas? So I think the problem is:; When we try to instantiate a class template like `TSeq`, we'll try to look up and load modules (https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplate.cpp#L10053) for `type` (https://github.com/root-project/root/blob/master/core/cont/inc/ROOT/TSeq.hxx#L95). Because the identifier `type` lives in module `ROOTDataFrame`, ROOT will try to load that. However, some headers in module `ROOTDataFrame` includes `TSeq.hxx` (https://github.com/root-project/root/blob/master/tree/dataframe/inc/ROOT/RDF/RLazyDSImpl.hxx#L16), so we found a Decl that already been instantiated. At last, Clang will try to update the previous declaration and merge the definition. But because we're still instantiating it and it's incomplete so they're not matched. I think the fix (at least the current workaround is killing the usage of `include TSeq.hxx` in headers of `ROOTDataFrame`), WDYT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1267994630:179,load,load,179,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1267994630,2,['load'],['load']
Performance,"Hi, I was sent here from https://github.com/root-project/root/pull/12784 and I'm a bit worried that we have, for multiple months now, a test that is known to fail on non-x86 architectures. My question would be: Why do you want bit-wise identical results for sums? `EXPECT_DOUBLE_EQ` doesn't allow arbitrarily large deviations, but only 4 ULPs which is enough to account for rounding in (well-behaved) algorithms, but will still catch most other problems. As to where these come from, my primary suspect would be fused-multiply-add instructions or other optimized floating point instructions that are not fully IEEE-754 compliant. I don't know exactly where, but I also don't think that you want to disable them globally and pay the performance penalty...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389#issuecomment-1538534024:553,optimiz,optimized,553,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538534024,2,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"Hi, Philippe,. Just an update to the issue, ; after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:; run the demo macro of TApplication, Error messages are as following,; ```; Fatal in <operator new>: with std::align_val_t is not implemented yet; aborting; #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc; entry=0x7ffeb2a715a8, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30; #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7ffeb2a715a8, options=options; entry=0) at ./posix/waitpid.c:38; #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171; #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so; #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13511#issuecomment-1867607489:594,optimiz,optimized,594,https://root.cern,https://github.com/root-project/root/issues/13511#issuecomment-1867607489,2,['optimiz'],['optimized']
Performance,"Hi, some comments/questions:. 1. I guess the behavior of `TTaskGroup` should mimic what `TThreadExecutor` does, e.g. it should use the task arena if it exists, and it should construct one if it doesn't. What's the rationale for doing things independently of ROOT's task arena? Does this mean users might see more cores used than they expect in some cases?; 2. Are you ok with silently do nothing if R__IMT is undefined? Would it be better to print a warning?; 3. Can we also have a way to disable RNTuple's multi-threading even if implicit MT is enabled, like TTree has?. P.S.; this stuff is always tricky to reason about for me, sorry if i'm missing obvious stuff. the rationale behind my question is that we should not have N different multi-threading behaviors for N components (because then we can't reason about how these components interact with each other because there are too many possibilities), we should not surprisingly use more cores than users might expect (and we should play well with the TBB settings of frameworks such as CMSSW, but it's not clear to me how we do that now, actually)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8334#issuecomment-854489805:507,multi-thread,multi-threading,507,https://root.cern,https://github.com/root-project/root/pull/8334#issuecomment-854489805,2,['multi-thread'],['multi-threading']
Performance,"Hi, thanks for opening the issue!. I have created a PR that improves the default legend for the pull distribution plot. https://github.com/root-project/root/pull/10938. If you want to have more control over the legend, it is best to do the Gaussian fit yourself so you have full control over it. Trying to over-optimize default placement is not worth it I think, because there will always be cases where it fails. In the PR I opened, I also add the instructions to do the Gaussian fit after the call to `pullPlot()` and control the label parameters. It would go like this:. ```C++; RooPlot *frame = mcstudy->plotPull(myVariable, RooFit::Bins(40), RooFit::FitGauss(false));; RooRealVar pullMean(""pullMean"",""Mean of pull"",0,-10,10) ;; RooRealVar pullSigma(""pullSigma"",""Width of pull"",1,0.1,5) ;; pullMean.setPlotLabel(""pull #mu""); // optional (to get nicer plot labels if you want); pullSigma.setPlotLabel(""pull #sigma""); // optional; RooGaussian pullGauss(""pullGauss"",""Gaussian of pull"", *frame->getPlotVar(), pullMean, pullSigma);; pullGauss.fitTo(const_cast<RooDataSet&>(mcstudy->fitParDataSet()),; RooFit::Minos(0), RooFit::PrintLevel(-1)) ;; pullGauss.plotOn(frame) ;; pullGauss.paramOn(frame, RooFit::Layout(0.65, 0.9, 0.9)); // optionally specify label position (xmin, xmax, ymax); ```. Hope this helps!. Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10931#issuecomment-1179416905:311,optimiz,optimize,311,https://root.cern,https://github.com/root-project/root/issues/10931#issuecomment-1179416905,1,['optimiz'],['optimize']
Performance,"Hi, thanks for reporting this!. It is indeed a bug that you can't read the 6.26 workspace in 6.28. The other way around is expected, with RooFit you can't read back a RooWorkspace with any ROOT version that is older that the version it was created with. When I run the reproducer in the debugger, I get this stack trace:; ```; Program received signal SIGABRT, Aborted.; 0x00007ffff4a9f26c in ?? () from /usr/lib/libc.so.6; (gdb) bt; #0 0x00007ffff4a9f26c in ?? () from /usr/lib/libc.so.6; #1 0x00007ffff4a4fa08 in raise () from /usr/lib/libc.so.6; #2 0x00007ffff4a38538 in abort () from /usr/lib/libc.so.6; #3 0x00007ffff4c9ca6f in __gnu_cxx::__verbose_terminate_handler () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #4 0x00007ffff4cb011c in __cxxabiv1::__terminate (handler=<optimized out>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00007ffff4cb0189 in std::terminate () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00007ffff4cb03ed in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12967#issuecomment-1581261520:800,optimiz,optimized,800,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520,1,['optimiz'],['optimized']
Performance,"Hi, thanks for the report. A small update, this seems to be an issue since at least ROOT 6.24:. ```; $: root --version; ROOT Version: 6.29/01; Built for linuxx8664gcc on Feb 26 2023, 17:20:00; From heads/master@v6-25-02-4093-g23b30e03c3; $: python test.py ; IncrementalExecutor::executeFunction: symbol '_ZNSt7__equalILb0EE5equalIPK4TestS4_EEbT_S5_T0_' unresolved while linking symbol '__cf_10'!; You are probably missing the definition of bool std::__equal<false>::equal<Test const*, Test const*>(Test const*, Test const*, Test const*); Maybe you need to load the corresponding shared library?; ```; ```; $: root --version; ROOT Version: 6.26/10; Built for linuxx8664gcc on Nov 17 2022, 16:21:00; From @; $: python test.py; IncrementalExecutor::executeFunction: symbol '_ZNSt7__equalILb0EE5equalIPK4TestS4_EEbT_S5_T0_' unresolved while linking symbol '__cf_10'!; You are probably missing the definition of bool std::__equal<false>::equal<Test const*, Test const*>(Test const*, Test const*, Test const*); Maybe you need to load the corresponding shared library?; ```; ```; $: root --version; ROOT Version: 6.24/06; Built for linuxx8664gcc on May 02 2022, 19:26:00; From @; $: python test.py ; IncrementalExecutor::executeFunction: symbol '_ZNSt7__equalILb0EE5equalIPK4TestS4_EEbT_S5_T0_' unresolved while linking symbol '__cf_9'!; You are probably missing the definition of bool std::__equal<false>::equal<Test const*, Test const*>(Test const*, Test const*, Test const*); Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12406#issuecomment-1451745616:556,load,load,556,https://root.cern,https://github.com/root-project/root/issues/12406#issuecomment-1451745616,3,['load'],['load']
Performance,"Hi, thanks for the reports! Okay, the problem with the `RooRealSumPdf` hinted me that this new optimization was part of the problem (look for ""binned likelihood fit optimization"").; https://root.cern/doc/v628/release-notes.html. This optimization was used inside ATLAS for a long time to great success (speedups), so I was enabling it by default. However, it seems to be problematic here, maybe it doesn't work with the RooBarlowBeestonLL. You should for now disable it when the demo is compiled with ROOT 6.28. So the line with `MakeModelAndMeasurementFast` in `histfact_demo.cpp` would become:; ```C++; #if ROOT_VERSION_CODE < ROOT_VERSION(6,28,00); auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas);; #else; // Disable the binned fit optimization that was enabled by default in ROOT 6.28.; // This optimization skips the normalization of the RooRealSumPdf, because; // the unnormalized bin contents already represent the yields that can be; // used by the RooNLLVar to sum the Poisson terms. However, this optimization; // doesn't work for this demo, maybe because it's not compatible with the; // RooBarlowBeestonLL. See also https://root.cern/doc/v628/release-notes.html.; HistoToWorkspaceFactoryFast::Configuration cfg;; cfg.binnedFitOptimization = false;; auto ws = RooStats::HistFactory::MakeModelAndMeasurementFast(meas, cfg);; #endif; ```. With this, the results I get with 6.28 are already more comparable to 6.24. Here the results of `fit-noshapes`:; ## ROOT 6.28. ```txt; FVAL = -1581.9159109118475; Edm = 0.000441898404860980383; Nfcn = 187; Lumi	 = 0.937281	 +/- 0.041571	(limited); Nmu	 = 68079	 +/- 3149.09	(limited); RawRDst	 = 0.0394995	 +/- 0.00466377	(limited); alpha_BFD1	 = -1.56966	 +/- 0.268056	(limited); Info in <Minuit2>: Minuit2Minimizer::Hesse Using max-calls 2000; Info in <Minuit2>: Minuit2Minimizer::Hesse Hesse is valid - matrix is accurate; 0.000441626; Fit ran with status 0; Stat error on R(D*) is 0.004650; EDM at end was 0.000442; RooArgList:: =",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12729#issuecomment-1527829256:95,optimiz,optimization,95,https://root.cern,https://github.com/root-project/root/issues/12729#issuecomment-1527829256,5,['optimiz'],['optimization']
Performance,"Hi, this has been discussed a few times and the outcome of the discussion was always that we want a generic `TExecutor` that might run things concurrently or not depending on a policy parameter, but we don't want `TThreadExecutor` to have a sequential mode (it makes the name a misnomer).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6298#issuecomment-686465798:142,concurren,concurrently,142,https://root.cern,https://github.com/root-project/root/pull/6298#issuecomment-686465798,1,['concurren'],['concurrently']
Performance,"Hi, this is still an issue. TChain and TTree silently return the last valid value for an indexed friend tree if the main one asks for a non-existing index. #12260 was a specific bug in RDF's multi-threading + indexed friend trees that users encountered and that would have been made immediately visible if this issue was fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7713#issuecomment-1783001800:191,multi-thread,multi-threading,191,https://root.cern,https://github.com/root-project/root/issues/7713#issuecomment-1783001800,1,['multi-thread'],['multi-threading']
Performance,"Hi,. ATLAS would like to request the addition of a mechanism to control the number of threads used by ROOT with implicit multi-threading enabled, ideally via an environment variable (e.g. `ROOT_MAX_THREADS`). The primary motivation for this is to give GRID sites an easier way to limit the number of threads to match that of a queue. Thanks!. Ed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9805:121,multi-thread,multi-threading,121,https://root.cern,https://github.com/root-project/root/issues/9805,2,"['multi-thread', 'queue']","['multi-threading', 'queue']"
Performance,"Hi,. Could you explain why the classes are forced not to be selected without the ""+"", which brings many benefits, among which performance during the IO procedures?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16375#issuecomment-2331975920:126,perform,performance,126,https://root.cern,https://github.com/root-project/root/issues/16375#issuecomment-2331975920,1,['perform'],['performance']
Performance,"Hi,. I need to install ROOT 6.16 in my laptop (macOS Monterey M1 chip), but it's becoming so difficult due to the installation of TBB, and it also cannot detect the arm architecture (so when I configure the cmake building, I get ```Targeting X86```). . Regarding the TBB issue, this is the output; ```cmake; -- TBB download command succeeded. See also /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-download-*.log; [ 0%] No update step for 'TBB'; [ 0%] No patch step for 'TBB'; [ 0%] No configure step for 'TBB'; [ 0%] Performing build step for 'TBB'; CMake Error at /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-build-RelWithDebInfo.cmake:49 (message):; Command failed: 2. 'make' 'compiler=clang' 'CXXFLAGS= -mno-rtm -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX12.1.sdk' 'CPLUS=/Library/Developer/CommandLineTools/usr/bin/c++' 'CONLY=/Library/Developer/CommandLineTools/usr/bin/cc'. See also. /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-build-*.log; ```. I have been following [this](https://github.com/root-project/root/pull/6120/commits) pull request made by Axel and I made the same changes from the commits, but it's not sufficient to fix the whole problem. . Also I tried to configure with ```-Dbuiltin_tbb=OFF``` since I have the latest tbb from homebrew, but I get; ```cmake; -- Found TBB: /opt/homebrew; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1159 (if):; if given arguments:. ""VERSION_LESS"" ""2018""; ```. Can you point me to a solution, or propagate the patches you have been developing to older versions like this one?. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10370:546,Perform,Performing,546,https://root.cern,https://github.com/root-project/root/issues/10370,1,['Perform'],['Performing']
Performance,"Hi,. I started to take a look to this issue: the boundary check is not performed by the `TH1` methods that access a bin, e.g., `TH1C h(""h"","""",10,0,10); h.AddBinContent(12312312); ` and it can lead to undefined behavior (there is a piece of memory spoiled by this action). After reading the methods of TH1S, TH1I, TH1F, TH1D that access a bin content I can say:; * Each histogram class derives from the corresponding TArray class, e.g., TH1F derives from TArrayF; * Internally, the access to the bin is done _a la C_, straight to the element of the array , e.g. `fArray[nbin]` ; * The boundary check is already implemented for the methods `TArray::operator()[]` . A potential solution would be to use `TArray::operator()[]`, which actually check the boundary of the array. Another solution could be a simple `if` to check of the boundary without using the `TArray` features. . It is likely that this methods `SetBin*`, `AddBin*` may be called quite often, and such boundary check could have a great impact in performance. Is there experience of such case? @lmoneta , may I ask for your advice on this issue?. Best,; Alvaro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14575#issuecomment-1940996892:71,perform,performed,71,https://root.cern,https://github.com/root-project/root/issues/14575#issuecomment-1940996892,2,['perform'],"['performance', 'performed']"
Performance,"Hi,. OK. Yes, this is highly dependent on AliRoot/AliPhysics. . What is currently in production in the SAF is a procedure to get a filtering be performed at the same time data is being staged (*). I’ve deployed on SAF my own root version with those changes and I’m happy with the way it work, but it’s really awkward for the user because they cannot use the same root version for the staging and for their analysis (and they must play with datasetmanager cache of the queries to get the right files…). That’s why I’d want to have it « officially » in Root. To way to trigger such a filtering is to add bit and pieces to the file names generated by the TDataSetManager, e.g. :. const char\* query = ""Find;FileName=AliESDs.root;BasePath=/alice/data/2011/LHC11h/000169838/ESDs/pass2_muon;Filter=ESDMUON;Aliphysics=vAN-20150213"";. gProof->ShowDataSet(query);; will generate filenames as : . alien:///alice/data/2011/LHC11h/000169838/ESDs/pass2_muon/11000169838080.42/AliESDs.FILTER_ESDMUON_WITH_ALIPHYSICS_vAN-20150213.root alien:///alice/data/2011/LHC11h/000169838/ESDs/pass2_muon/11000169838080.42/AliESDs.FILTER_ESDMUON_WITH_ALIPHYSICS_vAN-20150213.root. On the workers the staging script is deciphering the filename in order to call. $ALICE_PHYSICS/aaf-stage-and-filter --from source_url --to destination_url --filter filtername . where :; ALICE_PHYSICS points to (cvmfs version of) vAN-20150213, ; source_url is alien:///alice/data/2011/LHC11h/000169838/ESDs/pass2_muon/11000169838080.42/AliESDs.root alien:///alice/data/2011/LHC11h/000169838/ESDs/pass2_muon/11000169838080.42/AliESDs.root; filter name is ESDMUON . Hope this clarifies the intent (more bla at http://aphecetche.github.io/aafu/doc/#Datafiltering http://aphecetche.github.io/aafu/doc/#Datafiltering). . If the dataset manager can be easily provided to users without having it in Root, I’m all for it. . Regards,. > Le 5 mai 2015 à 18:40, Dario Berzano notifications@github.com a écrit :; > ; > Hello @aphecetche https://github.com/aphe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/63#issuecomment-99143966:144,perform,performed,144,https://root.cern,https://github.com/root-project/root/pull/63#issuecomment-99143966,2,"['cache', 'perform']","['cache', 'performed']"
Performance,"Hi,. The TMVA tool set has functionality to scan the parameters for boosted decision trees. In the tutorial: https://root.cern.ch/doc/v614/TMVAClassification_8C.html one can uncomment line ; // factory->OptimizeAllMethods(""SigEffAt001"",""Scan"");; Infact, while I look at this tutorial, the line should read:; // factory->OptimizeAllMethods(""SigEffAtBkgEff001"",""Scan"");. To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:; // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");. The string handling can be tested:. Test 0.1% without decimal:. root [0] TString fFOMType=""SigEffAtBkgEff0001"" //Set at 0.1%; root [1] TString percent=TString(fFOMType(14,fFOMType.Sizeof())); //extract number; root [2] if (!percent.CountChar('.')) percent.Insert(1,"".""); //If there isnt a decimal point add it; root [3] percent.Atof() //Get the result; (double) 0.0010000000. Test 0.1% with decimal point:. root [0] TString fFOMType=""SigEffAtBkgEff0.001""; (TString &) ""SigEffAtBkgEff0.001""[19]; root [1] TString percent=TString(fFOMType(14,fFOMType.Sizeof()));; root [2] if (!percent.CountChar('.')) percent.Insert(1,""."");; root [3] percent.Atof(); (double) 0.0010000000. Try the 10% case:. root [0] TString fFOMType=""SigEffAtBkgEff01""; root [1] TString percent=TString(fFOMType(14,fFOMType.Sizeof()));; root [2] if (!percent.CountChar('.')) percent.Insert(1,""."");; root [3] percent.Atof(); (double) 0.10000000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3414#issuecomment-462693391:203,Optimiz,OptimizeAllMethods,203,https://root.cern,https://github.com/root-project/root/pull/3414#issuecomment-462693391,4,"['Optimiz', 'perform']","['OptimizeAllMethods', 'performance']"
Performance,"Hi,. When compiling and attempting to run the Celeritas example (see https://github.com/celeritas-project/celeritas) with a build of ROOT v6.26/00 with gcc 11 we get the following errors:; ```; Error in <TCling::RegisterModule>: Dictionary trigger function for libCore not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libMathCore not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libThread not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libRIO not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libNet not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libTree not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libceleritas_root not found; Error in <TClass::LoadClassInfo>: no interpreter information for class celeritas::ImportData is available even though it has a TClass initialization routine.; ```; A simple use of root works fine (eg. simple.root is created just fine). However loading the celeritas library:; ```; root[0] .L path_to_celeritas_build/libceleritas_root.so; ```; leads to a weird error about not find `path_to_root_installation/*bin*/libNet_rdict.pcm`. We trace is down to the line in `TCling.cxx`:; ```; std::string dyLibName = cling::DynamicLibraryManager::getSymbolLocation(triggerFunc);; ```; for `libNet` returning the name of executable (`blahblah/bin/root.exe`). However loading the slightly simpler library `libceleritas.root` (which is used by `libceleritas_root.so`), works just fine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10162:828,Load,LoadClassInfo,828,https://root.cern,https://github.com/root-project/root/issues/10162,3,"['Load', 'load']","['LoadClassInfo', 'loading']"
Performance,"Hi,. very nice. Can you cite a performance improvement figure in terms of real time before and after the change?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/741#issuecomment-313113647:31,perform,performance,31,https://root.cern,https://github.com/root-project/root/pull/741#issuecomment-313113647,1,['perform'],['performance']
Performance,"Hi,. when building with -DCMAKE_BUILD_TYPE=Debug; how should I set the -O flag level - using the CXXFLAGS; or using RelWithDebInfo or Optimized.; I see RelWithDebInfo is setting -03. . Our aim would be to get as much debug info as possible (thats one), and know how change optimization levels",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6846:134,Optimiz,Optimized,134,https://root.cern,https://github.com/root-project/root/issues/6846,2,"['Optimiz', 'optimiz']","['Optimized', 'optimization']"
Performance,"Hi,. when doing some more testing on the OptimizeBaskets() changes made last year, I found that getting the numbers of entries in the basket causes a disc read for each branch. This could be expensive and it is better to use the numbers of entries in the tree instead, as OptimizeBaskets() is called only on the first flush and most branches will have only one basket. Larger branches, may have more baskets, but overestimating their size by a few bytes is still a good approximation (and much better than an additional 4,000 disc reads (e.g. for ATLAS xAOD)). Thanks, Peter",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/369:41,Optimiz,OptimizeBaskets,41,https://root.cern,https://github.com/root-project/root/pull/369,2,['Optimiz'],['OptimizeBaskets']
Performance,"Hi,; I double-checked the behavior of `TTree::Draw` and `TTreeReader` when reading ""misaligned"" friends in a number of situations: as `TTrees`/`TChains`, friends longer/shorter than the main tree, friends with/without a `TTreeIndex`. With the path at https://github.com/root-project/root/pull/7131, which avoids an infinite loop with `TTreeReader` + indexed friend tree, `TTreeReader` and `TTree::Draw` behave the same in all cases except the one reported here. This means e.g. that switching from using a `TTree` to using a `TChain` to read the same data can change the number of entries `TTreeReader` reads in case of a friend that's larger than the main `TTree`. The problematic logic is that of `TTree::LoadTree(entry)`, which does not return an error if `entry` is larger than the number of entries in the main tree as long as the friend tree has enough entries (again note that `TChain` behaves differently, ending the event loop as soon as the main tree entries are over, and `TTree/TChain::Draw` also behaves like that). In particular, these lines are what causes `TTree::LoadTree` to not return an error:. https://github.com/root-project/root/blob/8d616f45e399d3a918b6a78edf98aa54219eb5d2/tree/tree/src/TTree.cxx#L6447-L6452. <hr>. Now, should `TTree::LoadTree` behave differently, or should `TTreeReader::SetEntryBase` not rely (just) on the return value of `LoadTree` to decide whether the event loop is over?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6518#issuecomment-773505129:707,Load,LoadTree,707,https://root.cern,https://github.com/root-project/root/issues/6518#issuecomment-773505129,4,['Load'],['LoadTree']
Performance,"Hi,; I plan to add more punctual comments but here I think we have the first comments emerged from today's meeting:; - A better naming is needed; - In-tree gtests should be added to make sure the needs of TDF are satisfied; - The queue should move into ROOT::Internal in core/cont; - A factory pattern shall be in place not to expose the queue to the users for the moment",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/533#issuecomment-297750581:230,queue,queue,230,https://root.cern,https://github.com/root-project/root/pull/533#issuecomment-297750581,2,['queue'],['queue']
Performance,"Hi,; It is easy to bring ping to work!; But that does not necessarily mean that wget works.; Georg; Von meinem iPhone gesendet. > Am 21.06.2021 um 12:13 schrieb Bertrand Bellenot ***@***.***>:; > ; > ﻿; > There is a ugly workaround to check for network:; > ; > execute_process(; > COMMAND ping www.github.com -n 2 -w 1000; > RESULT_VARIABLE NO_CONNECTION; > ); > And then use NO_CONNECTION like for example:; > ; > if(NO_CONNECTION EQUAL 1); > message(STATUS ""No internet connection, disabling 'builtin_tbb' option""); > set(builtin_tbb OFF CACHE BOOL ""Disabled because there no internet connection"" FORCE); > set(imt OFF CACHE BOOL ""Disabled because 'builtin_tbb' was set but there no internet connection"" FORCE); > else(); > ...; > I quickly tried and the principle works, but I'll need time to make it working properly and that will complexify (again) CMake; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-865289345:540,CACHE,CACHE,540,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-865289345,2,['CACHE'],['CACHE']
Performance,"Hi,; i tried again but still does not work. Since in the past i tried to install root from source and then had to uninstall manually (the compiled files had been scattered in the bin, include and alike system folders) i guess there could be some 6.26 libraries in system search paths, which are loaded by root instead of its own? I will try to further clean my directories or force somehow root to search only in its versions' folder.; Thank you all for your feedkback.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15129#issuecomment-2067688720:295,load,loaded,295,https://root.cern,https://github.com/root-project/root/issues/15129#issuecomment-2067688720,1,['load'],['loaded']
Performance,"Hi,; yes following the linked example of the VavilovAccuratePdf is fine. It is true you have made a class, but only with static functions. Like this is not needed to be a class, can be simple function in a namespace. The advantage of having as a class is that one can cache some information as class data members. . Then test of the Vavilov is also a good example, however it is better to use the google test framework, resulting in a much simpler test to write. You need just to use the macro defined by test to compare the function value with the reference one. ; You have many examples in ROOT for gtest, for example in `hist/hist/test` directory like `test_TH1.cxx` or `test_TFormula.cxx`, `test_TF123_Moments.cxx`. If you need any help for the test, please let me know",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11049#issuecomment-1202195997:268,cache,cache,268,https://root.cern,https://github.com/root-project/root/pull/11049#issuecomment-1202195997,1,['cache'],['cache']
Performance,"Hii @guitargeek ! ; cmake output shows these errors while generating cache ; ```; `system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/msvcp140.dll'`; ```; ```; system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/vcruntime140.dll'; ```; ```; system runtime library file does not exist:; 2> [CMake] 'MSVC_REDIST_DIR-NOTFOUND/x64/Microsoft.VC142.CRT/concrt140.dll'; ```; and while building ; `error : 'LZMA/src/LZMA/lib/liblzma.lib', needed by 'bin/Core.dll'` . Sadly I don't have any other system apart from this one, but I will try to reach my university's Linux system once my exams get over (which ends in Feb 3rd week ) and hopefully by that time there will be relaxation in covid guidelines . Until then I guess I will try to build this in my windows. ; Thanks for replying to my queries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8777#issuecomment-1029050145:69,cache,cache,69,https://root.cern,https://github.com/root-project/root/issues/8777#issuecomment-1029050145,1,['cache'],['cache']
Performance,"HistFactory -- zjets_2b_emu_OS_2b has no variation histograms ; [#2] ERROR:HistFactory -- could not find variable minusONE could not set it to constant. *** Break *** segmentation violation; ```. While the relevant variable is present in the XML file:; ```xml; <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >; <POI>mu_ttbar mu_Z b</POI>; <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>; </Measurement>; ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```; ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc; entry=0x7fffe7747e28, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30; #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7fffe7747e28, options=options; entry=0) at ./posix/waitpid.c:38; #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172; #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so; #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so; #5 <signal handler called>; #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so; #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so; #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_inst",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14225:2176,optimiz,optimized,2176,https://root.cern,https://github.com/root-project/root/issues/14225,1,['optimiz'],['optimized']
Performance,"Histo1D(""x"")->DrawClone(); IncrementalExecutor::executeFunction: symbol '_ZSt4moveIRN4ROOT8Internal3RDF15RColumnRegisterEEONSt16remove_referenceIT_E4typeEOS6_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::remove_reference<ROOT::Internal::RDF::RColumnRegister&>::type&& std::move<ROOT::Internal::RDF::RColumnRegister&>(ROOT::Internal::RDF::RColumnRegister&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZSt4moveIRSt10shared_ptrIN4ROOT6Detail3RDF13RJittedDefineEEEONSt16remove_referenceIT_E4typeEOS8_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::remove_reference<std::shared_ptr<ROOT::Detail::RDF::RJittedDefine>&>::type&& std::move<std::shared_ptr<ROOT::Detail::RDF::RJittedDefine>&>(std::shared_ptr<ROOT::Detail::RDF::RJittedDefine>&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E' unresolved while linking [cling interface function]!; You are probably missing the definition of void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocato",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-1833762580:802,load,load,802,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-1833762580,2,['load'],['load']
Performance,"Histo1D(""x"")->DrawClone(); IncrementalExecutor::executeFunction: symbol '_ZSt4swapIP4TH1DENSt9enable_ifIXsr6__and_ISt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SE_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::enable_if<__and_<std::__not_<std::__is_tuple_like<TH1D*> >, std::is_move_constructible<TH1D*>, std::is_move_assignable<TH1D*> >::value, void>::type std::swap<TH1D*>(TH1D*&, TH1D*&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZSt11make_sharedIN4ROOT8Internal3RDF13RJittedActionEJRNS0_6Detail3RDF12RLoopManagerERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaISE_EERNS2_15RColumnRegisterESI_EESt10shared_ptrINSt9enable_ifIXntsr8is_arrayIT_EE5valueESN_E4typeEEDpOT0_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::shared_ptr<std::enable_if<!is_array<ROOT::Internal::RDF::RJittedAction>::value, ROOT::Internal::RDF::RJittedAction>::type> std::make_shared<ROOT::Internal::RDF::RJittedAction, ROOT::Detail::RDF::RLoopManager&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, ROOT::Internal::RDF::RColumnRegister&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-1573184913:959,load,load,959,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-1573184913,1,['load'],['load']
Performance,"Historically, we had this to disambiguate between pcm files generated by rootcling and 'regular' module files (i.e. if somebody unwisely forwarded the compiler's module cache there).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/878#issuecomment-324411584:169,cache,cache,169,https://root.cern,https://github.com/root-project/root/pull/878#issuecomment-324411584,1,['cache'],['cache']
Performance,"HitMerger::ConditionalRun (this=0x162d640) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/run/O2HitMerger.h:357; #21 0x00007ff44b22cc35 in FairMQDevice::RunWrapper (this=0x162d640) at /home/aliperf/aliperf_workspace/sw/SOURCES/FairMQ/v1.4.40/v1.4.40/fairmq/FairMQDevice.cxx:460; #22 0x00007ff44aca709d in std::function<void (fair::mq::State)>::operator()(fair::mq::State) const (__args#0=<optimized out>, this=<optimized out>) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/GCC-Toolchain/v10.2.0-alice2-local3/include/c++/10.2.0/bits/std_function.h:622; #23 boost::detail::function::void_function_obj_invoker1<std::function<void (fair::mq::State)>, void, fair::mq::State>::invoke(boost::detail::function::function_buffer&, fair::mq::State) (function_obj_ptr=..., a0=<optimized out>) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/boost/v1.75.0-local8/include/boost/function/function_template.hpp:158; #24 0x00007ff44acaff89 in boost::function1<void, fair::mq::State>::operator() (a0=<optimized out>, this=<optimized out>) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/boost/v1.75.0-local8/include/boost/function/function_template.hpp:763; #25 boost::signals2::detail::call_with_tuple_args<boost::signals2::detail::void_type>::m_invoke<boost::function<void (fair::mq::State)>, 0u, fair::mq::State&>(boost::function<void (fair::mq::State)>&, boost::signals2::detail::unsigned_meta_array<0u>, std::tuple<fair::mq::State&> const&, boost::enable_if<boost::is_void<boost::function<void (fair::mq::State)>::result_type>, void>::type*) const (args=..., func=..., this=<optimized out>) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/boost/v1.75.0-local8/include/boost/signals2/detail/variadic_slot_invoker.hpp:105; #26 boost::signals2::detail::call_with_tuple_args<boost::signals2::detail::void_type>::operator()<boost::function<void (fair::mq::State)>, fair::mq::State&, 1ul>(boost::function<void (fair::mq::State)>&, std::tuple<fair::mq::State&> const&, mpl_::size_t<1ul>) const (args=..",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:24009,optimiz,optimized,24009,https://root.cern,https://github.com/root-project/root/issues/8931,4,['optimiz'],['optimized']
Performance,"Hm, actually I cannot reproduce this, at least with the example give above:; ```; root [0] auto c = TClass::GetClass(""Detail""); (TClass *) nullptr; root [1] namespace Detail { int i; }; root [2]; ```. Do I have to (auto)load something during startup?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-899430070:220,load,load,220,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-899430070,1,['load'],['load']
Performance,"Hm, could it be that we don't release some memory? Just trying with a real world analysis and after a certain number of events I get a crash like this. ```; Processed 130000 entries; terminate called after throwing an instance of 'std::runtime_error'; what(): Error initializing io_uring: Invalid argument; ```. ```; #0 0x00007ffff51a1355 in raise () from /usr/lib/libc.so.6; #1 0x00007ffff518a853 in abort () from /usr/lib/libc.so.6; #2 0x00007ffff554586a in __gnu_cxx::__verbose_terminate_handler () at /build/gcc/src/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x00007ffff5551d8a in __cxxabiv1::__terminate (handler=<optimized out>) at /build/gcc/src/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #4 0x00007ffff5551df7 in std::terminate () at /build/gcc/src/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #5 0x00007ffff555209e in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x5555555a2800 <typeinfo for std::runtime_error@@GLIBCXX_3.4>, ; dest=0x7ffff5567fd0 <std::runtime_error::~runtime_error()>) at /build/gcc/src/gcc/libstdc++-v3/libsupc++/eh_throw.cc:95; #6 0x00007ffff75c4914 in ROOT::Internal::RIoUring::RIoUring() () from /home/jakob/Documents/CERN/ROOT/ntuple/install-git/lib/libRIO.so; #7 0x00007ffff75c3b01 in ROOT::Internal::RRawFileUnix::ReadVImpl(ROOT::Internal::RRawFile::RIOVec*, unsigned int) () from /home/jakob/Documents/CERN/ROOT/ntuple/install-git/lib/libRIO.so; #8 0x00007ffff75c21cb in ROOT::Internal::RRawFile::ReadV(ROOT::Internal::RRawFile::RIOVec*, unsigned int) () from /home/jakob/Documents/CERN/ROOT/ntuple/install-git/lib/libRIO.so; #9 0x00007ffff5853e72 in ROOT::Experimental::Detail::RPageSourceFile::LoadCluster(unsigned long, std::unordered_set<unsigned long, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<unsigned long> > const&) () from /home/jakob/Documents/CERN/ROOT/ntuple/install-git/lib/libROOTNTuple.so; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6162#issuecomment-678297228:624,optimiz,optimized,624,https://root.cern,https://github.com/root-project/root/pull/6162#issuecomment-678297228,3,"['Load', 'optimiz']","['LoadCluster', 'optimized']"
Performance,"Hmm that would hint at an ABI issue - and that should be reproducible with `lli`, even though it might need a JIT -> compiled library call to expose the ABI incompatibility. FYI and in case you don't know, you can load a .so into `lli` with `-load=` - that's not what the argument was invented for, but it works like a charm :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7090#issuecomment-812148587:214,load,load,214,https://root.cern,https://github.com/root-project/root/issues/7090#issuecomment-812148587,2,['load'],['load']
Performance,"Hmmh, it seems CI builds can not find the new file from graf2d/asimage/libAfterImage/:; ```; [ 86%] Building CXX object graf2d/asimage/CMakeFiles/ASImage.dir/src/TASPngWriter.cxx.o; Error: /github/home/ROOT-CI/src/graf2d/asimage/src/TASPngWriter.cxx:3:10: fatal error: afterrootpngwrite.h: No such file or directory; 3 | #include <afterrootpngwrite.h>; | ^~~~~~~~~~~~~~~~~~~~~; compilation terminated.; ```. I had to do `rm -rf AFTERIMAGE-prefix` in my build dir to have the cmake install the new files. Is it possible the CI builds do something different here?. The F39 CI build log only has [this](https://github.com/root-project/root/actions/runs/10090893760/job/27901286721?pr=15812#step:9:750):; ```; [ 0%] Built target AFTERIMAGE; ```; while mine has (grepped out AFTERIMAGE parts):; ```; [ 0%] Creating directories for 'AFTERIMAGE'; [ 2%] Performing download step for 'AFTERIMAGE'; [ 10%] No update step for 'AFTERIMAGE'; [ 12%] No patch step for 'AFTERIMAGE'; [ 16%] Performing configure step for 'AFTERIMAGE'; -- AFTERIMAGE configure command succeeded. See also /home/matevz/root-dev/dev-1-bld/AFTERIMAGE-prefix/src/AFTERIMAGE-stamp/AFTERIMAGE-configure-*.log; [ 85%] Performing build step for 'AFTERIMAGE'; -- AFTERIMAGE build command succeeded. See also /home/matevz/root-dev/dev-1-bld/AFTERIMAGE-prefix/src/AFTERIMAGE-stamp/AFTERIMAGE-build-*.log; [ 97%] Performing install step for 'AFTERIMAGE'; -- AFTERIMAGE install command succeeded. See also /home/matevz/root-dev/dev-1-bld/AFTERIMAGE-prefix/src/AFTERIMAGE-stamp/AFTERIMAGE-install-*.log; [ 97%] Completed 'AFTERIMAGE'; [ 97%] Built target AFTERIMAGE; [ 97%] Built target G__ASImage; [ 97%] Building CXX object graf2d/asimage/CMakeFiles/ASImage.dir/src/TASPluginGS.cxx.o; [ 97%] Building CXX object graf2d/asimage/CMakeFiles/ASImage.dir/src/TASImage.cxx.o; [ 97%] Building CXX object graf2d/asimage/CMakeFiles/ASImage.dir/src/TASPngWriter.cxx.o; [ 97%] Linking CXX shared library ../../lib/libASImage.so; [ 97%] Built target ASImage; ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2250921631:846,Perform,Performing,846,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2250921631,2,['Perform'],['Performing']
Performance,How does the new cache handle the typical cache of a file being edited and then reloaded?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9010#issuecomment-921280780:17,cache,cache,17,https://root.cern,https://github.com/root-project/root/pull/9010#issuecomment-921280780,2,['cache'],['cache']
Performance,How is this uses in a multi-thread enviroment? I.e. I seem to see a description of the crash but not a description of what is being run.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6510#issuecomment-701541837:22,multi-thread,multi-thread,22,https://root.cern,https://github.com/root-project/root/issues/6510#issuecomment-701541837,1,['multi-thread'],['multi-thread']
Performance,How to set the debug build optimization level in -DCMAKE_BUILD_TYPE=Debug,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6846:27,optimiz,optimization,27,https://root.cern,https://github.com/root-project/root/issues/6846,1,['optimiz'],['optimization']
Performance,"Humm ... indeed ... that would need to be a setting on `RDataFrame`, which is then passed on to the `TChain` which could pass it to the `TFile` (in `TChain::LoadTree`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10318#issuecomment-1088026460:157,Load,LoadTree,157,https://root.cern,https://github.com/root-project/root/pull/10318#issuecomment-1088026460,1,['Load'],['LoadTree']
Performance,I aborted the built on ROOT-performance-centos7-multicore/default since the node is offline.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3259#issuecomment-456010159:28,perform,performance-,28,https://root.cern,https://github.com/root-project/root/pull/3259#issuecomment-456010159,1,['perform'],['performance-']
Performance,"I actually remember trying `Evaluate` but it crashed. Didn't look into too many details as to why; it does have a couple of fewer ""protection pieces"" (such as the mutex lock) than does `Calc()`, so that may be the reason. But even then, I gave up on all that when I realized that Python readily outperforms. I mean, talk about optimization, even for your integer case and compare these two macro's:. ```; int noleak() {; int result = 0;; for (int i = 0; i < 1000000; ++i) {; result += (int)TPython::Eval(""1+1"");; }; return result;; }; ```; and; ```; int leak() {; int result = 0;; for (int i = 0; i < 10000; ++i) {; result += (int)gInterpreter->Calc(""1+1"");; }; return result;; }; ```; Please note the constant: the `TPython::Eval()` is called _100x more_ than `TInterpreter::Calc()` and it is _still 4x faster_ on my box. So, my conclusion is that if you are in Cling and need to evaluate a run-time constructed expression represented in string-form, then the optimizily thing to do, is to call into Python ... (and if in a loop, then even if Python uses cppyy in turn, which uses Cling again, it will still outperform). And, of course, bonus points for not leaking ... There is one case where `cppyy` still fails: if the `operator+` in the expression above is a global `friend` (with the operands instances of some class), as so far, I've been unable to locate that method. So, I do still care, but my main problem is the leak on failed lookups, as those are very common. And I don't believe it is just the allocator, which as you tell it would re-use the memory, but I'll see first whether I can construct a pure Cling-only reproducer then. Aside, if/when the lookup helper is inverted (i.e. being able to tell what some _is_ rather than what it _isn't_), many of the failed lookups will simply go away.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7201#issuecomment-806058368:327,optimiz,optimization,327,https://root.cern,https://github.com/root-project/root/issues/7201#issuecomment-806058368,2,['optimiz'],"['optimization', 'optimizily']"
Performance,I added the RooMCMC class into roofitcore. It is used as the RooMinuit class except that it is using a Monte Carlo Markov Chain as a minimizer. I also added a Tutorial to the roofit section where a basic comparison with Minuit can be performed. This is my first contribution to ROOT so I except that some thing will not be right.; But I compiled ROOT on my computer exactly with the changes I am committing here and everything went fine.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1327:234,perform,performed,234,https://root.cern,https://github.com/root-project/root/pull/1327,1,['perform'],['performed']
Performance,"I added the minimal infrastructure for performing end-to-end test of the correctness of the header files generated by SOFIE.; There are 3 ONNX models as an example. # How it works; In order to create the Google Test, CMake scans a given directory (i.e. input_models) looking for `.onnx` files then generates a target called `SofieCompileModels_ONNX` with the only purpose of generating the `.hxx` headers (output of SOFIE compilation). A file called `Emit.cxx` acts like a command line SOFIE compiler, called by the test target before building the final comprehensive GTest `TestCustomModels`. - [x] tested changes locally; - [x] added example models (Linear16, Linear32, Linear64)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8782:39,perform,performing,39,https://root.cern,https://github.com/root-project/root/pull/8782,1,['perform'],['performing']
Performance,"I added this line in the Makefile juste after the `doxygen` command:; ```; 	sed -i -e '/^ */s///' -e '/ *$/s///' $(DOXYGEN_OUTPUT_DIRECTORY)/html/index.qhp; ```. But what is executed is:. ```; error: failed to run qhelpgenerator on index.qhp; lookup cache used 2073/1048576 hits=35556 misses=2201; finished...; sed -i -e '/^ */s///' -e '/ *s///' /Users/couet/rootdoc/html/index.qhp; sed: -e expression #2, char 6: unknown command: `/'; make: *** [doxygen] Error 1; ```. Somehow the `$` is not understood correctly when put in a Makefile. Do you know why ?; (I need to be away for my desk for a bit, let me know know if you know a solution).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1018441660:250,cache,cache,250,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1018441660,1,['cache'],['cache']
Performance,"I agree that it is an unfortunate circumstance to have the test not passing. However, I still urge you to consider the effect on debugability removing strict tests will have. I have wasted a lot of time trying to track down a subtle bug due to loose tests which left me unable to determine where the bug came from. Conversely, setting tests strictly and tracing discrepancies, I found a different bug in the Kahan sum: #11940. Unit tests especially should be as strict as possible. In absence of unit tests (which unfortunately is the case for the parts of RooFit I worked on), strict ""integration"" tests like these are the closest I could get. Note also that it was simply part of my original assignment: to ensure users can trust the new parallelized methods, I built them to be bit-wise exactly equal to the old methods. So, I know from experience how tedious it is to trace down these bit-wise differences to their actual concrete source, but also think that because we are dealing with scientific software, precision, robustness, reliability and interpretability (of components and hence the whole) are important. Of course, performance is an important factor too, but it's just one of the aspects. We want the end-results of experiments to be accurate and explainable, right? I personally at least don't like when I have to sell a ""because of floating point errors"", because I've been bitten by them a few times now. Now, I'm also well aware that the project only has a given amount of resources and I myself am currently more or less out of resources (I can spend only my free time), so my vote probably doesn't count strongly :) If I could be of more practical help in this, I would definitely be happy to, but I also don't have a non-x86 machine, so it's not feasible for me to do much right now. So, feel free to make a call on this as you all best see fit!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389#issuecomment-1538758017:1130,perform,performance,1130,https://root.cern,https://github.com/root-project/root/pull/12389#issuecomment-1538758017,1,['perform'],['performance']
Performance,"I agree that there is a problem here. That might involve the `DeclCollector` or the `DeclUnloader` or some other parts of ROOT. However, IMHO https://github.com/root-project/root/issues/13815#issuecomment-1759250811 clearly shows that the underlying problem is much bigger and older than just the failing test with LLVM 16. So I'd be very much interested in a pragmatic solution to resolve this last blocker for the upgrade. P.S.: One idea I had was to split the test into two parts, ie one ""bad"" part that tests the behavior with an incomplete class and one ""good"" part that loads `inst2lib`. However I quickly got stuck because just removing `o->Print();` on the first loaded object leads to many errors of the form `Error parsing payload code for class Inner` that I can't make sense of...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1768325139:576,load,loads,576,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1768325139,2,['load'],"['loaded', 'loads']"
Performance,"I already told Axel I was ""playing"" with clang-tidy. Here are some first results, basically low-hanging fruits only. I also included some of my own TMVA patches (more progress bars / unordered_map) and code modernization for TMVA. Biggest improvement is probably the missing TString move assignment operator, that makes sorting a vector<TString> much much faster if the strings are too long for short string optimization. Most of these patches can be applied in any order, they do not depend on each other. We can discuss the large modernize-loops commit. I didn't have enough time to go through the loop variable names. The autogenerated names are not always the best (especially if the name ""i"" is generated). Nevertheless I wanted to push all these changes before SB52 :-)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1585:408,optimiz,optimization,408,https://root.cern,https://github.com/root-project/root/pull/1585,1,['optimiz'],['optimization']
Performance,"I also get the error:; ```; [E 14:44:59.024 NotebookApp] Exception while loading config file /home/etejedor/.rootnb/jupyter_notebook_config.py; Traceback (most recent call last):; File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/application.py"", line 562, in _load_config_files; config = loader.load_config(); File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 457, in load_config; self._read_file_as_dict(); File ""/home/etejedor/.local/lib/python3.6/site-packages/traitlets/config/loader.py"", line 489, in _read_file_as_dict; py3compat.execfile(conf_filename, namespace); File ""/home/etejedor/.local/lib/python3.6/site-packages/ipython_genutils/py3compat.py"", line 198, in execfile; exec(compiler(f.read(), fname, 'exec'), glob, loc); File ""/home/etejedor/.rootnb/jupyter_notebook_config.py"", line 9, in <module>; c.NotebookApp.extra_static_paths = ['%s'] % jsrootsys; TypeError: unsupported operand type(s) for %: 'list' and 'str'; ```; The string substitution is not done properly, the % operator needs to be inside the square brackets.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4497#issuecomment-543159063:73,load,loading,73,https://root.cern,https://github.com/root-project/root/pull/4497#issuecomment-543159063,4,['load'],"['loader', 'loading']"
Performance,I am a bit lost ... Do we understand the reason for the thread unsafety? What data is there a race condition on? [Note for example that gPad is thread-local and in-itself not a cause for problem (unless several threads have their gPad pointing to the same pad).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6511#issuecomment-701541304:94,race condition,race condition,94,https://root.cern,https://github.com/root-project/root/pull/6511#issuecomment-701541304,1,['race condition'],['race condition']
Performance,"I am a little concerned about the basic idea. If I understood correctly, there is a (unique) global registry where the histogram are identified based on their 'full path name' (beside the fact that GetNameForRanges seems both brittle and currently seems on first reading 'wrong'/'not-as-intended'). I see two major problems, one is that the 'full path name' may never be really unique i.e. it might be impossible to avoid synonyms that are semantically distincts ... a good example is two free standings (not attached to any directory) histograms that happens to have the same name in two distinct and independent part of the code (e.g. two CMSSW modules). The other major problem is that it unnecessary tie (via that global mutex) all the 'parallel' histogram, this means that the overall scalability is inherently decreased. Rather than a completely global state, wouldn't it make sense to have a wrapper object (for example TThreadedObject) be the holder of the lock and list for a single set of related histogram.; This would both reduce contention and guarantees that the histograms are really related. A 3rd significant problem (but fixeable) is that the operation covered by the ReadWrite lock are not atomic (and/or trivial) and for the look of it could plausibly indirectly request the ROOT global lock and thus can lead to deadlocks (from some other code that hold the ROOT global locks and request the Write part of the ReadWrite lock). A 4th deficiency is that once activated for one histogram it *seems* to apply to all histogram. i.e. as far as can tell if you one parallel histograms and 10,000 single-thread histograms, filling the single-thread histogram still has to go through the multi-thread registration/mechanism. And that remind me, that another challenge for the 'unique registry' solution is to understand its scalability where reaching 10 to 100 thousands histograms. Thanks,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/902#issuecomment-325689991:790,scalab,scalability,790,https://root.cern,https://github.com/root-project/root/pull/902#issuecomment-325689991,3,"['multi-thread', 'scalab']","['multi-thread', 'scalability']"
Performance,"I am able to reproduce the failure with a simple standalone reproducer (2 threads one loading and unloading a library, the other interogating `TClassTable`). I will prepare a PR with the fine grained locking (or whatever is needed to make the crash go away :) )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11263#issuecomment-1483286941:86,load,loading,86,https://root.cern,https://github.com/root-project/root/pull/11263#issuecomment-1483286941,1,['load'],['loading']
Performance,I am confused ... the PR contains VC change and only 2 changes in TClass ... and the one change is still introduced a decrease of the single-thread performance (missing if (fClassInfo) and/or removal of the fClassInfo!=nullptr && fCanLoadClassInfo.),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/666#issuecomment-310389883:148,perform,performance,148,https://root.cern,https://github.com/root-project/root/pull/666#issuecomment-310389883,1,['perform'],['performance']
Performance,"I am not sure but it seems that `menuItem` is first set at declaration time and immediately overwritten . Let see if @TimurP has an idea. Otherwise it looks good to me. ```; //______________________________________________________________________________; void PopulateWindowMenu(NSMenu *aMenu); {; assert(aMenu != nil && ""PopulateWindowMenu, aMenu parameter is nil"");. NSMenuItem *menuItem = [aMenu addItemWithTitle : NSLocalizedString(@""Minimize"", nil); action : @selector(performMinimize:) keyEquivalent : @""m""];; menuItem = [aMenu addItemWithTitle : NSLocalizedString(@""Zoom"", nil); action : @selector(performZoom:) keyEquivalent : @""""];; [aMenu addItem : [NSMenuItem separatorItem]];; menuItem = [aMenu addItemWithTitle : NSLocalizedString(@""Bring All to Front"", nil); action : @selector(arrangeInFront:) keyEquivalent : @""""];; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10574#issuecomment-1125832836:475,perform,performMinimize,475,https://root.cern,https://github.com/root-project/root/pull/10574#issuecomment-1125832836,2,['perform'],"['performMinimize', 'performZoom']"
Performance,"I am not sure what is the use-case here but generally building something that has an execution engine and llvm in it as a shared library is a bad idea. This is because the symbols of llvm get incorporated in the binary/library and if that binary loads something like libMessa which contains a copy of llvm becomes a huge mess, unless you provide some sort of symbol versioning. Please think twice about your use-case before building as a shared library. You can get cling as a shared library through the [CppInterOp](https://github.com/compiler-research/CppInterOp) project. As part of this PR we can probably accept changes in terms of missing dependencies. That is, adding to the list of dependent libraries (such as your change about libclangSerialization).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15563#issuecomment-2125546066:246,load,loads,246,https://root.cern,https://github.com/root-project/root/pull/15563#issuecomment-2125546066,1,['load'],['loads']
Performance,"I am not sure what you mean by 'executing ""hsimple_C.so""' ... . Depending what you means, the information is either in the implementation of TSystem::CompileMacro or the usage of TCling__CompileMacro. Either way, I bet the 'right' answer is not a callback but a variation of what we already do, just with different input. See my previous comment for hints of what to look for. (i.e. ACLiC pass all rootmap files to the rootcling invocation and gets back a list of library to load).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2187#issuecomment-396915330:475,load,load,475,https://root.cern,https://github.com/root-project/root/pull/2187#issuecomment-396915330,1,['load'],['load']
Performance,"I am not sure whether there is something actionable about the vector of pointers. The only improvement I can see is to have a cache alined allocator to avoid false sharing but when comparing to the rest, I am not sure this will be a serious advantage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2708#issuecomment-425559341:126,cache,cache,126,https://root.cern,https://github.com/root-project/root/pull/2708#issuecomment-425559341,1,['cache'],['cache']
Performance,"I am not surprised, this is a know problem. If the performance is acceptable for the CMS case, please use the patch. For the general case, we need more work on it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/67#issuecomment-112127227:51,perform,performance,51,https://root.cern,https://github.com/root-project/root/pull/67#issuecomment-112127227,1,['perform'],['performance']
Performance,"I am now testing this, and see the following error:; ```; Scanning dependencies of target G__Core; [ 67%] Generating G__Core.cxx, ../../lib/libCore.rootmap; In file included from input_line_1:1:; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/new:40:; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/exception:142:; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/bits/exception_ptr.h:38:; /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/bits/cxxabi_init_exception.h:38:10: fatal error: 'stddef.h' file not found; #include <stddef.h>; ^~~~~~~~~~; In file included from input_line_4:2:; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/stdlib.h:30:; In file included from /home/amadio/build/external-llvm/etc/cling/lib/clang/5.0.1/include/stdlib.h:8:; /usr/include/stdlib.h:31:10: fatal error: 'stddef.h' file not found; #include <stddef.h>; ^~~~~~~~~~; Error: Error loading the default header files.; gmake[2]: *** [core/base/CMakeFiles/G__Core.dir/build.make:435: core/base/G__Core.cxx] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:8972: core/base/CMakeFiles/G__Core.dir/all] Error 2; gmake[1]: *** Waiting for unfinished jobs....; [ 67%] Built target Cling; gmake: *** [Makefile:152: all] Error 2; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1632#issuecomment-366987713:984,load,loading,984,https://root.cern,https://github.com/root-project/root/pull/1632#issuecomment-366987713,1,['load'],['loading']
Performance,"I am still confused [In the end this means that we must add more comment to the code]. > In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. [nonwithstanding that the 'catch'/'test' line 103 is 'only' an assert, so some random behavior might follow the change of behavior]. This statement seems to indicate that the answer to my questions:. > Also upon unloading are the FIDs 'released' or kept as is; in other words can the FID be re-used?. is (my interpretation of your answer): ""No, they are not released, they still point to the original file/memory-buffer"". But earlier you said:. > Regular unloading will invalidate the SourceManager memory buffer and we will not hit the cache for the particular FID. which seemed to me to be the complete opposite of the statement above. Can you clarify? . And if the first version (FID stay valid for ever), my other question is still bugging me:. > And if they are still valid, for 'real' files that unloaded and modified by the user and then reloaded, what happens (to the FID of the first load and the FID of the second load)?. Thanks for your patience :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483#issuecomment-414345477:147,cache,cached,147,https://root.cern,https://github.com/root-project/root/pull/2483#issuecomment-414345477,4,"['cache', 'load']","['cache', 'cached', 'load']"
Performance,"I am using root version 5. My code ran on the cern grid (PID 2095060486) successfully and it did not give me any errors. But when I try to merge all the jobs (changed the command ""full"" into ""terminate""), it gives me the following error. ; ```; PIDResponse: Initialising AliAnalysisTaskPIDResponse; ==============================================================================; E-AddTaskTender: No supply added to tender, so tender not created. *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007fba2e69317c in waitpid () from /lib64/libc.so.6; #1 0x00007fba2e610e52 in do_system () from /lib64/libc.so.6; #2 0x00007fba37e843f9 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0xe50280) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/core/unix/src/TUnixSystem.cxx:2172; #3 TUnixSystem::StackTrace (this=0xe50280) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/core/unix/src/TUnixSystem.cxx:2419; #4 0x00007fba37e8638c in TUnixSystem::DispatchSignals (this=0xe50280, sig=kSigSegmentationViolation) at /home/gnp78160/alice/sw/SOURCES/ROOT/v5-34-30-alice10/v5-34-30-alice10/core/unix/src/TUnixSystem.cxx:1294; #5 <signal handler called>; #6 0x00007fba36ddb793 in AliAnalysisTask::SetUsed (this=0x27a9980, flag=flag; entry=true) at /home/gnp78160/alice/sw/SOURCES/AliRoot/aliroot5/0/ANALYSIS/ANALYSIS/AliAnalysisTask.cxx:540; #7 0x00007fba36dc471a in AliAnalysisManager::InitAnalysis (this=0x24a9f30) at /home/gnp78160/alice/sw/SOURCES/AliRoot/aliroot5/0/ANALYSIS/ANALYSIS/AliAnalysisManager.cxx:1633; #8 0x00007fba36df65e1 in G__G__ANALYSIS_215_0_109 (result7=result7; entry=0x7ffcac8c2c90, funcname=funcname; entry=0x249df80 """", libp=libp; entry=0x7ffcac8c2cd0, hash=hash; entry=0) at /home/gnp78160/alice/sw/BUILD/ec8cb744704e066b1ec26fcf535125d0830c6a08/A",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6977:848,optimiz,optimized,848,https://root.cern,https://github.com/root-project/root/issues/6977,1,['optimiz'],['optimized']
Performance,"I believe that there is a lot of benefits in joining forces. There is not a large number of developers who both have the skills and will to build such libraries. If we want to make these building blocks the foundations for a solid ecosystem for interactive scientific computing, it will take a lot of effort, beyond the small group of developers than a single organization can dedicate to it, and the same goes for long term sustainability. If you are concerned with the fact that initial developers of xtensor are not academics, our group is that of open source advocates, with a solid track record as contributors but also in terms of volunteering for the community (organization of meetups, conferences, workshops, participating in NumFOCUS, and in steering council of Jupyter), and of advocating for open source. Let me know what you think, and if you would like more information, both at a technical level and on what we are up to. Also, you can engage with us on GitHub and https://gitter.im/QuantStack/Lobby. The chat room includes a number of developers working on other open source scientific computing software beyond xtensor, including performance C++.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2593#issuecomment-422101010:1147,perform,performance,1147,https://root.cern,https://github.com/root-project/root/pull/2593#issuecomment-422101010,1,['perform'],['performance']
Performance,"I believe this is what happens:; - In a ProductPdf, the values of the different components are precomputed & cached if `Optimize(2)` is activated. This caches PDF values **with** normalisation.; - If the ProductPdf is integrated, those PDF values are not re-evaluated, the pre-cached values are used. That means that already normalised PDF values are used to compute the integrals, and then the PDFs are divided by the now wrong integrals.; - The fix is to clone the terms that are multiplied for computing the integrals. This side-tracks the pre-cached values when integrals are computed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6315:109,cache,cached,109,https://root.cern,https://github.com/root-project/root/pull/6315,5,"['Optimiz', 'cache']","['Optimize', 'cached', 'caches']"
Performance,"I can confirm that this works now on macOS once I explicitly set `gGlobalMutex=nullptr`:. ```; root [0] gGlobalMutex; (TVirtualMutex *) 0x6000007b4950; root [1] gGlobalMutex=nullptr; (TVirtualMutex *) nullptr; root [2] ROOT::DisableImplicitMT();; Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled; root [3] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }; root [4] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);; root [5] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);; root [6] gaus->SetParameters(1,0,1);; root [7] h1->FillRandom(""gaus1d"",10000);; root [8] auto res = h1->Fit(gaus,""L0S"");; FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL; EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE; EXT PARAMETER STEP FIRST; NO. NAME VALUE ERROR SIZE DERIVATIVE; 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05; 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03; 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01; ERR DEF= 0.5; root [9] cout << TVirtualFitter::GetFitter() << endl;; 0x7fdc0f97b3f0; root [10]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13041#issuecomment-1599016029:305,multi-thread,multi-threading,305,https://root.cern,https://github.com/root-project/root/issues/13041#issuecomment-1599016029,1,['multi-thread'],['multi-threading']
Performance,"I can reproduce the problem but still to assert if the proposed solution cover the intent. In the meantime, a genuine question. What is the intent of:; ```; <class pattern=""*iterator<*pair<const*,const*""/>; ```; i.e. maybe it is no longer necessary or can be fine tuned (eg. this request the dictionary for classes like `""__and_<is_constructible<_Rb_tree_iterator<pair<const unsigned int,string> >,const _Rb_tree_iterator<pair<const unsigned int,string> >&>,is_constructible<bool,const bool&> >""`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11259#issuecomment-1233098721:264,tune,tuned,264,https://root.cern,https://github.com/root-project/root/issues/11259#issuecomment-1233098721,1,['tune'],['tuned']
Performance,"I cancelled the build on `mac1015`, the queue is still long...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11607#issuecomment-1283641648:40,queue,queue,40,https://root.cern,https://github.com/root-project/root/pull/11607#issuecomment-1283641648,1,['queue'],['queue']
Performance,I cannot make any assumption about the preferred usage of const operator() and my code base is definitely using both. I would favour to get best possible performance in both cases. Adding these interfaces should not be a problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/166#issuecomment-223249617:154,perform,performance,154,https://root.cern,https://github.com/root-project/root/pull/166#issuecomment-223249617,1,['perform'],['performance']
Performance,"I cannot reproduce this :-/ I'm looking at ROOT just-before-the-llvm-upgrade (I do realize that you detected a perf regression also wrt to that - but let's focus on the llvm upgrade first) and ROOT right after, in a release-with-debug build, running; ```; time python3 ./tst100.py; ```; For user CPU time I get 2.60s for llvm9 and 2.69s for llvm13. So indeed it would be good to have flamegraphs from you - or anything like that (callgrind,...). @VanyaBelyaev could you update your sentence from the [first post](https://github.com/root-project/root/issues/11927#issue-1502617659). > but about of factor of 2 in performance comes from the of 2 of this difference that comes the Friday build. I guess I know what you mean but I'd like to make sure :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11927#issuecomment-1360985210:612,perform,performance,612,https://root.cern,https://github.com/root-project/root/issues/11927#issuecomment-1360985210,1,['perform'],['performance']
Performance,I cannot reproduce this locally (I get other `Conditional jump or move depends on uninitialised value(s)`) and was generally under the impression that this is a frequent false positive of Valgrind *if building with compiler optimizations*. You may try with a full `Debug` build of ROOT (including `LLVM_BUILD_TYPE=Debug`) if you are down to investigating.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16123#issuecomment-2255461773:224,optimiz,optimizations,224,https://root.cern,https://github.com/root-project/root/issues/16123#issuecomment-2255461773,1,['optimiz'],['optimizations']
Performance,"I checked the performance with this code snippet:; ```c++; for (int i = 0; i < 1000000; ++i) {; std::vector<int> vect(20);; auto json = TBufferJSON::ToJSON(&vect);; }; ```; fluctuates between 2.95 and 3.10 seconds in the ROOT interpreter, both with and without this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13894#issuecomment-1768549739:14,perform,performance,14,https://root.cern,https://github.com/root-project/root/pull/13894#issuecomment-1768549739,1,['perform'],['performance']
Performance,I compiled the new doxygen on the ubuntu build machine and ran it on the `root-docu ` you sent me while ago. I get:; ```; [...]; finalizing index lists...; writing tag file...; Running plantuml with JAVA...; Running qhelpgenerator...; Building up file structure...; Insert custom filters...; Insert help data for filter section (1 of 1)...; Insert files...; Insert contents...; Insert indices...; Documentation successfully generated.; lookup cache used 11757/1048576 hits=120921 misses=12617; finished... ```; `Running qhelpgenerator...` seems to have passed ? right ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1046574550:443,cache,cache,443,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1046574550,1,['cache'],['cache']
Performance,"I didn't do anything special nor load anything, still that `Detail` namespace is there. I see this with debug builds with roottest enabled, besides that there is no particular setting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-899438729:33,load,load,33,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-899438729,1,['load'],['load']
Performance,"I discovered 2 memory hoarding issues (which were seen from code paths that were not scaling as expected with the number of dlopen/dlclose cycles). However, the underlying problem is still present but is due glic itself. As seen in https://sourceware.org/git/?p=glibc.git;a=tree;f=stdlib;h=b5a85b12ee3a72ea2a6df2be8bea9d0eba38eeb5;hb=refs/heads/release/2.28/master in the files `cxa_atexit.c` and `cxa_finalize.c. When a library is loaded, the atexit functions (including global object destructors) are added to a global linked list `__exit_funcs` (see [cxa_atexit](https://sourceware.org/git/?p=glibc.git;a=blame;f=stdlib/cxa_atexit.c;h=6d65f7e615bd8e9b0bcdb4655945d7ddfc514f2b;hb=refs/heads/release/2.28/master) ). In `cxa_finalize.c` that list is looped over (see line [34+](https://sourceware.org/git?p=glibc.git;a=blame;f=stdlib/cxa_finalize.c;hb=c41041bc2f84eb8f44ff36c3d14e55944185e665#l34)). However, the `__exit_funcs` is never cleaned up (and apparently element are not reused at least in our case). The number of iterations in that loop increased with the number of dlopen/dlclose cycles square. (Indeed the output of callgrind (with `--dump-inst=yes`) confirms that this (and even worse the inner loop) exactly as `(N*(N-1)/2) N=number of dlopen/dlclose`. So the best we can do is to adjust the test length to fit within the timeout (the length is to increase the chances of multi-thread clash).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12863#issuecomment-1561881205:432,load,loaded,432,https://root.cern,https://github.com/root-project/root/pull/12863#issuecomment-1561881205,2,"['load', 'multi-thread']","['loaded', 'multi-thread']"
Performance,"I don't see how this gets us closer to a working solution. Consider:; * Transaction 1 triggers the deserialization of; `int foo() // unused, no lib loaded.`; * Transaction 2:; ` void bar() { foo(); }`; `foo()`'s library will not be loaded, even though it is used (in Transaction 2) and comes from the PCM.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2009#issuecomment-391645020:148,load,loaded,148,https://root.cern,https://github.com/root-project/root/pull/2009#issuecomment-391645020,2,['load'],['loaded']
Performance,"I don't think so? I was proposing to retrieve the verbosity level once, before the RDF event loop, and then only call `R__DEBUG_HERE` if the verbosity level requires it (and the check on the cached verbosity level would not lock, so in the common case you'd have no locking). This is at the cost of ignoring changes in the verbosity level that occur during the event loop, of course. I'm open to better solutions :smile:. But I don't think it's reasonable, as a pattern, to unconditionally take locks every time we _might_ want to log something, it would mean that RDF cannot ever put a `R__DEBUG_HERE` or `R__INFO_HERE` in event loop code. `if (gDebug > 0) Info(...)` does not have that issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-734279781:191,cache,cached,191,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-734279781,1,['cache'],['cached']
Performance,"I don't want to speak to soon, but I think I fixed the issue @guitargeek, so feel free to review now. Note that the PR still has two fixup commits right now that I will squash with the right ones in the history after CI passes on Mac and Windows too (don't want to trigger the rebuild and get put in the queue again ;)).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10966#issuecomment-1191672949:304,queue,queue,304,https://root.cern,https://github.com/root-project/root/pull/10966#issuecomment-1191672949,1,['queue'],['queue']
Performance,"I expect that this will not get to the call to `ls_iterate_phdr`, and ROOT will just catch the segFault and return status code 139... But I can try. Perhaps there might be a way to 'load' explicitly xrootd?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-748037944:182,load,load,182,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-748037944,1,['load'],['load']
Performance,"I faced the following problem when compiling ROOT from source,. > [ 73%] Performing download step (git clone) for 'clad'. however, I was offline, and the whole build process interrupted. I think that building from source assumes you have downloaded everything and you can safely compile in an isolated environment. At least it must be specified somewhere beforehand that one needs a connection or *those* modules. Does your commit fix that in future versions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15416#issuecomment-2106187422:73,Perform,Performing,73,https://root.cern,https://github.com/root-project/root/pull/15416#issuecomment-2106187422,1,['Perform'],['Performing']
Performance,"I find doxygen really slow. I tried to optimize that and found many complaints (https://stackoverflow.com/questions/28628348/why-does-doxygen-always-reprocess-every-file). Maybe THtml still *could* be useful, at least partially.; UPD: I opened a feature request for `doxygen`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7295#issuecomment-787108556:39,optimiz,optimize,39,https://root.cern,https://github.com/root-project/root/issues/7295#issuecomment-787108556,1,['optimiz'],['optimize']
Performance,"I found the race condition, it was in the way we created the output `TFile`. It had to have `TContext` RAII object protecting the `gDirectory`. @dpiparo shall I dismiss your request for changes as they are already in?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073#issuecomment-334392625:12,race condition,race condition,12,https://root.cern,https://github.com/root-project/root/pull/1073#issuecomment-334392625,1,['race condition'],['race condition']
Performance,"I get the crash à Ubuntu:; ```; $ g++ pad.cxx $(root-config --glibs --cflags --libs) -o pad -g; $ ./pad. *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f12a2167c2a in __GI___wait4 (pid=1802950, stat_loc=stat_loc; entry=0x7ffc57fbd1e8, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27; #1 0x00007f12a2167beb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7ffc57fbd1e8, options=options; entry=0) at waitpid.c:38; #2 0x00007f12a20d70e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172; #3 0x00007f12a29bb82e in TUnixSystem::StackTrace() () from /home/sftnight/couet/build/lib/libCore.so; #4 0x00007f12a29b86b5 in TUnixSystem::DispatchSignals(ESignals) () from /home/sftnight/couet/build/lib/libCore.so; #5 <signal handler called>; #6 0x00007f12a26609d0 in TPad::ResizePad(char const*) () from /home/sftnight/couet/build/lib/libGpad.so; #7 0x00007f12a26596e5 in TPad::TPad(char const*, char const*, double, double, double, double, short, short, short) () from /home/sftnight/couet/build/lib/libGpad.so; #8 0x000056441c6732cd in main (argc=1, argv=0x7ffc57fbffc8) at pad.cxx:9; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #6 0x00007f12a26609d0 in TPad::ResizePad(char const*) () from /home/sftnight/couet/build/lib/libGpad.so; #7 0x00007f12a26596e5 in TPad::TPad(char const*, char co",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6374#issuecomment-694318306:566,optimiz,optimized,566,https://root.cern,https://github.com/root-project/root/issues/6374#issuecomment-694318306,2,['optimiz'],['optimized']
Performance,"I guess the first time you load (and run!) that macro, this is the situation:; ```; 30 s as in 6.22: good; 30 s + a few: should be OK; 2 mins: NO!; ```. If I didn't misread the numbers, it's now as fast as 6.22 used to be, about 30s.; I don't see the additional 10 s that @vgvassilev mentioned?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7774#issuecomment-932058234:27,load,load,27,https://root.cern,https://github.com/root-project/root/issues/7774#issuecomment-932058234,1,['load'],['load']
Performance,"I had a look ant it seems very nice. About the discrepancy between `REntry::Get` and `RNTupleModel::MakeField`, one may argue that `MakeField` might return a raw pointer too as the memory of the field is owned by the model. OTOH, while it's kind of easy to keep track of the lifetime of an `REntry` (I get it, I use it, I drop it), it seems more difficult to keep track of `RNTupleModel` lifetime, which is bound to the lifetime of `RNTupleWriter`.; Using raw pointers from `MakeField` is fine if we assume that the writer of the code only accesses the fields within the scope of `RNTupleWriter` (but the fields are accessible before the writer is created... more confusing). My personal opinion is that the `CreateEntry` way is the best option for the single thread case too:; - I define a model; - create a writer based on the model; - get the *buffer* (`REntry`) to write to (one per thread, for example, even if I have only one thread); - commit the *buffer* to the writer. In this way I own the `REntry`, but it has a layout in memory that is directly understood by the serialization process without the need of extra copies. We can also think of a way of constructing the writer from an *inlined* model, without the need for repeated calls to `MakeField`. Something like:; ```cpp; auto ntuple = RNTupleWriter::Recreate({; Field<std::uint32_t>(""id""),; Field<std::vector<float>>(""vpx""),; Field<std::vector<float>>(""vpy""),; Field<std::vector<float>>(""vpz""); }, ""NTuple"", kNTupleFileName);. auto entry = ntuple->CreateEntry();; // cache the pointer for faster access in single thread,; // but I could use TLS (or a framework equivalent) for multithreading; auto& vpx = *entry->Get<std::vector<float>>(""vpx"");; for(auto& event: all_events) {; vpx.clear();; vpx.push_back(42.);; ntuple->Fill(entry); // I would prefer ntuple->Write(entry) but it's a matter of taste; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8688#issuecomment-883396155:1533,cache,cache,1533,https://root.cern,https://github.com/root-project/root/pull/8688#issuecomment-883396155,1,['cache'],['cache']
Performance,"I had tried that too, but Helgrind gave an error on the 'atomic' library, not sure why. Thus I switched to the gROOTMutex. This is the warning I get with atomic:; ```; Possible data race during read of size 1 at 0x1FFEFDF270 by thread #2; Locks held: none; at 0x4E5E9BB: load (atomic_base.h:396); by 0x4E5E9BB: std::atomic<bool>::operator bool() const (atomic:86); by 0x7AB8C47: TApplication::IsRunning() const (TApplication.h:148); by 0x7AB741E: TThread::XARequest(char const*, int, void**, int*) (TThread.cxx:1032); by 0x7AB6FE8: TThread::Printf(char const*, ...) (TThread.cxx:950); by 0x4E5F218: ThSFMC01::ThreadFunction() (ThSFMC01.cpp:51); by 0x4E5E88A: RThread::ThreadHandle(void*) (RThread.cpp:258); by 0x7AB6A70: TThread::Function(void*) (TThread.cxx:828); by 0x4C38C26: ??? (in /usr/lib/valgrind/vgpreload_helgrind-amd64-linux.so); by 0x60E86DA: start_thread (pthread_create.c:463); by 0x6D6071E: clone (clone.S:95). This conflicts with a previous write of size 1 by thread #1; Locks held: none; at 0x4E5EA37: store (atomic_base.h:374); by 0x4E5EA37: std::__atomic_base<bool>::operator=(bool) (atomic_base.h:267); by 0x4E5E986: std::atomic<bool>::operator=(bool) (atomic:79); by 0x5A3F0FB: TApplication::Run(bool) (TApplication.cxx:1622); by 0x11D768: main (main.cxx:112); Address 0x1ffefdf270 is on thread #1's stack; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8379#issuecomment-857235531:271,load,load,271,https://root.cern,https://github.com/root-project/root/pull/8379#issuecomment-857235531,1,['load'],['load']
Performance,I have a decent likelyhood of finding a way to prevent this kind of optimization (i.e. make a change to TObject::TObject rather than all derived classes).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4320#issuecomment-526698905:68,optimiz,optimization,68,https://root.cern,https://github.com/root-project/root/pull/4320#issuecomment-526698905,1,['optimiz'],['optimization']
Performance,"I have a general comment about adding this extra level of parallelism to the branch reading. While it might indeed help in cases where there is only one top-level branch that is split in sub-branches, it could also bring ""too much"" parallelism in some other cases. The performance of the top-level branch parallelism heavily depends on the granularity of the branches. For small branches, the creation of a task does not really pay off. I fear this problem might be exacerbated if we also operate in sub-branches. Moreover, as we offer it now, we won't have any way for the user to select how deep in parallelisation terms they want to go, meaning every time we run GetEntry with IMT on all the parallelism levels will be activated. On the other hand, another thing that hindered performance in the top-level branch parallelism was synchronization. Now there is one synchronization point per entry, which can be problematic if there is load unbalance (that is why we sorted the branches by time). Adding a second level of parallelism means we will have one more synchronization point per top-level branch and we don't know how this can impact performance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1468#issuecomment-352709176:269,perform,performance,269,https://root.cern,https://github.com/root-project/root/pull/1468#issuecomment-352709176,4,"['load', 'perform']","['load', 'performance']"
Performance,"I have addressed some of @Axel-Naumann's comments. Travis test fails, but we want to ignore the change it introduces. Maybe it's a bad clang-format configuration? See below:. ```diff; diff --git a/tmva/tmva/inc/TMVA/DNN/Minimizers.h b/tmva/tmva/inc/TMVA/DNN/Minimizers.h; index a310706..517faa3 100644; --- a/tmva/tmva/inc/TMVA/DNN/Minimizers.h; +++ b/tmva/tmva/inc/TMVA/DNN/Minimizers.h; @@ -59,7 +59,7 @@ public:; ; private:; size_t fBatchSize; ///< Batch size to use for the training.; - size_t fStepCount; ///< Number of steps performed in the current training session; + size_t fStepCount; ///< Number of steps performed in the current training session; size_t fConvergenceSteps; ///< Number of training epochs without considerable; ///< decrease in the test error for convergence.; size_t fConvergenceCount; ///< Current number of training epochs without; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/494#issuecomment-293512573:531,perform,performed,531,https://root.cern,https://github.com/root-project/root/pull/494#issuecomment-293512573,2,['perform'],['performed']
Performance,"I have been able to find some time to restart with this (God bless Christmas break). `gSystem->Load(""libDict.so"")` does not seem to help:; ```; $ rootcling -cxxmodule -f dict.cpp MyClass.h OtherClass.h -moduleMapFile=dict.modulemap LinkDef.hLinkDef.h; $ g++ -shared -fPIC -I$ROOTSYS/include dict.cpp -o libDict.so ; $ root; root [0] gSystem->Load(""libDict.so""); Module dict not found.; (int) 0; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10512#issuecomment-1365753895:95,Load,Load,95,https://root.cern,https://github.com/root-project/root/issues/10512#issuecomment-1365753895,2,['Load'],['Load']
Performance,"I have in the mean time found the root cause why my patch fails:; - It is due to copy relocations of <iostream> symbols from libstdc++; - Crashes happen whenever cling wants to output text via cout / cerr / etc.; - The problem is that there are 2 instances of cout / cerr: The first created by the executable itself through copy relocation, when the executable prints something via cout. The second created by libCling loaded with RTLD_DEEPBIND. (By design, RTLD_DEEPBIND links to libstdc++ first before checking the global namespace, so it does not see the copy-relocated symbol.). The problem can be avoided if executables are compiled with -fPIC as well.; I just tried locally to compile the failing ROOT ctests with -fPIC and this fixed the segmentation faults.; The question is whether this is a proper solution, since it would require to compile all executables with -fPIC. On the other hand, I don't know how to fix this in another way. Perhaps this could be enabled via a special CMake option for ROOT, which enables RTLD_DEEPBIND for libCling and -fPIC for all executables.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4668#issuecomment-564007525:419,load,loaded,419,https://root.cern,https://github.com/root-project/root/pull/4668#issuecomment-564007525,1,['load'],['loaded']
Performance,"I have managed to pinpoint the reasons for the difference in behavior:; 1. When attempting to build `v6-28-00-patches`, apparently I'd managed to lose the patch to LLVM/Clang's `include/c++/v1/module.modulemap`. When I restore this patch, I get a successful build.; 2. With our own build procedure (""v6_27_99f2""), it appears that the diagnostic patch I was using at your suggestion:; ```.diff; --- interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp~	2023-01-10 11:09:06.666075151 -0600; +++ interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp	2023-01-10 11:34:45.644464781 -0600; @@ -105,6 +105,7 @@; #include <algorithm>; #include <cassert>; #include <cstdint>; +#include <cstdio>; #include <cstdlib>; #include <cstring>; #include <ctime>; @@ -2498,6 +2499,8 @@; // did not result in us loading a module file for that submodule. For; // instance, a cross-top-level-module 'conflict' declaration will hit this.; unsigned ID = getLocalOrImportedSubmoduleID(Mod);; + fprintf(stderr, ""Mod=%X\n"", Mod);; + fprintf(stderr, ""Submodule=%s\n"", Mod->Name.c_str());; assert((ID || !Mod) &&; ""asked for module ID for non-local, non-imported module"");; return ID;; --- interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriterDecl.cpp~	2023-01-06 05:04:43.000000000 -0600; +++ interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriterDecl.cpp	2023-01-10 13:21:47.554190854 -0600; @@ -26,6 +26,8 @@; using namespace clang;; using namespace serialization;. +#include <cstdio>; +; //===----------------------------------------------------------------------===//; // Declaration serialization; //===----------------------------------------------------------------------===//; @@ -361,6 +363,8 @@; Record.push_back(D->isTopLevelDeclInObjCContainer());; Record.push_back(D->getAccess());; Record.push_back(D->isModulePrivate());; + D->dump();; + if (D->getOwningModule()) fprintf(stderr, ""D->getOwningModule()->Name=%s"", D->getOwningModule()->Name.c_str());; Record.push_back(Writer.get",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1409129986:815,load,loading,815,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1409129986,1,['load'],['loading']
Performance,"I have more strange effect. I do not compile davix and therefore after opening the file with:; `TFile::Open(""https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root"");` ; I getting instance of `TWebFile`. And if enable `gDebug=1`, one clearly sees ~1.5s per each http request. Moreover, when I try to perform `TTree::Draw()` from the `TBrowser` (web and normal one), `TWebFile` submits multirange request, but not able to parse result of it. Producing several errors - it fully crashes, including my console. Seems to be, it is another issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13018#issuecomment-1592493876:338,perform,perform,338,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592493876,1,['perform'],['perform']
Performance,"I have now avoided the interpreter call, which caused some performance regression. Then I did some benchmarking with:; ```bash; perf stat -r 100 -B python -c 'import ROOT; ROOT._finalSetup()'; ```; It takes about 0.45 seconds. But there is no significant difference with or without this PR (seems to depend on what else is running on my system at that moment I guess), sometimes one is faster sometimes the other.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15788#issuecomment-2160789690:59,perform,performance,59,https://root.cern,https://github.com/root-project/root/pull/15788#issuecomment-2160789690,1,['perform'],['performance']
Performance,I have performed another iteration:; - removal of unneeded bvh headers; - fix compile error on gcc 8.5; - add README to bvh directories; - squash everything into single commit; - removal of `getenv` usage,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442#issuecomment-2360890196:7,perform,performed,7,https://root.cern,https://github.com/root-project/root/pull/16442#issuecomment-2360890196,1,['perform'],['performed']
Performance,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```; $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu; Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b; Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu; 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec; Testing Method DL with SGD Optimizer for CPU backend:; libc++abi: __cxa_guard_acquire detected recursive initialization; CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:; 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed); Errors while running CTest; ```. When running all the TMVA tests:; ```; $ ctest -R ""^TMVA"" -j6; ...; 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:; 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed); 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed); 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed); 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed); 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed); 	362 - TMVA-DNN-Regression-Cpu (Failed); 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed); Errors while running CTest; ```; All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13002#issuecomment-1594949419:234,Optimiz,Optimization-Cpu,234,https://root.cern,https://github.com/root-project/root/issues/13002#issuecomment-1594949419,10,['Optimiz'],"['Optimization-Cpu', 'Optimizer']"
Performance,"I have to admit, I didn't try this in detail... In the ATLAS code we set the C++ standard using the `CMAKE_CXX_STANDARD` cache variable. And as far as I understand from its documentation (https://cmake.org/cmake/help/v3.1/variable/CMAKE_CXX_STANDARD.html), its value is overridden by setting the `CXX_STANDARD` property explicitly on any target in the project. So what I'm worried about is a situation when for instance ROOT was compiled in C++14 mode, but I'd like to build my own code in C++17 mode. I **think** that setting `CMAKE_CXX_STANDARD` to 17, while I link to an imported library that carries `CXX_STANDARD=14` with it, will result in my own code being built in C++14 mode. But I should probably run some tests on it. Maybe I'm wrong...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1466#issuecomment-351731777:121,cache,cache,121,https://root.cern,https://github.com/root-project/root/pull/1466#issuecomment-351731777,1,['cache'],['cache']
Performance,I have updated the list of 'owners' and would like to see (experimentally) what is the effect of it for assigning PR. Clearly we need to fine tune the list with more fine grain assignments.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/840#issuecomment-324291657:142,tune,tune,142,https://root.cern,https://github.com/root-project/root/pull/840#issuecomment-324291657,1,['tune'],['tune']
Performance,"I just checked on my Manjaro with cmake 3.20, and it seems to be working, even though messages are misleading:; ```; -- Could NOT find Python3 (missing: Python3_NumPy_INCLUDE_DIRS NumPy) (found version ""3.9.4""); -- Could NOT find Python2 (missing: Python2_NumPy_INCLUDE_DIRS NumPy) (found version ""2.7.18""); -- Found GCC. Major version 10, minor version 2; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthread; -- Looking for pthread_create in pthread - found; -- Found Threads: TRUE ; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Success; -- ROOT Platform: linux; -- ROOT Compiler: GNU 10.2.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'); -- Compiler Flags: -std=c++14 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG; -- ROOT default compression algorithm: zlib; -- PyROOT will be built for versions 3.9.4 (Main) and 2.7.18; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8097#issuecomment-832873148:420,Perform,Performing,420,https://root.cern,https://github.com/root-project/root/issues/8097#issuecomment-832873148,4,['Perform'],['Performing']
Performance,I just took a quick look on this. The problems stated now is:; 1. Clang will load modules eagerly.; 2. The name lookup is not so cheap.; 3. We will load a lot of source location informations. Do I understand right? Then we can try to add these things separately to llvm issues pages. Then we can try to work on then separately.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1617152645:77,load,load,77,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1617152645,2,['load'],['load']
Performance,"I know the question, but I don't think anyone knows the answer. The code that gets slowed down is vtable-heavy code (at least I think that's the symptom), i.e. ""legacy"" code. We need to motivate people to migrate to today's code, so that's what we should be optimize for. We are not making legacy code impossible, but we are indeed pessimizing it. I'd be happy :-) to have someone with `opt` knowledge figure out which pass it is that blows up. Maybe @hahnjo could give us a hand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9301#issuecomment-971912708:258,optimiz,optimize,258,https://root.cern,https://github.com/root-project/root/pull/9301#issuecomment-971912708,1,['optimiz'],['optimize']
Performance,"I know this is not a small change, so any comments are welcome!. Background:; RooCintUtils was providing a wrapper between Cint and roofit. This implementation is very old, and is; using Cint iteration interface a lot. Recently we were trying to kill; RooCintUtils code where its using iteration and to change them to new; Cling interface in order to improve the performance. RooCintUtils is an utility class, so this is internal namespace which is only used inside roofit.; Since there are just 3 methods left, this RooCintUtils is no longer; worth spending a file. Let's delete this and migrate methods to; RooFactoryWSTool.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1722:363,perform,performance,363,https://root.cern,https://github.com/root-project/root/pull/1722,1,['perform'],['performance']
Performance,"I looked into the PR. There are two point. 1. You add ""Browse..."" button to load files using default file open dialog from the web browser. Does it make sense? We already have file browsing on left side. It can fully confuse users when they work with remote system. I propose to ""hide"" this functionality for now and provide in ""Expert"" mode. And one has to implement correspondent ""Save as ..."" button which allows to save text editor content into browser host system. As it done in JSROOT with saving png files:. https://github.com/root-project/jsroot/blob/master/scripts/JSRootPainter.v6.js#L3982-L3998. 2. You are using ToolHeader from **tnt** library. This library is not included into ROOT openui5 package, therefore does not work properly in ""offline"" mode. Are there any other alternatives in libraries like **m** or **ui**? If not, I have to include **tnt** - it seems to be not that big.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4646#issuecomment-575560827:76,load,load,76,https://root.cern,https://github.com/root-project/root/pull/4646#issuecomment-575560827,1,['load'],['load']
Performance,"I made a macro:; ```; void changelabelangle() {; auto h = new TH1D(""h"", """", 5, 0, 5);; int align = 13;; for (int bin = 1; bin <=11; bin++) {; if (bin < 2) {; align = 21;; } else if (bin > 7) {; align = 22;; } else {; align = 23;; }; h->GetXaxis()->ChangeLabel(bin, bin*5, -1, align, -1, 43, """");; }; h->Draw();; }; ```; I get this . It seems correct for me.; <img width=""622"" alt=""Screenshot 2022-03-31 at 10 56 04"" src=""https://user-images.githubusercontent.com/4697738/161017385-98e9d4a8-c06f-4a00-b908-18598b6ad09a.png"">. Labels are optimized. One way to retrieve the number of labels after optimization is:; ```; void number_of_labels() {; double x1 = -0.123;; double x2 = 5.87;; auto h = new TH1D(""h"", """", 5, x1, x2);; h->Draw();; Int_t divxo = 0;; Double_t x1o = 0.;; Double_t x2o = 0.;; Double_t bwx = 0;; THLimitsFinder::Optimize(x1, x2,10,x1o,x2o,divxo,bwx,"""");; printf(""number of labels = %d\n"",divxo+1);; }; ```; May be a new method with that code in TAxis/TGaxis will be good.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10279#issuecomment-1084302388:536,optimiz,optimized,536,https://root.cern,https://github.com/root-project/root/issues/10279#issuecomment-1084302388,3,"['Optimiz', 'optimiz']","['Optimize', 'optimization', 'optimized']"
Performance,I meant it was gSystem->Load ing even when gSystem->DynamicPathName fails. Changed commit message,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2167#issuecomment-396272102:24,Load,Load,24,https://root.cern,https://github.com/root-project/root/pull/2167#issuecomment-396272102,1,['Load'],['Load']
Performance,"I measured three times on each algorithms and wrote the averages in the table. I think the performance between zlib-6 and zlib-1 are up and down but quite similar in term of decompression. I could double check it later. . Sent from my iPhone. > On Oct 1, 2015, at 11:17, pcanal notifications@github.com wrote:; > ; > @bbockelm The CMS if I am not mistaken is; > ; > Algorithm decompression(real time) decompression(cpu time) Compressed File Size; > zlib 54.13 MB/s 63.28 MB/s 1.6 GB; > lzma 22.47 MB/s 23.41 MB/s 1.2 GB; > lz4 56.36 MB/s 66.06 MB/s 1.8 GB; > zlib-1 54.58 MB/s 62.78 MB/s 1.8 GB; > Where at same compression level the run-time gain is 5% (and even less compared to zlib-6) ....; > hummm the numbers are odd .... zlib-6 is decompressing faster than zlib-1? Are the times divided by the compressed or decompressed size?; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/81#issuecomment-144794265:91,perform,performance,91,https://root.cern,https://github.com/root-project/root/pull/81#issuecomment-144794265,1,['perform'],['performance']
Performance,"I noticed that `roofit_legacy_eval_backend` variable in CMake was not; cached, and therefore it didn't propagate to the RooFit test; subdirectories. This meant several unit tests were not executed. This commit is fixing that. Furthermore, another commit in this PR reduces the time of the tutorial tests by reducing the number of toys in the RooStats tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14919:71,cache,cached,71,https://root.cern,https://github.com/root-project/root/pull/14919,1,['cache'],['cached']
Performance,"I noticed that in the logs of the CI runs of this particular PR, The two relevant tutorials are being run 3 times on the windows nodes, e.g. searching for; ```; Start 959: tutorial-v7-concurrentfill.cxx; ```; Returns 3 results. Now this is extremely weird, but I could not see it happening in any other PR or in the nightlies. I even triggered a [CI run](https://github.com/root-project/root/pull/14481) to print the target tutorials created at configuration time and that still returned only 1 target tutorial. At this point I don't see what can be immediately improved in the tutorials to avoid the sporadic failures, I am closing this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14472#issuecomment-1916191292:184,concurren,concurrentfill,184,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1916191292,1,['concurren'],['concurrentfill']
Performance,"I noticed while debugging Minuit, that `MnMachinePrecision`'s constructor is called many times during minimization. Every time it is created, it goes through a loop to computes the machine precision. Since the number is the same every time, this is a waste of CPU cycles. This patch runs the loop only once and caches the result. New instances of MnMachinePrecision use the pre-computed value. The patch has no side effects.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2215:311,cache,caches,311,https://root.cern,https://github.com/root-project/root/pull/2215,1,['cache'],['caches']
Performance,I previously implemented a check for ensuring that we never again; run into the problem that we get race conditions between generating; and linking dictionaries. This check however was commented out as; it falsely reported some dictionaries as being a possible source; for race conditions. The reason for this is that there are a few; libraries that only use ROOT_LINKER_LIBRARY for linking but; not ROOT_GENERATE_DICTIONARY for generating a dictionary. This; commit adds a whitelist for dictionaries that are allowed to; call ROOT_LINKER_LIBRARY like this and don't introduce any race; conditions (as they don't call ROOT_GENERATE_DICTIONARY and don't; have any depndency on a G__*.cxx source file).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3395:100,race condition,race conditions,100,https://root.cern,https://github.com/root-project/root/pull/3395,2,['race condition'],['race conditions']
Performance,"I pushed a new version with some further cleanups (unused or unfinished code, reducing common code for priority queue). I also made sure to be as thread-safe as possible (use of `static thread_local` instead of `static` as well as protecting the safety-cache writing with a mutex)... although I mind the cost of doing so. However, please note that the original code itself is not thread-safe since it has state modified by routines called from TGeoNavigator. This will not be addressed here because it has nothing to do with the proposed changes. Until then, one should potentially forbid use of TGeoParallelWorld in combination with multiple TGeoNavigators.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442#issuecomment-2358266984:112,queue,queue,112,https://root.cern,https://github.com/root-project/root/pull/16442#issuecomment-2358266984,2,"['cache', 'queue']","['cache', 'queue']"
Performance,"I rebased to get the Windows fix locally. Here are some files for testing:; * [Minuit2-6.13.1-Source.tar.gz](https://github.com/root-project/root/files/1770290/Minuit2-6.13.1-Source.tar.gz); * [Minuit2-6.13.1-Source.zip](https://github.com/root-project/root/files/1770292/Minuit2-6.13.1-Source.zip); * [Minuit2-6.13.1-Darwin.tar.gz](https://github.com/root-project/root/files/1770293/Minuit2-6.13.1-Darwin.tar.gz); * [Minuit2-6.13.1-Linux.tar.gz](https://github.com/root-project/root/files/1770294/Minuit2-6.13.1-Linux.tar.gz); * Zipped file with original `.sh` in it (due to GitHub not accepting `.sh` files): ; [Minuit2-6.13.1-Linux.sh.zip](https://github.com/root-project/root/files/1770500/Minuit2-6.13.1-Linux.sh.zip); * Zipped file with original `.exe` in it (due to GitHub not accepting `.exe` files): [Minuit2-6.13.1-win32.zip](https://github.com/root-project/root/files/1770490/Minuit2-6.13.1-win32.zip). (Linux packages created with: `docker run -v (pwd):/root/root -it alpine`, making and changing to a `build-linux` directory, running `apk --no-cache add g++ make cmake` then `cmake ..` followed by `make package`) . Windows package made by installing VC17, NSIS, CMake, and running `""C:\Program Files\CMake\bin\cmake.exe"" ..`, `""C:\Program Files\CMake\bin\cmake.exe"" --build .`, `""C:\Program Files\CMake\bin\cmake.exe"" --build . --target package`. I can't upload a `.exe` or `.sh` file to GitHub comments, so those are placed in a zip file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-369508483:1057,cache,cache,1057,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-369508483,1,['cache'],['cache']
Performance,I removed the other two commits because I still see a race condition on `TList::RecursiveRemove` that causes a crash of the TBufferMerger test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/666#issuecomment-309809953:54,race condition,race condition,54,https://root.cern,https://github.com/root-project/root/pull/666#issuecomment-309809953,1,['race condition'],['race condition']
Performance,"I replied via email, but GitHub does not seem to have picked it up, so posting here for good measure:. > We cannot control what's in the static init of user libraries. They can use interpreter services. This approach used to work, why locking is necessary? Aren't we 'just' reading?. Other threads could be trying to write the symbol tables at the same time, so we still need to lock them for reading. In your case your lookup enters a generator (HostLookupLazyFallbackGenerator), so it will end up writing as well as reading. :). The right thing to do here is to refactor HostLookupLazyFallbackGenerator to do its work in two steps:; Step 1: Identify libraries that could be loaded to provide the requested symbols, and record their paths but do not load them yet. Instead you should record a map of libraries to the symbols they provide. E.g. [ ( ""liba.so"", [ ""foo"", ""bar"" ] ), ( ""libb.so"", [ ""baz"" ] ) ]. For each library/symbol-set pair you can install a custom MaterializationUnit using JITDylib::define.; Step 2: In the custom MaterializationUnit's materialize function you'll walk the map from before, do the library load, and then resolve the symbols. Since step 2 happens outside the session lock the idea is that it should prevent the kind of deadlock that you're seeing. Unfortunately if you can reference JIT'd code from static initializers in precompiled code then there's still a chance for similar failures. Consider a precompiled ""libx.so"" containing a global ""x"" and a static constructor that calls a JIT'd function ""f"" which uses the ""x"" from ""libx.so"" (a circular reference). I believe this will result in starvation or deadlock (depending on the number of threads involved). The failure path looks like this:. 1. A lookup for ""x"" enters the generator, which discovers that ""libx.so"" provides ""x"" and creates a MaterializationUnit, MU, to load ""libx.so"" and resolve ""x"".; 2.1 Outside the lock, MU dlopens ""libx.so""... ; 2.2. dlopen runs the initializers for ""libx.so"" which triggers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1104564382:676,load,loaded,676,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1104564382,2,['load'],"['load', 'loaded']"
Performance,"I see the crash on Ubuntu with that one:; ```; $ ./canvas. *** Break *** floating point exception. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f99355bbc2a in __GI___wait4 (pid=474567, stat_loc=stat_loc; entry=0x7ffe7e74a968, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27; #1 0x00007f99355bbbeb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7ffe7e74a968, options=options; entry=0) at waitpid.c:38; #2 0x00007f993552b0e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172; #3 0x00007f9935e0f82e in TUnixSystem::StackTrace() () from /home/sftnight/couet/build/lib/libCore.so; #4 0x00007f9935e0c6b5 in TUnixSystem::DispatchSignals(ESignals) () from /home/sftnight/couet/build/lib/libCore.so; #5 <signal handler called>; #6 0x00007f9935ab4ad0 in TPad::ResizePad(char const*) () from /home/sftnight/couet/build/lib/libGpad.so; #7 0x00007f9935a7dc68 in TCanvas::Build() () from /home/sftnight/couet/build/lib/libGpad.so; #8 0x00007f9935a7e5a4 in TCanvas::Constructor(char const*, char const*, int, int) () from /home/sftnight/couet/build/lib/libGpad.so; #9 0x00007f9935a809c1 in TCanvas::TCanvas(char const*, char const*, int, int) () from /home/sftnight/couet/build/lib/libGpad.so; #10 0x0000563a3676a237 in main (argc=1, argv=0x7ffe7e74d7c8) at canvas.cxx:5; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #6 0x00007f9935",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6379#issuecomment-696598835:519,optimiz,optimized,519,https://root.cern,https://github.com/root-project/root/issues/6379#issuecomment-696598835,2,['optimiz'],['optimized']
Performance,"I see the problem also on Mac with interactive ROOT. ; ```; root [0] TCanvas* C= new TCanvas(""canvas"",""canvas"",-4,-28);. 2020-09-22 11:25:25.425 root.exe[23095:6904258] QuartzPixmap: -resizeW:H:, CGBitmapContextCreateWithData failed; Error in <TGQuartz::SetDoubleBufferON>: QuartzPixmap initialization failed; Warning in <TCanvas::ResizePad>: canvas height changed from 32000 to 10. 2020-09-22 11:25:25.742 root.exe[23095:6904258] *** Assertion failure in -[_NSCGSWindow setFrame:], /AppleInternal/BuildRoot/Library/Caches/com.apple.xbs/Sources/AppKit/AppKit-1894.60.100/CGS.subproj/NSCGSWindow.m:1010; 2020-09-22 11:25:25.744 root.exe[23095:6904258] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Invalid parameter not satisfying: CGRectContainsRect(CGRectMake((CGFloat)INT_MIN, (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN, (CGFloat)INT_MAX - (CGFloat)INT_MIN), frame)'; *** First throw call stack:; (; 	0 CoreFoundation 0x00007fff36641b57 __exceptionPreprocess + 250; 	1 libobjc.A.dylib 0x00007fff6f4885bf objc_exception_throw + 48; 	2 CoreFoundation 0x00007fff3666ad08 +[NSException raise:format:arguments:] + 88; 	3 Foundation 0x00007fff38d5ce9d -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 191; 	4 AppKit 0x00007fff33988b55 -[_NSCGSWindow setFrame:] + 428; 	5 AppKit 0x00007fff33987add _NSCreateWindowWithOpaqueShape2 + 241; 	6 AppKit 0x00007fff33986920 -[NSWindow _commonAwake] + 1121; 	7 AppKit 0x00007fff339864bb NSWindowWakeDeferredIfNeeded + 94; 	8 AppKit 0x00007fff3398637d -[NSWindow(NSFullScreen) _resolveAutomaticEnterFullScreenFlags] + 22; 	9 AppKit 0x00007fff33986333 -[NSWindow makeKeyAndOrderFront:] + 27; 	10 libGCocoa.so 0x000000011a10369b -[QuartzWindow makeKeyAndOrderFront:] + 75; 	11 libGCocoa.so 0x000000011a1042dd -[QuartzWindow mapRaised] + 77; 	12 libGCocoa.so 0x000000011a10bf44 _ZN7TGCocoa9MapRaisedEm + 196; 	13 libGui.so 0x000000011a196fee _ZN7TGFrame9MapRaisedEv + 14; 	14 libG",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6379#issuecomment-696609471:516,Cache,Caches,516,https://root.cern,https://github.com/root-project/root/issues/6379#issuecomment-696609471,1,['Cache'],['Caches']
Performance,"I see the test passes in the CI, so it could be a problem with my environment. ; The hanging test is `TestMPMessenger.StressPubSub`; Here are the last lines of the log:; ```[ RUN ] TestMPMessenger.SigStop; first send message to queue...; PID 493293 sends M2Q 1; sleep for 2 seconds...; PID 493330 receives M2Q 1; received 1 on queue; SIGSTOPping all children...; send another message to queue...; PID 493293 sends M2Q 2; sleep for 2 seconds...; SIGCONT queue and worker 1...; sleep for 2 seconds...; PID 493330 receives M2Q 2; received 2 on queue; PID 493330 sends Q2M 3; SIGCONT worker 2...; PID 493293 receives Q2M 3; Messenger dtor on PID 493293; handled Terminated on PID 493330; handled Terminated on PID 493328; handled Terminated on PID 493329; Messenger dtor on PID 493330; Messenger dtor on PID 493328; Messenger dtor on PID 493329; [ OK ] TestMPMessenger.SigStop (6004 ms); [ RUN ] TestMPMessenger.StressPubSub; Messenger dtor on PID 493525; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-979231373:228,queue,queue,228,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-979231373,5,['queue'],['queue']
Performance,"I see you access http://root.cern.ch/files/usa.root using CACHEREAD in all places where it is used (tutorial, stressgraphics, THistpainter) ... fine with me ... but I do not understand why you changed stressgraphics.ref .... ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/155#issuecomment-227978792:58,CACHE,CACHEREAD,58,https://root.cern,https://github.com/root-project/root/pull/155#issuecomment-227978792,1,['CACHE'],['CACHEREAD']
Performance,"I see your issue with thread safety. However, your proposed solutions will not work for the following reasons. The assignment of the static variable in GetRootSys depends on the environment variable ROOTSYS (as does the others since they depend on GetRootSys). If the static variables are assigned at initialization time, these assignments will be done when the program is loaded before the program starts. But at this point the value of the ROOTSYS environment variable is not always set to the correct value. If the program is started without ROOTSYS set, TUnixSystem::Init will initialize it. The assignment of the static variable in GetRootSys must therefore be done after this. I have added calls to all the functions in the TROOT constructor, after the call to InitSystem. This way all the static variables get assigned by the TROOT constructor (which I believe is run single threaded). All subsequent calls to the functions will then not change the value of the static variables and are therefore thread safe. Will this work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/130#issuecomment-215662452:373,load,loaded,373,https://root.cern,https://github.com/root-project/root/pull/130#issuecomment-215662452,1,['load'],['loaded']
Performance,"I see, I'm not sure if string is in PCH and maybe includes can stay for PCH, but at least for modules we know that we're loading stl and libc at startup time, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2755#issuecomment-455552279:121,load,loading,121,https://root.cern,https://github.com/root-project/root/pull/2755#issuecomment-455552279,1,['load'],['loading']
Performance,I see. So actually this is a case where the limit is not known to the OS/through-getrlimit. How can we detect locally the limit of concurrent transfers for a given server?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11276#issuecomment-1235438496:131,concurren,concurrent,131,https://root.cern,https://github.com/root-project/root/issues/11276#issuecomment-1235438496,1,['concurren'],['concurrent']
Performance,"I still get exactly the error described in the summary with `master`:; ```; ----------------------------------------------------------------------------; | Welcome to ROOT 6.31/01 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Feb 05 2024, 07:24:23 |; | From heads/ntuple-RPageNullSink@v6-31-01-913-gfdecca9b4d |; | With clang version 16.0.6 (Red Hat 16.0.6-2.module_el8.9.0+3621+df7f7146) |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ----------------------------------------------------------------------------. root [0] .rawInput; Using raw input; root [1] std::vector<short> getV() { return {42}; }; root [2] .rawInput; Not using raw input; root [3] getV()[0].foo(); ROOT_prompt_3:1:10: error: member reference base type 'value_type' (aka 'short') is not a structure or union; getV()[0].foo(); ~~~~~~~~~^~~~; root [4] getV()[0]; IncrementalExecutor::executeFunction: symbol '_ZSt8_DestroyIPssEvT_S1_RSaIT0_E' unresolved while linking [cling interface function]!; You are probably missing the definition of void std::_Destroy<short*, short>(short*, short*, std::allocator<short>&); Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7970#issuecomment-1926373568:1202,load,load,1202,https://root.cern,https://github.com/root-project/root/issues/7970#issuecomment-1926373568,1,['load'],['load']
Performance,"I still had one trick up my sleeve: I dumped the generated IR from the ""bad"" and the ""good"" compiler to see which part of the code is actually modified. This turns out to be `RooAddPdf::checkObservables`:; https://github.com/root-project/root/blob/e8ba1328693f89af8299904ce3db7bdc8f57c535/roofit/roofitcore/src/RooAddPdf.cxx#L825-L840; where Clang now optimizes the inlined `RooArgList::at`:; https://github.com/root-project/root/blob/e8ba1328693f89af8299904ce3db7bdc8f57c535/roofit/roofitcore/inc/RooArgList.h#L109-L116; and removes the `return nullptr` in case of range errors. The reasoning is that `RooAddPdf::checkObservables` calls a member function on `pdf`, so it being `nullptr` is UB and can be optimized out, and dereferences `coef`, which is also UB on a `nullptr` (although it works because `RooAbsArg::observableOverlaps` takes a reference, ie no pointer dereference actually takes place). If I remove the `return nullptr` statically in the code like; ```diff; diff --git a/roofit/roofitcore/inc/RooArgList.h b/roofit/roofitcore/inc/RooArgList.h; index c5a49bd1b6..bb4afbd12d 100644; --- a/roofit/roofitcore/inc/RooArgList.h; +++ b/roofit/roofitcore/inc/RooArgList.h; @@ -109,9 +109,6 @@ public:; /// Return object at given index, or nullptr if index is out of range; inline RooAbsArg* at(Int_t idx) const {. - if (idx >= static_cast<Int_t>(_list.size())); - return nullptr;; -; return _list[idx];; }. ```; I see the same crash happening with GCC. What I see with a debugger is that `_pdfList` has size 2 while `_coefList` has size 1, so the second iteration of the loop passes `nullptr` for `coef`. This is ""filtered out"" later in `RooAbsArg::dependsOn` where `ignoreArg` is also `nullptr` and things magically work. So, @guitargeek, there are a number of possibilities:; 1. Modify the loop to only run until `std::min(_pdfList.size(), _coefList.size()`.; 2. Add explicit `nullptr` checks for `pdf` and `coef` before calling `observableOverlaps` so the compiler cannot optimize them out",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9547#issuecomment-1011927535:352,optimiz,optimizes,352,https://root.cern,https://github.com/root-project/root/issues/9547#issuecomment-1011927535,2,['optimiz'],"['optimized', 'optimizes']"
Performance,"I still have the old doxygen on that machine and when I run it on `root-docu` I get:; ```; Running qhelpgenerator...; Error in line 1: Opening and ending tag mismatch.; error: failed to run qhelpgenerator on index.qhp; lookup cache used 11757/1048576 hits=120921 misses=12617; finished...; ```; So, yes, something has changed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1046576313:226,cache,cache,226,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1046576313,1,['cache'],['cache']
Performance,"I tested it locally and it seems to do the job now. If two processes get to the creation of the cache directory hierarchy precisely at the same time, it seems that there can still be a race there where one process fails to create the cache directory but it also doesn't see the full hierarchy already there. In that case there is no hard failure though: the process that fails to create the cache directory simply reads the file remotely rather than caching it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9479#issuecomment-1006504826:96,cache,cache,96,https://root.cern,https://github.com/root-project/root/pull/9479#issuecomment-1006504826,3,['cache'],['cache']
Performance,"I think a reasonable fix is to include `LLVMConfig.cmake` before setting any LLVM variables, and skipping the `LLVMConfig.cmake` loading in Cling if it is built as part of ROOT. I will also test whether we can just skip loading `LLVMConfig.cmake` all together. Btw I think linking LLVM statically also solves https://github.com/root-project/root/issues/12152, but I haven't check that explicitly yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1669280121:129,load,loading,129,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1669280121,2,['load'],['loading']
Performance,"I think it is fine to change the test as the new code fit better the intent. However, it also hides a real issue:; ```; root [0] class ABC;; root [1] void func(ABC*) {}; root [2] class ABC { int a; }; root [3] ABC a; (ABC &) @0x10ad87068; root [4] func(&a); IncrementalExecutor::executeFunction: symbol '_ZN11__cling_N514funcEPN11__cling_N523ABCE' unresolved while linking [cling interface function]!; You are probably missing the definition of __cling_N51::func(__cling_N52::ABC*); Maybe you need to load the corresponding shared library?; ```. humm ... On the other hand this code might be actually solved by this PR. Nonetheless. Since the prompt and `ProcessLine` are very similar, it sounds like user could easily (inadvertently) fall in the pattern in the test.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9782#issuecomment-1030056862:501,load,load,501,https://root.cern,https://github.com/root-project/root/pull/9782#issuecomment-1030056862,1,['load'],['load']
Performance,"I think it might be hard to come up with a proper heuristic. For example is the threshold ""per dictionary"" (in which case it might be achiveable) or is it an accumulative cost, i.e. per whole set of library (in which case it is impossible) and is it lightly or highly dependent of the fraction of the generated dicitonary entries and/or header that are actually used? . > Users do not use make project . MakeProject is irrelevant here. It is ""only"" just to quickly produce an emulation of the ""Experiment Framework"" type of problem size. The relevant part is (as you noted) the amount of classes needed for I/O. One part that example does not emulate is the (high) number of libraries and dictionary. So *yes* this type of problem is extremely relevant and no it is actually not directly represented in roottest. (and it is unknown which fraction of the roottests are exercising this code path (i.e. not only loading but also using the rootpcms). Also I suppose there are ways to reduce the up-front cost of the rootpcms (for example delaying their loading until needed)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-659011045:909,load,loading,909,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-659011045,2,['load'],['loading']
Performance,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1821703597:171,queue,queue,171,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1821703597,1,['queue'],['queue']
Performance,"I think the default should be not to overwrite all symbols when a library is loaded, the best example of why is that would mean loading **libX.dylib** could insert it's `operator new` into the JIT for and whether it did so or not is entirely dependent on whether `operator new` was used prior to loading **libX.dylib** or not.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/744#issuecomment-313395388:77,load,loaded,77,https://root.cern,https://github.com/root-project/root/pull/744#issuecomment-313395388,3,['load'],"['loaded', 'loading']"
Performance,"I think there's a potentially nasty backward incompatibility issue arising from this commit: https://github.com/root-project/root/commit/90ba866a65bd44e74a995aa330e0a950114443d6#diff-896028fd27621f8bfe9d0774c5529e27df523e5bd7fcfe2ac54f6fd1ced316f9. Details of how the problem appeared to me are below, but I will say that the problem went away when I compiled 6.22 branch with the `_value` data member removed (since it masks the RooAbsReal one). I am guessing here that a RooConstVar version 2 written to disk isn't properly loaded as a RooConstVar version 1. But what is odd is that under some circumstances it seems that the const var value is correctly loaded -- it seems connected to if the arg is ""dirty"" or not. Sorry for being a bit vague, I dont fully understand why it is sometimes a problem and sometimes not but the problem goes away when the above commit is effectively ported back into 6.22. The issue first appeared for me when I opened a workspace (I wanted to attach to this issue but it wont let me attach a root file) created in 6.23.01 in 6.22.00 ... the only warning I get is: . ```; Warning in <TStreamerInfo::BuildOld>: Cannot convert RooRealVarSharedProperties::_altBinning from type: unordered_map<string,RooAbsBinning*> to type: RooLinkedList, skip element; ```. But when I tried to evaluate the pdf in the workspace like this:. ```; RooWorkspace* w = f1.Get<RooWorkspace>(""Test"");; auto func = w->pdf(""SR_model"");; auto obs = w->var(""obs_x_SR"");; func->getVal(*obs);; ```. I got this:. ```; message : p.d.f normalization integral is zero or negative: 0; server values: !funcList=(L_x_bkg_SR_overallSyst_x_StatUncert = 47.1,L_x_sig_SR_overallSyst_x_StatUncert = 3.82), !coefList=(binWidth_obs_x_SR_0 = 5.5,binWidth_obs_x_SR_1 = 5.5); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7646:526,load,loaded,526,https://root.cern,https://github.com/root-project/root/issues/7646,2,['load'],['loaded']
Performance,"I think this cannot be merged as is, since using the .cxx files for dependencies creates a race condition with the custom command that writes them out (multiple targets depending on the same custom command). I will try to find another solution to this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4329#issuecomment-527323573:91,race condition,race condition,91,https://root.cern,https://github.com/root-project/root/pull/4329#issuecomment-527323573,1,['race condition'],['race condition']
Performance,"I think this is ready for review. My intent is to fix the segfault and provide scaffolding for RNTuple merges in this PR and follow up with the actual implementation PRs. . @pcanal are you comfortable with the error message printed on an attempted merge for non-inheriting objects? . ```text; hadd Target file: ../merged.root; hadd compression setting for all output: 1; hadd Source file 1: ntuple1.root; hadd Source file 2: ntuple2.root; hadd Sources and Target have different compression levels; hadd merging will be slower; hadd Target path: ../merged.root:/; Fatal in <TFileMerger::MergeRecursive>: Merging objects that don't inherit from TObject is unimplemented (key: ntuple in file ntuple2.root); aborting; grep: warning: GREP_OPTIONS is deprecated; please use an alias or script; #0 0x00007f2dfd7ec07a in __GI___waitpid (pid=20605, stat_loc=stat_loc; entry=0x7fffc72e6c90, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29; #1 0x00007f2dfd764fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f2dfe92beb6 in TUnixSystem::StackTrace() () from /home/max/projects/root/new-errors/lib/libCore.so; #3 0x00007f2dfe7fe1aa in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/max/projects/root/new-errors/lib/libCore.so; #4 0x00007f2dfe8b9be8 in ErrorHandler () from /home/max/projects/root/new-errors/lib/libCore.so; #5 0x00007f2dfe810e29 in TObject::Fatal(char const*, char const*, ...) const () from /home/max/projects/root/new-errors/lib/libCore.so; #6 0x00007f2dfeed49e3 in TFileMerger::MergeRecursive(TDirectory*, TList*, int) () from /home/max/projects/root/new-errors/lib/libRIO.so; #7 0x00007f2dfeed2e41 in TFileMerger::PartialMerge(int) () from /home/max/projects/root/new-errors/lib/libRIO.so; #8 0x0000000000406c8d in main::{lambda(TFileMerger&, int, int)#2}::operator()(TFileMerger&, int, int) const [clone .constprop.0] (); #9 0x0000000000404ccd in main (); #10 0x00007f2dfd740830 in __libc_start_main (main=0x403f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6008#issuecomment-662581836:993,optimiz,optimized,993,https://root.cern,https://github.com/root-project/root/pull/6008#issuecomment-662581836,1,['optimiz'],['optimized']
Performance,I think we already search LD_LIBRARY_PATH to get a prebuild module cache?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1761#issuecomment-377543402:67,cache,cache,67,https://root.cern,https://github.com/root-project/root/pull/1761#issuecomment-377543402,1,['cache'],['cache']
Performance,"I think we can close this as it's out of date and we have a new patch for loading all the modules. Loading more modules have the negative effect on performance, so we're not going to this direction for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1697#issuecomment-377215663:74,load,loading,74,https://root.cern,https://github.com/root-project/root/pull/1697#issuecomment-377215663,3,"['Load', 'load', 'perform']","['Loading', 'loading', 'performance']"
Performance,"I thinking more of the potential future where we have to replace TBB (for whatever reasons, eg not being available on a new platforms or being not longer developed). In addition I would be interested to see the optimized performance number vs TBB :). So please yes :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-800534814:211,optimiz,optimized,211,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-800534814,2,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"I thought it's unavoidable to iterate over methods at first, so it might be a little help to remember the number of methods in TClassRef. I'm trying to optimize memory (and also cpu time) by removing iterations as possible, and I thought remembering the method number help reduce calling GetListOfMethods(true)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1743#issuecomment-373172284:152,optimiz,optimize,152,https://root.cern,https://github.com/root-project/root/pull/1743#issuecomment-373172284,1,['optimiz'],['optimize']
Performance,"I tried a bit to test it the library `patterns` is loaded or nor.; I added the line . ```; \iftikzlibraryloaded{patterns}{}{}; ```. at the beginning of the TeX/tikz file generated by ROOT.; I tried several different things but, when I run `pdflatex`, on the TeX file including the picture I always get:. ```; ! Undefined control sequence.; l.1 \iftikzlibraryloaded; {patterns}{}{}; ? ; ```; I tried several different things, without success... I guess I will not spend more time on it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9143#issuecomment-947586921:51,load,loaded,51,https://root.cern,https://github.com/root-project/root/issues/9143#issuecomment-947586921,1,['load'],['loaded']
Performance,"I use TTree objects with branches storing ULong64_t variables. When I use Tree::Scan() to printi these variables and perform mathematical operations, I encounter unexpected results. I wrote a following program to demonstrate the issue:; ```; #include <TROOT.h>; #include <TFile.h>; #include <TTree.h>; #include <TString.h>. #include <iostream>; #include <iomanip>. void write(ULong64_t x) {; TFile f(""f.root"", ""recreate"");; TTree t(""t"", ""t"");; t.Branch(""x"", &x, ""x/l"");; t.Fill();; t.Write();; f.Close();; std::cout<<""Written to tree: ""<<x<<""\n"";; }. void read(const ULong64_t x) {; TFile f(""f.root"");; TTree* t = (TTree*)(f.Get(""t""));; ; ULong64_t x1;; t->SetBranchAddress(""x"", &x1);; t->GetEntry(0);; std::cout<<""Read from tree: ""<<x1<<"" (""<<((x==x1)?""correct"":""incorrect"")<<"")\n"";; ; std::cout<<""\n"";; TString formula = ""x"";; std::cout<<"" TTree::Scan(\""""<<formula<<""\"");\n"";; std::cout<<""Expected output: ""<<x<<""\n"";; t->Scan(formula, """", ""colsize=25 col=lld"");; ; ; std::cout<<""\n"";; ULong64_t y = x-1;; formula = TString::Format(""x-%lld"", y);; std::cout<<"" TTree::Scan(\""""<<formula<<""\"");\n"";; std::cout<<""Expected output: ""<<std::setw(19)<<x-y<<""\n"";; t->Scan(formula, """", ""colsize=25 col=lld"");; ; std::cout<<""\n"";; y = x-926;; formula = TString::Format(""x-%lld"", y);; std::cout<<"" TTree::Scan(\""""<<formula<<""\"");\n"";; std::cout<<""Expected output: ""<<std::setw(19)<<x-y<<""\n"";; t->Scan(formula, """", ""colsize=25 col=lld"");; ; ; f.Close();; }. int main() {; ULong64_t x = 1617047019150033926;; ; write(x);; read(x);; }; ```. The program:. 1. Creates a tree with a single ULong64_t branch and single entry, and saves it to file f.root; 2. Reads the file and the tree:; - Reads the value from tree with TTree::GetEntry() to confirm the variable is saved properly – this seems to work correctly; - Displays the value with Scan() – displayed value is different on the last digit; - Perform simple subtractions using Scan() – the results are incorrect as well. This is output I obtained with 6.22/08 i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7844:117,perform,perform,117,https://root.cern,https://github.com/root-project/root/issues/7844,1,['perform'],['perform']
Performance,"I was not advocating for unnamed macros as alternative to what you propose here, @jiangyilism . I think @pcanal 's proposal qualifies as a (technically correct) ""hack"" :-) We could indeed use `__attribute__((constructor))` as the attribute - but that calls the function as part of static initialization, not *after* static initialization like `main()` or the current function-name-as-file-name, and the file would have to be loaded through `.L` not `.x`. Would that be good enough, @jiangyilism ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11299#issuecomment-1235536524:425,load,loaded,425,https://root.cern,https://github.com/root-project/root/issues/11299#issuecomment-1235536524,1,['load'],['loaded']
Performance,"I will look at 6609. For the RPi4, I had a more serious issue with 6.22/03. I could not load TMVA in Python - I got the dreaded failed to pythonize message. I repeated the same prescription above with 6.20/09 and loading TMVA in Python worked fine. Python 3.7.3 (default, Jul 25 2020, 13:03:44); [GCC 8.3.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import ROOT; >>> from ROOT import TMVA; Traceback (most recent call last):; File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 272, in TMVA; from libROOTPythonizations import AsRTensor; ImportError: cannot import name 'AsRTensor' from 'libROOTPythonizations3_7' (/home/pi/root/install/lib/libROOTPythonizations3_7.so). During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/home/pi/root/install/lib/ROOT/_facade.py"", line 275, in TMVA; raise Exception('Failed to pythonize the namespace TMVA'); Exception: Failed to pythonize the namespace TMVA. However, no problems with 6.20/09; Python 3.7.3 (default, Jul 25 2020, 13:03:44); [GCC 8.3.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import ROOT; >>> from ROOT import TMVA; >>>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4561#issuecomment-718345054:88,load,load,88,https://root.cern,https://github.com/root-project/root/pull/4561#issuecomment-718345054,2,['load'],"['load', 'loading']"
Performance,I will rerun the tests and see how performance looks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/81#issuecomment-142030519:35,perform,performance,35,https://root.cern,https://github.com/root-project/root/pull/81#issuecomment-142030519,1,['perform'],['performance']
Performance,I would argue that typical cmake projects do not need to deal with this. AFAIK ROOT does it because cling needs to be able to load the headers at runtime.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6010#issuecomment-656192012:126,load,load,126,https://root.cern,https://github.com/root-project/root/pull/6010#issuecomment-656192012,1,['load'],['load']
Performance,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective.; It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:; - first task: compile macro and load library; - second task: hash macro code, and, if already compiled, no-op; - ...; - n-th task: hash macro code, and, if already compiled, no-op; This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13655#issuecomment-1762173995:932,load,load,932,https://root.cern,https://github.com/root-project/root/pull/13655#issuecomment-1762173995,1,['load'],['load']
Performance,I would merge this and keep working on Snapshot with other PRs:. - better check for correctness of multi-thread snapshot of c-style array; - switch usage of `array_view` to a custom type,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1173#issuecomment-336392873:99,multi-thread,multi-thread,99,https://root.cern,https://github.com/root-project/root/pull/1173#issuecomment-336392873,1,['multi-thread'],['multi-thread']
Performance,I would not use `gStyle` as initializer in header files.; In some special cases header files may be accessed without loading appropriate library - and then gStyle can be also not initialized. ; I would prefer to move such members initialization into `TRatioPlot` constructor.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15893#issuecomment-2182562596:117,load,loading,117,https://root.cern,https://github.com/root-project/root/pull/15893#issuecomment-2182562596,1,['load'],['loading']
Performance,I would prefer not to merge this PR. I don't think the compiler will inline the code for TRandom3::Rndm and I think is better to keep the implementation in the .cxx file. ; Measuring the performances (using tutorial/testrandom.C) I have on a Linux box with Intel a deterioration of the time (from 2.5 ns/call to 3.1 ns/call). Testing on macOS I also do not see any improvement there.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12964#issuecomment-2077004702:187,perform,performances,187,https://root.cern,https://github.com/root-project/root/pull/12964#issuecomment-2077004702,1,['perform'],['performances']
Performance,"I would propose to change the title to ""[ci] Further speedup mac and linux builds by caching dependencies"". The word ""instead"" can be misleading. Our goal is to have feedback from the CI as soon as possible. Having several nodes, allows to scale horizontally. We are not increasing the number of nodes in the CI because we are lazy, we just need many nodes AND fast CI, e.g. through caches or quicker tests :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14987#issuecomment-2001914193:383,cache,caches,383,https://root.cern,https://github.com/root-project/root/issues/14987#issuecomment-2001914193,1,['cache'],['caches']
Performance,"I wrote a race condition, fixing...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10793#issuecomment-1161818979:10,race condition,race condition,10,https://root.cern,https://github.com/root-project/root/pull/10793#issuecomment-1161818979,1,['race condition'],['race condition']
Performance,"I'll have another look at the order; I expected user vs system to have a different order now than before. Independently, was `.L` not used for loading libraries?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6606#issuecomment-808802415:143,load,loading,143,https://root.cern,https://github.com/root-project/root/pull/6606#issuecomment-808802415,1,['load'],['loading']
Performance,I'll take a look at this as soon as possible. One possible reason why it would have worked before (and does not in the standalone) might be the available of a compiled dictionary for that class through a library (from Athena and co) loaded automatically by hadd.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12358#issuecomment-1439264901:233,load,loaded,233,https://root.cern,https://github.com/root-project/root/issues/12358#issuecomment-1439264901,1,['load'],['loaded']
Performance,"I'm closing this PR, as most of the interface changes that were part of it were landed in https://github.com/root-project/root/pull/13208. For the optimized allocation / deallocation, I think we should be taking a look to `tbb_allocator<T>` instead, which uses TBB's scalable allocator if available or otherwise reverts to `malloc` (see https://oneapi-src.github.io/oneTBB/main/tbb_userguide/Which_Dynamic_Libraries_to_Use.html). That should be a different PR though! I'll leave it into your capable hands, @jblomer!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12279#issuecomment-1700944645:147,optimiz,optimized,147,https://root.cern,https://github.com/root-project/root/pull/12279#issuecomment-1700944645,2,"['optimiz', 'scalab']","['optimized', 'scalable']"
Performance,"I'm finding that this number of divisions is, unfortunately, not matching up in a more involved script (a minimal reproducer is not easy... converting to a .C file produces over 4k lines that have to be fixed by hand and then of course stripped of sensitive experiment-data, as there are errors in the conversion by ROOT). It seems that it thinks there are 75, when only 4 printed labels are ultimately made. I'm calling this Optimize after it's drawn, so I'm not sure where to go from here",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10279#issuecomment-1084556143:426,Optimiz,Optimize,426,https://root.cern,https://github.com/root-project/root/issues/10279#issuecomment-1084556143,1,['Optimiz'],['Optimize']
Performance,"I'm getting a crash at the end, while I investigate maybe some of you recognize it:; `[100%] Generating lib/modules.idx; cling::DynamicLibraryManager::loadLibrary(): /home/mkrzewic/build/root/bin/root.exe: mmap of entire address space failed: Cannot allocate memory`. stacktrace attached.; [root_crash.log](https://github.com/root-project/root/files/11505569/root_crash.log)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12787#issuecomment-1552666963:151,load,loadLibrary,151,https://root.cern,https://github.com/root-project/root/issues/12787#issuecomment-1552666963,1,['load'],['loadLibrary']
Performance,"I'm not quite convinced of this. From the link:. > The symbols will be resolved when the extension library is loaded into a Python binary. What is the extension library what will load the right Python library for ROOT? Also, how can you guarantee this won't generate silent errors if the ABI of the loaded library and the one ROOT built itself against are not compatible? ROOT should probably just continue to be built against a specific version of Python and users should stick to that version when using ROOT. I'm also afraid this will just delay a link error into a runtime error when wrong/incompatible libraries are tried to be loaded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3396#issuecomment-461471229:110,load,loaded,110,https://root.cern,https://github.com/root-project/root/pull/3396#issuecomment-461471229,4,['load'],"['load', 'loaded']"
Performance,"I'm not sure why the CI is unable to perform the rebase for `ROOT-ubuntu16/nortcxxmod`,. ```; CMake Error at /mnt/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1083 (message):; Rebase of matthewfeickert-backport/xrootd-5.4.3 branch on top of; v6-26-00-patches failed!; ```. but everything else seems to be working.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10755#issuecomment-1155522978:37,perform,perform,37,https://root.cern,https://github.com/root-project/root/pull/10755#issuecomment-1155522978,1,['perform'],['perform']
Performance,"I'm totally +1 for using target-based CMake, and I believe I have fixed the issue of ROOT picking up its own headers here:; https://github.com/root-project/root/pull/8709 (needs rebasing). This fixed it at least for many builtins. There still might be more builtins that have the same problem, but let's go one step at a time. I solved the VDT-related part a bit differently. If I rebased, the diff would approximately read (done manually, sorry for possible indentation errors):; ```diff; DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT extra-headers); set(vdt ON CACHE BOOL ""Enabled because builtin_vdt enabled (${vdt_description})"" FORCE); set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS VDT); - add_library(VDT::VDT STATIC IMPORTED GLOBAL); - set_target_properties(VDT::VDT; - PROPERTIES; - IMPORTED_LOCATION ""${VDT_LIBRARIES}""; - INTERFACE_INCLUDE_DIRECTORIES ""${VDT_INCLUDE_DIRS}""; + add_library(VDT IMPORTED SHARED); + add_dependencies(VDT BUILTIN_VDT); + set_target_properties(VDT PROPERTIES IMPORTED_LOCATION ""${VDT_LIBRARIES}""); + target_include_directories(VDT INTERFACE $<BUILD_INTERFACE:${VDT_INCLUDE_DIR}> $<INSTALL_INTERFACE:include/>); ); endif(); endif(); ```; Whether the target is declared global, static or shared, I'm not sure if it makes a big difference. I'm happy to call it `VDT::VDT`, though. I think the important part was to switch the include directories via generator expressions, and to use **SYSTEM** includes instead of includes in `FindVDT`. #11844 is missing the usage of the `VDT::VDT` target in RooFit and in tmva, but that would come into effect after a rebase of #8709. I guess therefore that we could proceed with merging #11844 if it's green, and then I rebase #8709, so I have to do the rebase work only once. Does that sound reasonable for @amadio, @krasznaa, @bellenot ?. ### Edit ; And to be clear, for `SearchInstalledSoftware` I would leave everything as proposed in Attila's commit but the change to `target_include_directories` with the two ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11797#issuecomment-1339660363:567,CACHE,CACHE,567,https://root.cern,https://github.com/root-project/root/issues/11797#issuecomment-1339660363,1,['CACHE'],['CACHE']
Performance,"I'm very happy this seems to have paid off 😄; I hope there's still a benefit for those not-so-favourable benchmarks too. . It might be fun at some point to do a benchmark with all the bells and whistles (registered files, polled IO, maybe kernel-side submission queue polling) to see how far we can push it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6162#issuecomment-678356374:262,queue,queue,262,https://root.cern,https://github.com/root-project/root/pull/6162#issuecomment-678356374,1,['queue'],['queue']
Performance,"I've been able to get somewhere but now I need guidance. I created a `dict.modulemap` file:; ```; module dict {; header ""MyClass.h""; header ""OtherClass.h""; export *; }; ```; and the module-aware dictionary:; ```bash; $ ls; LinkDef.h MyClass.h OtherClass.h dict.modulemap; $ rootcling -cxxmodule -f dict.cpp MyClass.h OtherClass.h -moduleMapFile=dict.modulemap LinkDef.h; $ ls; LinkDef.h MyClass.h OtherClass.h dict.cpp dict.modulemap dict.pcm dict_rdict.pcm; $ g++ -shared -std=c++14 -fPIC -I$ROOTSYS/include dict.cpp -o libDict.so ; $ ls; LinkDef.h MyClass.h OtherClass.h dict.cpp dict.modulemap dict.pcm dict_rdict.pcm libDict.so; ```; but I cannot load the dictionary on the root shell:; ```; $ root; root [0] .L libDict.so ; Module dict not found.; ```; I put `$PWD` in `LD_LIBRARY_PATH` and `ROOT_INCLUDE_PATH` but the error is still there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10512#issuecomment-1149766446:651,load,load,651,https://root.cern,https://github.com/root-project/root/issues/10512#issuecomment-1149766446,1,['load'],['load']
Performance,"I've checked the code of `Cppyy::GetNumMethods` in Wim's Cppyy and it is equivalent to what we have now in PyROOT. Although it is true that we might merge with Cppyy in the end, it seems that both Cppyy and PyROOT can benefit from the kind of optimization that is proposed in this PR. Ideally, Wim should be aware of these optimizations and incorporate them also in Cppyy, so that we don't lose them if the merge happens.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1743#issuecomment-373101740:243,optimiz,optimization,243,https://root.cern,https://github.com/root-project/root/pull/1743#issuecomment-373101740,2,['optimiz'],"['optimization', 'optimizations']"
Performance,"I've just pushed a new version without the invasive `RNTupleZip` changes. It also starts compression as soon as pages are buffered in `CommitPageImpl` instead of waiting until `CommitCluster` to start compressing everything. In theory, this is a further performance improvement because of amortized compression costs. I did some rough measurements with the following test code and it looks like this is a further performance improvement in the parallel case -- comparing commits c2e876e and e9c6074 -- (but in theory there may also be some performance degradation for the single-threaded case because we now have to traverse a linked list instead of a vector for each column in `CommitCluster`). I had some `time` and `hyperfine` results attached but they were all over the place (except for both multithreaded cases seeming faster). <details>; <summary>Benchmark code</summary>. ```cpp; TEST(RPageSinkBuf, ParallelZip) {; ROOT::EnableImplicitMT();. FileRaii fileGuard(""test_ntuple_sinkbuf_pzip.root"");; {; auto model = RNTupleModel::Create();; auto floatField = model->MakeField<float>(""pt"");; auto fieldKlassVec = model->MakeField<std::vector<CustomStruct>>(""klassVec"");; RNTupleWriteOptions opt;; opt.SetCompression(209); // slow LZMA; auto ntuple = std::make_unique<RNTupleWriter>(std::move(model),; std::make_unique<RPageSinkBuf>(std::make_unique<RPageSinkFile>(; ""buf_pzip"", fileGuard.GetPath(), opt; )));. for (int i = 0; i < 2000000; i++) {; *floatField = static_cast<float>(i);; CustomStruct klass;; klass.a = 42.0;; klass.v1.emplace_back(static_cast<float>(i));; klass.v2.emplace_back(std::vector<float>(3, static_cast<float>(i)));; klass.s = ""hi"" + std::to_string(i);; *fieldKlassVec = std::vector<CustomStruct>{klass};; ntuple->Fill();; }; }; }; ```; </details>. Looking at the perf output for the two single-threaded cases, I can't see a difference coming from increased time spent in `CommitCluster`:. <details>; <summary>1a. No IMT, vector implementation perf report</summary>. ```; + 9",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8077#issuecomment-842691673:254,perform,performance,254,https://root.cern,https://github.com/root-project/root/pull/8077#issuecomment-842691673,3,['perform'],['performance']
Performance,"I've updated the PR with today's developments. Apart from the changes requested I've introduced a new index which allows performing all sort of block diagonal combinations between the indices of two tables, where each block represent a category of objects, e.g. tracks belonging to the same event. This is still not fully tested, but it should give an idea of the possibilities.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3443#issuecomment-465777270:121,perform,performing,121,https://root.cern,https://github.com/root-project/root/pull/3443#issuecomment-465777270,1,['perform'],['performing']
Performance,IFAM.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dbf09133.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dbf09133.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8f016f43.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8f016f43.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GermanGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d0a33f8e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d0a33f8e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dd4b34ea.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b2783ac.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b2783ac.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dd4b34ea.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f4db168.namespaces,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:28954,load,load,28954,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"IIUC, ACLiC is kind of interpreting code before generating so files to get the list of libraries that need to be loaded beforehand by passing all rootmap files to rootcling, right? If so, maybe we can do the same with modules by interpreting code beforehand, get a callback from cling and make a list of dependency libraries. We can keep this list and load them just before loading hsimple_C.so?. Anyway, these discussions are addressed (or not addressed) in another PR. I want to revert ""not generating rootmapfiles"" patch for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2187#issuecomment-396919765:113,load,loaded,113,https://root.cern,https://github.com/root-project/root/pull/2187#issuecomment-396919765,3,['load'],"['load', 'loaded', 'loading']"
Performance,"ILCallD (ctxt=0x7fff66912bc0, self=<optimized out>, method=<optimized out>) at /home/b/bendavid/rootdev19/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:76; #14 CPyCppyy::(anonymous namespace)::DoubleExecutor::Execute (this=<optimized out>, method=<optimized out>, self=<optimized out>, ctxt=0x7fff66912bc0) at /home/b/bendavid/rootdev19/root/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:307; #15 0x00007f23436f2269 in CPyCppyy::CPPMethod::ExecuteFast (self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>, this=<optimized out>, this=<optimized out>) at /home/b/bendavid/rootdev19/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74; #16 0x00007f23436f5148 in CPyCppyy::CPPMethod::ExecuteProtected (this=this; entry=0x55fe3b0d6ce0, self=0x0, offset=0, ctxt=0x7fff66912bc0) at /home/b/bendavid/rootdev19/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:149; #17 0x00007f23436f349a in CPyCppyy::CPPMethod::Execute (this=0x55fe3b0d6ce0, self=<optimized out>, offset=<optimized out>, ctxt=<optimized out>) at /home/b/bendavid/rootdev19/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:728; #18 0x00007f23436f878e in CPyCppyy::(anonymous namespace)::mp_call (pymeth=0x7f2328323760, args=0x7f2343980070, kwds=0x7f2328330380) at /home/b/bendavid/rootdev19/root/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566; #19 0x00007f234371ecc6 in CPyCppyy::CallMethodImp (pytmpl=pytmpl; entry=0x7f232832a980, pymeth=; 0x7fff66912de8: 0x7f2328323760, args=args; entry=0x7f2343980070, kwds=kwds; entry=0x7f2328330380, impOK=impOK; entry=true, sighash=sighash; entry=0) at /home/b/bendavid/rootdev19/root/bindings/pyroot/cppyy/CPyCppyy/src/TemplateProxy.cxx:449; #20 0x00007f234371eede in CPyCppyy::tpp_call (pytmpl=<optimized out>, args=<optimized out>, kwds=0x7f2328330380) at /home/b/bendavid/rootdev19/root/bindings/pyroot/cppyy/CPyCppyy/src/TemplateProxy.cxx:550; #21 0x00007f23441e36b3 in _PyObject_MakeTpCall () from /usr/lib/libpython3.10.so.1.0; #22 0x00007f23441de",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9112#issuecomment-1011105337:4863,optimiz,optimized,4863,https://root.cern,https://github.com/root-project/root/issues/9112#issuecomment-1011105337,3,['optimiz'],['optimized']
Performance,"ILD/root-6.24.00/io/io/src/TKey.cxx:217; #13 0x00007fff84a8ff84 in TFile::Init (this=0x1536420a0, create=<optimized out>) at /builddir/build/BUILD/root-6.24.00/io/io/src/TFile.cxx:613; #14 0x00007fff84a92070 in TFile::TFile (this=0x1536420a0, fname1=<optimized out>, option=<optimized out>, ftitle=<optimized out>, compress=<optimized out>) at /builddir/build/BUILD/root-6.24.00/io/io/src/TFile.cxx:489; #15 0x00007fff745b06a8 in ?? (); #16 0x00007fff745b0050 in ?? (); #17 0x00007fff7fb4c810 in cling::IncrementalExecutor::executeWrapper (this=0x153618cf0, function=..., returnValue=0x7ffff78b83b0) at /builddir/build/BUILD/root-6.24.00/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp:376; #18 0x00007fff7fa85a50 in cling::Interpreter::RunFunction (this=0x1536176e0, FD=0x15490a240, res=0x7ffff78b83b0) at /usr/include/c++/10/bits/basic_string.h:907; #19 0x00007fff7fa8f2b4 in cling::Interpreter::EvaluateInternal (this=0x1536176e0, input=..., CO=..., V=0x7ffff78b83b0, wrapPoint=<optimized out>) at /builddir/build/BUILD/root-6.24.00/interpreter/cling/lib/Interpreter/Interpreter.cpp:1391; #20 0x00007fff7fa8fd74 in cling::Interpreter::echo (this=0x1536176e0, input=""hsimple() /* '.x' tries to invoke a function with the same name as the macro */"", V=0x7ffff78b83b0) at /builddir/build/BUILD/root-6.24.00/interpreter/cling/lib/Interpreter/Interpreter.cpp:1043; #21 0x00007fff7fbe224c in cling::MetaSema::actOnxCommand (this=0x153fa8a00, file=..., args=..., result=0x7ffff78b83b0) at /builddir/build/BUILD/root-6.24.00/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:145; #22 0x00007fff7fbf2c10 in cling::MetaParser::isXCommand (this=0x153f66eb0, actionResult=; 0x7ffff78b81b0: cling::MetaSema::AR_Success, resultValue=0x7ffff78b83b0) at /builddir/build/BUILD/root-6.24.00/interpreter/cling/lib/MetaProcessor/MetaParser.cpp:319; #23 0x00007fff7fbf50b0 in cling::MetaParser::isCommand (this=0x153f66eb0, actionResult=; 0x7ffff78b81b0: cling::MetaSema::AR_Success, resultValue=0x7ffff78b83b0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-844784432:8362,optimiz,optimized,8362,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-844784432,1,['optimiz'],['optimized']
Performance,"ILER/default/LABEL/performance-cc8/SPEC/default/root/tutorials/math/multivarGaus.C:12:15: error: no type named 'GSLRandomEngine' in namespace 'ROOT::Math'; ROOT::Math::GSLRandomEngine rnd;; ~~~~~~~~~~~~^; CMake Error at /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/RootTestDriver.cmake:237 (message):; error code: 1; ```. ```; Directory: /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/runtutorials; ""tutorial-math-exampleFunction-py"" start time: May 11 01:28 CEST; Output:; ----------------------------------------------------------. ****************************************; Minimizer is Minuit / Migrad; MinFCN = 1.687e-08; NDf = 0; Edm = 3.37793e-08; NCalls = 146; Par_0 = 0.999952 +/- 1.00372 ; Par_1 = 0.999892 +/- 2.00986 ; Error in <TUnixSystem::FindDynamicLibrary>: libMathMore[.so | .dll | .dylib | .sl | .dl | .a] does not exist in /data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/lib:/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/lib:.:/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default/build/lib:/lib64/tls/haswell/x86_64:/lib64/tls/haswell:/lib64/tls/x86_64:/lib64/tls:/lib64/haswell/x86_64:/lib64/haswell:/lib64/x86_64:/lib64:/usr/lib64/tls/haswell/x86_64:/usr/lib64/tls/haswell:/usr/lib64/tls/x86_64:/usr/lib64/tls:/usr/lib64/haswell/x86_64:/usr/lib64/haswell:/usr/lib64/x86_64:/usr/lib64:/data/sftnight/workspace/root-benchmark/BUILDTYPE/Release/COMPILER/default/LABEL/performance-cc8/SPEC/default; ```. ### Expected behavior. no libMathMore ==> tutorials disabled for ctest. ### To Reproduce; https://lcgapp-services.cern.ch/root-jenkins/job/root-benchmark/2577/BUILDTYPE=Release,COMPILER=default,LABEL=performance-cc8,SPEC=default/parsed_console/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8145:1352,perform,performance-,1352,https://root.cern,https://github.com/root-project/root/issues/8145,5,['perform'],['performance-']
Performance,IX; >Failed to load module RHTTP; >Failed to load module FitPanel; >Failed to load module ROOTVecOps; >Failed to load module ProofDraw; >Failed to load module Quadp; >Failed to load module ROOTNTuple; >Failed to load module ROOT_Foundation_Stage1_NoRTTI; >Failed to load module Genetic; >Failed to load module Eve; >Failed to load module GeomPainter; >Failed to load module TreeViewer; >Failed to load module Physics; >Failed to load module EG; >Failed to load module Tree; >Failed to load module HistFactory; >Failed to load module Spectrum; >Failed to load module Matrix; >Failed to load module Html; >Failed to load module Hist; >Failed to load module GuiHtml; >Failed to load module _Builtin_intrinsics; >Failed to load module Gpad; >Failed to load module TMVAGui; >Failed to load module Postscript; >Failed to load module ROOTEve; >Failed to load module RGL; >Failed to load module Fumili; >Failed to load module Net; >Failed to load module Geom; >Failed to load module RooFitMore; >Failed to load module ROOTGpadv7; >Failed to load module X3d; >Failed to load module Cling_Runtime; >Failed to load module SPlot; >Failed to load module EGPythia8; >Failed to load module RooFit; >Failed to load module RCsg; >Failed to load module Rint; >Failed to load module XMLParser; >Failed to load module MultiProc; >Failed to load module RooStats; >Failed to load module GeomBuilder; >Failed to load module Proof; >Failed to load module FITSIO; >Failed to load module Ged; >Failed to load module Recorder; >Failed to load module FFTW; >Failed to load module GuiBld; >Failed to load module ROOTWebDisplay; >Failed to load module RooFitCore; >Failed to load module Gui; >Failed to load module SQLIO; >Failed to load module XMLIO; >Failed to load module ROOT_Rtypes; >Failed to load module std; >Failed to load module ROOTHistDraw; >Failed to load module GX11TTF; >Failed to load module RIO; >Failed to load module ProofPlayer; >Failed to load module ASImage; >Failed to load module libc; >Failed to load modul,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7055:4651,load,load,4651,https://root.cern,https://github.com/root-project/root/issues/7055,1,['load'],['load']
Performance,"Ideally we could stop generating rdict when runtime_cxxmodules is ON, like:; ```; if (!hasCxxModules && gDriverConfig->fInitializeStreamerInfoROOTFile) {; gDriverConfig->fInitializeStreamerInfoROOTFile(modGen.GetModuleFileName().c_str());; }; ```; but doing that caused many errors in dictionary generation. So; apparently we can't do that. Instead, we can stop loading them at; runtime which gives around 1MB of improvement in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2912:362,load,loading,362,https://root.cern,https://github.com/root-project/root/pull/2912,1,['load'],['loading']
Performance,"If -Ofast is the optimization level, then -ffast-math should be enabled for GCC builds (Linux) to be able to activate ```__FAST_MATH__``` macros (order of flags is important apparently too)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/971:17,optimiz,optimization,17,https://root.cern,https://github.com/root-project/root/pull/971,1,['optimiz'],['optimization']
Performance,"If I compile this branch with gcc12 and then try to construct a `std::unique_ptr<TH1> p` on the ROOT prompt, I get; ```; In module 'std' imported from input_line_1:1: ; /opt/gcc/12.1.0/include/c++/12.1.0/type_traits:1032:12: error: 'std::is_move_constructible<std::default_delete<TH1> >' has different definitions in different modules; defined here ; struct is_move_constructible ; ^ ; /opt/gcc/12.1.0/include/c++/12.1.0/type_traits:1032:12: note: definition in module 'std.type_traits' is here ; In module 'std' imported from input_line_1:1: ; /opt/gcc/12.1.0/include/c++/12.1.0/bits/unique_ptr.h:467:7: error: 'std::unique_ptr<TH1, std::default_delete<TH1> >::get_deleter' from module 'std.memory' is not present in definition of 'std::unique_; ptr<TH1, std::default_delete<TH1> >' provided earlier ; get_deleter() noexcept ; ^ ; /opt/gcc/12.1.0/include/c++/12.1.0/bits/unique_ptr.h:269:11: note: definition has no member 'get_deleter' ; class unique_ptr ; ^ ; In module 'std' imported from input_line_1:1: ; /opt/gcc/12.1.0/include/c++/12.1.0/bits/unique_ptr.h:432:7: error: 'std::unique_ptr<TH1, std::default_delete<TH1> >::operator=' from module 'std.memory' is not present in definition of 'std::unique_pt; r<TH1, std::default_delete<TH1> >' provided earlier ; operator=(nullptr_t) noexcept ; ^ ; /opt/gcc/12.1.0/include/c++/12.1.0/bits/unique_ptr.h:269:11: note: definition has no member 'operator=' ; class unique_ptr ; ^ ; In module 'std' imported from input_line_1:1: ; /opt/gcc/12.1.0/include/c++/12.1.0/bits/unique_ptr.h:422:2: error: 'std::unique_ptr<TH1, std::default_delete<TH1> >::operator=' from module 'std.memory' is not present in definition of 'std::unique_pt; r<TH1, std::default_delete<TH1> >' provided earlier ; operator=(unique_ptr<_Up, _Ep>&& __u) noexcept ; ^ ; /opt/gcc/12.1.0/include/c++/12.1.0/bits/unique_ptr.h:269:11: note: definition has no member 'operator='; class unique_ptr; ^; [...]; ```; and loads of similar errors...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1216428468:1931,load,loads,1931,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1216428468,1,['load'],['loads']
Performance,"If I have understood well, doing this (using an arbitrary ROOT file); ```; ROOTDEBUG=7 root.exe -l -b -q test.root 2>&1 | grep Preloading; ```; you see `libROOTTMVASofie` pre-loaded. I actually I do not see this with the master. I see other libs preloaded (e.g. libGraf)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13055#issuecomment-1612740381:175,load,loaded,175,https://root.cern,https://github.com/root-project/root/issues/13055#issuecomment-1612740381,1,['load'],['loaded']
Performance,If I remember correctly the underlying problem was (is?) an ABI incompatibility between clang and gcc in the way arguments are packed on the stack on some optimization cases (i.e. I was surprised that just reordering the arguments was solving the problem). I don't remember the details (@Axel-Naumann might) but reducing the number of arguments or passing only numerical (and pointer) type might help.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6231#issuecomment-677811211:155,optimiz,optimization,155,https://root.cern,https://github.com/root-project/root/pull/6231#issuecomment-677811211,1,['optimiz'],['optimization']
Performance,"If I remember correctly, I measured in VTune the effect and this made performance a bit worse, actually. The difference is that within the scope where we take the write lock here, there are more places taking the lock, so if we convert to a read lock, those places, instead of being a no-op, become real write locks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2252#issuecomment-405611718:70,perform,performance,70,https://root.cern,https://github.com/root-project/root/pull/2252#issuecomment-405611718,1,['perform'],['performance']
Performance,"If I replace `lib = ctypes.cdll.LoadLibrary(lib_path)` in `xgboost/core.py` with `lib = ctypes.CDLL(lib_path, 8)`, then that solves the issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15211#issuecomment-2053387183:32,Load,LoadLibrary,32,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2053387183,1,['Load'],['LoadLibrary']
Performance,"If I run helgrind on the failing test with the current master I get similar [race conditions](https://gist.github.com/vgvassilev/9ffe48490045c0bdf7cbd9c2afc6fbeb). @amadio, @bluehood, any idea what's wrong and how we should proceed with the PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073#issuecomment-333608741:77,race condition,race conditions,77,https://root.cern,https://github.com/root-project/root/pull/1073#issuecomment-333608741,1,['race condition'],['race conditions']
Performance,"If IMT is disabled, TTree::Fill() is constructing and destructing the; imtHelper object at every call and never using it. By moving its; declaration into the #ifdef, we avoid this penalty. This commit also; avoids the penalty of checking for fIMTEnabled if IMT is disabled. VTune performance analysis (comparison of two basic hotspots analyses):. ![screenshot](https://user-images.githubusercontent.com/249404/27871466-078e31c0-61a6-11e7-99f7-295d7282bc5c.png). Note the time difference in `TTree::Fill()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/741:280,perform,performance,280,https://root.cern,https://github.com/root-project/root/pull/741,1,['perform'],['performance']
Performance,"If `libPyROOT` is loaded with `gSystem->Load`, the static initialization block in `TMemoryRegulator.cxx` is executed and ends up invoking `PyCFunction_New`, which causes a crash from Python 3.7. The crash is due to Python not being initialized, so we need to protect that case. Note that when loading `libPyROOT` from `ROOT.py`, which is what happens when someone uses PyROOT, the Python interpreter already exists and is initialized, so invoking `PyCFunction_New` does not crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3111:18,load,loaded,18,https://root.cern,https://github.com/root-project/root/pull/3111,3,"['Load', 'load']","['Load', 'loaded', 'loading']"
Performance,"If a dictionary's headers are in the PCH, they get #includes at; startup. There is no need for forward declarations (to be parsed; at library load time) nor payloads (to be parsed at autoparsing time). This should reduce the effect we see with recursive parsing, and; speed up ROOT (e.g. but not only the startup).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1929:142,load,load,142,https://root.cern,https://github.com/root-project/root/pull/1929,1,['load'],['load']
Performance,"If a server is redirected, the cached normalization sets in `RooAbsPdf`; and `RooAddPdf` might not point to the right observables anymore. We; need to reset them. A unit test based on the code that originally unveiled this issue is; also implemented. This is a backport of https://github.com/root-project/root/pull/9552.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9560:31,cache,cached,31,https://root.cern,https://github.com/root-project/root/pull/9560,1,['cache'],['cached']
Performance,"If a server is redirected, the cached normalization sets in `RooAbsPdf`; and `RooAddPdf` might not point to the right observables anymore. We; need to reset them. This bug was discovered thanks to a [forum post](https://root-forum.cern.ch/t/problems-with-2d-simultaneous-fit/48249/4) that provided a code snippet that crashed in ROOT master and 6.24 because the cached normalization sets were used after the servers were redirected. Needs to be backported to 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9552:31,cache,cached,31,https://root.cern,https://github.com/root-project/root/pull/9552,2,['cache'],['cached']
Performance,"If an object inside a workspace is cloned, its pointer to the expensive; object cache inside the original workspace is copied. This creates a; dangling pointer when the original workspace is deleted. This excludes; the pointer from cloning, so clones will store their cache RooFit's; global cache or (after they have been assigned to a new workspace) in; their new workspace. Fixes root-project/root#6529",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6555:80,cache,cache,80,https://root.cern,https://github.com/root-project/root/pull/6555,3,['cache'],['cache']
Performance,"If an object inside a workspace is cloned, its pointer to the expensive; object cache inside the original workspace is copied. This creates a; dangling pointer when the original workspace is deleted. This excludes; the pointer from cloning, so clones will store their objects in RooFit's; global cache or (after they have been assigned to a new workspace) in; their new workspace. Fixes root-project/root#6529. (cherry picked from commit b4008a13853b9a341a779f73f9aa4c966719d5c1)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6581:80,cache,cache,80,https://root.cern,https://github.com/root-project/root/pull/6581,2,['cache'],['cache']
Performance,"If arbitrary macro executed when `RBrowser` is running and new RWebWindow is started,; RBrowser will intercept such call and can automatically embed ""known"" widgets. Usecase:; * start browser; * load `rbox.cxx` macro; * launch that macro. Before always new web browser with `RBox` drawings was started, now just new tab will be embed into `RBrowser`. Support `RCanvas`, `TCanvas` and `RGeomViewer`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9165:195,load,load,195,https://root.cern,https://github.com/root-project/root/pull/9165,1,['load'],['load']
Performance,"If class name in TKey not directly match with registered classes,; try to call `TClass::GetClass()` to check base classes - but without trying to load library.; Should allow to handle user-derived classes for TTree, histograms, ...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10109:146,load,load,146,https://root.cern,https://github.com/root-project/root/pull/10109,1,['load'],['load']
Performance,"If respective widget (TBrowser, TCanvas, TTreeViewer) want to start web-based implementation,; only minimal graphics initialization is necessary. Let possibility to really initialize graphics when web display is disabled and normal widget is started. In TCanvas use batch gui factory to create web-based TWebCanvas. It is done for the case when normal graphics (with its gui factory) was loaded, but then web display was enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11857:388,load,loaded,388,https://root.cern,https://github.com/root-project/root/pull/11857,1,['load'],['loaded']
Performance,"If the G__X filenames don't match with a module called X, then; CMake can't find the right dependencies and we get race conditions.; This patch fixes all a few more typos that caused those problems. Found by our debug code in RootNewMacros (which is now nearly silent).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/769:115,race condition,race conditions,115,https://root.cern,https://github.com/root-project/root/pull/769,1,['race condition'],['race conditions']
Performance,If the GetCheckSum value was already cached then the argument passed; to the function was not set. This now properly sets the value.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/93:37,cache,cached,37,https://root.cern,https://github.com/root-project/root/pull/93,1,['cache'],['cached']
Performance,"If the method `__str__` is already defined on the C++ side, don't inject; the cling based pretty printing. Related to ROOT-10967. @etejedor You see any performance implications with the check added below? Do we trigger lookups with the `dir(...)`? Just to be sure :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6119:152,perform,performance,152,https://root.cern,https://github.com/root-project/root/pull/6119,1,['perform'],['performance']
Performance,"If we are going to disable the ClassImp macro, the commit log must include a full explanation of why 'it does more harm than good'. . Note that in the problem linked ( https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5 ) the user code is literally erroneous as it goes out of its way to make sure that the ClassImp (for Implementation) declaration is parsed multiple times by adding it to the header file **outside** the code guard.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2563#issuecomment-439032064:209,load,loadlibrary-while-compiling-in-root-,209,https://root.cern,https://github.com/root-project/root/pull/2563#issuecomment-439032064,1,['load'],['loadlibrary-while-compiling-in-root-']
Performance,"If we call TCling::Load on an already loaded library we dlclose and dlopen the library. However, currently we do not have a facility to 'reload'/undo the effect of TCling::LoadPCM. This patch adds a section in the dictionary for de-registration which is reverse to TCling::RegisterModule -- TCling::UnRegisterModule. It tracks down which library is being reloaded and does not trigger a re-read of the rdict pcm. The current stub is can be further expanded to undo the effects caused by TCling::RegisterModule and/or improve the TCling shutdown by running the interpreter-dependent shutdown of the dictionary. The intent of this patch is to fix the failing OSX tests with. Error in <TCling::LoadPCM>: ROOT PCM /.../libTree_rdict.pcm file does not exist; Info in <TCling::LoadPCM>: In-memory ROOT PCM candidate /.../libASImageGui_rdict.pcm; Info in <TCling::LoadPCM>: In-memory ROOT PCM candidate /.../libASImage_rdict.pcm",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5420:19,Load,Load,19,https://root.cern,https://github.com/root-project/root/pull/5420,6,"['Load', 'load']","['Load', 'LoadPCM', 'loaded']"
Performance,"If we don't cache the PyROOT library, include dir and version variables, they will not be found by CMake in the loop over `CACHE_VARIABLES` which sets `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, and therefore `root-config --config` will not show them. This affects master and 6.22. This was reported by:; https://root-forum.cern.ch/t/python-in-root-6-22/39891. Note that `PYTHON_EXECUTABLE` is not cached, since caching it can interfere with the user setting of that same variable, when specifying that only one Python installation should be considered (if we cache it and reconfigure, CMake thinks it is the user who is setting it). This is not a problem, since `PYTHON_EXECUTABLE` was never offered in `root-config --config` in previous ROOT versions (the loop over `CACHE_VARIABLES` in the main `CMakeLists.txt` filters it out). The alternative to this implementation, if we don't want to cache these PyROOT variables, would be to add them to `ROOT_CONFIGARGS` in the main `CMakeLists.txt`, independently of `CACHE_VARIABLES`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5906:12,cache,cache,12,https://root.cern,https://github.com/root-project/root/pull/5906,4,['cache'],"['cache', 'cached']"
Performance,"If we enable ORCV2 asynchronous compilation, it is clear we have to enable threading support in LLVM. So the question is whether we do want to enable ORCV2 asynchronous compilation or not, some things to consider:; * cost to all or most (?) of the interpreter calls (which then would likely takes 2 locks instead of one); * risk of dead locks; now that the interpreter takes 2 locks, if there is any way that code that takes the LLVM lock calls code directly or indirectly (via user function or even dlopen) take the ROOT locks then they will be dead locks.; * risk of over-subscribing the CPU (i.e. see the many back and forth in the PPP between the way we setup resource sharing between the experiment framework and the implicit multi-threading). ; * size of the gain; given than most (but indeed not all) compilation are very small, is it worth the costs?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11699#issuecomment-1312791296:731,multi-thread,multi-threading,731,https://root.cern,https://github.com/root-project/root/issues/11699#issuecomment-1312791296,1,['multi-thread'],['multi-threading']
Performance,If we generate a dictionary with a C++ module with rootcling we; should write in the payload that we generated a C++ module.; This way we can actually print a *reliable* warning when we fail; to load the C++ module during runtime. Without this we can only; speculate if a missing C++ module is intentional.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1511:195,load,load,195,https://root.cern,https://github.com/root-project/root/pull/1511,1,['load'],['load']
Performance,"If we use -fimplicit-module-maps this means that cling will find all files called module.modulemap on the include paths. In certain cases the same modulemap can be present in two locations causing module redefinition errors. This patch teaches cling to work with explicitly specified modulemaps in -fno-implicit-module-maps mode. It moves the generation of the overlay file closer to the CIFactory so that we can reuse the modulemap loading code before the interpreter object was set up. The patch also turns off the implicit module map discovery and explicitly specifies the ROOT-related modulemap files. The modulemap files need to be enumerated in both TCling and rootcling. Rootcling requires -fno-rtti build mode and we cannot use the utilities in TROOT (also because rootcling_stage1 is built before libCore). This requires the extraction of the `GetSysRoot`, `GetIncludeDir` and `GetEtcDir` in the `ROOT::FoundationUtils` which is can be used throughout the entire core component. This fixes ROOT-10354.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4553:433,load,loading,433,https://root.cern,https://github.com/root-project/root/pull/4553,1,['load'],['loading']
Performance,"If we use more than 2 GB of memory on a 32bit Windows machine, the test; will break because of the memory limit. This happens if we run the tests; with a high concurrency, e.g., with 32 threads. Fix the concurrency to 8; threads to prevent this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6842:159,concurren,concurrency,159,https://root.cern,https://github.com/root-project/root/pull/6842,2,['concurren'],['concurrency']
Performance,"If you already have time to review than it should be fine to start now, yes. I think the failing test is just a matter of too strict assumptions, should be easily fixable by relaxing that. Btw, if you have suggestions there of how to construct a better test, I'm all ears. What the failing test does is: 1. assign task priorities, 2. run the tasks and record the order in which they are executed, 3. check the received order against the suggested one via the priorities. The problem is that due to random OS process scheduling delays, the received order is never 100% predictable. The only thing that is guaranteed is that if it has multiple tasks in the queue at one time that it will execute the one with highest priority first. I could introduce `sleep`s in each task so that the queue has time to fill up, but it could still fail randomly if for some reason the queue filling is delayed, so it still doesn't guarantee anything...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11627#issuecomment-1291893648:655,queue,queue,655,https://root.cern,https://github.com/root-project/root/pull/11627#issuecomment-1291893648,3,['queue'],['queue']
Performance,"If you do not specify anything, you will get:. ```; /// Use the compile-time default setting; kUseCompiledDefault = 101,; ``` ; Here the full help:. ```; usage: hadd [-a] [-f] [-f[0-9]] [-fk] [-ff] [-k] [-O] [-T] [-v V] [-j J]; [-dbg] [-d D] [-n N] [-cachesize CACHESIZE]; [-experimental-io-features EXPERIMENTAL_IO_FEATURES]; TARGET SOURCES. This program will add histograms, trees and other objects from a list; of ROOT files and write them to a target ROOT file. The target file is; newly created and must not exist, or if -f (""force"") is given, must; not be one of the source files. OPTIONS:; -a Append to the output; -f Force overwriting of output file; -f[0-9] Gives the ability to specify the compression level of the target file.; Default is 1 (kDefaultZLIB), 0 is uncompressed, 9 is maximum; compression (see TFile::TFile documentation). You can also specify the; full compresion algorithm, e.g. -f206; -fk Sets the target file to contain the baskets with the same compression; as the input files (unless -O is specified). Compresses the meta data; using the compression level specified in the first input or the; compression setting after fk (for example 206 when using -fk206); -ff The compression level use is the one specified in the first input; -k Skip corrupt or non-existent files, do not exit; -O Re-optimize basket size when merging TTree; -T Do not merge Trees; -v Explicitly set the verbosity level: 0 request no output, 99 is the; default; -j Parallelize the execution in 'J' processes. If the number of processes; is not specified, use the system maximum.; -dbg Enable verbosity. If -j was specified, do not not delete partial files; stored inside working directory.; -d Carry out the partial multiprocess execution in the specified; directory; -n Open at most 'N' files at once (use 0 to request to use the system; maximum); -cachesize Resize the prefetching cache use to speed up I/O operations (use 0 to; disable); -experimental-io-features Used with an argument provided, en",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14910#issuecomment-1985435516:251,cache,cachesize,251,https://root.cern,https://github.com/root-project/root/issues/14910#issuecomment-1985435516,2,"['CACHE', 'cache']","['CACHESIZE', 'cachesize']"
Performance,"Implement ""miss cache"" for TTreeCache",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/240:16,cache,cache,16,https://root.cern,https://github.com/root-project/root/pull/240,1,['cache'],['cache']
Performance,Implement parsing cache for the LookupHelper.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483:18,cache,cache,18,https://root.cern,https://github.com/root-project/root/pull/2483,1,['cache'],['cache']
Performance,"Implement two improvements to the RNTuple RDF scheduler for the multi-threaded case:. 1. Files of a chain are opened in batches the background: while a batch of files (batch size == number of slots) is processed, the next batch is opened.; 2. For the tail scheduling (multiple slots sharing the same files), the clones of the page source pointing to the same file do not need to re-read meta-data (anchor, header, footer) again. The patch results in a speed improvement of about 10% for AGC, EOS cached, 32 cores.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15952:64,multi-thread,multi-threaded,64,https://root.cern,https://github.com/root-project/root/pull/15952,2,"['cache', 'multi-thread']","['cached', 'multi-threaded']"
Performance,"Implements a basic `RRawFileUnix::ReadV` implementation using the `io_uring` async backend. ; Note: `ReadV` performs many disjoint reads on one file, not scatter IO using `readv`. Basic means: ; * simple error-handling ; * no interrupt considerations; * ~~no submission queue event batching (large `nReq` may exhaust memory resources)~~ implemented in 8c8a841 . The idea is to benchmark whether io_uring allows us to take advantage of modern IO devices, e.g. SSD queue depth etc. . I also factored out a common test header `io_test.hxx` from `test/RRawFile.cxx` for use in `test/RIoUring.cxx`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6162:108,perform,performs,108,https://root.cern,https://github.com/root-project/root/pull/6162,3,"['perform', 'queue']","['performs', 'queue']"
Performance,Implements writing page checksums and checksum verification on read.; Page checksums are written on `SealPage()`. They are verified on `LoadSealedPage()` and on `UnsealPage()`. Note that the page size stored in locators does not change. Pages flagged as having a checksum are serialized with additional trailing 8 bytes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15921:136,Load,LoadSealedPage,136,https://root.cern,https://github.com/root-project/root/pull/15921,1,['Load'],['LoadSealedPage']
Performance,Improve loading system fonts,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16229:8,load,loading,8,https://root.cern,https://github.com/root-project/root/issues/16229,1,['load'],['loading']
Performance,Improve performance of FastCGI by processing several requests in parallel.; Could be real alternative now to pure `civetweb` solution concerning performance,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7117:8,perform,performance,8,https://root.cern,https://github.com/root-project/root/pull/7117,2,['perform'],['performance']
Performance,Improve performance of TBase64 coding/encoding,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4910:8,perform,performance,8,https://root.cern,https://github.com/root-project/root/pull/4910,1,['perform'],['performance']
Performance,Improve scalabity of TClass's object repository,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6559:8,scalab,scalabity,8,https://root.cern,https://github.com/root-project/root/pull/6559,1,['scalab'],['scalabity']
Performance,"Improve the error message when you try to build NumPy arrays with types; that the interpreter doesn't know about. Running the reproducer from the JIRA ticket, one now gets this output:; ```txt; TClass::Init:0: RuntimeWarning: no dictionary for class Foo is available; { ""a"", ""b"", ""foo"", ""foo.a"", ""foo.b"" }; Traceback (most recent call last):; File ""/home/rembserj/root-support/jira/ROOT-10930/reproducer.py"", line 13, in <module>; print(df.AsNumpy()); ^^^^^^^^^^^^; File ""/home/rembserj/spaces/master/install/lib/root/ROOT/_pythonization/_rdataframe.py"", line 243, in RDataFrameAsNumpy; raise RuntimeError(; RuntimeError: The column named ""foo"" is of type ""Foo"", which is not known to the ROOT interpreter. Please load the corresponding header files or dictionaries.; ```. This was the output before:; ```txt; TClass::Init:0: RuntimeWarning: no dictionary for class Foo is available; { ""a"", ""b"", ""foo"", ""foo.a"", ""foo.b"" }; Traceback (most recent call last):; File ""/home/rembserj/root-support/jira/ROOT-10930/reproducer.py"", line 5, in <module>; print(df.AsNumpy()); ^^^^^^^^^^^^; File ""/home/rembserj/spaces/master/install/lib/root/ROOT/_pythonization/_rdataframe.py"", line 236, in RDataFrameAsNumpy; result_ptrs[column] = df.Take[column_type](column); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^; TypeError: Could not find ""Take<Foo>"" (set cppyy.set_debug() for C++ errors):; Failed to instantiate ""Take<Foo>(std::string)""; ```. Closes the following Jira issue:; https://its.cern.ch/jira/browse/ROOT-10930",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16281:714,load,load,714,https://root.cern,https://github.com/root-project/root/pull/16281,1,['load'],['load']
Performance,Improve thread scability of TRef. Creating and looking up a lot of TRef from the same processID now has practically perfect weak scaling. Use Read/Write lock where relevant.; ; Cache the last result of TProcessID::IsValid and TProcessID::GetProcessWithUID as; most often the same PID will be used for most of the process lifetime.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2381:177,Cache,Cache,177,https://root.cern,https://github.com/root-project/root/pull/2381,1,['Cache'],['Cache']
Performance,"Improves the interplay of `RPage`, `RPageAllocator`, `RPagePool`, and `RPageSource/Sink`. - The `RPageAllocator` becomes an abstract interface for creating pages and allocating the page buffer.; - There is currently one concrete implementation, the `RPageAllocatorHeap`; - Pages are movable only and release the page buffer on destruction using the page allocator that created them; - The page pool owns pages and hands out `RPageRef` objects, which are proxies for the use counter (reference counter) of the page; - The `RPageRef` class is movable only and decreases the reference counter of the page in the page pool on destruction; - Remove the `RPageStorage::ReleasePage()` method; - `RPageSource::LoadPage` hands out `RPageRef` objects from their page pool",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16164:702,Load,LoadPage,702,https://root.cern,https://github.com/root-project/root/pull/16164,1,['Load'],['LoadPage']
Performance,"In CMSSW; - we use `oneapi::tbb::global_control` to set the process' maximum number of threads usable by TBB; - we create a top-level `oneapi::tbb::task_arena` (with the same number of threads), and all data processing is run within one `task_arena::execute()` call; - every call to ROOT I/O is isolated with `oneapi::tbb::this_task_arena::isolate()` call. By adding (or using) a global task arena to ROOT, does this mean, if multiple `TFile`s are writing concurrently, can their tasks be intermingled? Our guess is that ROOT's global task arena would trump the use of `this_task_arena::isolate()`, and allow such intermingling, but we don't really know. We are concerned that by sharing one task arena for unrelated activities it would cause synchronization of those activities because of task stealing. (assuming the explicit arena would trump the `this_task_arena::isolate()` call)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14807#issuecomment-1965316725:456,concurren,concurrently,456,https://root.cern,https://github.com/root-project/root/pull/14807#issuecomment-1965316725,1,['concurren'],['concurrently']
Performance,"In CMake, variables like CMAKE_CXX_FLAGS_RELEASE etc should be cache; variables, so users can set them from outside. ROOT, however, FORCE; overwrote them, so users cannot change anything.; Now, the variables are not set by ROOT at all, we use the CMake; defaults.; It is fine to append or replace substrings, but the variables should NOT; be overwritten to give users some options. In case ROOT wants to move away from CMake defaults, it can be done like; this:; ```diff; diff --git a/CMakeLists.txt b/CMakeLists.txt; index e40b84a920..ab41612006 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -29,6 +29,11 @@ endforeach(). include(cmake/modules/CaptureCommandLine.cmake). +set(CMAKE_CXX_FLAGS_DEBUG_INIT ""-O1 -g""); +set(CMAKE_CXX_FLAGS_ASSERT_INIT ""-O2 -g""); +; project(ROOT); ```. Fix #6577",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7932:63,cache,cache,63,https://root.cern,https://github.com/root-project/root/pull/7932,1,['cache'],['cache']
Performance,"In CompileMacro, the ""g"" option disables optimizations",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7377:41,optimiz,optimizations,41,https://root.cern,https://github.com/root-project/root/issues/7377,1,['optimiz'],['optimizations']
Performance,"In a basic [toy experiment example from CMS](https://cms-analysis.github.io/HiggsAnalysis-CombinedLimit/part5/longexercise/#advanced-section-b-computing-limits-with-toys) one can see that [RooProdPdf::factorizeProduct](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_old/59) function takes a significant fraction of the runtime, most of which is spent in `RooArgSet::~RooArgSet()`. In this PR, the factorizeProduct method is rewritten with `std::vector`s that are kept alive during the whole loop over pdfs such that memory allocation is avoided in this performance-critical code. A more sustainable solution would be to reuse the model for every toy such that `factorizeProduct` is only called once, but since a lot of RooFit-based code probably doesn't do this I think it's worth speeding up this function. Igprof reports for the CMS combine toy experiment example:; * [without this PR](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_old); * [with this PR](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_new)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7907:587,perform,performance-critical,587,https://root.cern,https://github.com/root-project/root/pull/7907,1,['perform'],['performance-critical']
Performance,"In a binned likelihood fit, it is possible to skip the PDF normalization; when the unnormalized binned PDF can be interpreted directly in terms of; event yields. This is now done by default for models HistFactory models,; which results in great speedups for binned fits with many channels. Some; RooFit users like ATLAS were already using this for a long time, so this; feature is battle-tested. To disable this optimization when using the `hist2workspace` executable,; add the `-disable_binned_fit_optimization` command line argument.; Directly in C++, you can also set the `binnedFitOptimization` to `false`; in the HistFactory configuration as follows:; ```C++; RooStats::HistFactory::MakeModelAndMeasurementFast(measurement, {.binnedFitOptimization=false});; ```; If your compiler doesn't support aggregate initialization with designators, you; need to create and edit the configuration struct explicitely:; ```C++; RooStats::HistFactory::HistoToWorkspaceFactoryFast::Configuration hfCfg;; hfCfg.binnedFitOptimization = false;; RooStats::HistFactory::MakeModelAndMeasurementFast(measurement, hfCfg);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10562:412,optimiz,optimization,412,https://root.cern,https://github.com/root-project/root/pull/10562,1,['optimiz'],['optimization']
Performance,"In a nutshell, the condition was:; - Thread #1) a task ends and pushes back processing slot; - Thread #2) a task starts and overwrites thread-local TTreeReaderValues; - Thread #1) first task deletes TTreeReader. See https://github.com/root-project/root/commit/26e8ace6e47de6794ac9ec770c3bbff9b7f2e945. No performance penalty could be measured.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2956:305,perform,performance,305,https://root.cern,https://github.com/root-project/root/pull/2956,1,['perform'],['performance']
Performance,"In all sub-classes same part to store histogram, list of functions and basic attributes was duplicated. Now all this ; functionality collected in protected `TGraph::SaveHistogramAndFunctions` method. . Also provide `TGraph::SaveArray` method to optimize storage of TGraph arrays in macro - there are quite of them in `TGraphBentErrors` class. Use more compact form for arrays - 16 values in the line. Made `THStack::SavePrimitve()` re-entrant. Histograms names were changed when stored - now names set back. Check for `gPad` in several interactive methods like `TGraph::InsertPoint()` to avoid crash when called from macro. Exclude unnecessary casting to `TObjOptLink` - base `TObjLink` has all required virtual methods already.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11884:245,optimiz,optimize,245,https://root.cern,https://github.com/root-project/root/pull/11884,1,['optimiz'],['optimize']
Performance,"In both branches we do parsing. The 'expensive' branch is when we have to allocate the memory for the contents we will parse while the less expensive branch only gives some memory fragment which contains what we need. There are two scenarios wrt unloading:; (a) There is nothing relevant being unloaded -- easy;; (b) Some content was unloaded -- since we are parsing either way we will re-evaluate what's available to the interpreter. If the entity was gone we will return different result (this PR does not introduce that level of caching which will alter the result). The lines with both asserts make sure if the assumptions of (b) change, that is, we start to unload in a different way the stored parse buffers. In particular, if for some reason, the content behind the cached FileID changes we will catch it and fail. So far I cannot see how that can happen. If you can trigger such a failure I'd be happy to have a look.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483#issuecomment-414137105:773,cache,cached,773,https://root.cern,https://github.com/root-project/root/pull/2483#issuecomment-414137105,1,['cache'],['cached']
Performance,"In case of a weighted histogram a weight was applied to compute the expected error for every histogram when the error is not equal to sqrt(N). Now this is done only in case the user perform the fit using the new option ""PW"", otherwise it is assumed the histogram is not weighted and no correction is used for the expected error. See also post https://root-forum.cern.ch/t/does-pearson-chi-square-fit-use-expected-error-or-observed-error-in-th1-fit/55816/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13403:182,perform,perform,182,https://root.cern,https://github.com/root-project/root/pull/13403,1,['perform'],['perform']
Performance,"In case you like the idea, the result is the following:. ![image](https://github.com/root-project/root/assets/10544/7f5ffb6e-ad60-4e10-9de0-2bde1348173a). I.e. you will have a time range associated to each module loading and you should be able to correlate them with the actual memory increase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13146#issuecomment-1615243672:213,load,loading,213,https://root.cern,https://github.com/root-project/root/pull/13146#issuecomment-1615243672,1,['load'],['loading']
Performance,In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Occasionally when loading a shared object the dynamic linker will tell us if something is missing (via dlerror) but only on the intialization path. This patch fixes ROOT-10637.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5235:170,load,loading,170,https://root.cern,https://github.com/root-project/root/pull/5235,1,['load'],['loading']
Performance,"In clang/lib/Lex/HeaderSearch.cpp HeaderSearch::lookupModule(StringRef ModuleName, StringRef SearchName),;   1. It searches for ModuleName in modulemap directly under the search directory (E.g ""/usr/include"" or ""/home/yuka/build/include"");   2. It searches for ModuleName in modulemap in a subdirectory of the search directory with the same name as the module. If it couldn't find ModuleName in both 1 and 2, it comes to this line;  283     // Load all module maps in the immediate subdirectories of this search;  284     // directory.;  285     loadSubdirectoryModuleMaps(SearchDirs[Idx]);; Which results in iterating over all files in the search path for example ""/usr/include"". For us, we had a problem with CMSSW because Clang started to load our default installed root modulemap in ""usr/include/root/module.modulemap"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2213:444,Load,Load,444,https://root.cern,https://github.com/root-project/root/pull/2213,3,"['Load', 'load']","['Load', 'load', 'loadSubdirectoryModuleMaps']"
Performance,"In cmssw we see that depending on the invoking code the trigger function is; resolved sometimes with the symlink-ed path and sometimes without. This can be observed in the cmssw biglib setup where all plugin libraries; are assembled into a single library to yield performance improvement of (10%). This is seen in cms-sw/cmsdist#5172 where libHistPainter_rdict.pcm is not; found in the fPendingRdicts because it was registered with the 'other'; path. cc: @davidlange6, @smuzaffar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4288:264,perform,performance,264,https://root.cern,https://github.com/root-project/root/pull/4288,1,['perform'],['performance']
Performance,"In commit 2812b568571a6ff25c72fffe8a1ecd32b7d6f811, we improve scalability of `TF1` creation by adding an explicit parameter to the constructor to allow the user to request ""please do not add to global list"". However this was not applied to the classes derived from `TF1`, i.e. `TF2, TF3, etc.`. Philippe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11460:63,scalab,scalability,63,https://root.cern,https://github.com/root-project/root/issues/11460,1,['scalab'],['scalability']
Performance,"In commit 79f2e3b0e5, TBranch::GetFreshBasket was effectively switch from always reallocating; the TBuffer (i.e. minimal memory use but maximal number of memory allocation) to always keeping; the TBuffer (i.e. maximal memory use but minimal number of memory allocations). This causes a problem in a use CMS use case where:; - files were kept open; - TTree were kept in memory; - has (at least) one branch with one unusually large basket (257Mb). This accumulated to increase the memory use from 1.8Gb to 2.9Gb. For now (quick fix), we use TBasket::Reset (tuned for writing) also for reading.; (This leads to spurrious large reallocation in case of a consecutive series of; large baskets).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6034:555,tune,tuned,555,https://root.cern,https://github.com/root-project/root/pull/6034,1,['tune'],['tuned']
Performance,"In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was; improved:. * simplify code; * remove race condition; * fix typos. In this commit, the same changes are also applied to the corresponding; Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`; * Fix line breaks in data printing (now the output is formatted just; like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10893:103,race condition,race condition,103,https://root.cern,https://github.com/root-project/root/pull/10893,1,['race condition'],['race condition']
Performance,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1766925765:279,load,loaded,279,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1766925765,1,['load'],['loaded']
Performance,"In https://github.com/cms-sw/cmssw/issues/32734 report what looks like a race condition.; The crashing thread is at:; ```; #8 0x00002b8fb50c5252 in __assert_fail () from /lib64/libc.so.6; #9 0x00002b8fced4b768 in TCling::AutoLoad (this=0x2b8fb708cf80, cls=0x2b90068c9c80 ""size_t"", knowDictNotLoaded=false) at /data/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc900/lcg/root/6.23.01-8e7a9c4406e195d049d6d9526c8e2ae6/root-6.23.01/core/metacling/src/TCling.cxx:6147; #10 0x00002b8fb38b5e09 in TEnum::GetEnum (enumName=0x2b90068c9c80 ""size_t"", sa=TEnum::kAutoload) at /data/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc900/lcg/root/6.23.01-8e7a9c4406e195d049d6d9526c8e2ae6/root-6.23.01/core/meta/src/TEnum.cxx:274; #11 0x00002b8fb20c4ca8 in edm::TypeWithDict::byName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, long) () from /cvmfs/cms-ib.cern.ch/nweek-02665/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_ROOT6_X_2021-01-24-0000/lib/slc7_amd64_gcc900/libFWCoreReflection.so; #12 0x00002b8fb20c519d in edm::TypeWithDict::TypeWithDict(TMethodArg*, long) () from /cvmfs/cms-ib.cern.ch/nweek-02665/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_ROOT6_X_2021-01-24-0000/lib/slc7_amd64_gcc900/libFWCoreReflection.so; #13 0x00002b8ffa1de7dd in reco::checkMethod(edm::FunctionWithDict const&, edm::TypeWithDict const&, std::vector<std::variant<signed char, unsigned char, short, unsigned short, int, unsigned int, long, unsigned long, double, float, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::variant<signed char, unsigned char, short, unsigned short, int, unsigned int, long, unsigned long, double, float, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&, std::vector<std::variant<signed char, unsigned char, short, unsigned short, int, unsigned int, long, unsigned long, double, float, std::__cxx11::basic_string<char, std::char_traits<char>, std::a",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7093:73,race condition,race condition,73,https://root.cern,https://github.com/root-project/root/issues/7093,1,['race condition'],['race condition']
Performance,"In most cases there is no need to generate raw data (vertices and triangles) for TGeoShape on the server side. JSROOT has complete logic to support all kind of TGeoShape classes. Therefore just TGeoShape instance send to client in JSON format. Only for TGeoCompositeShape plain ROOT code is better, therefore enabled by default. . Provide control when server-side or client-side code is used. ; Optimize JSON size - exclude typeinfo for most classes. ; Fix JSROOT code for TGeoArb8 class",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4173:395,Optimiz,Optimize,395,https://root.cern,https://github.com/root-project/root/pull/4173,1,['Optimiz'],['Optimize']
Performance,"In older cppyy, template instanciations are cached by fully-qualified; name directly in the namespace. Therefore, no extra code is required to; cover template instances in the pythonization code. With the new cppyy, this is not the case anymore, and instances are; instead cached in the `_instatiations` attribute of the template class [1]. This commit considers this, in a way that is backwards compatible also; with the older cppyy version that ROOT currently uses. A second commit in this PR removes some not so Pythonic ""C++-style"" code from PyROOT. [1] https://github.com/wlav/cppyy/commit/f2e1ea783afd2e4f195b6cbaf09d72b9fa3cd865. Spinoff of the bigger synchronization PR for easier review:; https://github.com/root-project/root/pull/14507",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14940:44,cache,cached,44,https://root.cern,https://github.com/root-project/root/pull/14940,2,['cache'],['cached']
Performance,"In order to prevent the loading of (all) the headers in the readcms310 example, I had to significantly tweak the result of MakeProject where several dictionary were missing (enum's pragma were incorrect, some classes were only forward declared, and having the dictionary for the map required adding operator< in a few places).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-472909979:24,load,loading,24,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-472909979,1,['load'],['loading']
Performance,"In order to specialize cling's value-printing logic for collections; we perform some SFINAE checks. Among other things, the checks; asserts that `++(obj.begin())` is well-formed. That compiles for; `std::vector` and other collections with ""fat"" iterators, but does; not compile for collections that use raw pointers as iterators:. ```cpp; auto beg(std::vector<int> &v) {; return v.begin();; }. int *beg2(std::vector<int> &v) {; return &v[0];; }. int main() {; std::vector<int> v{1,2,3};; beg(v) += 1;; //beg2(v) += 1; // does not compile - beg2(v) is not an lvalue. return 0;; }; ```. Requiring instead `std::begin(obj)` to be well-formed should be; backward compatible and it should allow collections that use raw; pointers as iterators to also be pretty-printed by cling. This fixes pretty-printing of RVec 2.0, i.e. the implementation based on LLVM's SmallVector, which uses raw pointers as iterators.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7800:72,perform,perform,72,https://root.cern,https://github.com/root-project/root/pull/7800,1,['perform'],['perform']
Performance,"In particular, `RJitted{Action,Filter,Define}::Run` and similar functions; can be performance hotspots. Avoid the nullptr check there. Many thanks to Josh Bendavid for reporting the problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9258:82,perform,performance,82,https://root.cern,https://github.com/root-project/root/pull/9258,1,['perform'],['performance']
Performance,"In particular, all creations and deletions of `shared_ptr`s have been removed from the event loop. This is a long due optimization that required several changes in the internal behaviour of TDataFrame{Impl,Action,Branch,Filter}. Unfortunately all changes are entangled, so the third commit is quite fat. The main change to the internal logic is that `TDataFrame{Action,Branch,Filter}` now store a tuple of `TDataFrameValue`s rather than (possibly null) shared pointers to `TTreeReaderValueBase`.; `TDataFrameValue` offers a transparent, unified interface to the different kinds of values that the nodes must handle: temporary columns, to be evaluated on-the-fly, `TTreeReaderArray`s that must be converted to `array_view`s and `TTreeReaderValue`s.; `TDataFrameValue` also incorporates validity checks on the value types, e.g. that arrays read via `TTreeReaderArray` are actually contiguous in memory and that the type of a temporary column is the same as the type expected by the node that makes use of it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/442:118,optimiz,optimization,118,https://root.cern,https://github.com/root-project/root/pull/442,1,['optimiz'],['optimization']
Performance,"In particular, point out when we are doing something ""special"", i.e.; filling histograms with unkown axes. This requires extra care and; extra memory usage in multi-thread runs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9434:159,multi-thread,multi-thread,159,https://root.cern,https://github.com/root-project/root/pull/9434,1,['multi-thread'],['multi-thread']
Performance,"In preparation for fixing ROOT-10520, this PR moves the `RRawFile` classes out of the `Experimental` namespace into `Internal`. A follow-up pull request will modify the RDF SQLite data source such that it uses RRawFile, which in turn uses the plugin infrastructure to load the Davix libraries when necessary. Should be merged before #4878.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4877:268,load,load,268,https://root.cern,https://github.com/root-project/root/pull/4877,1,['load'],['load']
Performance,"In preparation of adding page checksums, it makes sense to enable `LoadSealedPage()` support with DAOS and the caging option (caging: storage of multiple pages in a single object). Even though the implementation is not very performant, it will later allow to streamline the test for checksum verification.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15892:67,Load,LoadSealedPage,67,https://root.cern,https://github.com/root-project/root/pull/15892,2,"['Load', 'perform']","['LoadSealedPage', 'performant']"
Performance,"In preparation of adding support for incremental loading page locations, the descriptor access in the page source needs to be locked. Currently, the descriptor is an immutable data structure. When page locations can be mapped in and out dynamically during the lifetime of an ntuple, the descriptor actually does change from time to time. This patch sets replaces direct descriptor access in the page source by a guarded access with a r/w lock. Read-only access is guarded by a shared lock, write access guarded by an exclusive lock. A follow-up PR will change the page source API such that `Attach()` does not load any page locations but another call will be needed to load the page locations of a given cluster range or event range.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10185:49,load,loading,49,https://root.cern,https://github.com/root-project/root/pull/10185,3,['load'],"['load', 'loading']"
Performance,"In previous allmodules&autoloading patch, we used callback from; DeserializationListener to get Decl and loaded corresponding libraries.; It worked, but the performance was bad because ROOT was loading; excessive libraries. In this patch, we use TCling::LazyFunctionCreatorAutoloadForModule. This; function gets callback when ""mangled_name"" was not found in loaded; libraries thus we have to the load corresponding library and lookup; again. I used unordered_map to store mangled identifier and library pair. I'm; doing an optimization by hashing mangled name and storing library not by; name but by uint8 and hold uint8-name information in another vector.; Also tried std::map but unorderd_map was more performant. There are; better hash table like:; https://probablydance.com/2018/05/28/a-new-fast-hash-table-in-response-to-googles-new-fast-hash-table/; we can try to use them if this part gets crucial. With this patch:; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.04 seconds Cpu Time = 0.03 seconds; (TFile *) 0x562b37a14fe0; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 0.362307 seconds; sys time = 0.039741 seconds; res memory = 278.215 Mbytes; vir memory = 448.973 Mbytes; ```. W/o this patch:; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.08 seconds Cpu Time = 0.07 seconds; (TFile *) 0x5563018a1d30; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 1.524314 seconds; sys time = 0.157075 seconds; res memory = 546.867 Mbytes; vir memory = 895.184 Mbytes; ```. So it improves time by 4x times and memory by 2x.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2093:105,load,loaded,105,https://root.cern,https://github.com/root-project/root/pull/2093,7,"['load', 'optimiz', 'perform']","['load', 'loaded', 'loading', 'optimization', 'performance', 'performant']"
Performance,"In ranluxpp code, there is a left shift of negative value (c == -1); https://github.com/root-project/root/blob/master/math/mathcore/src/ranluxpp/mulmod.h#L169. Please note that this behavior is undefined per the C standard. See for example:; https://stackoverflow.com/questions/8415895/is-left-and-right-shifting-negative-integers-defined-behavior. You can rewrite the code like this:; ```; int64_t t2 = t0 - (int64_t) ( (uint64_t)c << 48);; ```. to solve the problem. It has no performance impact (verified on i7-8650U CPU with GCC v10.3.1). Here is the code I have used:; https://github.com/jirka-h/ranluxpp-portable",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8503:479,perform,performance,479,https://root.cern,https://github.com/root-project/root/issues/8503,1,['perform'],['performance']
Performance,"In regards to ROOT builds with specific architectures: I believe that the users explicitly setting ""-march=avx"" or downloading a binary tagged as ""avx"" would assume that the code they are running is always avx. So it might surprise them negatively that the default runtime option I introduced is ""find the most optimal computation library"". On the other hand, it would also be a negative surprise if users get throttled down if their hardware supports a faster library than what they specified. The solution discussed in the Monday meeting was issuing a warning for that possible mismatch in CMake, in case the users have specified themselves a specific architecture. BUT, if we provide binaries, it's just us that will get the warning, so it's completely useless. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7415#issuecomment-793929312:410,throttle,throttled,410,https://root.cern,https://github.com/root-project/root/pull/7415#issuecomment-793929312,1,['throttle'],['throttled']
Performance,"In several cases we have to store information in more than one dictionary.; There are two cases: (a) when dictionary becomes too big (windows) and; more importantly (b) when we want to have double vs Double32_t specializations.; This mode is known as MULTIDICT in cmake. The current implementation, generates 2 rdict files when MULTIDICT option; is specified. For example, `libGenVector_rdict.pcm` and; `libGenVector_G__GenVector32_rdict.pcm`. Looking at the call site of; `TCling::LoadPCM` it seems impossible to load the second version of the; dictionary. This patch removes the generation of it as it is unused.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3013:482,Load,LoadPCM,482,https://root.cern,https://github.com/root-project/root/pull/3013,2,"['Load', 'load']","['LoadPCM', 'load']"
Performance,"In some cases with template instantiation from pyroot together with RDF code which should fail to compile with clear error messages leads instead to cryptic output. Even worse, execution continues and gives undefined results. Example. ```python; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'). print(""declare ret"", ret). print(""creating helper""); helper = ROOT.helper[ROOT.std.vector[""double""]](). d = ROOT.ROOT.RDataFrame(1000). print(""Define with helper""); d = d.Define(""fx"", helper, []); print(""done define""). res = d.Sum(""fx""). print(res.GetValue()); ```. ```cpp; template <typename T>; class helper {. public:. helper() {}. std::size_t operator() () {; const double res = 0.;; res = T{0, 0}.size();; return res;; }. };; ```. Note the assignment to ```const double``` which should fail to compile. output (centos stream 8, root 6.26/10); ```; declare ret True; creating helper; Define with helper; IncrementalExecutor::executeFunction: symbol '_ZN6helperISt6vectorIdSaIdEEEclEv' unresolved while linking symbol '__cf_13'!; You are probably missing the definition of helper<std::vector<double, std::allocator<double> > >::operator()(); Maybe you need to load the corresponding shared library?; done define; 9.408421539373414e+16; ```. (if the spurious const is removed then instead one gets the correct output of 2000 and no error message)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854:1176,load,load,1176,https://root.cern,https://github.com/root-project/root/issues/11854,1,['load'],['load']
Performance,"In some old examples ""same"" and ""sames"" draw options for TF1 was used. ; Currently if ""sames"" used for TF1 - plain histogram painting is performed which is wrong for the function. Also improve PMC/PLC/PFC handling",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13934:137,perform,performed,137,https://root.cern,https://github.com/root-project/root/pull/13934,1,['perform'],['performed']
Performance,"In that case RDF will need that many bins per histogram _per thread_ (each thread gets a thread-local copy of the histogram). With 64 threads and 100 histograms that's `20000*8*64*100 / (1024**3)` bytes of RAM occupied, a bit less than 1GB. > it would still be nice if there could be a way to control the memory usage other than disabling the multi-threading totally. Each thread needs a local copy of the histogram to fill. At least with ROOT 6 histograms there is no way around that that does not involve a loss in performance. You can run with less threads by specifying the value as argument to `EnableImplicitMT`. You can also check what occupies memory exactly with `valgrind --toll=massif`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6676#issuecomment-937776951:343,multi-thread,multi-threading,343,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-937776951,2,"['multi-thread', 'perform']","['multi-threading', 'performance']"
Performance,"In the Belle2 Software the libraries are linked with `--as-needed`; linker arguments and in conjunction with the weird loading order (binary; depends on ROOT, load python, load library depending on ROOT) we seem to; run into problems that libCling is unloaded earlier than expected. Since the `TCling_UnloadMarker` was introduced for Belle2 and removal; doesn't seem to cause any problems we discussed in [ROOT-10659](https://sft.its.cern.ch/jira/browse/ROOT-10659) to remove; this again and it so far all tests on our software stack didn't show any; problems with that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5548:119,load,loading,119,https://root.cern,https://github.com/root-project/root/pull/5548,3,['load'],"['load', 'loading']"
Performance,"In the ROOT 6.26 development cycle, the RooProdPdf was partially rewritten in moden C++ with less manual memory allocation to improve performance (PR #7907). In that PR, a unit test that verifies the RooProdPdf can correctly deal with factorizing PDFs was implemented. However, that test used an arbitrary PDF where the correct factorization was checked in a rather crude way: check by hashing the content of the RooProdPdf cache element for a given normalization set that said PR doesn't change any behavior (the reference hash was hardcoded in the unit test). This commit suggests a better alternative for the unit test, checking for a multidimensional product pdf of factorizing uniform pdfs that the pdf values for differenc normalization sets is as expected. This should cover the same functionality and is less fragile and implementation dependend than hashing the cache elements. This closes GitHub issue #12430, as the rewritten test is not affected anymore by the problem reported in that issue. The commit also removed the `RooProdPdf::writeCacheToStream()` function that was an implementation detail of the old unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12447:134,perform,performance,134,https://root.cern,https://github.com/root-project/root/pull/12447,3,"['cache', 'perform']","['cache', 'performance']"
Performance,"In the RooBatchCompute CPU library, all scalar inputs have to be copied; n times into a buffer that is as long as the SIMD registers, to allow; for vectorization in all cases. To avoid frequent memory allocations, this buffer was made a `static`; variable in the original implementation of the batchcompute library,; which of course made it non-threadsafe. This is now hitting us, because RooFit needs to be able to do multiple; fits concurrently. This is a requirement for CMSSW, and a blocker for; ROOT master adoption in CMSSW since the new CPU backend is the default:; https://github.com/cms-sw/cmsdist/pull/9034. This commit fixes the concurrency problem by doing the buffering in the; DataMaps that are used in the `RooFit::Evaluator`. Like this, multiple; computation graphs can be concurrently evaluated. It was tested with the ATLAS benchmarks in `rootbench` that the fitting; performance remains the same. This PR also makes some code style and memory management improvements documented in the commit messages. It also updates the documentation to make clear the new CPU backend is now the default, which was not done in this PR:; https://github.com/root-project/root/pull/14742",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14877:434,concurren,concurrently,434,https://root.cern,https://github.com/root-project/root/pull/14877,4,"['concurren', 'perform']","['concurrency', 'concurrently', 'performance']"
Performance,"In the RooRealIntegral constructor a integrand function.getVal() is called probably to initialise the cache. ; The intention is to remove this, and for the time being keep only if the normalisation set is defined.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10201:102,cache,cache,102,https://root.cern,https://github.com/root-project/root/pull/10201,1,['cache'],['cache']
Performance,"In the batched evaluation mode, the RunContext object that cached the values of nodes in the computation graph has so far been completely cleared after each NLL evaluation. In this PR, a new class `RunContextTracker` is introduced. It makes use of the `RooChangeTracker` class to determine whether a cached result for a given node needs to be recomputed after the change of a given fundamental parameter or not. This should speed up likelihood fits, as often only one fundamental parameter is changed at the time for the numeric gradient determination. For the example [rf303_conditional.C](https://root.cern.ch/doc/master/rf303__conditional_8C.html), a reproducible 10 % speedup was observed in batch mode after this PR. The speedup is expected to be more significant for wider computational graphs where more intermediate node results can be kept in the RunContext after each evaluation. This PR implements one of the ideas suggested in https://github.com/root-project/root/issues/6557, namely the bullet point of ""Don't clear all intermediate values in batch fits between fit cycles. Only the ones that changed."". This might be interesting for @lmoneta, @hageboeck and @manolismih.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7344:59,cache,cached,59,https://root.cern,https://github.com/root-project/root/pull/7344,2,['cache'],['cached']
Performance,In the branch we are using https://github.com/cms-sw/root/compare/cmscxx/master/610a87c0a2 ; for building the modules IB; https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_0_X/cxxmodule/root.spec#L6; this change is already there. ; https://github.com/cms-sw/root/blob/cmscxx/master/610a87c0a2/core/metacling/src/TCling.cxx#L1342; We can try running putting it in and out again but for this we have agree on some set of performance tests. ; Do you discussed anything like that with Shahzad or you have any suggestion ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4088#issuecomment-511356881:420,perform,performance,420,https://root.cern,https://github.com/root-project/root/pull/4088#issuecomment-511356881,1,['perform'],['performance']
Performance,"In the current development cycle leading up to ROOT 6.28, there was some performance regression in RooStats tutorials like `HybridInstructional.C`, which can be seen for example in this CI bot comment:. https://github.com/root-project/root/pull/11740#issuecomment-1333720963. For some reason, there are now numeric integrals in the log that don't pop up in ROOT 6.26:; ```; [#1] INFO:NumericIntegration -- RooRealIntegral::init(py_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init(px_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init([py_X_prior_b_X_px]_Norm[b]_denominator_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init(py_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); [#1] INFO:NumericIntegration -- RooRealIntegral::init(px_Int[b]) using numeric integrator RooIntegrator1D to calculate Int(b); ```. RooFit in ROOT master needs to be fixed again such that these integrals don't happen. Since this is a performance regression, the priority to fix this is high. A simpler script to reproduce the performance regression outside of RooStats is this one:; ```C++; void repro(); {; RooWorkspace w;; w.factory(""Poisson::px(x[150,0,500],b[100,0,300])"");; w.factory(""Poisson::py(y[100,0,500],prod::taub(tau[1.],b))"");; w.factory(""Uniform::prior_b(b)"");; w.factory(""PROD::foo(px|b,py,prior_b)"");. RooRealVar& x = *w.var(""x"");; RooRealVar& b = *w.var(""b"");; RooAbsPdf& foo = *w.pdf(""foo"");. std::unique_ptr<RooAbsReal> integ{foo.createIntegral({b}, {b, x})};. for(int i = 0; i < 10; ++i) {; x.setVal(i % 500);. std::cout << integ->getVal() << std::endl;; }; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11814:73,perform,performance,73,https://root.cern,https://github.com/root-project/root/issues/11814,3,['perform'],['performance']
Performance,"In the future, we want separate computation graphs to share and re-use already; jitted lambdas. Without this patch, however, we would have an ordering; problem or a redefinition problem, because RDF2 might want to re-use/redefine; a lambda that RDF1 is _going to_ declare, but (since we delay all; jitting to right before an RDF's event loop) that might happen too late; for RDF2. With this change, all RDFs can jit all code that has been booked by all; other RDFs, resolving that problem. In addition, making less, ""fatter""; call to the interpreter is a performance optimization in itself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5356:555,perform,performance,555,https://root.cern,https://github.com/root-project/root/pull/5356,2,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"In the hybrid mode when we use ROOT with modules and third party software without modules we have two name resolution systems: the global module index (GMI) and the rootmaps. In case an identifier is defined in both (eg TMVA::Event and X::Event), the GMI will take priority and load the TMVA module without later allowing the system to look for other candidates. This patch uses the GMI only when no rootmap file has told ROOT that it provides names for the given namespace. This fixes root-project/root#9583",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9592:278,load,load,278,https://root.cern,https://github.com/root-project/root/pull/9592,1,['load'],['load']
Performance,"In the original implementation of the RooBatchCompute library, the; evaluation was done multi-threaded in implicit multi-threading was; enabled in ROOT with `ROOT::EnableImplicitMT()`. This commit removes this feature now, because it was never really; validated, overlapped with other parallelization capabilities of RooFit,; and keeping it will have many unforeseen consequences on users now that; the new CPU evaluation backend is the default in RooFit. See also:; https://github.com/cms-sw/cmsdist/pull/9047",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14909:88,multi-thread,multi-threaded,88,https://root.cern,https://github.com/root-project/root/pull/14909,2,['multi-thread'],"['multi-threaded', 'multi-threading']"
Performance,"In the previous PR https://github.com/root-project/root/pull/7344, the biggest challenge has been to make `RooAbsOptTestStatistic` aware if batch mode is enabled to skip the cache optimization. The cleanest way of disabling the cache optimization is to do so directly in the `RooAbsOptTestStatistic` constructor so it is skipped. Unfortunately, the constructor of `RooAbsOptTestStatistic` and its base class `RooAbsTestStatistic` has already a very long signature, and it is already challenging to correctly align all parameters correctly with the position they should have. That's why I propose in this PR to use a struct to group all `RooAbsTestStatistic` parameters. This has several advantages:; * the struct can be initialized with tagged initialization, so alignment errors can be easily avoided; * if a new parameter is added (such as the `batchMode` flag in this PR), only the configuration struct declaration struct needs to be changed; * the default values are defined in a central place and not redundantly in all the relevant constructor declarations/`RooAbsTestStatistic::create` overrides. To make the review easier, this PR only includes the configuration refactor and disabling the cache optimization is batch mode is used. The `RunContextTracker`-related commits would follow in a separate PR, but I already tested that everything together does work and the unit test I created for the `RunContextTracker` succeeds. Two open questions are still:; * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable?; * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7616:174,cache,cache,174,https://root.cern,https://github.com/root-project/root/pull/7616,6,"['cache', 'optimiz']","['cache', 'optimization']"
Performance,"In this PR I implement the skeleton of the batch compute library as well as the new class RooFitDriver, which manages all the computations that need to be done in a fit and redirects them to the RooBatchCompute library. RooFitDriver: scans the computation graph for the dependencies, handles the memory needed for the computations, schedules the order of the computations (in the future it will also schedule multi-threaded computations). In other words it ""drives"" the computation library. RooBatchCompute: the library responsible for performing the actual computations. Each instance of it (eg RooBatchCompute_AVX, RooBatchCompute_CUDA etc) has architecture-specific code. To use it, one (a PDF or another RooAbsReal class) should call rbc::dispatch() and provide the enum name of the computing function to be used, the array in which the output should be store, the number of events and an rbc::DataMap object which holds the values for every parameter and observable in the fit model.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8240:409,multi-thread,multi-threaded,409,https://root.cern,https://github.com/root-project/root/pull/8240,2,"['multi-thread', 'perform']","['multi-threaded', 'performing']"
Performance,"In this PR:. - Protection against null pointer dereference if fOff==nullptr.; - Better error messages if the images cannot be loaded. . Tag @couet . Also, I've tried to compile ROOT version with -Dgminimal=ON but it turns out one needs also -Dasimage=ON to make it for ROOT possible to load the standard pixmaps. Would that make sense to include the support of these pixmaps into -Dgminimal ?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6714:126,load,loaded,126,https://root.cern,https://github.com/root-project/root/pull/6714,2,['load'],"['load', 'loaded']"
Performance,"Include `RBrowserData` and created `TCanvas` into `gROOT` list of cleanups. In case if any object is deleted, check if it also appears in list; of cached object in RBrowserData. Tries to catch situation when ; closing TFile let objects like histograms disappear. Also special handling of TFile which do not automatically has cleanup bit set and; therefore can be deleted without any notice for RBrowser. Update jsroot",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10673:147,cache,cached,147,https://root.cern,https://github.com/root-project/root/pull/10673,1,['cache'],['cached']
Performance,"Indeed TPyDispatcher is present in ROOT:; ```; vpadulan@fedorathinkpad-T550 [~]: python; Python 3.8.7 (default, Jan 20 2021, 00:00:00) ; [GCC 10.2.1 20201125 (Red Hat 10.2.1-9)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import ROOT; >>> ROOT.TPyDispatcher; <class cppyy.gbl.TPyDispatcher at 0x55b264067990>; ```; But in the tutorial `numberEntry.py` the ROOT objects are imported via `from ROOT import *` which somehow doesn't import `TPyDispatcher` in the python session. Indeed, changing that line with `import ROOT` and then explicitly instantiating `ROOT.TPyDispatcher` solves this issue. Now in general `from <package> import *` is discouraged so I would change the tutorial, but it is true that ROOT also has its own machinery to decide which names are imported into the namespace in this case and I still don't know why TPyDispatcher is not loaded along all the other classes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7436#issuecomment-805896892:892,load,loaded,892,https://root.cern,https://github.com/root-project/root/issues/7436#issuecomment-805896892,1,['load'],['loaded']
Performance,"Indeed the patch I provided cuts half of the overhead, however there is still 40 MB per process I cannot really justify at the moment. In our case that translates to 4 GB of RSS. While I appreciate that being completely lazy in the PCM loading is probably complicated, maybe some tactical solution could be employed (like it was done for the PagedVector). For example I am not convinced ReadSLocEntry needs to keep around the buffer. There is moreover a few more places where the PagedVector could be used effectively, I will try to propose a separate PR for that. The reproducer is as easy as opening a ROOT file, see the main issue. A new profile is:. ![image](https://github.com/root-project/root/assets/10544/955ee083-3051-4127-a74f-7eff016a0743)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1926443058:236,load,loading,236,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1926443058,1,['load'],['loading']
Performance,"Indeed, I had a quick look and not even (Thin)LTO reuses the `ModulePassManager` and its passes. So let's go with the most straight-forward solution of creating new passes on every run, the same what Clang does. If that proves to be a problem, we can still think how to optimize...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14267#issuecomment-1883027459:270,optimiz,optimize,270,https://root.cern,https://github.com/root-project/root/pull/14267#issuecomment-1883027459,1,['optimiz'],['optimize']
Performance,"Indeed, applying the following patch:; ```.patch; --- interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp~	2023-01-10 11:09:06.666075151 -0600; +++ interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp	2023-01-10 11:34:45.644464781 -0600; @@ -105,6 +105,7 @@; #include <algorithm>; #include <cassert>; #include <cstdint>; +#include <cstdio>; #include <cstdlib>; #include <cstring>; #include <ctime>; @@ -2498,6 +2499,8 @@; // did not result in us loading a module file for that submodule. For; // instance, a cross-top-level-module 'conflict' declaration will hit this.; unsigned ID = getLocalOrImportedSubmoduleID(Mod);; + fprintf(stderr, ""Mod=%X\n"", Mod);; + fprintf(stderr, ""Submodule=%s\n"", Mod->Name.c_str());; assert((ID || !Mod) &&; ""asked for module ID for non-local, non-imported module"");; return ID;; ```; gives:; ```ConsoleSession; <snip/>; End of search list.; Mod=0; #0 0x0000000009107d6a llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/lib/Support/Unix/Signals.inc:565:11; #1 0x0000000009107f1b PrintStackTraceSignalHandler(void*) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/lib/Support/Unix/Signals.inc:632:1; #2 0x0000000009106743 llvm::sys::RunSignalHandlers() /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/lib/Support/Signals.cpp:97:5; #3 0x0000000009108535 SignalHandler(int) /scratch/greenc/test-products/root/v6_27_99f1/source/root-6.27.99/interpreter/llvm/src/lib/Support/Unix/Signals.inc:407:1; #4 0x00007f1a911a0630 __restore_rt sigaction.c:0:0; #5 0x00000000031e3975 std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> >::__is_long() const /scratch/greenc/test-products/clang/v14_0_6c/Linux64bit+3.10-2.17/bin/../include/c++/v1/string:1445:22; #6 0x00000000031e3929 std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861#issuecomment-1377675811:471,load,loading,471,https://root.cern,https://github.com/root-project/root/issues/10861#issuecomment-1377675811,1,['load'],['loading']
Performance,"Indeed, we cannot do that; that's I suppose what @jblomer tried to express with. > As long as we don't leak the interface to users. But until we have a usecase for such a queue that cannot live in `src/` I guess we can survive with tbb.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8715#issuecomment-887282836:171,queue,queue,171,https://root.cern,https://github.com/root-project/root/pull/8715#issuecomment-887282836,1,['queue'],['queue']
Performance,"Indeed: ROOT-performance-centos8-multicore/default really succeeded (Jenkins communication failure); 32bit is unrelated. Super nice, well done, congratulations @guitargeek !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8769#issuecomment-893254325:13,perform,performance-,13,https://root.cern,https://github.com/root-project/root/pull/8769#issuecomment-893254325,1,['perform'],['performance-']
Performance,"Info about my system:. [shell] uname -a; Linux <nodename> 4.13.4-1-default #1 SMP PREEMPT Wed Sep 27 14:20:45 UTC 2017 (4dec972) x86_64 x86_64 x86_64 GNU/Linux. libX11.so.6.3.0. [shell] g++ -v; ; Using built-in specs. ; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/usr/lib64/gcc/x86_64-suse-linux/7/lto-wrapper; OFFLOAD_TARGET_NAMES=hsa:nvptx-none; Target: x86_64-suse-linux; Configured with: ../configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man --libdir=/usr/lib64 --libexecdir=/usr/lib64 --enable-languages=c,c++,objc,fortran,obj-c++,ada,go --enable-offload-targets=hsa,nvptx-none=/usr/nvptx-none, --without-cuda-driver --enable-checking=release --disable-werror --with-gxx-include-dir=/usr/include/c++/7 --enable-ssp --disable-libssp --disable-libvtv --disable-libcc1 --enable-plugin --with-bugurl=http://bugs.opensuse.org/ --with-pkgversion='SUSE Linux' --with-slibdir=/lib64 --with-system-zlib --enable-__cxa_atexit --enable-libstdcxx-allocator=new --disable-libstdcxx-pch --enable-version-specific-runtime-libs --with-gcc-major-version-only --enable-linker-build-id --enable-linux-futex --enable-gnu-indirect-function --program-suffix=-7 --without-system-libunwind --enable-multilib --with-arch-32=x86-64 --with-tune=generic --build=x86_64-suse-linux --host=x86_64-suse-linux; Thread model: posix; gcc version 7.2.1 20170927 [gcc-7-branch revision 253227] (SUSE Linux)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1162#issuecomment-335749330:1235,tune,tune,1235,https://root.cern,https://github.com/root-project/root/pull/1162#issuecomment-335749330,1,['tune'],['tune']
Performance,Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. TClass::GetClass: Header Parsing - The representation of TNamedEditor was not found in the type system. A lookup in the interpreter is about to be tried: this can cause parsing. This can be avoided selecting TNamedEditor in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TNamedEditor; TEnum::GetEnum: Header Parsing - The enumerator TNamedEditor is not known to the typesystem: an interpreter lookup will be performed. This can imply parsing of headers. This can be avoided selecting the numerator in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for TNamedEditor; Info in <TInterpreter::TCling::AutoLoad>: Trying to autoload for TNamedEditor; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for TNamedEditor. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15963#issuecomment-2200648481:27626,perform,performed,27626,https://root.cern,https://github.com/root-project/root/issues/15963#issuecomment-2200648481,1,['perform'],['performed']
Performance,"InfoActions::ReadSTL<&TStreamerInfoActions::ReadSTLMemberWiseSameClass, &TStreamerInfoActions::ReadSTLObjectWiseFastArray> (buf=..., addr=0x555557627868, conf=0x555557625580); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1405; #92 0x00007ffff783f24d in TStreamerInfoActions::TConfiguredAction::operator() (object=0x555557627868, buffer=..., this=0x555557624830); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #93 TBufferFile::ApplySequence (this=0x7fffffffdd60, sequence=..., obj=0x555557627868); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3577; #94 0x00007ffff7846fc2 in TBufferFile::ReadClassBuffer (this=0x7fffffffdd60, cl=0x555556b015f0, pointer=0x555557627868, ; onFileClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfo.h:209; #95 0x00007ffff7a84dd9 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555556b015f0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:609; #96 TStreamerInfo::ReadBuffer<char**> (this=0x555556977820, b=..., arr=@0x7fffffffc1c0: 0x7fffffffc1b8, compinfo=0x555557621438, ; first=first@entry=0, last=last@entry=1, narr=1, eoffset=0, arrayMode=2); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1316; #97 0x00007ffff7900d10 in TStreamerInfoActions::GenericReadAction (buf=..., addr=<optimized out>, config=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:194; #98 0x00007ffff783f24d in TStreamerInfoActions::TConfiguredAction::operator() (object=0x555557627820, buffer=..., this=0x5555574e8d10); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #99 TBufferFile::ApplySequence (this=0x7fffffffdd60, sequence=..., obj=0x555557627820); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3577; #100 0x00007ffff7846fc2 in TBufferFile::ReadClas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1084517200:21271,optimiz,optimized,21271,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1084517200,1,['optimiz'],['optimized']
Performance,"InfoActions::ReadSTL<&TStreamerInfoActions::ReadSTLMemberWiseSameClass, &TStreamerInfoActions::ReadSTLObjectWiseFastArray> (buf=..., addr=0x555557646098, conf=0x555557625580); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1405; #56 0x00007ffff783f24d in TStreamerInfoActions::TConfiguredAction::operator() (object=0x555557646098, buffer=..., this=0x555557624830); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #57 TBufferFile::ApplySequence (this=0x7fffffffdd60, sequence=..., obj=0x555557646098); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3577; #58 0x00007ffff7846fc2 in TBufferFile::ReadClassBuffer (this=0x7fffffffdd60, cl=0x555556b015f0, pointer=0x555557646098, ; onFileClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfo.h:209; #59 0x00007ffff7a84dd9 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555556b015f0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:609; #60 TStreamerInfo::ReadBuffer<char**> (this=0x555556977820, b=..., arr=@0x7fffffffb660: 0x7fffffffb658, compinfo=0x555557621438, ; first=first@entry=0, last=last@entry=1, narr=1, eoffset=0, arrayMode=2); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1316; #61 0x00007ffff7900d10 in TStreamerInfoActions::GenericReadAction (buf=..., addr=<optimized out>, config=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:194; #62 0x00007ffff783f24d in TStreamerInfoActions::TConfiguredAction::operator() (object=0x555557646050, buffer=..., this=0x5555574e8d10); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #63 TBufferFile::ApplySequence (this=0x7fffffffdd60, sequence=..., obj=0x555557646050); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3577; #64 0x00007ffff7846fc2 in TBufferFile::ReadClass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1084517200:13316,optimiz,optimized,13316,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1084517200,1,['optimiz'],['optimized']
Performance,"InfoActions::ReadSTL<&TStreamerInfoActions::ReadSTLMemberWiseSameClass, &TStreamerInfoActions::ReadSTLObjectWiseFastArray> (buf=..., addr=0x55555767cdf8, conf=0x555557625580); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:1405; #20 0x00007ffff783f24d in TStreamerInfoActions::TConfiguredAction::operator() (object=0x55555767cdf8, buffer=..., this=0x555557624830); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #21 TBufferFile::ApplySequence (this=0x7fffffffdd60, sequence=..., obj=0x55555767cdf8); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3577; #22 0x00007ffff7846fc2 in TBufferFile::ReadClassBuffer (this=0x7fffffffdd60, cl=0x555556b015f0, pointer=0x55555767cdf8, ; onFileClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfo.h:209; #23 0x00007ffff7a84dd9 in TClass::Streamer (onfile_class=0x0, b=..., obj=<optimized out>, this=0x555556b015f0); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:609; #24 TStreamerInfo::ReadBuffer<char**> (this=0x555556977820, b=..., arr=@0x7fffffffab00: 0x7fffffffaaf8, compinfo=0x555557621438, ; first=first@entry=0, last=last@entry=1, narr=1, eoffset=0, arrayMode=2); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoReadBuffer.cxx:1316; #25 0x00007ffff7900d10 in TStreamerInfoActions::GenericReadAction (buf=..., addr=<optimized out>, config=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TStreamerInfoActions.cxx:194; #26 0x00007ffff783f24d in TStreamerInfoActions::TConfiguredAction::operator() (object=0x55555767cdb0, buffer=..., this=0x5555574e8d10); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #27 TBufferFile::ApplySequence (this=0x7fffffffdd60, sequence=..., obj=0x55555767cdb0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3577; #28 0x00007ffff7846fc2 in TBufferFile::ReadClass",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1084517200:5371,optimiz,optimized,5371,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1084517200,1,['optimiz'],['optimized']
Performance,"InitializersOnce (this=0x698d80, T=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp:260; #15 0x00007fffeea63d43 in cling::Interpreter::executeTransaction (this=<optimized out>, T=...) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1714; #16 0x00007fffeea6da53 in cling::IncrementalParser::commitTransaction (this=0x4f6670, PRT=..., ClearDiagClient=<optimized out>) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:675; #17 0x00007fffeea5dd71 in cling::Interpreter::PushTransactionRAII::pop (this=0x7fffffffb0c0) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:116; #18 cling::Interpreter::PushTransactionRAII::~PushTransactionRAII (this=0x7fffffffb0c0) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:106; #19 0x00007fffee9f9d90 in ClingMemberIterInternal::DCIter::DCIter (this=0x7fffffffb140, DC=<optimized out>, interp=<optimized out>) at /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingMemberIter.cxx:33; #20 0x00007fffee9f649b in TClingMemberIter::TClingMemberIter (this=0x7fffffffb128, interp=0x0, DC=0x80) at /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingMemberIter.h:145; #21 TClingDataMemberIter::TClingDataMemberIter (this=0x7fffffffb128, interp=0x0, DC=0x80, selection=TDictionary::EMemberSelection::kAlsoUsingDecls) at /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingDataMemberInfo.h:66; #22 TClingDataMemberInfo::TClingDataMemberInfo (this=0xa1b5350, interp=0x4f17a0, ci=0xaacabd0, selection=TDictionary::EMemberSelection::kAlsoUsingDecls) at /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingDataMemberInfo.cxx:115; #23 0x00007fffee96cf5b in TCling::DataMemberInfo_Factory (this=0x4f0e00, clinfo=0xaacabd0, selection=TDictionary::EMemberSelection::kAlsoUsingDecls) at /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:8508; #24 0x00007ffff685869f ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1097659822:5002,optimiz,optimized,5002,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1097659822,2,['optimiz'],['optimized']
Performance,"Initializing RooBatchCompute takes over a second when CUDA is also; available on the system. It is unreasonable to do this everytime the; RooFit library is loaded. For example, the time of small unit tests was; completely dominated by the RooBatchCompute initialization time before; this commit. This change entailed another change in `Buffers.cxx` to avoid static; initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9915:156,load,loaded,156,https://root.cern,https://github.com/root-project/root/pull/9915,1,['load'],['loaded']
Performance,Inline and access optimizations for TLorentzVector and TVector3,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/165:18,optimiz,optimizations,18,https://root.cern,https://github.com/root-project/root/pull/165,2,['optimiz'],['optimizations']
Performance,"Instead of aborting on an `R__ASSERT`, with this patch RNTuple throws a meaningful exception when trying to open a file that was generated in an incompatible, future format. Fixes lazy loading of the model in `RNTupleReader::LoadEntry()` along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7739:185,load,loading,185,https://root.cern,https://github.com/root-project/root/pull/7739,2,"['Load', 'load']","['LoadEntry', 'loading']"
Performance,"Instead of looking for libraries resolving each unresolved symbol,; just load each lib resolving symbols: this will allow subsequent; missing symbols to be resolved from the loaded library quickly,; without touching disk. When loading an existing ACLiC library, and if we expect it; to contain the dependencies (explicit linking), just load itt,; instead of trying to (re-)determine its dependencies from its; undefined symbols: the outcome should be just the library; dependencies we expect the library to know already.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8017:73,load,load,73,https://root.cern,https://github.com/root-project/root/pull/8017,4,['load'],"['load', 'loaded', 'loading']"
Performance,"Instead of using one `RPageSinkBuf` per context, implement a synchronizing page sink that compresses pages and writes them through to storage, but only commits them when the context's cluster is ready. This uses much less memory, but results in higher lock contention and very fragmented files. ---. We likely don't want to merge this because buffered writing offers better scalability *and* allows to reorder pages, resulting in better read performance. But for future reference, this is how it could be implemented.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14939:374,scalab,scalability,374,https://root.cern,https://github.com/root-project/root/pull/14939,2,"['perform', 'scalab']","['performance', 'scalability']"
Performance,"Instead, split the code RDataFrame jits every 1k newlines and jit; in chunks. This avoids an explosion in the time required by; optimizer passes, which seem to not deal well with very large; function bodies. See https://github.com/root-project/root/issues/9312 and; https://github.com/root-project/root/issues/7604 for more discussion. @hahnjo can you confirm this helps? It brings jitting times down to reasonable (<1m times) for the cases I tested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9328:128,optimiz,optimizer,128,https://root.cern,https://github.com/root-project/root/pull/9328,1,['optimiz'],['optimizer']
Performance,"Interesting errors, which were to be expected. The ROOT PCMs have coded the version number with a ""/"" while after the changes the version does not contain it any more. Given that root pcms are special files, written w/o streamer infos (for performance reasons and because by construction are read only by the same release that produced them) many tests still fail. If the builds were not incremental, the problem would not be there. Thinking about a solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15164#issuecomment-2059319277:240,perform,performance,240,https://root.cern,https://github.com/root-project/root/pull/15164#issuecomment-2059319277,1,['perform'],['performance']
Performance,"Interestingly, going back at the first post; > It has been tested with different LCG releases from LCG_94 to LCG_97a and it always works for python2 and fails for python3. And indeed:; ```; [vpadulan@lxplus706 ~]$source /cvmfs/sft.cern.ch/lcg/views/LCG_94python3/x86_64-centos7-gcc8-opt/setup.sh; [vpadulan@lxplus706 ~]$python; Python 3.6.5 (default, Sep 20 2018, 20:43:16) ; [GCC 8.1.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import ROOT; >>> ROOT.__file__; '/cvmfs/sft.cern.ch/lcg/views/LCG_94python3/x86_64-centos7-gcc8-opt/lib/ROOT.py'; >>> import dill; d>>> dill.__version__; '0.2.8.2'; >>> quit(); [vpadulan@lxplus706 ~]$python -c ""import ROOT; import dill; print(type(dill.loads(dill.dumps(ROOT.TH1D()))))""; Traceback (most recent call last):; File ""/cvmfs/sft.cern.ch/lcg/releases/Python/3.6.5-56635/x86_64-centos7-gcc8-opt/lib/python3.6/pickle.py"", line 918, in save_global; obj2, parent = _getattribute(module, name); File ""/cvmfs/sft.cern.ch/lcg/releases/Python/3.6.5-56635/x86_64-centos7-gcc8-opt/lib/python3.6/pickle.py"", line 266, in _getattribute; .format(name, obj)); AttributeError: Can't get local attribute 'compose_method.<locals>.composition_pythonizor' on <function compose_method at 0x7f58daa07268>; ```. But you can see from the block above that the dill version is `0.2.8.2`. If instead the latest `dill` is installed, the issue cannot be reproduced anymore:; ```; [vpadulan@lxplus706 ~]$pip install dill==0.3.3 --user; [vpadulan@lxplus706 ~]$python; Python 3.6.5 (default, Sep 20 2018, 20:43:16) ; [GCC 8.1.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.path.insert(0, ""/afs/cern.ch/user/v/vpadulan/.local/lib/python3.6/site-packages""); >>> import ROOT; >>> import dill; >>> dill.__version__; '0.3.3'; >>> dill.loads(dill.dumps(ROOT.TH1D())); <ROOT.TH1D object at 0x89a1550>; >>>; ```. So I'm even more convinced that this could be a `dill` issue rather than ROOT pe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6370#issuecomment-822620208:727,load,loads,727,https://root.cern,https://github.com/root-project/root/issues/6370#issuecomment-822620208,1,['load'],['loads']
Performance,"Interpreter/IncrementalParser.cpp:846; #69 0x00007fffeea62615 in cling::Interpreter::EvaluateInternal (this=0x4f17a0, input=..., CO=..., V=0x7fffffffcc70, wrapPoint=<optimized out>) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1379; #70 0x00007fffee95d98f in TCling::Calc (this=0x4f0e00, line=0x1c224b0 ""ROOT::Internal::RDF::JitFilterHelper(R_rdf::lambda0, new const char*[1]{\""a\""}, 1, \""\"", reinterpret_cast<std::weak_ptr<ROOT::Detail::RDF::RJittedFilter>*>(0x21269a0), reinterpret_cast<std::shared_ptr<ROO""..., error=0x7fffffffcd0c) at /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:3556; #71 0x00007ffff7fc97b3 in ROOT::Internal::RDF::InterpreterCalc(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::$_0::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (; codeSlice=""ROOT::Internal::RDF::JitFilterHelper(R_rdf::lambda0, new const char*[1]{\""a\""}, 1, \""\"", reinterpret_cast<std::weak_ptr<ROOT::Detail::RDF::RJittedFilter>*>(0x21269a0), reinterpret_cast<std::shared_ptr<ROO""..., this=<optimized out>) at /home/jhahnfel/ROOT/llvm13/src/tree/dataframe/src/RDFUtils.cxx:339; #72 ROOT::Internal::RDF::InterpreterCalc (code=""ROOT::Internal::RDF::JitFilterHelper(R_rdf::lambda0, new const char*[1]{\""a\""}, 1, \""\"", reinterpret_cast<std::weak_ptr<ROOT::Detail::RDF::RJittedFilter>*>(0x21269a0), reinterpret_cast<std::shared_ptr<ROO""..., context=""RLoopManager::Run"") at /home/jhahnfel/ROOT/llvm13/src/tree/dataframe/src/RDFUtils.cxx:362; #73 0x00007ffff7fd2f04 in ROOT::Detail::RDF::RLoopManager::Jit (this=<optimized out>) at /home/jhahnfel/ROOT/llvm13/src/tree/dataframe/src/RLoopManager.cxx:720; ```; It *looks* like we have a problem with re-entrant JITing, but I have absolutely no idea if that's supposed to work or points to a problem somewhere else @vgvassilev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1097659822:17580,optimiz,optimized,17580,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1097659822,2,['optimiz'],['optimized']
Performance,"Introduce *Auto* property for RColor; Before drawing RCanvas, one could call `canvas->AssignAutoColors();` to performs color assignment; Later method can be invoked automatically",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4511:110,perform,performs,110,https://root.cern,https://github.com/root-project/root/pull/4511,1,['perform'],['performs']
Performance,Introduce Optimize() drawing method for RH1/RH2/RH3 classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5980:10,Optimiz,Optimize,10,https://root.cern,https://github.com/root-project/root/pull/5980,1,['Optimiz'],['Optimize']
Performance,"Introduce the new `RooAbsPdf::createExpectedEvents()` method to; explicitly create an object that represents the expected number of; events. Like this, the expected number of events is fully exposed in the; computation graph, just like the integrals. This makes adding support of RooFit codegen+AD for extended fits; trivial, and also optimizes the BatchMode because the RooFitDriver can; de-duplicate integrals that appear both in the regular evaluation path; and `RooAbsPdf::expectedEvents()`. Now that a function that represents the expected events is; part of the computation graph, using it in the RooFit code generation; for the NLL is straight forward.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12998:335,optimiz,optimizes,335,https://root.cern,https://github.com/root-project/root/pull/12998,1,['optimiz'],['optimizes']
Performance,Introduces a new (for multiclass anyway) button in the gui that; when clicked displays one ROC curve per class. Each curve contains; the performance of all methods for that class. Uses the new ROCCurve class to calculate the curves.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/574:137,perform,performance,137,https://root.cern,https://github.com/root-project/root/pull/574,1,['perform'],['performance']
Performance,"Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11628:149,optimiz,optimizations,149,https://root.cern,https://github.com/root-project/root/pull/11628,3,"['cache', 'optimiz', 'perform']","['cache', 'optimizations', 'performance']"
Performance,"Introducing RTreeViewer, integrated with RBrowser. Activated when `TTree` item clicked in the browser. Main features:; 1. Edit draw expressions, cut, options; 2. Input help branch/leafs names as suggested items; 3. Select dialog with fulllist and search over branch list; 4. Drawing performed into recent canvas created in `RBrowser`. Several changes in RBrowser to let implement special features required by tree viewer - ; like activate canvas widget after tree draw. ![tree_draw0](https://user-images.githubusercontent.com/4936580/195348575-b207f199-35fc-4cd6-8d09-d2894c5dba16.png); ![tree_draw1](https://user-images.githubusercontent.com/4936580/195348581-30ca4aae-9d27-4f42-98e7-dc5b596cbefc.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11548:283,perform,performed,283,https://root.cern,https://github.com/root-project/root/pull/11548,1,['perform'],['performed']
Performance,"Ipopt ""Interior Point OPTimizer""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3249:22,OPTimiz,OPTimizer,22,https://root.cern,https://github.com/root-project/root/pull/3249,1,['OPTimiz'],['OPTimizer']
Performance,Is there a way to understand if those race conditions pre-existing to this patch?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073#issuecomment-333661294:38,race condition,race conditions,38,https://root.cern,https://github.com/root-project/root/pull/1073#issuecomment-333661294,1,['race condition'],['race conditions']
Performance,Issue with TClass object managed in case of multi-threaded 'rapid' set of dlopen/dlclose on same library.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12715:44,multi-thread,multi-threaded,44,https://root.cern,https://github.com/root-project/root/issues/12715,1,['multi-thread'],['multi-threaded']
Performance,"It builds fine on my machine with this cmake setup (note that CUDA 8.0 supports only GCC up to 5.3):. ```; cmake .. \; -Dalien=OFF -Dcuda=ON \; -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-8.0 \; -DCMAKE_CXX_COMPILER=/usr/bin/g++-4.9 \; -DCMAKE_C_COMPILER=/usr/bin/gcc-4.9; ```. And here a test python file:. ```; #!/usr/bin/env python. from ROOT import TMVA, TFile, TTree, TCut; from subprocess import call; from os.path import isfile. # Setup TMVA; TMVA.Tools.Instance(). output = TFile.Open('TMVA.root', 'RECREATE'); factory = TMVA.Factory('TMVAClassification', output,; '!V:!Silent:Color:DrawProgressBar:Transformations=D,G:AnalysisType=Classification'). # Load data; if not isfile('tmva_class_example.root'):; call(['curl', '-O', 'http://root.cern.ch/files/tmva_class_example.root']). data = TFile.Open('tmva_class_example.root'); signal = data.Get('TreeS'); background = data.Get('TreeB'). dataloader = TMVA.DataLoader('dataset'); for branch in signal.GetListOfBranches():; dataloader.AddVariable(branch.GetName()). dataloader.AddSignalTree(signal, 1.0); dataloader.AddBackgroundTree(background, 1.0); dataloader.PrepareTrainingAndTestTree(TCut(''),; 'TrainTestSplit_Signal=0.8:TrainTestSplit_Background=0.8:SplitMode=Random:NormMode=NumEvents:!V'). # Book methods; factory.BookMethod(dataloader, TMVA.Types.kDNN, 'DNN',; 'H:!V:VarTransform=D,G:ErrorStrategy=CROSSENTROPY:WeightInitialization=XAVIERUNIFORM:Architecture=GPU:Layout=TANH|64,TANH|64,TANH|64,LINEAR:TrainingStrategy=LearningRate=0.01,Repetitions=1,ConvergenceSteps=20,BatchSize=32,TestRepetitions=1'). # Run training, test and evaluation; factory.TrainAllMethods(); factory.TestAllMethods(); factory.EvaluateAllMethods(); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/283#issuecomment-255390309:656,Load,Load,656,https://root.cern,https://github.com/root-project/root/pull/283#issuecomment-255390309,1,['Load'],['Load']
Performance,"It causes dask to print a warning since they are; typically C++ headers, not Python modules. The `load=False` parameter only has an effect since dask.distributed v2023.06 and it will be ignored; by previous versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13121:98,load,load,98,https://root.cern,https://github.com/root-project/root/pull/13121,1,['load'],['load']
Performance,It contains multiple performance improvements comparing to lz4 1.8.5.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4091:21,perform,performance,21,https://root.cern,https://github.com/root-project/root/pull/4091,1,['perform'],['performance']
Performance,"It costs a factor 3x in memory, so experiments might want to disable the optimization for large models with many fields - in that case it is not expected to provide a sufficient benefit because most columns will have less elements per cluster than the target page size.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15243:73,optimiz,optimization,73,https://root.cern,https://github.com/root-project/root/pull/15243,1,['optimiz'],['optimization']
Performance,It does not hit the cache because the unloading clears the memory buffers behind the FileID. This means we have cache but it is unreachable after unloading by design.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483#issuecomment-413987265:20,cache,cache,20,https://root.cern,https://github.com/root-project/root/pull/2483#issuecomment-413987265,2,['cache'],['cache']
Performance,"It generates all stack primitives - axis histogram and legend as Paint; method does, but does not perform Paint. ; Will be used in TWebCanvas. Replace NULL by nullptr in hist tutorials",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11678:98,perform,perform,98,https://root.cern,https://github.com/root-project/root/pull/11678,1,['perform'],['perform']
Performance,It is a new attempt to land Cloudflare ZLIB. ; More information about performance numbers are presented in ROOT I/O meeting: https://indico.cern.ch/event/696030/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2806:70,perform,performance,70,https://root.cern,https://github.com/root-project/root/pull/2806,1,['perform'],['performance']
Performance,"It is fixing explicit C++ modules failing with:. `In file included from /data/sftnight/workspace/root-benchmark-compile-cxxmodule/BUILDTYPE/Release/COMPILER/clang_gcc62/LABEL/performance-cc7/root/core/imt/src/TThreadExecutor.cxx:8:; In file included from /data/sftnight/workspace/root-benchmark-compile-cxxmodule/BUILDTYPE/Release/COMPILER/clang_gcc62/LABEL/performance-cc7/build/include/tbb/tbb.h:76:; /data/sftnight/workspace/root-benchmark-compile-cxxmodule/BUILDTYPE/Release/COMPILER/clang_gcc62/LABEL/performance-cc7/build/include/tbb/recursive_mutex.h:54:47: error: declaration of 'PTHREAD_MUTEX_RECURSIVE' must be imported from module 'Imt.ROOT/TTaskGroup.hxx' before it is required; pthread_mutexattr_settype( &mtx_attr, PTHREAD_MUTEX_RECURSIVE );; ^; In module 'Imt' imported from /data/sftnight/workspace/root-benchmark-compile-cxxmodule/BUILDTYPE/Release/COMPILER/clang_gcc62/LABEL/performance-cc7/root/core/imt/src/TThreadExecutor.cxx:1:; /usr/include/pthread.h:51:3: note: previous declaration is here; PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,; ^; 1 error generated.`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3374:175,perform,performance-,175,https://root.cern,https://github.com/root-project/root/pull/3374,4,['perform'],['performance-']
Performance,"It is just debug mode, the consequence of a race condition on gDebug would ""only"" be that some message may or may not be printed when intended. So it is likely fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-735955797:44,race condition,race condition,44,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-735955797,1,['race condition'],['race condition']
Performance,"It is not necessary here, since it is already loaded due to the; from libROOTPythonizations import ...; earlier in the file, and it fails when the python module is not in the; library path (it is in the python path only). /usr/lib64/python3.9/site-packages/libROOTPythonizations3_9.cpython-39-x86_64-linux-gnu.so. https://bugzilla.redhat.com/show_bug.cgi?id=1900661",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6883:46,load,loaded,46,https://root.cern,https://github.com/root-project/root/pull/6883,1,['load'],['loaded']
Performance,"It is now possible to create independent TMVA::Readers and use; them simultaneously on different threads.; Training of MVAs is still only safe single-threaded. In addition,; it is not safe to use multiple instances of MethodCFMlpANN either; single or multi-threaded because of a global 'this' pointer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/25:251,multi-thread,multi-threaded,251,https://root.cern,https://github.com/root-project/root/pull/25,1,['multi-thread'],['multi-threaded']
Performance,"It is silly that the version is not reported in the logs when the client lib is loaded (well, now I've added it: https://github.com/xrootd/xrootd/commit/07e6d5db3bd086e3ebd0576b7e73b6a6aa62b902), my fear is that xrootd5 libs are being load.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-748172034:80,load,loaded,80,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-748172034,2,['load'],"['load', 'loaded']"
Performance,"It is sometimes not possible for a TDataSource to know the full range of entries upfront. To cope with these cases, we need TDataSource to somehow communicate to TDataFrame when it can finish looping -- dynamically, as we go, we are done when we are done. The solution proposed in this PR is that TDataFrame will call `TDataSource::GetEntryRanges` repeatedly instead of just once: after processing a batch of entry ranges, TDF will ask for another one, then another one, until the TDataSource replies with an empty vector, which signals the end of the event-loop. The current TDataSources required small modification to make sure that the second time `GetEntryRanges` is invoked it returns an empty vector. Furthermore, as TDataFrame might use the same TDataSource for multiple event-loops, the TDataSource must setup `fEntryRanges` at the beginning of each event-loop. This is the rationale for the introduction of the `TDataSource::Init` and `TDataSource::Finalise` methods, that can optionally be implemented by the concrete data-source classes to deal with per-event-loop initialization and clean-up operations.; I think the addition of `Init` might be a good thing overall because currently we high-jack `SetNSlots` to perform initialization operations -- `Init` seems like a more proper place. `Finalise` is introduced for symmetry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1219:1224,perform,perform,1224,https://root.cern,https://github.com/root-project/root/pull/1219,1,['perform'],['perform']
Performance,"It is still an issue on both Windows 64 bit and 32 bit as of April 2024. Here is the relevant output:; ```; 2206/2226 Test #2197: gtestC--ROOT-CI-roottest-root-tree-readrules-gh-14462-gh14462regression ...........................***Failed 1.06 sec; Running main() from C:\ROOT-CI\build\googletest-prefix\src\googletest\googletest\src\gtest_main.cc; [==========] Running 1 test from 1 test suite.; [----------] Global test environment set-up.; [----------] 1 test from ReadRules; [ RUN ] ReadRules.CustomReadRuleWithSpace; C:\ROOT-CI\src\core\testsupport\src\TestSupport.cxx(76): error: Failed; Received unexpected diagnostic of severity 3000 at 'TCling::LoadPCM' reading 'ROOT PCM C:\ROOT-CI\build\roottest\root\tree\readrules\gh-14462\Release\gh14462regressionDict_rdict.pcm file does not exist'.; Suppress those using ROOT/TestSupport.hxx; [ FAILED ] ReadRules.CustomReadRuleWithSpace (883 ms); [----------] 1 test from ReadRules (883 ms total); ; [----------] Global test environment tear-down; [==========] 1 test from 1 test suite ran. (883 ms total); [ PASSED ] 0 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] ReadRules.CustomReadRuleWithSpace; ; 1 FAILED TEST; CMake Error at C:/ROOT-CI/build/RootTestDriver.cmake:232 (message):; error code: 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9354#issuecomment-2046160417:654,Load,LoadPCM,654,https://root.cern,https://github.com/root-project/root/issues/9354#issuecomment-2046160417,1,['Load'],['LoadPCM']
Performance,It looks like without ROOT pcm but with a ClassInfo/Decl available but not loaded then the base class would not be properly setup.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6035:75,load,loaded,75,https://root.cern,https://github.com/root-project/root/pull/6035,1,['load'],['loaded']
Performance,"It looks okay:; ```; $ cat /proc/sys/kernel/threads-max; 7897651; $ cat /proc/sys/kernel/pid_max ; 4194304; $ cat /proc/sys/vm/max_map_count; 262144; ```; ```; jupyter-pcanal-rootdevel:quick-devel pcanal$ ulimit -a; real-time non-blocking time (microseconds, -R) unlimited; core file size (blocks, -c) unlimited; data seg size (kbytes, -d) unlimited; scheduling priority (-e) 0; file size (blocks, -f) unlimited; pending signals (-i) 3948825; max locked memory (kbytes, -l) 8192; max memory size (kbytes, -m) unlimited; open files (-n) 1048576; pipe size (512 bytes, -p) 8; POSIX message queues (bytes, -q) 819200; real-time priority (-r) 0; stack size (kbytes, -s) 8192; cpu time (seconds, -t) unlimited; max user processes (-u) 4194304; virtual memory (kbytes, -v) unlimited; file locks (-x) unlimited; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16552#issuecomment-2383251376:588,queue,queues,588,https://root.cern,https://github.com/root-project/root/issues/16552#issuecomment-2383251376,1,['queue'],['queues']
Performance,"It modifies the interpreter state, thus needs locking. UPDATE:. As suggested by @hahnjo I tried to write a small unit test to see the data race in action. In fact it was pretty easy, and it also highlighted another data race in `TCling::LoadFile`. In the latest commits I take care both of adding the lock to the other method and adding the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13348:237,Load,LoadFile,237,https://root.cern,https://github.com/root-project/root/pull/13348,1,['Load'],['LoadFile']
Performance,"It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas; on the client side, but does not wait that real update is completed.; Avoids blocking of caller thread.; Have to be used if called from other web-based widget to avoid logical; dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13552:3,perform,performs,3,https://root.cern,https://github.com/root-project/root/pull/13552,2,['perform'],"['performed', 'performs']"
Performance,"It returns the `std::vector<T, RAdoptAllocator<T>>` data member by; reference, but in the near future we want to remove the data member; (in the context of adding a small buffer optimization to RVec).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7226:178,optimiz,optimization,178,https://root.cern,https://github.com/root-project/root/pull/7226,1,['optimiz'],['optimization']
Performance,"It seems doxygen tried to run this `qhelpgenerator` but failed:; ```; Running qhelpgenerator...; Error in line 15: Opening and ending tag mismatch.; error: failed to run qhelpgenerator on index.qhp; lookup cache used 13266/1048576 hits=365874 misses=14050; finished...; ```; That's weird because very likely this index.php file has been generated by doxygen, and it seems to have a wrong syntax.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-903547557:206,cache,cache,206,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-903547557,1,['cache'],['cache']
Performance,"It seems that VecCore is a wrapper over Vc, however ROOT uses Vc in the context; of VecCore but also standalone. Adapt CMake to only try to load the Vc module when the Vc option is on as VecCore; might have not exposed Vc... This change improves root-project/root@f2ac9b349f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9572:140,load,load,140,https://root.cern,https://github.com/root-project/root/pull/9572,1,['load'],['load']
Performance,It seems that rdict files help when we have significant amount of headers needed for I/O. Can we heuristically determine the threshold size? I think that roottest suffers from performance degradation because the rdict files are almost empty and it does not pay off loading and using them.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-650610389:176,perform,performance,176,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-650610389,2,"['load', 'perform']","['loading', 'performance']"
Performance,"It seems the 2 files are not ""exactly"" before and after this PR. The difference between the 2 records (after sorting since indeed the order of library loading might alter the order in the list of StreamerInfo) is:; ```; 735,736c735,736; < ""fTitle"" : ""(=kTRUE if leaf has a range, kFALSE otherwise). This is equivalent to being a 'leafcount'. For a TLeafElement the range information is actually store in the TBranchElement."",; < ""fTitle"" : ""(=kTRUE if unsigned, kFALSE otherwise)"",; ---; > ""fTitle"" : ""(=true if leaf has a range, false otherwise). This is equivalent to being a 'leafcount'. For a TLeafElement the range information is actually store in the TBranchElement."",; > ""fTitle"" : ""(=true if unsigned, false otherwise)"",; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14747#issuecomment-1984833731:151,load,loading,151,https://root.cern,https://github.com/root-project/root/pull/14747#issuecomment-1984833731,1,['load'],['loading']
Performance,"It seems the order of execution is now 'wrong' in the PyROOT cases, i.e. do we still implement the behavior described in the comment:; ```; # Hard teardown: run part of the gROOT shutdown sequence.; # Running it here ensures that it is done before any ROOT libraries; # are off-loaded, with unspecified order of static object destruction.; ```. See also 7a592f5d62dda6c76f230bfa6fd879e5fa80582a for some description of a challenging use case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10753#issuecomment-1155345758:278,load,loaded,278,https://root.cern,https://github.com/root-project/root/pull/10753#issuecomment-1155345758,1,['load'],['loaded']
Performance,"It seems to me that the test projectroot.roottest.root.io.double32.roottest_root_io_double32_make fails just because its reference file needs to be updated now. At least I don't see any critical problem with that test.; The test projectroot.roottest.root.tree.cache.roottest_root_tree_cache_TooSmall failed once too, but on my local machine it is working. Unfortunately I can no longer access the build logs with my CERN account. Most probably because it was converted to a ""Lightweight Account"" so I am unable to investigate this further.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9008#issuecomment-921518889:260,cache,cache,260,https://root.cern,https://github.com/root-project/root/pull/9008#issuecomment-921518889,1,['cache'],['cache']
Performance,"It turns out that this makes things more compilcated than necessary, because one would have to manually load the HIstFactory library before loading JSON files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12625#issuecomment-1988326774:104,load,load,104,https://root.cern,https://github.com/root-project/root/pull/12625#issuecomment-1988326774,2,['load'],"['load', 'loading']"
Performance,"It was tested that this works by building openssl on Arch Linux in a random directory and setting this as the `OPENSSL_ROOT_DIR`. Then, I checked in the cache for the xrootd builtin external project if openssl was found in the desired location:; ```; builtins/xrootd/BUILTIN_XROOTD-prefix/src/BUILTIN_XROOTD-build/CMakeCache.txt; ```. This was the case indeed. Closes #10075.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15697:153,cache,cache,153,https://root.cern,https://github.com/root-project/root/pull/15697,1,['cache'],['cache']
Performance,"It works for me. In your example, Isee:. > Fatal in TROOT::InitInterpreter: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. What is going on there? Do you have this `libtinfo.so.5` available in the LD_LIBRARY_PATH?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13511#issuecomment-1726042729:83,load,load,83,https://root.cern,https://github.com/root-project/root/issues/13511#issuecomment-1726042729,1,['load'],['load']
Performance,"It's a minor change that might or might not give better performace, but at least it means we can close this JIRA ticket:. https://sft.its.cern.ch/jira/browse/ROOT-6954",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14143:56,perform,performace,56,https://root.cern,https://github.com/root-project/root/pull/14143,1,['perform'],['performace']
Performance,"It's important the the AD code path performance that the analytic integrals in the generated RooFit code don't end up in the NLL loop bodies. This PR generalizes some implementation details of the BatchMode to figure out which observables are scalar, and if they are, write them outside of the loop body. Furthermore, some code from the BatchMode is reused to fill also the vector observables for the generated code. When benchmarking the minimization of the model in `testRooFuncWrapper`, the situation looks now very good for RooFit code-gen that is as fast as the BatchMode here, even if it has not caching and no vectorization. Also, the AD mode is faster than vanilla RooFit, even if the number of parameters is not very high. ```txt; ------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ------------------------------------------------------------------------------------------; NllReferenceMinimization/0/10/iterations:100 0.488 ms 0.487 ms 100; NllReferenceMinimization/0/100/iterations:100 0.382 ms 0.381 ms 100; NllReferenceMinimization/0/1000/iterations:100 3.63 ms 3.62 ms 100; NllReferenceMinimization/0/10000/iterations:100 39.6 ms 39.6 ms 100; NllBatchModeMinimization/1/10/iterations:100 0.090 ms 0.090 ms 100; NllBatchModeMinimization/1/100/iterations:100 0.163 ms 0.163 ms 100; NllBatchModeMinimization/1/1000/iterations:100 0.882 ms 0.881 ms 100; NllBatchModeMinimization/1/10000/iterations:100 8.64 ms 8.64 ms 100; NllCodeSquash_NumDiff/2/10/iterations:100 0.053 ms 0.053 ms 100; NllCodeSquash_NumDiff/2/100/iterations:100 0.124 ms 0.124 ms 100; NllCodeSquash_NumDiff/2/1000/iterations:100 0.887 ms 0.886 ms 100; NllCodeSquash_NumDiff/2/10000/iterations:100 10.1 ms 10.1 ms 100; NllCodeSquash_AD/3/10/iterations:100 0.057 ms 0.057 ms 100; NllCodeSquash_AD/3/100/iterations:100 0.186 ms 0.186 ms 100; NllCodeSquash_AD/3/1000/iterations:100 1.44 ms 1.44 ms 100; NllCodeSquash_AD/3/10000/iterations:100 17.4 ms 17.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12656:36,perform,performance,36,https://root.cern,https://github.com/root-project/root/pull/12656,1,['perform'],['performance']
Performance,"It's not an issue for adoption. The underlying issue is still there, though. ROOT still loads a bunch of unneeded PCM when simply opening a file, it's just the cost is half what it was before and the reproducer is the same as above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-2304636324:88,load,loads,88,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-2304636324,1,['load'],['loads']
Performance,"It's sufficient to set the `CMAKE_CXX_*_INIT` versions of the build-type related flags *if* we want to change the defaults. Then, cmake will populate the actual flags for us, and users can override them as they see fit. After `project(root)`, string manipulations are OK, but **not** overriding the entire string.; Appending the whole chain of warning and linker flags can still be done in those `SetUp*` files. I would leave them mostly intact, and would just remove the ""cache force"" lines. @stwunsch I *think* those flags were in effect for quite a while, because they weren't `CACHE` flags before I had trouble overriding them. When I made them `CACHE` in 2019 3c42b07168b8315ac1ed1abbf69f89d5f4e99099, the config lines stopped having an effect, but you were able to set them from the outside again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6577#issuecomment-823068975:473,cache,cache,473,https://root.cern,https://github.com/root-project/root/issues/6577#issuecomment-823068975,3,"['CACHE', 'cache']","['CACHE', 'cache']"
Performance,"Jenkins passed except for `ROOT-performance-centos8-multicore`, but I don't think we need to wait for it (the queue is quite full right now).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11877#issuecomment-1346550392:32,perform,performance-,32,https://root.cern,https://github.com/root-project/root/pull/11877#issuecomment-1346550392,2,"['perform', 'queue']","['performance-', 'queue']"
Performance,"JsMVA: use latest JSROOT, use `/static` path to load code",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12484:48,load,load,48,https://root.cern,https://github.com/root-project/root/pull/12484,1,['load'],['load']
Performance,Jupyroot has problems loading JSRoot.core.js in jupyterhub/jupyterlab 3.0,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8459:22,load,loading,22,https://root.cern,https://github.com/root-project/root/issues/8459,1,['load'],['loading']
Performance,"Jupyter may be configured to be served on different base url's, so we cannot assume that is accessible in `/`. This is the case, for example, when it's used together with JupyterHub (like SWAN), where the base url is `/user/_username_/`.; This PR fixes the way jsROOT is loaded in order to take that into account. . For that, I've removed `/static/`, which forced the absolute url to the file, and let requireJs apply its own configuration (which takes the base url into account). For Jupyterlab, I also load requireJs with the base url. In case requireJs is not available (maybe it will be possible to install Jupyterlab without Jupyter Notebooks in the future?), it falls back to a cdn to load it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4652:271,load,loaded,271,https://root.cern,https://github.com/root-project/root/pull/4652,3,['load'],"['load', 'loaded']"
Performance,"Just for clarity, the final goal is to make sure that within an RDataFrame analysis we are able to cache **only** what is being read, be it a single cluster of a branch, multiple clusters of multiple branches or the whole file. I'm working with TTreeReader to have a better grasp at what happens behind the curtains, although I also monitor RDataFrame's behaviour in my tests (https://github.com/vepadulano/rdfrangecache/tree/master/rdf) . For the moment RDataFrame acts like TTreeReader (as expected).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5365#issuecomment-614125950:99,cache,cache,99,https://root.cern,https://github.com/root-project/root/pull/5365#issuecomment-614125950,1,['cache'],['cache']
Performance,"Just pushed a fix for the `dataframe-cache` test failure, let's wait for the builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5772#issuecomment-638202474:37,cache,cache,37,https://root.cern,https://github.com/root-project/root/pull/5772#issuecomment-638202474,1,['cache'],['cache']
Performance,"Just pushed a fix that removes `ROOT_ADD_BUILTIN_DEPENDENCIES`. Note that this branch retains the current race condition in `ROOT_ADD_BUILTIN_DEPENDENCIES`: the external build produces the header files, but the individual source files are not dependent on the outcome of the external build. For example, `TDavixFile.cxx.o` is in reality dependent on `TDavixFile.cxx` and `davix.hpp`; however, if `davix.hpp` is the output of the `DAVIX` external project, there's no CMake dependency forcing `DAVIX` to be built before `TDavixFile.cxx.o`. There *is* a CMake dependency for `libRDAVIX.so` on `DAVIX`. So, we do the library dependencies correctly but not the header file dependencies. This was true before this PR and continues to be true. I'll look into that next.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/323#issuecomment-272958138:106,race condition,race condition,106,https://root.cern,https://github.com/root-project/root/pull/323#issuecomment-272958138,1,['race condition'],['race condition']
Performance,K ] RWLock.ReentrantTL (0 ms); 76: [ RUN ] RWLock.ResetRestoreStd; 76: [ OK ] RWLock.ResetRestoreStd (0 ms); 76: [ RUN ] RWLock.ResetRestoreStd14; 76: [ OK ] RWLock.ResetRestoreStd14 (0 ms); 76: [ RUN ] RWLock.ResetRestoreStd17; 76: [ OK ] RWLock.ResetRestoreStd17 (0 ms); 76: [ RUN ] RWLock.ResetRestoreStdTBB; 76: [ OK ] RWLock.ResetRestoreStdTBB (0 ms); 76: [ RUN ] RWLock.ResetRestoreStdTBBUnique; 76: [ OK ] RWLock.ResetRestoreStdTBBUnique (0 ms); 76: [ RUN ] RWLock.ResetRestoreSpin; 76: [ OK ] RWLock.ResetRestoreSpin (0 ms); 76: [ RUN ] RWLock.ResetRestore; 76: [ OK ] RWLock.ResetRestore (0 ms); 76: [ RUN ] RWLock.ResetRestoreTLSpin; 76: [ OK ] RWLock.ResetRestoreTLSpin (0 ms); 76: [ RUN ] RWLock.ResetRestoreTL; 76: [ OK ] RWLock.ResetRestoreTL (0 ms); 76: [ RUN ] RWLock.concurrentResetRestore; 76: [ OK ] RWLock.concurrentResetRestore (61 ms); 76: [ RUN ] RWLock.concurrentResetRestoreSpin; 76: [ OK ] RWLock.concurrentResetRestoreSpin (40 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd; 76: [ OK ] RWLock.concurrentResetRestoreStd (53 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd14; 76: [ OK ] RWLock.concurrentResetRestoreStd14 (62 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd17; 76: [ OK ] RWLock.concurrentResetRestoreStd17 (64 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStdTBB; 76: [ OK ] RWLock.concurrentResetRestoreStdTBB (45 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStdTBBUnique; 76: [ OK ] RWLock.concurrentResetRestoreStdTBBUnique (33 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestore; 76: [ OK ] RWLock.LargeconcurrentResetRestore (5534 ms); 76: [ RUN ] RWLock.concurrentResetRestoreTL; 76: [ OK ] RWLock.concurrentResetRestoreTL (59 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestoreTL; 76: [ OK ] RWLock.LargeconcurrentResetRestoreTL (4693 ms); 76: [ RUN ] RWLock.concurrentReadsAndWrites; 76: [ OK ] RWLock.concurrentReadsAndWrites (3099 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesSpin; 76: [ OK ] RWLock.concurrentReadsAndWritesSpin (3097 ms),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-742071485:8562,concurren,concurrentResetRestoreStd,8562,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-742071485,1,['concurren'],['concurrentResetRestoreStd']
Performance,KISTIv3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KISTIv3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ead666c8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/77637f58.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SDG-G2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SDG-G2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c1e29225.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c1e29225.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2e0e6e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2e0e6e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NorduGrid-2015.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NorduGrid-2015.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NorduGrid-2015.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a3e2dbca.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NIKHEF.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a3e2dbca.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f8598272.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/16054abd.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2418a3f3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/16054abd.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a2dbd20c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f8598272.signing_policy' from CURLOPT_CAPA,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:59249,load,load,59249,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,KIUNAMgrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GermanGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d0a33f8e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d0a33f8e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dd4b34ea.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b2783ac.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b2783ac.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dd4b34ea.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f4db168.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f4db168.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/089450c2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy-CA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA3G3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy-CA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/089450c2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy-CA.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA3G3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/368bc755.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:29899,load,load,29899,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"KernelTrivial.cxx:80:30: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming 'foam' is equal to NULL in /opt/root_src/tmva/tmva/src/PDEFoamKernelTrivial.cxx:77; 2: Taking true branch in /opt/root_src/tmva/tmva/src/PDEFoamKernelTrivial.cxx:77; 3: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/PDEFoamKernelTrivial.cxx:80; /opt/root_src/tmva/tmva/src/PDF.cxx:267:8: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Passing value via 1st parameter 'hist' in /opt/root_src/tmva/tmva/src/PDF.cxx:188; 2: Calling 'PDF::BuildPDF' in /opt/root_src/tmva/tmva/src/PDF.cxx:188; 3: Assuming 'hist' is equal to NULL in /opt/root_src/tmva/tmva/src/PDF.cxx:264; 4: Taking true branch in /opt/root_src/tmva/tmva/src/PDF.cxx:264; 5: Called C++ object pointer is null in /opt/root_src/tmva/tmva/src/PDF.cxx:267; /opt/root_src/tmva/tmva/src/Reader.cxx:384:32: warning: Access to field 'fDataSetManager' results in a dereference of a null pointer (loaded from variable 'methCat') [clang-analyzer-core.NullDereference]; 1: Assuming the condition is false in /opt/root_src/tmva/tmva/src/Reader.cxx:371; 2: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:371; 3: Calling 'Reader::BookMVA' in /opt/root_src/tmva/tmva/src/Reader.cxx:378; 4: 'im' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:395; 5: 'method' initialized here in /opt/root_src/tmva/tmva/src/Reader.cxx:398; 6: Assuming 'method' is not equal to null in /opt/root_src/tmva/tmva/src/Reader.cxx:400; 7: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:400; 8: Assuming the condition is false in /opt/root_src/tmva/tmva/src/Reader.cxx:402; 9: Taking false branch in /opt/root_src/tmva/tmva/src/Reader.cxx:402; 10: Returning pointer (loaded from 'method'), which participates in a condition later in /opt/root_src/tmva/tmva/src/Reader.cxx:424; 11: Returning pointer (loaded from 'method') in /opt/root_src/tmva/tmva/src/Reader.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7526:110064,load,loaded,110064,https://root.cern,https://github.com/root-project/root/issues/7526,1,['load'],['loaded']
Performance,L.h TVirtualMonitoring.h TVirtualMutex.h TVirtualPadEditor.h TVirtualPad.h TVirtualPadPainter.h TVirtualPerfStats.h TVirtualPS.h TVirtualQConnection.h TVirtualRWMutex.h TVirtualTableInterface.h TVirtualViewer3D.h TVirtualX.h strlcpy.h snprintf.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h ROOT/RIntegerSequence.hxx ROOT/RMakeUnique.hxx ROOT/RNotFn.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/span.hxx ROOT/TypeTraits.hxx TUnixSystem.h root_std_complex.h TClingRuntime.h GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h Getline.h /mnt/build/workspace/root-pullrequests-build/root/core/base/inc/LinkDef.h ; - fatal error: module map file '/mnt/build/workspace/root-pullrequests-build/build/etc/cling/lib/clang/5.0.0/include/module.modulemap' not found ; - input_line_4:1:10: fatal error: 'assert.h' file not found ; - Error: Error loading the default header files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4563#issuecomment-544634073:5991,load,loading,5991,https://root.cern,https://github.com/root-project/root/pull/4563#issuecomment-544634073,1,['load'],['loading']
Performance,"L=OFF -Dminuit:BOOL=ON -Dminuit2:BOOL=ON -Dmlp:BOOL=OFF -Dmonalisa:BOOL=OFF -Dmysql:BOOL=OFF -Dodbc:BOOL=OFF -Dopengl:BOOL=OFF -Doracle:BOOL=OFF -Dpgsql:BOOL=OFF -Dpythia6:BOOL=OFF -Dpythia8:BOOL=OFF -Dqt:BOOL=OFF -Dqtgsi:BOOL=OFF -Dr:BOOL=OFF -Drfio:BOOL=OFF -Droofit:BOOL=ON -Droot7:BOOL=OFF -Druby:BOOL=OFF -Dsapdb:BOOL=OFF -Dshadowpw:BOOL=OFF -Dspectrum:BOOL=OFF -Dsqlite:BOOL=OFF -Dsrp:BOOL=OFF -Dssl:BOOL=OFF -Dtable:BOOL=OFF -Dtbb:BOOL=OFF -Dtcmalloc:BOOL=OFF -Dtmva:BOOL=OFF -Dunuran:BOOL=ON -Dvc:BOOL=OFF -Dvdt:BOOL=ON -Dveccore:BOOL=OFF -Dvmc:BOOL=OFF -Dwebui:BOOL=OFF -Dx11:BOOL=OFF -Dxft:BOOL=OFF -Dxml:BOOL=ON -Dxrootd:BOOL=OFF -Dpyroot:BOOL=ON -DCMAKE_CXX_STANDARD:STRING=17; ```; I got the following warning when building Celeritas' root dictionary (possibly unimportant):; ```; [1/4] Generating CeleritasRootInterface.cxx, libceleritas_io_rdict.pcm, libceleritas_io.rootmap; Disabling gnu++: clang has no __float128 support on this target!; Disabling gnu++: clang has no __float128 support on this target!; ```; and at runtime:; ```; info: Opening ROOT file at /ccs/home/s3j/.local/src/celeritas-summit/test/io/data/geant-exporter-data.root; Disabling gnu++: clang has no __float128 support on this target!; Error in <TCling::RegisterModule>: Dictionary trigger function for libCore not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libMathCore not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libThread not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libRIO not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libNet not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libTree not found; Error in <TCling::RegisterModule>: Dictionary trigger function for libceleritas_io not found; Error in <TClass::LoadClassInfo>: no interpreter information for class celeritas::ImportData is available even though it has a TClass initialization routine.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10162#issuecomment-1109820171:3529,Load,LoadClassInfo,3529,https://root.cern,https://github.com/root-project/root/issues/10162#issuecomment-1109820171,1,['Load'],['LoadClassInfo']
Performance,LFile/); - [projectroot.roottest.root.io.transient.base.roottest_root_io_transient_base_WriteFile](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96019/testReport/projectroot.roottest.root.io.transient/base/roottest_root_io_transient_base_WriteFile/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execTmpltD](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96019/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execTmpltD/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execTmpltD32](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96019/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execTmpltD32/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_autocache](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96019/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_autocache/); - [projectroot.roottest.root.tree.fastcloning.roottest_root_tree_fastcloning_runabstract_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96019/testReport/projectroot.roottest.root.tree/fastcloning/roottest_root_tree_fastcloning_runabstract_datageneration/); - [projectroot.roottest.root.tree.fastcloning.roottest_root_tree_fastcloning_runoutoforder_datageneration](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96019/testReport/projectroot.roottest.root.tree/fastcloning/roottest_root_tree_fastcloning_runoutoforder_datageneration/); - [projectroot.roottest.root.tree.fastcloning.roottest_root_tree_fastcloning_make_CloneTree](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/96019/testReport/projectroot.roottest.root.tree/fastcloning/roottest_root_tree_fastcloning_make_CloneTree/); - [projectroot.bindings.pyroot.pythonizations.test.pyunittests_pyroot_root_module](https://lcgapp-services,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6301#issuecomment-693571436:1634,cache,cache,1634,https://root.cern,https://github.com/root-project/root/pull/6301#issuecomment-693571436,1,['cache'],['cache']
Performance,LGTM! (it could be merged after showing/presenting performance results on I/O meeting),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3947#issuecomment-510861837:51,perform,performance,51,https://root.cern,https://github.com/root-project/root/pull/3947#issuecomment-510861837,1,['perform'],['performance']
Performance,"LLVM component must be registered as LLVM_LINK_COMPONENTS to be compatible with LLVM Dylib. Otherwise they are loaded twice in the final binary, once through LLVM Dylmib and once through individual component, and this results in some options being registered twice. Fix root-project/cling#440",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11703:111,load,loaded,111,https://root.cern,https://github.com/root-project/root/pull/11703,1,['load'],['loaded']
Performance,LOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/633dc6a4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Grid-ICA-G2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58b08cb5.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5ead794.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e523eeaa.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e523eeaa.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/38f7145f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/38f7145f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/617ff41b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/677,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:25164,load,load,25164,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,LOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2f573f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/18700496.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/bd43b60c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5ead794.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/633dc6a4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Grid-ICA-G2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58b08cb5.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5ead794.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e523eeaa.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-securit,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:24673,load,load,24673,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,LOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/04f60c28.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b4278411.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/04f60c28.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7ed47087.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/98ef0ee5.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f30dd6ad.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b4278411.signing_policy' from CURLOPT_CAPATH; *,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:3006,load,load,3006,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,LOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/04f60c28.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b4278411.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/04f60c28.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7ed47087.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.info' from,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:2513,load,load,2513,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,LOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/04f60c28.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b4278411.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/04f60c28.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7ed47087.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertificationAuthority.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustECCCertification,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:2605,load,load,2605,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,LT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG - Success; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG - Success; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR - Failed; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG - Success; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL - Success; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP - Failed; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG - Success; -- Performing Test CXX_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test CXX_SUPPORTS_MISLEADING_INDENTATION_FLAG - Success; -- Performing Test C_SUPPORTS_FNO_FUNCTION_SECTIONS; -- Performing Test C_SUPPORTS_FNO_FUNCTION_SECTIONS - Success; -- Performing Test C_SUPPORTS_FFUNCTION_SECTIONS; -- Performing Test C_SUPPORTS_FFUNCTION_SECTIONS - Success; -- Performing Test CXX_SUPPORTS_FFUNCTION_SECTIONS; -- Performing Test CXX_SUPPORTS_FFUNCTION_SECTIONS - Success; -- Performing Test C_SUPPORTS_FDATA_SECTIONS; -- Performing Test C,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:4609,Perform,Performing,4609,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,1,['Perform'],['Performing']
Performance,"Last performance measurement:; ```.cpp; #include <ROOT/RDataFrame.hxx>. int main(); {; ROOT::EnableImplicitMT();; auto tdf = ROOT::RDataFrame(""rechitntupler/hits"", ""DataForDanilo/ntuple_*.root"");; tdf.Histo1D(""run"")->Draw();; return 0;; }; ```; where `DataForDanilo/ntuple_*.root` is a set of 343 files with a size between 2.2MB to ~100KB. Without the patch, 8 cores, it takes 22s. With the patch 8s. And this is orthogonal to #2116.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2121#issuecomment-393877726:5,perform,performance,5,https://root.cern,https://github.com/root-project/root/pull/2121#issuecomment-393877726,1,['perform'],['performance']
Performance,Lastest performance results indicates an addition 2.5%; [callgrind-callfunc-v2.tar.gz](https://github.com/root-project/root/files/9687253/callgrind-callfunc-v2.tar.gz),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1263961901:8,perform,performance,8,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1263961901,1,['perform'],['performance']
Performance,"Latest commit addresses all comments. Examples from the build nodes:; Failure example: [ROOT-performance-centos8-multicore/default](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/109377/console) (pyspark is not installed on this system); ```; 13:04:01 -- Looking for PySpark; 13:04:01 -- Looking for PySpark dependency: Java; 13:04:01 -- Found Java: /usr/bin/java (found suitable version ""1.8.0.275"", minimum required is ""1.8"") found components: Runtime ; 13:04:01 -- Found Java /usr/bin/java; 13:04:01 -- Java version 1.8.0_275; 13:04:01 -- Python package 'pyspark' could not be imported with /usr/bin/python; 13:04:01 Traceback (most recent call last):; 13:04:01 File ""<string>"", line 1, in <module>; 13:04:01 ModuleNotFoundError: No module named 'pyspark'; 13:04:01 ; 13:04:01 CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; 13:04:01 Could NOT find PySpark (missing: PySpark_HOME) (Required is at least; 13:04:01 version ""2.4""); 13:04:01 Call Stack (most recent call first):; 13:04:01 /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); 13:04:01 cmake/modules/FindPySpark.cmake:55 (find_package_handle_standard_args); 13:04:01 cmake/modules/SearchInstalledSoftware.cmake:16 (_find_package); 13:04:01 cmake/modules/SearchInstalledSoftware.cmake:1876 (find_package); 13:04:01 CMakeLists.txt:219 (include); ```. Success example: [ROOT-fedora30/default](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/109385/consoleFull) ; ```; 13:05:04 -- Looking for PySpark; 13:05:04 -- Looking for PySpark dependency: Java; 13:05:04 -- Found Java: /usr/bin/java (found suitable version ""1.8.0.252"", minimum required is ""1.8"") found components: Runtime ; 13:05:04 -- Found Java /usr/bin/java; 13:05:04 -- Java version 1.8.0_252; 13:05:04 -- Found PySpark: /usr/local/lib/python3.7/site-packages/pyspark (found suitable version ""3.0.1"", minimum required is ""2.4"") ; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7371#issuecomment-792725234:93,perform,performance-,93,https://root.cern,https://github.com/root-project/root/pull/7371#issuecomment-792725234,1,['perform'],['performance-']
Performance,"Latest hurdle: `fClusterSize` is a number of entries, the cache size (which we want to set to the median/mode of cluster sizes) has to be in bytes (compressed or uncompressed, I'm not sure) -- how do I go from median/mode of the number of entries in a cluster to the desired size in bytes?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8714#issuecomment-896863632:58,cache,cache,58,https://root.cern,https://github.com/root-project/root/pull/8714#issuecomment-896863632,1,['cache'],['cache']
Performance,Let test webgui integrity; - if THttpServer work properly; - if JSROOT loads on client side; - if communication runs between server and clients,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7901:71,load,loads,71,https://root.cern,https://github.com/root-project/root/pull/7901,1,['load'],['loads']
Performance,Let use browser `import()` function to control proper loading of JSROOT modules. ; No need to use older `JSRoot.core.js`. To be tested,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16023:54,load,loading,54,https://root.cern,https://github.com/root-project/root/pull/16023,1,['load'],['loading']
Performance,"LibraryLoadingFailed (this=0x4f0e00, errmessage=..., libStem=""/home/jhahnfel/ROOT/llvm13/build-cling-clang/lib/libcppyy3_6.so"", permanent=false, resolved=false) at /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:6492; > #43 0x00007fffeea69296 in cling::MultiplexInterpreterCallbacks::LibraryLoadingFailed (this=<optimized out>, errmessage=""/home/jhahnfel/ROOT/llvm13/build-cling-clang/lib/libcppyy3_6.so: undefined symbol: _Py_NoneStruct"", libStem=""/home/jhahnfel/ROOT/llvm13/build-cling-clang/lib/libcppyy3_6.so"", permanent=<optimized out>, resolved=<optimized out>); > at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/MultiplexInterpreterCallbacks.h:102; > #44 0x00007fffeea4ce05 in cling::DynamicLibraryManager::loadLibrary (this=<optimized out>, libStem=..., permanent=<optimized out>, resolved=true) at /home/jhahnfel/ROOT/llvm13/src/interpreter/cling/lib/Interpreter/DynamicLibraryManager.cpp:377; > #45 0x00007fffee95d74a in TCling::Load (this=0x4f0e00, filename=0xa95fab0 ""/home/jhahnfel/ROOT/llvm13/build-cling-clang/lib/libcppyy3_6.so"", system=true) at /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:3477; > #46 0x00007ffff67c18a2 in TSystem::Load (this=0x41b800, module=0xa95f920 ""/home/jhahnfel/ROOT/llvm13/build-cling-clang/lib/libcppyy3_6.so"", entry=0x7fffedaa9527 """", system=true) at /home/jhahnfel/ROOT/llvm13/src/core/base/src/TSystem.cxx:1942; > #47 0x00007fffee94ca44 in TCling::LazyFunctionCreatorAutoload(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::$_3::operator()(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (LibName=""/home/jhahnfel/ROOT/llvm13/build-cling-clang/lib/libcppyy3_6.so"", this=<optimized out>); > at /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:6513; > #48 TCling::LazyFunctionCreatorAutoload (this=<optimized out>, mangled_name=""_ZNSt11char_traitsIcE6lengthEPKc"") at /home/jhahnfel/ROOT/llvm13/src/core/metacl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1098026446:9464,Load,Load,9464,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1098026446,1,['Load'],['Load']
Performance,"Like with chromium, perform drawing without creation of real window.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/810:20,perform,perform,20,https://root.cern,https://github.com/root-project/root/pull/810,1,['perform'],['perform']
Performance,Likely a cmake race condition.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5603#issuecomment-642242858:15,race condition,race condition,15,https://root.cern,https://github.com/root-project/root/pull/5603#issuecomment-642242858,1,['race condition'],['race condition']
Performance,"List of relevant PR missing in the release notes for 6.24. - XROOTD #7380 ; - TMVA : optimizer options : #7318; - ChangeLabel: #7294; - Buffer Merger improvements : #7286; - Eve7: The first implementation of log view #7270; - TMVA: Update Keras tutorials using tensorflow.keras #7255; - builtins: Zstd 1.4.8 #7214; - RooFit: warning message for RooAddPdf without norm set: #7129 ; - RooFit: Improve plotting of RooBinSamplingPdf. #7110; - Hist: Fixes and improvements for the TKDE class #7096; - Fix a memory leak in TF1::Copy #7035; - Fix for new version of cudnn version 8 #7003; - Minuit2: Use Numerical gradient as input to the seed generator when using external gradients in Minuit2 #7001; - TF1: Enable using Automatic differentiation for computing Parameter Gradient in TF1 #6956; - Math: Fix correction factor for Confidence level in ROOT::Fit::FitResult #6902; - TMVA: Implement MethodCategory::GetMulticlassValues() #6886; - Hist: Add THistRange class defining a generic histogram range and its iterator #6795; - TMVA: Support for Keras 2.4 (tf.keras) #6793; - Eve-7: Add example of calorimeter representation of REveDataCollection #6783; - Math: Fix BinData copy constructor #6776; - [tmva] Add possibility to make ROC curve for the training dataset from TMVA::Factory #6724; - Math: Changes in TRandom3::GetSeed #6723; - Minuit2: new Minuit2 logging #6705; - ntuple] Several interface improvements (unique pointer, const) #6655; - Optimize TPrincipal::AddRow function #6630",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7858:85,optimiz,optimizer,85,https://root.cern,https://github.com/root-project/root/issues/7858,2,"['Optimiz', 'optimiz']","['Optimize', 'optimizer']"
Performance,Little optimization for the cling pointer check.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4162:7,optimiz,optimization,7,https://root.cern,https://github.com/root-project/root/pull/4162,1,['optimiz'],['optimization']
Performance,Load all modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1354:0,Load,Load,0,https://root.cern,https://github.com/root-project/root/pull/1354,1,['Load'],['Load']
Performance,Load dependent libraries as part of AutoLoading.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5486:0,Load,Load,0,https://root.cern,https://github.com/root-project/root/pull/5486,1,['Load'],['Load']
Performance,LoadCoreModules crashes when one of the core modules wasn't; found as we call `findModule` and then dereference that result; unconditionally. It also calls `findModule` and then passes; the found module name again to `findModule` in the `LoadModule`; function. This commit refactors this code and fixes those bugs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1391:0,Load,LoadCoreModules,0,https://root.cern,https://github.com/root-project/root/pull/1391,2,['Load'],"['LoadCoreModules', 'LoadModule']"
Performance,Loading 'MathCore' on demand for 'T'; Loading 'GenVector' on demand for 'Cartesian2D'; Module 'Smatrix' already loaded for 'T'; Module 'Cling_Runtime' already loaded for 'T'; Module 'MathCore' already loaded for 'T'; Module 'GenVector' already loaded for 'Polar2D'; Module 'GenVector' already loaded for 'DefaultCoordinateSystemTag'; Module 'GenVector' already loaded for 'DisplacementVector2D'; Module 'GenVector' already loaded for 'Cartesian3D'; Module 'GenVector' already loaded for 'PositionVector3D'; Module 'GenVector' already loaded for 'CylindricalEta3D'; Module 'GenVector' already loaded for 'Polar3D'; Module 'GenVector' already loaded for 'Cylindrical3D'; Module 'GenVector' already loaded for 'LocalCoordinateSystemTag'; Module 'GenVector' already loaded for 'GlobalCoordinateSystemTag'; Module 'GenVector' already loaded for 'DisplacementVector3D'; Module 'GenVector' already loaded for 'PxPyPzE4D'; Module 'GenVector' already loaded for 'LorentzVector'; Module 'GenVector' already loaded for 'PxPyPzM4D'; Module 'GenVector' already loaded for 'PtEtaPhiE4D'; Module 'GenVector' already loaded for 'PtEtaPhiM4D'; Module 'Smatrix' already loaded for 'MatRepStd'; Module 'Smatrix' already loaded for 'MatRepSym'; Module 'Smatrix' already loaded for 'SVector'; Module 'MathCore' already loaded for 'R'; Module 'Smatrix' already loaded for 'SMatrix'; Module 'Smatrix' already loaded for 'T'; Module 'Cling_Runtime' already loaded for 'T'; Module 'MathCore' already loaded for 'T'; Module 'Smatrix' already loaded for 'T'; Module 'Cling_Runtime' already loaded for 'T'; Module 'MathCore' already loaded for 'T'; Module 'Smatrix' already loaded for 'T'; Module 'Cling_Runtime' already loaded for 'T'; Module 'MathCore' already loaded for 'T'; Module 'Core' already loaded for '_root_std_complex'; Module 'Core' already loaded for '_root_std_complex'; Module 'Core' already loaded for '_root_std_complex'; Loading 'Gpad' on demand for 'TPad'; Module 'Gpad' already loaded for 'TPad'; Module 'Gp,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1268084280:12598,load,loaded,12598,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1268084280,1,['load'],['loaded']
Performance,Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Ged.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/_Builtin_intrinsics.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Proof.pcm; 0.0001 ( 0.0%) 0.0000 ( 0.0%) 0.0001 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/EG.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Thread.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Cling_Runtime_Extra.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Hist.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/RGL.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Gpad.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Graf.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Physics.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/RooFitCore.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Net.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/MultiProc.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/RHTTP.pcm; 0.0000 ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2867:10070,Load,Loading,10070,https://root.cern,https://github.com/root-project/root/pull/2867,1,['Load'],['Loading']
Performance,Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Postscript.pcm; 0.0008 ( 0.0%) 0.0000 ( 0.0%) 0.0008 ( 0.0%) 0.0009 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/TreeViewer.pcm; 0.0007 ( 0.0%) 0.0001 ( 0.2%) 0.0008 ( 0.0%) 0.0009 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/XMLIO.pcm; 0.0010 ( 0.0%) 0.0000 ( 0.0%) 0.0010 ( 0.0%) 0.0008 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Spectrum.pcm; 0.0008 ( 0.0%) 0.0000 ( 0.0%) 0.0008 ( 0.0%) 0.0008 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/RMySQL.pcm; 0.0008 ( 0.0%) 0.0000 ( 0.0%) 0.0008 ( 0.0%) 0.0008 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/ASImage.pcm; 0.0009 ( 0.0%) 0.0000 ( 0.0%) 0.0009 ( 0.0%) 0.0008 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/GeomBuilder.pcm; 0.0007 ( 0.0%) 0.0000 ( 0.0%) 0.0007 ( 0.0%) 0.0008 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Minuit.pcm; 0.0014 ( 0.0%) 0.0000 ( 0.0%) 0.0014 ( 0.0%) 0.0007 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Foam.pcm; 0.0012 ( 0.0%) 0.0000 ( 0.0%) 0.0012 ( 0.0%) 0.0007 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/MLP.pcm; 0.0006 ( 0.0%) 0.0000 ( 0.0%) 0.0006 ( 0.0%) 0.0007 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/GeomPainter.pcm; 0.0007 ( 0.0%) 0.0000 ( 0.0%) 0.0007 ( 0.0%) 0.0007 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/GuiHtml.pcm; 0.0006 ( 0.0%) 0.0000 ( 0.0%) 0.0006 ( 0.0%) 0.0007 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Genetic.pcm; 0.0006 ( 0.0%) 0.0000 ( 0.0%) 0.0007 ( 0.0%) 0.0007 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Recorder.pcm; 0.0007 ( 0.0%) 0.0000 ( 0.0%) 0.0007 ( 0.0%) 0.0006 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/RootAuth.pcm; ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2867:5228,Load,Loading,5228,https://root.cern,https://github.com/root-project/root/pull/2867,1,['Load'],['Loading']
Performance,Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/RIO.pcm; 0.0000 ( 0.0%) 0.0038 ( 4.5%) 0.0038 ( 0.1%) 0.0030 ( 0.1%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Unfold.pcm; 0.0029 ( 0.1%) 0.0000 ( 0.0%) 0.0029 ( 0.1%) 0.0029 ( 0.1%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/RooStats.pcm; 0.0026 ( 0.1%) 0.0000 ( 0.0%) 0.0026 ( 0.1%) 0.0028 ( 0.1%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/GenVector.pcm; 0.0025 ( 0.1%) 0.0000 ( 0.0%) 0.0025 ( 0.1%) 0.0021 ( 0.1%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/ProofPlayer.pcm; 0.0024 ( 0.1%) 0.0000 ( 0.0%) 0.0024 ( 0.1%) 0.0020 ( 0.1%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/FitPanel.pcm; 0.0015 ( 0.1%) 0.0000 ( 0.0%) 0.0015 ( 0.0%) 0.0016 ( 0.1%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/RHTTPSniff.pcm; 0.0013 ( 0.0%) 0.0000 ( 0.0%) 0.0013 ( 0.0%) 0.0015 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/ROOTVecOps.pcm; 0.0014 ( 0.0%) 0.0000 ( 0.0%) 0.0014 ( 0.0%) 0.0014 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Html.pcm; 0.0013 ( 0.0%) 0.0000 ( 0.0%) 0.0013 ( 0.0%) 0.0013 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Gdml.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0011 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/ROOT_Foundation_C.pcm; 0.0009 ( 0.0%) 0.0000 ( 0.0%) 0.0009 ( 0.0%) 0.0010 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/TMVAGui.pcm; 0.0013 ( 0.0%) 0.0000 ( 0.0%) 0.0013 ( 0.0%) 0.0010 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/HistPainter.pcm; 0.0011 ( 0.0%) 0.0000 ( 0.0%) 0.0011 ( 0.0%) 0.0010 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Quadp.pcm; 0.0009 ( 0.0%) 0.0000 ( 0.0%) 0.0009 ( 0.0%) 0.0009 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Post,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2867:3293,Load,Loading,3293,https://root.cern,https://github.com/root-project/root/pull/2867,1,['Load'],['Loading']
Performance,Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/_Builtin_intrinsics.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Proof.pcm; 0.0001 ( 0.0%) 0.0000 ( 0.0%) 0.0001 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/EG.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Thread.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Cling_Runtime_Extra.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Hist.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/RGL.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Gpad.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Graf.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Physics.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/RooFitCore.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Net.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/MultiProc.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/RHTTP.pcm; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0000 ( 0.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/ROOT_Rtypes.pcm; ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2867:10203,Load,Loading,10203,https://root.cern,https://github.com/root-project/root/pull/2867,1,['Load'],['Loading']
Performance,"Loading a library that is needed to resolve symbols (as done by this PR) means that libraries linked against that library are loaded as a side-effect, without TCling / TSystem seeing it. TClingTest's `gInterpreter->GetSharedLibDeps(""libTreePlayer"")` thus doesn't report all actual library dependencies but only a subset. This isn't an issue for explicit linking, though (neither for implicit linking, which will load all libraries separately and thus enumerate them), but it's a potential correctness concern and an inconsistency for explicit vs implicit linking / loading.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8017#issuecomment-953811441:0,Load,Loading,0,https://root.cern,https://github.com/root-project/root/pull/8017#issuecomment-953811441,4,"['Load', 'load']","['Loading', 'load', 'loaded', 'loading']"
Performance,Loading same macro twice with changed definition does not work.; Therefore just split macro and load main macro once library; compiled and loaded. Also add generated includes - otherwise; CLING does not like to work. Solving issue from forum: https://root-forum.cern.ch/t/43535,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7203:0,Load,Loading,0,https://root.cern,https://github.com/root-project/root/pull/7203,3,"['Load', 'load']","['Loading', 'load', 'loaded']"
Performance,Lock.ResetRestoreStdTBBUnique (0 ms); 76: [ RUN ] RWLock.ResetRestoreSpin; 76: [ OK ] RWLock.ResetRestoreSpin (0 ms); 76: [ RUN ] RWLock.ResetRestore; 76: [ OK ] RWLock.ResetRestore (0 ms); 76: [ RUN ] RWLock.ResetRestoreTLSpin; 76: [ OK ] RWLock.ResetRestoreTLSpin (0 ms); 76: [ RUN ] RWLock.ResetRestoreTL; 76: [ OK ] RWLock.ResetRestoreTL (0 ms); 76: [ RUN ] RWLock.concurrentResetRestore; 76: [ OK ] RWLock.concurrentResetRestore (61 ms); 76: [ RUN ] RWLock.concurrentResetRestoreSpin; 76: [ OK ] RWLock.concurrentResetRestoreSpin (40 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd; 76: [ OK ] RWLock.concurrentResetRestoreStd (53 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd14; 76: [ OK ] RWLock.concurrentResetRestoreStd14 (62 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd17; 76: [ OK ] RWLock.concurrentResetRestoreStd17 (64 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStdTBB; 76: [ OK ] RWLock.concurrentResetRestoreStdTBB (45 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStdTBBUnique; 76: [ OK ] RWLock.concurrentResetRestoreStdTBBUnique (33 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestore; 76: [ OK ] RWLock.LargeconcurrentResetRestore (5534 ms); 76: [ RUN ] RWLock.concurrentResetRestoreTL; 76: [ OK ] RWLock.concurrentResetRestoreTL (59 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestoreTL; 76: [ OK ] RWLock.LargeconcurrentResetRestoreTL (4693 ms); 76: [ RUN ] RWLock.concurrentReadsAndWrites; 76: [ OK ] RWLock.concurrentReadsAndWrites (3099 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesSpin; 76: [ OK ] RWLock.concurrentReadsAndWritesSpin (3097 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd; 76: [ OK ] RWLock.concurrentReadsAndWritesStd (3129 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd14; 76: [ OK ] RWLock.concurrentReadsAndWritesStd14 (3210 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd17; 76: [ OK ] RWLock.concurrentReadsAndWritesStd17 (3105 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStdTBB; 76: [ OK ] RWLock.concurrentReadsAndWr,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-742071485:8972,concurren,concurrentResetRestoreStdTBBUnique,8972,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-742071485,1,['concurren'],['concurrentResetRestoreStdTBBUnique']
Performance,"Log when running with valgrind:. ```; Conditional jump or move depends on uninitialised value(s); in TUrl::TUrl(char const*, bool) in /opt/root_src/core/base/src/TUrl.cxx:76; 1: TStorage::UpdateIsOnHeap(unsigned int const volatile&, unsigned int volatile&) in /opt/root_src/core/base/inc/TStorage.h:124; 2: TObject::TObject() in /opt/root_src/core/base/inc/TObject.h:260; 3: TUrl::TUrl(char const*, bool) in /opt/root_src/core/base/src/TUrl.cxx:76; 4: TSystem::FindHelper(char const*, void*) in /opt/root_src/core/base/src/TSystem.cxx:746; 5: TUnixSystem::OpenDirectory(char const*) in /opt/root_src/core/unix/src/TUnixSystem.cxx:1362; 6: TCling::LoadLibraryMap(char const*) in /opt/root_src/core/metacling/src/TCling.cxx:5737; 7: TCling::Initialize() in /opt/root_src/core/metacling/src/TCling.cxx:1660; 8: TROOT::InitInterpreter() in /opt/root_src/core/base/src/TROOT.cxx:2116; 9: ROOT::Internal::GetROOT2() in /opt/root_src/core/base/src/TROOT.cxx:389; 10: ROOT::GetROOT() in /opt/root_src/core/base/src/TROOT.cxx:471; 11: TApplication::TApplication(char const*, int*, char**, void*, int) in /opt/root_src/core/base/src/TApplication.cxx:153; 12: TRint::TRint(char const*, int*, char**, void*, int, bool, bool) in /opt/root_src/core/rint/src/TRint.cxx:174; 13: main in /opt/root_src/main/src/rmain.cxx:81; Uninitialised value was created by a stack allocation 1: TSystem::FindHelper(char const*, void*) in /opt/root_src/core/base/src/TSystem.cxx:734. Conditional jump or move depends on uninitialised value(s); in TUrl::TUrl(char const*, bool) in /opt/root_src/core/base/src/TUrl.cxx:76; 1: TStorage::UpdateIsOnHeap(unsigned int const volatile&, unsigned int volatile&) in /opt/root_src/core/base/inc/TStorage.h:124; 2: TObject::TObject() in /opt/root_src/core/base/inc/TObject.h:260; 3: TUrl::TUrl(char const*, bool) in /opt/root_src/core/base/src/TUrl.cxx:76; 4: TApplication::GetOptions(int*, char**) in /opt/root_src/core/base/src/TApplication.cxx:479; 5: TApplication::TApplication(char const*,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7236#issuecomment-1949072327:647,Load,LoadLibraryMap,647,https://root.cern,https://github.com/root-project/root/issues/7236#issuecomment-1949072327,1,['Load'],['LoadLibraryMap']
Performance,"Looking e.g. at https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx there are some places where a `R__ASSERT` is desirable (validation of input parameters, erroring out in certain edge cases), but in others I think we use it for ensuring that no bugs are present, in which case `assert` would be more appropriate. I did not see places where the checks are so expensive that the difference might matter in terms of performance, but it might be better to establish clear usage patterns before that happens :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10618:441,perform,performance,441,https://root.cern,https://github.com/root-project/root/issues/10618,1,['perform'],['performance']
Performance,"Looking for general direction here. This is the current patch:. * Add a new hidden option, `ROOT_PYTHON_NO_LINK`, that turns off linking to Python.; * This option also turns on a check when loading libraries, to manually attempt to load libpython for the user. The directory that libpython is in should be searched (it will be on package systems like conda); * The name of libpython is stored in RConfigure.h (since you need to know both the python version and the build flags to determine it). We could strip the final extension as it's not needed to load. Names, etc. can easily be changed if this looks like the right way to do it. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3396#issuecomment-462288529:190,load,loading,190,https://root.cern,https://github.com/root-project/root/pull/3396#issuecomment-462288529,3,['load'],"['load', 'loading']"
Performance,"Looking into jenkins logs - it tries to build with `builtin_openui5=OFF`.; It works, but requires loading of full openui5 package from web.; After merging this PR one has to change Jenkins to enable `builtin_openui5`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6710#issuecomment-717139797:98,load,loading,98,https://root.cern,https://github.com/root-project/root/pull/6710#issuecomment-717139797,1,['load'],['loading']
Performance,"Looks great, thank you very much. I would suggest one change, namely that if the user clicks in the area outside the menu, the popup menu closes with no action performed, as done usually with a TCanvas menu. Or alternatively, provide an additional row in the popup menu, with the name ""Cancel"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7352#issuecomment-799315451:160,perform,performed,160,https://root.cern,https://github.com/root-project/root/pull/7352#issuecomment-799315451,1,['perform'],['performed']
Performance,Looks like the system goes out of memory due to the multiple concurrent modules built by rootcling.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1761#issuecomment-375456871:61,concurren,concurrent,61,https://root.cern,https://github.com/root-project/root/pull/1761#issuecomment-375456871,1,['concurren'],['concurrent']
Performance,"Looks like we somehow load this, according to @Axel-Naumann. I will close the PR for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3013#issuecomment-440583457:22,load,load,22,https://root.cern,https://github.com/root-project/root/pull/3013#issuecomment-440583457,1,['load'],['load']
Performance,"Lorenzo, this extra data member gets optimized away, whereas the dynamic_cast requires rtti support and is slow. Using `dynamic_cast` where the logic can be done without is a bad practice.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/363#issuecomment-302712293:37,optimiz,optimized,37,https://root.cern,https://github.com/root-project/root/pull/363#issuecomment-302712293,1,['optimiz'],['optimized']
Performance,"MMapper::releaseMappedMemory (; this=0x7ffff6a3c620 <llvm::(anonymous namespace)::DefaultMMapperInstance>, M=...); at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:263; #2 0x00007fffee498701 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, ; __in_chrg=<optimized out>); at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:237; #3 0x00007fffee4987a0 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, ; __in_chrg=<optimized out>); at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:239; #4 0x00007fffee41a1b4 in std::default_delete<llvm::RuntimeDyld::MemoryManager>::operator() (this=0x5555587feb70, ; __ptr=0x5555588b0570) at /usr/include/c++/11/bits/unique_ptr.h:85; #5 0x00007fffee418420 in std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >::~unique_ptr (this=0x5555587feb70, __in_chrg=<optimized out>); at /usr/include/c++/11/bits/unique_ptr.h:361; #6 0x00007fffee41f27f in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > (__pointer=0x5555587feb70) at /usr/include/c++/11/bits/stl_construct.h:151; #7 0x00007fffee41e671 in std::_Destroy_aux<false>::__destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*> (__first=0x5555587feb70, __last=0x5555587feb78); at /usr/include/c++/11/bits/stl_construct.h:163; #8 0x00007fffee41cf98 in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*> (__first=0x5555587feb70, __last=0x5555587feb78); at /usr/include/c++/11/bits/stl_construct.h:196; #9 0x00007fffee41ae3b in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManag",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10898:1391,optimiz,optimized,1391,https://root.cern,https://github.com/root-project/root/issues/10898,1,['optimiz'],['optimized']
Performance,"MSSW_13_3_ROOT6_X_2023-08-07-2300/src/Alignment/OfflineValidation/test/inspectData_cfg.py unitTest=True trackCollection=ALCARECOTkAlCosmicsCTF0T; ``` . And for gdb:; ```; Singularity> gdb cmsRun; (gdb) run /cvmfs/cms-ib.cern.ch/week1/el8_amd64_gcc11/cms/cmssw/CMSSW_13_3_ROOT6_X_2023-08-07-2300/src/Alignment/OfflineValidation/test/inspectData_cfg.py unitTest=True trackCollection=ALCARECOTkAlCosmicsCTF0T; ```. A sample stacktrace upon destruction of the `TString`:; ```; Thread 1 (Thread 0x7ffff413fc80 (LWP 3407688) ""cmsRun""):; #0 tcmalloc::SLL_PopRange (end=<synthetic pointer>, start=<synthetic pointer>, N=32, head=0x45a0a0) at src/linked_list.h:88; #1 tcmalloc::SLL_PopRange (end=<synthetic pointer>, start=<synthetic pointer>, N=32, head=0x45a0a0) at src/linked_list.h:79; #2 tcmalloc::ThreadCache::FreeList::PopRange (end=<synthetic pointer>, start=<synthetic pointer>, N=32, this=0x45a0a0) at src/thread_cache.h:238; #3 tcmalloc::ThreadCache::ReleaseToCentralCache (this=this@entry=0x45a040, src=src@entry=0x45a0a0, cl=<optimized out>, N=N@entry=32) at src/thread_cache.cc:206; #4 0x00007ffff57dff2c in tcmalloc::ThreadCache::ListTooLong (this=0x45a040, list=0x45a0a0, cl=<optimized out>) at src/thread_cache.cc:164; #5 0x00007ffff6dc2465 in TString::UnLink (this=0xcbb820) at /data/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/el8_amd64_gcc11/lcg/root/6.29.01-192f857c68d2f0a1a8cb821f03f5a854/root-6.29.01/core/base/inc/TString.h:265; --Type <RET> for more, q to quit, c to continue without paging--c; #6 0x00007ffff68a2266 in TString::~TString (this=0xcbb820, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/el8_amd64_gcc11/lcg/root/6.29.01-192f857c68d2f0a1a8cb821f03f5a854/root-6.29.01/core/base/src/TString.cxx:249; #7 0x00007ffff68ac37f in TStyle::~TStyle (this=0xcbb500, __in_chrg=<optimized out>) at /data/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/el8_amd64_gcc11/lcg/root/6.29.01-192f857c68d2f0a1a8cb821f03f5a854/root-6.29.01/core/base/src/TSt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13429:1828,optimiz,optimized,1828,https://root.cern,https://github.com/root-project/root/issues/13429,1,['optimiz'],['optimized']
Performance,MVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-752250076:3364,load,load,3364,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076,1,['load'],['load']
Performance,"Made the requested changes, added a test.; This function has nothing to do with `Foreach` as previously reported.; It only works with dataframes that are made out of `TTree` or `TChain` as intended, thus, it does not with a dataframe that is `Cache`d.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15182#issuecomment-2076648572:243,Cache,Cache,243,https://root.cern,https://github.com/root-project/root/pull/15182#issuecomment-2076648572,1,['Cache'],['Cache']
Performance,Make G__FastAllocString cache thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/34:24,cache,cache,24,https://root.cern,https://github.com/root-project/root/pull/34,1,['cache'],['cache']
Performance,"Making the decision on the scheduling mode based on `IsImpliciMTEnabled` would mean forcing users to run `EnableImplicitMT` every time they want to submit distributed graphs concurrently. If the user has already chosen to run a distributed RDataFrame application, RunGraphs should just submit all the computations concurrently to the distributed scheduler. The ""sequential"" mode of operation can still be achieved by e.g. calling `GetValue` on distributed proxies in a for loop.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13344:174,concurren,concurrently,174,https://root.cern,https://github.com/root-project/root/pull/13344,2,['concurren'],['concurrently']
Performance,"Many of the tests in the list above were renamed in master, but they all succceed:; ```; 1027/1220 Test #1028: tutorial-v7-histops.cxx ............................................. Passed 6.00 sec; 1029/1220 Test #1031: tutorial-v7-simple.cxx .............................................. Passed 8.82 sec; 1033/1220 Test #1026: tutorial-v7-concurrentfill.cxx ...................................... Passed 20.39 sec; 1034/1220 Test #1036: tutorial-rcanvas-rframe.cxx ......................................... Passed 2.93 sec; 1035/1220 Test #1037: tutorial-rcanvas-rh1.cxx ............................................ Passed 2.91 sec; 1037/1220 Test #1038: tutorial-rcanvas-rh1_large.cxx ...................................... Passed 3.14 sec; 1039/1220 Test #1040: tutorial-rcanvas-rh2.cxx ............................................ Passed 4.41 sec; 1040/1220 Test #1041: tutorial-rcanvas-rh2_colz.cxx ....................................... Passed 4.62 sec; 1041/1220 Test #1042: tutorial-rcanvas-rh2_large.cxx ...................................... Passed 4.85 sec; 1042/1220 Test #1045: tutorial-rcanvas-rlegend.cxx ........................................ Passed 2.46 sec; 1047/1220 Test #1034: tutorial-rcanvas-rcanvas_mt.cxx ..................................... Passed 25.33 sec; 1051/1220 Test #1043: tutorial-rcanvas-rh3.cxx ............................................ Passed 13.34 sec; 1053/1220 Test #1044: tutorial-rcanvas-rh3_large.cxx ...................................... Passed 13.14 sec; 1059/1220 Test #1056: tutorial-rcanvas-subpads.cxx ........................................ Passed 2.22 sec; 1066/1220 Test #1029: tutorial-v7-perf.cxx ................................................ Passed 55.03 sec; 1199/1220 Test #1030: tutorial-v7-perfcomp.cxx ............................................ Passed 105.92 sec; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8073#issuecomment-1000999629:341,concurren,concurrentfill,341,https://root.cern,https://github.com/root-project/root/issues/8073#issuecomment-1000999629,1,['concurren'],['concurrentfill']
Performance,"Many thanks Danilo and Olivier for picking this up so quickly! The issue appears only when `TColorBug.root` is loaded in a new ROOT session. Sorry for not being clear about this in my original post. If I first run `createTestFile();` from Olivier's macro to create the .root file and then close ROOT and start a new ROOT session that only runs `readTestFile();`, `TColor::GetFreeColorIndex();`returns the index of the already defined `myColor`. So the problem seems to be related to how custom colors that are not yet existing in the ROOT session are restored from a .root file.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16051#issuecomment-2256214014:111,load,loaded,111,https://root.cern,https://github.com/root-project/root/issues/16051#issuecomment-2256214014,1,['load'],['loaded']
Performance,Many thanks Simon. That worked. . Axel:. ***@***.*** ~]$ curl -v --show-error --cacert /tmp/x509up_u`id -u` --connect-timeout 300 --max-time 3600 --capath /etc/grid-security/certificates --cert /tmp/x509up_u`id -u` --key /tmp/x509up_u`id -u` -L https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root -o /dev/null; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed; 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0* About to connect() to webdav.lcg.triumf.ca port 2880 (#0); * Trying 2607:f8f0:660:3::40...; * Connected to webdav.lcg.triumf.ca (2607:f8f0:660:3::40) port 2880 (#0); * Initializing NSS with certpath: sql:/etc/pki/nssdb; * failed to load '/etc/grid-security/certificates/7022e3c4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/69105f4f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-Root-2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/69105f4f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/edca0fc0.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.signi,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:738,load,load,738,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,3,['load'],['load']
Performance,"Maybe an issue with the gcc7 version on LCG? Loading the nightlies with gcc10 works as well. The issue seems fixed there, but I'll let Thomas confirm. @eguiraud I saw there is a major issue with 6.22/04? Is this fixed or should we wait for 6.22/06? (we can easily pin any commit or tag, so don't necessarily need to stick to a given release).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6856#issuecomment-732749103:45,Load,Loading,45,https://root.cern,https://github.com/root-project/root/issues/6856#issuecomment-732749103,1,['Load'],['Loading']
Performance,"Maybe check first the log file of the Doxygen build. Close to the end, it will say output an error like:; ```; Running dot...; Patching output file 1/1; Running qhelpgenerator...; qhelpgenerator: could not exec '/usr/lib/qt5/bin/qhelpgenerator': No such file or directory; error: failed to run qhelpgenerator on index.qhp; lookup cache used 1000/65536 hits=4591 misses=1060; finished...; [100%] Built target doc; ```. If that's the case, then yes, it must be relaunched.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1009990569:330,cache,cache,330,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1009990569,1,['cache'],['cache']
Performance,"Maybe it makes sense to open a new PR once this works, such that we get rid of the part ""make it work on all platforms""?. Do you expect to significantly reduce the performance impact for a batch size of 1, or what's the path forward?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11517#issuecomment-1418609218:164,perform,performance,164,https://root.cern,https://github.com/root-project/root/pull/11517#issuecomment-1418609218,1,['perform'],['performance']
Performance,"Maybe it's just a multi-threading thing? The output lines are ordered differently each time because the threads write to stdout in different order. If you Search for ""latex5.C"", don't you see always a warning line (every time in different position):; `/home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tutorials/graphics/latex5.C:8: warning: image file pict1_latex5.C.png is not found in IMAGE_PATH: assuming external image.`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11614#issuecomment-1305645513:18,multi-thread,multi-threading,18,https://root.cern,https://github.com/root-project/root/pull/11614#issuecomment-1305645513,1,['multi-thread'],['multi-threading']
Performance,Maybe we should do this only when LoadModule fails with default include path?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2375#issuecomment-408411264:34,Load,LoadModule,34,https://root.cern,https://github.com/root-project/root/pull/2375#issuecomment-408411264,1,['Load'],['LoadModule']
Performance,"Measurements by @sciaba show that, at high thread counts, RDF multi-thread event loops on remote data suffer a scaling breakdown because of some throttling mechanisms in xrootd. Working around the throttling is possible, but it's unclear whether it's the right thing:tm: to do in all cases. Namely: ; - setting XRD_PARALLELEVTLOOP as in https://github.com/root-project/root/issues/7709; - faking different clients for each thread or each file, e.g. by using URLs like `root://client1@eoscms.cern.ch//eos/myfile.root`, works around connection multiplexing. The degradation is severe enough that I labeled it a bug (preliminary benchmarks showed a speed-up of more than one order of magnitude for high thread counts in the same application with/without the workarounds above).; Multi-process event loops such as those of distributed RDF should not be affected. A link to the exact findings can be added to this issue when they are public, for now this is a reminder that there is a problem to be looked at. EDIT:; For completeness, [this other PR](https://github.com/root-project/root/pull/11631) by @bendavid addresses orthogonal thread contention issues in remote file access with ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12621:62,multi-thread,multi-thread,62,https://root.cern,https://github.com/root-project/root/issues/12621,1,['multi-thread'],['multi-thread']
Performance,Measurements with the parallel writer show a regression of compression bandwidth with large page sizes of up to 1 MiB because they do not fit into the L2 cache anymore. Reduce the default to be more cache friendly and restore scaling when fully using all cores of a machine.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16453:154,cache,cache,154,https://root.cern,https://github.com/root-project/root/pull/16453,2,['cache'],['cache']
Performance,"Merger (targeting %s) has been deleted (likely due to a TTree larger than 100Gb)"", va=0x7ffcad78dbb0) at ../core/base/src/TObject.cxx:860; #7 0x00007fea7e92acd1 in TObject::Fatal (this=0x7ffcad78f2b0, location=0x7fea7f1cb532 ""RecursiveRemove"", fmt=0x7fea7f1cb4c8 ""Output file of the TFile Merger (targeting %s) has been deleted (likely due to a TTree larger than 100Gb)"") at ../core/base/src/TObject.cxx:925; #8 0x00007fea7ef90e56 in TFileMerger::RecursiveRemove (this=0x7ffcad78f2b0, obj=0x559367a40820) at ../io/io/src/TFileMerger.cxx:1081; #9 0x00007fea7e9ad0bf in THashList::RecursiveRemove (this=0x5593666f1840, obj=0x559367a40820) at ../core/cont/src/THashList.cxx:354; #10 0x00007fea7e8d4e14 in TROOT::RecursiveRemove (this=0x7fea7ec46740 <ROOT::Internal::GetROOT1()::alloc>, obj=0x559367a40820) at ../core/base/src/TROOT.cxx:2455; #11 0x00007fea80417f82 in ROOT::CallRecursiveRemoveIfNeeded (obj=(TObject) = {...}) at ../core/base/inc/TROOT.h:398; #12 0x00007fea7e927b18 in TNamed::~TNamed (this=0x559367a40820, __in_chrg=<optimized out>) at ../core/base/src/TNamed.cxx:45; #13 0x00007fea7e9081d5 in TDirectory::~TDirectory (this=0x559367a40820, __in_chrg=<optimized out>) at ../core/base/src/TDirectory.cxx:117; #14 0x00007fea7ef7c856 in TDirectoryFile::~TDirectoryFile (this=0x559367a40820, __in_chrg=<optimized out>) at ../io/io/src/TDirectoryFile.cxx:202; #15 0x00007fea7ef9673f in TFile::~TFile (this=0x559367a40820, __in_chrg=<optimized out>) at ../io/io/src/TFile.cxx:566; #16 0x00007fea7ef96776 in TFile::~TFile (this=0x559367a40820, __in_chrg=<optimized out>) at ../io/io/src/TFile.cxx:566; #17 0x00007fea7e9288d9 in TObject::Delete (this=0x559367a40820) at ../core/base/src/TObject.cxx:178; #18 0x00007fea802bbf82 in TTree::ChangeFile (this=0x559368ca6c20, file=0x559367a40820) at ../tree/tree/src/TTree.cxx:2813; #19 0x00007fea802bf66e in TTree::CopyEntries (this=0x559368ca6c20, tree=0x559368ca7a30, nentries=53446198, option=0x7ffcad78e7a1 "" fast"", needCopyAddresses=true) at ../",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10102:3908,optimiz,optimized,3908,https://root.cern,https://github.com/root-project/root/issues/10102,1,['optimiz'],['optimized']
Performance,"Mesh*)’ to ‘GLUTesselatorFunction’ {aka ‘void (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/graf3d/ftgl/src/FTVectoriser.cxx:188:76: warning: cast between incompatible function types from ‘void (*)(FTGL_DOUBLE*, void**, GLfloat*, void**, FTMesh*)’ {aka ‘void (*)(double*, void**, float*, void**, FTMesh*)’} to ‘GLUTesselatorFunction’ {aka ‘void (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/graf3d/ftgl/src/FTVectoriser.cxx:189:76: warning: cast between incompatible function types from ‘void (*)(FTMesh*)’ to ‘GLUTesselatorFunction’ {aka ‘void (*)()’} [-Wcast-function-type] ; - /mnt/build/workspace/root-pullrequests-build/root/graf3d/ftgl/src/FTVectoriser.cxx:190:76: warning: cast between incompatible function types from ‘void (*)(GLenum, FTMesh*)’ {aka ‘void (*)(unsigned int, FTMesh*)’} to ‘GLUTesselatorFunction’ {aka ‘void (*)()’} [-Wcast-function-type] . ### Failing tests:; - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_autocache](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/51124/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_autocache/); - [projectroot.roottest.root.io.compression.roottest_root_io_compression_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/51124/testReport/projectroot.roottest.root.io/compression/roottest_root_io_compression_make/); - [projectroot.roottest.root.io.treeForeign.roottest_root_io_treeForeign_testForeignDraw](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/51124/testReport/projectroot.roottest.root.io/treeForeign/roottest_root_io_treeForeign_testForeignDraw/); - [projectroot.roottest.root.tree.cloning.roottest_root_tree_cloning_exectrim](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/51124/testReport/projectroot.roottest.root.tree/cloning/roottest_root_tree_cloning_exectrim/); - [projectroot.roottest.root.tree.fastcloning.roottest_root_tree_fastcloning_make](https://ep",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2911#issuecomment-452655467:2414,cache,cache,2414,https://root.cern,https://github.com/root-project/root/pull/2911#issuecomment-452655467,1,['cache'],['cache']
Performance,"MetaSema::AR_Success) at /home/jhahnfel/ROOT/src/interpreter/cling/lib/MetaProcessor/MetaParser.cpp:147; 2187: #29 0x00007f2a50bb2833 in cling::MetaParser::isCommand (this=<optimized out>, actionResult=<optimized out>, resultValue=0x0) at /home/jhahnfel/ROOT/src/interpreter/cling/lib/MetaProcessor/MetaParser.cpp:118; 2187: #30 0x00007f2a50baaf05 in cling::MetaProcessor::process (this=<optimized out>, input_line=..., compRes=<optimized out>, result=0x33f, disableValuePrinting=<optimized out>) at /home/jhahnfel/ROOT/src/interpreter/cling/lib/MetaProcessor/MetaProcessor.cpp:317; 2187: #31 0x00007f2a5058c5ff in HandleInterpreterException (metaProcessor=metaProcessor; 2187: entry=0x60700007bb60, input_line=0x7f2a6338f0de "".L /home/jhahnfel/ROOT/build-asan-clang/roottest/root/meta/tclass/libInitOrder.so"", compRes=; 2187: 0x7f2a5e5cef40: cling::Interpreter::kSuccess, result=result; 2187: entry=0x0) at /home/jhahnfel/ROOT/src/core/metacling/src/TCling.cxx:2455; 2187: #32 0x00007f2a50595b52 in TCling::Load (this=<optimized out>, filename=<optimized out>, system=<optimized out>) at /home/jhahnfel/ROOT/src/core/metacling/src/TCling.cxx:3503; 2187: #33 0x00007f2a62daf8c5 in TSystem::Load (this=0x617000000080, module=<optimized out>, entry=<optimized out>, system=false) at /home/jhahnfel/ROOT/src/core/base/src/TSystem.cxx:1945; 2187: #34 0x00007f2a47737140 in execInitOrder () at /home/jhahnfel/ROOT/src/roottest/root/meta/tclass/execInitOrder.cxx:108; 2187: #35 0x00007f2a492f4029 in ?? (); 2187: #36 0x00007f2a5e77a0c0 in ?? (); 2187: #37 0x0000614000001840 in ?? (); 2187: #38 0x00007ffc0cd42e10 in ?? (); 2187: #39 0x00007f2a50a1db2e in cling::IncrementalExecutor::executeWrapper (this=<optimized out>, function=..., returnValue=0x7f2a5e77a0c0) at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.cpp:288; 2187: ===========================================================; ```. Not sure who to assign, so I give everybody a fair chance of volunteering :wink:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11867:12260,Load,Load,12260,https://root.cern,https://github.com/root-project/root/issues/11867,8,"['Load', 'optimiz']","['Load', 'optimized']"
Performance,"MethodIfSupported<testing::internal::UnitTestImpl, bool> (location=0x4419b8 ""auxiliary test code (environments or event listeners)"", method=<optimized out>, object=<optimized out>) at /home/amadio/build/root/googletest-prefix/src/googletest/googletest/src/gtest.cc:2402; #11 testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool> (object=0x1e5de00, method=<optimized out>, location=location; entry=0x4419b8 ""auxiliary test code (environments or event listeners)"") at /home/amadio/build/root/googletest-prefix/src/googletest/googletest/src/gtest.cc:2438; #12 0x0000000000436dd0 in testing::UnitTest::Run (this=0x650860 <testing::UnitTest::GetInstance()::instance>) at /home/amadio/build/root/googletest-prefix/src/googletest/googletest/src/gtest.cc:4257; #13 0x0000000000417c59 in RUN_ALL_TESTS () at /home/amadio/build/root/googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:2233; #14 main (argc=<optimized out>, argv=0x7fff3e663168) at /home/amadio/build/root/googletest-prefix/src/googletest/googletest/src/gtest_main.cc:37; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum.; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs. Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #6 TList::RecursiveRemove (this=0x1e0d6c0, obj=0x7f75e4d04b40) at /home/amadio/src/root/core/cont/src/TList.cxx:717; #7 0x00007f75efe885b3 in THashList::RecursiveRemove (this=<optimized out>, obj=0x7f75e4d04b40) at /home/amadio/src/root/core/cont/src/THashList.cxx:286; #8 0x00007f75efe25047 in TObject::~TObject (this=0x7f75e4d04b40, __in_chrg=<optimized out>) at /home/amadio/src/root/core/base/src/TObject.cxx:88; #9 0x0000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/666#issuecomment-309810781:5351,optimiz,optimized,5351,https://root.cern,https://github.com/root-project/root/pull/666#issuecomment-309810781,1,['optimiz'],['optimized']
Performance,"MethodName, TString methodTitle, TString theOption = """") =>; TypeError: could not convert argument 2; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader* loader, TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption = """") =>; runtime_error: FATAL error; TMVA::MethodBase* TMVA::Factory::BookMethod(TMVA::DataLoader*, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString) =>; TypeError: takes at least 6 arguments (4 given); CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-tmva-TMVA_Higgs_Classification-py. TypeError: none of the 3 overloaded methods succeeded.; ~~~; 1271/1272 Test #1268: tutorial-tmva-TMVA_Higgs_Classification-py ..........................***Failed 1.36 sec; TMVA_Higgs_Classification:0: RuntimeWarning: Skip using Keras since tensorflow is not available; Info in <TMVA_Higgs_Classification>: Download Higgs_data.root file; Info in <TFile::OpenFromCache>: using local cache copy of http://root.cern.ch/files/Higgs_data.root [./files/Higgs_data.root]; ******************************************************************************; *Tree :sig_tree : tree *; *Entries : 10000 : Total = 1177229 bytes File Size = 785298 *; * : : Tree compression factor = 1.48 *; ******************************************************************************; *Br 0 :Type : Type/F *; *Entries : 10000 : Total Size= 40556 bytes File Size = 307 *; *Baskets : 1 : Basket Size= 1500672 bytes Compression= 130.54 *; *............................................................................*; [ --- ]; *............................................................................*; *Br 28 :m_wwbb : m_wwbb/F *; *Entries : 10000 : Total Size= 40566 bytes File Size = 34410 *; *Baskets : 1 : Basket Size= 1500672 bytes Compression= 1.16 *; *............................................................................*; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:10084,cache,cache,10084,https://root.cern,https://github.com/root-project/root/issues/12429,1,['cache'],['cache']
Performance,"Minimal reproducer for the stressMathCore failure:; ```cpp; cat repro.cxx; #include ""TF1.h"". std::string Type() { return """"; }. template<class Func>; class StatFunction : public ROOT::Math::IParamFunction {; public:; unsigned int NPar() const { return 0; }; const double * Parameters() const { return 0; }; ROOT::Math::IGenFunction * Clone() const { return 0; }; void SetParameters(const double * p) { }; // test cumulative function; int Test() {; TF1 * f = new TF1(""ftemp"", ROOT::Math::ParamFunctor(*this));; return 0;; }. private:; double DoEvalPar(double x, const double * ) const {; // implement explicitly using cached parameter values; return 0;; }; };. // typedef defining the functions; typedef double ( * F2) (double);. typedef StatFunction<F2> Dist_beta;; Dist_beta dist;; int iret = dist.Test();. template<int Dim>; struct VectorTest {; void genData() {; TRandom3 r(111);; double phi = r.Rndm();; }; };. int repro() {; return 0;; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5884#issuecomment-650075454:617,cache,cached,617,https://root.cern,https://github.com/root-project/root/pull/5884#issuecomment-650075454,1,['cache'],['cached']
Performance,"Minimal working example:. ``` python; #!/usr/bin/env python. from ROOT import TMVA, TFile, TTree, TCut; from subprocess import call; from os.path import isfile. # Setup TMVA; TMVA.Tools.Instance(); TMVA.PyMethodBase.PyInitialize(). output = TFile.Open('TMVA.root', 'RECREATE'); factory = TMVA.Factory(""TMVAClassification"", output,; ""!V:!Silent:Color:DrawProgressBar:Transformations=D,N:AnalysisType=Classification""). # Load data; if not isfile('tmva_class_example.root'):; call(['curl', '-O', 'http://root.cern.ch/files/tmva_class_example.root']). data = TFile.Open('tmva_class_example.root'); signal = data.Get('TreeS'); background = data.Get('TreeB'). dataloader = TMVA.DataLoader('dataset'); for branch in signal.GetListOfBranches():; dataloader.AddVariable(branch.GetName()). dataloader.AddSignalTree(signal, 1.0); dataloader.AddBackgroundTree(background, 1.0); dataloader.PrepareTrainingAndTestTree(TCut(''),; ""TrainTestSplit_Signal=0.8:TrainTestSplit_Background=0.8:SplitMode=Random:NormMode=NumEvents""). # Book methods; factory.BookMethod(dataloader, TMVA.Types.kFisher, 'Fisher',; ""!H:!V:Fisher:VarTransform=None""). # Run TMVA; factory.TrainAllMethods(); factory.TestAllMethods(); factory.EvaluateAllMethods(). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/275#issuecomment-251658401:419,Load,Load,419,https://root.cern,https://github.com/root-project/root/pull/275#issuecomment-251658401,1,['Load'],['Load']
Performance,Minor Geometry optimization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10576:15,optimiz,optimization,15,https://root.cern,https://github.com/root-project/root/pull/10576,1,['optimiz'],['optimization']
Performance,Minor Geometry optimization [v6-24],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10641:15,optimiz,optimization,15,https://root.cern,https://github.com/root-project/root/pull/10641,1,['optimiz'],['optimization']
Performance,Minor Geometry optimization [v6-26],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10642:15,optimiz,optimization,15,https://root.cern,https://github.com/root-project/root/pull/10642,1,['optimiz'],['optimization']
Performance,"Minor optimization found by looking at profiles a while ago... `GetSpecialProtocols()` takes the global lock, so it's best to avoid calling it too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4357:6,optimiz,optimization,6,https://root.cern,https://github.com/root-project/root/pull/4357,1,['optimiz'],['optimization']
Performance,"Minuit migrad minimization: 1. the setup phase where the initial gradient is calculated and 2. the line search phases. To make the above possible, a few bugs had to be fixed:; - `RooAbsL` classes have `evaluatePartition` which allows you to specify the range of events and components over which to evaluate the likelihood. This had some bugs: the extended term and possible subsidiary components were added for each partition, leading to N duplicates (for N partitions). Commits 3db2e0dd36478813cfb534451f459348e8d90da9 and c2a8bc9df029f65ee575e140825af6c509860538.; - As a result of this fix, which reorders some terms in the sum, the LikelihoodGradientJob test was failing for a specific case due to increased floating point differences. We would like to add back in an option for retaining bit-wise exact same results in the future, but since the minimization still converges to the same value within the desired precision, for now we leave it like this, since the user can still pick the old ways if they prefer their exact old results. Commit b7f7fa7b705e2dfb767187dce3f6a32275f30d9e.; - `LikelihoodJob` had a bug where it didn't reset its `result` sum variable to zero before doing a new sum. Commits 042e1577d8c303d532016537e7467d6e2fbfcd9c and 44197a2a64f77b47587e5ee200d360c4514b8098. Finally, I made a mini optimization in `LikelihoodJob` by using `publish_from_master_to_workers` more efficiently, which reduces communication overhead slightly (and makes the code a bit cleaner). Also in commit 567b7988d56b6c1db6102d857b523fc2da607dbc. Note that although this is a bit of a big PR, the commits are factored out into the above list of changes, so I hope this makes it easy to review. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). Documentation not yet updated, I will check if this is necessary (I didn't think so, because it doesn't actually add much to the user interface, all the classes were already there, they just didn't work before like this).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10966:1660,optimiz,optimization,1660,https://root.cern,https://github.com/root-project/root/pull/10966,1,['optimiz'],['optimization']
Performance,"More comments for 238, basket size optimization",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/258:35,optimiz,optimization,35,https://root.cern,https://github.com/root-project/root/pull/258,1,['optimiz'],['optimization']
Performance,"More differential:. It seems that `root.exe -l -b -e 'gSystem->AccessPathName(""KKKKK"",kFileExists)'` works and `root.exe -l -b -e 'gSystem->AccessPathName("""",kFileExists)'` does not. . The LLVM IR diff:. ```diff ; diff -u working.ir broken.ir ; --- working.ir	2021-11-30 00:17:51.000000000 +0200; +++ broken.ir	2021-11-30 00:18:01.000000000 +0200; @@ -30,7 +30,7 @@; ; @_ZN5cling7runtime6gClingE = external local_unnamed_addr global %""class.cling::Interpreter.0""*, align 8; @gSystem = external local_unnamed_addr global %class.TSystem*, align 8; -@.str = dso_local unnamed_addr constant [6 x i8] c""KKKKK\00"", align 1; +@.str = dso_local unnamed_addr constant [1 x i8] zeroinitializer, align 1; ; define dso_local void @_ZN11__cling_N5015__cling_Un1Qu30EPv(i8*) local_unnamed_addr #0 {; %2 = load i8*, i8** bitcast (%""class.cling::Interpreter.0""** @_ZN5cling7runtime6gClingE to i8**), align 8, !tbaa !2; @@ -39,9 +39,9 @@; %5 = load i1 (%class.TSystem*, i8*, i32)**, i1 (%class.TSystem*, i8*, i32)*** %4, align 8, !tbaa !6; %6 = getelementptr inbounds i1 (%class.TSystem*, i8*, i32)*, i1 (%class.TSystem*, i8*, i32)** %5, i64 135; %7 = load i1 (%class.TSystem*, i8*, i32)*, i1 (%class.TSystem*, i8*, i32)** %6, align 8; - %8 = tail call zeroext i1 %7(%class.TSystem* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32 zeroext 0); + %8 = tail call zeroext i1 %7(%class.TSystem* %3, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i32 zeroext 0); %9 = zext i1 %8 to i64; - tail call void @_ZN5cling7runtime8internal15setValueNoAllocEPvS2_S2_cy(i8* %2, i8* %0, i8* nonnull inttoptr (i64 283833264 to i8*), i8 signext 1, i64 %9); + tail call void @_ZN5cling7runtime8internal15setValueNoAllocEPvS2_S2_cy(i8* %2, i8* %0, i8* nonnull inttoptr (i64 283832976 to i8*), i8 signext 1, i64 %9); ret void; }; ; @@ -65,4 +65,4 @@; !5 = !{!""Simple C++ TBAA""}; !6 = !{!7, !7, i64 0}; !7 = !{!""vtable pointer"", !5, i64 0}; -$8 = void; +$10 = void; ```. Please ignore thi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-982075814:791,load,load,791,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-982075814,2,['load'],['load']
Performance,"More than 60 comments, 10 new commits :1st_place_medal: ; @Axel-Naumann killing me :). I fix most of comments. Several big ""stones"" I left for next PRs:. 1. use of `std::list<WebCommand>` in canvas painter. For me it really makes sense while here FIFO is used. And `queue` not very nice when I need to iterate over all items; 2. Use of `collection::erase` methods in `WebWindow::CheckInactiveConnections` or `TWebWindow::CheckWebKeys`. @Axel-Naumann approach is very inefficient, while makes 10000 copies of same vector again and again without any need. I want to keep `erase`; 3. C++ handle in WebWindowManager, which should be assigned with each started browser process. ; Fully agree, next PRs; 4. WebWindowManager::Show() too big. Lets keep it for a while - it may change a lot, especially when solving point 3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2634#issuecomment-422488300:266,queue,queue,266,https://root.cern,https://github.com/root-project/root/pull/2634#issuecomment-422488300,1,['queue'],['queue']
Performance,"Moves from fixed page sizes on write to adaptive page sizes, following the original idea of @hahnjo . The new mechanism is explained in the tuning.md document in the PR. The PR also bumps the target compressed cluster size to 150MB. We may want to reduce that still. Evaluation of the new method is currently ongoing and the PR description will be amended with the results. EDIT: [Comparison](https://docs.google.com/spreadsheets/d/1maJhgvgVU8RkX7QXd7B3QiTBfKuYbTbvgkoHzBUOurY/edit?usp=sharing) of current write performance vs adaptive page sizes with 50MB, 100MB, 150MB target cluster size. To me it seems that there is not a good argument to go to 150 MB clusters. There may be an argument for 100 MB clusters. For the moment, I'll remove the commit that changes the default settings from the PR. An additional flavor, `adaptive / exp`, is included in the table to test the effect of flushing _foreign columns_. In the experimental mode, columns only flush themselves, which simplifies the `RWritePageMemoryManager` and avoids the upcall from the sink to the column. There is a small positive effect of foreign flushes on the file size in the nanoAOD sample. The effect is more visible for the number of pages. The memory consumption is slightly smaller without foreign column flushes. I'll see if I can construct an example that shows better the advantage of foreign column flushes (or not). As expected, the memory savings become visible for large EDMs (e.g., nanoAOD in this set of samples).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16311:512,perform,performance,512,https://root.cern,https://github.com/root-project/root/pull/16311,1,['perform'],['performance']
Performance,Moving the inline unsigned TExecutor::GetPoolSize() const method from the TExecutor.hxx header file to the (new) TExecutor.cxx source file fixes the following error on Windows:; ```; IncrementalExecutor::executeFunction: symbol '?GetPoolSize@TThreadExecutor@ROOT@@QBEIXZ' unresolved while linking function '??__Eid@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A@YAXXZcling_module_0_'!; You are probably missing the definition of public: unsigned int __thiscall ROOT::TThreadExecutor::GetPoolSize(void)const; Maybe you need to load the corresponding shared library?; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7037:524,load,load,524,https://root.cern,https://github.com/root-project/root/pull/7037,1,['load'],['load']
Performance,Muhammad Alhroob (using ChatGPT) demonstrated that this can considerably reduce the runtime cost for TRandom3. Marking the class `final` seems a good compromise between performance and backward incompatibility: the compiler will diagnose if people inherit from TRandom3. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes https://github.com/root-project/root/issues/12547.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12964:169,perform,performance,169,https://root.cern,https://github.com/root-project/root/pull/12964,1,['perform'],['performance']
Performance,MultiDimTempl<double>>>::*)(double) const>' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:155; 35: Returning from 'IntegralEvaluator::SetFunction' in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:136; 36: Returning from constructor for 'IntegralEvaluator<ROOT::Fit::FitUtil::ParamDerivFunc<ROOT::Math::IParametricGradFunctionMultiDimTempl<double>>>' in /opt/root_src/math/mathcore/src/FitUtil.cxx:207; 37: Assuming 'k' is < 'npar' in /opt/root_src/math/mathcore/src/FitUtil.cxx:210; 38: Loop condition is true. Entering loop body in /opt/root_src/math/mathcore/src/FitUtil.cxx:210; 39: Passing null pointer value via 2nd parameter 'x2' in /opt/root_src/math/mathcore/src/FitUtil.cxx:212; 40: Calling 'IntegralEvaluator::operator()' in /opt/root_src/math/mathcore/src/FitUtil.cxx:212; 41: Field 'fIg1Dim' is non-null in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:207; 42: Taking true branch in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:207; 43: Dereference of null pointer (loaded from variable 'x2') in /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:208; /opt/root_src/math/mathcore/inc/Fit/FitUtil.h:213:22: warning: Array access (from variable 'x2') results in a null pointer dereference [clang-analyzer-core.NullDereference]; 1: Assuming field 'fIntegral' is true in /opt/root_src/math/mathcore/src/FitUtil.cxx:1273; 2: Left side of '&&' is true in /opt/root_src/math/mathcore/src/FitUtil.cxx:1273; 3: Assuming field 'fBinVolume' is false in /opt/root_src/math/mathcore/src/FitUtil.cxx:1274; 4: Left side of '&&' is false in /opt/root_src/math/mathcore/src/FitUtil.cxx:1274; 5: 'x2' initialized to a null pointer value in /opt/root_src/math/mathcore/src/FitUtil.cxx:1278; 6: 'useBinVolume' is false in /opt/root_src/math/mathcore/src/FitUtil.cxx:1282; 7: Taking false branch in /opt/root_src/math/mathcore/src/FitUtil.cxx:1282; 8: 'useBinVolume' is false in /opt/root_src/math/mathcore/src/FitUtil.cxx:1294; 9: '?' condition is false in /opt/root_src/math/mathcore/src/FitUtil.cxx:1294; 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7458:8442,load,loaded,8442,https://root.cern,https://github.com/root-project/root/issues/7458,1,['load'],['loaded']
Performance,MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module NetxNG; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module RootAuth; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module Cling_Runtime_Extra; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTTPython; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module Gviz; Failed to load module ROOTGraphicsPrimitives; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; Failed to load module Thread; input_line_4:1:2: error: unknown type name 'ifdef'; #ifdef complex; ^; <<< cling interactive line includer >>>:1:1: error: expected unqualified-id; input_line_5:1:2: error: unknown type name 'ifdef'; #ifdef PI; ^; <<< cling int,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-752250076:4653,load,load,4653,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076,1,['load'],['load']
Performance,Must call TFile::SetCacheFileDir in order for CACHEREAD option to work. Makes the test work in offline mode with pre-cached file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2246:46,CACHE,CACHEREAD,46,https://root.cern,https://github.com/root-project/root/pull/2246,2,"['CACHE', 'cache']","['CACHEREAD', 'cached']"
Performance,"My 2 cents:. 1. You have to expand the glob to an actual list of files and grab e.g. the first file in the list. One (not elegant) way to do it is to go through `TChain::Add`. Just performing the glob expansion with TChain does not require that there are TTrees in the file:; ```; /tmp touch foo.root; /tmp touch bar.root; /tmp root -l; root [0] TChain c;; root [1] c.Add(""*.root""); (int) 2; root [2] c.GetListOfFiles()->GetEntries(); (int) 2; root [3] c.GetListOfFiles()->At(0)->GetName(); (const char *) """"; root [4] c.GetListOfFiles()->At(0)->GetTitle(); (const char *) ""/tmp/bar.root""; root [5] c.GetListOfFiles()->At(1)->GetTitle(); (const char *) ""/tmp/foo.root""; ```. 2. The quick fix is to assume TTree if the file does not exist. The better fix is probably to delay the decision to right before the beginning of the event loop.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1607656028:181,perform,performing,181,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1607656028,1,['perform'],['performing']
Performance,"My bad for not managing to get to this in time. I think most of the logic would go in `GetColumnReader`, in `ColumnReaderUtils`: it would have to create a `TreeColumnReader` if the column is present in the tree and pick the reader for the default value instead. The main complication is dealing with chains in which _some_ trees contain the column and some do not.; The most direct way to do it is leveraging TChain's callback mechanism to switch column readers as needed, but a) TChain's callback mechanism is a mess and b) even if unused TTreeReaderValues for missing branches might emit warnings (unless they are completely destroyed maybe?).; An more roundabout way to do the same would be to change single-thread RDataFrame so that it runs a separate event loop for each sub-tree and never uses a TChain --> you automatically get a call to `GetColumnReader` that can re-evaluate whether the branch or the default value should be used at the start of every new event loop. Finally, you can implement the default as a `Define` that always returns the same number (and in first approximation that's probably the easiest). A slightly nicer underlying implementation would involve a `ConstReader` that explicitly stores a constant value and always returns that same value, but the advantage is unclear -- a good optimizing compiler would elide the call to the lambda that always returns the same number anyways.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8704#issuecomment-1911020478:1312,optimiz,optimizing,1312,https://root.cern,https://github.com/root-project/root/issues/8704#issuecomment-1911020478,1,['optimiz'],['optimizing']
Performance,"My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6676#issuecomment-712821523:435,multi-thread,multi-thread,435,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-712821523,1,['multi-thread'],['multi-thread']
Performance,"My machine finally completed full testing with the TestU01 suite (via https://github.com/lmoneta/testrng):; ```; ========= Summary results of BigCrush =========. Version: TestU01 1.2.3; Generator: TRandomRanluxpp (p = 2048); Number of statistics: 160; Total CPU time: 04:56:59.27. All tests were passed; ```. Performance-wise, I tested summing up 1e9 random doubles and each number takes 29ns on average. As expected, that is worse than the assembly implementation (approx. 9ns), but at least twice as fast compared to RANLUX in `TRandom1` with ca. 62ns.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6794#issuecomment-725503855:309,Perform,Performance-wise,309,https://root.cern,https://github.com/root-project/root/pull/6794#issuecomment-725503855,1,['Perform'],['Performance-wise']
Performance,"My personal preference is to store std::string instead of a hash, as it's simpler and hashing anyway doesn't give us any improvement in performance. About transaction, I'm testing something like what I asked but it gives me an error like this which seems very cryptic to me, have you ever seen this error before?; https://gist.github.com/yamaguchi1024/b137f5313dfca23abbe890a5c4440a7d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2434#issuecomment-411910183:136,perform,performance,136,https://root.cern,https://github.com/root-project/root/pull/2434#issuecomment-411910183,1,['perform'],['performance']
Performance,"My suggestion to try to fix this issue is the following:. ```diff; --- a/builtins/lz4/CMakeLists.txt; +++ b/builtins/lz4/CMakeLists.txt; @@ -44,7 +44,7 @@ set(LZ4_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL """" FORCE); add_library(lz4 STATIC ${LZ4_PUBLIC_HEADERS} ${LZ4_PRIVATE_HEADERS} ${LZ4_SOURCES}); set_target_properties(lz4 PROPERTIES C_VISIBILITY_PRESET hidden POSITION_INDEPENDENT_CODE ON); target_include_directories(lz4 INTERFACE $<BUILD_INTERFACE:${LZ4_INCLUDE_DIR}>); -target_link_libraries(lz4 PRIVATE xxHash::xxHash); +target_include_directories(lz4 PRIVATE $<BUILD_INTERFACE:${xxHash_INCLUDE_DIR}>); ; add_library(LZ4::LZ4 ALIAS lz4); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13739#issuecomment-1740750211:204,CACHE,CACHE,204,https://root.cern,https://github.com/root-project/root/pull/13739#issuecomment-1740750211,1,['CACHE'],['CACHE']
Performance,"My two cents about the naming; * `GenerateValueFor` doesn't work since the value is not being generated for the other instance, but for this one (AFAIU).; * `GenerateValueBy` sounds fine in principle since the `GenerateValue` call is called *by* the other instance. I have to admit that I personally do not get this immediately and I have to stop half a second to think about the meaning of the function name.; * `GenerateValueOn` also doesn't work because the value is being generated by the other instance, not on.; * `GenerateValueFrom` personally has a similar meaning to `GenerateValueBy` and is easier to get intuitively.; * The `GenerateValueFrom` naming works for `Generate` but not for `Append`. I.e. I don't like `AppendFrom` since that sounds like we are appending some value *from* the other instance *into* this one; * To me it looks like all these functions are performing a call of the same function name on another instance. Thus, personally I would go with a naming like `CallGenerateValueOn`, `CallAppendOn`, `CallReadOn` etc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13317#issuecomment-1651710380:876,perform,performing,876,https://root.cern,https://github.com/root-project/root/pull/13317#issuecomment-1651710380,1,['perform'],['performing']
Performance,"My understanding is that one possible optimization is related to auto-loading of namespaces. At the moment, we load all modules, which can be a problem for ""widespread"" namespaces such as `ROOT::Experimental`. However, we need this for `ROOT::RDF` and so on which live in libraries / modules that are not eagerly loaded. FWIW yesterday I thought about this, and it seems to me that once we know that something is a namespace that we've already seen somewhere, we don't actually need to do anything - contained classes will be loaded on demand from the modules that actually contain them. My idea was to add a check to `TClingCallbacks::LookupObject(const DeclContext* DC, DeclarationName Name)` and if `Name` already resolves to a known namespace, just `return false`. That's a bit tricky though because if we do a name lookup from there, it will recursively call Cling again. We might be able to cut this loop with a boolean flag that we set just before doing the lookup, but I stopped my experiments here. If somebody wants to try it further, be my guest :sweat_smile:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1625064006:38,optimiz,optimization,38,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1625064006,5,"['load', 'optimiz']","['load', 'loaded', 'loading', 'optimization']"
Performance,"My version of os/compiler/valgrind seems to work better and I got some useful information. For `root.exe -b -l -q callfuncbench.cxx+(1000)`. The new code is a big faster: `42,696,463,692` instead of `45,892,859,389`. Some of the calculation are shifted to `Value::Value`: `5,000,000,988` vs `3,100,001,703` (it grows by 2 billions when the overall goes down by 3 billions). The gains comes from the disappearance of `TClingCallFunc::InitRefAndExec` (minus 3.8 billions) and the simplifications of `std::function_handler (removed) and TClingCallFunc::exec` (minus 1.2 billions). So it is getting better and `Value::Value` is a potential source of further optimization (see related comment). [callgrind-callfund.tar.gz](https://github.com/root-project/root/files/9665974/callgrind-callfund.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1261020879:654,optimiz,optimization,654,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1261020879,1,['optimiz'],['optimization']
Performance,Myproxy-CA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/089450c2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy-CA.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA3G3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/368bc755.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy-CA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1149214e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1149214e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/87429ba3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30ffc224.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/295adc19.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30ffc224.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TRGrid.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DFN-GridGermany-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/295adc19.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DFN-GridGermany-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/6f071272.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DFN-GridGermany-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/REUNA-ca.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/6f071272.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DFN-GridGermany-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certifica,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:31415,load,load,31415,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,NAMgrid-ca.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Robots.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNLPGrid.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SDG-G2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Robots.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7a819ef2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNLPGrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d71343e8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d71343e8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d7e8dc79.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SlovakGrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/728fa56d.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SlovakGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/728fa56d.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e13e0fcf.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e2,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:52768,load,load,52768,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,NCSA-slcs-2013.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e2023333.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2fc6b233.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Personnels.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2fc6b233.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ff94d436.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/0e635db3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8fa17d52.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/0e635db3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IGCA2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/RDIG.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Personnels.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/156a0f0f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/seegrid-ca-2013.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ff94d436.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3d5be7bc.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/55994d72.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/94b468c6.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3d5be7bc.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/94b468c6.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1ac0d46.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/RDIG.name,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:43744,load,load,43744,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,NTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to lo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-752250076:3582,load,load,3582,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076,1,['load'],['load']
Performance,"Needs some more work as suggested by Philippe:; - [x] use namespace-scope functions with local statics instead of global channel variables (as agreed on by @eguiraud but I forgot...);; - [x] fwd declare that channel function and even its return type `RLogChannel` in the relevant headers, to reduce `#include` ""load"";; - [x] move ""ROOT"" prefix into channel ctor args (`RLogChannel(""ROOT.FitPanel"")`) to make it usable by non-ROOT code;. And #6931 which will go into a subsequent PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6875#issuecomment-740762392:311,load,load,311,https://root.cern,https://github.com/root-project/root/pull/6875#issuecomment-740762392,1,['load'],['load']
Performance,"Next) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:637:13: note: Calling 'TMemBlock::CreateNext'; fBlockSeek->CreateNext(fDefaultBlockSize);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:90:16: note: Calling constructor for 'TMemBlock'; fNext = new TMemBlock(size,this);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:60:35: note: Null pointer value stored to field 'fBuffer'; fPrevious(previous), fNext(0), fBuffer(0), fSize(0); ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:63:8: note: Assuming the condition is false; if (size != -1) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:63:4: note: Taking false branch; if (size != -1) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:90:16: note: Returning from constructor for 'TMemBlock'; fNext = new TMemBlock(size,this);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:637:13: note: Returning from 'TMemBlock::CreateNext'; fBlockSeek->CreateNext(fDefaultBlockSize);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:643:17: note: Assuming the condition is true; while (len_left > fBlockSeek->fSize) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:643:10: note: Loop condition is true. Entering loop body; while (len_left > fBlockSeek->fSize) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:646:13: note: Null pointer passed as an argument to a 'nonnull' parameter; memcpy(fBlockSeek->fBuffer, buf, fBlockSeek->fSize);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:658:10: error: Null pointer passed as an argument to a 'nonnull' parameter [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]; memcpy(fBlockSeek->fBuffer, buf, len_left);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:672:11: note: Calling 'TMemFile::SysWriteImpl'; return SysWriteImpl(fd,buf,len);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:610:4: note: Taking false branch; if (f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3891#issuecomment-502686211:7492,perform,performance-test,7492,https://root.cern,https://github.com/root-project/root/pull/3891#issuecomment-502686211,1,['perform'],['performance-test']
Performance,"Nice idea! Can you open a PR for that? This is a very common case indeed, it's nice to optimize it. By the way, there are `clang-tidy` checks to do this automatically.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15434#issuecomment-2098523781:87,optimiz,optimize,87,https://root.cern,https://github.com/root-project/root/issues/15434#issuecomment-2098523781,1,['optimiz'],['optimize']
Performance,Nice improvement. Isn't it missing the reset of the cache when new transactions are added or removed? (I.e. a previous found/not-found function might be not-found/found).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2434#issuecomment-410277597:52,cache,cache,52,https://root.cern,https://github.com/root-project/root/pull/2434#issuecomment-410277597,1,['cache'],['cache']
Performance,"No actual drawing will be performed, but some extra objects like palette or stats box may be created. Behaves like batch image production was triggered - without real running of web browser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13289:26,perform,performed,26,https://root.cern,https://github.com/root-project/root/pull/13289,1,['perform'],['performed']
Performance,No reason to explicitly load pythia8 due to autoloading,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/903:24,load,load,24,https://root.cern,https://github.com/root-project/root/pull/903,1,['load'],['load']
Performance,No sure what is wrong (errors are new/related) but one important missing feature is the invalidation of (some of) the cache upon transaction/file unloading.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9284#issuecomment-967473793:118,cache,cache,118,https://root.cern,https://github.com/root-project/root/pull/9284#issuecomment-967473793,1,['cache'],['cache']
Performance,"No there is no plot to show, this just performing a minimization of a function and it is a translation of the same existing tutorial in C++. We could maybe make a nice plot showing the steps to converge to the minimum",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12274#issuecomment-1425398521:39,perform,performing,39,https://root.cern,https://github.com/root-project/root/pull/12274#issuecomment-1425398521,1,['perform'],['performing']
Performance,"No, not really, this happens for TROOT::fFiles so this mechanism is already ""in action"". The problem is this is called via at_exit_of_TROOT() which is called by libc **after** libXrdCl.so has already been unloaded. That's why I proposed to strip off the cleanups of object lists held by TROOT and call this just before calling exit in TApplication::Terminate() --- at this point we are guaranteed that all the loaded libraries are still present. As a fallback when TApplication is not used and the user does not call TROOT::Terminate() manually (current behavior) one call the same method from ~TROOT, assuming it is not virtual (do people inherit from TROOT? :) ). @michalsimon is this correct? I do not understand completely how at-exit-handler/library-unloading proceeds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8767#issuecomment-890013930:410,load,loaded,410,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-890013930,1,['load'],['loaded']
Performance,"Not everything will be covered by modules, for a long time. Thus we will have to keep the rdict file feature alive for years to come. What's the benefit of optimizing this then - is it only to accelerate roottest? (I'm trying to understand whether it's important to invest dev hours here vs in other areas, taking as main criteria, as always, relevance to our users.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-650953383:156,optimiz,optimizing,156,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-650953383,1,['optimiz'],['optimizing']
Performance,Note also that the test removed by this PR does *not* test whether the external llvm has visible symbols: it tests whether the process had loaded an llvm with visible symbols before dlopening libCling - and that's not an issue anymore as explained in the commit log. So any discussion about that feature is independent of this PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4736#issuecomment-572058274:139,load,loaded,139,https://root.cern,https://github.com/root-project/root/pull/4736#issuecomment-572058274,1,['load'],['loaded']
Performance,"Note that I do not understand how we can define a canonical namespace in the context of libraries.; For example with two trivial libraries that contains solely what is described in one of those two simple headers:; ```; // header A.h for library A.so; namespace Generic {; void functionA(int) {};; }; ```; ```; // header B.h for library B.so; namespace Generic {; void functionB(int) {};; }; ```; which of those 'two' library should be loaded when 'autoloading [the] canonical namespace'. I.e. A priori autoloading namespaces is the wrong granularity and we should/can autoload things like classes, enum ... and (what we are currently missing) free standing functions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547#issuecomment-387210735:436,load,loaded,436,https://root.cern,https://github.com/root-project/root/pull/1547#issuecomment-387210735,1,['load'],['loaded']
Performance,"Note that this is a significant change, especially if you make the file opening parallel, for the remote server (which will now see many file opening concurrently or at least in very close succession). [edited: humm ... or is it only doubling the number of file opens ....]. At the very least I would limit the number of file opening to the number of taks/cores.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3051#issuecomment-441871710:150,concurren,concurrently,150,https://root.cern,https://github.com/root-project/root/pull/3051#issuecomment-441871710,1,['concurren'],['concurrently']
Performance,"Note: at least on Intel architectures, a single 64bit pointer cannot be split into more than one cache line due to alignment of 8 bytes (i.e. it's thread-safe to read it). Therefore, any thread will either see `fBase == nullptr` and acquire a lock to create the list of bases, or it will find the value already computed and return it immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/957#issuecomment-327749242:97,cache,cache,97,https://root.cern,https://github.com/root-project/root/pull/957#issuecomment-327749242,1,['cache'],['cache']
Performance,"Note: the failure in the TTabCom test indicates that as a consequence of this PR, more AST nodes are loaded in memory at startup.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1312#issuecomment-344217460:101,load,loaded,101,https://root.cern,https://github.com/root-project/root/pull/1312#issuecomment-344217460,1,['load'],['loaded']
Performance,Note: this is related to https://github.com/root-project/root/issues/11955 which is one example where changing the default would not only affect performance but also have a functional effect (`gDirectory` having different values before and after).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11957#issuecomment-1401115298:145,perform,performance,145,https://root.cern,https://github.com/root-project/root/issues/11957#issuecomment-1401115298,1,['perform'],['performance']
Performance,"Now I start understanding problem with cernbox http server.; It returns wrong http response header on multi-range request.; Therefore ROOT not able to recognize it and either fail or fall-back to single http requests - ; which is VERY slow method due to 1.5s latency per single request. Here is example of ""normal"" response on multipart http request:; ```; curl -ik https://root.cern/js/files/hsimple.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:48) !11391 ; HTTP/1.1 206 Partial Content; Date: Thu, 15 Jun 2023 09:16:57 GMT; Server: Apache/2.4.41 (Ubuntu); X-Frame-Options: SAMEORIGIN; Last-Modified: Thu, 04 Jul 2013 08:21:05 GMT; ETag: ""6521f-4e0ab42683e40""; Accept-Ranges: bytes; Content-Length: 177; Cache-Control: max-age=1800; Expires: Thu, 15 Jun 2023 09:46:57 GMT; Content-Security-Policy: frame-ancestors 'self';; Strict-Transport-Security: max-age=15768000; Access-Control-Allow-Origin: *; Access-Control-Allow-Headers: range; Access-Control-Expose-Headers: content-range,content-length,content-type,accept-ranges; Access-Control-Allow-Methods: HEAD,GET; Content-Type: multipart/byteranges; boundary=61c842e35204a0c7. --61c842e35204a0c7; Content-range: bytes 0-15/414239. root�mdR; --61c842e35204a0c7; Content-range: bytes 1000-1015/414239. 1ZGqP��; --61c842e35204a0c7--; ```. And here is result from cernbox:; ```; curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-15,1000-1015"" --output - (15.06. 11:15:25) !11380 ; HTTP/1.1 206 Partial Content; Access-Control-Allow-Origin: *; Content-Disposition: attachment; filename=""test_ntuples_200123.root""; Content-Length: 389; Content-Range: ; Content-Security-Policy: default-src 'none';; Content-Type: application/octet-stream; Date: Thu, 15 Jun 2023 09:15:48 GMT; Etag: ""329762575417868288:9d274a18""; Last-Modified: Wed, 24 May 2023 12:22:19 +0000; Oc-Etag: ""329762575417868288:9d274a18""; Oc-Fileid: eoshome-t!103034857; Server: nginx/1.20.1; Strict-Tran",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13018#issuecomment-1592696000:259,latency,latency,259,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592696000,2,"['Cache', 'latency']","['Cache-Control', 'latency']"
Performance,"Now Imt depends on MultiProc (https://github.com/root-project/root/pull/7040), so MultiProc gets loaded when importing ROOT in python and needs to be whitelisted",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7048:97,load,loaded,97,https://root.cern,https://github.com/root-project/root/pull/7048,1,['load'],['loaded']
Performance,"Now basic openui5 config parameters can be provided via rootrc file:. * WebGui.openui5src: alternative location for openui5 like https://openui5.hana.ondemand.com/; * WebGui.openui5libs: list of pre-loaded ui5 libs like sap.m, sap.ui.layout, sap.ui.unified; * WebGui.openui5theme: openui5 theme like sap_belize (default) or sap_fiori_3. Extend light configuration in webgeom - let configure kind and intensity of the light",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4630:199,load,loaded,199,https://root.cern,https://github.com/root-project/root/pull/4630,1,['load'],['loaded']
Performance,"Now if the type of a column is `RVec<bool>`, `RDataFrame` reads it as; a `TTreeReaderValue<std::vector<bool>>` and performs a copy into a; `RVec<bool>` value when passing each entry value to RDF operations. This is a temporary patch, this changes should be reverted as soon; as ROOT-9570 (""TTreeReaderArray<bool> silently returns wrong results; when reading a vector<bool>"") is fixed. Note that C-arrays of bool are still broken, and that requires that; `TTreeReaderArray<bool>` be fixed.; EDIT: or are they? does `TTreeReaderArray<bool>` work with C-arrays of bools?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2605:115,perform,performs,115,https://root.cern,https://github.com/root-project/root/pull/2605,1,['perform'],['performs']
Performance,"Now only 1 test failing, but I just noticed that setting load to false returns almost always a nullptr for type, so.... this is not a solution either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14930#issuecomment-1991628377:57,load,load,57,https://root.cern,https://github.com/root-project/root/pull/14930#issuecomment-1991628377,1,['load'],['load']
Performance,"Now that we have an efficient hash-assisted `find` mechanism to find by name, it can be used in `RooArgSet` to optimize `containsInstance` (as we are certain there is only one parameter with a given name). This reduces the writing of large workspaces to file (such as ATLAS Higgs combination) by a significant factor (not precisely measured, but at least 5).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9417:111,optimiz,optimize,111,https://root.cern,https://github.com/root-project/root/pull/9417,1,['optimiz'],['optimize']
Performance,"Now that we use the ""collection proxy"" mechanism to write RVecs,; they can still be read back as std::vectors or with TTreeReaderArrays; without issues, which removes the motivation for performing this; type-to-type translation on the fly. Users might notice the change but it should not have any problematic; consequence as RDF and ROOT will still be able to read the RVec; branches written before this commit (without any change in user code; thanks to the ""collection proxy"" mechanism).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7498:186,perform,performing,186,https://root.cern,https://github.com/root-project/root/pull/7498,1,['perform'],['performing']
Performance,"Now using CUDA streams to support parallelization over events in the batch. This yields a 40% performance boost on high end GPUs (GTX 1080 Ti) and 10-15% on weaker models (Quadro 1000M). Additionally, temporary matrices used by `Im2Col` in the forward pass are maintained as a `ConvLayer` data field in order to minimize cuda memory allocations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2475:94,perform,performance,94,https://root.cern,https://github.com/root-project/root/pull/2475,1,['perform'],['performance']
Performance,"Now, if `fAutoFlush == 0`, we are setting the cache size to `1.5 * medianClusterSize * GetZipBytes() / (fEntries + 1)` (mimicking the logic in `GetCacheAutoSize` but using the median cluster size instead of `fAutoFlush`). When calculating the median, cluster ranges for which `fClusterSize == 0` are ignored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8714#issuecomment-900885868:46,cache,cache,46,https://root.cern,https://github.com/root-project/root/pull/8714#issuecomment-900885868,1,['cache'],['cache']
Performance,"OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_0.9~dev; -- Cling will look for C++ headers in '/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10:/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/x86_64-suse-linux:/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/backward' at runtime.; -- And then fallback to: 'clang-12.0.0'; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Failed; -- Performing Test found_stdexpstringview; -- Performing Test found_stdexpstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Failed; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Failed; -- Performing Test found_stdindexsequence; -- Performing Test found_stdindexsequence - Success; -- 551/856 C++ tutorials have been activated.; -- Check for bitness: Found 64 bit architecture.; -- Scanning subdirectories for tests...; -- ROOT Configuration. System Linux-5.12.0-2-default; Processor 6 core AMD Ryzen 5 3600XT 6-Core Processor (x86_64); Build type Release; Install path /usr/local; Compiler Clang 12.0.0; Compiler flags:; C -pipe -Wall -W -pthread -O2 -DNDEBUG; C++ -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2 -DNDEBUG; Linker flags:; Executable -rdynamic; Module; Shared -Wl,--no-undefined. -- Enabled supp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8097#issuecomment-832676622:2795,Perform,Performing,2795,https://root.cern,https://github.com/root-project/root/issues/8097#issuecomment-832676622,12,['Perform'],['Performing']
Performance,"OK so what you're after is:; - ignore hidden friends, ignore ADL. This breaks any current stdlib usage; you have been warned :-); - collect all occurrences of a name, be it function template or function. Correct? Can be done, but you might not like the result. I understand that it's *better* than what we have now; but I think it's not good enough. Why can you not:. * pass Python integers as `int`, then `long`, then... (i.e. keep re-trying)?; * pass strings as `const char*`s; * pass collections as `begin(). end()`; *... i.e. have a mapping into C++ expressions, instead of wanting to do (a C++ feature-restricted version of) overload resolution inside cppyy? Can you expand on ""I can do a much better job finding my own match than can do Sema, b/c the rules to apply aren't exactly the C++ ones (the only ones that Sema knows)"". Why can you not model type conversion options into C++ argument types, instead of doing that conversion model yourself from C++ function argument types? Is it performance?. `LookupHelper` exists, but I insist it's inadequate for expressions. I will try to resist from being colloquial from here on, please slap me should it ever happen again ;-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-696832534:993,perform,performance,993,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696832534,1,['perform'],['performance']
Performance,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713528820:505,optimiz,optimizer,505,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713528820,1,['optimiz'],['optimizer']
Performance,"OK, thanks. Now I can try to add this just before TFile::Open, but as Axel says, it still might not work. Might there be a way to 'load' the xrootd lib, and then call this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-748033025:131,load,load,131,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-748033025,1,['load'],['load']
Performance,"ONE could not set it to constant. *** Break *** segmentation violation; ```. While the relevant variable is present in the XML file:; ```xml; <Measurement Name=""BLIND_separate_tt_Z_29IFB_Apr_29"" Lumi=""1"" LumiRelErr=""0.1"" ExportOnly=""True"" >; <POI>mu_ttbar mu_Z b</POI>; <ParamSetting Const=""True"">Lumi minusONE</ParamSetting>; </Measurement>; ```. The crash did not happen in ROOT 6.28.04. This is the relevant stack trace from the crash:. ```; ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f86acb0fbf7 in __GI___wait4 (pid=18077, stat_loc=stat_loc; entry=0x7fffe7747e28, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30; #1 0x00007f86acb0fd4b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7fffe7747e28, options=options; entry=0) at ./posix/waitpid.c:38; #2 0x00007f86aca5509b in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172; #3 0x00007f86ae5282a1 in TUnixSystem::StackTrace() () from /home/tomas/ROOT/root_install/lib/libCore.so; #4 0x00007f86ae527c14 in TUnixSystem::DispatchSignals(ESignals) () from /home/tomas/ROOT/root_install/lib/libCore.so; #5 <signal handler called>; #6 0x00007f86ad4a0f34 in RooAbsArg::setAttribute(char const*, bool) () from /home/tomas/ROOT/root_install/lib/libRooFitCore.so; #7 0x00007f86abf40164 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so; #8 0x00007f86abf42e81 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /home/tomas/ROOT/root_install/lib/libHistFactory.so; #9 0x00007f86abf57971 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistF",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14225:2326,optimiz,optimized,2326,https://root.cern,https://github.com/root-project/root/issues/14225,1,['optimiz'],['optimized']
Performance,"OOT', __doc__=None, __package__=None, __loader__=None, __spec__=None, module=<module at remote 0x7faec0dce360>, __file__='/cvmfs/ilc.desy.de/key4hep/spackages/root/6.26.06/x86_64-centos7-gcc11.2.0-opt/dctcyvzmo7xg4dehiooyfl24oevtaids/lib/ROOT/__init__.py', gROOT=<TROOT at remote 0x7faeaa0648c0>, _cppyy_exports=['nullptr', 'bind_object', 'as_cobject', 'addressof', 'SetMemoryPolicy', 'kMemoryHeuristics', 'kMemoryStrict', 'SetOwnership'], nullptr=<nullptr_t at remote 0x7faebf1583a0>, bind_object=<built-in method bind_object of module object at remote 0x7faebf168f40>, as_cobject=<built-in method as_cobject of modu...(truncated), start=0x101, filename='/afs/desy.de/user/d/dudarboh/analysis/misc/test.py', fp=0xc827e0) at Python/pythonrun.c:1140; #19 pyrun_simple_file (flags=0x7ffc080e6778, closeit=<optimized out>, filename='/afs/desy.de/user/d/dudarboh/analysis/misc/test.py', fp=0xc827e0) at Python/pythonrun.c:450; #20 PyRun_SimpleFileExFlags (fp=fp; entry=0xc827e0, filename=<optimized out>, closeit=closeit; entry=0x1, flags=flags; entry=0x7ffc080e6778) at Python/pythonrun.c:483; #21 0x00007faec09ae01c in PyRun_AnyFileExFlags (fp=fp; entry=0xc827e0, filename=<optimized out>, closeit=closeit; entry=0x1, flags=flags; entry=0x7ffc080e6778) at Python/pythonrun.c:92; #22 0x00007faec09cad68 in pymain_run_file (cf=0x7ffc080e6778, config=0xbfdd70) at Modules/main.c:373; #23 pymain_run_python (exitcode=0x7ffc080e6770) at Modules/main.c:598; #24 Py_RunMain () at Modules/main.c:677; #25 0x00007faec09cb227 in pymain_main (args=0x7ffc080e6860) at Modules/main.c:707; #26 Py_BytesMain (argc=<optimized out>, argv=<optimized out>) at Modules/main.c:731; #27 0x00007faebf6bd555 in __libc_start_main () from /lib64/libc.so.6; #28 0x000000000040100e in _start (); ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12496#issuecomment-1564100129:36789,optimiz,optimized,36789,https://root.cern,https://github.com/root-project/root/issues/12496#issuecomment-1564100129,1,['optimiz'],['optimized']
Performance,OOT-G1.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IHEP-2013.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b93d6240.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/39d30eba.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b93d6240.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e7734335.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30351739.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/39d30eba.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30351739.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e7734335.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/61cd35bd.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IHEP-2013.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/61cd35bd.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HPCI.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HPCI.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ead666c8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/06769ccd.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HPCI.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/06769ccd.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/522b8537.namespaces' from CURLOPT_CAPATH; * f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:56294,load,load,56294,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,OOT_Foundation_Stage1_NoRTTI; >Failed to load module Genetic; >Failed to load module Eve; >Failed to load module GeomPainter; >Failed to load module TreeViewer; >Failed to load module Physics; >Failed to load module EG; >Failed to load module Tree; >Failed to load module HistFactory; >Failed to load module Spectrum; >Failed to load module Matrix; >Failed to load module Html; >Failed to load module Hist; >Failed to load module GuiHtml; >Failed to load module _Builtin_intrinsics; >Failed to load module Gpad; >Failed to load module TMVAGui; >Failed to load module Postscript; >Failed to load module ROOTEve; >Failed to load module RGL; >Failed to load module Fumili; >Failed to load module Net; >Failed to load module Geom; >Failed to load module RooFitMore; >Failed to load module ROOTGpadv7; >Failed to load module X3d; >Failed to load module Cling_Runtime; >Failed to load module SPlot; >Failed to load module EGPythia8; >Failed to load module RooFit; >Failed to load module RCsg; >Failed to load module Rint; >Failed to load module XMLParser; >Failed to load module MultiProc; >Failed to load module RooStats; >Failed to load module GeomBuilder; >Failed to load module Proof; >Failed to load module FITSIO; >Failed to load module Ged; >Failed to load module Recorder; >Failed to load module FFTW; >Failed to load module GuiBld; >Failed to load module ROOTWebDisplay; >Failed to load module RooFitCore; >Failed to load module Gui; >Failed to load module SQLIO; >Failed to load module XMLIO; >Failed to load module ROOT_Rtypes; >Failed to load module std; >Failed to load module ROOTHistDraw; >Failed to load module GX11TTF; >Failed to load module RIO; >Failed to load module ProofPlayer; >Failed to load module ASImage; >Failed to load module libc; >Failed to load module ROOT_Foundation_C; >Failed to load module MathMore; >Failed to load module Foam; >Failed to load module RSQLite; >Failed to load module SpectrumPainter; >Failed to load module Minuit2; >Failed to load module Core; >Failed t,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7055:4876,load,load,4876,https://root.cern,https://github.com/root-project/root/issues/7055,1,['load'],['load']
Performance,"OOT_prompt_"", line=0x7ffd9df7f6c9 ""Events"", error=0x7ffd9df7f60c, error; entry=0x0) at ../core/rint/src/TRint.cxx:801; #31 0x00007f1751c056ba in TRint::HandleTermInput (this=0x55fecde5ddd0) at ../core/rint/src/TRint.cxx:648; #32 0x00007f175195d0b5 in TUnixSystem::CheckDescriptors (this=this; entry=0x55fecde2a420) at ../core/unix/src/TUnixSystem.cxx:1306; #33 0x00007f17519604b8 in TUnixSystem::DispatchOneEvent (this=0x55fecde2a420, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1061; #34 0x00007f175187fa88 in TSystem::InnerLoop (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:406; #35 TSystem::Run (this=0x55fecde2a420) at ../core/base/src/TSystem.cxx:356; #36 0x00007f17518098cb in TApplication::Run (this=this; entry=0x55fecde5ddd0, retrn=retrn; entry=false) at ../core/base/src/TApplication.cxx:1677; #37 0x00007f1751c07062 in TRint::Run (this=this; entry=0x55fecde5ddd0, retrn=retrn; entry=false) at ../core/rint/src/TRint.cxx:501; #38 0x000055feccf191cf in main (argc=<optimized out>, argv=0x7ffd9df81ae8) at ../main/src/rmain.cxx:84; ===========================================================. The lines below might hint at the cause of the crash. If you see question; marks as part of the stack trace, try to recompile with debugging information; enabled and export CLING_DEBUG=1 environment variable before running.; You may get help by asking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #7 0x00007f174bc8faac in TCling__GetObjectDecl (obj=0x55fed02b7470) at ../core/metacling/src/TCling.cxx:603; #8 0x00007f174bce6d72 in TClingCallbacks::tryFindROOTSpecialInternal (this=this; entry=0x55fece888730, R=..., S=S; entry=0x55fecdea0250) at ../core/metacling/src/TC",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12673:7859,optimiz,optimized,7859,https://root.cern,https://github.com/root-project/root/issues/12673,1,['optimiz'],['optimized']
Performance,OPT_CAPATH; * failed to load '/etc/grid-security/certificates/62c4a178.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KENETCA-ICA-2015.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f23888f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f23888f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-GridCA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustIGTFCA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustIGTFCA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ffc3d59b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustIGTFCA.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/84c78b97.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8dd53007.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustIGTFCA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ef7d3e44.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/84c78b97.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ef7d3e44.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/530f7122.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/9c979c2b.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceCA-2B.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/9c979c2b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/62c4a178.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:13431,load,load,13431,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,OPT_CAPATH; * failed to load '/etc/grid-security/certificates/82c2b224.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/InCommon-IGTF-Server-CA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d11f973e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ba240aa8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5f0dfc2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4339b4bc.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3cc00941.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/68aa9d51.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5168735f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KENETCA-ICA-2015.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-GridCA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KENETCA-ICA-2015.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-GridCA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/62c4a178.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KENETCA-ICA-2015.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f23888f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f23888f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-GridCA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustIGTFCA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTru,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:12181,load,load,12181,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,OPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/18700496.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5d9ea26d.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e732ef10.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/617ff41b.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58b08cb5.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e732ef10.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2f573f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/18700496.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/bd43b60c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certifica,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:23121,load,load,23121,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,OPT_CAPATH; * failed to load '/etc/grid-security/certificates/KENETCA-ICA-2015.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f23888f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f23888f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-GridCA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustIGTFCA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustIGTFCA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ffc3d59b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustIGTFCA.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/84c78b97.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8dd53007.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustIGTFCA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ef7d3e44.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/84c78b97.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ef7d3e44.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/530f7122.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/9c979c2b.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceCA-2B.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/9c979c2b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/62c4a178.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a603b,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:13523,load,load,13523,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,OPT_CAPATH; * failed to load '/etc/grid-security/certificates/KENETROOTCA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/COMODO-RSA-CA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/COMODO-RSA-CA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceCA-2B.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/COMODO-RSA-CA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Grid-FR.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d4c339cb.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d6325660.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/InCommon-IGTF-Server-CA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceCA-2B.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/InCommon-IGTF-Server-CA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d11f973e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/82c2b224.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/InCommon-IGTF-Server-CA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d11f973e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ba240aa8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5f0dfc2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4339b4bc.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3cc00941.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/ce,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:10913,load,load,10913,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,ORTS_WERROR_DATE_TIME; -- Performing Test C_SUPPORTS_WERROR_DATE_TIME - Success; -- Performing Test CXX_SUPPORTS_WERROR_DATE_TIME; -- Performing Test CXX_SUPPORTS_WERROR_DATE_TIME - Success; -- Performing Test C_SUPPORTS_WERROR_UNGUARDED_AVAILABILITY_NEW; -- Performing Test C_SUPPORTS_WERROR_UNGUARDED_AVAILABILITY_NEW - Failed; -- Performing Test CXX_SUPPORTS_WERROR_UNGUARDED_AVAILABILITY_NEW; -- Performing Test CXX_SUPPORTS_WERROR_UNGUARDED_AVAILABILITY_NEW - Failed; -- Performing Test CXX_SUPPORTS_MISSING_FIELD_INITIALIZERS_FLAG; -- Performing Test CXX_SUPPORTS_MISSING_FIELD_INITIALIZERS_FLAG - Success; -- Performing Test C_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG; -- Performing Test C_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG - Success; -- Performing Test CXX_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG; -- Performing Test CXX_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG - Success; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG - Success; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG - Success; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR - Failed; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG - Success; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL - Success; -- Performing Test C_WCOMMENT_ALLOW,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:3635,Perform,Performing,3635,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,1,['Perform'],['Performing']
Performance,"OS: Ubuntu 18.04.6; ROOT: 6.13.08 (binary); Make error; ROOT: 6.14.06 (binary); Make error; ROOT: 6.16.00 (binary): TMapFile: works, TApplication: failed; ```; Error in <TExMap::Add>: key 140702651440656 is not unique; *** Break *** segmentation violation; ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007ff7e1a5e337 in __GI___waitpid (pid=4208, stat_loc=stat_loc; entry=0x7ffd6b4ee5e8, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30; #1 0x00007ff7e19c9047 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149; #2 0x00007ff7e40dde83 in TUnixSystem::StackTrace() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16; #3 0x00007ff7e40e0874 in TUnixSystem::DispatchSignals(ESignals) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16; #4 <signal handler called>; #5 0x00007ff7dbd7bc73 in TClingCallFunc::SetArg(long) () from /home/koala/root/6.16.00.bin/lib/libCling.so; #6 0x00007ff7e3f89fef in TApplication::LoadGraphicsLibs() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16; #7 0x00007ff7e3f895bc in TApplication::InitializeGraphics() () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16; #8 0x00007ff7e3f8f54b in TApplication::TApplication(char const*, int*, char**, void*, int) () from /home/koala/root/6.16.00.bin/lib/libCore.so.6.16; #9 0x0000560cc64cfdde in main (); ===========================================================; The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007ff7dbd7bc73 in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13511#issuecomment-1710742916:651,optimiz,optimized,651,https://root.cern,https://github.com/root-project/root/issues/13511#issuecomment-1710742916,1,['optimiz'],['optimized']
Performance,"OS: Ubuntu 20.04.4. Only ROOT 6.28.04 works with the proposed ROOT-CONFIG. ROOT: 6.13.08 (binary); Compiling works, but missing libtinfo.so.5 for running. ; ```; huagen@ikp191:~/Codes/root_debug$ ./appdemo ; Fatal in <TROOT::InitInterpreter>: cannot load library libtinfo.so.5: cannot open shared object file: No such file or directory. ROOT: 6.14.06 (binary); Compiling works, but missing libtinfo.so.5 for running. ; ROOT: 6.16.00 (binary); Compiling works, but missing libtinfo.so.5 for running. ; ROOT: 6.18.04 (binary); Compiling works, but missing libtinfo.so.5 for running.; ROOT: 6.20.00 (binary); Compiling works, TMapFile works, but TApplication failed with error,; huagen@ikp191:~/Codes/root_debug$ ./appdemo ; ERROR in cling::CIFactory::createCI(): cannot extract standard library include paths!; Invoking:; x86_64-linux-gnu-g++-8 -O3 -DNDEBUG -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*++/p' -e '}'; Results was:; With exit code 0; *** Break *** segmentation violation; ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007fd1435d9c3a in __GI___wait4 (pid=47601, stat_loc=stat_loc; entry=0x7fffc08d2908, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27; #1 0x00007fd1435d9bfb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7fffc08d2908, options=options; entry=0) at waitpid.c:38; #2 0x00007fd143548f67 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172; #3 0x00007fd1444a57e0 in TUnixSystem::StackTrace() () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20; #4 0x00007fd1444a8244 in TUnixSystem::DispatchSignals(ESignals) () from /home/huagen/root/6.20.00.bin/lib/libCore.so.6.20; #5 <signal handler called>; #6 0x00007fd13fdbd1d8 in TCling::CallFunc_Factory() const () from /home/huagen/root/6.20.00.bin/lib/libCling.so; #7 0x0000",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13511#issuecomment-1710747993:250,load,load,250,https://root.cern,https://github.com/root-project/root/issues/13511#issuecomment-1710747993,1,['load'],['load']
Performance,"OT # Works fine if we have ROOT imported outside of foo; def foo(n):; import ROOT # Breaks if we import ROOT inside foo; return ROOT.TH1F(). with open('p.pkl', 'wb') as pkl:; pickle.dump(foo, pkl). # Distribute the payload among workers; from multiprocessing import Pool. def payload(n):; with open('p.pkl', 'rb') as pkl:; foo_unpickled = pickle.load(pkl); return foo_unpickled(n). with Pool(4) as p:; print(p.map(payload, range(4))); ```. So pickling a function with `import ROOT` in the body and using this in a multiprocessing environment causes a segfault with the attached stacktrace. The important part is again the following lines:. ```; #8 _Py_INCREF (op=0x0) at /usr/include/python3.8/object.h:459; #9 CPyCppyy::CreateScopeProxy (name=""TROOT"", parent=0x0) at /home/stefan/src/root-dev/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:656; #10 0x00007eff8858b32a in CPyCppyy::CreateScopeProxy (scope=3) at /home/stefan/src/root-dev/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:494; #11 0x00007eff8858b384 in CPyCppyy::BindCppObjectNoCast (address=0x7eff7bd44f20 <ROOT::Internal::GetROOT1()::alloc>, klass=klass; entry=3, flags=flags; entry=0) at /home/stefan/src/root-dev/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx:809; #12 0x00007eff8876f873 in (anonymous namespace)::AddToGlobalScope (klass=3, obj=<optimized out>, label=0x7eff8877d71a ""gROOT"") at /home/stefan/src/root-dev/bindings/pyroot/pythonizations/src/PyROOTWrapper.cxx:39; #13 PyROOT::Init () at /home/stefan/src/root-dev/bindings/pyroot/pythonizations/src/PyROOTWrapper.cxx:59; #14 0x00007eff8876f49e in PyInit_libROOTPythonizations3_8 () at /home/stefan/src/root-dev/bindings/pyroot/pythonizations/src/PyROOTModule.cxx:150; #15 0x00007eff8acf4f8f in _PyImport_LoadDynamicModuleWithSpec () from /usr/lib/libpython3.8.so.1.0; ```. [stacktrace.log](https://github.com/root-project/root/files/5501316/stacktrace.log). Edit: One more detail: We have to return a ROOT object in `foo`, so it's not the plain import.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6765#issuecomment-723066118:1487,optimiz,optimized,1487,https://root.cern,https://github.com/root-project/root/issues/6765#issuecomment-723066118,1,['optimiz'],['optimized']
Performance,OT-7462/roottest_root_meta_ROOT_7462_make/); - [projectroot.roottest.root.meta.evolution.version5.roottest_root_meta_evolution_version5_execNestedColl](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/51612/testReport/projectroot.roottest.root.meta.evolution/version5/roottest_root_meta_evolution_version5_execNestedColl/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_runpairs](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/51612/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_runpairs/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_perfstattest](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/51612/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_perfstattest/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_TooSmall](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/51612/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_TooSmall/); - [projectroot.roottest.root.treeformula.stl.roottest_root_treeformula_stl_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/51612/testReport/projectroot.roottest.root.treeformula/stl/roottest_root_treeformula_stl_make/); - [projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/51612/testReport/projectroot.roottest.root.treeformula/retobj/roottest_root_treeformula_retobj_make/); - [projectroot.roottest.root.meta.MakeProject.roottest_root_meta_MakeProject_examples](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/51612/testReport/projectroot.roottest.root.meta/MakeProject/roottest_root_meta_MakeProject_examples/); - [projectroot.roottest.root.meta.roottest_root_meta_runGetMissingDictionaries_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/51612/testReport/projectroot.roottest.root/meta/roottest_root_meta_runGetMissingDictionaries_auto/). And 2 mo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3236#issuecomment-454627604:4210,cache,cache,4210,https://root.cern,https://github.com/root-project/root/pull/3236#issuecomment-454627604,1,['cache'],['cache']
Performance,OT-G1.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Services.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DCAROOT-G1.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNLPGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Services.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/20b7db76.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IHEP-2013.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DCAROOT-G1.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IHEP-2013.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b93d6240.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/39d30eba.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b93d6240.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e7734335.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30351739.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/39d30eba.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30351739.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e7734335.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/61cd35bd.namespac,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:55443,load,load,55443,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,OT-debian10-i386/cxx14.; Running on pcepsft10.dyndns.cern.ch:/build/workspace/root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/111142/console).; ### Failing tests:; - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_cachedChain](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/111142/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_cachedChain/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_TestCache](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/111142/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_TestCache/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_TooSmall](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/111142/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_TooSmall/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_perfstattest](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/111142/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_perfstattest/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_TestMissCache](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/111142/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_TestMissCache/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_CacheRange](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/111142/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_CacheRange/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_LastCluster](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/111142/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_LastCluster/); - [projectroot.roottest.root.tree.cloning.roottes,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7586#issuecomment-802031726:1015,cache,cache,1015,https://root.cern,https://github.com/root-project/root/pull/7586#issuecomment-802031726,1,['cache'],['cache']
Performance,"OT::TGenericClassInfo::CreateRuleSet (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>, vect=..., ProcessReadRules=true) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TGenericClassInfo.cxx:319; #40 0x00002b4bd1cd26bd in ROOT::TGenericClassInfo::GetClass (this=0x2b4bf40eb840 <ROOT::GenerateInitInstanceLocal(reco::btag::TrackData const*)::instance>) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TGenericClassInfo.cxx:286; #41 0x00002b4bd1cac20b in TClass::GetClass (name=0xc24d320 ""reco::btag::TrackData"", load=true, silent=false, hint_pair_offset=0, hint_pair_size=0) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TClass.cxx:3039; #42 0x00002b4bd1cabf33 in TClass::GetClass (name=0xc24d320 ""reco::btag::TrackData"", load=true, silent=false) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TClass.cxx:2970; #43 0x00002b4bf68090a5 in ?? (); #44 0x0000000000000001 in ?? (); #45 0x00000001951b6c50 in ?? (); #46 0x00007ffd951b6840 in ?? (); #47 0x00007ffd951b6948 in ?? (); #48 0x00007ffd951b6910 in ?? (); #49 0x00002b4bd18990fd in WrapperCall (method=47604637311029, nargs=140727105054640, args_=0x7ffd951b6760, self=0x7ffd951b6750, result=0x7ffd951b6748) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:774; ===========================================================; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:26128,load,load,26128,https://root.cern,https://github.com/root-project/root/issues/12771,1,['load'],['load']
Performance,OUGH_FLAG - Success; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG - Success; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG - Success; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR - Failed; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG - Success; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL - Success; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP - Failed; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG - Success; -- Performing Test CXX_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test CXX_SUPPORTS_MISLEADING_INDENTATION_FLAG - Success; -- Performing Test C_SUPPORTS_FNO_FUNCTION_SECTIONS; -- Performing Test C_SUPPORTS_FNO_FUNCTION_SECTIONS - Success; -- Performing Test C_SUPPORTS_FFUNCTION_SECTIONS; -- Performing Test C_SUPPORTS_FFUNCTION_SECTIONS - Success; -- Performing Test CXX_SUPPORTS_FFUNCTION_SECTIONS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:4479,Perform,Performing,4479,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,1,['Perform'],['Performing']
Performance,"Object_VectorcallTstate (kwnames=0x0, nargsf=<optimized out>, args=0x7ffa51075200, callable=0x7ffa51072dd0, tstate=0x55b069159680) at /usr/local/src/conda/python-3.10.4/Include/cpython/abstract.h:114; #95 PyObject_Vectorcall (kwnames=0x0, nargsf=<optimized out>, args=0x7ffa51075200, callable=0x7ffa51072dd0) at /usr/local/src/conda/python-3.10.4/Include/cpython/abstract.h:123; #96 call_function (kwnames=0x0, oparg=<optimized out>, pp_stack=<synthetic pointer>, trace_info=0x7fff519cced0, tstate=<optimized out>) at /usr/local/src/conda/python-3.10.4/Python/ceval.c:5867; #97 _PyEval_EvalFrameDefault (tstate=<optimized out>, f=<optimized out>, throwflag=<optimized out>) at /usr/local/src/conda/python-3.10.4/Python/ceval.c:4181; #98 0x000055b068124b92 in _PyEval_EvalFrame (throwflag=0, f=0x7ffa51075090, tstate=0x55b069159680) at /usr/local/src/conda/python-3.10.4/Include/internal/pycore_ceval.h:46; #99 _PyEval_Vector (tstate=0x55b069159680, con=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.4/Python/ceval.c:5065; #100 0x000055b068124ad7 in PyEval_EvalCode (co=0x7ffa50ee45b0, globals=0x7ffa50ee0500, locals=<optimized out>) at /usr/local/src/conda/python-3.10.4/Python/ceval.c:1134; #101 0x000055b06812bc1f in builtin_exec_impl (module=<optimized out>, locals=0x7ffa50ee0500, globals=0x7ffa50ee0500, source=0x7ffa50ee45b0) at /usr/local/src/conda/python-3.10.4/Python/bltinmodule.c:1003; #102 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at /usr/local/src/conda/python-3.10.4/Python/clinic/bltinmodule.c.h:371; #103 0x000055b06807e5bf in cfunction_vectorcall_FASTCALL (func=0x7ffa5132ca90, args=0x7ffa510c5cd8, nargsf=<optimized out>, kwnames=<optimized out>) at /usr/local/src/conda/python-3.10.4/Objects/methodobject.c:430; #104 0x000055b0680733ac in do_call_core (kwdict=0x7ffa50ee05c0, callargs=0x7ffa510c5cc0, func=0x7ffa5132ca90, trace_info=0x",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10676:17405,optimiz,optimized,17405,https://root.cern,https://github.com/root-project/root/issues/10676,5,['optimiz'],['optimized']
Performance,"Oh, and I think with `MapV()` being so close to `Map()`, we can make `Map()` a wrapper of `MapV()` and expect (hopefully) the compiler to optimize away the dummy `nItems` calculation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8210#issuecomment-844936847:138,optimiz,optimize,138,https://root.cern,https://github.com/root-project/root/pull/8210#issuecomment-844936847,1,['optimiz'],['optimize']
Performance,"Ok I was using Release, but I had quite some noise in the timings even though they were all with a warm cache and the various cpu throttling things disabled. It might very well be that averaging over many runs I'll notice some speedup too",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3216#issuecomment-456769635:104,cache,cache,104,https://root.cern,https://github.com/root-project/root/pull/3216#issuecomment-456769635,1,['cache'],['cache']
Performance,"Ok yes, this is exactly the same underlying issue as ROOT-9487 mentioned above, but for single-thread runs this time, so the workaround mentioned in ROOT-9487 does not work (and indeed adding `ROOT.EnableImplicitMT()` at the top of the repro gets rid of the warnings). The issue: `Snapshot` adds the output tree as a clone of the input chain, because the output tree needs to be informed when the addresses of the input branches change (as it happens when the chain switches from one tree to the next). Now, when performing the address updates, the input chain might complain _once per active branch_ if it does not find a corresponding branch in the output tree. I don't know how to solve this elegantly. The only idea I have is an ad-hoc temporary silencing of these warnings at the point at which an input chain in RDF switches files. @pcanal might have a better proposal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7727#issuecomment-817874049:513,perform,performing,513,https://root.cern,https://github.com/root-project/root/issues/7727#issuecomment-817874049,1,['perform'],['performing']
Performance,"Ok, I changed the ""event loop"" to roughly the following:; ```c++; double number = 0;; for (int b = 0; b < numBranches; b++) {; std::string name = ""b"" + std::to_string(b);; tree->Branch(name.c_str(), &number);; }. std::mt19937 generator(t);; std::poisson_distribution<> poisson(100);; for (long i = 0; i < numEntries; i++) {; int iterations = poisson(generator);; number = 0;; for (int j = 0; j < iterations; j++) {; number += std::log(j);; }. tree->Fill();; }; ```; (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):; ```; ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58; ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00; ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36; ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:; ```; ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02; ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51; ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79; ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1820644870:628,perform,performance,628,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1820644870,4,"['perform', 'queue']","['performance', 'queue']"
Performance,"Ok, got it. The reproducer from the linked issue is compiled via; ```; g++ -g -o repro.out repro.cpp `root-config --cflags --libs; ```. Which includes linking to some libraries that are not in [gIgnoredPCMNames](https://github.com/root-project/root/blob/1d5baf0bc77c0abb0ac7ffc8d549f8a7875d03e9/core/metacling/src/TCling.cxx#L1946). That's why `LoadPCM` is triggered in the first place. If I compile the reproducer with; ```; g++ -o repro.out repro.cpp -I[...] -L[...] -lCore -lRIO; ```; Then I don't get the segfault either. So, knowing this, where should I place this test? I guess somewhere that can link to `RIO` but also some other library like `libNet` or `libROOTDataFrame`. Preferably it would still be some library that gets always built on all platforms so we are sure to get good coverage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13692#issuecomment-1730106028:345,Load,LoadPCM,345,https://root.cern,https://github.com/root-project/root/pull/13692#issuecomment-1730106028,1,['Load'],['LoadPCM']
Performance,"Ok, indeed SOFIE gets loaded because of the Experimental namespace, I guess. I do not see it with your patch. I will try to do a full build on CVMFS with it applied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1611035947:22,load,loaded,22,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1611035947,1,['load'],['loaded']
Performance,"Ok, loading the printers fails as expected during release builds. Let's try a debug build. @phsft-bot build with flags -DCMAKE_BUILD_TYPE=RelWithDebInfo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3633#issuecomment-479467395:4,load,loading,4,https://root.cern,https://github.com/root-project/root/pull/3633#issuecomment-479467395,1,['load'],['loading']
Performance,"Okay, CMake tutorial time... You basically have 2 ways in my mind to solve this nicely.; 1. Switch to using the `VDT::VDT` library during the build.; - For this you need to introduce a global imported library for `builtin_vdt`. Something like:. ```diff; diff --git a/cmake/modules/SearchInstalledSoftware.cmake b/cmake/modules/SearchInstalledSoftware.cmake; index 7947fddfc0..7ad5fd91af 100644; --- a/cmake/modules/SearchInstalledSoftware.cmake; +++ b/cmake/modules/SearchInstalledSoftware.cmake; @@ -1678,6 +1678,12 @@ if(vdt OR builtin_vdt); DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT extra-headers); set(vdt ON CACHE BOOL ""Enabled because builtin_vdt enabled (${vdt_description})"" FORCE); set_property(GLOBAL APPEND PROPERTY ROOT_BUILTIN_TARGETS VDT); + add_library(VDT::VDT UNKNOWN IMPORTED GLOBAL); + set_target_properties(VDT::VDT; + PROPERTIES; + IMPORTED_LOCATION ""${VDT_LIBRARIES}""; + INTERFACE_INCLUDE_DIRECTORIES ""${VDT_INCLUDE_DIRS}""; + ); endif(); endif(); ```. - At this point you could simplify the build configuration to:. ```diff; diff --git a/math/vecops/CMakeLists.txt b/math/vecops/CMakeLists.txt; index 09fde3eb40..e15b5ea186 100644; --- a/math/vecops/CMakeLists.txt; +++ b/math/vecops/CMakeLists.txt; @@ -8,10 +8,6 @@; # CMakeLists.txt file for building ROOT math/vecops package; ############################################################################; ; -if(builtin_vdt); - link_directories(${CMAKE_LIBRARY_OUTPUT_DIRECTORY}); -endif(); -; ROOT_STANDARD_LIBRARY_PACKAGE(ROOTVecOps; HEADERS; ROOT/RVec.hxx; @@ -24,13 +20,7 @@ ROOT_STANDARD_LIBRARY_PACKAGE(ROOTVecOps; ); ; if(builtin_vdt OR vdt); - target_include_directories(ROOTVecOps PRIVATE ${VDT_INCLUDE_DIRS} INTERFACE $<BUILD_INTERFACE:${VDT_INCLUDE_DIRS}>); -endif(); -; -if(builtin_vdt); - target_link_libraries(ROOTVecOps PRIVATE ${VDT_LIBRARIES}); -elseif(vdt); - target_link_libraries(ROOTVecOps PUBLIC ${VDT_LIBRARIES}); + target_link_libraries(ROOTVecOps PUBLIC VDT::VDT); endif(); ; if(MSVC); ```. - Fi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11797#issuecomment-1339057027:621,CACHE,CACHE,621,https://root.cern,https://github.com/root-project/root/issues/11797#issuecomment-1339057027,1,['CACHE'],['CACHE']
Performance,"Okay, I just noticed that you wrote you cannot reproduce on lxplus, so I'm not doing something entirely wrong. The two most likely causes are that you have some local `.rootrc` file (try with `root -n`), or that both lxplus and me are missing some optional dependencies that activate some problematic loading. From CMake, I get: `asimage builtin_afterimage builtin_clang builtin_cling builtin_ftgl builtin_gl2ps builtin_glew builtin_llvm builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix exceptions gdml http imt mathmore mlp minuit2 mysql opengl pgsql pyroot pythia8 roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd` Maybe you have some additional packages here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-899445642:301,load,loading,301,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-899445642,1,['load'],['loading']
Performance,"Okay, here's the version with `std::initializer_list`, which I find quite clean and neat but is slower than `master` (after #9342 with `-mllvm -optimize-regalloc=0`):. | | `master` | `std::initializer_list` | `std::initializer_list &&` (is that allowed?!) |; | --- | --- | --- | --- |; | `-O0` | 8.9s | 9.0s | 8.3s |; | `-O1` | 12.5s | 13.5s | 17s |. So not sure if the change is really worth it, and haven't checked stack usage either.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9329#issuecomment-984670318:144,optimiz,optimize-regalloc,144,https://root.cern,https://github.com/root-project/root/pull/9329#issuecomment-984670318,1,['optimiz'],['optimize-regalloc']
Performance,"Okay, something is weird here: The test now fails down to 6.22, maybe even more since I didn't test 6.20. But differently, here's a backtrace from 6.22:; ```; 2018: #0 0x00007f983e185eca llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/home/jhahnfel/ROOT/v6-22-00-patches/build/lib/libCling.so+0x2693eca) ; 2018: #1 0x00007f983c03b341 (/home/jhahnfel/ROOT/v6-22-00-patches/build/lib/libCling.so+0x549341) ; 2018: #2 0x00007f983c03b7af (/home/jhahnfel/ROOT/v6-22-00-patches/build/lib/libCling.so+0x5497af) ; 2018: #3 0x00007f983c61b3cc clang::ASTReader::PassInterestingDeclsToConsumer() (/home/jhahnfel/ROOT/v6-22-00-patches/build/lib/libCling.so+0xb293cc) ; 2018: #4 0x00007f983c5f2336 clang::ASTReader::FinishedDeserializing() (.part.2293) ASTReader.cpp:0:0 ; 2018: #5 0x00007f983c6ed089 clang::MultiplexExternalSemaSource::FinishedDeserializing() (/home/jhahnfel/ROOT/v6-22-00-patches/build/lib/libCling.so+0xbfb089) ; 2018: #6 0x00007f983dcc138f clang::DeclContext::LoadLexicalDeclsFromExternalStorage() const (/home/jhahnfel/ROOT/v6-22-00-patches/build/lib/libCling.so+0x21cf38f) ; 2018: #7 0x00007f983dcc1445 clang::DeclContext::decls_begin() const (/home/jhahnfel/ROOT/v6-22-00-patches/build/lib/libCling.so+0x21cf445) ; 2018: #8 0x00007f983be59a41 ROOT::TMetaUtils::CheckIOConstructor(clang::CXXRecordDecl const*, char const*, clang::CXXRecordDecl const*, cling::Interpreter const&) (/home/jhahnfel/ROOT/v6-22-00-patches/build/lib/libCling.so+0x367a41) ; 2018: #9 0x00007f983bef5821 TClingClassInfo::HasDefaultConstructor(bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*) const (.part.271) TClingClassInfo.cxx:0:0 ; 2018: #10 0x00007f983befb564 TClingClassInfo::New(void*, ROOT::TMetaUtils::TNormalizedCtxt const&) const (/home/jhahnfel/ROOT/v6-22-00-patches/build/lib/libCling.so+0x409564) ; 2018: #11 0x00007f984223a62f TClass::NewObject(void*, TClass::ENewType) const (/home/jhahnfel/ROOT/v6-22-00-patches/build/lib/libCore.so+0x28562f) ; 2018: #12 0x00",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9543#issuecomment-1010259909:969,Load,LoadLexicalDeclsFromExternalStorage,969,https://root.cern,https://github.com/root-project/root/issues/9543#issuecomment-1010259909,1,['Load'],['LoadLexicalDeclsFromExternalStorage']
Performance,"Okay, those cache variables seem to have been a red herring. They don't come from CMake after all, but from LLVM instead. https://github.com/llvm-mirror/llvm/blob/master/cmake/modules/CheckAtomic.cmake. So we shouldn't rely on these after all in the main ROOT configuration. (At least I think not...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4561#issuecomment-544884116:12,cache,cache,12,https://root.cern,https://github.com/root-project/root/pull/4561#issuecomment-544884116,1,['cache'],['cache']
Performance,Old code can be always activated again - I only add new method to handle special situation when there is no inner surface in pgon. Plus add small optimization.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5050#issuecomment-590416917:146,optimiz,optimization,146,https://root.cern,https://github.com/root-project/root/pull/5050#issuecomment-590416917,1,['optimiz'],['optimization']
Performance,"On Linux, this type of implementation was not correct when there was a lot of 'cached' RAM memory. We had to subtract cache by hand. But it might be that in Windows, this subtraction is already done behind the scenes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7196#issuecomment-2301466690:79,cache,cached,79,https://root.cern,https://github.com/root-project/root/issues/7196#issuecomment-2301466690,2,['cache'],"['cache', 'cached']"
Performance,"On Mac, an extra ""ProcessEvent"" is needed to flush the buffers. It can not be included in Update() (many long discussions with Timur about that. I do not remember the details but that was the conclusion). As very often Update() goes with Modified(), the idea was to group them and on Mac perform the extra ProcessEvent. That's the best we can do to allow the user code to be the same on different machines.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14671#issuecomment-1953735545:288,perform,perform,288,https://root.cern,https://github.com/root-project/root/pull/14671#issuecomment-1953735545,1,['perform'],['perform']
Performance,On `file:\\` I hesitate on whether this is a user request to use the posix interface no matter what or whether the performance difference between `posix-eos` and `xrootd-eos` is always so great that we should make the right choice for the user.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644#issuecomment-1309008527:115,perform,performance,115,https://root.cern,https://github.com/root-project/root/pull/11644#issuecomment-1309008527,1,['perform'],['performance']
Performance,"On an extreme example:; ```; 15,272,928 entries; 152,739 baskets (and as many clusters); 10,000 Actual TTreeCache buffer size (minimum allowed); 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size); 400 bytes per baskets; 100 entries per baskets (i.e. per clusters); 25 number of cluster per TTreeCache buffer for single branch with default size.; 1 float per entry (reading a single branch).; ```. This repairs the performance of a simple `TTree::Draw` of a single branch; from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example. This fixes #12649.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12650:440,perform,performance,440,https://root.cern,https://github.com/root-project/root/pull/12650,3,['perform'],['performance']
Performance,"On linux vector with custom allocator do indeed have a different layout that vector with the default allocator, The reason is that std::vector is that case ""starts' with an embedded instance of the allocator ... I am guessing that on MacOS the allocator is at the end instead .... I corrected the behavior of TStreamerInfo to not use the 'vector-shortcut' in the case of vector with custom allocator. This makes is go somewhat slower but at least works correctly. Since all vectors with the same custom allocator have the same layout, we could recover the performance by embedded support for VecOps::TAdoptAllocator directly in TStreamerInfo's actions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1707#issuecomment-371299491:556,perform,performance,556,https://root.cern,https://github.com/root-project/root/pull/1707#issuecomment-371299491,1,['perform'],['performance']
Performance,"On linux, the compiler flags are cache variables, i.e. they can be; overridden by the user. On Mac, that wasn't the case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5220:33,cache,cache,33,https://root.cern,https://github.com/root-project/root/pull/5220,1,['cache'],['cache']
Performance,"On macOS 13.3 with Xcode 14.3, vector construction begin begin/end iterators -to-dofferent-type (here, casting char to UniChar aka unsigned short) fails in optimized mode for seemingly dubious reasons (i.e. likely an optimizer bug). Short-circuit this by returning 0 early for an extent of 0 characters - which is the only case where this construction (i.e. end==begin) is known to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12736:156,optimiz,optimized,156,https://root.cern,https://github.com/root-project/root/pull/12736,2,['optimiz'],"['optimized', 'optimizer']"
Performance,"On my workstation:. ```; original C++: ~1.6s; original Python: ~0.54s; C++ without jitting: ~0.38s; ```. As runtimes scale with the number of events, the absolute difference between C++ and Python will be much larger for larger datasets. The original C++ code with jitting will also perform well on larger datasets, because the jitting time is just a constant offset but does not scale with the number of events.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7273#issuecomment-784411950:283,perform,perform,283,https://root.cern,https://github.com/root-project/root/issues/7273#issuecomment-784411950,1,['perform'],['perform']
Performance,"On the jenkins build node the error appears likely because of '-Dsoversion=""On""' and the following. One test that fails is 'runload.C' in roottest/root/treeformula/sync. There we have (essentially):; ```; {; gROOT->ProcessLine("".L loadcode.C+"");; ...; TTree *t; _file0->GetObject(""t"",t);; }; ```; The use of TTree means that before executing the script libTree is laoded.; During the execution of CompileMacro, the depend library are loaded (see for example the collection line [3363](https://github.com/root-project/root/blob/f32d06e70ce357b53050a25eecd5186859021e30/core/base/src/TSystem.cxx#L3363) .; And in this case the result is:; ```; loadcode_C.so libTree.6.21.01.so libTree.so; ```; which coupled with the ***new*** feature that gSystem->Load first dlclose the library then reopen it means that libTree is dlclose 2 or 3 times (one for both the versioned and unversioned version). This behavior is a **very significant** departure from the existing behavior (where, because the libraries were added to the link line, the library were never reloaded). Reloading arbitrary depend library is never a good idea since they (are likely to) include static object that may do things that are **essential** to do only once (initialization, connection to db). Technically CompileMacro could (as it does elsewhere) first check if the library is loaded. But still several questions:. 1) Why is libTree listed twice in the list of depend library?. 2) When should gSystem->Load automatically reload a library, if ever?. @Axel-Naumann @vgvassilev opinions?. PS. Even-though the set of test would be fixed by updating gSystem->Load and/or CompileMacro, the PR is still likely necessary for the case where CompileMacro generates a pcm (and thus need to support reload) or the case where the user explicitly unload a library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5420#issuecomment-618042721:231,load,loadcode,231,https://root.cern,https://github.com/root-project/root/pull/5420#issuecomment-618042721,6,"['Load', 'load']","['Load', 'loadcode', 'loaded']"
Performance,"Once #13370 is merged, the only remaining thing to do for this PR would be to disable the windows tests, as it is unclear why windows corrupts the tree name strings as seen in the failed tests:; ```; Error in <TChain::LoadTree>: Cannot find tree with name áÐ-[NON-XML-CHAR-0xF]d╩~ in file C:\build\workspace\root-pullrequests-build\build\tutorials/tmva/RBatchGenerator_filters_vectors_hvector.root; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13302#issuecomment-1665795587:218,Load,LoadTree,218,https://root.cern,https://github.com/root-project/root/pull/13302#issuecomment-1665795587,1,['Load'],['LoadTree']
Performance,"One addition w.r.t. to the previous comment that may also be relevant. If I try the modified example where each thread calls `CompileMacro` on a separate library without the patch of this PR, I still get this kind of stacktrace; ```; #14 0x00007fb2d4d9322f in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/vpadulan/programs/rootproject/rootinstall/add-locks-testing/lib/libCling.so; #15 0x00007fb2d4d7b230 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/vpadulan/programs/rootproject/rootinstall/add-locks-testing/lib/libCling.so; #16 0x00007fb2d4a6d17a in HandleInterpreterException (metaProcessor=0x2929eb0, input_line=0x7fb2b8019840 "".L load_unload_helpers_0_cpp.so"", compRes=; 0x7fb2bd9f975c: cling::Interpreter::kSuccess, result=0x0) at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:2436; #17 0x00007fb2d4a814c6 in TCling::LoadFile (this=0x1afbf90, path=0x7fb2b8000bd0 ""load_unload_helpers_0_cpp.so"") at /home/vpadulan/programs/rootproject/rootsrc/core/metacling/src/TCling.cxx:7432; #18 0x0000000000406686 in load_unload (n=0) at repro_onelibperthread.cpp:41; ```. That shows the data race in `TCling::LoadFile`, so that is always present even when each thread works on its library. Attaching the full stack traces from all threads to this comment ; [repro_onelibperthread_stacktraces.txt](https://github.com/root-project/root/files/12218151/repro_onelibperthread_stacktraces.txt)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13348#issuecomment-1658937784:977,Load,LoadFile,977,https://root.cern,https://github.com/root-project/root/pull/13348#issuecomment-1658937784,2,['Load'],['LoadFile']
Performance,One pending question (beside whether this is performant enough) is whether to keep the old TRWSpinLock and the new TRWSpinLock (Reentrant) or to have them (as in this MR) the same.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/596:45,perform,performant,45,https://root.cern,https://github.com/root-project/root/pull/596,1,['perform'],['performant']
Performance,"One potential reason - huge latency for simple request of 4 bytes. Just submitting simple request:; ```; time curl -ik https://cernbox.cern.ch/remote.php/dav/public-files/1Cy1HIf03Ca76Dm/test_ntuples_200123.root -H ""Range: bytes=0-4,100-104"" --output -; ```. Gives me: `1.423 sec` total time.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13018#issuecomment-1592003325:28,latency,latency,28,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592003325,1,['latency'],['latency']
Performance,"One use case for this is to to add custom object when we loading a compiled Keras model in Pymva. For example if the model is compiled with metrics containing users functions, then these functions must be defined also when loading the model inside MethodPyKers. . A concrete example (from Tommaso Diotalevi) : ; define precision and recall functions:. ```; def precision(y_true, y_pred): #taken from old keras source code; true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))); predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1))); precision = true_positives / (predicted_positives + K.epsilon()); return precision; def recall(y_true, y_pred): #taken from old keras source code; true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1))); possible_positives = K.sum(K.round(K.clip(y_true, 0, 1))); recall = true_positives / (possible_positives + K.epsilon()); return recall; ```. compile the model : . ```; model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy',precision,recall]); ```. When loading the model in `keras.load_model` the user provided functions must be known and passed as a dictionary, for example: . ```; load_model_custom_objects = {'precision': precision, 'recall': recall}. model = keras.models.load_model('model_dense.h5', custom_objects=load_model_custum_objects); ```. This PR provdes a way to the user to give Python code (e.g. defining the users functions and ; the variable `load_model_custom_object` ) that then can be executed in MethodPyKeras in its initialization.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5632:57,load,loading,57,https://root.cern,https://github.com/root-project/root/pull/5632,4,"['load', 'optimiz']","['loading', 'optimizer']"
Performance,"Optimization for `RNTupleDescriptor::GetNEntries()`: Once the cluster descriptor is constructed, all the cluster summaries must have been added. From the cluster summaries, we know the cluster event ranges. So we know the number of events of the ntuple and can cache it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9662:0,Optimiz,Optimization,0,https://root.cern,https://github.com/root-project/root/pull/9662,2,"['Optimiz', 'cache']","['Optimization', 'cache']"
Performance,Optimizations for TBufferMerger and parallel I/O in general,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/666:0,Optimiz,Optimizations,0,https://root.cern,https://github.com/root-project/root/pull/666,1,['Optimiz'],['Optimizations']
Performance,Optimize RAttrBase and RAttrValue classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8483:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/8483,1,['Optimiz'],['Optimize']
Performance,Optimize RooAbsCollection::containsInstance for RooArgSet,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9417:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/9417,1,['Optimiz'],['Optimize']
Performance,Optimize Rtypes.h include,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5791:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/5791,1,['Optimiz'],['Optimize']
Performance,Optimize TPrincipal::AddRow function,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6630:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/6630,1,['Optimiz'],['Optimize']
Performance,Optimize TPrincipal::AddRow function since it is reported that is causing a significative time in CMS reconstruction. . Move divisions outside loop and use directly access to internal TVector and TMatrix elements.; In case data are not stored in the class the gain in the loop that is adding the row has been measured to be a factor of 10 for a data of 100 dimension and 100000 points,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6630:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/6630,1,['Optimiz'],['Optimize']
Performance,Optimize call to GetBasket(fWriteBasket),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2089:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/2089,1,['Optimiz'],['Optimize']
Performance,Optimize core includes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5826:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/5826,1,['Optimiz'],['Optimize']
Performance,Optimize gui includes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5824:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/5824,1,['Optimiz'],['Optimize']
Performance,Optimize hist/garf3d/net includes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5825:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/5825,1,['Optimiz'],['Optimize']
Performance,Optimize includes in roofit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5540:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/5540,1,['Optimiz'],['Optimize']
Performance,Optimize math includes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5821:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/5821,1,['Optimiz'],['Optimize']
Performance,Optimize roofit includes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5822:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/5822,1,['Optimiz'],['Optimize']
Performance,Optimize roofit includes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5542:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/5542,1,['Optimiz'],['Optimize']
Performance,Optimize tmva includes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5820:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/5820,1,['Optimiz'],['Optimize']
Performance,Optimize tree/io includes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5823:0,Optimiz,Optimize,0,https://root.cern,https://github.com/root-project/root/pull/5823,1,['Optimiz'],['Optimize']
Performance,Optimized some TMVA tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/435:0,Optimiz,Optimized,0,https://root.cern,https://github.com/root-project/root/pull/435,1,['Optimiz'],['Optimized']
Performance,"Original message of upstream commit by Richard Smith, https://github.com/llvm/llvm-project/commit/61c7a9140b:; ```; Commit to a primary definition for a class when we load its first; member. Previously, we wouldn't do this if the first member loaded is within a; definition that's added to a class via an update record, which happens; when template instantiation adds a class definition to a declaration; that was imported from an AST file. This would lead to classes having member functions whose getParent; returned a class declaration that wasn't the primary definition, which; in turn caused the vtable builder to build broken vtables. I don't yet have a reduced testcase for the wrong-code bug here, because; the setup required to get us into the broken state is very subtle, but; have confirmed that this fixes it.; ```. This fixes an assertion in `CodeGenFunction::EmitCXXDestructorCall()`:; ```; Assertion `ThisTy->getAsCXXRecordDecl() == DtorDecl->getParent() && ""Pointer/Object mixup""' failed.; ```; which was already seen during the upgrade to LLVM 13 in one tutorial on CentOS 8 and ""solved"" by commit ffe867985b (""Relax assertion on generating destructor call""). Due to the nature of this problem, the assertion failure went away with unrelated changes so I reverted the change in 2b997add1d. Now the problem comes back with the upgrade to LLVM 16 and also in master when trying to enable the RBatchGenerator tutorials in https://github.com/root-project/root/pull/13302, both on macOS this time. Luckily, the underlying cause was properly fixed in upstream LLVM just last week, so backport that commit. FYI @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13370:167,load,load,167,https://root.cern,https://github.com/root-project/root/pull/13370,2,['load'],"['load', 'loaded']"
Performance,"Original title: ""TF1 and TFitResultPtr do not serialise correctly pickle, and this is an issue with Python multiprocessing"". ### Check duplicate issues. - [X] Checked for duplicates. ### Description. TF1 and TFitResultPtr do not serialise correctly with pickle. This causes issues with multiprocessing in python as well as distributed execution, e.g. with DistRDF. ### Reproducer. One can see with the reproducer below that:; - The fit succeeds and the result pointer is sane if nothing is pickled and depickled; - The fit fails if the function is pickled and depickled; - The fit result pointer is not sane any more if pickled and then depickled. ```python; import ROOT; import pickle. def SerialiseDeserialise(obj):; return pickle.loads(pickle.dumps(obj)). h = ROOT.TH1F(""myHist"", ""myTitle"", 64, -4, 4); h.FillRandom(""gaus""); f1 = ROOT.TF1(""f1"", ""gaus""); f1_d = SerialiseDeserialise(f1). res = h.Fit(f1, ""S""); print (""Status is "", res.Status()). # Check fit with de-serialised TF1; res = h.Fit(f1_d, ""S""); print (""Status is "", res.Status()). # Check de-serialised result ptr; res_d = SerialiseDeserialise(res); print (""Status is "", res_d.Status()); ```. ### ROOT version. master (I suspect all). ### Installation method. from sources. ### Operating system. MacOS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16184:733,load,loads,733,https://root.cern,https://github.com/root-project/root/issues/16184,1,['load'],['loads']
Performance,"Originally, the changes in this branch avoided the unload/load cycle for the `.x` command, if the timestamp of a file has not changed. Due to potential problems with static variable initialization, this behavior is not finally part of this PR. Other than that, this branch includes several improvements:; - General `MetaSema.cpp` code cleanup.; - `.x` now has a list of (fallback) function names that we will try to call, in order. This makes it possible to add alternate entry points for a macro that are independent from the filename, and therefore immune to file renaming.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4465:58,load,load,58,https://root.cern,https://github.com/root-project/root/pull/4465,1,['load'],['load']
Performance,"Other general comments:. 1. I know we discussed this already, but I can't remember the full discussion, sorry: why is it better to create column reader prototypes upfront rather than doing so on-demand? in particular, what is the expensive operation that we perform less times?. 2. Given that the last commits change the logic of the previous ones drastically, this PR might be a good candidate for a squash on merge or at least some of the commits are good candidates to be squashed together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6700#issuecomment-797501291:258,perform,perform,258,https://root.cern,https://github.com/root-project/root/pull/6700#issuecomment-797501291,1,['perform'],['perform']
Performance,"Otherwise `libcppyy` and `libcppyy_backend` are generated with the`.dylib` suffix on OSX. This causes a crash when importing cppyy, since it tries to load `libcppyy_backend.so` using ctypes. Thank you @amadio for the suggestion of setting `CMAKE_SHARED_LIBRARY_SUFFIX`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3282:150,load,load,150,https://root.cern,https://github.com/root-project/root/pull/3282,1,['load'],['load']
Performance,Otherwise tests run concurrently can write on each other's feet.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6121:20,concurren,concurrently,20,https://root.cern,https://github.com/root-project/root/pull/6121,3,['concurren'],['concurrently']
Performance,Our use case requires optimization level 3 and disabled pointer checks. Therefore Fons asked me to send this PR.; Please see the following discussion:; https://root-forum.cern.ch/t/jit-performance-issue/38555. Commit based on; https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/optlevel2_forced.diff,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6038:22,optimiz,optimization,22,https://root.cern,https://github.com/root-project/root/pull/6038,2,"['optimiz', 'perform']","['optimization', 'performance-issue']"
Performance,Out of curiosity what is the symbols that leads to the loading of the 15 spurrious modules in the hsimple case?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6190#issuecomment-674175440:55,load,loading,55,https://root.cern,https://github.com/root-project/root/pull/6190#issuecomment-674175440,1,['load'],['loading']
Performance,"Output lines are in wrong order when running CTest on Windows x64, as shown below:; ```; 1397: -- BEGIN TEST OUTPUT --; 1397:; 1397: Processing C:/Users/bellenot/git/roottest/root/meta/runInterpreterValue.C...; 1397: WithDtor(): 1; 1397: Ident: IAmWithDtor!; 1397: Now deleting TInterpreterValue; 1397: ~WithDtor() 0; 1397: Now all WithDor should be gone; we have 0 left; 1397: About to return a WithDtor; 1397:; 1397: -- END TEST OUTPUT --; 1397: -- BEGIN OUTDIFF OUTPUT --; 1397: --- C:/Users/bellenot/git/roottest/root/meta/InterpreterValue.ref Tue Jul 13 10:19:19 2021; 1397: +++ C:/Users/bellenot/build/x64/release/roottest/root/meta/roottest-root-meta-runInterpreterValue-auto.log Mon Feb 21 15:23:36 2022; 1397: @@ -1,7 +1,7 @@; 1397:; 1397: WithDtor():1; 1397: -AbouttoreturnaWithDtor; 1397: Ident:IAmWithDtor!; 1397: NowdeletingTInterpreterValue; 1397: ~WithDtor()0; 1397: NowallWithDorshouldbegone;wehave0left; 1397: +AbouttoreturnaWithDtor; 1397:; 1397: -- END OUTDIFF OUTPUT --; 1397: CMake Error at C:/Users/bellenot/build/x64/release/RootTestDriver.cmake:254 (message):; 1397: compare 'stdout' error: 1; 1397:; 1397:; 1/1 Test #1397: roottest-root-meta-runInterpreterValue-auto ...***Failed 0.56 sec; ```; The output is correct, but the line order is wrong (i.e. `AbouttoreturnaWithDtor` is at the wrong position).; This is related to the issue #9809, and is due to the `-O1` optimization flag in Cling (`clingArgsStorage.push_back(""-O1"");` in `TCling.cxx`)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9944:1390,optimiz,optimization,1390,https://root.cern,https://github.com/root-project/root/issues/9944,1,['optimiz'],['optimization']
Performance,Overhaul OptimizeBaskets algorithm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/657:9,Optimiz,OptimizeBaskets,9,https://root.cern,https://github.com/root-project/root/pull/657,1,['Optimiz'],['OptimizeBaskets']
Performance,P; Failed to load module FitPanel; Failed to load module ProofDraw; Failed to load module Unuran; Failed to load module Quadp; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module X3d; Failed to load module SPlot; Failed to load module Hbook; Failed to load module RooFit; Failed to load module RCsg; Failed to load module RooStats; Failed to load module RooFitRDataFrameHelpers; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module ROOTTMVASofie; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module MathMore; Failed to load module RooFitHS3; Failed to load module Foam; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBen,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1029801305:2622,load,load,2622,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1029801305,1,['load'],['load']
Performance,P; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module EGPythia8; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module libc; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module Foam; Failed to l,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-752250076:3425,load,load,3425,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-752250076,1,['load'],['load']
Performance,PATH; * failed to load '/etc/grid-security/certificates/633dc6a4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Grid-ICA-G2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58b08cb5.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5ead794.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e523eeaa.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e523eeaa.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/38f7145f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/38f7145f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/617ff41b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/67707166.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/67707166.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Grid-ICA-G2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MYIFAM.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:25838,load,load,25838,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,PATH; * failed to load '/etc/grid-security/certificates/e9cc934f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeSciencePersonalECCCA4.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLCA4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c141eb07.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e9cc934f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c141eb07.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d9343743.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3e0d64db.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3e0d64db.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b85d64aa.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG4-runbytheissuer.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG4-runbytheissuer.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5249c1ef.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG4-runbytheissuer.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG4-runbytheissuer.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5d9ea26d.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG4-runbytheissuer.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b167aa9e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/be44c37d.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:18981,load,load,18981,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,PCMs store spurious paths which lead to poor performance at initialization time,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14296:45,perform,performance,45,https://root.cern,https://github.com/root-project/root/issues/14296,1,['perform'],['performance']
Performance,PORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG - Success; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG - Success; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR - Failed; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG - Success; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL - Success; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP - Failed; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG - Success; -- Performing Test CXX_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test CXX_SUPPORTS_MISLEADING_INDENTATION_FLAG - Success; -- Performing Test C_SUPPORTS_FNO_FUNCTION_SECTIONS; -- Performing Test C_SUPPORTS_FNO_FUNCTION_SECTIONS - Success; -- Performing Test C_SUPPORTS_FFUNCTION_SECTIONS; -- Performing Test C_SUPPORTS_FFUNCTION_SECTIONS - Success; -- Performing Test CXX_SUPPORTS_FFUNCTION_SECTIONS; -- Performing Test CXX_SUPPORTS_FFUNCTION_SECTIONS - Success; -- Performing Test C_SUPPORTS_FDATA_SECTIONS; -- Performing Test C_SUPPORTS_FDATA_SECTIONS - Success; -- Performing Test CXX_SUPPORTS_FDATA_SECTIONS; -- Performing Test CX,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:4714,Perform,Performing,4714,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,1,['Perform'],['Performing']
Performance,"PR https://github.com/root-project/root/pull/8944 was a good first step to get the RooWorkspace to JSON converter work for typical histfactory models, but this simple example code showcases that are are still significant bugs. These bugs need to be fixed in the release, such that we can promote the JSON converter as a new feature. ```C++; #include ""RooRealVar.h""; #include ""RooSimultaneous.h""; #include ""RooCategory.h""; #include ""RooFitHS3/RooJSONFactoryWSTool.h"". void mySim(); {; using namespace RooFit;. // Import keys and factory expressions files for the RooJSONFactoryWSTool.; std::string rootetcPath = gSystem->Getenv(""ROOTSYS"");; RooJSONFactoryWSTool::loadExportKeys(; rootetcPath + ""/etc/root/RooFitHS3_wsexportkeys.json"");; RooJSONFactoryWSTool::loadFactoryExpressions(; rootetcPath + ""/etc/root/RooFitHS3_wsfactoryexpressions.json""; );. // Create a test model: RooSimultaneous with Gaussian in one component, and; // product of two Gaussians in the other.; RooRealVar x(""x"", ""x"", -8, 8);; RooRealVar mean(""mean"", ""mean"", 0, -8, 8);; RooRealVar sigma(""sigma"", ""sigma"", 0.3, 0.1, 10);; RooGaussian g1(""g1"", ""g1"", x, mean, sigma);; RooGaussian g2(""g2"", ""g2"", x, mean, RooConst(0.3));; RooProdPdf model(""model"", ""model"", RooArgList{g1, g2});; RooGaussian model_ctl(""model_ctl"", ""model_ctl"", x, mean, sigma);; RooCategory sample(""sample"", ""sample"", {{""physics"", 0}, {""control"", 1}});; RooSimultaneous simPdf(""simPdf"", ""simultaneous pdf"", sample);; simPdf.addPdf(model, ""physics"");; simPdf.addPdf(model_ctl, ""control"");. // Export to JSON; {; RooWorkspace ws{""workspace""};; ws.import(simPdf);; RooJSONFactoryWSTool tool{ws};; tool.exportJSON(""simPdf.json"");; // Output can be pretty-printed with `python -m json.tool simPdf.json`; }. // Import JSON; RooWorkspace ws{""workspace""};; RooJSONFactoryWSTool tool{ws};; tool.importJSON(""simPdf.json"");; // At the moment this will fail, because the Gaussians in the product are; // missing in the JSON dump!; }; ```. The JSON dump will look like this:.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9372:662,load,loadExportKeys,662,https://root.cern,https://github.com/root-project/root/issues/9372,2,['load'],"['loadExportKeys', 'loadFactoryExpressions']"
Performance,"PR root-project/root#6969 allowed ROOT to build pcm files for the R package via the RInterface.pcm. However, various headers of R define macros which are defined by math.h and others (ERROR in RooFit). When the global module index is enabled, ROOT loads RInterface on a lookup for (Range). Then the exported macros ""shadow"" the ones which are still in the index and we do not load the correct corresponding module. This obscure problem seems to be coming from a current deficiency in the implementation/interaction; between clang and the index. Pre-loading the RInterface, if enabled, seems to resolve the issue at a reasonable compromise rather than trying to disable the module altogether or undefine the fragile macros.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8827:248,load,loads,248,https://root.cern,https://github.com/root-project/root/pull/8827,3,['load'],"['load', 'loading', 'loads']"
Performance,"PR was updated with a slightly more performant version of the last commit, all commits were rebased.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1672#issuecomment-368573444:36,perform,performant,36,https://root.cern,https://github.com/root-project/root/pull/1672#issuecomment-368573444,1,['perform'],['performant']
Performance,PSniff; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module FitPanel; Failed to load module Unuran; Failed to load module Quadp; Failed to load module GeomPainter; Failed to load module Genetic; Failed to load module Eve; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module ROOTTMVASofieParser; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module X3d; Failed to load module SPlot; Failed to load module Hbook; Failed to load module RooFit; Failed to load module RCsg; Failed to load module RooStats; Failed to load module RooFitRDataFrameHelpers; Failed to load module GeomBuilder; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module ROOTWebDisplay; Failed to load module GuiBld; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module ROOTTMVASofie; Failed to load module TMVAUtils; Failed to load module ASImage; Failed to load module MathMore; Failed to load module RooFitXRooFit; Failed to load module RooFitHS3; Failed to load module Foam; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ROOTNTupleUtil; Failed to load module ASI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14964:2008,load,load,2008,https://root.cern,https://github.com/root-project/root/issues/14964,1,['load'],['load']
Performance,"PSt10shared_ptrIT_ERKS6_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::shared_ptr<TH1D>* ROOT::Internal::RDF::MakeSharedOnHeap<TH1D>(std::shared_ptr<TH1D> const&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT6Detail3RDF13MakeResultPtrI4TH1DEENS_3RDF10RResultPtrIT_EERKSt10shared_ptrIS6_ERNS1_12RLoopManagerES8_INS_8Internal3RDF11RActionBaseEE' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::RDF::RResultPtr<TH1D> ROOT::Detail::RDF::MakeResultPtr<TH1D>(std::shared_ptr<TH1D> const&, ROOT::Detail::RDF::RLoopManager&, std::shared_ptr<ROOT::Internal::RDF::RActionBase>); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZSteqI4TH1DEbRKSt10shared_ptrIT_EDn' unresolved while linking [cling interface function]!; You are probably missing the definition of bool std::operator==<TH1D>(std::shared_ptr<TH1D> const&, decltype(nullptr)); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT8Internal3RDF16MakeSharedOnHeapINS_6Detail3RDF9RNodeBaseEEEPSt10shared_ptrIT_ERKS8_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZStneIN4ROOT8Internal3RDF11RActionBaseEEbRKSt10shared_ptrIT_EDn' unresolved while linking [cling interface function]!; You are probably missing the definition of bool std::operator!=<ROOT::Internal::RDF::RActionBase>(std::shared_ptr<ROOT::Internal::RDF::RActionBase> const&, decltype(nullptr)); Maybe you need to load the corresponding shared library?; root [2]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-1573184913:5714,load,load,5714,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-1573184913,3,['load'],['load']
Performance,PT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58b08cb5.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e732ef10.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2f573f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/18700496.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/bd43b60c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5ead794.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/633dc6a4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificat,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:24099,load,load,24099,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,PT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e732ef10.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2f573f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/18700496.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/bd43b60c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5ead794.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/633dc6a4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Grid-ICA-G2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58b08cb5.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.signing_policy' from CURLOPT_CAPATH; * failed to load '/,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:24376,load,load,24376,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,PT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/18700496.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/bd43b60c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5ead794.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/633dc6a4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Grid-ICA-G2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58b08cb5.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5ead794.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e523eeaa.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e523eeaa.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-securi,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:24757,load,load,24757,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,PT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG4-runbytheissuer.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG4-runbytheissuer.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5249c1ef.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG4-runbytheissuer.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG4-runbytheissuer.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5d9ea26d.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG4-runbytheissuer.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b167aa9e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/be44c37d.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5249c1ef.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/be44c37d.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b167aa9e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5e9e302b.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MYIFAM.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5e9e302b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeSciencePersonalECCCA4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeSciencePersonalCA4.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeSciencePersonalCA4.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeSciencePersonalECCCA4.signing_policy' from CURLOPT_CAPATH; * failed to load '/e,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:19957,load,load,19957,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,PT_CAPATH; * failed to load '/etc/grid-security/certificates/c7a717ce.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c7a717ce.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLECCCA4.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8a21c0da.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a883462e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8a21c0da.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a883462e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLCA4.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLCA4.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeSciencePersonalECCCA4.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLCA4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e9cc934f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeSciencePersonalECCCA4.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLCA4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c141eb07.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e9cc934f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c141eb07.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d9343743.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3e0d64db.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3e0d64db.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certific,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:17910,load,load,17910,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,Painter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module X3d; Failed to load module SPlot; Failed to load module Hbook; Failed to load module RooFit; Failed to load module RCsg; Failed to load module RooStats; Failed to load module RooFitRDataFrameHelpers; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module ROOTTMVASofie; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module MathMore; Failed to load module RooFitHS3; Failed to load module Foam; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module ROOTFitPanelv7; Failed to ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1029801305:2833,load,load,2833,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1029801305,1,['load'],['load']
Performance,Parallelizing the TKDTree for better performance (with TThreadExecutor).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2202:37,perform,performance,37,https://root.cern,https://github.com/root-project/root/pull/2202,1,['perform'],['performance']
Performance,"Partially revert ""Mark the file entry invalid, until reread. Invalidate SLocEntry cache, readd it on reread.""; ; That change does not make any sense. Kudos to my old self.; ; Resolves ROOT-8956.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1196:82,cache,cache,82,https://root.cern,https://github.com/root-project/root/pull/1196,1,['cache'],['cache']
Performance,Patch from Vassil! Add the cwg to the prebuilt module cache path.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1980:54,cache,cache,54,https://root.cern,https://github.com/root-project/root/pull/1980,1,['cache'],['cache']
Performance,"Patch to handle template instantiation error recovery:; The current class SavePendingInstantiationsRAII ([L8109 -L8125](https://github.com/root-project/root/blob/a402af862ace9573193500bcccaa8b4d56cc6632/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h#L8109)) in clang/Sema.h which is called from cling/InterpreterParser.cpp [L920](https://github.com/root-project/root/blob/a402af862ace9573193500bcccaa8b4d56cc6632/interpreter/cling/lib/Interpreter/IncrementalParser.cpp#L920) can be replaced with the following patch in Sema.h; ```class PerformPendingInstantiationsRAII {; Sema &S;; public:; PerformPendingInstantiationsRAII(Sema &S): S(S) {} ;. ~PerformPendingInstantiationsRAII() {; S.PerformPendingInstantiations();; assert(S.PendingInstantiations.empty() &&; ""there shouldn't be any pending instantiations"");; }; };; ```; ; Change in InterpreterParser.cpp L902:; ```Sema::PerformPendingInstantiationsRAII PerformPendingInstantiations(S);```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1145689988:548,Perform,PerformPendingInstantiationsRAII,548,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1145689988,6,['Perform'],"['PerformPendingInstantiations', 'PerformPendingInstantiationsRAII']"
Performance,"People use RooFormula a lot via RooGenericPdf and RooFormulaVar!; Performance matters here. This commit avoids non-static `std::regex` in; `RooFormula::processFormula`, because constructing these on the fly can; become a bottleneck. This is a non-intrusive performance optimization that reduces the time spent for CMS workflows like the HZZ global fit by up to 5 %. Example profiles:; * HZZ multi-dim fit before this PR: https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hzz_1/74; * HZZ multi-dim fit after this PR: https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hzz_3/1815. `RooFormula::processFormula` is now more than ten times faster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10205:66,Perform,Performance,66,https://root.cern,https://github.com/root-project/root/pull/10205,4,"['Perform', 'bottleneck', 'optimiz', 'perform']","['Performance', 'bottleneck', 'optimization', 'performance']"
Performance,"Per #12676, all storage backends should be able to populate the page zero from `kTypePageZero` locators. This pull request adds the missing pieces in the DAOS backend. ## Changes or fixes:; - Add the `RPageStorage::PrepareLoadCluster()` helper which can be used in the implementation of `LoadClusters()` in derived classes to prepare the read of page ranges. This function takes care of filling zero pages in the given `ROnDiskPageMap`.; - Add the missing pieces in `RPageSourceDaos`. ## Checklist:; - [x] tested changes locally. This PR fixes #12960.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13388:288,Load,LoadClusters,288,https://root.cern,https://github.com/root-project/root/pull/13388,1,['Load'],['LoadClusters']
Performance,Performance fix for MnMachinePrecision,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2215:0,Perform,Performance,0,https://root.cern,https://github.com/root-project/root/pull/2215,1,['Perform'],['Performance']
Performance,Performance regression (slowdown) in ALICE event generation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15579:0,Perform,Performance,0,https://root.cern,https://github.com/root-project/root/issues/15579,1,['Perform'],['Performance']
Performance,Performance regression with repr for pyroot objects in root 6.28 nightlies.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12817:0,Perform,Performance,0,https://root.cern,https://github.com/root-project/root/issues/12817,1,['Perform'],['Performance']
Performance,Performance tuning for RANLUX++,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6844:0,Perform,Performance,0,https://root.cern,https://github.com/root-project/root/pull/6844,1,['Perform'],['Performance']
Performance,"Performance visualization in the RNtupleMetrics can allow the encapsulation of more complex type of metrics, which can allow the extraction of more usefull information, as oposssed to previous, simple, agreggate counter. This PR currently encapsulates 4 fully tested variants of histogram metrics and deploys it's most sophisticated variant onto the analysis of the volume of read requests when loading a page or cluster, by default. The following 4 variants are available, mainly referred to by their key usage:. - `RNTupleHistoInterval` : User-provided set of intervals.; - `RNTupleHistoCounterLog` : Histogram on a log scale.; - `RNTupleHistoActiveLearn` : Active learning phase to adjust to data distribution.; - `RNTupleFixedWidthHistogram` : Fixed width bins with constant time filling. Developed under a summer student project by Rui Reis and supervised by Javier Lopez Gomes and Jakob Blomer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8880:0,Perform,Performance,0,https://root.cern,https://github.com/root-project/root/pull/8880,2,"['Perform', 'load']","['Performance', 'loading']"
Performance,"Performance-wise and functionality-wise would still work if for the duration of the trials, the state needed to do the matching is kept alive. That was mostly the idea with the code above, but is not how I would solve it today. So, to your points:. No, it does not need to be instantiated first. For example, if I know that a _potential_ match has a signature of `T*`, then I'm not going to ask it to match `T&`, so even before instantiation, the lookup has useful information. Right now, CPyCppyy loops over each, so will eventually match if all types are by-pointer or all are by reference, but that fails combinations. Another good case is knowing which arguments are based on template parameters and which are not, so that the non-template ones need not be varied. No, on the Python side it is fair game to provide the template arguments, and thus non-ADL happens, too. E.g. all int types are equivalent as far as Python is concerned, and although CPyCppyy will increase the template int argument if it has an argument value larger than will fit, it is not uncommon for Python users to simply fill in `int64_t` or whatever. In fact, as-is, if the prototype lookup, ie. argument dependent, fails, CPyCppyy will assume that we're dealing with the common case where all argument types are template parameters. (It's a human thing to make that order consistent, which is why it works quite often, but it is not a language requirement/guarantee.) It then asks for the full name in a non-ADL manner. ROOT/meta (lookupHelper, I think) does not even support friends, so no worries there. Whether you think it is ""eeew"" or not is irrelevant. That's highly a technical term. What is relevant is that just before the lookupHelper does a `BestViableFunction()` it has a `OverloadCandidateSet` and I can do a much better job finding my own match than can do Sema, b/c the rules to apply aren't exactly the C++ ones (the only ones that Sema knows). Unfortunately, I can't just return the set, as it's deep in th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-696817778:0,Perform,Performance-wise,0,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696817778,1,['Perform'],['Performance-wise']
Performance,"Picking, lights, render-queue/multi-pass rendering, support for most EveElements.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7185:24,queue,queue,24,https://root.cern,https://github.com/root-project/root/pull/7185,1,['queue'],['queue']
Performance,Please test changing options in CMake that change the values of the variables that you now set in the cache. I suspect that calling cmake later to change options (i.e. enabling/disabling root7 after initial configuration) might not work after these changes.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3409#issuecomment-475464110:102,cache,cache,102,https://root.cern,https://github.com/root-project/root/pull/3409#issuecomment-475464110,1,['cache'],['cache']
Performance,Possible optimizer optimization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9312:9,optimiz,optimizer,9,https://root.cern,https://github.com/root-project/root/issues/9312,2,['optimiz'],"['optimization', 'optimizer']"
Performance,"Prevent wild over-read when reading badly clustered file.; ; In some cases where the memory available to the TTreeCache can not fit the entirety; of (potentially odd-shaped) cluster, the TTreeCache could end up with a situation; where (starting at some point) it is invalidated at each entry *and* the basket; from the previous cluster boundary up to some entry number less than the current; entry are loaded over and over again (until the entry number reaches the next cluster; boundary).; ; In a case encountered by CMS, a TTree has a recorded cluster size of 165 events. However the TTree; appears to not have been clustered; most basket size are the same and seem to be flushed at 139 events; interval. A few branches are flushed less frequently, for example EventAuxiliary is flushed every 459; entries.; ; As a consequence when entry 417 is requested, the cluster boundary is calculated as 330 and; the first end as 495. Then all basket containing entries in that range are loaded, including; EventAuxiliary's basket containing entries 459 to 917. Then 917 is the highest available (partial); entry available. Thus the next time the TTreeCache is invalidated is when entry 918 is requested.; As that point the cluster boundary is calculated as 845 and the first end as 495, however; (with the small enough TTreeCache size), the cache is full as soon as the basket for EventAuxiliary; is added. This resulted in a 'valid' range for this cache of 845 to 917 and lead to the reading; all the baskets added so far ... and thus eventhough none of them would be used for reading; and they already had been read once in memory. Then for entry 919, the exact same behavior; repeated.; ; The solution consist on marking the 'minimum' valid range as being 'at least' one cluster wide.; ; Thus in the example above for entry 918 through 989, **only** the missing baskets are read; individually resulting in 'degraded' performance but **not** a wild over-read.; ; A future enhancement would be, in those cas",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1778:402,load,loaded,402,https://root.cern,https://github.com/root-project/root/pull/1778,2,['load'],['loaded']
Performance,"Previously it was only done in; TTree::GetClusterIterator; TTree::GetEntry; TTree::GetEntryWithIndex; TTree::GetMaximum; TTree::GetMinimum; TTree::GetReadCache; TTree::SetCacheSize. In particular it was not triggered by TTree::Draw, TDF nor TTreeReader,; they are using only:. TTree::LoadTree and TBranch::GetEntry. The one use case still not covered is. file->GetObject(treename, tree);; auto b = tree->GetBranch(branchname);; b->GetEntry(entryNumber)=;. But it would require to either enable it in the TTree constructor; (too soon?) or TBranch::GetEntry (too often?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2036:284,Load,LoadTree,284,https://root.cern,https://github.com/root-project/root/pull/2036,1,['Load'],['LoadTree']
Performance,Probably we could fine-tune the description and the comments? I'm open for comments.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2813#issuecomment-433896274:23,tune,tune,23,https://root.cern,https://github.com/root-project/root/pull/2813#issuecomment-433896274,1,['tune'],['tune']
Performance,"Problem with changing of public interfaces - the changes themself.; RZip.h was introduced 5 years ago, but R__Zip (and several other) C functins exists for many years.; And some old ROOT-based apps may just import these symbols even without direct include of RZip.h.; See how changes looked when RZip.h was introduced:; https://github.com/root-project/root/commit/54aaba7dd8a877168f80b0dacb08748ea1d8fe28#diff-0e44fcc38860ef8d08ab17825437332e; In my mind it may end up in big problems. ; I do not see here any performance gain.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4060#issuecomment-509808702:510,perform,performance,510,https://root.cern,https://github.com/root-project/root/pull/4060#issuecomment-509808702,1,['perform'],['performance']
Performance,Problems with loading dictionaries created with 6.22.06 by 6.22.08,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7781:14,load,loading,14,https://root.cern,https://github.com/root-project/root/issues/7781,1,['load'],['loading']
Performance,"Profiles of RNTuple benchmarks (`iotools/cms, lhcb`) showed ~10-20% of; total runtime is due to allocations in `RPageSource::UnsealPage`. One typical RNTuple use case is an event loop over a fixed number of; columns. Columns are divided into pages with a fixed size, e.g. ```; Events | Column 0 | Column 1 | Column 2; -------+----------+----------+----------; 1-10 p0(40kB) p1(80kB) p2(80kB); 11-20 p3(40kB) p4(80kB) p5(80kB); ... ... ... ...; ```. Before this change, page allocations were performed every time a page; is flushed from a column:. ```; Events | Column 0 | Column 1 | Column 2; -------+----------+----------+----------; [alloc] [alloc] [alloc]; 1-10 p0(40kB) p1(80kB) p2(80kB); [dealloc] [dealloc] [dealloc]; [alloc] [alloc] [alloc]; 11-20 p3(40kB) p4(80kB) p5(80kB); ... ... ... ...; [dealloc] [dealloc] [dealloc]; ```. After this change, allocations are held onto and reused if possible; (up to a certain limit, which for now is hard-coded to be 32 pages). ```; Events | Column 0 | Column 1 | Column 2; -------+----------+----------+----------; [alloc] [alloc] [alloc]; 1-10 p0(40kB) p1(80kB) p2(80kB); 11-20 p3(40kB) p4(80kB) p5(80kB); ... ... ... ...; [dealloc] [dealloc] [dealloc]; ```. On SSD, the following serial results were obtained for the lhcb and cms; benchmarks (average of ten cold runs, 95% confidence interval):. ```; cms. Before: 105145us +- 1338us; After: 93669us +- 2077us; %diff: 10.9%. lhcb. Before: 2111977us +- 8371us; After: 1770781us +- 11185us; %diff: 16.2%; ```. Todo: ; - [x] Handle non-mappable case in `PopulatePage`; - [x] Investigate multi-threaded case. For multithreading, the current implementation just uses the existing `UnsealPage` mechanism and is unaffected by these changes -- deleted pages are returned to the cache which deallocates them properly. . I tried adding an internal mutex to `RPageCache` and bumping the number of cached pages to 128 on the benchmark machine but the runtime was about the same as the existing cache-less implementa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8634:491,perform,performed,491,https://root.cern,https://github.com/root-project/root/pull/8634,1,['perform'],['performed']
Performance,"Proof of concept of ROOT working with HPX as a backend. Includes one commit for the build system and another one that applies the necessary changes in the code, specifically to TThreadExecutor, and proposes an interface to specify the backend to run with when calling EnableImplicitMT. As suggested, making the choice of using hpx (instead of tbb) at runtime allows for an easier integration of the hpx library in ROOT. Drawbacks at this point: . - Can't choose the size of the threadpool. HPX always proceeds with as many as physical cores.; - Breaks all RDataFrame tests that run with a specified number of cores/slots.; - Requires `#include <hpx/hpx_main.hpp>` in the script with the main.; - Compilation becomes more cumbersome, ending up with something like: ``g++ myProgram.cpp `root-config --cflags --libs` `pkg-config --cflags --libs hpx_application` - DHPX_APPLICATION_NAME=myProgram -o myProgram.out``; - Performance (benchmarking at the moment). This PR requires HPX to be installed. If someone wants to give it a try, @amadio was so kind to build HPX into the Gentoo prefix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5364:915,Perform,Performance,915,https://root.cern,https://github.com/root-project/root/pull/5364,1,['Perform'],['Performance']
Performance,Protect MinimizerOptions::DefaultMinimizerType from multi-threaded calls,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1611:52,multi-thread,multi-threaded,52,https://root.cern,https://github.com/root-project/root/pull/1611,1,['multi-thread'],['multi-threaded']
Performance,Protect concurrent access to gROOT->GetListOfFiles(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/38:8,concurren,concurrent,8,https://root.cern,https://github.com/root-project/root/pull/38,2,['concurren'],['concurrent']
Performance,Protect global list of functions from concurrent access,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/24:38,concurren,concurrent,38,https://root.cern,https://github.com/root-project/root/pull/24,1,['concurren'],['concurrent']
Performance,Protect multi-thread access to TSystem::fHelper.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5126:8,multi-thread,multi-thread,8,https://root.cern,https://github.com/root-project/root/pull/5126,2,['multi-thread'],['multi-thread']
Performance,Provide functions which are used in JSROOT-based display in `jupyter`. After final v7 JSROOT release code in `jupyter` will be adjusted to dynamic modules loading.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10272:155,load,loading,155,https://root.cern,https://github.com/root-project/root/pull/10272,1,['load'],['loading']
Performance,Provide methods to check if sending via websocket is possible; Fix - correctly handle negative parameter values in TF1/TF2; Fix - clear range flag when drawings are cleared; Fix - do not forget reset pads cache when changing TWebCanvas,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2945:205,cache,cache,205,https://root.cern,https://github.com/root-project/root/pull/2945,1,['cache'],['cache']
Performance,"Provides an implentation for the `DefinitionShadowed()` interpreter callback, that invalidates TCling cached information about a former declaration (that has been shadowed). This PR also includes a minor fix for test 'cling/test/CodeUnloading/DeclShadowing.C'.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4446:102,cache,cached,102,https://root.cern,https://github.com/root-project/root/pull/4446,1,['cache'],['cached']
Performance,"Pull request #11731 introduced internal support for per field post-read callbacks. This follow-up pull request registers a callback for each `#pragma read` rule on user-defined classes.; Currently, `#pragma read` rules referencing non-transient members as a `target` are intentionally disallowed -- a warning is logged in that case. Only target class version is checked, i.e. checksum is ignored. Raw read rules are not (and will likely not be) supported, as they take a `TBuffer &`. ## Changes or fixes:; - Introduce `RFieldBase::AddReadCallbacksFromIORules()`. This function registers a post-read callback for each of the given `ROOT::TSchemaRule`s.; - `RFieldBase::ConnectPageSource()`: cache C++ type version as stored in the RNTupleDescriptor. This information can be accessed via `GetOnDiskTypeVersion()`.; `RFieldBase::RegisterReadCallbacks()` is called as part of `ConnectPageSource()`. This function can be overridden; in particular, derived classes can make use of the on-disk type version to enable/disable read rules.; - RClassField: register a post-read callback for each of the custom I/O rules associated with the target class version.; - I/O customization rules referencing non-transient members are ignored for now. Such rules shall trigger a warning, e.g.; ```; 210: Warning in <[ROOT.NTuple] Warning /home/jalopezg/CERN/repos/root/tree/ntuple/v7/src/RField.cxx:931 in ; ROOT::Experimental::RClassField::RClassField(std::string_view, std::string_view, TClass*)::<lambda(const ; ROOT::TSchemaRule*)>>: ignoring I/O customization rule with non-transient member: a; ```. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR partially takes care of #10019.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11944:690,cache,cache,690,https://root.cern,https://github.com/root-project/root/pull/11944,1,['cache'],['cache']
Performance,PyROOT does not really need to link against all libraries listed as dependencies in the CMakeLists.txt file. Some of the libraries should be loaded on demand at runtime. Related JIRA issues:; - https://sft.its.cern.ch/jira/browse/ROOT-9728; - https://sft.its.cern.ch/jira/browse/ROOT-9729,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2800:141,load,loaded,141,https://root.cern,https://github.com/root-project/root/pull/2800,1,['load'],['loaded']
Performance,PyROOT in root 6.24 branch hangs while loading CMSSW library,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718:39,load,loading,39,https://root.cern,https://github.com/root-project/root/issues/7718,1,['load'],['loading']
Performance,PyROOT: bad CPU performance for 6.27 (dev3 LCG nightly slot at cvmfs),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11927:16,perform,performance,16,https://root.cern,https://github.com/root-project/root/issues/11927,1,['perform'],['performance']
Performance,"Quoting @pcanal:. > I am a bit lost ... Do we understand the reason for the thread unsafety? What data is there a race condition on? [Note for example that gPad is thread-local and in-itself not a cause for problem (unless several threads have their gPad pointing to the same pad). > One thing that would be helpful to understand the scope is the 2 stack traces of the 2 threads accessing the same pointer. Since you @andriish also found a workaround for your problem, it would be better to only change the code in ROOT once we understand exactly what the problem on the ROOT side is and how it is solved by this change (or another change). Therefore I'll close this PR here, but please feel free to engage with us again either here on GitHub or on the ROOT forum if you have practical problems again! Thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6511#issuecomment-1808094349:114,race condition,race condition,114,https://root.cern,https://github.com/root-project/root/pull/6511#issuecomment-1808094349,1,['race condition'],['race condition']
Performance,R-Robots.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNLPGrid.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SDG-G2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Robots.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7a819ef2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNLPGrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d71343e8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d71343e8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d7e8dc79.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SlovakGrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/728fa56d.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SlovakGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/728fa56d.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e13e0fcf.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e21dc0c0.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/87,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:52869,load,load,52869,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,R-Services.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/20b7db76.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IHEP-2013.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DCAROOT-G1.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IHEP-2013.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b93d6240.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/39d30eba.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b93d6240.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e7734335.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30351739.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/39d30eba.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30351739.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e7734335.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/61cd35bd.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IHEP-2013.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/61cd35bd.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HPCI.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HPCI.namespaces' from CURLOPT_CAPAT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:55822,load,load,55822,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,RENAeSciencePersonalCA3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dbf09133.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dbf09133.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8f016f43.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8f016f43.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GermanGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d0a33f8e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d0a33f8e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dd4b34ea.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b2783ac.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b2783ac.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dd4b34ea.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f4db168.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f4db168.signing_poli,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:29052,load,load,29052,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"REveManager sends BeginChanges before sending the change content, and sends EndChanges after changes have been applied. The end redraw callback loops over changes scenes and repaints them. This change also contains an optimization in table view: bind table to its model only at the time of construction or a change of the displayed collection.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4059:218,optimiz,optimization,218,https://root.cern,https://github.com/root-project/root/pull/4059,1,['optimiz'],['optimization']
Performance,RLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLCA4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e9cc934f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeSciencePersonalECCCA4.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLCA4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c141eb07.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e9cc934f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c141eb07.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d9343743.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3e0d64db.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3e0d64db.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b85d64aa.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG4-runbytheissuer.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG4-runbytheissuer.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5249c1ef.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG4-runbytheissuer.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG4-runbytheissuer.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5d9ea26d.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG4-runbytheissuer.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b167aa9e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-sec,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:18885,load,load,18885,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,RLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f30dd6ad.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b4278411.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f30dd6ad.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/35105088.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/35105088.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KENETROOTCA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustRSACertificationAuthority.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustRSACertificationAuthority.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustRSACertificationAuthority.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/edca0fc0.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2436bbb8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d58bb4bc.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/USERTrustRSACertificationAuthority.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/fc5a8f99.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c2a48ab6.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/fc5a8f99.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/23c77840.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-s,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:4806,load,load,4806,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"RNTuple, parallel unzip tear down race condition",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7076:34,race condition,race condition,34,https://root.cern,https://github.com/root-project/root/issues/7076,1,['race condition'],['race condition']
Performance,"RNTuple. For now this feature can be reproduced with a very limited example, divided in three pieces; ### 1. Write an RNTuple; ```cpp; void write_ntuple(); {; auto model = RNTupleModel::Create();; auto myintfield = model->MakeField<int>(""myintfield"");; auto myintfieldsquared = model->MakeField<int>(""myintfieldsquared"");. std::string_view ntuplename{""myntuple""};; std::string_view filename{""myntuple.root""};; auto ntuple = RNTupleWriter::Recreate(std::move(model), ntuplename, filename);. constexpr int nentries = 10;; for (int i = 0; i < nentries; i++) {; *myintfield = i;; *myintfieldsquared = i*i;; ntuple->Fill();; // Create a cluster every 5 entries; if (i == 4 || i == 9) ntuple->CommitCluster();; }; }; ```; ### 2. Read the RNTuple (this will create a `cachedntuple.root` file); ```cpp; void read_ntuple(); {; std::string_view ntuplename{""myntuple""};; std::string_view filename{""myntuple.root""};; auto ntuple = RNTupleReader::Open(ntuplename, filename);. for (auto entryid: *ntuple){; ntuple->LoadEntry(entryid);; }; }; ```; ### 3. Print info of the cached RNTuple; ```cpp; void read_cache(); {; std::string_view ntuplename{""myntuple""};; std::string_view filename{""cachedntuple.root""};. auto model = RNTupleModel::Create();; auto myintfield = model->MakeField<int>(""myintfield"");; auto myintfieldsquared = model->MakeField<int>(""myintfieldsquared"");; auto ntuple = RNTupleReader::Open(std::move(model), ntuplename, filename);; ntuple->PrintInfo();. for (auto entryid: *ntuple){; ntuple->LoadEntry(entryid);; std::cout << ""Read entry "" << entryid << "" with value "" << *myintfield << ""\n"";; std::cout << ""Read entry "" << entryid << "" with value "" << *myintfieldsquared << ""\n"";; }; }; ```. ## TODOS. 1. Still missing all the logic for automatically switching to read the cached RNTuple rather than the original one; 2. That `entriessofar` variable needed to pass to the `CommitCluster` function hopefully can be avoided; 3. Tests with more complex data schemes; 4. Some logic to enable the cachi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8329:1579,Load,LoadEntry,1579,https://root.cern,https://github.com/root-project/root/pull/8329,1,['Load'],['LoadEntry']
Performance,ROOT Assertion During Dictionary Loading (2021.06.30.),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8578:33,Load,Loading,33,https://root.cern,https://github.com/root-project/root/issues/8578,1,['Load'],['Loading']
Performance,ROOT I/O performance related updates,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/709:9,perform,performance,9,https://root.cern,https://github.com/root-project/root/pull/709,1,['perform'],['performance']
Performance,"ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload TMVA/TreePlayer; to fix all failing tests that are related to this feature/bug with; modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1355:80,load,loading,80,https://root.cern,https://github.com/root-project/root/pull/1355,1,['load'],['loading']
Performance,"ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload; TMVA/TreePlayer/Graf to fix all failing tests that are related; to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. 1. figure out how to fix this bug in the rootmap-based loading; without regressin in performance. 2. replace the rootmap system with something else like attaching; all C++ modules on startup. Note that we already do something like this in normal ROOT by; including these packages into the PCH which also makes those; decls available in the normal clang lookup. This PR depends on #1394",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1396:80,load,loading,80,https://root.cern,https://github.com/root-project/root/pull/1396,3,"['load', 'perform']","['loading', 'performance']"
Performance,ROOT does not compile with link-time optimizations (LTO) enabled,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11657:37,optimiz,optimizations,37,https://root.cern,https://github.com/root-project/root/issues/11657,1,['optimiz'],['optimizations']
Performance,"ROOT injects forward declarations of entities as trampolines to resolve the full definitions and load the corresponding library. This allows the ROOT users to 'just' type a name and the interpreter will resolve its definition and dlopen the library describing it. There is a well-known (not well understood until now) limitation with this system: we cannot load entities in namespaces. Namely, if we type `ROOT::TDF::TDataFrame;` the system won't be able to resolve it. This is because we enable the system to load only the contents of namespaces from the forward declarations. For example,; ```cpp; // rootmap file; namespace ROOT{ namespace Experimental { class TDataFrame; } } // #1. // real code; namespace ROOT{ namespace Experimental { class TDataFrame {}; } } // #2. [root] ROOT::Experimental::TDataFrame d; // #3; ```; `#1` is piped at root/interpreter start up; we find the DeclContext and flag it. `#3` triggers a lookup and `#includes #2`. The problem is that we do not issue a lookup in `#2`. The effect is that we practically cannot autoload entities from namespaces. Turning it 'just' on breaks performance and starts loading irrelevant libraries. This is because clang eagerly deserializes template specialization declarations for the decl context in question when computing linkage information in CodeGen. All heavy lifting is done in [D41416](https://reviews.llvm.org/D41416) and landed in e51a2b9de4. It enables finer-grained template specialization deserialization removing the effect of loading irrelevant libraries. The performance impact will be seen shortly after we land this PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547:97,load,load,97,https://root.cern,https://github.com/root-project/root/pull/1547,7,"['load', 'perform']","['load', 'loading', 'performance']"
Performance,ROOT loads unneeded PCMs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000:5,load,loads,5,https://root.cern,https://github.com/root-project/root/issues/13000,1,['load'],['loads']
Performance,ROOT start up time and memory optimization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1790:30,optimiz,optimization,30,https://root.cern,https://github.com/root-project/root/pull/1790,1,['optimiz'],['optimization']
Performance,ROOT-8872 Optimize TTree::Fill() to avoid expensive modulo operations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1058:10,Optimiz,Optimize,10,https://root.cern,https://github.com/root-project/root/pull/1058,1,['Optimiz'],['Optimize']
Performance,ROOT-9027 Multi-thread Snapshot action writes only part of the events for large input files,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1069:10,Multi-thread,Multi-thread,10,https://root.cern,https://github.com/root-project/root/pull/1069,1,['Multi-thread'],['Multi-thread']
Performance,ROOT-fedora31/noimt. has an odd error:; ```; 12:03:08 1220/1286 Test #1269: roottest-root-tree-cache-TestCache ................................................................***Failed 3.75 sec; 12:03:08 Start 1277: roottest-root-tree-cloning-treeCloneTest; 12:03:09 1221/1286 Test #1271: roottest-root-tree-cache-TooSmall ................................................................. Passed 3.05 sec; 12:03:09 Start 1278: roottest-root-tree-cloning-runtreeCloneTest2; 12:04:16 1222/1286 Test #1278: roottest-root-tree-cloning-runtreeCloneTest2 ............fatal: No rebase in progress?; 12:04:16 From http://root.cern/git/root; 12:04:16 * branch master -> FETCH_HEAD; 12:04:16 Switched to branch 'master'; 12:04:16 Cannot find file: /build/workspace/root-pullrequests-build/build/Testing/20200916-1638/Test.xml; 12:04:16 Problems when submitting via HTTP; ```; i.e. it seems like another build was started before the end of this one and wrote to the same log file !?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6301#issuecomment-693542821:95,cache,cache-TestCache,95,https://root.cern,https://github.com/root-project/root/pull/6301#issuecomment-693542821,2,['cache'],"['cache-TestCache', 'cache-TooSmall']"
Performance,ROOT-performance-centos7-multicore/default with flags -DDIAGNOSTICS_FAIL_TESTS=ON -DCTEST_TEST_EXCLUDE_NONE=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-642579424:5,perform,performance-,5,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-642579424,1,['perform'],['performance-']
Performance,"ROOT-performance-centos7-multicore/default: build and test succeeded, upload failed",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6351#issuecomment-693476024:5,perform,performance-,5,https://root.cern,https://github.com/root-project/root/pull/6351#issuecomment-693476024,1,['perform'],['performance-']
Performance,"ROOT-performance-centos8-multicore/cxx17 ran out of disk space during roottest, otherwise green.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11752#issuecomment-1328882020:5,perform,performance-,5,https://root.cern,https://github.com/root-project/root/pull/11752#issuecomment-1328882020,1,['perform'],['performance-']
Performance,"ROOT/build/lib/libCling.so; #13 0x00007ff9c643da0f in clang::Sema::PerformPendingInstantiations(bool) () from /home/jhahnfel/ROOT/build/lib/libCling.so; #14 0x00007ff9c5ecaefe in clang::Sema::ActOnEndOfTranslationUnitFragment(clang::Sema::TUFragmentKind) [clone .part.1427] () from /home/jhahnfel/ROOT/build/lib/libCling.so; #15 0x00007ff9c5ecafdd in clang::Sema::ActOnEndOfTranslationUnit() () from /home/jhahnfel/ROOT/build/lib/libCling.so; #16 0x00007ff9c5d5279e in clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) () from /home/jhahnfel/ROOT/build/lib/libCling.so; #17 0x00007ff9c5668e00 in cling::IncrementalParser::ParseInternal(llvm::StringRef) () from /home/jhahnfel/ROOT/build/lib/libCling.so; #18 0x00007ff9c5669d0c in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/jhahnfel/ROOT/build/lib/libCling.so; #19 0x00007ff9c55e001a in cling::Interpreter::loadHeader(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Transaction**) () from /home/jhahnfel/ROOT/build/lib/libCling.so; #20 0x00007ff9c56b81d6 in cling::MetaSema::actOnLCommand(llvm::StringRef, cling::Transaction**) () from /home/jhahnfel/ROOT/build/lib/libCling.so; #21 0x00007ff9c56b8319 in cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) () from /home/jhahnfel/ROOT/build/lib/libCling.so; #22 0x00007ff9c56c790f in cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/jhahnfel/ROOT/build/lib/libCling.so; #23 0x00007ff9c56c7c14 in cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) () from /home/jhahnfel/ROOT/build/lib/libCling.so; #24 0x00007ff9c56b2310 in cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) () from /home/jhahnfel/ROOT/build/lib/libCling.so; #25 0x00007ff9c54fa3ec in HandleInterpreterException(cling::MetaProcessor*, char const*, cl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9664#issuecomment-1020921609:2942,load,loadHeader,2942,https://root.cern,https://github.com/root-project/root/issues/9664#issuecomment-1020921609,1,['load'],['loadHeader']
Performance,"ROOT/src/core/unix/src/TUnixSystem.cxx:2395; 2187: #3 0x00007f2a6301c2df in TUnixSystem::DispatchSignals (this=0x617000000080, sig=kSigSegmentationViolation) at /home/jhahnfel/ROOT/src/core/unix/src/TUnixSystem.cxx:3615; 2187: #4 <signal handler called>; 2187: #5 0x00000000002d353e in __interceptor_strcmp.part.325 (); 2187: #6 0x00007f2a62e33daf in TClassTable::AddAlternate (normName=0x7f2a6007c780 <.str> ""UserClassViaTypedef"", alternate=0x7f2a6007c7c0 <.str> ""UserClass_t"") at /home/jhahnfel/ROOT/src/core/cont/src/TClassTable.cxx:447; 2187: #7 0x00007f2a62e382ed in ROOT::AddClassAlternate (normName=0x1 <error: Cannot access memory at address 0x1>, alternate=0x7f2a491937c0 <error: Cannot access memory at address 0x7f2a491937c0>) at /home/jhahnfel/ROOT/src/core/cont/src/TClassTable.cxx:792; 2187: #8 0x00007f2a60081efb in _GLOBAL__sub_I_libInitOrder.cxx () at roottest/root/meta/tclass/libInitOrder.cxx:123; 2187: #9 0x00007f2a631f305a in call_init (l=<optimized out>, argc=argc; 2187: entry=37, argv=argv; 2187: entry=0x7ffc0cd45a68, env=env; 2187: entry=0x61600030f680) at dl-init.c:72; 2187: #10 0x00007f2a631f315a in call_init (env=0x61600030f680, argv=0x7ffc0cd45a68, argc=37, l=<optimized out>) at dl-init.c:30; 2187: #11 _dl_init (main_map=0x61a00008b280, argc=37, argv=0x7ffc0cd45a68, env=0x61600030f680) at dl-init.c:119; 2187: #12 0x00007f2a617509bc in _dl_catch_exception () from /lib64/libc.so.6; 2187: #13 0x00007f2a631fa88e in dl_open_worker (a=0x7ffc0cd41a20) at dl-open.c:794; 2187: #14 dl_open_worker (a=0x7ffc0cd41a20) at dl-open.c:757; 2187: #15 0x00007f2a61750964 in _dl_catch_exception () from /lib64/libc.so.6; 2187: #16 0x00007f2a631faa71 in _dl_open (file=0x6070000a18e0 ""/home/jhahnfel/ROOT/build-asan-clang/roottest/root/meta/tclass/libInitOrder.so"", mode=-2147483391, caller_dlopen=0x2ce7f6 <__interceptor_dlopen.part.267+102>, nsid=<optimized out>, argc=37, argv=<optimized out>, env=0x61600030f680) at dl-open.c:876; 2187: #17 0x00007f2a61bc5f8a in dlopen_doit (",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11867:2357,optimiz,optimized,2357,https://root.cern,https://github.com/root-project/root/issues/11867,1,['optimiz'],['optimized']
Performance,ROOTTMVASofieParser; Failed to load module PgSQL; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module Html; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module Hbook; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module RooFitRDataFrameHelpers; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module Vc; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module SQLIO; Failed to load module XMLIO; Failed to load module ROOT_Rtypes; Failed to load module std; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module RIO; Failed to load module ROOTTMVASofie; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module ROOT_Foundation_C; Failed to load module MathMore; Failed to load module RooFitHS3; Failed to load module Foam; Failed to load module RSQLite; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module Core; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11901:3873,load,load,3873,https://root.cern,https://github.com/root-project/root/issues/11901,1,['load'],['load']
Performance,ROR_UNGUARDED_AVAILABILITY_NEW; -- Performing Test CXX_SUPPORTS_WERROR_UNGUARDED_AVAILABILITY_NEW - Failed; -- Performing Test CXX_SUPPORTS_MISSING_FIELD_INITIALIZERS_FLAG; -- Performing Test CXX_SUPPORTS_MISSING_FIELD_INITIALIZERS_FLAG - Success; -- Performing Test C_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG; -- Performing Test C_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG - Success; -- Performing Test CXX_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG; -- Performing Test CXX_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG - Success; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG - Success; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG - Success; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR - Failed; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG - Success; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL - Success; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP - Failed; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:4000,Perform,Performing,4000,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,1,['Perform'],['Performing']
Performance,RSC-SLCS.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IHEP-2013.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NERSC-SLCS.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b93d6240.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/39d30eba.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b93d6240.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e7734335.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30351739.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/39d30eba.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30351739.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e7734335.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/61cd35bd.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/IHEP-2013.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/61cd35bd.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HPCI.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HPCI.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ead666c8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/06769ccd.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HPCI.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/06769ccd.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/522b8537.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NorduGrid-2015.signing_policy' from CURLOPT_CAPAT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:56390,load,load,56390,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"RUN ] RNTuple.TClassEBO; *** Break *** segmentation violation; ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f3e5f0fbf63 in wait4 () from /lib64/libc.so.6; #1 0x00007f3e5f0701eb in do_system () from /lib64/libc.so.6; #2 0x00007f3e5f91a8d8 in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x558efe2e6c50) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2104; #3 TUnixSystem::StackTrace (this=0x558efe2e6c50) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2395; #4 0x00007f3e5f919dd4 in TUnixSystem::DispatchSignals (this=0x558efe2e6c50, sig=kSigSegmentationViolation) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:3615; #5 <signal handler called>; #6 ROOT::Experimental::RClassField::RClassField (this=0x7ffc9edb22f0, fieldName=..., className=..., classp=<optimized out>) at /usr/include/c++/13/bits/new_allocator.h:88; #7 0x00007f3e5fcafc66 in ROOT::Experimental::RClassField::RClassField (this=this; entry=0x7ffc9edb22f0, fieldName=""klass"", className=""8G\325Y\212U"") at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RField.cxx:841; #8 0x0000558efca002c2 in ROOT::Experimental::RField<TestEBO, void>::RField (name=..., this=0x7ffc9edb22f0) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/inc/ROOT/RField.hxx:643; #9 RNTuple_TClassEBO_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:387; #10 0x00007f3e5fc02eb3 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib64/libgtest.so.1.13.0; #11 0x00007f3e5fbef17e in testing::Test::Run() () from /lib64/libgtest.so.1.13.0; #12 0x00007f3e5fbef385 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.13.0; #13 0x00007f3e5fbef4d7 in t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12428:7445,optimiz,optimized,7445,https://root.cern,https://github.com/root-project/root/issues/12428,1,['optimiz'],['optimized']
Performance,RWLock.LargeconcurrentResetRestore (5534 ms); 76: [ RUN ] RWLock.concurrentResetRestoreTL; 76: [ OK ] RWLock.concurrentResetRestoreTL (59 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestoreTL; 76: [ OK ] RWLock.LargeconcurrentResetRestoreTL (4693 ms); 76: [ RUN ] RWLock.concurrentReadsAndWrites; 76: [ OK ] RWLock.concurrentReadsAndWrites (3099 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesSpin; 76: [ OK ] RWLock.concurrentReadsAndWritesSpin (3097 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd; 76: [ OK ] RWLock.concurrentReadsAndWritesStd (3129 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd14; 76: [ OK ] RWLock.concurrentReadsAndWritesStd14 (3210 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd17; 76: [ OK ] RWLock.concurrentReadsAndWritesStd17 (3105 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStdTBB; 76: [ OK ] RWLock.concurrentReadsAndWritesStdTBB (3168 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStdTBBUnique; 76: [ OK ] RWLock.concurrentReadsAndWritesStdTBBUnique (3112 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWrites; 76: [ OK ] RWLock.LargeconcurrentReadsAndWrites (3128 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWritesStd; 76: [ OK ] RWLock.LargeconcurrentReadsAndWritesStd (3111 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWritesStd14; 76: [ OK ] RWLock.LargeconcurrentReadsAndWritesStd14 (3121 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWritesStd17; 76: [ OK ] RWLock.LargeconcurrentReadsAndWritesStd17 (3128 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWritesStdTBB; 76: [ OK ] RWLock.LargeconcurrentReadsAndWritesStdTBB (3100 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWritesStdTBBUnique; 76: [ OK ] RWLock.LargeconcurrentReadsAndWritesStdTBBUnique (3117 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWritesSpin; 76: [ OK ] RWLock.LargeconcurrentReadsAndWritesSpin (315 ms); 76: [ RUN ] RWLock.VeryLargeconcurrentReadsAndWrites; 76: [ OK ] RWLock.VeryLargeconcurrentReadsAndWrites (22562 ms); 76: [ RUN ] RWLock.VeryLargeconcurre,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-742071485:10096,concurren,concurrentReadsAndWritesStdTBBUnique,10096,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-742071485,1,['concurren'],['concurrentReadsAndWritesStdTBBUnique']
Performance,Race condition affecting (at least) TEnum::GetEnum,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7093:0,Race condition,Race condition,0,https://root.cern,https://github.com/root-project/root/issues/7093,1,['Race condition'],['Race condition']
Performance,Race condition when loading dictionary shared libraries,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12552:0,Race condition,Race condition,0,https://root.cern,https://github.com/root-project/root/issues/12552,2,"['Race condition', 'load']","['Race condition', 'loading']"
Performance,Raising the priority of this issue because it also got mentioned on the forum:; https://root-forum.cern.ch/t/loss-of-performance-using-roofit-range-in-root-6-30/57856. I will take a look at this in the coming week.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12645#issuecomment-1902627018:117,perform,performance-using-roofit-range-in-root-,117,https://root.cern,https://github.com/root-project/root/issues/12645#issuecomment-1902627018,1,['perform'],['performance-using-roofit-range-in-root-']
Performance,"Rather than constructing a different reader for each node that; needs it, with this patch we now leverage RColumnRegister as; a ""cache"" of RDefineReaders and RVariationReaders so that nodes; in the computation graph share the same reader objects (per; processing slot). This is analogous to what RLoopManager does; for RDSColumnReaders and RTreeColumnReaders. Sharing column readers across the computation graph will be useful; for bulk loading of event values (which we do not want to repeat; for different instances of a given column's reader).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10899:129,cache,cache,129,https://root.cern,https://github.com/root-project/root/pull/10899,2,"['cache', 'load']","['cache', 'loading']"
Performance,"Rather than constructing a new RVec (as a view over the new; array data) at every event and swapping with the old one,; directly change the address of the old RVec. This provides a ~10% performance improvement for a synthetic; version of the dimuon tutorial adapted to only read (uncompressed); data.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11232:186,perform,performance,186,https://root.cern,https://github.com/root-project/root/pull/11232,1,['perform'],['performance']
Performance,"Re-implement TWinNTSystem::GetLibraries() to make sure the list of libraries contains only existing - and reachable - `.lib` files. - Get the list of DLLs loaded in the current process; - Get the list of directories from the `%LIB%` environment variable; - For every DLL, check if the matching `.lib` file is found in one of the `LIB` directories; - Keep only the found ones and the `/LIBPATH:dir` linker option, if any. This also allows the user to add a directory in the `%LIB%` environment variable if a custon library is needed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6191:155,load,loaded,155,https://root.cern,https://github.com/root-project/root/pull/6191,1,['load'],['loaded']
Performance,Re-running ROOT-performance-centos7-multicore/default makes it work (i.e. the failures:; ```; projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_colWiseRead_32; projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execReadTmplt_build; ```; are random/unstable.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760#issuecomment-630421567:16,perform,performance-,16,https://root.cern,https://github.com/root-project/root/pull/3760#issuecomment-630421567,1,['perform'],['performance-']
Performance,"Reached milestone in improving the thread scaling in Chris’ threaded-io benchmark. As it stands, the runtime is 30% better in single thread (this is because the writing part of ROOT I/O is exercised by this example but it has not yet been as optimized as the reading part of the ROOT I/O library) and is 5.4 times better with 32 threads. Previously the 32 threads case was running at only 20% of the theoretical maximum (i.e. assuming complete linearity), it now runs at 70% (“fun” fact before the improvement that gave most of the boost to the scalar performance, that number had reached 80%).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6559:242,optimiz,optimized,242,https://root.cern,https://github.com/root-project/root/pull/6559,2,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*) () from /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/lib/libCling.so; #14 0x00007f72cf99b1bf in clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) () from /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/lib/libCling.so; #15 0x00007f72d01e8bc2 in clang::Sema::ActOnModuleImport(clang::SourceLocation, clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<std::pair<clang::IdentifierInfo*, clang::SourceLocation> >) () from /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/lib/libCling.so; #16 0x00007f72cf4cfbd7 in cling::Interpreter::loadModule(clang::Module*, bool) () from /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT-HEAD-build/lib/libCling.so; #17 0x00007f72cf2aa7d3 in LoadModule(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Interpreter&) (ModuleName=..., interp=...) at /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:1053; #18 0x00007f72cf2c60e6 in LoadModules(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, cling::Interpreter&) (modules=..., interp=...) at /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/TCling.cxx:1062; #19 0x00007f72cf2a247c in RegisterCxxModules(cling::Interpreter&) (clingInterp=...) at /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/metacling/src/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1015623529:2847,load,loadModule,2847,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1015623529,1,['load'],['loadModule']
Performance,ReadWrite Lock performance,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1427:15,perform,performance,15,https://root.cern,https://github.com/root-project/root/pull/1427,1,['perform'],['performance']
Performance,"Rebase PR #1396. Original PR comment:; ""ROOT can't autoparse classes inside namespaces with the rootmap; system (as the loading callbacks don't correctly land where; they are supposed to land with our injected namespaces). As this; turns out to be a feature of some kind, let's preload; TMVA/TreePlayer/Graf to fix all failing tests that are related; to this feature/bug with modules enabled. This commit can be dropped if we solve on of those problems:. figure out how to fix this bug in the rootmap-based loading; without regressin in performance. replace the rootmap system with something else like attaching; all C++ modules on startup. Note that we already do something like this in normal ROOT by; including these packages into the PCH which also makes those; decls available in the normal clang lookup.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1697:120,load,loading,120,https://root.cern,https://github.com/root-project/root/pull/1697,3,"['load', 'perform']","['loading', 'performance']"
Performance,Rebased on master to fix conflicts.; I will definitely add more multi-thread tests but I think this can be safely merged if jenkins returns green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1037#issuecomment-333239205:64,multi-thread,multi-thread,64,https://root.cern,https://github.com/root-project/root/pull/1037#issuecomment-333239205,1,['multi-thread'],['multi-thread']
Performance,"Rebased on top of #2221, added fix for the race condition described above using `SnapshotHelperMT::FinalizeTask` to destroy the output tree at the end of a task.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2197#issuecomment-398769219:43,race condition,race condition,43,https://root.cern,https://github.com/root-project/root/pull/2197#issuecomment-398769219,1,['race condition'],['race condition']
Performance,"Rebased/improved version of #4966. Several parameters can be configured via rootrc file:; ```; WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore; WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called; WebEve.HTimeout: 200 # timeout in ms for elements highlight; WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset; WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact; ```; Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: ; * Provide single-click mouse handler, used for tracks/jets selection; In `Three` viewer: ; * Improve highlight handling in plain three.js mode; * provide position-dependent context menu; In `RCore` viewer:; * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4972:815,load,load,815,https://root.cern,https://github.com/root-project/root/pull/4972,1,['load'],['load']
Performance,"RecursiveASTVisitor<loadGlobalModuleIndex(cling::Interpreter&)::DefinitionFinder>::TraverseCXXRecordDecl(clang::CXXRecordDecl *) (this=0x7f6918c66d10, D=0x7f68fdb16810); at /mnt/root/interpreter/llvm/src/tools/clang/include/clang/AST/RecursiveASTVisitor.h:1908; #22 0x00007f6907048fe4 in clang::RecursiveASTVisitor<loadGlobalModuleIndex(cling::Interpreter&)::DefinitionFinder>::TraverseDecl(clang::Decl *) (this=0x7f6918c66d10, D=0x7f68fdb16810); at /mnt/root-build-runtime_cxxmodules-ON/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:283; #23 0x00007f69070500a8 in clang::RecursiveASTVisitor<loadGlobalModuleIndex(cling::Interpreter&)::DefinitionFinder>::TraverseClassTemplateDecl(clang::ClassTemplateDecl *) (this=0x7f6918c66d10, D=0x7f68fdb166d8); at /mnt/root/interpreter/llvm/src/tools/clang/include/clang/AST/RecursiveASTVisitor.h:1785; #24 0x00007f6907048eb0 in clang::RecursiveASTVisitor<loadGlobalModuleIndex(cling::Interpreter&)::DefinitionFinder>::TraverseDecl(clang::Decl *) (this=0x7f6918c66d10, D=0x7f68fdb166d8); at /mnt/root-build-runtime_cxxmodules-ON/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:227; #25 0x00007f690707284c in clang::RecursiveASTVisitor<loadGlobalModuleIndex(cling::Interpreter&)::DefinitionFinder>::TraverseDeclContextHelper(clang::DeclContext *) (this=0x7f6918c66d10, DC=0x7f6918df4740); at /mnt/root/interpreter/llvm/src/tools/clang/include/clang/AST/RecursiveASTVisitor.h:1395; #26 0x00007f69070583d4 in clang::RecursiveASTVisitor<loadGlobalModuleIndex(cling::Interpreter&)::DefinitionFinder>::TraverseTranslationUnitDecl(clang::TranslationUnitDecl *) (this=0x7f6918c66d10, D=0x7f6918df4718); at /mnt/root/interpreter/llvm/src/tools/clang/include/clang/AST/RecursiveASTVisitor.h:1496; #27 0x00007f69070497f8 in clang::RecursiveASTVisitor<loadGlobalModuleIndex(cling::Interpreter&)::DefinitionFinder>::TraverseDecl(clang::Decl *) (this=0x7f6918c66d10, D=0x7f6918df4718); at /mnt/root-build-runtime_cxxmodules-ON/interpreter/l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13845#issuecomment-1791689926:13771,load,loadGlobalModuleIndex,13771,https://root.cern,https://github.com/root-project/root/issues/13845#issuecomment-1791689926,1,['load'],['loadGlobalModuleIndex']
Performance,"Reduce duration of DF unit tests, eliminating jitting in favor of compilation where possible and optimizing obvious parameters, all without loosing any coverage. # This Pull request:. ## Changes or fixes:; The df battery of unit tests now runs a few minutes faster than before. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13621:97,optimiz,optimizing,97,https://root.cern,https://github.com/root-project/root/pull/13621,1,['optimiz'],['optimizing']
Performance,ReentrantStd17 (0 ms); 76: [ RUN ] RWLock.ReentrantSpin; 76: [ OK ] RWLock.ReentrantSpin (0 ms); 76: [ RUN ] RWLock.Reentrant; 76: [ OK ] RWLock.Reentrant (0 ms); 76: [ RUN ] RWLock.ReentrantTLSpin; 76: [ OK ] RWLock.ReentrantTLSpin (0 ms); 76: [ RUN ] RWLock.ReentrantTL; 76: [ OK ] RWLock.ReentrantTL (0 ms); 76: [ RUN ] RWLock.ResetRestoreStd; 76: [ OK ] RWLock.ResetRestoreStd (0 ms); 76: [ RUN ] RWLock.ResetRestoreStd14; 76: [ OK ] RWLock.ResetRestoreStd14 (0 ms); 76: [ RUN ] RWLock.ResetRestoreStd17; 76: [ OK ] RWLock.ResetRestoreStd17 (0 ms); 76: [ RUN ] RWLock.ResetRestoreSpin; 76: [ OK ] RWLock.ResetRestoreSpin (0 ms); 76: [ RUN ] RWLock.ResetRestore; 76: [ OK ] RWLock.ResetRestore (0 ms); 76: [ RUN ] RWLock.ResetRestoreTLSpin; 76: [ OK ] RWLock.ResetRestoreTLSpin (0 ms); 76: [ RUN ] RWLock.ResetRestoreTL; 76: [ OK ] RWLock.ResetRestoreTL (0 ms); 76: [ RUN ] RWLock.concurrentResetRestore; 76: [ OK ] RWLock.concurrentResetRestore (88 ms); 76: [ RUN ] RWLock.concurrentResetRestoreSpin; 76: [ OK ] RWLock.concurrentResetRestoreSpin (65 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd; 76: [ OK ] RWLock.concurrentResetRestoreStd (79 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd14; 76: [ OK ] RWLock.concurrentResetRestoreStd14 (67 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd17; 76: [ OK ] RWLock.concurrentResetRestoreStd17 (64 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestore; 76: [ OK ] RWLock.LargeconcurrentResetRestore (5264 ms); 76: [ RUN ] RWLock.concurrentResetRestoreTL; 76: [ OK ] RWLock.concurrentResetRestoreTL (61 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestoreTL; 76: [ OK ] RWLock.LargeconcurrentResetRestoreTL (4643 ms); 76: [ RUN ] RWLock.concurrentReadsAndWrites; 76: [ OK ] RWLock.concurrentReadsAndWrites (3095 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesSpin; 76: [ OK ] RWLock.concurrentReadsAndWritesSpin (3098 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd; 76: [ OK ] RWLock.concurrentReadsAndWritesStd (3103 ms); 76: [ RUN ] RW,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-741456188:7565,concurren,concurrentResetRestoreSpin,7565,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-741456188,1,['concurren'],['concurrentResetRestoreSpin']
Performance,"Ref>&)		; 12.21 MB cling::Interpreter::declare(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, cling::Transaction**)		; 12.21 MB cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&)		; 12.21 MB cling::IncrementalParser::ParseInternal(llvm::StringRef)		; 12.21 MB clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool)		; 12.21 MB clang::Preprocessor::Lex(clang::Token&)		; 12.21 MB clang::Lexer::LexTokenInternal(clang::Token&, bool)		; 12.21 MB clang::Preprocessor::HandleDirective(clang::Token&)		; 12.21 MB clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*)		; 12.21 MB clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*)		; 12.21 MB clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__1::pair<clang::IdentifierInfo*, clang::SourceLocation>>, clang::Module::NameVisibilityKind, bool)		; 12.21 MB clang::CompilerInstance::findOrCompileModuleAndReadAST(llvm::StringRef, clang::SourceLocation, clang::SourceLocation, bool)		; 12.21 MB clang::ASTReader::ReadAST(llvm::StringRef, clang::serialization::ModuleKind, clang::SourceLocation, unsigned int, llvm::SmallVectorImpl<clang::ASTReader::ImportedSubmodule>*)		; 12.15 MB clang::ASTReader::ReadASTBlock(clang::serialization::ModuleFile&, unsigned int)		; 8.20 MB clang::SourceManager::AllocateLoadedSLocEntries(unsigned int, unsigned int)		; 8.20 MB llvm::SmallVectorBase<unsigned int>::grow_pod(void*, unsigned long, unsigned long)		; 8.20 MB realloc		; ```. However I also see other bumps. For example I see 14MB which seem to be allocated for the QualType, whatever that means. <img width=""1840"" alt=""image"" src=""https://github.com/root-project/root/assets/10544/e6a04c4c-916b-4c68-85a4-8a227e0d9526"">",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1615606737:2422,load,loadModule,2422,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1615606737,1,['load'],['loadModule']
Performance,Refactor load module,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1392:9,load,load,9,https://root.cern,https://github.com/root-project/root/pull/1392,1,['load'],['load']
Performance,Refactored LoadCoreModules that it now prints a warning if a module isn't found. Also fixes some nullptr-derefs from the old code where we accessed pointers before checking if they're null.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1394:11,Load,LoadCoreModules,11,https://root.cern,https://github.com/root-project/root/pull/1394,1,['Load'],['LoadCoreModules']
Performance,"Reformulation of https://github.com/root-project/root/pull/12480. ---. Both `Foo<double>` and `Foo<Double32_t>` have the same typeid.; Before this commit, TClass::GetClass(typeid(Foo)) would return; whatever was registered last. This is not ""stable""; it depends on which; branch is accessed first, or which TClass::GetClass call happens first, or; which library is loaded first. Make this more reporducible by consistently preferring types will less; Double32_t / Float16_t occurrences in the typename. While at this, only remove a TClass from the typeid=>TClass map if it; really is the value for the typename. ---. This PR fixes #12509",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15599:365,load,loaded,365,https://root.cern,https://github.com/root-project/root/pull/15599,1,['load'],['loaded']
Performance,"Regarding `roottest-python-pickle-read`:. ```; Start 1437: roottest-python-pickle-read; 14/20 Test #1437: roottest-python-pickle-read ........................***Failed 1.36 sec; -- TEST COMMAND -- ; cd /srv/root/build/roottest/python/pickle; /usr/bin/timeout -s USR2 270s /usr/bin/python /srv/root/src/roottest/python/pickle/PyROOT_readtests.py --fixcling; -- BEGIN TEST OUTPUT --; Test reference counting of pickled object ... ok; Test that a TBufferFile can be pickled ... ok; Test serialization of the ROOT Python module. ... ERROR; Test reading of a histogram from a pickle file ... ok; Test reading of an std::vector<double> from a pickle file ... ok; Test reading of a user-defined object from a pickle file ... ok; Test reading of a ROOT object in a namespace from a pickle file ... ok; Test reading PyROOT custom types ... ok; [ROOT-10810] Test reading a RooDataSet with weights ... ok. ======================================================================; ERROR: Test serialization of the ROOT Python module.; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/srv/root/src/roottest/python/pickle/PyROOT_readtests.py"", line 177, in test3PickleFacadeCheck; facade = pickle.loads(pickle.dumps(get_root_facade())); TypeError: cannot pickle 'ROOTFacade' object; ```. This piece of the pickle test was added by @vepadulano yesterday, it must have failed because your ROOT installation was not updated with the corresponding fix in PyROOT (also merged by @vepadulano yesterday).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823938499:1247,load,loads,1247,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823938499,1,['load'],['loads']
Performance,"Regarding the **include problem**:. Run with this CMake/make commands on **ROOT master branch**:. ```; cmake .. \; -Dalien=OFF -Dcuda=ON \; -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-8.0 \; -DCMAKE_CXX_COMPILER=/usr/bin/g++-4.9 \; -DCMAKE_C_COMPILER=/usr/bin/gcc-4.9. make -j10 VERBOSE=1 # Multi-thread!; ```. Here the error:. ```; /usr/users/wunsch/root_master/tmva/tmva/src/DNN/Architectures/Cuda/CudaMatrix.cu:16:52: fatal error: TMVA/DNN/Architectures/Cuda/CudaMatrix.h: No such file or directory; #include ""TMVA/DNN/Architectures/Cuda/CudaMatrix.h""; ^; compilation terminated.; CMake Error at dnn_cuda_generated_CudaMatrix.cu.o.cmake:209 (message):; Error generating; /usr/users/wunsch/root_master/build/tmva/tmva/CMakeFiles/dnn_cuda.dir/src/DNN/Architectures/Cuda/./dnn_cuda_generated_CudaMatrix.cu.o. make[2]: *** [tmva/tmva/CMakeFiles/dnn_cuda.dir/src/DNN/Architectures/Cuda/dnn_cuda_generated_CudaMatrix.cu.o] Error 1; make[1]: *** [tmva/tmva/CMakeFiles/dnn_cuda.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; make: *** [all] Error 2; ```. And now here the verbose make output (stdout grep 'nvcc'):. ```; /usr/local/cuda-8.0/bin/nvcc -M -D__CUDACC__ /usr/users/wunsch/root_master/tmva/tmva/src/DNN/Architectures/Cuda/CudaMatrix.cu -o /usr/users/wunsch/root_master/build/tmva/tmva/CMakeFiles/dnn_cuda.dir/src/DNN/Architectures/Cuda/dnn_cuda_generated_CudaMatrix.cu.o.NVCC-depend -ccbin /usr/bin/gcc-4.9 -m64 --std c++11 -Xcompiler ,\""-pipe\"",\""-m64\"",\""-Wshadow\"",\""-Wall\"",\""-W\"",\""-Woverloaded-virtual\"",\""-fsigned-char\"",\""-fPIC\"",\""-pthread\"",\""-O2\"",\""-g\"",\""-DNDEBUG\"" -DNVCC -I/usr/local/cuda-8.0/include -I/usr/users/wunsch/root_master/build/include -I/usr/local/cuda-8.0/include; ```. Now, if I run it with only **one** thread (`make -j1 VERBOSE=1`), everything runs fine (but the verbose output has not changed):. ```; /usr/local/cuda-8.0/bin/nvcc -M -D__CUDACC__ /usr/users/wunsch/root_master/tmva/tmva/src/DNN/Architectures/Cuda/CudaMatrix.cu -o /usr/users/wunsch/roo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/283#issuecomment-257136223:287,Multi-thread,Multi-thread,287,https://root.cern,https://github.com/root-project/root/pull/283#issuecomment-257136223,1,['Multi-thread'],['Multi-thread']
Performance,"Regarding the clang-tidy fail: https://travis-ci.org/github/root-project/root/jobs/767085481#L4062. This is unrelated to this patch. I plan to replace the StackAllocator in a follow-up patch, because it does not work with multi-threading. There is a better/safer way of achieving this. Regarding the clang-format fail: https://travis-ci.org/github/root-project/root/jobs/767085483#L254. This is the issue we had before, the CI bot uses an order version of clang-format which produces this weird formatting based on the same style file. I locally use version 9.0 of clang-format and the formatting actually looks more reasonable. Perhaps it would be better to update the clang-format version that the CI bot uses?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7882#issuecomment-820287700:222,multi-thread,multi-threading,222,https://root.cern,https://github.com/root-project/root/pull/7882#issuecomment-820287700,1,['multi-thread'],['multi-threading']
Performance,"Regarding the titular issue, I have been thinking about it for a bit and I don't think we can do much better than what @pieterdavid already implemented. Solutions considered:. 1. Implicitly converting `TClonesArrays` to `RVecs` would be a) backward-incompatible and b) a silent perf degradation, as it requires a copy. Moreover, if we did this I don't see a migration path that doesn't require that users revise all their TClonesArrays-related logic; 2. Adding a `TClonesArrays2RVec` helper function: it would require a copy (or it would have to return a clunky `RVec<T*>`). It is also trivial to implement for users that need it and don't mind the downsides.; 3. Adding a RDF toggle to tweak ""read TClonesArrays as RVecs"" or not: requires adding a bunch of extra logic to the column-reading mechanism for a feature that might end up being mostly unused (modern data models don't use TClonesArrays), and it would require the extra copy (i.e. silent performance degradation). The best seems to be 3, but feature toggles complicate internals and are typically not easy to discover (might end up mostly unused). It seems simpler to ask users to explicitly do the conversion in a `Redefine` if they need/want to. Sorry I could not come up with something nice :confused: . I will close this in a few days unless people have something against it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8644#issuecomment-883552286:949,perform,performance,949,https://root.cern,https://github.com/root-project/root/issues/8644#issuecomment-883552286,1,['perform'],['performance']
Performance,Register module load module,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1361:16,load,load,16,https://root.cern,https://github.com/root-project/root/pull/1361,1,['load'],['load']
Performance,"RegisterClasses"" ||; ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/jhahnfel/ROOT/llvm13/src/core/base/inc/TNamed.h:26,; from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TDictionary.h:44,; from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TDataType.h:25,; from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TInterpreter.h:25,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.h:27,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:20:; /home/jhahnfel/ROOT/llvm13/src/core/base/inc/TString.h:844:15: note: candidate: ‘Bool_t operator==(const string_view&, const char*)’; inline Bool_t operator==(const std::string_view &s1, const char *s2); ^~~~~~~~; In file included from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/Basic/DiagnosticIDs.h:19,; from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/Basic/Diagnostic.h:17,; from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/AST/NestedNameSpecifier.h:18,; from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/AST/Type.h:21,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingDeclInfo.h:20,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingClassInfo.h:28,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingBaseClassInfo.h:29,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:24:; /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/include/llvm/ADT/StringRef.h:919:15: note: candidate: ‘bool llvm::operator==(llvm::StringRef, llvm::StringRef)’; inline bool operator==(StringRef LHS, StringRef RHS) {; ^~~~~~~~; ```; This happens with a C++17 build in general, C++14 is fine. On the performance side, the current state seems to veery slow: `ctest -j12 -R dataframe .` used to take in the order of 2m30s, now I aborted it after 13 minutes. A lot of time seems to be spent in `sys`, are you aware of changes that could explain this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1088491041:2224,perform,performance,2224,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1088491041,1,['perform'],['performance']
Performance,"Reland ""[cxxmodules] Check correctly if the decl was cached.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2448:53,cache,cached,53,https://root.cern,https://github.com/root-project/root/pull/2448,2,['cache'],['cached']
Performance,Reland simplify loadpcm,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3747:16,load,loadpcm,16,https://root.cern,https://github.com/root-project/root/pull/3747,1,['load'],['loadpcm']
Performance,Related forum post: https://root-forum.cern.ch/t/slow-performance-in-limited-range-fit-with-roofit/52834/2,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11486#issuecomment-1359346534:54,perform,performance-in-limited-range-fit-with-roofit,54,https://root.cern,https://github.com/root-project/root/issues/11486#issuecomment-1359346534,1,['perform'],['performance-in-limited-range-fit-with-roofit']
Performance,"Related to #11245 . The `-O` option of hadd can be used to force the recompression of the whole target tree (including branches and baskets) to the compression algorithm set with `-f` option. This is not clear in the current `hadd` help message.; The first commit updates the help for the `-O` option, most probably this can be further improved so suggestions are welcome!. Other commits are style changes to the message for a clearer output and code. After this PR:; ```; $: hadd -h; usage: hadd [-a A] [-k K] [-T T] [-O O] [-v V] [-j J] [-dbg DBG] [-d D] [-n N]; [-cachesize CACHESIZE]; [-experimental-io-features EXPERIMENTAL_IO_FEATURES] [-f F]; [-fk FK] [-ff FF] [-f0 F0] [-f6 F6]; TARGET SOURCES. OPTIONS:; -a Append to the output; -k Skip corrupt or non-existent files, do not exit; -T Do not merge TTree objects; -O If hadd is used to merge TTree objects, compress the whole target tree; (including its branches and baskets) with the desired compression; algorithm. This can be set for example through the '-f' option; -v Explicitly set the verbosity level: 0 request no output, 99 is the; default; -j Parallelize the execution in multiple processes; -dbg Parallelize the execution in multiple processes in debug mode (Does; not delete partial files stored inside working directory); -d Carry out the partial multiprocess execution in the specified; directory; -n Open at most 'maxopenedfiles' at once (use 0 to request to use the; system maximum); -cachesize Resize the prefetching cache use to speed up I/O operations (use 0 to; disable); -experimental-io-features Used with an argument provided, enables the corresponding experimental; feature for output trees; -f Gives the ability to specify the compression level of the target file; (by default 4); -fk Sets the target file to contain the baskets with the same compression; as the input files (unless -O is specified). Compresses the meta data; using the compression level specified in the first input or the; compression setting after f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11254:567,cache,cachesize,567,https://root.cern,https://github.com/root-project/root/pull/11254,2,"['CACHE', 'cache']","['CACHESIZE', 'cachesize']"
Performance,Release notes about includes optimization in ROOT headers [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5611:29,optimiz,optimization,29,https://root.cern,https://github.com/root-project/root/pull/5611,1,['optimiz'],['optimization']
Performance,Remove concurrent usage of TClass::TestBit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15113:7,concurren,concurrent,7,https://root.cern,https://github.com/root-project/root/pull/15113,1,['concurren'],['concurrent']
Performance,Remove the CACHE & FORCE when setting the CMAKE_CXX_FLAGS_<CONFIG> on…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6591:11,CACHE,CACHE,11,https://root.cern,https://github.com/root-project/root/pull/6591,1,['CACHE'],['CACHE']
Performance,"Remove the call to `gSystem->Load(""libMathCore"")` to try to remove dependency between the Rint and Mathcore c++ modules",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10330:29,Load,Load,29,https://root.cern,https://github.com/root-project/root/pull/10330,1,['Load'],['Load']
Performance,"Remove unnecessary checks, use R__likely macro to gain performance of; main loop",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4910:55,perform,performance,55,https://root.cern,https://github.com/root-project/root/pull/4910,1,['perform'],['performance']
Performance,"Removed explicitly loading pythia8 in pythia8 tutorials. On e.g. Docker, this test fails since the path to pythia8 is not under $PYTHIA8/lib/: http://cdash.cern.ch/testDetails.php?test=28516933&build=390221",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/903:19,load,loading,19,https://root.cern,https://github.com/root-project/root/pull/903,1,['load'],['loading']
Performance,Removing the loading the list of function changes the semantic of the return value and indeed as Danilo points we need to understand *how* this routine (Cppyy::GetNumMethods) is used before knowing whether this is the best improvement.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1743#issuecomment-372645644:13,load,loading,13,https://root.cern,https://github.com/root-project/root/pull/1743#issuecomment-372645644,1,['load'],['loading']
Performance,"Reporting some numbers from my machine with this patch, building ROOT with the following cmake invocation:; ```; cmake -DCMAKE_BUILD_TYPE=Release -S rootsrc -B rootbuild/BUILD_NAME -DCMAKE_INSTALL_DIR=rootinstall/INSTALL_NAME; ```. TLDR: The situation w.r.t. #14277 is ~~seemingly unchanged.~~. EDIT: Probably we also want to compare the changes of this patch against ROOT master **before** the two hotfixes regarding the missing symbols were introduced. I will do that and provide a followup comment. ## Baseline: [master@fbd6abb](https://github.com/root-project/root/commit/fbd6abb371e8611a16648983eedf095e425bebd4). ### Import time; Taken after a few runs, hot caches. ```; $: time python -c ""import ROOT"". real	0m0.791s; user	0m0.592s; sys	0m0.203s; ```. ### strace file stats. ```; strace -e file python -c 'import ROOT' 2>&1 | awk -v FS='""' '{ print $1 }' | sort | uniq -c; 206 access(; 2 chdir(; 1 execve(; 1 +++ exited with 0 +++; 181 getcwd(; 2 newfstatat(0, ; 2 newfstatat(1, ; 2 newfstatat(2, ; 532 newfstatat(3, ; 29 newfstatat(4, ; 10123 newfstatat(AT_FDCWD, ; 546 openat(AT_FDCWD, ; 843 readlink(; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=130118, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=130120, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; 1 --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=130124, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---; ```. ### openat stats with the two symbols related to #14277 . ```; strace -z -f -o openat.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel);print(ROOT.kError)'; -1; 3000; grep openat openat.log | sed 's|.*, ""||;s|"".*||' | sort | uniq | wc -l; 338; ```. ## After this patch. ### Import time; Taken after a few runs, hot caches. ```; time python -c ""import ROOT"". real	0m0.792s; user	0m0.600s; sys	0m0.197s; ```. ### strace file stats. ```; strace -e file python -c 'import ROOT' 2>&1 | awk -",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287#issuecomment-1866067873:664,cache,caches,664,https://root.cern,https://github.com/root-project/root/pull/14287#issuecomment-1866067873,1,['cache'],['caches']
Performance,"Reproducer:. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <iostream>. int main(); {; ROOT::EnableImplicitMT();. const auto fpath = ""root://eosuser.cern.ch//eos/user/e/eguiraud/scratch/test.root"";; ROOT::RDataFrame(10).Define(""e"", ""rdfentry_"").Snapshot(""testd/testt"", fpath);. auto *f = TFile::Open(fpath);; auto *td = f->Get<TTree>(""testd/testt"");; auto rdftd = ROOT::RDataFrame(*td);; auto htd = rdftd.Histo1D<ULong64_t>(""e"");; std::cout << htd->GetMean() << '\n';; }; ```; yields:. ```; terminate called after throwing an instance of 'std::runtime_error'; what(): TTreeProcessorMT::Process: an error occurred while getting tree ""//eosuser.cern.ch//eos/user/e/eguiraud/scratch/test.root:/testd/testt"" from file ""root://eosuser.cern.ch//eos/user/e/eguiraud/scratch/test.root""; ```; i.e. `TTreeProcessorMT` gets the name of the TTree wrong. All 3 ingredients are needed (multi-threading, xrootd, and the sub-directory) for the problem to occur. First reported at https://root-forum.cern.ch/t/enableimplicitmt-prevents-reading-nested-ttree-from-xrootd-file-with-rdataframe/49327 , it's a similar problem to https://sft.its.cern.ch/jira/browse/ROOT-9948 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10216:874,multi-thread,multi-threading,874,https://root.cern,https://github.com/root-project/root/issues/10216,1,['multi-thread'],['multi-threading']
Performance,Reset the instance cache at the beginning of each entry.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3946:19,cache,cache,19,https://root.cern,https://github.com/root-project/root/pull/3946,1,['cache'],['cache']
Performance,ResetRestoreSpin; 76: [ OK ] RWLock.concurrentResetRestoreSpin (40 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd; 76: [ OK ] RWLock.concurrentResetRestoreStd (53 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd14; 76: [ OK ] RWLock.concurrentResetRestoreStd14 (62 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd17; 76: [ OK ] RWLock.concurrentResetRestoreStd17 (64 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStdTBB; 76: [ OK ] RWLock.concurrentResetRestoreStdTBB (45 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStdTBBUnique; 76: [ OK ] RWLock.concurrentResetRestoreStdTBBUnique (33 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestore; 76: [ OK ] RWLock.LargeconcurrentResetRestore (5534 ms); 76: [ RUN ] RWLock.concurrentResetRestoreTL; 76: [ OK ] RWLock.concurrentResetRestoreTL (59 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestoreTL; 76: [ OK ] RWLock.LargeconcurrentResetRestoreTL (4693 ms); 76: [ RUN ] RWLock.concurrentReadsAndWrites; 76: [ OK ] RWLock.concurrentReadsAndWrites (3099 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesSpin; 76: [ OK ] RWLock.concurrentReadsAndWritesSpin (3097 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd; 76: [ OK ] RWLock.concurrentReadsAndWritesStd (3129 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd14; 76: [ OK ] RWLock.concurrentReadsAndWritesStd14 (3210 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd17; 76: [ OK ] RWLock.concurrentReadsAndWritesStd17 (3105 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStdTBB; 76: [ OK ] RWLock.concurrentReadsAndWritesStdTBB (3168 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStdTBBUnique; 76: [ OK ] RWLock.concurrentReadsAndWritesStdTBBUnique (3112 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWrites; 76: [ OK ] RWLock.LargeconcurrentReadsAndWrites (3128 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWritesStd; 76: [ OK ] RWLock.LargeconcurrentReadsAndWritesStd (3111 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWritesStd14; 76: [ OK ] RWLock.LargeconcurrentReadsAndWritesSt,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-742071485:9444,concurren,concurrentReadsAndWrites,9444,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-742071485,1,['concurren'],['concurrentReadsAndWrites']
Performance,ResetRestoreStd; 76: [ OK ] RWLock.ResetRestoreStd (0 ms); 76: [ RUN ] RWLock.ResetRestoreStd14; 76: [ OK ] RWLock.ResetRestoreStd14 (0 ms); 76: [ RUN ] RWLock.ResetRestoreStd17; 76: [ OK ] RWLock.ResetRestoreStd17 (0 ms); 76: [ RUN ] RWLock.ResetRestoreStdTBB; 76: [ OK ] RWLock.ResetRestoreStdTBB (0 ms); 76: [ RUN ] RWLock.ResetRestoreStdTBBUnique; 76: [ OK ] RWLock.ResetRestoreStdTBBUnique (0 ms); 76: [ RUN ] RWLock.ResetRestoreSpin; 76: [ OK ] RWLock.ResetRestoreSpin (0 ms); 76: [ RUN ] RWLock.ResetRestore; 76: [ OK ] RWLock.ResetRestore (0 ms); 76: [ RUN ] RWLock.ResetRestoreTLSpin; 76: [ OK ] RWLock.ResetRestoreTLSpin (0 ms); 76: [ RUN ] RWLock.ResetRestoreTL; 76: [ OK ] RWLock.ResetRestoreTL (0 ms); 76: [ RUN ] RWLock.concurrentResetRestore; 76: [ OK ] RWLock.concurrentResetRestore (61 ms); 76: [ RUN ] RWLock.concurrentResetRestoreSpin; 76: [ OK ] RWLock.concurrentResetRestoreSpin (40 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd; 76: [ OK ] RWLock.concurrentResetRestoreStd (53 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd14; 76: [ OK ] RWLock.concurrentResetRestoreStd14 (62 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd17; 76: [ OK ] RWLock.concurrentResetRestoreStd17 (64 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStdTBB; 76: [ OK ] RWLock.concurrentResetRestoreStdTBB (45 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStdTBBUnique; 76: [ OK ] RWLock.concurrentResetRestoreStdTBBUnique (33 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestore; 76: [ OK ] RWLock.LargeconcurrentResetRestore (5534 ms); 76: [ RUN ] RWLock.concurrentResetRestoreTL; 76: [ OK ] RWLock.concurrentResetRestoreTL (59 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestoreTL; 76: [ OK ] RWLock.LargeconcurrentResetRestoreTL (4693 ms); 76: [ RUN ] RWLock.concurrentReadsAndWrites; 76: [ OK ] RWLock.concurrentReadsAndWrites (3099 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesSpin; 76: [ OK ] RWLock.concurrentReadsAndWritesSpin (3097 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd;,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-742071485:8607,concurren,concurrentResetRestoreStd,8607,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-742071485,1,['concurren'],['concurrentResetRestoreStd']
Performance,Resolve ROOT-10524 TChain::LoadTree perf with multiple friends of same name,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4913:27,Load,LoadTree,27,https://root.cern,https://github.com/root-project/root/pull/4913,1,['Load'],['LoadTree']
Performance,Resolve majority of warnings from lgtm.com analyzer; Fix bug with MathJax loading,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7551:74,load,loading,74,https://root.cern,https://github.com/root-project/root/pull/7551,1,['load'],['loading']
Performance,Restarted all tests to see how we are performing...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8661#issuecomment-2187241060:38,perform,performing,38,https://root.cern,https://github.com/root-project/root/pull/8661#issuecomment-2187241060,1,['perform'],['performing']
Performance,Reuse component from `RBrowser`. Provide plugin to load file dialog on demand.; Avoids hard dependency from RBrowser libs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13118:51,load,load,51,https://root.cern,https://github.com/root-project/root/pull/13118,1,['load'],['load']
Performance,"Revert ""Add the cwg to the prebuilt module cache path.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2160:43,cache,cache,43,https://root.cern,https://github.com/root-project/root/pull/2160,1,['cache'],['cache']
Performance,"Revert ""Update concurrentfill.cxx (#8492)"" [skip-ci]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8495:15,concurren,concurrentfill,15,https://root.cern,https://github.com/root-project/root/pull/8495,1,['concurren'],['concurrentfill']
Performance,"Reverted the changes to the help text of `O` option. Kept other formatting changes, this is the current look of the help output; ```; OPTIONS:; -a Append to the output; -k Skip corrupt or non-existent files, do not exit; -T Do not merge Trees; -O Re-optimize basket size when merging TTree; -v Explicitly set the verbosity level: 0 request no output, 99 is the; default; -j Parallelize the execution in multiple processes; -dbg Parallelize the execution in multiple processes in debug mode (Does; not delete partial files stored inside working directory); -d Carry out the partial multiprocess execution in the specified; directory; -n Open at most 'maxopenedfiles' at once (use 0 to request to use the; system maximum); -cachesize Resize the prefetching cache use to speed up I/O operations(use 0 to; disable); -experimental-io-features Used with an argument provided, enables the corresponding experimental; feature for output trees; -f Gives the ability to specify the compression level of the target file; (by default 4); -fk Sets the target file to contain the baskets with the same compression; as the input files (unless -O is specified). Compresses the meta data; using the compression level specified in the first input or the; compression setting after fk (for example 206 when using -fk206); -ff The compression level use is the one specified in the first input; -f0 Do not compress the target file; -f6 Use compression level 6 (see TFile::SetCompressionSettings for the; supported range of values); TARGET Target file; SOURCES Source files; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11254#issuecomment-1266666653:250,optimiz,optimize,250,https://root.cern,https://github.com/root-project/root/pull/11254#issuecomment-1266666653,3,"['cache', 'optimiz']","['cache', 'cachesize', 'optimize']"
Performance,Reverts root-project/root#1547. This PR fails projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make by spuriously loading libRooFit.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1952:125,load,loading,125,https://root.cern,https://github.com/root-project/root/pull/1952,1,['load'],['loading']
Performance,"Right, maybe that would have been appropriate here. However, I went for the minimal option to fix these warnings, also to be sure to not impact performance. Thanks for the review!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10975#issuecomment-1186945629:144,perform,performance,144,https://root.cern,https://github.com/root-project/root/pull/10975#issuecomment-1186945629,1,['perform'],['performance']
Performance,RooChebychev: scalable implementation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3775:14,scalab,scalable,14,https://root.cern,https://github.com/root-project/root/pull/3775,1,['scalab'],['scalable']
Performance,"RooFit categories were using the class `RooCatType (: public TObject)`; instead of an integer to represent category states. It contains an integer; and a char[256], which can store a part of the category name.; This prevents fast batch access, and increases the overhead for data storage; and data loading. From now on, categories are represented as integers.; Every state index also has a state name attached, but instead of storing; it in each row of the dataset, the mapping from state index to; state name is now stored in the category class. **For reviewers**:; Although there is a lot of noise, that's mostly getting rid of unnecessary classes. The user-facing interfaces are stable (to be proven by the fact that all the rest of RooFit still compiles, and that tutorials run).; This is the chance to modernise/improve the `RooCategory` interface. It would be nice if you could specifically look at `RooCategory.h`, maybe in conjunction with the modernised tutorial on how they can be used in the future:; https://github.com/hageboeck/root/blob/cleanupCategories/tutorials/roofit/rf404_categories.C. More details what happened:; - Replace RooCatType by an integer.; - Replace names saved in each instance of RooCatType by a map in; RooAbsCategory that maps state numbers to strings. This saves 64 bytes; + the size of TObject for each event, and makes loading strings in each; event unnecessary.; - Convert RooVectorDataStore from saving RooCatType to integers of; category states.; - With this, also reduce the amount of unnecessary members in RooVectorDataStore. - Provide new interfaces for categories to work without RooCatType.; - Prevent clearing of shapeDirty in RooAbsCategory::evaluate(), since; derived category classes might need to recompute their shapes if one; of their input categories change.; - Add function to define multiple category states at once with; initialiser lists. - Mark legacy interfaces exposing RooCatType as deprecated in doxygen.; - Stop including RooCatType wh",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5219:298,load,loading,298,https://root.cern,https://github.com/root-project/root/pull/5219,1,['load'],['loading']
Performance,"RooFit is never used without optimization flags, and I want to avoid calling `new` and `delete` explicitly in RooFit to minimize the risk of unintended memory leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10263#issuecomment-1081687103:29,optimiz,optimization,29,https://root.cern,https://github.com/root-project/root/pull/10263#issuecomment-1081687103,1,['optimiz'],['optimization']
Performance,RooLinkedList::At optimization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3024:18,optimiz,optimization,18,https://root.cern,https://github.com/root-project/root/pull/3024,1,['optimiz'],['optimization']
Performance,"Roofit was using TInterpreter::Next, which was actually calling; TClingTypedefInfo::InternalNext. This function is iterating each decls; and is not efficient. Measured performance of this patch on stressRooFit; testcase and it didn't have a significant different but not making roofit; slower as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1713:168,perform,performance,168,https://root.cern,https://github.com/root-project/root/pull/1713,2,['perform'],['performance']
Performance,Rootcling's stage2 mode calls gDriverConfig->fTCling__GetInterpreter() to; get the TCling's instance of the cling interpreter. This in turn might; need to initialize TCling. Our modules setup preloads a modulemap but not the overlays preventing; system modules such as libc and stl to be loaded. This criples rootcling; and whenever it #includes a header file we get an error that we included; a module from ROOT which depends on modules stl but it is not accessible; through the module map.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1395:288,load,loaded,288,https://root.cern,https://github.com/root-project/root/pull/1395,1,['load'],['loaded']
Performance,"RunGraphs makes a summary log entry for the jitting time of all computation graphs that are being run concurrently. Generally this is ok, but in the case users specifically requested a log level of kDebug+10 or higher this would accidentally silence the logging of what code is being jitted.; With this patch, if log level is kDebug+10 or higher, RunGraphs avoids silencing inner logs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11832:102,concurren,concurrently,102,https://root.cern,https://github.com/root-project/root/pull/11832,1,['concurren'],['concurrently']
Performance,"Running `roottest-python-basic-datatype` under `gdb`:; ```; #0 0x00007ffff63ee52f in raise () from /lib64/libc.so.6; #1 0x00007ffff63c1e65 in abort () from /lib64/libc.so.6; #2 0x00007ffff63c1d39 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #3 0x00007ffff63e6e86 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffeab9b265 in cling::Transaction::addNestedTransaction (this=<optimized out>, nested=<optimized out>) at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/Transaction.cpp:98; #5 0x00007fffeaad2f23 in cling::IncrementalParser::beginTransaction (this=0x555555c3bee0, Opts=...) at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:496; #6 0x00007fffeaac4776 in cling::Interpreter::PushTransactionRAII::PushTransactionRAII (this=0x7fffffff7338, i=<optimized out>); at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:105; #7 0x00007fffeaa5b252 in ClingMemberIterInternal::DCIter::DCIter (this=0x7fffffff73d0, DC=0x555557208818, interp=0x0) at /home/jhahnfel/ROOT/src/core/metacling/src/TClingMemberIter.cxx:21; #8 0x00007fffeaa57951 in TClingMemberIter::TClingMemberIter (this=0x7fffffff73b8, interp=0x555555803e60, DC=0x7fffffff6ff0) at /home/jhahnfel/ROOT/src/core/metacling/src/TClingMemberIter.h:145; #9 TClingDataMemberIter::TClingDataMemberIter (this=0x7fffffff73b8, interp=0x555555803e60, DC=0x7fffffff6ff0, selection=TDictionary::EMemberSelection::kNoUsingDecls); at /home/jhahnfel/ROOT/src/core/metacling/src/TClingDataMemberInfo.h:66; #10 TClingDataMemberInfo::TClingDataMemberInfo (this=0x55555b2f2b30, interp=0x555555803e60, ci=<optimized out>, selection=TDictionary::EMemberSelection::kNoUsingDecls); at /home/jhahnfel/ROOT/src/core/metacling/src/TClingDataMemberInfo.cxx:115; #11 0x00007fffea9c66da in TCling::DataMemberInfo_Factory (this=0x555555b29730, clinfo=0x55555a9b6510, selection=TDictionary::EMemberSelection::kNoUsingDecls); at /home/jhahnfel/ROOT/src/core/metacling/src/TCling.cxx:8599; #12",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16338#issuecomment-2370776890:389,optimiz,optimized,389,https://root.cern,https://github.com/root-project/root/pull/16338#issuecomment-2370776890,3,['optimiz'],['optimized']
Performance,"SDKs/MacOSX12.1.sdk/usr/include/c++/v1 -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.0.0/include -compilerI/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.0.0/include -compilerI/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Users/suter_a/Applications/root/root_exec/include -I/opt/local/include -I/Users/suter_a/Applications/musrfit/src/include -I/Users/suter_a/Applications/musrfit/src/classes PUserFcnBase.h /Users/suter_a/Applications/musrfit/src/include/PUserFcnBaseLinkDef.h; dyld[7935]: Library not loaded: @rpath/libRIO.so; Referenced from: /Users/suter_a/Applications/root/root_exec/bin/rootcling; Reason: tried: '/usr/local/lib/libRIO.so' (no such file), '/usr/lib/libRIO.so' (no such file); Subprocess aborted; make[2]: *** [src/classes/PUserFcnBaseDict.cxx] Error 1; make[1]: *** [src/classes/CMakeFiles/PUserFcnBase.dir/all] Error 2; make: *** [all] Error 2. root v6-26 with patch; ---------------------; cd /Users/suter_a/Applications/musrfit/build/src/classes && /opt/local/bin/cmake -E env DYLD_LIBRARY_PATH=/Users/suter_a/Applications/root/root_exec/lib: /Users/suter_a/Applications/root/root_exec/bin/rootcling -v2 -f PUserFcnBaseDict.cxx -s /Users/suter_a/Applications/musrfit/build/src/classes/libPUserFcnBase.dylib -rml libPUserFcnBase.dylib -rmf /Users/suter_a/Applications/musrfit/build/src/classes/libPUserFcnBase.rootmap -inlineInputHeader -I/opt/local/include -I/Users/suter_a/Applications/musrfit/src/include -DPNEXUS_ENABLED -compilerI/Applications/Xcode.app/Contents/Develope",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10062#issuecomment-1061481610:1873,load,loaded,1873,https://root.cern,https://github.com/root-project/root/issues/10062#issuecomment-1061481610,1,['load'],['loaded']
Performance,"STReader.cpp#L3489) in clang. However fixing this would be very hard and might need to rework the source location management. That will be probably a good thing for clang since it is a bit inefficient how. We might be able to use some sort of binary tree to model them.; > ; > ; > I heard you talked this before. It looks interesting. And similar to above, I feel it will be more interesting to merge/re-use the source locations. Did you meet the problem of duplicated declarations?; > ; > ; > For example, in C++20 modules, it is common:; > ; > ; > ```; > // A.cppm; > module;; > #include <iostream>; > export module A;; > ...; > ; > // B.cppm; > module;; > #include <iostream>; > export module A;; > ...; > ; > // C.cpp; > import A;; > import B;; > ```; > ; > ; > ; > ; > ; > Did you have similar cases?. If the question is if we have multiple duplication due to textual inclusion of header files we have almost none. We have worked very very hard to modularize things bottom up, including libc, libstdc++, libxml, boost, etc. > ; > ; > > In fact the other issue might be easier to fix and less intrusive. That is, the way we load types eagerly [here](https://github.com/llvm/llvm-project/blob/5bf142749e2ee1f7d60e728bf7ac4262e1c22da0/clang/lib/Serialization/ASTReader.cpp#L3216).; > ; > ; > I am not sure how feasible it is to load types eagerly. Since many types are constructed in ASTContext locally (e.g., some types for CXXRecords). And I am sure how can we load types before deserialize the decls.; > . It feels feasible to me, since there is no need of any of these types unless they were needed. We could possibly store their hash and offset and deserialize them on demand. Pretty much the same as what @zygoloid suggested long ago with the template specializations. . > ; > I just feel it may easier to track by putting things together : ) It doesn't matter nor hurry. I can open these issue reports. It would take me some time to put sufficient information to make them actionable though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1617552329:1909,load,load,1909,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1617552329,3,['load'],['load']
Performance,SUPPORTS_WERROR_UNGUARDED_AVAILABILITY_NEW - Failed; -- Performing Test CXX_SUPPORTS_MISSING_FIELD_INITIALIZERS_FLAG; -- Performing Test CXX_SUPPORTS_MISSING_FIELD_INITIALIZERS_FLAG - Success; -- Performing Test C_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG; -- Performing Test C_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG - Success; -- Performing Test CXX_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG; -- Performing Test CXX_SUPPORTS_IMPLICIT_FALLTHROUGH_FLAG - Success; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG - Success; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG - Success; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR - Failed; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG - Success; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL - Success; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP - Failed; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:4055,Perform,Performing,4055,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,1,['Perform'],['Performing']
Performance,S_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG - Success; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG - Success; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR - Failed; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG - Success; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL - Success; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP - Failed; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG - Success; -- Performing Test CXX_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test CXX_SUPPORTS_MISLEADING_INDENTATION_FLAG - Success; -- Performing Test C_SUPPORTS_FNO_FUNCTION_SECTIONS; -- Performing Test C_SUPPORTS_FNO_FUNCTION_SECTIONS - Success; -- Performing Test C_SUPPORTS_FFUNCTION_SECTIONS; -- Performing Test C_SUPPORTS_FFUNCTION_SECTIONS - Success; -- Performing Test CXX_SUPPORTS_FFUNCTION_SECTIONS; -- Performing Test CXX_SUPPORTS_FFUNCTION_SECTIONS - Success; -- Performing Test C_SUPPORTS_FDATA_SECTIONS; -- Performing Test C_SUPPORTS_FDATA_SECTIONS - Success; -- Performin,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:4657,Perform,Performing,4657,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,1,['Perform'],['Performing']
Performance,"Same on Ubu22.04. Debug stack trace here:. ```; #0 0x00007fa201eea3ea in __GI___wait4 (pid=689394, stat_loc=stat_loc; entry=0x7ffe8194a818, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30; #1 0x00007fa201eea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7ffe8194a818, options=options; entry=0) at ./posix/waitpid.c:38; #2 0x00007fa201e50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171; #3 0x00007fa202ab531a in TUnixSystem::Exec (this=0x56308f7b6f60, shellcmd=0x56309242b640 ""/home/user/build/build-root-Desktop-Debug/etc/gdb-backtrace.sh 689371 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2125; #4 0x00007fa202ab5c3e in TUnixSystem::StackTrace (this=0x56308f7b6f60) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2416; #5 0x00007fa202ab9ac5 in TUnixSystem::DispatchSignals (this=0x56308f7b6f60, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3636; #6 0x00007fa202ab0cf2 in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:402; #7 0x00007fa202ab99c3 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3607; #8 0x00007fa202aa14a2 in textinput::TerminalConfigUnix::HandleSignal (this=0x7fa202db6d00 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99; #9 0x00007fa202aa1194 in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36; #10 <signal handler called>; #11 0x00005630924075b0 in ?? (); #12 0x00007fa1e65ad3d9 in operator() (__closure=0x7ffe8194d453, obj=0x563091644350) at /opt/root_src/graf2d/gpad/src/TRatioPlot.cxx:116; #13 0x00007fa1e65ad44e in TRatioPlot::~TRatioPlot (this=0x563092404020, __in_chrg=<optimized out>) at /opt/root_src/graf2d/gpad/src/TRatioPlot.cxx:119; #14 0x00007fa1e65ad6b8 in TRatioPlot::~TRatioPlot (this=0x563092404",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14855#issuecomment-1970869205:278,optimiz,optimized,278,https://root.cern,https://github.com/root-project/root/issues/14855#issuecomment-1970869205,2,['optimiz'],['optimized']
Performance,"Saves one round trip when opening an RNTuple. Also adds reading the header and the footer to the accounting. As a follow-up, we should store the location of the first page list in the anchor. That would give us the option to load that page list in the same vector read, too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15835:225,load,load,225,https://root.cern,https://github.com/root-project/root/pull/15835,1,['load'],['load']
Performance,"Science Center), the project has ended and time has run out to make any further major contributions to it, except, of course finishing this PR and providing help to get it working and to possibly hand over further development :). Here are some notes for possible future work:; - RooFitZMQ includes an extension of ZeroMQ itself: a ppoll function. This function should ideally be contributed to ZeroMQ, but I have had no time for this. The motivation behind ppoll is given in this [blog post](https://blog.esciencecenter.nl/combining-zeromq-posix-signals-b754f6f29cd6).; - At the last moment, I decided to reimplement part of the Queue functionality. The task distribution and parameter updating functionalities are now done directly using appropriate ZeroMQ sockets instead of indirectly through the Queue. The old-style Queue functionality, however, has not been cleaned up yet. Doing so will clean up the ""plumbing"" of the MultiProcess functions quite a bit.; - Benchmarking and optimization still has to be done for this version as well. The scaling results of the proof of concept (see references above) should be reproducible with this reimplementation, but this possibly still needs some tuning.; - After the most recent merging in of master, the RooGradMinimizer tests no longer pass, because the numbers are no longer floating point exactly the same. We have not looked into why, but one possible source is the reworked Kahan summation class. This was applied in RooMinimizerFcn, but not yet in our external-gradient classes.; - The proof-of-concept version classes are also still present in the source tree (`roofitcore/MultiProcess`), but have only been partially maintained since we started with the final version. Probably the best thing to do there is to remove that, but maybe people disagree and want to keep it for comparison while benchmarking and reproducing the results of the proof-of-concept benchmarks. Note: BidirMMapPipe is in there as well, since it was moved there. This cla",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:5499,optimiz,optimization,5499,https://root.cern,https://github.com/root-project/root/pull/8294,1,['optimiz'],['optimization']
Performance,ScienceCA-2B.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/9c979c2b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/62c4a178.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a603ba9c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/8dd53007.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/943fd5f3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG4-runbytheissuer.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG4-runbytheissuer.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d41ec82f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b85d64aa.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/598b583e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1G2-Classic-2015.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a603ba9c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/82c2b224.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d41ec82f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridCA-1-Classic.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/bd43b60c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-secur,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:15219,load,load,15219,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"Second round of testing with `./tree/dataframe/test/dataframe_cache --gtest_filter=Cache.Ambiguity`, the result with `git-bisect` is:; ```; 99701af2bae25872aa0795fa08c6337232ff2f3c is the first bad commit; commit 99701af2bae25872aa0795fa08c6337232ff2f3c; Author: Enrico Guiraud <enrico.guiraud@cern.ch>; Date: Tue Oct 26 10:28:14 2021 +0200. [DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines. Before this commit, each action and filter was calling InitSlot on all; the defines it knew about. As a consequence, RDefine had to keep track; of whether InitSlot was already called on it for a given task and a; given slot. We can avoid the multiple InitSlot calls on the same objects and the; book-keeping of whether the call already happened or not by having; RLoopManager call InitSlot on every defined column once per task and per; slot. To this end, we need to register RDefine objects with the; RLoopManager when they are created and deregister them when they are; destroyed. tree/dataframe/inc/ROOT/RDF/RAction.hxx | 14 +++++++-------; tree/dataframe/inc/ROOT/RDF/RBookedDefines.hxx | 5 +++++; tree/dataframe/inc/ROOT/RDF/RDefine.hxx | 20 ++++++--------------; tree/dataframe/inc/ROOT/RDF/RDefineBase.hxx | 1 -; tree/dataframe/inc/ROOT/RDF/RFilter.hxx | 14 ++++++--------; tree/dataframe/inc/ROOT/RDF/RInterface.hxx | 8 +++++---; tree/dataframe/inc/ROOT/RDF/RJittedDefine.hxx | 1 +; tree/dataframe/inc/ROOT/RDF/RLoopManager.hxx | 4 ++++; tree/dataframe/src/RDFBookedDefines.cxx | 5 +++++; tree/dataframe/src/RDefineBase.cxx | 10 ++++------; tree/dataframe/src/RJittedDefine.cxx | 6 ++++++; tree/dataframe/src/RLoopManager.cxx | 15 +++++++++++++++; 12 files changed, 64 insertions(+), 39 deletions(-); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10007#issuecomment-1057004565:83,Cache,Cache,83,https://root.cern,https://github.com/root-project/root/issues/10007#issuecomment-1057004565,1,['Cache'],['Cache']
Performance,"See cms-sw/cmssw#33361. Fixes #8048. Now, set the start point of the filling to be the end of the previous filling rather than the start of the current cluster (which can sometimes; be before the end of the previous filling). Issue: The error message was inaccurate, it did not take into account jagged filling of the TTreeCache. In this case, the cache was filled with a little more than one cluster and when it needs to do the next refill it restarted from the cluster start boundary of that partially downloaded cluster which is “indeed” within the range of the last TreeCache fill (i.e. the error). We did not see the problem with a local file because the TTreeCache usage is different. CMSSW take note of whether prefetching (asynchronous reads) is available for a while or not. In the setup CMSSW has, the prefetching (asynchronous reads) is available for the local file but not for the network/remote file. In addition when prefetching (asynchronous reads) is not available, CMSSW uses multiple TTreeCache for a given TTree while it uses only one when prefetching (asynchronous reads) is available. This results in the pattern of filling to be different between the 2 cases.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8049:348,cache,cache,348,https://root.cern,https://github.com/root-project/root/pull/8049,1,['cache'],['cache']
Performance,"See discussion at https://github.com/root-project/root/pull/7286. This set of improvements to TBufferMerger (and more) was inspired by the terrible performance of the parallel merging (and fast merging in general) in the case where the TTree has a very large number of branches (1000+). Where in the original version a TBufferMerger with a file with 1000+ branches and only 50s and ran with any number of threads would take more than 3m (did not wait until the end) the new version takes 11s with 1 thread, 8s with 6 threads and 22s with 6 thread when increased to 500 events. (using the CMS file ../data//250202_181_RECO.root). This PR includes:. * Skipping the boxing/compressing/uncompressing/unboxing cycle if the TBufferMerger is available (not already merging) when the thread is writing its TMemFile. * Skipping SetBranchAddress and SetMakeClass in when doing fast cloning (where that information is not used anyway). * Replacing calling to the slow TObjArray::GetEntries (which counts the slot used) by calling GetEntriesFast. * Speeding up the GetMother implementation (caching parent's address sooner when reading, use that information in GetMother). * In fast cloning, delay writing the output until the last input is processed (instead of writing the output after each input),. * Optimization of fast cloning handing of empty write basket. It also contains a couple of bug fixes (RNtuple merging forgetting to merge the result of the objects in the file, iofeatures incorrectly cloned). Also made TBufferMerger::GetQueueSize actually thread safe (it is necessary to use it to stop the producer from adding more data if the queue is too full). Also improved TClass::GetBaseClassOffset parallelism (benefit parallel boxing/unboxing) and reduced/removed contention see in the mechanism use to determine the actual object type at run-time (TIsAProxy).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7339:148,perform,performance,148,https://root.cern,https://github.com/root-project/root/pull/7339,3,"['Optimiz', 'perform', 'queue']","['Optimization', 'performance', 'queue']"
Performance,See http://en.cppreference.com/w/cpp/thread/condition_variable/wait and http://en.cppreference.com/w/cpp/thread/condition_variable. The dead lock happens in (for example) the following circunstances/time-ordering.; ```; 1.1. WriteOutputFile holds http://en.cppreference.com/w/cpp/thread/condition_variable; 2.1. ~TBufferMerger acquires fQueueMutex; 1.2. WriteOutputFile checks fQueue.Empty() and gets tolds it is empty.; 2.2. ~TBufferMerger push to the Queue; 2.3. ~TBufferMerger release fQueueMutex; 2.4. ~TBufferMerger calls fCV.notify_one();; 2.5. notify_one noticed that nobody is waiting and just return; 1.3. WriteOutputFile puts itself on the wait queue; 2.6. ~TBufferMerger starts waiting on the join; 1.4. WriteOutputFile waits forever; ```; Conclusion: fWriteMutex **must** be taken when modifying fQueue.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/583#issuecomment-302407253:453,Queue,Queue,453,https://root.cern,https://github.com/root-project/root/pull/583#issuecomment-302407253,2,"['Queue', 'queue']","['Queue', 'queue']"
Performance,"See https://github.com/root-project/root/pull/12650. On an extreme example:; ```; 15,272,928 entries; 152,739 baskets (and as many clusters); 10,000 Actual TTreeCache buffer size (minimum allowed); 8,442 estimated buffer size of TTreeCache (1.5 times compressed buffer size); 400 bytes per baskets; 100 entries per baskets (i.e. per clusters); 25 number of cluster per TTreeCache buffer for single branch with default size.; 1 float per entry (reading a single branch).; ```; This repairs the performance of a simple TTree::Draw of a single branch; from 1 hour back down to 7s (performance seem in v6.12). One additional improvement, increase the performance by 20% on that same example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12651:493,perform,performance,493,https://root.cern,https://github.com/root-project/root/pull/12651,3,['perform'],['performance']
Performance,See https://root-forum.cern.ch/t/rootlogon-c-r-load-library-mca8000a-cxx/50565,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12801:47,load,load-library-,47,https://root.cern,https://github.com/root-project/root/issues/12801,1,['load'],['load-library-']
Performance,See https://root-forum.cern.ch/t/serious-degradation-of-i-o-performance-from-6-20-04-to-6-22-06/43584/10,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7253:60,perform,performance-from-,60,https://root.cern,https://github.com/root-project/root/pull/7253,1,['perform'],['performance-from-']
Performance,"See in-code comment for more details. Note: this bug is routinely seen on the CI, where it causes occasional failures to the tests in question. Despite this solution being very suboptimal (the bug is most likely still present in many places of our codebase and can be encountered by users in the wild) we should at least be able to remove the random CI failures on our side. A proper solution would be nice, but it seems hard to come up with one that doesn't have big performance implications. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16412:468,perform,performance,468,https://root.cern,https://github.com/root-project/root/pull/16412,1,['perform'],['performance']
Performance,"See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:; > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:; > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3493:412,perform,performance,412,https://root.cern,https://github.com/root-project/root/pull/3493,2,"['Optimiz', 'perform']","['OptimizeAllMethods', 'performance']"
Performance,"See:; ```; 2004-09-21 sasha. 	* added mandatory -O3 in libAfterImage and libAfterBase improving; 	 performance significantly;; ```. I think it would be better if this only happened in 'Release Mode'. In debug mode, other flags like -g should be passed instead. https://github.com/root-project/root/blob/master/graf2d/asimage/src/libAfterImage/configure#L3244; https://github.com/root-project/root/blob/master/graf2d/asimage/src/libAfterImage/configure.in#L210",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8125#issuecomment-841520789:99,perform,performance,99,https://root.cern,https://github.com/root-project/root/issues/8125#issuecomment-841520789,1,['perform'],['performance']
Performance,"See:; ```; [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024; [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499; [2] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547; [3] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199; [4] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438; ```; and then it continues:; ```; [0] from 0x00007ffff755d578 in TFile::Open(char const*, char const*, char const*, int, int)+54 at [...]/io/io/src/TFile.cxx:4024; [1] from 0x00007ffff66a5cab in TChain::LoadTree(long long)+3431 at [...]/tree/tree/src/TChain.cxx:1499; [2] from 0x00007ffff66a635f in TChain::LoadTree(long long)+5147 at [...]/tree/tree/src/TChain.cxx:1586; [3] from 0x00007ffff647a69f in TTreeReader::SetEntryBase(long long, bool)+653 at [...]/tree/treeplayer/src/TTreeReader.cxx:547; [4] from 0x00007ffff647b132 in TTreeReader::SetEntry(long long)+40 at [...]/tree/treeplayer/inc/TTreeReader.h:199; [5] from 0x00007ffff647a154 in TTreeReader::SetEntriesRange(long long, long long)+322 at [...]/tree/treeplayer/src/TTreeReader.cxx:438; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10774#issuecomment-1171122132:180,Load,LoadTree,180,https://root.cern,https://github.com/root-project/root/issues/10774#issuecomment-1171122132,3,['Load'],['LoadTree']
Performance,Seen while building latest master with -Dasan=ON. ```; /home/vpadulan/Programs/rootproject/rootbuild/master-2024-09-16-testing-asan/include/ROOT/RVec.hxx:515:4: error: non-stati; c data member cannot be constexpr; did you intend to make it static?; constexpr std::size_t cacheLineSize = std::hardware_destructive_interference_size;; ^; static; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16445:271,cache,cacheLineSize,271,https://root.cern,https://github.com/root-project/root/pull/16445,1,['cache'],['cacheLineSize']
Performance,Set cache file dir when using CACHEREAD option,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2246:4,cache,cache,4,https://root.cern,https://github.com/root-project/root/pull/2246,2,"['CACHE', 'cache']","['CACHEREAD', 'cache']"
Performance,Set cling optimization level to 3 and turn off pointer checks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6038:10,optimiz,optimization,10,https://root.cern,https://github.com/root-project/root/pull/6038,1,['optimiz'],['optimization']
Performance,"Set the default optimization level for ROOT's cling to O1, and allow cling users to pass `-O...`. If perf results tell us that O1 is too slow, we can switch back to O0 for ""non-Linux or tty attached"" (i.e. interactive ROOT) in a subsequent PR. This will get merged *after* https://github.com/root-project/root/pull/6385",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7283:16,optimiz,optimization,16,https://root.cern,https://github.com/root-project/root/pull/7283,1,['optimiz'],['optimization']
Performance,"Several fixes are up in the PR, however there is something strange about `std::variant<std::optional<int>>`. On macOS, this type has a size of 16 (and not 12 as one would expect, with 8 bytes for the int + bool struct of the optional plus 4 bytes for the index member). Moreover, the additional 4 bytes come from padding at the beginning of the variant type. Clang's `dump-record-layouts` gives the following, where I cannot explain why the `__impl` member starts at an offset of 4. Could it be related to empty base class optimization, or in this case the lack thereof due to multiple inheritance? But in this case, why is the padding missing for `std::variant<X>`, with `struct X {int i; bool b;};`?. ```; *** Dumping AST Record Layout; 0 | class std::variant<class std::optional<int> >; 0 | struct std::__sfinae_ctor_base<true, true> (base) (empty); 0 | struct std::__sfinae_assign_base<true, true> (base) (empty); 4 | class std::__variant_detail::__impl<class std::optional<int> > __impl; 4 | class std::__variant_detail::__copy_assignment<struct std::__variant_detail::__traits<class std::optional<int> >, std::__variant_detail::_Trait::_TriviallyAvailable> (base); 4 | class std::__variant_detail::__move_assignment<struct std::__variant_detail::__traits<class std::optional<int> >, std::__variant_detail::_Trait::_TriviallyAvailable> (base); 4 | class std::__variant_detail::__assignment<struct std::__variant_detail::__traits<class std::optional<int> > > (base); 4 | class std::__variant_detail::__copy_constructor<struct std::__variant_detail::__traits<class std::optional<int> >, std::__variant_detail::_Trait::_TriviallyAvailable> (base); 4 | class std::__variant_detail::__move_constructor<struct std::__variant_detail::__traits<class std::optional<int> >, std::__variant_detail::_Trait::_TriviallyAvailable> (base); 4 | class std::__variant_detail::__ctor<struct std::__variant_detail::__traits<class std::optional<int> > > (base); 4 | class std::__variant_detail::__dtor<struct std::__va",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15534#issuecomment-2127329395:523,optimiz,optimization,523,https://root.cern,https://github.com/root-project/root/issues/15534#issuecomment-2127329395,1,['optimiz'],['optimization']
Performance,"Several improvements to the [`RooDataSet` constructor](https://root.cern.ch/doc/master/classRooDataSet.html#a6a2302f27e1b016a0351f6e0a0329fa2) that takes command arguments to import other data:. 1. Automatically create weight variable when importing multiple data slices (closes #11487); 2. Support importing also RooDataHists (also as slices for combined datasets), and filling the weight errors correctly to match the `weightSquared()`; 3. Create the weight variable on the fly if it was specified by name in `WeightVar()` but is not in the list of variables; 4. Have a default argument for `WeightVar(=""weight"")`, because that's usually the name anyway; 5. Fix `RooVectorDataStore::loadValues()` for loading values from another vector data store: so far it used `assignValueOnly` to copy the values over, but the values might have errors, like for example in the case of importing a RooDataHist. That's why the regular `RooAbsCollection::assign()` is used now. All of these changes result in several code simplifications in the cases where RooDataSets are imported from other data, and fixes the bugs that might have been because the `weightSqaured()` was usually not transferred correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12227:685,load,loadValues,685,https://root.cern,https://github.com/root-project/root/pull/12227,2,['load'],"['loadValues', 'loading']"
Performance,Short cut to call Modified() and Update() in a single call and on Mac perform an additional ProcessEvents().; This will solve https://sft.its.cern.ch/jira/browse/ROOT-9200,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5927:70,perform,perform,70,https://root.cern,https://github.com/root-project/root/pull/5927,1,['perform'],['perform']
Performance,"Short cut to call Modified() and Update() in a single call.; On Mac with Cocoa, it performs an additional ProcessEvents().",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14671:83,perform,performs,83,https://root.cern,https://github.com/root-project/root/pull/14671,1,['perform'],['performs']
Performance,Should slightly improve performance while there is no need to create temporary object instance,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7520:24,perform,performance,24,https://root.cern,https://github.com/root-project/root/pull/7520,1,['perform'],['performance']
Performance,"Shouldn't we merge this (in addition to https://github.com/root-project/root/pull/7260/), for example for use on Windows and/or when TBB is not available?. Related, we should put (a summary of) the performance numbers somewhere in the git reporsitory. Maybe either in the release note or one of the commit. Thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-800493373:198,perform,performance,198,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-800493373,1,['perform'],['performance']
Performance,"Side note for the record, the original valgrind report and crash happens in the case where the `vector<EnumType>` is itself held in a vector (of `CalArray`) held into an object (`CalDet`). . I have a workaround that solves the problem for the case in the minimal reproducer which resolves around setting a read rule for the vector of enums:; ```; template <typename E>; void LoadEnumCollection(/* const */ std::vector<E> &onfile, std::vector<E> &enums); {; constexpr size_t delta = sizeof(int)/sizeof(E);; const size_t nvalues = onfile.size() / delta;; onfile.resize(nvalues);; std::swap(onfile, enums);; };; ```; ```; #pragma read sourceClass=""Event"" checksums=""[0xa2558fd6]"" targetClass=""Event"" source=""std::vector<PadFlags> mFlags"" target=""mFlags"" code=""{ LoadEnumCollection(onfile.mFlags, mFlags); }""; ```; However it does not work yet for the actual/original problem :(. (In the minimal reproducer the size of the container is double what it should be has no over-write/crash, while in the original the container ends up with the right size but with an over-write and thus crash).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312#issuecomment-2334773138:375,Load,LoadEnumCollection,375,https://root.cern,https://github.com/root-project/root/issues/16312#issuecomment-2334773138,2,['Load'],['LoadEnumCollection']
Performance,"Significant revamp of FillBuffer. The new scheme insures a much more stable and efficient behavior in case of low; memory given by the user compared to the size of the buffer or 'odd' basket; layout. The basket collection is now done in 4 phases:. 1. One basket per branch, basket must contains the request entry and is not yet loaded or used,; 2. Even out by adding baskets so that all branches reach the same entry (or close); 3. Add the remaining branches from the current cluster.; 4. Add the basket from the begining of the clsuter to the current entry (if any). then repeat the 4 steps for the next cluster. The iteration is stopped as soon as the cache is 'full' as defined by these; rules:. - During step 1 of the first cluster, continue up to 4 times the user requested; cache size; - During steps 2 to 4 of the first cluster, continue up to 2 times the user; requested cache sizep; - During steps 2 to 4, the 'first' basket of a branch is accepted up to 4 times; the user requested cache size (i.e as if it had been selected during the 1st; step); - During the other clusters, continue up to the user requested cache size. A basket if rejected/skipped if its individual size is larger than the user; requested cache size. In addition, upon seeing a cache miss, FillBuffer now detects if all the basket; in the cache have already been used (read from the cache) in which case we can\; discard them and load the next set of baskets. As a side effect, we now keep a record of which baskets are in the cache and; which of those baskets have been used. The TTreePerfStats now keep a complete; log of all the basket that are:; - loaded in the main cache (and how many times); - loaded in the 'misss' cache (and how many times); - used; - read directly (complete cache miss); This will be helpful in understanding situation of over-read or slow operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1960:328,load,loaded,328,https://root.cern,https://github.com/root-project/root/pull/1960,17,"['cache', 'load']","['cache', 'load', 'loaded']"
Performance,"Simplify code, remove race condition. It didn't do much harm, but it's also not a good idea to show this in a tutorial ... - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9352:22,race condition,race condition,22,https://root.cern,https://github.com/root-project/root/pull/9352,1,['race condition'],['race condition']
Performance,Simply load MultiView.C macro and does not try to compile it; It only defines some simple service GUI structures,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7218:7,load,load,7,https://root.cern,https://github.com/root-project/root/pull/7218,1,['load'],['load']
Performance,"Since I haven't had a chance to cleanly address the TBB dependency issue, and since the other change is much more important performance-wise, I've split that off into a separate PR here which should be possible to merge quickly: https://github.com/root-project/root/pull/7105",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-768422376:124,perform,performance-wise,124,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-768422376,1,['perform'],['performance-wise']
Performance,Since JSROOT v7 one should use modules or bundle provided as `build/jsroot.js`.; This bundle can be loaded with `require.js` (as in jupyter notebooks) or just as regular script (as in jupyter lab). Usage of `JSRootCore.js` is obsolete and should be avoided. Use JSROOT version 7.2.1 as fallback if local version is not available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11767:100,load,loaded,100,https://root.cern,https://github.com/root-project/root/pull/11767,1,['load'],['loaded']
Performance,"Since Python 3.12, in the implementation of 'classobject.h' the function PyMethod_GET_SELF performs an assert to check that the passed function argument is a method:. ```; \#define _PyMethod_CAST(meth) \; (assert(PyMethod_Check(meth)), _Py_CAST(PyMethodObject*, meth)); [...]; static inline PyObject* PyMethod_GET_SELF(PyObject *meth) {; return _PyMethod_CAST(meth)->im_self;; }; ```. It's fair that the assert fails, because the Python type of `meth` in this context is not a `PyMethod_Type`, but the; `CustomInstanceMethod_Type` from cppyy. However, as can be seen in the implementation of `CustomInstanceMethod_New`, the actual C++ type that implements this custom cppy type is just the regular `PyMethodObject`. Hence, this commit suggests new assert-free `CustomInstanceMethod_GET_*` macros that replace the `PyMethod_GET_*` macros in the context of the `CustomInstanceMethod` implementation. Quick link to the file I'm talking about:; https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. Link to upstream PR:; https://github.com/wlav/CPyCppyy/pull/9",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13912:91,perform,performs,91,https://root.cern,https://github.com/root-project/root/pull/13912,1,['perform'],['performs']
Performance,"Since Python 3.12, in the implementation of 'classobject.h' the function PyMethod_GET_SELF performs an assert to check that the passed function argument is a method:. ```; \#define _PyMethod_CAST(meth) \; (assert(PyMethod_Check(meth)), _Py_CAST(PyMethodObject*, meth)); [...]; static inline PyObject* PyMethod_GET_SELF(PyObject *meth) {; return _PyMethod_CAST(meth)->im_self;; }; ```. This is in general not strictly necessary nor true, since the passed argument may be a free function. Prevent this assert from breaking the flow by preemptively catching such situations and creating the Python instance method anyway. Fixes #13864",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13903:91,perform,performs,91,https://root.cern,https://github.com/root-project/root/pull/13903,1,['perform'],['performs']
Performance,"Since ROOT 6.26, the HistFactory models include the RooBinWidthFunction; to multiply the yields in the RooHistFuncs with the inverse bin widths,; in order to get the correct probability density. That's great and fixes HistFactory for non-uniform binnings, but it is; not optimal for the `BinnedLikelihood` code path. Here, the bin widths; need to multiplied back again to get the event yields in each bin. This commit suggests to improve the situation for the new BatchMode by; propagating the information that we are building a binned likelihood; down to the RooBinWidthFunctions, such that they can remove themselves. Then, if such RooBinWidthFunctions were encountered and disabled, the NLL; knows that it can skip the multiplication with the bin widths. What is proposed here looks like a small performance optimization only,; but actually the main motivation is not performance but RooFit AD; support. By removing the RooBinWidthFunctions from the computation graphs; of HistFactory likelihoods, we don't need to implement code generation; support for this class, which would be not trivial in the general; n-dimensional case. With the suggestion in this PR, all that work is; avoided.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13024:799,perform,performance,799,https://root.cern,https://github.com/root-project/root/pull/13024,3,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"Since all df10* tutorials use IMT(hardware concurrency), it's; inefficient to run them in parallel. This regularly brings us into; timeouts in the nightlies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6274:43,concurren,concurrency,43,https://root.cern,https://github.com/root-project/root/pull/6274,1,['concurren'],['concurrency']
Performance,"Since all df10* tutorials use IMT(hardware concurrency), it's; inefficient to run them in parallel. This regularly brings us into; timeouts in the nightlies.; To avoid this, those tutorials are now locking the resource; ""multithreaded"", which means that they don't run in parallel. Other; tests that don't have this resource lock still run, though. To reduce; congestion, the RDF tutorials now claim that they use 4 CPUs. That's in; general not true, on an e.g. 8-core machine, CMake will run an IMT=8; with 4 single-threaded ctest, leading to an oversubscription of 1.5; instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6280:43,concurren,concurrency,43,https://root.cern,https://github.com/root-project/root/pull/6280,1,['concurren'],['concurrency']
Performance,"Since commit 3b623b2cfa (""[DF] Use dtors to perform clean-up tasks in column readers""), the destructor resets the `std::unique_ptr` holding a `TTreaderValue`, which is the default of the pointer's destructor.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16158:44,perform,perform,44,https://root.cern,https://github.com/root-project/root/pull/16158,1,['perform'],['perform']
Performance,"Since the proper creation of the TClass will require the dictionary for all its component let; load all the dependent library too. Note that even with explicit linking, the dictionary may; not be loaded as part of the 'main' library when the dictionary is a library separate from the; classes' code (see ATLAS setup for example). This solves ROOT-10663.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5486:95,load,load,95,https://root.cern,https://github.com/root-project/root/pull/5486,2,['load'],"['load', 'loaded']"
Performance,"Size);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:643:17: note: Assuming the condition is true; while (len_left > fBlockSeek->fSize) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:643:10: note: Loop condition is true. Entering loop body; while (len_left > fBlockSeek->fSize) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:646:13: note: Null pointer passed as an argument to a 'nonnull' parameter; memcpy(fBlockSeek->fBuffer, buf, fBlockSeek->fSize);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:658:10: error: Null pointer passed as an argument to a 'nonnull' parameter [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]; memcpy(fBlockSeek->fBuffer, buf, len_left);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:672:11: note: Calling 'TMemFile::SysWriteImpl'; return SysWriteImpl(fd,buf,len);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:610:4: note: Taking false branch; if (fExternalData) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:615:8: note: Assuming the condition is false; if (fBlockList.fBuffer == 0) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:615:4: note: Taking false branch; if (fBlockList.fBuffer == 0) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:620:11: note: Assuming the condition is false; if (fBlockOffset+len <= fBlockSeek->fSize) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:620:7: note: Taking false branch; if (fBlockOffset+len <= fBlockSeek->fSize) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:636:14: note: Assuming the condition is true; if (!fBlockSeek->fNext) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:636:10: note: Taking true branch; if (!fBlockSeek->fNext) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:637:13: note: Calling 'TMemBlock::CreateNext'; fBlockSeek->CreateNext(fDefaultBlockSize);; ^; /home/performance-test/src_master",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3891#issuecomment-502686211:8486,perform,performance-test,8486,https://root.cern,https://github.com/root-project/root/pull/3891#issuecomment-502686211,1,['perform'],['performance-test']
Performance,"Size);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:90:16: note: Calling constructor for 'TMemBlock'; fNext = new TMemBlock(size,this);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:60:35: note: Null pointer value stored to field 'fBuffer'; fPrevious(previous), fNext(0), fBuffer(0), fSize(0); ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:63:8: note: Assuming the condition is false; if (size != -1) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:63:4: note: Taking false branch; if (size != -1) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:90:16: note: Returning from constructor for 'TMemBlock'; fNext = new TMemBlock(size,this);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:637:13: note: Returning from 'TMemBlock::CreateNext'; fBlockSeek->CreateNext(fDefaultBlockSize);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:643:17: note: Assuming the condition is true; while (len_left > fBlockSeek->fSize) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:643:10: note: Loop condition is true. Entering loop body; while (len_left > fBlockSeek->fSize) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:646:13: note: Null pointer passed as an argument to a 'nonnull' parameter; memcpy(fBlockSeek->fBuffer, buf, fBlockSeek->fSize);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:658:10: error: Null pointer passed as an argument to a 'nonnull' parameter [clang-analyzer-core.NonNullParamChecker,-warnings-as-errors]; memcpy(fBlockSeek->fBuffer, buf, len_left);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:672:11: note: Calling 'TMemFile::SysWriteImpl'; return SysWriteImpl(fd,buf,len);; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:610:4: note: Taking false branch; if (fExternalData) {; ^; /home/performance-test/src_master/io/io/src/TMemFile.cxx:615:8: note: Assuming the condition is false; if (fBlockList.fBuffer == 0) ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3891#issuecomment-502686211:7638,perform,performance-test,7638,https://root.cern,https://github.com/root-project/root/pull/3891#issuecomment-502686211,1,['perform'],['performance-test']
Performance,"Skip registration of TFile UUIDs in the global list when using the """"""READ_WITHOUT_GLOBALREGISTRATION"""""" option with TFile (used by default in TTreeProcessorMT). This avoids the final use of the global write lock during typical RDataFrame event loops, significantly improving multi-threaded performance for cases with many files and many threads. This follows up on https://github.com/root-project/root/pull/9486 and mostly finishes addressing https://github.com/root-project/root/issues/7710. Skipping the UUID registration breaks the particular case where a TRef points to the TFile object, but as per the discussion in this PR, this use case has thread-safety problems for TFile objects being managed by TTreeProcessorMT anyways. A test case is below. Produce the test dataset:. ```cpp; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;; const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {; TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");; TTree *tree = new TTree(""tree"", """");; tree->Branch(""outval"", &outval);; for (unsigned int ientry = 0; ientry < nentries; ++ientry) {; tree->Fill();; }; tree->Write();; fout->Close();; }. }; ```. Test event loop:. ```python; import ROOT; ROOT.gInterpreter.ProcessLine("".O3""); ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""); chain.Add(""test_*.root""). d = ROOT.ROOT.RDataFrame(chain); res = d.Sum(""outval""). resval = res.GetValue(); print(resval); ```. With 256 threads (on partly loaded machine, but still representative):. Baseline:; Percent of CPU this job got: 1557%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:49.89. +this PR; Percent of CPU this job got: 14271%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.11",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10318:276,multi-thread,multi-threaded,276,https://root.cern,https://github.com/root-project/root/pull/10318,3,"['load', 'multi-thread', 'perform']","['loaded', 'multi-threaded', 'performance']"
Performance,Slow performance was due to excessive fsync and writing of TTree objects resulting in byte written to disk far exceeding the file size ... (code was using AutoSave instead of AutoFlush). Added speeding up of test-bench.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3196:5,perform,performance,5,https://root.cern,https://github.com/root-project/root/pull/3196,1,['perform'],['performance']
Performance,Small change to TTree::OptimizeBaskets to avoid disc reads,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/369:23,Optimiz,OptimizeBaskets,23,https://root.cern,https://github.com/root-project/root/pull/369,1,['Optimiz'],['OptimizeBaskets']
Performance,"Small update to give further context, the following seemingly similar but subtly different snippet works also for ROOT 6.32. ```python; import ROOT. def main():; ROOT.gInterpreter.ProcessLine(""const auto myvec = TVectorT<float>();""); print(ROOT.myvec). if __name__ == ""__main__"":; raise SystemExit(main()); ```. And it is clear that in this case ProcessLine tries much harder than Declare to automatically load libraries that might be necessary to evaluate the line. Also, the reproducer from the issue description fails with the same error in ROOT latest master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16601#issuecomment-2393259545:406,load,load,406,https://root.cern,https://github.com/root-project/root/issues/16601#issuecomment-2393259545,1,['load'],['load']
Performance,"Snapshot, Cache, Define and Filter did not check that the types of; columns used as arguments in jitted code were valid (in particular,; that the type of custom columns was correctly understood by cling).; This patch provides a function that performs the validity check,; GetValidatedArgTypes, that is used everywhere instead of GetColumnTypes; (now unused and therefore deleted) and ColumnName2ColumnTypeName. An exception with a user-friendly error message is thrown in case of; error, which fixes ROOT-10458.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5595:10,Cache,Cache,10,https://root.cern,https://github.com/root-project/root/pull/5595,2,"['Cache', 'perform']","['Cache', 'performs']"
Performance,"So far, we have been unable to come up with a reliable way to detect runtime_cxxmodules. The problem is that one can detect easily if ROOT was built with -Druntime_cxxmodules=On, however, the system can have a module which cannot load successfully (due to for example missing requirements). In that case, the implementation will switch back to non-modules. Short answer, yes we can provide such API, however, that would not be 100% reliable. A reliable API should work on per-library basis. It should check if we are in running in runtime_cxxmodules mode, if there is a prebuilt pcm file for this library and if it has fulfilled requirements. In essence that'd be loading of the module in dry-run mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2854#issuecomment-434252716:230,load,load,230,https://root.cern,https://github.com/root-project/root/pull/2854#issuecomment-434252716,2,['load'],"['load', 'loading']"
Performance,"So if a library A depends on library B, and we load A without loading B first wouldn't we get the same callback allowing us to resolve that dependency?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2135#issuecomment-394478073:47,load,load,47,https://root.cern,https://github.com/root-project/root/pull/2135#issuecomment-394478073,2,['load'],"['load', 'loading']"
Performance,So it seems to be the less common case were valgrind is confused by the hand optimization of compression algorithm .. kinda annoying .. but if you do not see any visible effect (i.e. all data is correct when read back) then ignore ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2182#issuecomment-396385636:77,optimiz,optimization,77,https://root.cern,https://github.com/root-project/root/pull/2182#issuecomment-396385636,1,['optimiz'],['optimization']
Performance,So my understanding is that we need to:. 1. Continue having the new CI run all tests :); 2. Do something about either `CPPYY`'s use of std::regexp or TMVA's use of PyTorch (This could be removing support for PyTorch or temporarily disabling the tutorials until the (newly created and/or this) Issue noting the conflict CPPYY/PyTorch is resolved (for example if the early load mentioned early works).; 3. Update one of the Ubuntu configuration to have PyTorch installed (**if and only if** we continue supporting PyTorch ; as we can see here if we don't test it we should assume it does not work :) ]. Am I missing something?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15211#issuecomment-2052236813:371,load,load,371,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2052236813,1,['load'],['load']
Performance,"So naturally, this has a performance impact: Obviously using only the number of threads that the user allowed ROOT to use will only be less than the entire machine (side note: this can also be a good thing because it means less idle threads if there isn't enough work...). Additionally removing the asynchronous decompression in `RClusterPool` isn't ideal (after this, decompression only starts when the cluster is actually requested instead of when it's done pre-loading and it's blocking the ""main"" thread) and it negatively impacts performance, but @jblomer and me discussed and we prefer going to a correct implementation first before re-introducing other optimizations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14807#issuecomment-1965958686:25,perform,performance,25,https://root.cern,https://github.com/root-project/root/pull/14807#issuecomment-1965958686,4,"['load', 'optimiz', 'perform']","['loading', 'optimizations', 'performance']"
Performance,"So to sum up what we know so far:. - the kind of code that RDF needs to jit takes very long to compile for large computation graphs, and requires a large amount of RAM; - cling jitting times are consistent with `clang++ -O0` compile times; - compile times of the generated code increase quickly (much faster than linearly) w.r.t. the number of lines of code (which increase linearly with the size of the computation graph); - clang++ compile times for this kind of code are much lower than gcc's, independently of the STL used and the gcc version; - compile times of clang++ are much lower if libc++ is used instead of libstdc++; - turning on optimizations, even just `-O1`, with libstdc++, is completely unfeasible for this amount of jitted code; - with libc++, `-O1` might be ok, but `-O2` is not; - performance profiling of clang++ shows that the gain in compile times come from less time spent in `llvm::MachineFunction::getOrCreateLandingPadInfo` (see flamegraphs above). @stwunsch am I forgetting anything?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7604#issuecomment-804132077:643,optimiz,optimizations,643,https://root.cern,https://github.com/root-project/root/issues/7604#issuecomment-804132077,2,"['optimiz', 'perform']","['optimizations', 'performance']"
Performance,"So we need to either move the (static) initialization before the first search (causing a possibly spurious load of `libHist`) or we need to use something like:; ```c++; {; if (!name || !*name); return nullptr;. static std::atomic<bool> isInited = false;. // Capture the state before calling FindObject as it could change; // between the end of FindObject and the if statement.; bool wasInited = isInited.load();; auto f1 = fFunctions->FindObject(name);; if (f1 || wasInited); return f1;. // If 2 threads gets here at the same time, the static initialization ""lock""; // will stall one of them until ProcessLine is finished and both will return the ; // correct answer.; // Note: if one (or more) thread(s) is suspended right after the 'isInited.load()`; // and restart after this thread has finished the initialization (i.e. a rare case), ; // the only penalty we pay is a spurious 2nd lookup for an unknown function. ; [[maybe_unused]] static const auto _res = [&isInited]() {; gROOT->ProcessLine(""TF1::InitStandardFunctions();"");; isInited = true;; return true;; }();; return fFunctions->FindObject(name);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14969#issuecomment-1998922258:107,load,load,107,https://root.cern,https://github.com/root-project/root/pull/14969#issuecomment-1998922258,3,['load'],['load']
Performance,"So, I ran my new benchmark that uses more branches and more structure, and the difference between current master (already with my last PR merged in) and this PR (labeled unmanaged in the figure) is shown below:; ![screenshot](https://user-images.githubusercontent.com/249404/41915833-f3bef020-7956-11e8-9c7c-e8b79dba0ad0.png); There seems to be a problem that the number of wait counts increases quite a lot. This is because the lock that we are removing in the constructor was turning many other lock regions into a no-op, since the lock was already taken. However, after the change, they become visible, with a big effect on performance. You can see in the screenshot that the number of waits on `TList::MakeIterator`, for example, jumps from 62 to 3302, and all that locking/unlocking has a cost... The wait count increases by roughly 3x for the 3 lines I highlighted. So it's probably better to leave things as they are for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2248#issuecomment-400313875:627,perform,performance,627,https://root.cern,https://github.com/root-project/root/pull/2248#issuecomment-400313875,1,['perform'],['performance']
Performance,"So, there were some developments: it seems that trying to catch an exception lead to no proper return for GetEntry.; Removing the try/except i have now a proper `-1` result on GetEntry and i do have this:; ```; ALIBUILD##[Monday 25.10.21 19:18] adrian@hal : ~/work/jalien-cache-manager (master) $; ./tfile_check.py parse broken_AO2D.root step 100000; Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596; Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608; Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0; DF_2913970966704988325/O2track::Entry(0) -> result: -1; ALIBUILD##[Monday 25.10.21 19:18] adrian@hal : ~/work/jalien-cache-manager (master) $; echo $?; 5; ```; The file unfortunately is quite big: https://cernbox.cern.ch/index.php/s/YM3ONVhEVa72KNX; and for reference the code that i use for testing is: https://github.com/adriansev/AO2Dproto/blob/0eff5a37fd0622767ee01b2b3da84b29e996a1ef/tfile_check.py",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9154#issuecomment-951092615:272,cache,cache-manager,272,https://root.cern,https://github.com/root-project/root/issues/9154#issuecomment-951092615,2,['cache'],['cache-manager']
Performance,Solves a bug in the TFITSIO code when reading a FITS binary table that; contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only; had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1590:128,Load,LoadHDU,128,https://root.cern,https://github.com/root-project/root/pull/1590,1,['Load'],['LoadHDU']
Performance,Solves problem with gcc10 warnings. Temporary skip CI to avoid load on Jenkins nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5840:63,load,load,63,https://root.cern,https://github.com/root-project/root/pull/5840,1,['load'],['load']
Performance,"Some debug symbols seem to be missing so we don't have line number information, but this log is already enough to confirm my hypothesis above: 2.9 GB come from std::vector allocations performed by `RDF::FillHelper::Exec<ROOT::VecOps::RVec<float>, 0>`. The simplest workaround is to specify a binning for the histograms. I am not sure whether this is a common enough problem to warrant a fix in RDF if the fix involves thread synchronization or other potential performance pessimizations. Alternatively, if we can come up with a mutex-free algorithm to automatically select binnings that are compatible among threads that might be the best option -- some related discussion on this topic is [here](https://sft.its.cern.ch/jira/browse/ROOT-8883). Moving this to priority ""default"" since there is a workaround. EDIT: another workaround is to run on fewer events, which might be reasonable since this kind of usecase is typically part of an exploratory phase of the analysis.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6676#issuecomment-716447711:184,perform,performed,184,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-716447711,2,['perform'],"['performance', 'performed']"
Performance,"Some libraries are layered can depend on other libraries on a private paths. That is, libA can depend on libB which is neither on the LD_LIBRARY_PATH nor on a known system path. The posix linker injects ""variables"" such as @rpath which is expanded at link time to resolve the libraries on a relative path. Prior to this patch, cling's Dyld-based symbol resolution could not trace down such cases causing failures in symbol resolution when a symbol is only defined in libB (a private library). This patch implements the basic posix linker substitutions allowing cling's Dyld-based symbol resolution implementation to follow more closely the linker rules. ## Performance. |platform|test|master|PRv1|PRv2| mem master|mem PRv2|; |:--------|:---|:---------:|:-----------:|:-----------:|:-----------:|:-----------:|; |ubu20|roottest-python-pythonizations|6.5|6.55|6.65|342076|347168|; |ubu20|roottest-cling|112.8|114.53|181.26|411048|416036|; |ubu20|roottest-python|148.5|136.26|144.72|394292|397120|; |ubu20|roottest-root-hist|16.78|17.35|15.45|465156|235084|; |ubu20|roottest-root-math|28.28|27.89|27.40|424072|371256|; |ubu20|roottest-root-tree|462.84|510.59|465.79|796512|797992|; |ubu20|roottest-root-treeformula|117.53|129.16|114.44|261184|260168|; |ubu20|root-io-stdarray|66.90|67.89|65.71|263424|255120|; |ubu20|roottest-root-treeformula|117.55|129.10|; |osx 10.15|roottest-python-pythonizations|17.25|16.06|; |osx 10.15|roottest-cling|346.06|343.46|; |osx 10.15|roottest-root-hist|36.06|36.22|; |osx 10.15|roottest-root-math|49.78|52.42|; |osx 10.15|root-io-stdarray|119.32|118.73|. That PR should reduce the number of `stat` calls improving #7774. Kudos Alexander Penev (@alexander-penev).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6969:657,Perform,Performance,657,https://root.cern,https://github.com/root-project/root/pull/6969,1,['Perform'],['Performance']
Performance,"Some measurements from `ntpl-perf01`; `ttreeTBufferMerger` is a simple program that writes 20000000 entries (2 branches) with each thread. The first timing is with `master`, then the first commit from this PR, and finally the second commit (removing the queue):; <details>; <summary>full data</summary>. ```; ntpl-perf01:/data/ssdext4/jonas/20231113; ttreeTBufferMerger 20000000 16; User time (seconds): 406.16; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:30.30; Maximum resident set size (kbytes): 3392068. ttreeTBufferMerger 20000000 16; User time (seconds): 404.52; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:30.24; Maximum resident set size (kbytes): 3631212. ttreeTBufferMerger 20000000 16; User time (seconds): 407.27; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:29.89; Maximum resident set size (kbytes): 2579396. ttreeTBufferMerger 20000000 128; User time (seconds): 6726.12; Elapsed (wall clock) time (h:mm:ss or m:ss): 2:11.26; Maximum resident set size (kbytes): 90232780. ttreeTBufferMerger 20000000 128; User time (seconds): 4558.00; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:50.53; Maximum resident set size (kbytes): 34501092. ttreeTBufferMerger 20000000 128; User time (seconds): 4089.10; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:40.39; Maximum resident set size (kbytes): 19870924. ntpl-perf01:/data/hddext4/jonas/20231113; ttreeTBufferMerger 20000000 16; User time (seconds): 406.02; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:59.20; Maximum resident set size (kbytes): 3479780. ttreeTBufferMerger 20000000 16; User time (seconds): 405.00; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:00.22; Maximum resident set size (kbytes): 4285016. ttreeTBufferMerger 20000000 16; User time (seconds): 406.67; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:00.26; Maximum resident set size (kbytes): 2565488. ttreeTBufferMerger 20000000 128; User time (seconds): 6967.42; Elapsed (wall clock) time (h:mm:ss or m:ss): 4:35.79; Maximum resident set size (kbytes): 892528",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1808248792:254,queue,queue,254,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1808248792,1,['queue'],['queue']
Performance,"Some more points gathered during a debug session:. - The problem appears only on ARM/Linux, not on ARM/Mac; - The streamer info output; ```; [1965517:tpc-tracker]: i= 2, mPadSubset type= 23, offset= 56, len=2, method=0 [optimized]; ```; does not seem to indicate a problem because the same list of streamer elements also contains the expected; ```; o2::tpc::PadSubset mPadSubset offset= 56 type= 3 Subset type; ```; - If the class `o2::tpc::CalArray<o2::tpc::PadFlags>` is added to the dictionaries (Linkdef), the stacktrace changes and the crash becomes reproducible. In this case, there is an error writing beyond vector boundaries.; - The next step is to try to reproduce the crash with a debug build of ROOT",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16312#issuecomment-2315484053:220,optimiz,optimized,220,https://root.cern,https://github.com/root-project/root/issues/16312#issuecomment-2315484053,1,['optimiz'],['optimized']
Performance,"Some of the TMVA tutorials run in parallel and rely on the same generated file. Typically, one tutorial may depend on another one that generates the file. The top level ones did not depend on each other, thus running in parallel and causing a race condition. This PR should solve this issue by making them depend on each other.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/426:243,race condition,race condition,243,https://root.cern,https://github.com/root-project/root/pull/426,1,['race condition'],['race condition']
Performance,"Some of the tests in `tutorials/roostats/` uses the file `example_combined_GaussExample_model.root`. If this file does not exist, one of the tests will create it. As these are executed in parallel, there is a chance of race condition and one of the tests might fail, as seen in this build: http://cdash.cern.ch/testDetails.php?test=22401472&build=324697; This PR attempts to fix this by executing all tests sequentially that uses the file `example_combined_GaussExample_model.root`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/362:219,race condition,race condition,219,https://root.cern,https://github.com/root-project/root/pull/362,1,['race condition'],['race condition']
Performance,"Some platforms respect RTLD_LOCAL: symbols from libraries loaded with; this flag cannot be resolved by dlsym through the process. They should; instead be exposed to the JIT by calling ExposeHiddenSharedLibrarySymbols().; But then the JIT needs to actually make use of these libraries from; symbol resolution. That is done by setting SearchOrder to SO_LoadedLast, as; nicely documented in that flag. Fixes ROOT not finding libCling symbols on some platforms, e.g. CentOS7,; Ubuntu 16 and 18.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6126:58,load,loaded,58,https://root.cern,https://github.com/root-project/root/pull/6126,1,['load'],['loaded']
Performance,"Some speedups to targeted RooFit classes to speed up the RooFit tests such that the performance gain with the batch mode is more prominent relatively (as this PR removes unnecessary overhead that affected both the batch mode and the scalar mode). More detail in the commit messages. All changes are tested by the stressRooFit suite, including the multidimentional case in the RooNDKeysPdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10671:84,perform,performance,84,https://root.cern,https://github.com/root-project/root/pull/10671,1,['perform'],['performance']
Performance,"Some timing studies. O0 is 640787cf03 @ master, O2 is this branch on top of the same commit; O1 is using that branch but changing to `CGOpts.OptimizationLevel = 1;`. Running `time root -l -b -q ...`, i.e. this includes the ROOT startup time. ### stressHistogram. Operation | O0 | O1 | O2; ----|---|---|-------; jit | 2 | 5 | 5; exe | 27 | 26 | 24; *total* | 29 | 31 | 29. Compilation `-O2` is 11s (gcc) and 7s (clang).; O2-compiled stressHistogram takes 24s execution time, i.e. O2 in cling and compiled are identical. ### stressGraphics; Operation | O0 | O1 | O2; ----|---|---|-------; jit | 1 | 2 | 5; exe | 29 | 66 | 25; *total* | 30 | 68 | 30. stressGraphics has lots of generated code. It was causing the optimizer to blow up before, see 7fcf3c61dacacd99f6ff1f3c5a8c4a1c8cf3eb10 (later reverted 934cf3e1aea5118a2d53d575d048280617d21626). That part seems to be okay now. ### Tutorials:. Tutorial | O0 | O1 | O2; ----|---|---|-------; dataframe/df017_vecOpsHEP.C | 3s | 6s | 5s; dataframe/df007_snapshot.C | 9s | 21s | 14s; geom/na49.C | 6s | 7s | 2m34s in O2 (*). (*): commenting out `#pragma cling optimize(0)` in na49.C. This macro is generated code; the important part here is that we *can* switch cling to O0 through a pragma, and re-gain the speed: the original code in O2 runs in 8s.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2360#issuecomment-417269611:141,Optimiz,OptimizationLevel,141,https://root.cern,https://github.com/root-project/root/pull/2360#issuecomment-417269611,3,"['Optimiz', 'optimiz']","['OptimizationLevel', 'optimize', 'optimizer']"
Performance,Sometimes the serialised methods will fail to load due to missing files.; This adds more output and checks to verify that required files exist to; better pinpoint the problem.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2526:46,load,load,46,https://root.cern,https://github.com/root-project/root/pull/2526,1,['load'],['load']
Performance,"Sorry guys I've been on holidays :-) good to see that this is solved :-). > ""You"" was Axel and Philippe + whoever is doing TXNetNG these days :); > Michal (main developer of XrdCl) and I assumed the crash happens because libXrdCl was already unloaded, see xrootd issue: [xrootd/xrootd#1487](https://github.com/xrootd/xrootd/issues/1487); > ; > Now, you say the library is still loaded ... then it's probably more likely that destruction ob XrdCl global objects has already happened or was in progress (I just learned c++ is rather relaxed about how this is allowed to happen).; > ; > @simonmichal ... what do you think?. we use a nifty counter to protect against static-destruction-order-fiasco so in principle if the `libXrdCl` has not been unloaded it should not crash",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8767#issuecomment-895029183:378,load,loaded,378,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-895029183,1,['load'],['loaded']
Performance,"Sorry, I did not even see this was a VLA. What Axel said applies. Btw, that does not compile with MSVC (not the initialization, VLAs are generally forbidden) and will break your Windows build, if you care. For the same behavior on Windows you need to call stack allocation functions like `_alloca` or `_malloca` and then `memset`. `std::vector` works in all cases, but goes to the heap, which is what I would recommend unless you can proof this code to be a performance bottleneck. > The C++y solution is to use a std::vector. I guess you are refering to polymorphic memory resources in C++17 which IIRC have a stack allocator? I think it is `monotonic_buffer_resource`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8475#issuecomment-864811067:458,perform,performance,458,https://root.cern,https://github.com/root-project/root/pull/8475#issuecomment-864811067,2,"['bottleneck', 'perform']","['bottleneck', 'performance']"
Performance,"Sorry, but I'm not sure python-dev is really **required**: https://root-forum.cern.ch/t/cannot-build-6-20-04-without-python-dev/38707/13 To verify this, try to install python-dev, then configure ROOT, switching **OFF** pyroot option, then uninstall python-dev, and finally 'make' it. And it builds. At least for me -- I performed steps I've just enumerated, and it didn't fail. -Timur",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5303#issuecomment-610284741:320,perform,performed,320,https://root.cern,https://github.com/root-project/root/pull/5303#issuecomment-610284741,1,['perform'],['performed']
Performance,"Sorry, this is not true. The man pages include rootcling, hadd, talk about makefiles, root5, pq2 caches and many other things. This is not minimal maintenance. As a matter of fact, it is already outdated and this since a long while. ; Here I am talking about improving documentation concentrating efforts on a single source of information, the total amount of work needed is the same but differently organised...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1487#issuecomment-357188999:97,cache,caches,97,https://root.cern,https://github.com/root-project/root/pull/1487#issuecomment-357188999,1,['cache'],['caches']
Performance,"Sounds good. I think it will be nice to have support in ROOT to use a different Python version than it was compiled against, provided the versions are compatible. Or even make a single libPyROOT work both with Python 2.x and 3.x if possible. As far as I understand, that should be possible too if we don't link directly to the Python library, but let symbols be resolved from the already loaded Python interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3396#issuecomment-462714404:388,load,loaded,388,https://root.cern,https://github.com/root-project/root/pull/3396#issuecomment-462714404,1,['load'],['loaded']
Performance,Spent Left Speed; 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0* About to connect() to webdav.lcg.triumf.ca port 2880 (#0); * Trying 2607:f8f0:660:3::40...; * Connected to webdav.lcg.triumf.ca (2607:f8f0:660:3::40) port 2880 (#0); * Initializing NSS with certpath: sql:/etc/pki/nssdb; * failed to load '/etc/grid-security/certificates/7022e3c4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/69105f4f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-Root-2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/69105f4f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/edca0fc0.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/b1159c4c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/727146a8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-secur,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:1433,load,load,1433,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"Split monolitic RBrowser libs on following components. * **ROOTBrowsable** - core functionality for browsing of objects plus support of TObject classes, depends only on libCore and libRIO; * **ROOTObjectDrawProvider** - small factory for drawing TObject in RCanvas/TCanvas, dependency from Gpad, Gapdv7; * **ROOTTreeDrawProvider** - special support of TTree::Draw on RCanvas/TCanvas, dependency from Gpad, Gapdv7, Tree; * **ROOTHistDrawProvider** - v7 Hist drawing on RCanvas, dependency from Gapdv7, Histv7; * **ROOTBrowserv7** - RBrowser and RFileDialog, depend on RBrowsable and gpad libs, load necessary drawing/browser libs when required. That is missing is configurable factory methods to load library depending on object class.; For the moment library names are hard corded",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4767:593,load,load,593,https://root.cern,https://github.com/root-project/root/pull/4767,2,['load'],['load']
Performance,"Spoke too early: reopening this since we still see a similar issue:. ```; [229504:internal-dpl-aod-reader]: #0 0x00007fe1961dddff in wait4 () from /lib/x86_64-linux-gnu/libc.so.6; [229504:internal-dpl-aod-reader]: #1 0x00007fe19614d0e7 in ?? () from /lib/x86_64-linux-gnu/libc.so.6; [229504:internal-dpl-aod-reader]: #2 0x00007fe1969d55bc in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x89e2a0) at /mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-tags.vHOm1z6zVq/SOURCES/ROOT/v6-24-02/v6-24-02/core/unix/src/TUnixSystem.cxx:2120; [229504:internal-dpl-aod-reader]: #3 TUnixSystem::StackTrace (this=0x89e2a0) at /mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-tags.vHOm1z6zVq/SOURCES/ROOT/v6-24-02/v6-24-02/core/unix/src/TUnixSystem.cxx:2411; [229504:internal-dpl-aod-reader]: #4 0x00007fe1968ab27a in DefaultErrorHandler (level=<optimized out>, abort_bool=<optimized out>, location=<optimized out>, msg=0x3ab1bb0 ""fExtraBasket == nullptr && \""fExtraBasket should have been set to nullptr by GetFreshBasket\"" violated at line 1523 of `/mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-""...) at /mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-tags.vHOm1z6zVq/SOURCES/ROOT/v6-24-02/v6-24-02/core/base/src/TErrorDefaultHandler.cxx:174; [229504:internal-dpl-aod-reader]: #5 0x00007fe196962149 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7fe198af8752 """", fmt=0x7fff2c9644d0 ""\021\001"", ap=0x7fff2c9644c0) at /mnt/mesos/sandbox/sandbox/jenkins/workspace/DailyBuilds/DailyO2-ubuntu2004/daily-tags.vHOm1z6zVq/ubuntu2004_x86-64/GCC-Toolchain/v10.2.0-alice2-1/include/c++/10.2.0/bits/basic_string.h:186; [229504:internal-dpl-aod-reader]: #6 0x00007fe196962b68 in Fatal (location=location; [229504:internal-dpl-aod-reader]: entry=0x7fe198af8752 """", fmt=<optimized out>) at /mnt/mesos/sandbox/sandbox/jenk",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-913117485:371,optimiz,optimized,371,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-913117485,4,['optimiz'],['optimized']
Performance,"Stacktrace printed by ROOT:. ```; ===========================================================; #10 0x00007f7b4b7a234c in __pthread_kill_implementation () from /usr/lib/libc.so.6; #11 0x00007f7b4b7554b8 in raise () from /usr/lib/libc.so.6; #12 0x00007f7b4b73f534 in abort () from /usr/lib/libc.so.6; #13 0x00007f7b4b796397 in __libc_message () from /usr/lib/libc.so.6; #14 0x00007f7b4b7ac33c in malloc_printerr () from /usr/lib/libc.so.6; #15 0x00007f7b4b7ae65c in _int_free () from /usr/lib/libc.so.6; #16 0x00007f7b4b7b0be3 in free () from /usr/lib/libc.so.6; #17 0x00007f7b4a62d5ca in operator delete (ptr=<optimized out>) at /usr/src/debug/gcc/libstdc++-v3/libsupc++/del_op.cc:49; #18 0x00007f7b4a6d0402 in __gnu_cxx::new_allocator<char>::deallocate (__t=<optimized out>, __p=<optimized out>, this=0x556146114390) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ext/new_allocator.h:132; #19 std::allocator_traits<std::allocator<char> >::deallocate (__n=<optimized out>, __p=<optimized out>, __a=...) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/alloc_traits.h:492; #20 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x556146114390) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:245; #21 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x556146114390) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:240; #22 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate (this=this; entry=0x556146114390, __pos=0, __len1=__len1; entry=93876280332080, __s=__s; entry=0x7f7b4b2e4420 ""x"", __len2=1) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.tcc:317; #23 0x00007f7b4a6d14bf in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace (",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10092#issuecomment-1063993297:609,optimiz,optimized,609,https://root.cern,https://github.com/root-project/root/issues/10092#issuecomment-1063993297,5,['optimiz'],['optimized']
Performance,Start 393: gtest-tree-dataframe-test-datasource-csv; 416/1231 Test #388: gtest-tree-dataframe-test-dataframe-vary ............................ Passed 6.93 sec; Start 394: gtest-tree-dataframe-test-dataframe-concurrency; 417/1231 Test #379: gtest-tree-dataframe-test-dataframe-snapshot ........................ Passed 20.68 sec; Start 395: gtest-tree-dataframe-test-datasource-ntuple; 418/1231 Test #389: gtest-tree-dataframe-test-datasource-more ........................... Passed 7.48 sec; Start 396: gtest-tree-dataframe-test-datasource-sqlite; 419/1231 Test #395: gtest-tree-dataframe-test-datasource-ntuple ......................... Passed 1.80 sec; Start 397: pyunittests-dataframe-misc; 420/1231 Test #393: gtest-tree-dataframe-test-datasource-csv ............................ Passed 3.56 sec; Start 398: pyunittests-dataframe-histograms; 421/1231 Test #391: gtest-tree-dataframe-test-datasource-trivial ........................ Passed 6.48 sec; Start 399: pyunittests-dataframe-cache; 422/1231 Test #396: gtest-tree-dataframe-test-datasource-sqlite ......................... Passed 4.60 sec; Start 400: pyunittests-dataframe-merge-results; 423/1231 Test #397: pyunittests-dataframe-misc .......................................... Passed 3.66 sec; 424/1231 Test #398: pyunittests-dataframe-histograms .................................... Passed 3.40 sec; 444/1231 Test #400: pyunittests-dataframe-merge-results ................................. Passed 4.48 sec; 446/1231 Test #376: gtest-tree-dataframe-test-dataframe-simple .......................... Passed 38.57 sec; 447/1231 Test #399: pyunittests-dataframe-cache ......................................... Passed 10.50 sec; Start 447: tutorial-dataframe-df000_simple; Start 448: tutorial-dataframe-df001_introduction; Start 449: tutorial-dataframe-df002_dataModel; 470/1231 Test #447: tutorial-dataframe-df000_simple ..................................... Passed 2.85 sec; Start 450: tutorial-dataframe-df003_profiles; Start 451: tutorial-dat,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:5970,cache,cache,5970,https://root.cern,https://github.com/root-project/root/pull/10300,1,['cache'],['cache']
Performance,Starting build on ROOT-performance-centos7-multicore/default with flags -DKEEP_PR_BUILDS_FOR_A_DAY=ON,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5842#issuecomment-647010121:23,perform,performance-,23,https://root.cern,https://github.com/root-project/root/pull/5842#issuecomment-647010121,1,['perform'],['performance-']
Performance,Starting build on ROOT-performance-centos7-multicore/default with flags -Dfail-on-missing=ON -Dcudnn=On,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5148#issuecomment-599440265:23,perform,performance-,23,https://root.cern,https://github.com/root-project/root/pull/5148#issuecomment-599440265,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-centos7`/`default`, `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7278#issuecomment-784959012:80,perform,performance-,80,https://root.cern,https://github.com/root-project/root/pull/7278#issuecomment-784959012,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2671#issuecomment-607814534:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/2671#issuecomment-607814534,1224,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-628690398:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-628690398,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-DCMAKE_BUILD_TYPE=RelWithDebInfo -DLLVM_BUILD_TYPE=RelWithDebInfo -DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4717#issuecomment-623270615:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/4717#issuecomment-623270615,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-DCMAKE_CXX_COMPILER='clang++' -Dasan=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5237#issuecomment-605153578:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/5237#issuecomment-605153578,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On -Druntime_cxxmodule=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760#issuecomment-619365034:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/3760#issuecomment-619365034,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2717#issuecomment-616747164:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/2717#issuecomment-616747164,99,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-Dcxxmodules=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5445#issuecomment-618844694:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/5445#issuecomment-618844694,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-Druntime_cxxmodules=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5281#issuecomment-607954557:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/5281#issuecomment-607954557,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-Dxrootd=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5531#issuecomment-623655694:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/5531#issuecomment-623655694,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac1015`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/146#issuecomment-692112866:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/146#issuecomment-692112866,1675,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-DCMAKE_BUILD_TYPE=RelWithDebInfo`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6323#issuecomment-689448887:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/6323#issuecomment-689448887,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6445#issuecomment-701739068:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/6445#issuecomment-701739068,67,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-Dasserts=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6560#issuecomment-704291043:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/6560#issuecomment-704291043,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-Dcompression_default=lz4`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5721#issuecomment-639010751:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/5721#issuecomment-639010751,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac1015`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6401#issuecomment-705050315:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/6401#issuecomment-705050315,372,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-DCMAKE_CXX_FLAGS=-DROOFIT_NEW_BATCH_INTERFACE`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6650#issuecomment-709486887:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/6650#issuecomment-709486887,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6559#issuecomment-722708471:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/6559#issuecomment-722708471,23,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-Dbuiltin_nlohmannjson=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6690#issuecomment-714527581:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/6690#issuecomment-714527581,3,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6606#issuecomment-765186224:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/6606#issuecomment-765186224,1616,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7018#issuecomment-758825549:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/7018#issuecomment-758825549,50,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-Dclingtest=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8204#issuecomment-845217459:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/8204#issuecomment-845217459,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-Ddataframe_distributed_pyspark=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7371#issuecomment-791253022:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/7371#issuecomment-791253022,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-Dvdt=OFF -Dbuiltin_vdt=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7247#issuecomment-781336895:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/7247#issuecomment-781336895,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-Dvdt=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7247#issuecomment-781289305:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/7247#issuecomment-781289305,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6685#issuecomment-726806353:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/6685#issuecomment-726806353,231,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6559#issuecomment-726154446:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/6559#issuecomment-726154446,26,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-Dminuit2=On -Dminuit2_omp=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-735820965:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-735820965,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-Dminuit2=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-738049423:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-738049423,4,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora32`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7354#issuecomment-848946599:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/7354#issuecomment-848946599,10,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7283#issuecomment-943342911:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/7283#issuecomment-943342911,320,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9208#issuecomment-954557904:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/9208#issuecomment-954557904,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-Droofit_multiprocess=ON -Dbuiltin_zeromq=OFF -Dbuiltin_cppzmq=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-952067379:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-952067379,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-Droofit_multiprocess=ON -Dbuiltin_zeromq=ON -Dbuiltin_cppzmq=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-952067724:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-952067724,15,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-Droofit_multiprocess=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-943651591:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-943651591,3,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11.6`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7283#issuecomment-966239437:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/7283#issuecomment-966239437,37,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7499#issuecomment-994506651:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-994506651,2190,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On -Dxml=Off`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10104#issuecomment-1066813282:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/10104#issuecomment-1066813282,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9486#issuecomment-1026001657:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/9486#issuecomment-1026001657,3,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14` with flags `-Dbuiltin_gtest=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10301#issuecomment-1091250924:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/10301#issuecomment-1091250924,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14` with flags `-Dclingtest=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9904#issuecomment-1047806874:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/9904#issuecomment-1047806874,3,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14` with flags `-Dr=On -Dfail-on-missing=Off`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9836#issuecomment-1034662299:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/9836#issuecomment-1034662299,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14` with flags `-Dr=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9836#issuecomment-1033915486:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/9836#issuecomment-1033915486,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14` with flags `-Droofit_multiprocess=ON -Dbuiltin_zeromq=ON -Dbuiltin_cppzmq=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-970421351:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-970421351,25,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14` with flags `-Droofit_multiprocess=ON -Dfail-on-missing=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-975335635:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-975335635,7,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14` with flags `-Droofit_multiprocess=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-975317903:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-975317903,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14`, `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14` with flags `-Droofit_multiprocess=ON -Dbuiltin_zeromq=ON -Dbuiltin_cppzmq=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9473#issuecomment-998024810:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/9473#issuecomment-998024810,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6969#issuecomment-867641090:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/6969#issuecomment-867641090,1207,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-DCMAKE_CXX_STANDARD=17 -Droot7=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9037#issuecomment-929028503:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/9037#issuecomment-929028503,3,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8379#issuecomment-857774171:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/8379#issuecomment-857774171,7,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-Dbuildin_xrootd=Off`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-926738301:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-926738301,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-Dbuiltin_xrootd=Off`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7335#issuecomment-933271788:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/7335#issuecomment-933271788,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-Dtmva-sofie=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8782#issuecomment-892435618:54,perform,performance-,54,https://root.cern,https://github.com/root-project/root/pull/8782#issuecomment-892435618,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`default`, `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac12arm`/`cxx20`, `windows10`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13273#issuecomment-1835546155:56,perform,performance-,56,https://root.cern,https://github.com/root-project/root/pull/13273#issuecomment-1835546155,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac1015`/`cxx17`, `mac11`/`cxx14`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9895#issuecomment-1155313876:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/9895#issuecomment-1155313876,65,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu18.04`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac1015`/`cxx17`, `mac11`/`cxx14`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7271#issuecomment-1264677368:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/7271#issuecomment-1264677368,1361,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu18.04`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac1015`/`cxx17`, `mac11`/`cxx14`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1185548222:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1185548222,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu18.04`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac1015`/`cxx17`, `mac11`/`cxx14`, `windows10`/`cxx14` with flags `-Dcheck_connectivity=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11630#issuecomment-1289140442:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/11630#issuecomment-1289140442,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu18.04`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac1015`/`cxx17`, `mac11`/`cxx14`, `windows10`/`cxx14` with flags `-Dimt=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11253#issuecomment-1228387774:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/11253#issuecomment-1228387774,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu18.04`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac1015`/`cxx17`, `mac11`/`cxx14`, `windows10`/`cxx14` with flags `-Droofit_multiprocess=ON -Dbuiltin_zeromq=ON -Dbuiltin_cppzmq=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11577#issuecomment-1282495922:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/11577#issuecomment-1282495922,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu18.04`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac12`/`noimt`, `mac11`/`cxx14`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8265#issuecomment-1344123915:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/8265#issuecomment-1344123915,2211,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu18.04`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac12`/`noimt`, `mac11`/`cxx14`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1326753190:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1326753190,10,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu18.04`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac12`/`noimt`, `mac11`/`cxx14`, `windows10`/`cxx14` with flags `-Dbuiltin_xrootd=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12247#issuecomment-1421066976:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/12247#issuecomment-1421066976,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu18.04`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac12`/`noimt`, `mac11`/`cxx14`, `windows10`/`cxx14` with flags `-Droot7=ON -DCMAKE_CXX_STANDARD=17`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11932#issuecomment-1357604997:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/11932#issuecomment-1357604997,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu18.04`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac12`/`noimt`, `mac11`/`cxx14`, `windows10`/`cxx14` with flags `-Druntime_cxxmodules=Off`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11922#issuecomment-1356793256:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/11922#issuecomment-1356793256,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6632#issuecomment-1655874939:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/6632#issuecomment-1655874939,521,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`cxx14` with flags `-DCMAKE_CXX_STANDARD=17`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13243#issuecomment-1634504589:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/13243#issuecomment-1634504589,6,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13302#issuecomment-1646955084:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/13302#issuecomment-1646955084,4,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On -Druntime_cxxmodules=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13123#issuecomment-1613731197:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/13123#issuecomment-1613731197,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13123#issuecomment-1617426265:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/13123#issuecomment-1617426265,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`cxx14` with flags `-Druntime_cxxmodules=OFF -DCTEST_TEST_EXCLUDE_NONE=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13139#issuecomment-1619013334:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/13139#issuecomment-1619013334,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`cxx14` with flags `-Druntime_cxxmodules=Off -DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13054#issuecomment-1600386504:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/13054#issuecomment-1600386504,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`default` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12844#issuecomment-1660510469:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/12844#issuecomment-1660510469,58,['perform'],['performance-']
Performance,"Starting build on `ROOT-debian10-i386`/`soversion`, `ROOT-performance-centos8-multicore`/`cxx17`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac13arm`/`cxx20`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13003#issuecomment-1590986972:58,perform,performance-,58,https://root.cern,https://github.com/root-project/root/pull/13003#issuecomment-1590986972,5,['perform'],['performance-']
Performance,"Starting build on `ROOT-fedora30`/`default`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4575#issuecomment-545809104:51,perform,performance-,51,https://root.cern,https://github.com/root-project/root/pull/4575#issuecomment-545809104,3,['perform'],['performance-']
Performance,"Starting build on `ROOT-fedora32`/`default`, `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac1015`/`cxx17`, `windows10`/`cxx14` with flags `-During=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919#issuecomment-669170175:81,perform,performance-,81,https://root.cern,https://github.com/root-project/root/pull/5919#issuecomment-669170175,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-fedora32`/`default`, `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7942#issuecomment-833829621:81,perform,performance-,81,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-833829621,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-fedora32`/`default`, `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-During=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7942#issuecomment-823460831:81,perform,performance-,81,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-823460831,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-fedora34`/`default`, `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-Dbuiltin_tbb=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9065#issuecomment-933602209:81,perform,performance-,81,https://root.cern,https://github.com/root-project/root/pull/9065#issuecomment-933602209,3,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6445#issuecomment-698671001:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/6445#issuecomment-698671001,78,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` with flags `-DCMAKE_BUILD_TYPE=Debug -DKEEP_PR_BUILDS_FOR_A_DAY=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4395#issuecomment-532514874:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4395#issuecomment-532514874,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` with flags `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug -DKEEP_PR_BUILDS_FOR_A_DAY=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4395#issuecomment-532269491:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4395#issuecomment-532269491,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` with flags `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5094#issuecomment-641916510:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/5094#issuecomment-641916510,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` with flags `-DCMAKE_BUILD_TYPE=Debug`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5235#issuecomment-605622854:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/5235#issuecomment-605622854,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` with flags `-DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3100#issuecomment-458540749:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3100#issuecomment-458540749,3,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3533#issuecomment-472619423:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3533#issuecomment-472619423,7,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` with flags `-DDIAGNOSTICS_FAIL_TESTS=ON -DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5591#issuecomment-642524625:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/5591#issuecomment-642524625,7,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` with flags `-DKEEP_PR_BUILDS_FOR_A_DAY=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5842#issuecomment-647010415:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/5842#issuecomment-647010415,12,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` with flags `-DKEEP_PR_BUILDS_FOR_A_DAY=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4395#issuecomment-532525494:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4395#issuecomment-532525494,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` with flags `-DKEPP_PR_BUILDS_FOR_A_DAY=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5842#issuecomment-647009624:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/5842#issuecomment-647009624,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` with flags `-Dccache=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3100#issuecomment-448576616:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3100#issuecomment-448576616,2,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` with flags `-Dfail-on-missing=ON -Dcudnn=On -Dcuda=ON -Dtmva-gpu=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5148#issuecomment-599452884:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/5148#issuecomment-599452884,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` with flags `-Dfail-on-missing=ON -Dcudnn=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5148#issuecomment-599447445:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/5148#issuecomment-599447445,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`default` with flags `-Dfail-on-missing=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5148#issuecomment-599439104:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/5148#issuecomment-599439104,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1306#issuecomment-600517285:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/1306#issuecomment-600517285,1136,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4675#issuecomment-562967997:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4675#issuecomment-562967997,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_TYPE=RelWithDebInfo`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4675#issuecomment-565308002:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4675#issuecomment-565308002,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-DCMAKE_BUILD_TYPE=Release -DLLVM_BUILD_TYPE=Release`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4675#issuecomment-565368708:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4675#issuecomment-565368708,3,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On -Dless_includes=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5123#issuecomment-599243650:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/5123#issuecomment-599243650,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2732#issuecomment-601032479:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/2732#issuecomment-601032479,113,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-DKEEP_PR_BUILDS_FOR_A_DAY=ON -Dpyroot_experimental=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4945#issuecomment-583287178:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4945#issuecomment-583287178,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-DKEEP_PR_BUILDS_FOR_A_DAY=ON -Dpyroot_experimental=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4945#issuecomment-583308739:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4945#issuecomment-583308739,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-Dclingtest=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4750#issuecomment-573570821:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4750#issuecomment-573570821,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-Ddev=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5085#issuecomment-595110824:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/5085#issuecomment-595110824,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-Dfail-on-missing=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5083#issuecomment-600004172:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/5083#issuecomment-600004172,4,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-Dless_includes=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5123#issuecomment-597670601:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/5123#issuecomment-597670601,27,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-Dpyroot_experimental=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4647#issuecomment-564522966:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4647#issuecomment-564522966,3,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-Dpyroot_experimental=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4576#issuecomment-565717831:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4576#issuecomment-565717831,33,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `pyroot_experimental=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4916#issuecomment-581458513:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4916#issuecomment-581458513,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`rtcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/516#issuecomment-552470012:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/516#issuecomment-552470012,141,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`rtcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4603#issuecomment-548405649:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4603#issuecomment-548405649,9,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`rtcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-Dpyroot_experimental=ON -Druntime_cxxmodules=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-547595964:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-547595964,10,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`rtcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`cxx14` with flags `-Dpyroot_experimental=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-552998863:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-552998863,14,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`rtcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`default` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4448#issuecomment-546966319:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4448#issuecomment-546966319,16,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`rtcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4583#issuecomment-547087424:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4583#issuecomment-547087424,5,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`rtcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dpyroot_experimental=ON -Druntime_cxxmodules=OFF -Dcxx17=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-547090679:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-547090679,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-ubuntu16`/`rtcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dpyroot_experimental=ON -Druntime_cxxmodules=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-547055211:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-547055211,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3695#issuecomment-483737844:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3695#issuecomment-483737844,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`default` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2778#issuecomment-480186289:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/2778#issuecomment-480186289,114,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCMAKE_BUILD_TYPE=RelWithDebInfo`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3633#issuecomment-479930298:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3633#issuecomment-479930298,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `ROOT-ubuntu18.04-i386`/`cxx14`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dctest_test_exclude_none=on`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2917#issuecomment-480037874:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/2917#issuecomment-480037874,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3735#issuecomment-486727612:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3735#issuecomment-486727612,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1534#issuecomment-459028190:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/1534#issuecomment-459028190,2751,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCMAKE_BUILD_TYPE=""Debug"" -DLLVM_BUILD_TYPE=""Debug"" -Droottest=ON -Dtesting=ON -Dpyroot_experimental=ON -Druntime_cxxmodules=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4576#issuecomment-545871996:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4576#issuecomment-545871996,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCMAKE_BUILD_TYPE=""Debug"" -DLLVM_BUILD_TYPE=""Debug"" -Droottest=ON -Dtesting=ON -Dpyroot_experimental=ON -Druntime_cxxmodules=Off`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4576#issuecomment-545940286:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4576#issuecomment-545940286,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCMAKE_BUILD_TYPE=""Debug"" -DLLVM_BUILD_TYPE=""Debug"" -Droottest=ON -Dtesting=ON -Dpyroot_experimental=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4576#issuecomment-545892671:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4576#issuecomment-545892671,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCMAKE_BUILD_TYPE=Debug -DLLVM_BUILD_TYPE=Debug`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3896#issuecomment-499246293:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3896#issuecomment-499246293,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCMAKE_BUILD_TYPE=RelWithDebInfo`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3633#issuecomment-479467809:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3633#issuecomment-479467809,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCMAKE_CXX_FLAGS=-DR__SUGGEST_NEW_INTERFACE`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3100#issuecomment-458458595:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3100#issuecomment-458458595,4,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCMAKE_CXX_STANDARD=14 -Droot7=ON -Dwebgui=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4069#issuecomment-510042965:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4069#issuecomment-510042965,4,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCMAKE_CXX_STANDARD=14 -Droot7=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4455#issuecomment-536985659:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4455#issuecomment-536985659,23,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCMAKE_CXX_STANDARD=14 -Droot7=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4510#issuecomment-540046842:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4510#issuecomment-540046842,12,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCMAKE_CXX_STANDARD=14 -Droot7=on`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4532#issuecomment-541028593:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4532#issuecomment-541028593,4,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCMAKE_CXX_STANDARD=14`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2999#issuecomment-524074196:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/2999#issuecomment-524074196,12,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2917#issuecomment-460798366:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/2917#issuecomment-460798366,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=On -DCMAKE_CXX_STANDARD=17 -DLLVM_BUILD_TYPE=Debug`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4491#issuecomment-539008694:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4491#issuecomment-539008694,3,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=On -DCMAKE_CXX_STANDARD=17 -DLLVM_BUILD_TYPE=Release`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4491#issuecomment-541500438:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4491#issuecomment-541500438,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=On -DCMAKE_CXX_STANDARD=17`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4491#issuecomment-538970229:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4491#issuecomment-538970229,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=On -Dmpi=ON -Dfail-on-missing=ON -Dminuit2_mpi=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4375#issuecomment-532273816:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4375#issuecomment-532273816,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1534#issuecomment-466433272:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/1534#issuecomment-466433272,197,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DCXXFLAGS=""${CXXFLAGS} -DR__SUGGEST_NEW_INTERFACE""`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3100#issuecomment-458451113:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3100#issuecomment-458451113,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DKEEP_PR_BUILDS_FOR_A_DAY=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-542193814:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-542193814,11,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-DROOT_PYTHON_NO_LINK=TRUE`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3396#issuecomment-462645674:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3396#issuecomment-462645674,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dall=ON -Dalien=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3764#issuecomment-488722752:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3764#issuecomment-488722752,3,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dall=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3236#issuecomment-454570432:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3236#issuecomment-454570432,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Darrow=ON -Dfail-on-missing=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3236#issuecomment-458464115:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3236#issuecomment-458464115,4,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dbuiltin_all=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4181#issuecomment-520714648:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4181#issuecomment-520714648,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dbuiltin_pcre=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3209#issuecomment-449378115:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3209#issuecomment-449378115,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dbuiltin_zstd=ON -DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-540587181:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-540587181,6,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dbuiltin_zstd=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4323#issuecomment-531778750:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4323#issuecomment-531778750,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dccache=ON -DCMAKE_CXX_FLAGS=""-O2 -DNDEBUG -DR__SUGGEST_FASTER_FUNCTIONS -DR__SUGGEST_FASTER_CLASSES""`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3100#issuecomment-448551323:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3100#issuecomment-448551323,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dccache=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-448615018:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-448615018,36,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dctest_test_exclude_none=on`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2917#issuecomment-485805761:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/2917#issuecomment-485805761,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dmlp=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3917#issuecomment-499537290:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3917#issuecomment-499537290,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dpyroot_exeperimental=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-541035019:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-541035019,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dpyroot_experimental=ON -Druntime_cxxmodules=Off`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-545183708:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-545183708,4,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dpyroot_experimental=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3282#issuecomment-455546435:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3282#issuecomment-455546435,11,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dpyroot_experimental=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3521#issuecomment-471599912:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3521#issuecomment-471599912,6,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Droot7=ON -DCMAKE_CXX_STANDARD=""14""`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4363#issuecomment-529428493:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4363#issuecomment-529428493,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Droot7=ON -DCMAKE_CXX_STANDARD=14`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3466#issuecomment-467354790:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3466#issuecomment-467354790,17,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Droot7=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3466#issuecomment-467317571:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3466#issuecomment-467317571,17,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Droot7=On -DCMAKE_CXX_STANDARD=14 -Dwebgui=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4146#issuecomment-517697269:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4146#issuecomment-517697269,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Droot7=On -DCMAKE_CXX_STANDARD=On -Dwebgui=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4146#issuecomment-517697184:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4146#issuecomment-517697184,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Droot7=On -Dwebgui=On -DCMAKE_CXX_STANDARD=14`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4041#issuecomment-508506213:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4041#issuecomment-508506213,9,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Droot7=On -Dwebgui=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4041#issuecomment-508501205:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4041#issuecomment-508501205,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Droottest=ON -Dtesting=ON -Dpyroot_experimental=ON -Druntime_cxxmodules=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279#issuecomment-546613095:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/4279#issuecomment-546613095,6,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora27`/`noimt`, `ROOT-fedora29`/`python3`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dvmc=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3730#issuecomment-488004626:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3730#issuecomment-488004626,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora29`/`python3` with flags `-Dpyroot_experimental=ON -DCTEST_TEST_EXCLUDE_NONE=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3298#issuecomment-456535653:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3298#issuecomment-456535653,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora29`/`python3` with flags `-Dpyroot_experimental=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3298#issuecomment-456424502:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3298#issuecomment-456424502,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora29`/`python3`, `mac1014`/`cxx17` with flags `-Dpyroot_experimental=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3322#issuecomment-457595414:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3322#issuecomment-457595414,3,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`default`, `mac1015`/`cxx17` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760#issuecomment-630408247:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3760#issuecomment-630408247,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos7-multicore`/`noimt` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3216#issuecomment-455207796:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3216#issuecomment-455207796,3,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos7-multicore`/`python3`, `ROOT-fedora27`/`noimt`, `ROOT-ubuntu16`/`rtcxxmod`, `mac1014`/`cxx17`, `windows10`/`default` with flags `-Dccache=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3190#issuecomment-448502724:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3190#issuecomment-448502724,2,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`cxx17` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10760#issuecomment-1175292662:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/10760#issuecomment-1175292662,13,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`cxx17` with flags `-DCTEST_TEST_EXCLUDE_NONE=On -Druntime_cxxmodules=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13112#issuecomment-1614197508:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/13112#issuecomment-1614197508,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`cxx17` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11347#issuecomment-1243429120:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/11347#issuecomment-1243429120,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos8-multicore`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10787#issuecomment-1162812040:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/10787#issuecomment-1162812040,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`default` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6532#issuecomment-704988044:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/6532#issuecomment-704988044,47,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`default` with flags `-DCMAKE_CXX_FLAGS_RELEASE=brokenFlag`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7932#issuecomment-823138677:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/7932#issuecomment-823138677,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF -Droot7=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760#issuecomment-1282869648:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3760#issuecomment-1282869648,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=On -Droofit=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11609#issuecomment-1283613901:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/11609#issuecomment-1283613901,2,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6854#issuecomment-734009448:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/6854#issuecomment-734009448,7,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`default` with flags `-DLLVM_BUILD_TYPE=Debug -DBUILD_TYPE=Debug`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760#issuecomment-1026992298:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3760#issuecomment-1026992298,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`default` with flags `-DLLVM_BUILD_TYPE=Debug -DCMAKE_BUILD_TYPE=Debug`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760#issuecomment-1027009152:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/3760#issuecomment-1027009152,13,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`default` with flags `-Dcuda=On -Dtmva-gpu=On -Dfail-on-missing=Off`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9437#issuecomment-993473541:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/9437#issuecomment-993473541,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`default` with flags `-Dcuda=On -Dtmva-gpu=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9437#issuecomment-993459634:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/9437#issuecomment-993459634,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`default` with flags `-Dminuit2_omp=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9327#issuecomment-996543720:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/9327#issuecomment-996543720,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`default` with flags `-Dr=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9819#issuecomment-1033735062:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/9819#issuecomment-1033735062,2,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`default` with flags `-Dvdt=OFF -Dbuiltin_vdt=OFF`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7247#issuecomment-781296150:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/7247#issuecomment-781296150,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos8-multicore`/`default`, `mac1015`/`noimt` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9464#issuecomment-996868962:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/9464#issuecomment-996868962,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos8-multicore`/`default`, `mac1015`/`python3`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9342#issuecomment-980048898:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/9342#issuecomment-980048898,1,['perform'],['performance-']
Performance,Starting build on `ROOT-performance-centos8-multicore`/`soversion` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14031#issuecomment-1863078066:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/14031#issuecomment-1863078066,4,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`default` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7812#issuecomment-1740052237:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/7812#issuecomment-1740052237,723,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`default` with flags `-DCMAKE_BUILD_TYPE=RelWithDebInfo`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13654#issuecomment-1721315628:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/13654#issuecomment-1721315628,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13273#issuecomment-1746813790:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/13273#issuecomment-1746813790,8,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13818#issuecomment-1750467976:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/13818#issuecomment-1750467976,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`default` with flags `-DLLVM_BUILD_TYPE=RelWithDebInfo`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13641#issuecomment-1721366466:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1721366466,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`default` with flags `-Dasan=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13641#issuecomment-1719369782:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/13641#issuecomment-1719369782,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac12arm`/`cxx20`, `windows10`/`default` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6466#issuecomment-1818750232:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/6466#issuecomment-1818750232,2274,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac12arm`/`cxx20`, `windows10`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13808#issuecomment-1881026736:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/13808#issuecomment-1881026736,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac12arm`/`cxx20`, `windows10`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14031#issuecomment-2033189027:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/14031#issuecomment-2033189027,2,['perform'],['performance-']
Performance,"Starting build on `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac12arm`/`cxx20`, `windows10`/`default` with flags `-Dmathmore=On`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6908#issuecomment-1808063694:24,perform,performance-,24,https://root.cern,https://github.com/root-project/root/pull/6908#issuecomment-1808063694,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-ubuntu18.04`/`default`, `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5396#issuecomment-616416732:84,perform,performance-,84,https://root.cern,https://github.com/root-project/root/pull/5396#issuecomment-616416732,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-ubuntu18.04`/`noimt`, `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac1015`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5748#issuecomment-636046100:82,perform,performance-,82,https://root.cern,https://github.com/root-project/root/pull/5748#issuecomment-636046100,1,['perform'],['performance-']
Performance,"Starting build on `ROOT-ubuntu2004`/`python3`, `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7139#issuecomment-779124822:83,perform,performance-,83,https://root.cern,https://github.com/root-project/root/pull/7139#issuecomment-779124822,1,['perform'],['performance-']
Performance,"Starting build on `centos7`/`gcc49`, `mac1012`/`native`, `slc6`/`gcc49`, `slc6`/`gcc62`, `slc6`/`gcc62`, `ubuntu14`/`native`, `ubuntu14`/`native` with flags `-Dvc=OFF -Dimt=ON -Dccache=ON -Druntime_cxxmodules=On -DCMAKE_BUILD_TYPE=Optimized`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1229#issuecomment-339566477:231,Optimiz,Optimized,231,https://root.cern,https://github.com/root-project/root/pull/1229#issuecomment-339566477,1,['Optimiz'],['Optimized']
Performance,"Starting build on `centos7`/`gcc49`, `mac1012`/`native`, `slc6`/`gcc49`, `slc6`/`gcc62`, `slc6`/`gcc62`, `ubuntu14`/`native`, `ubuntu14`/`native`, `windows10`/`vc15` with flags `-Dvc=OFF -Dimt=ON -Dccache=ON -Druntime_cxxmodules=On -DCMAKE_BUILD_TYPE=Optimized`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1229#issuecomment-339351358:251,Optimiz,Optimized,251,https://root.cern,https://github.com/root-project/root/pull/1229#issuecomment-339351358,1,['Optimiz'],['Optimized']
Performance,"Starting build on `centos7`/`gcc49`, `mac1012`/`native`, `slc6`/`gcc49`, `slc6`/`gcc62`, `ubuntu14`/`native` with flags `-Dvc=OFF -Dimt=ON -Dccache=ON -DCMAKE_BUILD_TYPE=Optimized`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/971#issuecomment-328758956:170,Optimiz,Optimized,170,https://root.cern,https://github.com/root-project/root/pull/971#issuecomment-328758956,1,['Optimiz'],['Optimized']
Performance,"Starting build on `mac1013`/`default`, `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos7-multicore`/`default`, `ROOT-fedora29`/`python3`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1015`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5720#issuecomment-635158522:75,perform,performance-,75,https://root.cern,https://github.com/root-project/root/pull/5720#issuecomment-635158522,1,['perform'],['performance-']
Performance,"Starting build on `mac1014`/`default`, `ROOT-fedora30`/`default`, `ROOT-ubuntu2004`/`default`, `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-fedora30`/`cxx14`, `ROOT-fedora31`/`noimt`, `ROOT-ubuntu16`/`nortcxxmod`, `mac1014`/`python3`, `mac11.0`/`cxx17`, `windows10`/`cxx14` with flags `-Ddataframe_distpyspark=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7371#issuecomment-792710625:131,perform,performance-,131,https://root.cern,https://github.com/root-project/root/pull/7371#issuecomment-792710625,1,['perform'],['performance-']
Performance,"Starting build on `mac1014`/`python3`, `ROOT-performance-centos7-multicore`/`default` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6036#issuecomment-659474630:45,perform,performance-,45,https://root.cern,https://github.com/root-project/root/pull/6036#issuecomment-659474630,1,['perform'],['performance-']
Performance,"Starting build on `mac11arm`/`default`, `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10084#issuecomment-1062985233:76,perform,performance-,76,https://root.cern,https://github.com/root-project/root/pull/10084#issuecomment-1062985233,2,['perform'],['performance-']
Performance,"Starting build on `mac11arm`/`noimt`, `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10358#issuecomment-1092784469:74,perform,performance-,74,https://root.cern,https://github.com/root-project/root/pull/10358#issuecomment-1092784469,1,['perform'],['performance-']
Performance,"Starting build on `mac12`/`default`, `ROOT-debian10-i386`/`cxx14`, `ROOT-performance-centos8-multicore`/`default`, `ROOT-ubuntu16`/`nortcxxmod`, `ROOT-ubuntu2004`/`soversion`, `mac1015`/`python3`, `mac11`/`cxx17`, `windows10`/`cxx14` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10391#issuecomment-1098163634:73,perform,performance-,73,https://root.cern,https://github.com/root-project/root/pull/10391#issuecomment-1098163634,1,['perform'],['performance-']
Performance,"Starting build on `mac12`/`default`, `mac13`/`default`, `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac12arm`/`cxx20`, `windows10`/`default` with flags `-DCTEST_TEST_EXCLUDE_NONE=ON`; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14622#issuecomment-1932599516:62,perform,performance-,62,https://root.cern,https://github.com/root-project/root/pull/14622#issuecomment-1932599516,1,['perform'],['performance-']
Performance,"Starting build on `mac13`/`cxx20`, `mac13arm`/`cxx20`, `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`default` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13700#issuecomment-1729447240:61,perform,performance-,61,https://root.cern,https://github.com/root-project/root/pull/13700#issuecomment-1729447240,1,['perform'],['performance-']
Performance,"Starting build on `mac13arm`/`cxx17`, `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`default` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13491#issuecomment-1684085085:44,perform,performance-,44,https://root.cern,https://github.com/root-project/root/pull/13491#issuecomment-1684085085,1,['perform'],['performance-']
Performance,"Starting build on `macbeta`/`cxx20`, `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`default` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13737#issuecomment-1737476889:43,perform,performance-,43,https://root.cern,https://github.com/root-project/root/pull/13737#issuecomment-1737476889,1,['perform'],['performance-']
Performance,"Starting build on `macbeta`/`default`, `ROOT-performance-centos8-multicore`/`soversion`, `ROOT-ubuntu2204`/`nortcxxmod`, `ROOT-ubuntu2004`/`python3`, `mac11`/`noimt`, `mac12arm`/`cxx20`, `windows10`/`default` ; [How to customize builds](https://github.com/phsft-bot/build-configuration/blob/master/README.md)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13737#issuecomment-1740587634:45,perform,performance-,45,https://root.cern,https://github.com/root-project/root/pull/13737#issuecomment-1740587634,1,['perform'],['performance-']
Performance,"Starting from the `debian:sid` Docker image, create the following environment:; ```; apt update && apt dist-upgrade; apt install cmake gcc g++ git libxrootd-client-dev ninja-build python3; ```; Then clone `root.git` and configure + build with; ```; cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -Dx11=OFF ../root/; ninja; ```; Afterwards try executing `./bin/root.exe tutorials/dataframe/df103_NanoAODHiggsAnalysis.C`. It will hang and setting `XRD_LOGLEVEL=Debug` reveals:; ```; [2023-02-06 12:00:28.136048 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Sending authentication data; [2023-02-06 12:00:28.137346 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Trying to authenticate using krb5; [2023-02-06 12:00:28.137406 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Cannot get credentials for protocol krb5: Seckrb5: No or invalid credentials; No credentials cache found (p=xrootd/eospublic.cern.ch@CERN.CH).; [2023-02-06 12:00:28.137968 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Trying to authenticate using gsi; [2023-02-06 12:00:32.761097 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Cannot get credentials for protocol gsi: Secgsi: ErrParseBuffer: unknown CA: cannot verify server certificate: kXGS_init; ```. Instead, installing the `xrootd-client` package and running; ```; xrdcp root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod_skimmed/SMHiggsToZZTo4L.root .; ```; works just fine - the `Debug` log shows that it proceeds with `Trying to authenticate using uni` (after `Cannot get credentials for protocol gsi` was also signaled kind of immediately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12231:897,cache,cache,897,https://root.cern,https://github.com/root-project/root/issues/12231,1,['cache'],['cache']
Performance,Std (53 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd14; 76: [ OK ] RWLock.concurrentResetRestoreStd14 (62 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd17; 76: [ OK ] RWLock.concurrentResetRestoreStd17 (64 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStdTBB; 76: [ OK ] RWLock.concurrentResetRestoreStdTBB (45 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStdTBBUnique; 76: [ OK ] RWLock.concurrentResetRestoreStdTBBUnique (33 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestore; 76: [ OK ] RWLock.LargeconcurrentResetRestore (5534 ms); 76: [ RUN ] RWLock.concurrentResetRestoreTL; 76: [ OK ] RWLock.concurrentResetRestoreTL (59 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestoreTL; 76: [ OK ] RWLock.LargeconcurrentResetRestoreTL (4693 ms); 76: [ RUN ] RWLock.concurrentReadsAndWrites; 76: [ OK ] RWLock.concurrentReadsAndWrites (3099 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesSpin; 76: [ OK ] RWLock.concurrentReadsAndWritesSpin (3097 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd; 76: [ OK ] RWLock.concurrentReadsAndWritesStd (3129 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd14; 76: [ OK ] RWLock.concurrentReadsAndWritesStd14 (3210 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd17; 76: [ OK ] RWLock.concurrentReadsAndWritesStd17 (3105 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStdTBB; 76: [ OK ] RWLock.concurrentReadsAndWritesStdTBB (3168 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStdTBBUnique; 76: [ OK ] RWLock.concurrentReadsAndWritesStdTBBUnique (3112 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWrites; 76: [ OK ] RWLock.LargeconcurrentReadsAndWrites (3128 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWritesStd; 76: [ OK ] RWLock.LargeconcurrentReadsAndWritesStd (3111 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWritesStd14; 76: [ OK ] RWLock.LargeconcurrentReadsAndWritesStd14 (3121 ms); 76: [ RUN ] RWLock.LargeconcurrentReadsAndWritesStd17; 76: [ OK ] RWLock.LargeconcurrentReadsAndWritesStd17 (3128 ms); 76: [ RUN ] RWLock.Large,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-742071485:9606,concurren,concurrentReadsAndWritesStd,9606,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-742071485,1,['concurren'],['concurrentReadsAndWritesStd']
Performance,Still loading modules for `type`... @vgvassilev ; ```; ❯ ROOTDEBUG=3 root.exe -l -b -q Demo.C; Info in <TROOT::InitSystem>: running with gDebug = 3; dynpath = /home/jun/dev/root/Debug/lib:.:/home/jun/dev/root/Debug/lib:/lib/x86_64-linux-gnu/glibc-hwcaps/x86-64-v3:/lib/x86_64-linux-gnu/glibc-hwcaps/x86-64-v2:/lib/x86_64-linux-gnu/tls/haswell/x86_64:/lib/x86_64-linux-gnu/tls/haswell:/lib/x86_64-linux-gnu/tls/x86_64:/lib/x86_64-linux-gnu/tls:/lib/x86_64-linux-gnu/haswell/x86_64:/lib/x86_64-linux-gnu/haswell:/lib/x86_64-linux-gnu/x86_64:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu/glibc-hwcaps/x86-64-v3:/usr/lib/x86_64-linux-gnu/glibc-hwcaps/x86-64-v2:/usr/lib/x86_64-linux-gnu/tls/haswell/x86_64:/usr/lib/x86_64-linux-gnu/tls/haswell:/usr/lib/x86_64-linux-gnu/tls/x86_64:/usr/lib/x86_64-linux-gnu/tls:/usr/lib/x86_64-linux-gnu/haswell/x86_64:/usr/lib/x86_64-linux-gnu/haswell:/usr/lib/x86_64-linux-gnu/x86_64:/usr/lib/x86_64-linux-gnu:/lib/glibc-hwcaps/x86-64-v3:/lib/glibc-hwcaps/x86-64-v2:/lib/tls/haswell/x86_64:/lib/tls/haswell:/lib/tls/x86_64:/lib/tls:/lib/haswell/x86_64:/lib/haswell:/lib/x86_64:/lib:/usr/lib/glibc-hwcaps/x86-64-v3:/usr/lib/glibc-hwcaps/x86-64-v2:/usr/lib/tls/haswell/x86_64:/usr/lib/tls/haswell:/usr/lib/tls/x86_64:/usr/lib/tls:/usr/lib/haswell/x86_64:/usr/lib/haswell:/usr/lib/x86_64:/usr/lib; Info in <TCling::__LoadModule>: Preloading module ROOT_FwdNamespaces. Info in <TCling::__LoadModule>: Preloading module libc. Info in <TCling::__LoadModule>: Preloading module std. Info in <TCling::__LoadModule>: Preloading module _Builtin_intrinsics. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_C. Info in <TCling::__LoadModule>: Preloading module ROOT_Config. Info in <TCling::__LoadModule>: Preloading module ROOT_Rtypes. Info in <TCling::__LoadModule>: Preloading module ROOT_Foundation_Stage1_NoRTTI. Info in <TCling::__LoadModule>: Preloading module Core. Info in <TCling::__LoadModule>: Preloading module Rint. Info in <TCling::__LoadModule>: P,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1268084280:6,load,loading,6,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1268084280,1,['load'],['loading']
Performance,"StreamerInfoActions::ReadSTLMemberWiseSameClass, &TStreamerInfoActions::ReadSTLObjectWiseFastArray> (buf=..., addr=0x109986ba0, conf=0x10a395fa0) at /builddir/build/BUILD/root-6.28.00/io/io/src/TStreamerInfoActions.cxx:1405; #37 0x00007fffa92d3130 in TStreamerInfoActions::TConfiguredAction::operator() (this=0x109f4d790, this=0x109f4d790, object=0x109986ba0, buffer=...) at /builddir/build/BUILD/root-6.28.00/io/io/inc/TStreamerInfoActions.h:123; #38 TBufferFile::ApplySequence (obj=0x109986ba0, sequence=..., this=0x7ffff83ea100) at /builddir/build/BUILD/root-6.28.00/io/io/src/TBufferFile.cxx:3580; #39 TBufferFile::ApplySequence (this=0x7ffff83ea100, sequence=..., obj=0x109986ba0) at /builddir/build/BUILD/root-6.28.00/io/io/src/TBufferFile.cxx:3562; #40 0x00007fffa92de27c in TBufferFile::ReadClassBuffer (this=0x7ffff83ea100, cl=0x10a596170, pointer=0x109986ba0, onFileClass=<optimized out>) at /builddir/build/BUILD/root-6.28.00/io/io/inc/TStreamerInfo.h:209; #41 0x00007fffa8f0d858 in TClass::ReadBuffer (this=<optimized out>, b=..., pointer=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/meta/src/TClass.cxx:6758; #42 0x00007fffa98ea688 in TMVA::Experimental::SOFIE::RModel::Streamer (R(bool)=..., this=0x109986ba0) at /builddir/build/BUILD/root-6.28.00/tmva/sofie/src/RModel.cxx:646; #43 TMVA::Experimental::SOFIE::RModel::Streamer (this=0x109986ba0, R(bool)=...) at /builddir/build/BUILD/root-6.28.00/tmva/sofie/src/RModel.cxx:644; #44 0x00007fffa8f0aa30 in TClass::StreamerTObject (pThis=0x10a596170, object=0x109986ba0, b=...) at /builddir/build/BUILD/root-6.28.00/core/meta/src/TClass.cxx:6797; #45 0x00007fffa93abef0 in TClass::Streamer (onfile_class=0x0, b=..., obj=0x109986ba0, this=0x10a596170) at /builddir/build/BUILD/root-6.28.00/core/meta/inc/TClass.h:610; #46 TKey::ReadObjectAny (this=0x10aa98220, expectedClass=<optimized out>) at /builddir/build/BUILD/root-6.28.00/io/io/src/TKey.cxx:1102; #47 0x00007fffa934c51c in TDirectoryFile::GetObjectChecked (this=0x7ff",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:9944,optimiz,optimized,9944,https://root.cern,https://github.com/root-project/root/issues/12372,1,['optimiz'],['optimized']
Performance,"Suggest to squash on merge. The commit message could look like:; ```; [RF] Extend RooChebychev to arbitrary orders. Instead of hard-coding the polynomials to 7th order, a more scalable implementation; based on the recursive definition of the polynomials is used.; The computation time grows linearly with the order of the polynomials. FMA is used if supported by the underlying architecture/compiler.; Otherwise, the code falls back to normal floating point arithmetic.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3775#issuecomment-490553124:176,scalab,scalable,176,https://root.cern,https://github.com/root-project/root/pull/3775#issuecomment-490553124,1,['scalab'],['scalable']
Performance,Summary of the changes in Vc 0.7.4:; - fixed several compile errors / warnings with newer or old C++; compilers; - support clean compilation with more -W flags; - fixed compilation when compiling without optimization; - added operator-- to Vector<T>; - Copying Memory now uses SIMD move instructions; - Vc::Allocator<T> now uses a minimum alignment of the SIMD types of; the chosen Vc implementation. Thus making it useable for containers of; builtin types. Signed-off-by: Matthias Kretz kretz@kde.org,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/19:204,optimiz,optimization,204,https://root.cern,https://github.com/root-project/root/pull/19,1,['optimiz'],['optimization']
Performance,"Summary: `ROOT-debian10-i386` and `ROOT-ubuntu2004` are green; `ROOT-performance-centos8-multicore`, `ROOT-ubuntu18.04` and `mac12` fail `roottest_root_aclic_load_reload`; `mac11` fails `test_stressinterpreter`. `windows10` nodes were offline and didn't start yet.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1325001990:69,perform,performance-,69,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1325001990,1,['perform'],['performance-']
Performance,"System.cxx:3586; #7 <signal handler called>; ===========================================================; The lines below might hint at the cause of the crash. If you see question; marks as part of the stack trace, try to recompile with debugging information; enabled and export CLING_DEBUG=1 environment variable before running.; You may get help by asking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #8 llvm::Expected<llvm::JITEvaluatedSymbol>::Expected<llvm::JITEvaluatedSymbol> (Val=..., this=0x7fffd51c79a0) at /usr/include/c++/8/new:169; #9 llvm::orc::ExecutionSession::lookup (this=0x1740989b0, SearchOrder=std::vector of length 1, capacity 1 = {...}, Name=..., RequiredState=<optimized out>) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2040; #10 0x00007fff9ba04d00 in llvm::orc::LLJIT::lookupLinkerMangled (this=<optimized out>, JD=..., Name=...) at /usr/include/c++/8/bits/atomic_base.h:295; #11 0x00007fff9a459050 in llvm::orc::LLJIT::lookupLinkerMangled (Name=..., JD=..., this=0x174098770) at /usr/include/c++/8/ppc64le-redhat-linux/bits/gthr-default.h:778; #12 llvm::orc::LLJIT::lookup (UnmangledName=..., JD=..., this=0x174098770) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/LLJIT.h:132; #13 llvm::orc::LLJIT::lookup (UnmangledName=..., this=0x174098770) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/LLJIT.h:137; #14 cling::IncrementalJIT::getSymbolAddress (this=0x17404b400, Name=..., IncludeHostSymbols=<optimized out>) at /builddir/build/BUILD/root-6.28.00/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:572; #15 0x00007fff9a450208 in",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:21245,optimiz,optimized,21245,https://root.cern,https://github.com/root-project/root/issues/12372,1,['optimiz'],['optimized']
Performance,"System.cxx:3586; #7 <signal handler called>; ===========================================================; The lines below might hint at the cause of the crash. If you see question; marks as part of the stack trace, try to recompile with debugging information; enabled and export CLING_DEBUG=1 environment variable before running.; You may get help by asking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #8 llvm::Expected<llvm::JITEvaluatedSymbol>::Expected<llvm::JITEvaluatedSymbol> (Val=..., this=0x7ffff83e9070) at /usr/include/c++/8/new:169; #9 llvm::orc::ExecutionSession::lookup (this=0x1099d16e0, SearchOrder=std::vector of length 1, capacity 1 = {...}, Name=..., RequiredState=<optimized out>) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2040; #10 0x00007fffa4604d20 in llvm::orc::LLJIT::lookupLinkerMangled (this=<optimized out>, JD=..., Name=...) at /usr/include/c++/8/bits/atomic_base.h:295; #11 0x00007fffa3058c20 in llvm::orc::LLJIT::lookupLinkerMangled (Name=..., JD=..., this=0x10993f430) at /usr/include/c++/8/ppc64le-redhat-linux/bits/gthr-default.h:778; #12 llvm::orc::LLJIT::lookup (UnmangledName=..., JD=..., this=0x10993f430) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/LLJIT.h:132; #13 llvm::orc::LLJIT::lookup (UnmangledName=..., this=0x10993f430) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/LLJIT.h:137; #14 cling::IncrementalJIT::getSymbolAddress (this=0x109984c70, Name=..., IncludeHostSymbols=<optimized out>) at /builddir/build/BUILD/root-6.28.00/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:583; #15 0x00007fffa3050770 in",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:3739,optimiz,optimized,3739,https://root.cern,https://github.com/root-project/root/issues/12372,1,['optimiz'],['optimized']
Performance,"T'` it will fail. That's what I mean when I say that by relying on `PYTHONPATH` only one version will work. > we need to continue to support using multiple ROOT versions with python, also outside conda. That is always possible, but it requires setup scripts. I'm usually talking here about the situation in which you do `yum install root`, and it should work out of the box, without any extra setup. Same for other distributions. This is already the case in Fedora, but they have to go through hoops to make it work, like using alternatives for `libPyROOT.so` in `/etc/alternatives`. That's what I'd like to address. > we must not run setup.py as part of a ROOT installation. This makes it much harder to do the right thing during installation in order for things to work properly. PyROOT is a python package afterall, so what's the problem in using Python's native methods of installation as part of `make install`?. > It would be great if import ROOT can auto-detect which libPython (python2 or python3) to load; that would take care of the multi-python case after source thisroot.sh. At the moment, `libPyROOT.so` can only work with either Python 2.x or 3.x, not both. We need to change compile-time checks into runtime checks to make the same library work with both Python 2.x and 3.x (there are many `#ifdef`s on the Python version, for example). Finally, `thisroot.sh` is totally evil and should be deprecated. It messes up the environment when sourcing it, by potentially removing things from the path that should not be removed. It also assumes things about how ROOT was installed, so if ROOT's libraries are not in `$ROOTSYS/lib` (e.g., if they are in `$ROOTSYS/lib64`, or `$ROOTSYS/root/lib` with `gnuinstall=ON`) the script won't work. It also uses a colon for separator in `CMAKE_PREFIX_PATH`, which is separated by semicolons, among other problems. My advice to people is to just stop using the script. Anyway, this is all a digression from this PR. Please merge it so I can close [ROOT-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3843#issuecomment-495154092:1160,load,load,1160,https://root.cern,https://github.com/root-project/root/pull/3843#issuecomment-495154092,1,['load'],['load']
Performance,"T-ubuntu16/rtcxxmod.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64026/console).; ### Errors:; - FAILED: /usr/bin/ccache /usr/bin/c++ -Iinclude -I/mnt/build/workspace/root-pullrequests-build/root/core/metacling/src/../res -I/mnt/build/workspace/root-pullrequests-build/root/core/metacling/src/../../clingutils/res -I/mnt/build/workspace/root-pullrequests-build/root/core/metacling/src/../../foundation/res -I/mnt/build/workspace/root-pullrequests-build/root/interpreter/cling/include -isystem /mnt/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/include -isystem interpreter/llvm/src/tools/clang/include -isystem /mnt/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/include -isystem interpreter/llvm/src/include -std=c++11 -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fvisibility=hidden -Wno-shadow -fno-strict-aliasing -Wno-unused-parameter -Wwrite-strings -Wno-long-long -Wno-missing-field-initializers -DLLVM_BUILD_GLOBAL_ISEL -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -Wno-maybe-uninitialized -O3 -DNDEBUG -fPIC -std=c++11 -MD -MT core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -MF core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o.d -o core/metacling/src/CMakeFiles/MetaCling.dir/TCling.cxx.o -c /mnt/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx ; - /mnt/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:1132:30: error: ‘fInterpreter’ was not declared in this scope ; - /mnt/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:1132:60: error: ‘loadGlobalModuleIndex’ was not declared in this scope . ### Warnings:; - /mnt/build/workspace/root-pullrequests-build/root/core/metacling/src/TCling.cxx:1182:27: warning: ‘clang::GlobalModuleIndex* loadGlobalModuleIndex(cling::Interpreter&, clang::SourceLocation)’ defined but not used [-Wunused-function]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016#issuecomment-515211967:1714,load,loadGlobalModuleIndex,1714,https://root.cern,https://github.com/root-project/root/pull/4016#issuecomment-515211967,2,['load'],['loadGlobalModuleIndex']
Performance,"T2() () from /afs/cern.ch/work/i/ikrommyd/miniforge3/envs/root-bug/lib/python3.11/lib-dynload/../.././libCore.so.6.32; #33 0x00007f101f407146 in __static_initialization_and_destruction_0(int, int) [clone .constprop.0] () from /afs/cern.ch/work/i/ikrommyd/miniforge3/envs/root-bug/lib/python3.11/lib-dynload/../../libcppyy_backend.so; #34 0x00007f109602407e in call_init (env=0x55f90e6d77e0, argv=0x7ffc2594fdc8, argc=1, l=<optimized out>) at dl-init.c:70; #35 call_init (l=<optimized out>, argc=1, argv=0x7ffc2594fdc8, env=0x55f90e6d77e0) at dl-init.c:26; #36 0x00007f109602416c in _dl_init (main_map=0x55f90e715250, argc=1, argv=0x7ffc2594fdc8, env=0x55f90e6d77e0) at dl-init.c:117; #37 0x00007f1095d561a5 in _dl_catch_exception () from /lib64/libc.so.6; #38 0x00007f109602ab5e in dl_open_worker (a=0x7ffc2594db30) at dl-open.c:822; #39 0x00007f1095d56148 in _dl_catch_exception () from /lib64/libc.so.6; #40 0x00007f109602af5f in _dl_open (file=<optimized out>, mode=-2147483390, caller_dlopen=0x7f1094968e1a <py_dl_open+138>, nsid=-2, argc=1, argv=0x7ffc2594fdc8, env=0x55f90e6d77e0) at dl-open.c:898; #41 0x00007f1095c85cbc in dlopen_doit () from /lib64/libc.so.6; #42 0x00007f1095d56148 in _dl_catch_exception () from /lib64/libc.so.6; #43 0x00007f1095d56213 in _dl_catch_error () from /lib64/libc.so.6; #44 0x00007f1095c8578e in _dlerror_run () from /lib64/libc.so.6; #45 0x00007f1095c85d71 in dlopen; GLIBC_2.2.5 () from /lib64/libc.so.6; #46 0x00007f1094968e1a in py_dl_open (self=<optimized out>, args=<optimized out>) at /usr/local/src/conda/python-3.11.9/Modules/_ctypes/callproc.c:1538; #47 0x000055f90886ab28 in cfunction_call (func=0x7f1094a5b0b0, args=<optimized out>, kwargs=<optimized out>) at /usr/local/src/conda/python-3.11.9/Objects/methodobject.c:553; #48 0x000055f9088498b3 in _PyObject_MakeTpCall (tstate=0x55f908be5998 <_PyRuntime+166328>, callable=0x7f1094a5b0b0, args=<optimized out>, nargs=2, keywords=0x0) at /usr/local/src/conda/python-3.11.9/Objects/call.c:214; #49 0x00",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15970:13594,optimiz,optimized,13594,https://root.cern,https://github.com/root-project/root/issues/15970,2,['optimiz'],['optimized']
Performance,"T::AddClass("""") : N4ROOT8Internal34TCheckHashRecurveRemoveConsistencyE; ROOT::AddClass("""") : N4ROOT6Detail10TTypedIterI13TEnumConstantEE; ROOT::AddClass("""") : 19TViewPubDataMembers; ROOT::AddClass("""") : 17TViewPubFunctions; ROOT::AddClass("""") : N4ROOT11TRWMutexImpI6TMutexNS_8Internal13RecurseCountsEEE; ROOT::AddClass("""") : N4ROOT11TRWMutexImpINS_10TSpinMutexENS_8Internal13RecurseCountsEEE; ROOT::AddClass("""") : N4ROOT11TRWMutexImpI6TMutexNS_8Internal22UniqueLockRecurseCountEEE; ROOT::AddClass("""") : N4ROOT11TRWMutexImpINS_10TSpinMutexENS_8Internal22UniqueLockRecurseCountEEE; ROOT::AddClass("""") : N4ROOT6Detail10TTypedIterI10TBaseClassEE; ROOT::AddClass("""") : N4ROOT8Internal34TCheckHashRecurveRemoveConsistencyE; Fatal in <TClassTable::Add>: Trying to add class with empty name to TClassTable; aborting; #0 0x00007fa7e57aacbe in __GI___waitpid (pid=32048, stat_loc=stat_loc; entry=0x7fffab271828, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29; #1 0x00007fa7e572138f in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fa7e67b9c4f in TUnixSystem::StackTrace (this=0x7d30) at /home/amadio/src/root/core/unix/src/TUnixSystem.cxx:2412; #3 0x00007fa7e66900e8 in DefaultErrorHandler (level=32048, abort_bool=40, location=0x0, msg=0x7fa7e57aacbe <__GI___waitpid+46> ""H="") at /home/amadio/src/root/core/base/src/TError.cxx:192; #4 0x00007fa7e668ff16 in ErrorHandler (level=32048, location=0x7fffab271828 """", fmt=0x0, ap=0x7fa7e57aacbe <__GI___waitpid+46>) at /home/amadio/src/root/core/base/src/TError.cxx:251; #5 0x00007fa7e668fb04 in Fatal (location=0x7d30 <error: Cannot access memory at address 0x7d30>, fmt=0x7fffab271828 """") at /home/amadio/src/root/core/base/src/TError.cxx:350; #6 0x00007fa7e67058b2 in TClassTable::Add (cname=0x7d30 <error: Cannot access memory at address 0x7d30>, id=6184, info=..., dict=0x7fa7e57aacbe <__GI___waitpid+46>, pragmabits=-441829952) at /home/amadio/src/root/core/cont/src/TClassTable.cxx:350; #7 0x00007fa7e6704",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1389#issuecomment-347619862:1227,optimiz,optimized,1227,https://root.cern,https://github.com/root-project/root/pull/1389#issuecomment-347619862,1,['optimiz'],['optimized']
Performance,"T::EFunctionMatchMode) (TClass.cxx:4530); ==92602== by 0x45D671F: TClass::Property() const (TClass.cxx:6080); ==92602== ; ==92602== Conditional jump or move depends on uninitialised value(s); ==92602== at 0x40E0FA8: TStorage::UpdateIsOnHeap(unsigned int const volatile&, unsigned int volatile&) (TStorage.h:132); ==92602== by 0x40E11A3: TObject::TObject() (TObject.h:245); ==92602== by 0x40E1BA3: TCollection::TCollection() (TCollection.h:152); ==92602== by 0x40E1F83: TSeqCollection::TSeqCollection() (TSeqCollection.h:33); ==92602== by 0x40E209B: TList::TList() (TList.h:78); ==92602== by 0x454FD17: TList::Delete(char const*) (TList.cxx:477); ==92602== by 0x45479A7: THashList::Delete(char const*) (THashList.cxx:215); ==92602== by 0x5FE6163: TDirectoryFile::Close(char const*) (TDirectoryFile.cxx:572); ==92602== by 0x600997B: TFile::Close(char const*) (TFile.cxx:928); ==92602== by 0x60670B3: TMemFile::~TMemFile() (TMemFile.cxx:240); ==92602== by 0x1134EF7F: TCling::LoadPCM(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (TCling.cxx:1857); ==92602== by 0x11351253: TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) (TCling.cxx:2308); ==92602== . Processing tutorials/hsimple.C...; ==92602== Warning: set address range perms: large range [0x20750000, 0x35920000) (defined); ==92602== Warning: set address range perms: large range [0x20750000, 0x35920000) (noaccess); ==92602== Warning: set address range perms: large range [0x59d50000, 0xba670000) (defined); ==92602== Warning: set address range perms: large range [0x59d50000, 0xba670000) (noaccess); ==92602== Warning: set address range perms: large range [0x20f90000, 0x3d430000) (defined); ==9260",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297#issuecomment-979895686:19426,Load,LoadPCM,19426,https://root.cern,https://github.com/root-project/root/issues/9297#issuecomment-979895686,1,['Load'],['LoadPCM']
Performance,"T::Internal::RDF::RJittedAction, ROOT::Detail::RDF::RLoopManager&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, ROOT::Internal::RDF::RColumnRegister&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&>(ROOT::Detail::RDF::RLoopManager&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, ROOT::Internal::RDF::RColumnRegister&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZSt4moveIRSt10shared_ptrIN4ROOT6Detail3RDF13RJittedDefineEEEONSt16remove_referenceIT_E4typeEOS8_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::remove_reference<std::shared_ptr<ROOT::Detail::RDF::RJittedDefine>&>::type&& std::move<std::shared_ptr<ROOT::Detail::RDF::RJittedDefine>&>(std::shared_ptr<ROOT::Detail::RDF::RJittedDefine>&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZSt4moveIRN4ROOT8Internal3RDF15RColumnRegisterEEONSt16remove_referenceIT_E4typeEOS6_' unresolved while linking [cling interface function]!; You are probably missing the definition of std::remove_reference<ROOT::Internal::RDF::RColumnRegister&>::type&& std::move<ROOT::Internal::RDF::RColumnRegister&>(ROOT::Internal::RDF::RColumnRegister&); Maybe you need to load the corresponding shared library?; IncrementalExecutor:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-1573184913:2547,load,load,2547,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-1573184913,1,['load'],['load']
Performance,"T::TReentrantRWLock<std::mutex, ROOT::Internal::RecurseCounts>' * const)ROOT::gCoreMutex)->fMutex; $1 = {<std::__mutex_base> = {_M_mutex = pthread_mutex_t = {Type = Normal, Status = Acquired, possibly with no waiters, Owner ID = Unknown, Robust = No, Shared = No, Protocol = None}}, <No data fields>}; (gdb) . ```. Valgrind:; ![image](https://user-images.githubusercontent.com/10653970/125307579-783b0000-e330-11eb-803c-2e738711fca8.png). And in another computer:; ```; Thread 1 ""runGUI"" received signal SIGINT, Interrupt.; futex_wait_cancelable (private=<optimized out>, expected=0, futex_word=0x555556a28e98) at ../sysdeps/nptl/futex-internal.h:183; 183	../sysdeps/nptl/futex-internal.h: No such file or directory.; (gdb) info threads; Id Target Id Frame ; * 1 Thread 0x7ffff523cb80 (LWP 705986) ""runGUI"" futex_wait_cancelable (private=<optimized out>, expected=0, futex_word=0x555556a28e98) at ../sysdeps/nptl/futex-internal.h:183; 2 Thread 0x7ffee552f700 (LWP 706016) ""runGUI"" futex_wait_cancelable (private=<optimized out>, expected=0, futex_word=0x555556c5e1ec) at ../sysdeps/nptl/futex-internal.h:183; (gdb) thread apply all bt. Thread 2 (Thread 0x7ffee552f700 (LWP 706016)):; #0 futex_wait_cancelable (private=<optimized out>, expected=0, futex_word=0x555556c5e1ec) at ../sysdeps/nptl/futex-internal.h:183; #1 __pthread_cond_wait_common (abstime=0x0, clockid=0, mutex=0x5555579d0380, cond=0x555556c5e1c0) at pthread_cond_wait.c:508; #2 __pthread_cond_wait (cond=0x555556c5e1c0, mutex=0x5555579d0380) at pthread_cond_wait.c:638; #3 0x00007ffff66c5077 in TPosixCondition::Wait (this=0x555556c5e1b0) at /opt/root_src/core/thread/src/TPosixCondition.cxx:65; #4 0x00007ffff66c2b46 in TThread::XARequest (xact=0x7ffff66d0208 ""PRTF"", nb=2, ar=0x7ffee5529510, iret=0x0) at /opt/root_src/core/thread/src/TThread.cxx:1067; #5 0x00007ffff66c24d7 in TThread::Printf (fmt=0x7ffff7fbc0f1 ""Start: %s"") at /opt/root_src/core/thread/src/TThread.cxx:953; #6 0x00007ffff7fa0617 in RThread::Stop() () from /tmp/z",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365#issuecomment-878288640:15959,optimiz,optimized,15959,https://root.cern,https://github.com/root-project/root/issues/8365#issuecomment-878288640,1,['optimiz'],['optimized']
Performance,"TATION <td>ON (OFF) <td>Build Doxygen HTML documentation; ## <tr><td>CLI11_DIR <td>/opt/CLI11 <td>CLI11 git repository; ## <tr><td>CMAKE_BUILD_TYPE <td>Release (Debug) <td>Choose the type of build; ## <tr><td>ENABLE_TESTS <td>ON (OFF) <td>Build CTests; #~ ## <tr><td>FunctionalPlus_DIR <td>/opt/FunctionalPlus/install/lib/cmake/FunctionalPlus <td>FPlus install folder containing FindFunctionalPlus; ## <tr><td>CMAKEMODULES_DIR <td>/opt/cmake-modules <td>rpavlik git source dir, use https://github.com/ferdymercury/cmake-modules and git checkout master; ## <tr><td>ROOT_DIR <td>$ROOTSYS (/opt/root) <td>ROOT build directory; ## <tr><td>ZSTR_DIR <td>/opt/zstr <td>ZSTR git repository; ## </table>; ##; ## CMAKE_DOCUMENTATION_END; ## See https://www.stack.nl/~dimitri/doxygen/manual/tables.html. # Add Doxygen documentation https://stackoverflow.com/questions/34878276/build-doxygen-from-cmake-script. ### cmake-modules; if(NOT DEFINED CMAKEMODULES_DIR); set (CMAKEMODULES_DIR ""/opt/cmake-modules"" CACHE STRING ""cmake-modules git repository""); endif(); list(APPEND CMAKE_MODULE_PATH ""${CMAKEMODULES_DIR}""). option(BUILD_DOCUMENTATION ""Create and install the HTML based API documentation (requires Doxygen)"" ON); if(BUILD_DOCUMENTATION); find_package(Doxygen OPTIONAL_COMPONENTS dot). if(DOXYGEN_FOUND); set(DOXYGEN_PROJECT_NAME ""Data Acquisition System""); set(DOXYGEN_USE_MDFILE_AS_MAINPAGE ""${CMAKE_SOURCE_DIR}/README.md""); set(DOXYGEN_WARN_NO_PARAMDOC YES); set(DOXYGEN_GENERATE_QHP YES); set(DOXYGEN_QCH_FILE ""TheName.qch""); set(DOXYGEN_QHP_NAMESPACE org.doxygen.TheName.Project); set(DOXYGEN_GENERATE_LATEX NO); set(DOXYGEN_GENERATE_TREEVIEW YES); #set(DOXYGEN_HIDE_UNDOC_RELATIONS NO); #set(DOXYGEN_DOT_NUM_THREADS 1); #set(DOXYGEN_UML_LOOK YES); #set(DOXYGEN_UML_LIMIT_NUM_FIELDS 50); #set(DOXYGEN_TEMPLATE_RELATIONS YES); set(DOXYGEN_DOT_IMAGE_FORMAT svg); set(DOXYGEN_INTERACTIVE_SVG YES); #set(DOXYGEN_DOT_GRAPH_MAX_NODES 100); #set(DOXYGEN_DOT_TRANSPARENT YES); #set(DOXYGEN_OUTPUT_DIRECTORY ${",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8999:1949,CACHE,CACHE,1949,https://root.cern,https://github.com/root-project/root/issues/8999,1,['CACHE'],['CACHE']
Performance,TBB; 76: [ OK ] RWLock.ResetRestoreStdTBB (0 ms); 76: [ RUN ] RWLock.ResetRestoreStdTBBUnique; 76: [ OK ] RWLock.ResetRestoreStdTBBUnique (0 ms); 76: [ RUN ] RWLock.ResetRestoreSpin; 76: [ OK ] RWLock.ResetRestoreSpin (0 ms); 76: [ RUN ] RWLock.ResetRestore; 76: [ OK ] RWLock.ResetRestore (0 ms); 76: [ RUN ] RWLock.ResetRestoreTLSpin; 76: [ OK ] RWLock.ResetRestoreTLSpin (0 ms); 76: [ RUN ] RWLock.ResetRestoreTL; 76: [ OK ] RWLock.ResetRestoreTL (0 ms); 76: [ RUN ] RWLock.concurrentResetRestore; 76: [ OK ] RWLock.concurrentResetRestore (61 ms); 76: [ RUN ] RWLock.concurrentResetRestoreSpin; 76: [ OK ] RWLock.concurrentResetRestoreSpin (40 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd; 76: [ OK ] RWLock.concurrentResetRestoreStd (53 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd14; 76: [ OK ] RWLock.concurrentResetRestoreStd14 (62 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStd17; 76: [ OK ] RWLock.concurrentResetRestoreStd17 (64 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStdTBB; 76: [ OK ] RWLock.concurrentResetRestoreStdTBB (45 ms); 76: [ RUN ] RWLock.concurrentResetRestoreStdTBBUnique; 76: [ OK ] RWLock.concurrentResetRestoreStdTBBUnique (33 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestore; 76: [ OK ] RWLock.LargeconcurrentResetRestore (5534 ms); 76: [ RUN ] RWLock.concurrentResetRestoreTL; 76: [ OK ] RWLock.concurrentResetRestoreTL (59 ms); 76: [ RUN ] RWLock.LargeconcurrentResetRestoreTL; 76: [ OK ] RWLock.LargeconcurrentResetRestoreTL (4693 ms); 76: [ RUN ] RWLock.concurrentReadsAndWrites; 76: [ OK ] RWLock.concurrentReadsAndWrites (3099 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesSpin; 76: [ OK ] RWLock.concurrentReadsAndWritesSpin (3097 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd; 76: [ OK ] RWLock.concurrentReadsAndWritesStd (3129 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd14; 76: [ OK ] RWLock.concurrentReadsAndWritesStd14 (3210 ms); 76: [ RUN ] RWLock.concurrentReadsAndWritesStd17; 76: [ OK ] RWLock.concurrentReadsAndWrit,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-742071485:8867,concurren,concurrentResetRestoreStdTBB,8867,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-742071485,1,['concurren'],['concurrentResetRestoreStdTBB']
Performance,TBranch::GetBulkEntries proper handling of already loaded basket,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6519:51,load,loaded,51,https://root.cern,https://github.com/root-project/root/pull/6519,1,['load'],['loaded']
Performance,TBranch::GetBulkEntries proper handling of already loaded basket. This fixes #6416 and fixes #6417,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6519:51,load,loaded,51,https://root.cern,https://github.com/root-project/root/pull/6519,1,['load'],['loaded']
Performance,TBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ProofDraw; Failed to load module Unuran; Failed to load module Quadp; Failed to load module Genetic; Failed to load module Eve; Failed to load module GeomPainter; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Html; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module X3d; Failed to load module SPlot; Failed to load module Hbook; Failed to load module RooFit; Failed to load module RCsg; Failed to load module RooStats; Failed to load module RooFitRDataFrameHelpers; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module ROOTTMVASofie; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module MathMore; Failed to load module RooFitHS3; Failed to load module Foam; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module Graf3d; Failed to ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1029801305:2456,load,load,2456,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1029801305,1,['load'],['load']
Performance,TClassEdit was selected as class which does not have any effect. A more radical approach would be to remove this completely since the header is in the pch and by definition libCore always loaded.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1042#issuecomment-331523430:188,load,loaded,188,https://root.cern,https://github.com/root-project/root/pull/1042#issuecomment-331523430,1,['load'],['loaded']
Performance,TClassEdit: make usage of static cache container thread safe.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10369:33,cache,cache,33,https://root.cern,https://github.com/root-project/root/pull/10369,1,['cache'],['cache']
Performance,"TCling::IsLoaded was impressively slow because it's allowing ""header""; input file. If you already know that your file is a library, it's better; to use IsLibraryLoaded as this makes a difference in performance. Modules, w/o this patch; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.08 seconds Cpu Time = 0.07 seconds; (TFile *) 0x5563018a1d30; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 1.524314 seconds; sys time = 0.157075 seconds; res memory = 546.867 Mbytes; vir memory = 895.184 Mbytes; ```; With this patch; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.06 seconds Cpu Time = 0.04 seconds; (TFile *) 0x555b420dca90; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 0.470026 seconds; sys time = 0.056668 seconds; res memory = 299.688 Mbytes; vir memory = 560.188 Mbytes; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2128:198,perform,performance,198,https://root.cern,https://github.com/root-project/root/pull/2128,1,['perform'],['performance']
Performance,"TCling::Load reloads the library the `system` optional parameter is false. If the library is not marked as `system` TCling reloads it if was alread loaded. That is, it dlcloses and dlopens the library instead of doing nothing. There is no point in reloading our library dependencies. The regression was introduced in 9b6df8c originated from https://github.com/root-project/root/commit/e649f59e3160f829bc1a4813f8aa73bdd16b6cff",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5485:8,Load,Load,8,https://root.cern,https://github.com/root-project/root/pull/5485,2,"['Load', 'load']","['Load', 'loaded']"
Performance,"TConfiguredAction::operator() (object=0x55555855a0c0, buffer=..., this=0x55555812a1b0); at /home/rembserj/spaces/master/root/src/root/io/io/inc/TStreamerInfoActions.h:123; #28 TBufferFile::ApplySequence (this=0x7fffffffd9d0, sequence=..., obj=0x55555855a0c0); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3580; #29 0x00007ffff76f1b94 in TBufferFile::ReadClassBuffer (this=0x7fffffffd9d0, cl=0x555558490b70, pointer=<optimized out>, onFileClass=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TBufferFile.cxx:3499; #30 0x00007ffff778a22e in TClass::Streamer (onfile_class=0x0, b=..., obj=0x55555855a0c0, this=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/core/meta/inc/TClass.h:610; #31 TKey::ReadObjectAny (this=0x5555569f77a0, expectedClass=<optimized out>) at /home/rembserj/spaces/master/root/src/root/io/io/src/TKey.cxx:1108; #32 0x00007ffff774aa1b in TDirectoryFile::GetObjectChecked (this=0x555556a15ce0, namecycle=<optimized out>, expectedClass=0x555558490b70); at /home/rembserj/spaces/master/root/src/root/io/io/src/TDirectoryFile.cxx:1111; #33 0x00005555555551f6 in TDirectory::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectory.h:207; #34 TDirectoryFile::Get<RooStats::HistFactory::Measurement> (this=0x555556a15ce0, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/build/../install/include/root/TDirectoryFile.h:84; #35 repro () at repro.C:10; ```. So the crash is here (https://github.com/root-project/root/blob/master/io/io/src/TBufferFile.cxx#L245):; ```c++; if (nwh == 255) {; *this >> nbig;; obj->resize(nbig,'\0');; ReadFastArray((char*)obj->data(),nbig);; }; ```; I have put some debug printouts. When it crashes, `nbig` is `-1`, and resize() expects and unsigned int. The -1 becomes a very large unsigned number that exceeds the maximum allowed length of a `std::string",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12967#issuecomment-1581261520:7233,optimiz,optimized,7233,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520,1,['optimiz'],['optimized']
Performance,TEnum currently always relies on Cling (via the TEnum::fInfo data member) to retrieve the underlying type. Concretely this means that the TEnum loaded from a rootpcm always returns the incorrect/default information.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6725:144,load,loaded,144,https://root.cern,https://github.com/root-project/root/issues/6725,1,['load'],['loaded']
Performance,TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ROOT/TSeq.hxx ESTLType.h RStringView.h TClassEdit.h ROOT/RArrayView.hxx ROOT/RMakeUnique.hxx ROOT/RNotFn.hxx ROOT/RStringView.hxx ROOT/TypeTraits.hxx ROOT/rhysd_array_view.hxx TUnixSystem.h TClingRuntime.h root_std_complex.h TBaseClass.h TClass.h TClassGenerator.h TClassMenuItem.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnum.h TEnumConstant.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctionTemplates.h TListOfFunctions.h TMemberStreamer.h TMethod.h TMethodArg.h TMethodCall.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamer.h TStreamerElement.h TToggle.h TToggleGroup.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h Getline.h /home/amadio/src/root/core/base/inc/LinkDef.h; In file included from input_line_1:1:; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/new:40:; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/exception:142:; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/bits/exception_ptr.h:38:; /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/bits/cxxabi_init_exception.h:38:10: fatal error: 'stddef.h' file not found; #include <stddef.h>; ^~~~~~~~~~; In file included from input_line_4:2:; In file included from /usr/lib/gcc/x86_64-pc-linux-gnu/7.3.0/include/g++-v7/stdlib.h:30:; In file included from /home/amadio/build/external-llvm/etc/cling/lib/clang/5.0.1/include/stdlib.h:8:; /usr/include/stdlib.h:31:10: fatal error: 'stddef.h' file not found; #include <stddef.h>; ^~~~~~~~~~; Error: Error loading the default header files.; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1632#issuecomment-366989771:4182,load,loading,4182,https://root.cern,https://github.com/root-project/root/pull/1632#issuecomment-366989771,1,['load'],['loading']
Performance,TFileMerger _actually_ delete directory only if we induced its creation/loading,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8228:72,load,loading,72,https://root.cern,https://github.com/root-project/root/pull/8228,1,['load'],['loading']
Performance,TFormula error when loading gdml using matrix,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13074:20,load,loading,20,https://root.cern,https://github.com/root-project/root/issues/13074,1,['load'],['loading']
Performance,TGPictureButton does not load image from disk,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6985:25,load,load,25,https://root.cern,https://github.com/root-project/root/issues/6985,1,['load'],['load']
Performance,TH; * failed to load '/etc/grid-security/certificates/MARGI.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/LIPCA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/LIPCA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/LIPCA.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e13e0fcf.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/BYGCA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/LIPCA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/064e0aa9.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/be87b272.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/BYGCA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/be87b272.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e21dc0c0.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/064e0aa9.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/036b3363.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/BYGCA.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/036b3363.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/126f0acf.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HPCI.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/126f0acf.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1f58a078.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ANSPGrid.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1f58a078.signing_policy' from CURLOPT_CAPA,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:49187,load,load,49187,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,TH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/633dc6a4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Grid-ICA-G2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58b08cb5.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5ead794.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e523eeaa.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e523eeaa.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/38f7145f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/38f7145f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/617ff41b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/67707166.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/67707166.si,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:25260,load,load,25260,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"TH=libs:<ROOTSYS>/lib root -l -b -q Test.C. 	Processing Test.C...; 	this is a Foo; 	hello from a Foo; 	rm libs/Foo_dict.o libs/Foo.o. Next, clean up . 	$ make clean ; 	; so that we start afresh. Then, execute . 	$ make test LIBDIR=.libs ; 	; which will build the above mentioned library and associated files in; the sub-directory `.libs`. This fails somewhat with . 	$ LD_LIBRARY_PATH=.libs:<ROOTSYS>/lib -l -b -q Test.C. 	Processing Test.C...; 	Error in <TCling::RegisterModule>: Cannot open shared library <ROOTSYS>/root.exe for dictionary libFoo:; 	 <ROOTSYS>/root.exe: cannot dynamically load position-independent executable; 	Error in <TCling::LoadPCM>: ROOT PCM <ROOTSYS>/bin/libFoo_rdict.pcm file does not exist; 	this is a Foo; 	hello from a Foo; 	; 	; It does not matter if `LIBDIR` . - is an absolute path (e.g., ` ``pwd``/.libs`); - the end directory is below a directory starting with a dot (e.g.,; ` ``pwd``/.libs/foo`); - if the actual directory starts with a dot, but the library is loaded; via a symbolic link without the dot ; ; 		$ make clean; 		$ make LIBDIR=.libs ; 		$ ln -s .libs libs; 		$ make test LIBDIR=libs; 	 LD_LIBRARY_PATH=libs:<ROOTSYS>/lib root -l -b -q Test.C; 		 ; In all cases, ROOT complains as above. If the dot is _not_ at the; start of a path component (e.g., `LIBDIR=foo.libs`), then all is; fine. . So it seems that somewhere deep in the ROOT code, there is some; assumption about a dot (`.`) as the leading character of a; sub-directory name which shouldn't be there. As far as I can tell,; the dot makes the code think that the library loaded is the ROOT; executable (`<ROOTSYS>/bin/root.exe`) rather than the actual shared; library. The reason seems to be that, because of some bad stripping; of path components, the shared library isn't found by Cling and then; the binary image falls back to the executable binary image. . ## Why this is problematic . Many build tools (e.g., Autotools) uses temporary directories that; start with a dot (`.`), including f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10704:2136,load,loaded,2136,https://root.cern,https://github.com/root-project/root/issues/10704,1,['load'],['loaded']
Performance,TIv3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ead666c8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/77637f58.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SDG-G2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SDG-G2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c1e29225.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c1e29225.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2e0e6e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2e0e6e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NorduGrid-2015.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NorduGrid-2015.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NorduGrid-2015.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a3e2dbca.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/NIKHEF.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a3e2dbca.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f8598272.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/16054abd.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2418a3f3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/16054abd.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/a2dbd20c.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f8598272.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7ca9677b.namespaces' from CURLOPT_CAPAT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:59341,load,load,59341,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,TL;DR Difficult due to many reasons. I wouldn't count on upstreaming this. The upstream very rarely makes new releases. It was 4 years between 1.2.8 and 1.2.9. There are 81 pull request pending and I don't see comments from maintainer. Plus as-is it's not good enough for upstreaming. There are other pull request adding NEON/ARM optimized pieces thus a different multi-architecture & multi-ISA-extensions design might be needed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/663#issuecomment-317699247:330,optimiz,optimized,330,https://root.cern,https://github.com/root-project/root/pull/663#issuecomment-317699247,1,['optimiz'],['optimized']
Performance,"TL;DR Yes, this is still desirable version. The 1.2.8 was picked because HW compression/decompression accelerators provide zlib-shim based on 1.2.8 (Intel and Cavium does that). Also Cloudflare/CMS forks of zlib optimized for SSE4.2, AVX, AVX2 are based on 1.2.8.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/663#issuecomment-317664592:212,optimiz,optimized,212,https://root.cern,https://github.com/root-project/root/pull/663#issuecomment-317664592,1,['optimiz'],['optimized']
Performance,"TL;DR: all benchmarks benefit from the patch, no other change in behavior observed. Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz (4 physical cores); All times in seconds. ### `TTree::AsMatrix` benchmark (see [ROOT-9377](https://sft.its.cern.ch/jira/browse/ROOT-9377)); #### Master (no patch); ``` ; total interpreted: 5.23 ; loop interpreted: 4.1 ; compile -O3: 3.2 ; execute loop: 0.14; ````; These timings are consistent with the latest that were performed on this benchmark. ; ; #### With patch; ``` ; total interpreted: 1.5; loop interpreted: 0.37 ; compilation and loop execution: same as above (master no patch); ```; Interpreted loop takes the same time as with a non-optimized g++ compilation. ### Fons' benchmark (PROOF vs RDF, see [ROOT-9538](https://sft.its.cern.ch/jira/browse/ROOT-9538)); #### Master (no patch); ```; ---- run_dataframe.C ----; interpreted loop: 8; compile O3: 5; compiled loop: 5. --- run_dataframe_imt.C (4 threads) ---; interpreted loop: 6; compile O3: 5; compiled loop: 3; ```; #### With patch; ```; --- run_dataframe.C ---; interpreted: 5; compile -O3: 5; loop: 5. --- run_dataframe_imt.C (4 threads) ---; interpreted: 3; compile -O3: 5; loop: 3; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2674#issuecomment-424317989:444,perform,performed,444,https://root.cern,https://github.com/root-project/root/pull/2674#issuecomment-424317989,2,"['optimiz', 'perform']","['optimized', 'performed']"
Performance,"TLDR: `TTree* TMVA::DataSet::GetTree` is missing a call to `tree->ResetBranchAddresses()` at the end. The interesting bit is that `TBufferFile::ReadInt` is being used even-though all the variables in the example (and indeed all their corresponding branches) are floats. So the issue is that the address of the Int branch:; ```; *Br 0 :classID : classID/I *; ```; is still set to an address that uses to be on the stack (according to valgrind). How can it be possible, you may ask. Well ... looking at the result of `fOutputFile->ls("""")` we notice:; ```; ....; OBJ: TTree TestTree TestTree : 0 at: 0x5555555eae70; ```; **even before** the call to `fOutputFile.Get(""dataset/TestTree"");`. This means that at point the `TTree` is already in memory (and already setup) and this prior loading is the likely place of the setting of the address to a local variable. It turns out that the `TTree` is created in `TTree* TMVA::DataSet::GetTree` at `DataSet.cxx:628` and later we have:; ```; UInt_t cls;; ...; tree->Branch( ""classID"", &cls, ""classID/I"" );; ...; return tree;; }; ```; At which point the `tree` is returns pointing to a bunch of now invalid memory location.; Using:; ```; tree->ResetBranchAddresses();; return tree;; }; ```; solves the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10010#issuecomment-2080153300:779,load,loading,779,https://root.cern,https://github.com/root-project/root/issues/10010#issuecomment-2080153300,1,['load'],['loading']
Performance,"TLS is currently not suppored in the JIT. However, it's possible to; enable emulated TLS support in LLVM which means that we now support; TLS across all architectures. The performance downsides of this; should be neglectiable and can be easily worked around (by merging; TLS variables into a single one). Patch created with a lot of help from Lang Hames and Pavel Labath!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1208:172,perform,performance,172,https://root.cern,https://github.com/root-project/root/pull/1208,1,['perform'],['performance']
Performance,"TMVA new developments. * improvements for class TMVA::Envelope; * Added class TMVA::Classification to perform two class Classification; * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate; * Documentation with Doxygen; * Test with Google Tests; * Example in Tutorials. Cheers,; O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1316:102,perform,perform,102,https://root.cern,https://github.com/root-project/root/pull/1316,1,['perform'],['perform']
Performance,"TMVA new developments; * improvements for class TMVA::Envelope; * Added class TMVA::Classification to perform two class Classification; * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate; * Documentation with Doxygen; * Test with Google Tests; * Example in Tutorials.; Cheers,; O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1315:102,perform,perform,102,https://root.cern,https://github.com/root-project/root/pull/1315,1,['perform'],['perform']
Performance,"TMVA::Reader::AddSpectator allows passing an integer external pointer, but the event class stores only float * pointer. This PR adds in the Event class the type information of the spectator variables. With this the correct casting is performed when retrieving the spectator variable value in case of dynamic events (the inputs are provided using an external pointer). Note that the integer is always converted to a float, so one can use integer values only from [-2^24, 2^24]. This PR fixes #9115",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9513:234,perform,performed,234,https://root.cern,https://github.com/root-project/root/pull/9513,1,['perform'],['performed']
Performance,"TNamedBranchProxy did not implement a Hash method.; Therefore when adding TNamedBranchProxy instances to the THashList dedicated to their bookkeping in TTreeReader TObject::Hash was used.; Unfortunately when trying to find the TNamedBranchProxies, their name was used and the hash was built differently by THashList (based on the name).; In order to fix this the following steps were taken.; - THashList was replaced by an unordered_map with names as keys and unique_ptr<TNamedBranchProxy> as values. The unique_ptr is used to automatically manage ownership.; - The methods of TTreeReader were adapted to use this new container as well as the code in TTreeReaderValue and TTreeReaderArray. A real usecase from CMS where the mass of the W boson is studied shows a significant speedup (30%).; The code uses TDataFrame and several nodes are created which read from the same branch in an input tree which holds weights in a collection.; This configuration stressed the performance degradation pattern fixed by this commit as it triggered multiple times the deserialisation of the ""weights branch"". Thanks to Elisabetta Manca and Lorenzo Bianchini for providing the bug report and initial reproducer. These changes will need to be backported at least to ROOT 6.12",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1768:965,perform,performance,965,https://root.cern,https://github.com/root-project/root/pull/1768,1,['perform'],['performance']
Performance,TODO: find a way to avoid repeating `RAction`'s code three times without losing performance,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2595:80,perform,performance,80,https://root.cern,https://github.com/root-project/root/pull/2595,1,['perform'],['performance']
Performance,"TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. ```. ## Expected behavior; no FPE. ## To Reproduce. Code; ```. #include <TCanvas.h>; #include <TPad.h>; #include <TBox.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6449:1950,optimiz,optimized,1950,https://root.cern,https://github.com/root-project/root/issues/6449,2,['optimiz'],['optimized']
Performance,TRatioPlot crashes if loaded from the file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14855:22,load,loaded,22,https://root.cern,https://github.com/root-project/root/issues/14855,1,['load'],['loaded']
Performance,"TThreadExecutor does not activate implicit multi-threading; (ROOT::IsImplicitMTEnabled() is false after constructing a; TThreadExecutor) but it does change the size of the thread-pool, which; is not only used by implicit multi-threading features, but also by; TThreadExecutor and TTreeProcessorMT. So the thread pool is not the; ""ImplicitMTPool"" but it's really ROOT's one and only pool of threads,; so we prefer ROOT::GetThreadPoolSize to GetImplicitMTPoolSize.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5290:43,multi-thread,multi-threading,43,https://root.cern,https://github.com/root-project/root/pull/5290,2,['multi-thread'],['multi-threading']
Performance,"TTreeProcessorMT does not guarantee that TTreeReader::GetCurrentEntry; returns the global entry number of the underlying dataset.; RDF, however, needs a unique entry identifier to use for Filter/Define; cache invalidation, so for MT runs we now use an atomic counter. As a consequence, in MT runs `rdfentry_` is now an arbitrary integer; with no connection to the underlying ROOT dataset. This PR solves the same bug as #3051 , without the performance hit, at the cost of losing correspondence between RDF's `rdfentry_` column values and the global entry numbers in a corresponding TChain.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3062:203,cache,cache,203,https://root.cern,https://github.com/root-project/root/pull/3062,2,"['cache', 'perform']","['cache', 'performance']"
Performance,"TTreeProcessorMT now spawns tasks that process clusters from tasks that process files:; this should decrease the amount of file switches that each thread-local; TChain performs during an event loop, as each thread will tend to; process clusters that belong to the same file. In addition, when no friends and no TEntryList are present, we can avoid the preliminary full sweep of; input files, since we we can use local rather than global entry numbers.; In this case TTreeProcessorMT spawns one task per input file which first retrieves cluster boundaries; for that file and then spawns one sub-task per cluster. I also added myself to the list of authors. @etejedor there are a couple of things I am not super happy with in this implementation:; - each thread-local `TTreeView` duplicates all info about the dataset (file names, friend names, friend file names...); - `TTreeProcessorMT` has to query all of this information from `TTreeView`; - ~~the per-file task should only call `Internal::MakeClusters` once (just noticed, that's an easy refactoring)~~ fixed and squashed. Moving the dataset info from `TTreeView` to `TTreeProcessorMT`, on the other hand, would mean adding even more parameters to `TTreeView::GetTreeReader`. What do you think?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2143:168,perform,performs,168,https://root.cern,https://github.com/root-project/root/pull/2143,1,['perform'],['performs']
Performance,TTreeProcessorMT should call `friend->BuildIndex` in each multi-thread task but doesn't. The test we have is single-thread only. First reported at https://root-forum.cern.ch/t/reading-friend-trees-using-rdataframe-in-multithread-mode-or-spark-cluster/53513 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12260:58,multi-thread,multi-thread,58,https://root.cern,https://github.com/root-project/root/issues/12260,1,['multi-thread'],['multi-thread']
Performance,T_CAPATH; * failed to load '/etc/grid-security/certificates/78351451.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7022e3c4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7ed47087.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/98ef0ee5.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceRoot-2007.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceRoot-2007.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceRoot-2007.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceRoot-2007.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2436bbb8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustPrivateRootCAG4.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustPrivateRootCAG4.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustPrivateRootCAG4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustPrivateRootCAG4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/585d9326.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d58bb4bc.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/585d9326.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/23c77840.signing_policy' from CURLOPT_CAPAT,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:8178,load,load,8178,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,T_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Robots.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7a819ef2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNLPGrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d71343e8.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d71343e8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d7e8dc79.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SlovakGrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/728fa56d.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SlovakGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/728fa56d.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e13e0fcf.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e21dc0c0.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/87250dfa.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/14e86c33.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/87250dfa.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5e02f50a.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:53162,load,load,53162,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,T_CAPATH; * failed to load '/etc/grid-security/certificates/GermanGrid.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b3f5558.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GermanGrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA3G3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA3G3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/87429ba3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TRGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7c27c6a1.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HellasGrid-CA-2016.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HellasGrid-CA-2016.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HellasGrid-CA-2016.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/HellasGrid-CA-2016.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f4cf8fb6.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/6999cae3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/6999cae3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UGRID-G2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UGRID-G2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UGRID-G2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UGRID-G2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c53e160f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/c53e160f.signing_policy',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:36400,load,load,36400,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,T_CAPATH; * failed to load '/etc/grid-security/certificates/InCommon-IGTF-Server-CA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d11f973e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ba240aa8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5f0dfc2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4339b4bc.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3cc00941.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/68aa9d51.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5168735f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KENETCA-ICA-2015.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-GridCA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KENETCA-ICA-2015.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-GridCA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/62c4a178.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KENETCA-ICA-2015.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f23888f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f23888f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-GridCA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustIGTFCA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustIGTFCA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ffc3d59b.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:12273,load,load,12273,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,T_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/38f7145f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/617ff41b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/67707166.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/67707166.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Grid-ICA-G2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MYIFAM.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Grid-ICA-G2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MYIFAM.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e91bd360.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2f573f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.namespaces' from CURLOPT_CAPATH; * f,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:26804,load,load,26804,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,T_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceCA-2B.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/InCommon-IGTF-Server-CA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d11f973e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/82c2b224.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/InCommon-IGTF-Server-CA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d11f973e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ba240aa8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5f0dfc2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4339b4bc.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3cc00941.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/68aa9d51.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5168735f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KENETCA-ICA-2015.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-GridCA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KENETCA-ICA-2015.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-GridCA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/62c4a178.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KENETCA-ICA-2015.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f23888f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f23888f.s,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:11892,load,load,11892,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,T_CAPATH; * failed to load '/etc/grid-security/certificates/e523eeaa.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/38f7145f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/38f7145f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/617ff41b.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/67707166.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/67707166.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Grid-ICA-G2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MYIFAM.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PKIUNAMgrid.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Grid-ICA-G2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/MYIFAM.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCA-Classic.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e91bd360.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENAeSciencePersonalCA3.info' from CURLOPT_CAPATH; * failed to load '/e,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:26625,load,load,26625,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,T_CAPATH; * failed to load '/etc/grid-security/certificates/e732ef10.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/617ff41b.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58b08cb5.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e732ef10.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2f573f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/18700496.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/bd43b60c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5ead794.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:23790,load,load,23790,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,T_Rtypes; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module Core; Failed to load module Rint; Failed to load module RIO; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTBrowsable; Failed to load module Unfold; Failed to load module RHTTPSniff; Failed to load module Imt; Failed to load module HistPainter; Failed to load module PyMVA; Failed to load module RDAVIX; Failed to load module RHTTP; Failed to load module FitPanel; Failed to load module ROOTVecOps; Failed to load module ProofDraw; Failed to load module RMySQL; Failed to load module Unuran; Failed to load module Quadp; Failed to load module ROOTNTuple; Failed to load module ROOT_Foundation_Stage1_NoRTTI; Failed to load module GeomPainter; Failed to load module Genetic; Failed to load module Eve; Failed to load module TreeViewer; Failed to load module Physics; Failed to load module ROOTTMVASofieParser; Failed to load module PgSQL; Failed to load module EG; Failed to load module Tree; Failed to load module HistFactory; Failed to load module Spectrum; Failed to load module Matrix; Failed to load module Hist; Failed to load module GuiHtml; Failed to load module _Builtin_intrinsics; Failed to load module Gpad; Failed to load module TMVAGui; Failed to load module Postscript; Failed to load module Html; Failed to load module ROOTEve; Failed to load module RGL; Failed to load module Fumili; Failed to load module Net; Failed to load module Geom; Failed to load module RooFitMore; Failed to load module ROOTGpadv7; Failed to load module X3d; Failed to load module Cling_Runtime; Failed to load module SPlot; Failed to load module Hbook; Failed to load module RooFit; Failed to load module RCsg; Failed to load module Rint; Failed to load module XMLParser; Failed to load module MultiProc; Failed to load module RooStats; Failed to load module RooFitRDataFrameHelpers; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11901:2961,load,load,2961,https://root.cern,https://github.com/root-project/root/issues/11901,1,['load'],['load']
Performance,Table; Warning in <TClassTable::Add>: class TZIPMember already in TClassTable; fatal error: module map file '/usr/share/root/cling/module.modulemap' not found; fatal error: module map file '/usr/share/root/cling/module.modulemap' not found; Replaced symbol atexit cannot be found in JIT!; Replaced symbol at_quick_exit cannot be found in JIT!; Module libc not found.; Module std not found.; <<< cling interactive line includer >>>: remark: could not acquire lock file for module '_Builtin_intrinsics': failed to create unique file /usr/lib64/root/_Builtin_intrinsics.pcm.lock-f66e7495: Permission denied [-Rmodule-build]; <<< cling interactive line includer >>>: remark: building module '_Builtin_intrinsics' as '/usr/lib64/root/_Builtin_intrinsics.pcm' [-Rmodule-build]; fatal error: module map file '/usr/share/root/cling/module.modulemap' not found; <<< cling interactive line includer >>>: remark: finished building module '_Builtin_intrinsics' [-Rmodule-build]; <<< cling interactive line includer >>>: fatal error: could not build module '_Builtin_intrinsics'; Failed to load module _Builtin_intrinsics; fatal error: module map file '/usr/share/root/cling/module.modulemap' not found; Failed to load module ROOT_Foundation_C; fatal error: module map file '/usr/share/root/cling/module.modulemap' not found; Failed to load module ROOT_Config; fatal error: module map file '/usr/share/root/cling/module.modulemap' not found; Failed to load module ROOT_Rtypes; fatal error: module map file '/usr/share/root/cling/module.modulemap' not found; Failed to load module ROOT_Foundation_Stage1_NoRTTI; fatal error: module map file '/usr/share/root/cling/module.modulemap' not found; Failed to load module Core; fatal error: module map file '/usr/share/root/cling/module.modulemap' not found; Failed to load module Rint; fatal error: module map file '/usr/share/root/cling/module.modulemap' not found; Failed to load module RIO; fatal error: module map file '/usr/share/root/cling/module.modulemap' not fo,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9518#issuecomment-1059973386:32130,load,load,32130,https://root.cern,https://github.com/root-project/root/pull/9518#issuecomment-1059973386,1,['load'],['load']
Performance,"Take this workspace here:; [workspace.root.txt](https://github.com/root-project/root/files/10746822/workspace.root.txt). Now run this reproducer code:; ```C++; void repro() {. {; std::unique_ptr<TFile> f{TFile::Open(""workspace.root"")};; RooWorkspace* combined = f->Get<RooWorkspace>(""combined""); // load the original; cout << combined->function(""gaus_x1y1_OSeMmuP_fakeOverall"")->getProxy(0) << std::endl; // this is non-zero; combined->writeToFile(""another.root""); // supposed to create a nice copy; }. std::unique_ptr<TFile> f{TFile::Open(""another.root"")};; RooWorkspace* w = f->Get<RooWorkspace>(""combined""); // load the copy; cout << w->function(""gaus_x1y1_OSeMmuP_fakeOverall"")->getProxy(0) << std::endl; // this is zero ???; }; ```. The output will be:; ```; 0x55925a4e95c0; 0; ```. That's not good. When copying a workspace, the proxies should not be set to zero!. Note that the `.txt` suffix has to be removed from the input file. It's just there to be able to upload the workspace to GitHub. Thanks to @will-cern for reporting this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12329:299,load,load,299,https://root.cern,https://github.com/root-project/root/issues/12329,2,['load'],['load']
Performance,"Talking about Linux, where the OS doesn't make your application multi-threaded under your feet: `fork`ing a multi-thread program is bad, that's always been the case. We can and should warn users in the docs, but apart from that I'm not sure what we can do?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7075#issuecomment-766905037:64,multi-thread,multi-threaded,64,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-766905037,2,['multi-thread'],"['multi-thread', 'multi-threaded']"
Performance,"TemplateArgumentListInfo const*, clang::ASTContext&, clang::Parser&, clang::Sema&, cling::LookupHelper::DiagSetting), cling::LookupHelper::DiagSetting) () from /home/b/bendavid/rootdev28/install/lib/libCling.so; #4 0x00007ffff1a3571a in cling::LookupHelper::findFunctionProto(clang::Decl const*, llvm::StringRef, llvm::StringRef, cling::LookupHelper::DiagSetting, bool) const (); from /home/b/bendavid/rootdev28/install/lib/libCling.so; #5 0x00007ffff19b13aa in TClingClassInfo::GetMethod (this=this@entry=0x7fffffffbfe0, fname=fname@entry=0x7fffffffc530 ""call_helper"", ; proto=proto@entry=0x55555c6b3560 ""Helper<vector<double> >&"", objectIsConst=objectIsConst@entry=false, poffset=poffset@entry=0x0, mode=ROOT::kConversionMatch, ; imode=TClingClassInfo::kWithInheritance) at /home/b/bendavid/rootdev28/root/core/metacling/src/TClingDeclInfo.h:38; #6 0x00007ffff195a91a in TCling::GetFunctionWithPrototype (this=<optimized out>, opaque_cl=<optimized out>, method=0x7fffffffc530 ""call_helper"", ; proto=0x55555c6b3560 ""Helper<vector<double> >&"", objectIsConst=<optimized out>, mode=<optimized out>) at /home/b/bendavid/rootdev28/root/core/metacling/src/TCling.cxx:5082; #7 0x00007ffff723799c in TROOT::GetGlobalFunctionWithPrototype (this=0x7ffff7499940 <ROOT::Internal::GetROOT1()::alloc>, function=0x7fffffffc530 ""call_helper"", ; proto=0x55555c6b3560 ""Helper<vector<double> >&"", load=load@entry=false) at /home/b/bendavid/rootdev28/root/core/base/src/TROOT.cxx:1675; #8 0x00007ffff74e8fa7 in Cppyy::GetMethodTemplate (scope=scope@entry=1, name=""call_helper"", proto=""Helper<vector<double> >&"") at /usr/include/c++/12.2.0/bits/basic_string.h:233; #9 0x00007ffff75752d7 in CPyCppyy::TemplateProxy::Instantiate (this=0x7fffd804ca40, fname=""call_helper"", args=0x7ffff7736bf0, pref=CPyCppyy::Utility::kReference, pcnt=0x7fffffffc4e0); at /home/b/bendavid/rootdev28/root/bindings/pyroot/cppyy/CPyCppyy/src/TemplateProxy.cxx:189; #10 0x00007ffff7576b2a in CPyCppyy::tpp_call (pytmpl=0x7fffd804ca40, args=0x7f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854#issuecomment-1455272493:3827,optimiz,optimized,3827,https://root.cern,https://github.com/root-project/root/issues/11854#issuecomment-1455272493,4,['optimiz'],['optimized']
Performance,"TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 17: Assuming the condition is true in /opt/root_src/core/base/inc/TObject.h:187; 18: Returning the value 1, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 19: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 20: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:213; 21: Assuming the condition is false in /opt/root_src/core/cont/src/TRefArray.cxx:214; 22: 'valid' is false in /opt/root_src/core/cont/src/TRefArray.cxx:215; 23: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:215; 24: Assuming the condition is true in /opt/root_src/core/cont/src/TRefArray.cxx:218; 25: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:218; 26: Assuming 'gDebug' is <= 3 in /opt/root_src/core/cont/src/TRefArray.cxx:222; 27: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:222; 28: 'valid' is true in /opt/root_src/core/cont/src/TRefArray.cxx:254; 29: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:254; 30: Returning without writing to 'uid' in /opt/root_src/core/cont/src/TRefArray.cxx:258; 31: Returning the value 1 (loaded from 'valid'), which participates in a condition later in /opt/root_src/core/cont/src/TRefArray.cxx:258; 32: Returning from 'TRefArray::GetObjectUID' in /opt/root_src/core/cont/src/TRefArray.cxx:385; 33: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:385; 34: Assigned value is garbage or undefined in /opt/root_src/core/cont/src/TRefArray.cxx:386; /opt/root_src/core/cont/inc/TBits.h; /opt/root_src/core/cont/inc/TBtree.h; /opt/root_src/core/cont/src/TArrayC.cxx; /opt/root_src/core/cont/src/TArrayD.cxx; /opt/root_src/core/cont/src/TArrayF.cxx; /opt/root_src/core/cont/src/TArrayI.cxx; /opt/root_src/core/cont/src/TArrayL.cxx; /opt/root_src/core/cont/src/TArrayL64.cxx; /opt/root_src/core/cont/src/TArrayS.cxx; /opt/root_src/core/cont/src/TRefArray.cxx; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7424:22792,load,loaded,22792,https://root.cern,https://github.com/root-project/root/issues/7424,1,['load'],['loaded']
Performance,"Tested with. ```python; from dask.distributed import LocalCluster, Client; import ROOT. # Point RDataFrame calls to Dask RDataFrame object; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ROOT.RDF.Experimental.Distributed.optimized = True. def create_connection():; cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=True); client = Client(cluster); return client. if __name__ == ""__main__"":. # Create the connection to the mock Dask cluster on the local machine; connection = create_connection(); # Create an RDataFrame that will use Dask as a backend for computations; df = RDataFrame(100, daskclient=connection, npartitions = 2). # First run with Count operations; def1 = df.Define(""x"",""rdfentry_"").Define(""y"",""rdfentry_"").Define(""z"",""rdfentry_""); def2 = df.Define(""aa"",""rdfentry_"").Filter(""aa > 50""); c1 = def1.Count(); c2 = def2.Count(); print(""\n\n"", c1.GetValue(), c2.GetValue()). # Second run with Count; c3 = df.Count(); print(""\n\n"", c3.GetValue()). # Test AsNumpy; print(df.Define(""x"",""rdfentry_"").AsNumpy()). # Test Snapshot; snap = df.Define(""x"",""rdfentry_"").Snapshot(""mytree"",""myfile.root""); print(snap._headnode.inputfiles); print(snap.Count().GetValue()); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10648:238,optimiz,optimized,238,https://root.cern,https://github.com/root-project/root/pull/10648,1,['optimiz'],['optimized']
Performance,"Thank you @eguiraud for the comment, I have added your main points to the commit message. I agree there are still potential performance penalties in DistRDF (although much less so than it used to be) and for now we can remove this dead part of the codebase.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13232#issuecomment-1632022809:124,perform,performance,124,https://root.cern,https://github.com/root-project/root/pull/13232#issuecomment-1632022809,1,['perform'],['performance']
Performance,"Thank you @jblomer, I just added some code in ccce4d7 to set the queue depth member `fDepth` to the actual submission queue depth in the case where a user provides a size hint that is not a power of 2.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6162#issuecomment-678257456:65,queue,queue,65,https://root.cern,https://github.com/root-project/root/pull/6162#issuecomment-678257456,2,['queue'],['queue']
Performance,"Thank you for reporting this difference. The reason is that new PyROOT has split in a few libraries, when it used to be only one in the old PyROOT. In this case, the deserialization causes the loading and initialization of `libROOTPythonizations`, but `libcppyy` has not been loaded yet, leading to the crash you see. `import ROOT` makes sure everything is loaded and initialized by the time you deserialize. Is it an issue though that you need to import ROOT prior to deserializing ROOT objects in Python?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6552#issuecomment-709056700:193,load,loading,193,https://root.cern,https://github.com/root-project/root/issues/6552#issuecomment-709056700,3,['load'],"['loaded', 'loading']"
Performance,"Thank you for the clarification. I had a closer look to this. The problem resides in that, during the deserialization, `libROOTPythonizations` is loaded, which in turn triggers the loading of `libcppyy`. Both libraries are extension modules. During the module initialization of `libROOTPythonizations`, it calls into `libcppyy`, but the latter has not been initialized yet (it has not been imported as a module), which causes the error. This does not happen during `import ROOT`, where all the imports are properly done. What I can try to do is ensure `libcppyy` is imported during the initialization of `libROOTPythonizations`. Let's see how that goes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6552#issuecomment-710038856:146,load,loaded,146,https://root.cern,https://github.com/root-project/root/issues/6552#issuecomment-710038856,2,['load'],"['loaded', 'loading']"
Performance,"Thank you for the nice investigations. What are the next steps? I tried #13139 but that does not help us. I see a different memory profile, but the extra memory due to ROOT is stil around 70MB (even a bit more with that PR, AFAICT). Besides actually solving the module loading problem, I was wondering if there is not something pathological in some of the pcms. As a said Genetic.pcm, RooStats.pcm, ROOTDataFrame, MathCore seem to be particularly responsible for the increase of the TypesLoaded vector. Maybe we can get some gain already via some headers cleanups?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1623457082:269,load,loading,269,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1623457082,1,['load'],['loading']
Performance,"Thank you for the report @cozzyd , I'll see how I can fix the `SetBranchAddress` pythonization. Another option you have is not to use `SetBranchAddress`, but just iterate on the tree and access the branch as an attribute like this:; ```python; import ROOT. ROOT.gSystem.Load(""libmwe.so""). f = ROOT.TFile(""out.root"");; t = f.Get(""tree"");. for entry in t:; ev = entry.event; print(ev.iev); print(ev.bar); print(ev.foo[0]); print(ev.foo[1]); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6468#issuecomment-702608832:270,Load,Load,270,https://root.cern,https://github.com/root-project/root/issues/6468#issuecomment-702608832,1,['Load'],['Load']
Performance,"Thank you for the report Josh! This seems to be a problem in upstream cppyy as well:. ```bash; (cppyy-env) /t/cppyy-test python -c 'import cppyy; print(cppyy.__version__)'; 2.4.1; (cppyy-env) /t/cppyy-test bat test.h test.py; ───────┬───────────────────────────────────────────────────────────────────────────────────────; │ File: test.h; ───────┼───────────────────────────────────────────────────────────────────────────────────────; 1 │ template <typename T>; 2 │ class Helper {; 3 │; 4 │ public:; 5 │; 6 │ Helper() {}; 7 │; 8 │ std::size_t operator() () const {; 9 │ const std::size_t res = 0;; 10 │ res = T{0, 0}.size();; 11 │ return res;; 12 │ }; 13 │; 14 │ };; 15 │; 16 │ template <typename H>; 17 │ std::size_t call_helper(const H &helper) {; 18 │ return helper();; 19 │ }; ───────┴───────────────────────────────────────────────────────────────────────────────────────; ───────┬───────────────────────────────────────────────────────────────────────────────────────; │ File: test.py; ───────┼───────────────────────────────────────────────────────────────────────────────────────; 1 │ import cppyy; 2 │; 3 │ ret = cppyy.include('test.h'); 4 │; 5 │ print(""declare ret"", ret); 6 │; 7 │ print(""creating helper""); 8 │ helper = cppyy.gbl.Helper[cppyy.gbl.std.vector[""double""]](); 9 │; 10 │ res = cppyy.gbl.call_helper(helper); 11 │ print(res); ───────┴───────────────────────────────────────────────────────────────────────────────────────; (cppyy-env) /t/cppyy-test python test.py; declare ret True; creating helper; IncrementalExecutor::executeFunction: symbol '_ZNK6HelperISt6vectorIdSaIdEEEclEv' unresolved while linking symbol '__cf_5'!; You are probably missing the definition of Helper<std::vector<double, std::allocator<double> > >::operator()() const; Maybe you need to load the corresponding shared library?; 18446744073709551615; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854#issuecomment-1346625044:1783,load,load,1783,https://root.cern,https://github.com/root-project/root/issues/11854#issuecomment-1346625044,1,['load'],['load']
Performance,"Thank you for your input. As you mentioned, `fontconfig` is a Linux utility, but we also need to support Windows and macOS. Additionally, we aim to achieve the best possible mapping to PostScript and PDF fonts (without loading fonts in PostScript). The font set was carefully chosen to ensure optimal mapping across all these backends. You can also include `TPDF` and `TPostScript` in the list of files related to fonts. Recently, due to licensing issues with Helvetica, we made some changes to the font files used to render ROOT fonts. Now, ROOT is shifting towards a new graphics system called ""Web Graphics,"" where the latest graphics developments are happening. I believe this request should be considered for implementation in this new context, if feasible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16229#issuecomment-2291331959:219,load,loading,219,https://root.cern,https://github.com/root-project/root/issues/16229#issuecomment-2291331959,1,['load'],['loading']
Performance,"Thank you for your quick response, @bellenot. . The version of VS we use is not important, we just need to test the compiler MSVC inside VS, the compiler version is the latest, not release or preview. it's development version. And the correct MSVC_VERSION as below. Microsoft (R) C/C++ Optimizing Compiler Version **19.41.34007.96** for x64; Copyright (C) Microsoft Corporation. All rights reserved.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15336#issuecomment-2154250511:286,Optimiz,Optimizing,286,https://root.cern,https://github.com/root-project/root/issues/15336#issuecomment-2154250511,1,['Optimiz'],['Optimizing']
Performance,"Thank you very much for the workaround. It works for me. Do you understand why it happens with `plotOn` and if the problem can happen in other scenarios? I am thinking where to put the workaround in my actual code (as opposed to the short example attached to this issue). Can you point me to some docs/tutorial on how to use RooWorkspace factory pattern to create my model? Is it possible to achieve somehow the same effect regarding the cache when I am importing into the workspace?. By ""mode local"" did you mean ""model local""?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10577#issuecomment-1134512856:438,cache,cache,438,https://root.cern,https://github.com/root-project/root/issues/10577#issuecomment-1134512856,1,['cache'],['cache']
Performance,"Thank you! I made the modification. Still not clear to me, why it is necessary. But this is not a (very) performance-critical path, so it's fine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14731#issuecomment-1948143634:105,perform,performance-critical,105,https://root.cern,https://github.com/root-project/root/pull/14731#issuecomment-1948143634,1,['perform'],['performance-critical']
Performance,"Thanks @hageboeck . I really need @pcanal 's and/or @etejedor 's stamp of approval on this one. It lays the groundwork for fixing [ROOT-10656](https://sft.its.cern.ch/jira/browse/ROOT-10656), but more importantly it's meant to spark a discussion about whether we need `TParTreeProcessingRAII` and related methods at all. I don't think we do: TTreeProcessorMT's concurrent usage of TFile is not/should not be special.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5288#issuecomment-608535871:361,concurren,concurrent,361,https://root.cern,https://github.com/root-project/root/pull/5288#issuecomment-608535871,1,['concurren'],['concurrent']
Performance,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here?. Thanks again!; Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14098#issuecomment-1860573175:371,Load,Loader,371,https://root.cern,https://github.com/root-project/root/pull/14098#issuecomment-1860573175,1,['Load'],['Loader']
Performance,Thanks @vepadulano! My only worry is that all threads are loading and unloading the same shared library. Does the problem also happen when the threads are working on their own library?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13348#issuecomment-1658770539:58,load,loading,58,https://root.cern,https://github.com/root-project/root/pull/13348#issuecomment-1658770539,1,['load'],['loading']
Performance,"Thanks Enrico, I was just about to write the same :laughing: I think once we implement such a precision loss check in `TH*F::Fill()` we should be fine. I would be hesitant to implement this for general `TH` types because of performance overhead. But given that we encourage people to use `THD` because of the reasons that became apparent in this discussion, I think it's fine to do this for `THF`. What is you opinion on this? Deprecating `TTree::Draw()` is a whole different beast that is maybe outside the scope of this discussion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-1861822460:224,perform,performance,224,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-1861822460,1,['perform'],['performance']
Performance,"Thanks Philippe. After further consideration, i think you're right. I had indeed been concerned about a possible deadlock, but i had thought; that it was probably ok because a similar change was working fine; in production. But (a), i had forgotten about the dlopen lock and (b),; they weren't exactly the same change. As i alluded to above, we didn't; want to have a custom patch to ROOT, so for production we address this; race by wrapping dlopen. But in that case, the core lock is acquired; _before_ the call to dlopen, not after. So, what is to be done?. There is probably only one code path in ATLAS that was giving us problems.; The Gaudi plugin manager was being used to load one of the POOL libraries; that happened to include ROOT dictionary information. I could; acquire the ROOT core lock around this (and one or two other places; where i known that Gaudi components may be loaded after event processing; starts). However, there are many other places where shared libraries; could potentially be loaded. While those probably don't matter...; the original bug here was quite opaque, taking several months; to completely track down. So i'm loathe to leave open any possibility; that it could bite us again. We could add locking within TClassTable. This is perhaps an attractive; way forward, as it should make it much easier to ensure that usages; of TClassTable are correct. A drawback is that is hard to then ensure; that we don't have something else that is also supposed to be protected; by the core mutex. Nevertheless, i could try to prepare a change; to do this if it sounds good. However, that's not the end of the problems. If this analysis is correct, then we _already_ have potential deadlock; problems, as there is nothing to prevent the initialization code of a; shared library (which can be arbitrary used code) from calling into ROOT; in a way that would acquire the core mutex. So code which would look; innocent to the user would have a chance of deadlocking.; I'm not sure ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11263#issuecomment-1231069071:679,load,load,679,https://root.cern,https://github.com/root-project/root/pull/11263#issuecomment-1231069071,3,['load'],"['load', 'loaded']"
Performance,"Thanks a lot for creating this issue @pcanal. I have an example file that reproduces the issue in the most recent `dev3` `LCG` nightly on LXPLUS (in a rundown way):. ```; $ export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase;; $ source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh;; $ lsetup ""asetup Athena,main--dev3LCG,latest"";; $ root -l; root [0] auto reader = ROOT::Experimental::RNTupleReader::Open(""EventData"", ""/afs/cern.ch/user/a/amete/public/root-16826/tmp.RDO"");; Warning in <[ROOT.NTuple] Warning /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RPageStorageFile.cxx:328 in ROOT::Experimental::Internal::RPageSourceFile::LoadStructureImpl()::<lambda()>>: Pre-release format version: RC 2; root [1] auto view = reader->GetView<void>(""xAOD__EventInfo_v1_EventInfo"", nullptr);; Error in <TRint::HandleTermInput()>: ROOT::Experimental::RException caught: field iteration over empty fields is unsupported: xAOD__EventInfo_v1_EventInfo; At:; ROOT::Experimental::RNTupleGlobalRange ROOT::Experimental::Internal::GetFieldRange(const ROOT::Experimental::RFieldBase&, const RPageSource&) [/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RNTupleView.cxx:42]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16826#issuecomment-2458131618:714,Load,LoadStructureImpl,714,https://root.cern,https://github.com/root-project/root/issues/16826#issuecomment-2458131618,1,['Load'],['LoadStructureImpl']
Performance,"Thanks a lot for this PR, that results from very intense debugging sessions initially enabled by @silverweed . Once the tests are green, I think these changes should be merged asap. There is no point in keeping around a fully jitted RDF+TTreeCache if it won't be used any more. After the aforementioned step is completed, we might perhaps think about what can go wrong with used memory and what we can do about it. For example, suppose a workflow with N dataframes. For some reason we do not control (e.g. some Dask internals or something imposed by the infrastructure) the scheduling is such that all of them are alive until the end of the processing. Can we cap the memory used by the caches? For example we could just keep 1 buffer and assign it to the tree cache of the chain associated to the RDF pulled from the worker's rdfs cache before using that RDF to process data (effectively using 1 single cache). De facto this means assuming N RDFs in flight but one TTreeCache buffer per worker. Apologies if I am missing something in the distrdf logic.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16094#issuecomment-2246372940:687,cache,caches,687,https://root.cern,https://github.com/root-project/root/pull/16094#issuecomment-2246372940,4,['cache'],"['cache', 'caches']"
Performance,"Thanks everyone for the valuable feedback! I changed the behaviour of the feature to make it simpler to use correctly, and also added one or two perks:. * `OnParameterUpdate` (was `RegisterCallback`) now takes a callable that will be invoked once every specified number of entries on a partial result in _one_ of the worker threads. It will never be invoked concurrently; * `OnParameterUpdateSlot` takes a callable that will be invoked once every specified number of entries on a partial result in each of the worker threads. It will be invoked concurrently, and will also take as argument the ""processing slot"" number the partial result belongs to; * passing `0` as `everyNEvents` parameter to `OnParameterUpdate[Slot]` makes it so that the callback is invoked just once [per slot] before starting the event loop",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1037#issuecomment-331721438:358,concurren,concurrently,358,https://root.cern,https://github.com/root-project/root/pull/1037#issuecomment-331721438,2,['concurren'],['concurrently']
Performance,"Thanks for bringing my attention to this MemPool business. For https://github.com/root-project/root/pull/7907, I benchmarked an example fit with toys from CMS, and the MemPoolForRooSets related functions actually took a lot of time there. Maybe it's just my build environment, but it would be interesting to see how the performance is without the mem pool enabled. Adding a unique ID to the RooArgSets as you suggest in the documentation easy, but I guess finding all the pointer comparisons that would need to be replaced is hard :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7904#issuecomment-821570564:320,perform,performance,320,https://root.cern,https://github.com/root-project/root/pull/7904#issuecomment-821570564,1,['perform'],['performance']
Performance,"Thanks for the quick feedback!. I've tried with `client.wait_for_workers(1)` before creating the RDF, but it doesn't have the expected effect: it just waits forever after printing `DEBUG:Starting job: 12241446.0` (debugging activated with `import logging; logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)`). I can see the job in `condor_q` come and go, but the blocking call is never released for some reason (note that I'm not a Dask expert by any means). I'll try again once #9431 is merged; in particular I'm interested in using Dask's [adaptive worker management](https://jobqueue.dask.org/en/latest/advanced-tips-and-tricks.html#how-to-handle-job-queueing-system-walltime-killing-workers), so that the exact number of submitted jobs is not fixed a priori but automatically adapts to the workload...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9429#issuecomment-992593304:680,queue,queueing-system-walltime-killing-workers,680,https://root.cern,https://github.com/root-project/root/issues/9429#issuecomment-992593304,1,['queue'],['queueing-system-walltime-killing-workers']
Performance,"Thanks for the review! I'm aware of the missing `SaveGraph` tests, and I'll also add `Cache` and `Snapshot` tests (they also have `InterpreterDefine` calls).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6266#issuecomment-682080893:86,Cache,Cache,86,https://root.cern,https://github.com/root-project/root/pull/6266#issuecomment-682080893,1,['Cache'],['Cache']
Performance,"Thanks for the suggestions @lmoneta! I have applied them all, plus one extra, namely `GetFValue()`, which I think should just be `GetValue()` (I probably just verbatim copied the `f` from the ROOT-style named `fVal`). I also removed the `set_step_tolerance` etc functions, they were duplicates of already existing `SetStepTolerance` in the correct coding style, I must have overlooked those. Finally, I deleted the empty virtual destructor, I don't think that had any use, so now the class is not virtual anymore, which may give some micro-performance gain. A unit test would be good, indeed. However, #8596 does provide test coverage of the class, since RooGradMinimizerFcn uses NumericalDerivator. I hope that this is sufficient for the time being and we can indeed add unit tests in a later PR, as you suggest.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8567#issuecomment-877633636:540,perform,performance,540,https://root.cern,https://github.com/root-project/root/pull/8567#issuecomment-877633636,1,['perform'],['performance']
Performance,"Thanks for this code. Could you please add in the description of the PR why you are doing this, and especially what problem you are solving? A good way to tackle this would be to try to convince the reader that thanks to the code, ROOT will be like before (e.g. nothing breaks for the experiments, users, in the development process of ROOT iteself) but better (e.g. there is a reduction in the cost of maintenance, development, testing, or an increase of runtime performance).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15105#issuecomment-2031929972:463,perform,performance,463,https://root.cern,https://github.com/root-project/root/pull/15105#issuecomment-2031929972,1,['perform'],['performance']
Performance,Thanks! I thought we have load these modules automatically! It makes sense to me.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10924#issuecomment-1179509933:26,load,load,26,https://root.cern,https://github.com/root-project/root/issues/10924#issuecomment-1179509933,1,['load'],['load']
Performance,Thanks!. It seems we are getting now a different kind of error on the jenkins master log:; ```; PatchinError in line 1: Premature end of document.; error: failed to run qhelpgenerator on index.qhp; g output file 29883/29885; Patching output file 29884/29885; Patching output file 29885/29885; Running qhelpgenerator...; lookup cache used 484195/1048576 hits=9429473 misses=518740; finished...; ```. Could you share the index.qhp file to take a closer look? Maybe it's a multithreading issue?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8781#issuecomment-1018306859:327,cache,cache,327,https://root.cern,https://github.com/root-project/root/issues/8781#issuecomment-1018306859,1,['cache'],['cache']
Performance,"Thanks!; ```; -bash-4.2$ . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/setup.sh; which root; -bash-4.2$ which root; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/bin/root; -bash-4.2$ python -c 'from PyCool import cool; cool.FieldSelection'; cling::DynamicLibraryManager::loadLibrary(): liblcg_CoralBase.so: cannot open shared object file: No such file or directory; In file included from input_line_26:1:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/python/PyCool/_internal/PyCool_headers_and_helpers.h:5:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/include/CoolKernel/FolderSpecification.h:7:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/include/CoolKernel/IFolderSpecification.h:5:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/include/CoolKernel/IRecordSpecification.h:6:; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/include/CoolKernel/types.h:7:10: fatal error: 'CoralBase/Blob.h' file not found; #include ""CoralBase/Blob.h""; ^~~~~~~~~~~~~~~~~~; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/python/PyCool/__init__.py"", line 25, in <module>; raise RuntimeError(""ERROR! Could not include PyCool headers""); RuntimeError: ERROR! Could not include PyCool headers; -bash-4.2$ client_loop: send disconnect: Broken pipe; ```. What else do I need to set up?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6359#issuecomment-694246485:325,load,loadLibrary,325,https://root.cern,https://github.com/root-project/root/issues/6359#issuecomment-694246485,1,['load'],['loadLibrary']
Performance,"Thanks, @stephanlachnit . I don't understand yet why we cannot make use of the more specific dependency info we have in our CMake build system also for external LLVM? I.e. for builtin LLVM we say which libraries we depend on, and we link only those. Why isn't that also working in the case of an external LLVM?. As an example, in `core/rootcling_stage1/CMakeLists.txt` we have; ```CMake; ROOT_EXECUTABLE(rootcling_stage1 src/rootcling_stage1.cxx; [...]; LIBRARIES ${CLING_LIBRARIES} ${CMAKE_DL_LIBS} ${CMAKE_THREAD_LIBS_INIT} ${ROOT_ATOMIC_LIBS}; NOINSTALL); ```. `CLING_LIBRARIES` comes from `interpreter/CMakeLists.txt`:; ```CMake; set(CLING_LIBRARIES clingInterpreter;clingMetaProcessor;clingUtils CACHE STRING """"); ```. And `clingInterpreter` is defined at `interpreter/cling/lib/Interpreter/CMakeLists.txt` with all its LLVM dependencies:; ```CMake; set(LIBS; clingUtils; [...]; ). set(LLVM_LINK_COMPONENTS; analysis; [...]; ```. I'd hope that this can get used also for builtin LLVM?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1667698745:701,CACHE,CACHE,701,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1667698745,1,['CACHE'],['CACHE']
Performance,"Thanks, @veprbl . Copying the stacktrace from the original, linked report:; ```; #6 <signal handler called>; #7 0x00007fe343359b6a in XrdCl::File::Close(XrdCl::ResponseHandler*, unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3; #8 0x00007fe343359c85 in XrdCl::File::Close(unsigned short) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/xrootd-5.6.1-4hhj2qxu72su5ur6i2x5as7tabayobgz/lib/libXrdCl.so.3; #9 0x00007fe3462e24d3 in TNetXNGFile::Close(char const*) () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libNetxNG.so.6.28.04; #10 0x00007fe346ac1377 in HepMC3::ReaderRootTree::close (this=0x55cb53cbff00) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/rootIO/src/ReaderRootTree.cc:114; #11 0x00007fe34385b7ee in HepMC3::ReaderPlugin::~ReaderPlugin (this=0x55cb53cb5e50, __in_chrg=<optimized out>) at /data/spack/stage/wdconinc/spack-stage-hepmc3-3.2.6-m4mzua36zxrtruwv25lqk5yf7iucr3pc/spack-src/src/ReaderPlugin.cc:68; #12 0x00007fe345e35994 in std::_Destroy<HepMC3::ReaderPlugin> (__pointer=0x55cb53cb5e50) at /usr/include/c++/12/bits/stl_construct.h:151; #13 0x00007fe345e358ec in std::allocator_traits<std::allocator<void> >::destroy<HepMC3::ReaderPlugin> (__p=0x55cb53cb5e50) at /usr/include/c++/12/bits/alloc_traits.h:648; #14 0x00007fe345e350df in std::_Sp_counted_ptr_inplace<HepMC3::ReaderPlugin, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x55cb53cb5e40) at /usr/include/c++/12/bits/shared_ptr_base.h:613; #15 0x00007fe36b71e887 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() () from /opt/software/linux-ubuntu23.04-skylake/gcc-12.3.0/root-6.28.04-zjvl6wz23xtpv2dj4b73bj3yxsws43i4/lib/root/libRIO.so; #16 0x00007fe356ee7fcd in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fff8c03a978, __in_chrg=<opt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13503#issuecomment-1688268706:1000,optimiz,optimized,1000,https://root.cern,https://github.com/root-project/root/issues/13503#issuecomment-1688268706,1,['optimiz'],['optimized']
Performance,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-821054757:103,optimiz,optimization,103,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-821054757,1,['optimiz'],['optimization']
Performance,"Thanks, Olivier. I'll accept that it's inherent to PDF creation and we can close this issue. I brought it up in case it was a minor +/-1 somewhere that it shouldn't be, but I'm not going to make you chase inherent PDF issues. -Gene. > On May 5, 2023, at 9:30 AM, Olivier Couet ***@***.***> wrote:; > ; > ; > Yes, there is some little difference when you try to align text between the different graphics backends ROOt has. PDF, PS PNG, and screen have their own ways to position text. The kind of small misalignment you see is due to. I can have a look but I am not sure it will be possible to perform an exact alignment (PDF has its own fonts).; > ; > —; > Reply to this email directly, view it on GitHub, or unsubscribe.; > You are receiving this because you authored the thread.; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12749#issuecomment-1536329042:593,perform,perform,593,https://root.cern,https://github.com/root-project/root/issues/12749#issuecomment-1536329042,1,['perform'],['perform']
Performance,"Thanks, should be fixed! I'd be curious to hear how master is doing, performance-wise!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8046#issuecomment-849456227:69,perform,performance-wise,69,https://root.cern,https://github.com/root-project/root/issues/8046#issuecomment-849456227,1,['perform'],['performance-wise']
Performance,"Thanks, that seems like a good workaround for the reproducer. ; But, if I understand correctly, that would require that I always include that in a python script before using that class, which seems hard. There isn't one global entry point where cppyy is loaded where I could just add this to protect every user that would possibly interact with the problematic class. . Are you aware of any examples of how to use the C++ callbacks that are mentioned on the same page? ; That could work as a more robust solution I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7179#issuecomment-778286708:254,load,loaded,254,https://root.cern,https://github.com/root-project/root/issues/7179#issuecomment-778286708,1,['load'],['loaded']
Performance,Thanks. Can you try with latest git master of doxygen?. Some race conditions were solved during the last weeks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1080405903:61,race condition,race conditions,61,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1080405903,1,['race condition'],['race conditions']
Performance,"Thanks. One side comment. There is a problem in the way libAfterImage is built. Even if I build ROOT in 'debug mode', libAfterImage is built with -O3 optimization flag. I think the build mode should be propagated also to libAfterImage. Otherwise it's much more difficult to debug this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8125#issuecomment-841519742:150,optimiz,optimization,150,https://root.cern,https://github.com/root-project/root/issues/8125#issuecomment-841519742,1,['optimiz'],['optimization']
Performance,"Thanks. What I am suggesting is something like:; ```; ./configure --enable-th1 --enable-th2; make; ```; which lets you tune without modifying the source dir. EnableTH1 would activate the build of a specific dir behind the scenes. Or the alternative with cmake, which would be:; ```; cmake -DENABLE_TH1 -DENABLE_TH2; make; ```; With cmake it would be a bit cleaner, as there is the function doxygen_add_docs() which already does what makeinput.sh is doing manually. See Alice: https://github.com/AliceO2Group/Monitoring/blob/dev/doc/CMakeLists.txt#L22; But with ./configure it should probably be doable too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8950#issuecomment-934495943:119,tune,tune,119,https://root.cern,https://github.com/root-project/root/issues/8950#issuecomment-934495943,1,['tune'],['tune']
Performance,"That might be just a 'browser cache' issue. Refresh your window, now it looks correct to me.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15100#issuecomment-2104995761:30,cache,cache,30,https://root.cern,https://github.com/root-project/root/pull/15100#issuecomment-2104995761,1,['cache'],['cache']
Performance,"That's a lot of data :); In my experience many, many false positives come from helgrind not understanding ROOT::TSpinMutex and TBB concurrency. I still have no idea what the cause of the crash could be, sorry. EDIT: Imho you really need to dig deeper and try to understand what `TContext::~TContext` is doing exactly that is invalid. Is it accessing an already-deleted gDirectory? Is gDirectory sane in all threads during execution? Are multiple threads deleting the same TContext/TDirectory? And so forth.; ROOT's implicit ownership management together with globals and thread locals that are set and reset under your feet makes multi-threading hard. I spent days on problems like these. At the moment I still don't see enough evidence to pinpoint a culprit though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073#issuecomment-333610699:131,concurren,concurrency,131,https://root.cern,https://github.com/root-project/root/pull/1073#issuecomment-333610699,2,"['concurren', 'multi-thread']","['concurrency', 'multi-threading']"
Performance,"That's not opening _all_ files, just the one that contains the entry that needs loading",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10774#issuecomment-1171148601:80,load,loading,80,https://root.cern,https://github.com/root-project/root/issues/10774#issuecomment-1171148601,1,['load'],['loading']
Performance,"That's not trivial because ROOT has several independant graphics backends: Screen, binaries images, PDF, and Postscript all having their own way of dealing with fonts. So loading a new `otf` file will change the font on the screen but will not affect the PDF output. That's why this functionality is almost impossible to implement in the standard ROOT graphics. The best way, I guess, will be to use the new Web Graphics currently developed by @linev. This graphics backend has only one entry point: the web browser. If one generates a pdf file using this technique it will be an exact copy of the graphics displayed on the screen ie the same fonts will be used as the pdf generation will be handled by the web browser itself: Safari, Chrome, Firefox etc ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14065#issuecomment-1816005544:171,load,loading,171,https://root.cern,https://github.com/root-project/root/issues/14065#issuecomment-1816005544,1,['load'],['loading']
Performance,"The ""small"" library seems to add 70MB of RSS per process due to loading a bunch of pcms (thanks to the fact everything sits in the Experimental namespace, AFAICT). We do want TMVA (which does not get loaded premptively, apparently).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13055#issuecomment-1612683166:64,load,loading,64,https://root.cern,https://github.com/root-project/root/issues/13055#issuecomment-1612683166,2,['load'],"['loaded', 'loading']"
Performance,"The AddressSanitizer also loads the LeakSanitizer flags and even though the documentation suggests that `exitcode` can be set per sanitizer, this doesn't appear to be the case and our tests exit with code 0 after the AddressSanitizer found a problem. After this change, around 100 tests will fail due to several issues.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10005:26,load,loads,26,https://root.cern,https://github.com/root-project/root/pull/10005,1,['load'],['loads']
Performance,"The G__matchfilename() implements a file comparison check used; specifically for loading/unloading of the libraries and the source code.; On UNIX-like systems the basic filename comparison is supplemented an; additional file match condition is based on comparing file attributes; returned by the stat() syscall. On a typical load/unload call, the; G__matchfilename() is iterated over items of G__srcfile, which produces; a number of stat() calls that is quadratic in number of loaded files. In our specific case we observe an occasional poor performance on AFS; network filesystem. The suggested change introduces a cache for the; stat() calls that should allow to reduce the number of calls to scale; linearly. # This Pull request:. ## Changes or fixes:. Fixes downstream issue star-bnl/star-sw#115. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9010:81,load,loading,81,https://root.cern,https://github.com/root-project/root/pull/9010,5,"['cache', 'load', 'perform']","['cache', 'load', 'loaded', 'loading', 'performance']"
Performance,"The GitHub interface strips GPG signatures from the commits. I usually merge on my laptop and push, and that way it's as if I pressed merge, but I can keep the GPG signatures. As for the commit, if you look at the date, you'll see it's from a while ago, when I was working on I/O optimizations. I was just trying to improve readability and test range for with ROOT containers. Yes, it works :-) So, I guess we should be trying to use this more than the usual while loop. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/908#issuecomment-326009755:280,optimiz,optimizations,280,https://root.cern,https://github.com/root-project/root/pull/908#issuecomment-326009755,1,['optimiz'],['optimizations']
Performance,"The Homebrew build is also affected:; ```; $ brew install root; ...; ==> Installing root; ==> Pouring root--6.26.06_2.ventura.bottle.tar.gz; ...; $ root; ------------------------------------------------------------------; | Welcome to ROOT 6.26/06 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for macosx64 on Jul 28 2022, 18:08:51 |; | From tags/v6-26-06@v6-26-06 |; | With Apple clang version 14.0.0 (clang-1400.0.29.202) |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] ROOT::DisableImplicitMT();; Warning in <ROOT_TImplicitMT_DisableImplicitMT>: Implicit multi-threading is already disabled; root [1] double gaus1d(const double *x, const double * p) { return p[0] * TMath::Gaus( x[0], p[1], p[2], true); }; root [2] TH1D * h1 = new TH1D(""h1"",""h1"",100,-5,5);; root [3] TF1 * gaus = new TF1(""gaus1d"",gaus1d,-5,5,3);; root [4] gaus->SetParameters(1,0,1);; root [5] h1->FillRandom(""gaus1d"",10000);; root [6] auto res = h1->Fit(gaus,""L0S"");; FCN=42.2288 FROM MIGRAD STATUS=CONVERGED 194 CALLS 195 TOTAL; EDM=9.84622e-07 STRATEGY= 1 ERROR MATRIX ACCURATE; EXT PARAMETER STEP FIRST; NO. NAME VALUE ERROR SIZE DERIVATIVE; 1 p0 9.99994e+02 9.99994e+00 4.51460e-02 -6.48508e-05; 2 p1 8.62962e-03 1.00477e-02 4.53485e-05 -5.15704e-03; 3 p2 1.00477e+00 7.10558e-03 3.20641e-05 1.05447e-01; ERR DEF= 0.5; root [7] cout << TVirtualFitter::GetFitter() << endl;; 0x0; root [8]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13041#issuecomment-1595062044:707,multi-thread,multi-threading,707,https://root.cern,https://github.com/root-project/root/issues/13041#issuecomment-1595062044,1,['multi-thread'],['multi-threading']
Performance,"The MemPoolForRooSets has two problems:. 1. Scaling issues: increasing memory and CPU consumption with; increasing number of arenas, becuase trying to allocate a new; non-overlapping arena often fails. 2. Amplification of memory leaks in user code:; If one of the elements in the arena leaks, the whole arena will; leak. Since each arena has 6000 elements, this means a leak of a; RooArgSet will be ampilfied by a factor 6000 in the worst case. This commit proposes a solution to the scaling/performance issues and; the leak amplification. Explained for the example for RooArgSet, the idea is to use each arena; 120 times because this is the size of RooArgSet in bytes. This can be; done while still having unique adresses for each RooArgSet:. 1. Keep a gap of 120 bytes between each RooArgSet; 2. When an address was used before, add one byte and in can be used; again. So at the cost of allocating 2x more memory per arena, we can reuse each; arena 120 times. Now, the good thing is that the interval of creating/deleting; RooArgSets is usually higher than 6000. So when reusing an arena; multiple times, they will eventually be filled only by leaking; RooArgSets if there is a leak. Meaning the leak amplification effect; should be gone. This was checked with the CMS Higgs combine toy fit example from the; Higgs combine tutorial. Without this commit, there is a GB-level leak; that can be clearly observed with `top`, but with this commit the leak; becomes negligible again. The PR is still kind of a draft PR. I will check with the bot if this solution works on all platforms and then continue improving the code. This should be backported together with https://github.com/root-project/root/pull/7935. This should finally fix https://github.com/root-project/root/issues/7933. Profile of the CMS toy experiment example with a ROOT Debug build:; * [without this PR](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_old); * [with this PR](https://rembserj.web.cern.c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7954:492,perform,performance,492,https://root.cern,https://github.com/root-project/root/pull/7954,1,['perform'],['performance']
Performance,"The PR basically includes:; - building changes for including CMA-ES; - the CMA-ES optimizer via libcmaes; - test samples. Not sure how to split it. I'll provide a rebase, and you guys may be able to move forward from there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/40#issuecomment-292467092:82,optimiz,optimizer,82,https://root.cern,https://github.com/root-project/root/pull/40#issuecomment-292467092,1,['optimiz'],['optimizer']
Performance,"The PR failed to build on OSX since we moved and rebased the rootspi repo while the job was queued for building on Jenkins. Otherwise, it passed on all other platforms.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/421#issuecomment-286482901:92,queue,queued,92,https://root.cern,https://github.com/root-project/root/pull/421#issuecomment-286482901,1,['queue'],['queued']
Performance,"The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15543:247,optimiz,optimization,247,https://root.cern,https://github.com/root-project/root/pull/15543,2,['optimiz'],['optimization']
Performance,"The RDataFrameHelper should be consistent with creating a RooDataSet; from a TTree, meaning out-of-range events should be skipped. This is; implemented in this commit, borrowing the logic from; `RooTreeDataStore::loadValues()`. A unit test is also implemented. The previous logic of just taking just all values to fill the dataset; was very dangerous, because these values then clipped to the RooRealVar; limits and biased the number of events observed at the boundaries. Closes https://github.com/root-project/root/issues/11017.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11018:213,load,loadValues,213,https://root.cern,https://github.com/root-project/root/pull/11018,1,['load'],['loadValues']
Performance,The RNTuple DAOS backend should implement working versions for `LoadSealedPage()` and `CommitSealedPage()`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8079:64,Load,LoadSealedPage,64,https://root.cern,https://github.com/root-project/root/issues/8079,1,['Load'],['LoadSealedPage']
Performance,"The ROOT PostScript and PDF backends use the original PostScript-defined 13 font styles which form 4 type families:. [Courier](https://en.wikipedia.org/wiki/Courier_(typeface)) (Regular, Oblique, Bold, Bold Oblique); [Helvetica](https://en.wikipedia.org/wiki/Helvetica) (Regular, Oblique, Bold, Bold Oblique); [Times](https://en.wikipedia.org/wiki/Times_Roman) (Roman, Italic, Bold, Bold Italic); [Symbol](https://en.wikipedia.org/wiki/Symbol_(typeface)). See the ""Core Font Set"" section in [this document](https://en.wikipedia.org/wiki/PostScript_fonts). These fonts are always available and do not need to be loaded in the PS or PDF file which allows to keep the files' sizes small **which is very important regarding the huge number of such files generated in HEP**. . So Helvetica is there. There are no license issues for PS and PDF. Unlike the `otf` and `ttf` files used for screen rendering. That's the reason why FreeSans was chosen because it is very similar to Helvetica (on my Mac I could not see the difference). We can replace the current FreeSan family by ""Tex Gyre Heros"" but that will be on screen only and will not affect the PDF and PS output. Therefore is it really worth it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14064#issuecomment-1816063640:611,load,loaded,611,https://root.cern,https://github.com/root-project/root/issues/14064#issuecomment-1816063640,1,['load'],['loaded']
Performance,"The ROOT macros use at the moment use a very expansive list; of paths when looking for headers. And right now clingutils rely on; the ROOT_GENERATE_DICTIONARY behaviour that a header that can't; be found will be deferred to runtime loading in cling, but this; strategy starts to fail once people have files named 'map',; 'vector' in any path that CMake's find_file searches by default. When those files are found by our CMake macros, they won't delay; the lookup of for example 'map' to the runtime but instead directly; include '/bin/map' (which is then causing Cling to fail as this; is usually an executable or something like that). As we can't seem to just fix the find_file behavior, we instead; fix this from clingutils' side by looking up the STL headers; manually via our cling search paths which means we no longer; rely on the 'if-not-found-load-at-runtime' branch in the; ROOT_GENERATE_DICTINARY macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/980:232,load,loading,232,https://root.cern,https://github.com/root-project/root/pull/980,2,['load'],"['load-at-runtime', 'loading']"
Performance,"The RPageSourceFile's use of RRawFile should not use the raw file's block cache layer for the page reads. The page source knows exactly which byte ranges are required. It makes itself I/O scheduling decisions (e.g., coalescing, vector reads) to optimize the read pattern. For opening the file, getting the RNTuple anchor and meta-data, however, we keep the buffered reads.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15257:74,cache,cache,74,https://root.cern,https://github.com/root-project/root/pull/15257,2,"['cache', 'optimiz']","['cache', 'optimize']"
Performance,"The RooFitDriver mutates the RooAbsArgs it evaluates by setting a; specific index token to quickly look up cached information for a given; RooAbsArg. Because of this, it's not possible to evaluate two computation graphs; that share RooAbsArgs with two separate RooFitDrivers. However, this usecase needs to be supported, because in RooStats is; often happens that different likelihoods based on the same model are; instantiated. The key to the solution in this commit is the insight that for each; likelihood, almost the full compute graph is cloned anyway, *except* for; the parameters. Therefore, the solution proposed in this commit is to; not set the data tokens for the parameters and not fill the data map; with their values. Instead, when querying their values, they are just; retrieved from the object itself. This is possible because parameters; are always scalar, and the RooAbsReal can already cache scalar members; in the `_value` field. This PR fixes the failure of some RooStats tutorials if BatchMode would be enabled by default. After this PR is merged, the CI would be completely green if `BatchMode(""cpu"")` would be made the default!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12925:107,cache,cached,107,https://root.cern,https://github.com/root-project/root/pull/12925,2,['cache'],"['cache', 'cached']"
Performance,"The RooProdPdf is not trivial to deal with in BatchMode, because its; actual servers depend on the normalization set. One should rather think of the RooProdPdf as something like a caching; PDF, but instead of creating a cached HistPdf for a given normalization; set, it creates an internal computation graph representing the; normalized product for a given normalization set. This internal computation graph is not expsed via the usual; client-server interface. However, this is strictly required for the new; BatchMode: internal computation graphs are not allowed because the; RooFitDriver would not be able to manage memory copies between host and; device, and also schedeuling. For this reason, BatchMode support is removed from the RooProdPdf class.; We only keep a `RooProdPdf::calculateBatch` function that can be used to; evaluated a given cache element when all the internal args are contained; in the BatchMode data map. To correctly evaluate these computation graphs in the batchMode, a new; class is introduced that wraps them with the correct client-server; interface. Instances of this class are then created for each ProdPdf in; the original computation graph, and the ProdPdfs are replaced with these; objects. This means all the different RooProdPdf cache configurations are now; correctly dealt with in the BatchMode, making the; `RooProdPdf/TestProdPdf.CachingOpt` unit test also pass with the; BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11400:220,cache,cached,220,https://root.cern,https://github.com/root-project/root/pull/11400,3,['cache'],"['cache', 'cached']"
Performance,"The RooWorkspace sometimes stores some RooArgSet prefixed with `CACHE_`; in itself to cache for example parameters or constraint sets. These cache sets are invalidated when elements are removed from them by; `RooWorkspace::RecursiveRemove()`. In this case, they should be removed; from the workspace such that they can be correctly recomputed later. This change fixes problems like this one reported on the forum:; https://root-forum.cern.ch/t/how-to-properly-redefine-pdf-in-rooworkspace/50757. In that usecase, the following sequence of events happened:. 1. Create pdf in workspace; 2. Fit this pdf (triggering the caching of the set of parameters); 3. Recursively remove everything from the workspace, but not the cache; sets as they are hidden from the user. The cached parameter sets are; now empty, as all parameters got removed from the workspace; 4. The same pdf from step 1 is recreated; 5. Fitting of this new pdf will now fail, because RooFit thinks it has; zero free parameters, as the call to `getParameters()` now returns; the cleared cache set!. An additional commit in this PR applies some general modernization of the RooWorkspace code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10952:86,cache,cache,86,https://root.cern,https://github.com/root-project/root/pull/10952,5,['cache'],"['cache', 'cached']"
Performance,"The Spark backend doesn't suffer from this issue because Spark does not try to serialize the C++ error object instance before sending it to the user. The error raised is more verbose (it includes the full Java stacktrace), but correctly reports the original C++ error:. ```; $: python test_spark.py; [...]; 22/07/27 16:51:03 ERROR Executor: Exception in task 0.0 in stage 0.0 (TID 0); org.apache.spark.api.python.PythonException: Traceback (most recent call last):; File ""/home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 112, in distrdf_mapper; mergeables = get_mergeable_values(rdf_plus.rdf, current_range.id, computation_graph_callable, optimized); File ""/home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 69, in get_mergeable_values; resultptr_list = computation_graph_callable(starting_node, range_id); File ""/home/vpadulan/programs/rootproject/rootbuild/master-distrdf-debug/lib/DistRDF/ComputationGraphGenerator.py"", line 219, in trigger_computation_graph; ROOT.Internal.RDF.TriggerRun(rnode); cppyy.gbl.std.runtime_error: void ROOT::Internal::RDF::TriggerRun(ROOT::RDF::RInterface<ROOT::Detail::RDF::RNodeBase,void>& node) =>; runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/home/vpadulan/.local/lib/python3.10/site-packages/pyspark/python/lib/pyspark.zip/pyspark/worker.py"", line 619, in main; process(); File ""/home/vpadulan/.local/lib/python3.10/site-packages/pyspark/python/lib/pyspark.zip/pyspark/worker.py"", line 611, in process; serializer.dump_stream(out_iter, outfile); File ""/home/vpadulan/.local/lib/python3.10/site-packages/pyspark/python/lib/pyspark.zip/pyspark/serializers.py"", line 259, in dump_stream; vs = list(itertools.islice(iterator, batch)); File ""/home/vpadulan/.local/lib/python3.10/site-packages/pysp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11050#issuecomment-1196878051:693,optimiz,optimized,693,https://root.cern,https://github.com/root-project/root/issues/11050#issuecomment-1196878051,1,['optimiz'],['optimized']
Performance,"The TypeID2TypeName function looks for generic types via TClass::GetClass, thus taking a lock. If we only need to check for simple types such as bool or unsigned char, we should not need that. This change decreases contention in heavily multithreaded runs. In a test run of the AGC with 1 file and 128 threads, these are the results:. Before:; Executing the computation graphs took 23.37 seconds After:; Executing the computation graphs took 5.55 seconds. ## Notes. I was investigating a performance degradation of the AGC signalled on the forum https://root-forum.cern.ch/t/rootdataframe-and-multithreading-in-6-32/61752 . git bisect brought me to [this commit](https://github.com/root-project/root/commit/4cac104e75d15c6744144b1f0e43dcf87c35bc8a) which seems to be at least contributing to the degradation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16528:488,perform,performance,488,https://root.cern,https://github.com/root-project/root/pull/16528,1,['perform'],['performance']
Performance,"The [TMultiGraph](https://root.cern/doc/master/classTMultiGraph.html) documentation says:; MultiGraphs' Drawing; The drawing options are the same as for [TGraph](https://root.cern/doc/master/classTGraph.html). Like for [TGraph](https://root.cern/doc/master/classTGraph.html), the painting is performed thanks to the [TGraphPainter](https://root.cern/doc/master/classTGraphPainter.html) class. Maybe it could be clarified, or maybe it's just me that gets confused with that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11250#issuecomment-1226867698:292,perform,performed,292,https://root.cern,https://github.com/root-project/root/issues/11250#issuecomment-1226867698,1,['perform'],['performed']
Performance,"The _miss cache_, implemented in this pull request, implements an optimization when the TTreeCache fails to work. The miss cache will keep track of any branch that has been accessed; when there is a TTC miss, it automatically fetches the current basket for all active branches. This should have a worst case read size equal to the size of the file's cluster size, but potentially a significant savings in the number of IO operations. The latter is extremely useful if we're doing IO on high-latency links. This optimization works well for the ""trigger pattern,"" where the user may examine a number of branches and, when the event contents for those branches passes a particular filter, reads out the remaining branches. If there are 100 additional branches, this would do all reads in a single network round-trip as opposed to 100 round trips. The approach has served us well in CMS and been utilized as a layer on top of ROOT for about 3 years. Unfortunately, we must iterate through a set of branches and find the correct basket. This is not necessarily a cheap CPU operation and may be too expensive if the underlying filesystem is SSD-based. Hence, we turn this optimization off by default.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/240:66,optimiz,optimization,66,https://root.cern,https://github.com/root-project/root/pull/240,5,"['cache', 'latency', 'optimiz']","['cache', 'latency', 'optimization']"
Performance,The `-O1` optimization flag has nasty side effects on Windows (32 and 64 bit). These side effects are described in the issue #9809 on Win32 and the issue #9944 on Win64. To be reviewed after the upgrade of LLVM & Clang,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9945:10,optimiz,optimization,10,https://root.cern,https://github.com/root-project/root/pull/9945,1,['optimiz'],['optimization']
Performance,"The `FlexibleInterpVar` and the `PiecewiseInterpolation` classes in; HistFactory can both interpolate asymmetric up-and-down variations; between the +/- one standard deviation such that both the first and; second derivatives of the scale factors are smooth. The `PiecewiseInterpolation` class is more general, because instead of; taking constant interpolation parameters, it takes other `RooAbsReals`.; That means it makes no sense for that class to cache the polynomial; coefficients that have to re recomputed anyway each time the input; changes. It uses an optimized formula to do the interpolation on the; fly. The `FlexibleInterpVar` however precomputes and caches the polynomial; coefficients. This has serveral disadvantages:. * High cost in memory (the big ATLAS models can have thousands of; `FlexibleInterpVars`. * It's inconsistent with the `PiecewiseInterpolation`, which should be; equivalent. * Most importantly, and this was the motivation for this PR now:; when we do the code generation for AD, we can't pre-compute cached; coefficients because it would bloat the generated code with constant; arrays. Computing on the fly is much more AD-friendly. Validation of the new `FlexibleInterpVar` values for `low=0.9` and; `high=1.2` that shows the interpolated values are agreeing to the 5e-4; level. This is completely accepatable for such an ad-hoc polynomial; motivation, where the shape is not given by any physical meaning anyway; but just by the continuity condition at the boundaries. And at the; boundaries (and `param=0`), the difference between both implementations; goes to zero. It was also checked that this change has no performance; effect on fitting the full ATLAS Higgs combination modes. ```txt; param ref new diff_abs diff_rel; 0 -1.00 0.9000000000 0.9000000000 0.0000000000 0.00E+00; 1 -0.95 0.9047424331 0.9047437816 0.0000013485 1.49E-06; 2 -0.85 0.9140836603 0.9141118876 0.0000282273 3.09E-05; 3 -0.75 0.9230659064 0.9231653329 0.0000994265 1.08E-04; 4 -0.65 0.9317",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13067:450,cache,cache,450,https://root.cern,https://github.com/root-project/root/pull/13067,3,"['cache', 'optimiz']","['cache', 'caches', 'optimized']"
Performance,"The `R__ALWAYS_INLINE` macro was introduced by commit b7c9be5 in TBufferJSON. However, it breaks the build with GCC and the `-Og` flag, for debug-compatible optimizations:. ```txt; In member function ‘void TBufferJSON::JsonWriteFastArray(const T*, Int_t, const char*, void (TBufferJSON::*)(const T*, Int_t, const char*)) [with T = bool]’,; inlined from ‘virtual void TBufferJSON::WriteFastArray(const Bool_t*, Int_t)’ at /home/rembserj/spaces/master-debug/root/src/root/io/io/src/TBufferJSON.cxx:3296:22:; /home/rembserj/spaces/master-debug/root/src/root/io/io/src/TBufferJSON.cxx:3034:23: error: inlining failed in call to ‘always_inline’ ‘void TBufferJSON::JsonWriteArrayCompress(const T*, Int_t, const char*) [with T = bool]’: function not considered for inlining; 3034 | R__ALWAYS_INLINE void TBufferJSON::JsonWriteArrayCompress(const T *vname, Int_t arrsize, const char *typname); ```. Libraries other than ROOT have also encountered similar problems: https://github.com/Cyan4973/xxHash/pull/804. The `R__ALWAYS_INLINE` macro is probably not necessary for these templated functions, because the compiler figures out itself whether it's worth to inline the templated functions or not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13894:157,optimiz,optimizations,157,https://root.cern,https://github.com/root-project/root/pull/13894,1,['optimiz'],['optimizations']
Performance,"The `RooAbsBinning` interface for bin index lookups was changed to; enable vectorized implementations. Instead of having the override; `RooAbsBinning::binNumber()`, the binning implementations now have to; override the `RooAbsBinning::binNumbers()` function to evaluate the bin; indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate; the accregation of bin indices over multiple dimensions, and it uses a; `double` ouput vector such that the caller can reuse the output buffer; for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms; of the vectorized version, such that we automatically get wide test; coverage. It was verified that this doesn't come with a performance; overhead. This will greatly facilitate the vectorization of the RooHistPdf and; RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11151:769,perform,performance,769,https://root.cern,https://github.com/root-project/root/pull/11151,1,['perform'],['performance']
Performance,"The `RooAbsReal::getValues` has already been established as the entry; point for evaluating RooFit objects with the batch mode and it should; not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar; mode all the time, because the `evaluateSpan` funtions it used got; replaced by `computeBatch`. In this commit, the desired behavior of; using the BatchMode is restored by using the RooFitDriver. To that end, a; new constructor has been added to the RooFitDriver that takes a; `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because; it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9986:695,perform,performance,695,https://root.cern,https://github.com/root-project/root/pull/9986,2,['perform'],['performance']
Performance,"The `RooAddModel::CacheElem` was exactly the same as for the RooAddPdf.; Hence, the RooAddPdf was refactored a bit such that the code to generate; the CacheElem could be reused in the RooAddModel.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11139:18,Cache,CacheElem,18,https://root.cern,https://github.com/root-project/root/pull/11139,2,['Cache'],['CacheElem']
Performance,"The `RooFitDriver.cxx` source file was growing a lot recently, and many; functional parts were mixed together. For example, the loading of spans; from the dataset and the analysis of the computation graph are two; separate things but they were mixed in this file. This commit suggests to improve the situation by moving all data related; functionality to a new file `BatchModeDataHelpers.cxx`. Some CUDA; helpers are also moved to `CUDAHelpers.cxx`. Another helper function was; moded to `BatchModeHelpers.cxx` to keep the footprint of; `RooFitDriver.cxx` small such that new contributors can get started more; easily.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10477:128,load,loading,128,https://root.cern,https://github.com/root-project/root/pull/10477,1,['load'],['loading']
Performance,"The `RooParamHistFunc` doesn't take any observable RooRealVar as; constructor argument. It assumes as observable the internal variables in; the passed RooDataHist. This means it is in most contexts unusable,; because the input can't be changed, other than loading a different bin; in the dataset. This also breaks the Barlow-Beeston tutorial since the new evaluation; backend is the default, and it is more sentitive to these issues:; https://root.cern.ch/doc/master/rf709__BarlowBeeston_8C.html. There was actually a constructor that took a `RooAbsArg x`, but it was; simply ignored. To fix all these problems, the existing constructors were replaced by a; new one that takes the observable explicitly, and this is mentioned in; the release notes. The class is not used much, because ussually people use HistFactory or; CMS combine for these kind of fits. To backport to ROOT 6.32.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15224:256,load,loading,256,https://root.cern,https://github.com/root-project/root/pull/15224,1,['load'],['loading']
Performance,"The `RooVectorDataStore` had two different buffers to store the row data in: the so-called ""attached buffers"" and the ""native buffers"". The problem is that when external buffers are attached, the call to `RooVectorDataStore::get()` is not loading the native buffers anymore, which is breaking some code that assumes this, like `RooVectorDataStore::loadValues`, which is used in `RooDataSet::reduce`. This breaks the reduction of datasets with externally attached buffers, which breaks the copy constructor of the `RooNLLVar`. This commit suggests to always load both the native and attached buffers if `RooVectorDataStore::get()` is called. This has almost no performance overhead and is much safeter. Since this change fixes the copy constructor of the `RooNLLVar`, which is used when plotting the NLL, this commit fixes this JIRA ticket: https://sft.its.cern.ch/jira/browse/ROOT-9752. A unit test that covers the problem reported in the JIRA ticket is also added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11477:239,load,loading,239,https://root.cern,https://github.com/root-project/root/pull/11477,4,"['load', 'perform']","['load', 'loadValues', 'loading', 'performance']"
Performance,"The `_chg_truncated` functions, e.g. `unur_hinv_chg_truncated` and `unur_tdr_chg_truncated`, change the range of sampled random variables without expensive reinitialization of the generator. So first one initializes the generator with a pdf with a domain (xmin, xmax) and later changes the range in which numbers are actually sampled from (xmin, xmax) to (xmin1, xmax1) which is a sub-range of (xmin, xmax). For methods which do not support this functionality the only option is to change the domain and reinitialize the generator. My use case is that I have a pdf for which I need to change the sampling range for every sample, because it depends on kinematic limits for the given event, although the pdf does not change. Obviously reinitializing the generator would be very costly for the performance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7332#issuecomment-880485959:791,perform,performance,791,https://root.cern,https://github.com/root-project/root/issues/7332#issuecomment-880485959,1,['perform'],['performance']
Performance,"The `bool` columns in RDF are special, because the Take action returns a `std::vector<bool>`, which has an implementation-depended memory layout for space optimization. Therefore, I suggest supporting taking `bool` columns as `unsigned char` with `Take()`, such that in `RDataFrameAsNumpy` the values can be directly taken as bytes. This avoids superfluous copying in the code, and keeps the special logic in the pythonization side minimal. Closes #8639.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15180:155,optimiz,optimization,155,https://root.cern,https://github.com/root-project/root/pull/15180,1,['optimiz'],['optimization']
Performance,"The `getattr` pythonization for TDirectory is caching the retrieved objects as attributes of the TDirectory. To check that the objects are not cached initially, there is a check that the TDirectory instance has no attributes at all. This is too strict, as we care only that the supposedly cached attribute is not there. This commit suggests to explicity check for at attribute with the name of the object. The reason for changing this now is because the old check would not work anymore with the new CPyCppyy. With the new version, additional lifeline attributes are set by cppyy to manage the lifetimes of objects. This is a spinoff of the CPyCppyy syncronization PR, which was created to factorize the review process.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14706:143,cache,cached,143,https://root.cern,https://github.com/root-project/root/pull/14706,2,['cache'],['cached']
Performance,The `grep` is quite long to perform.. it adds 1 minute. Well compared to the whole build it is only a small %.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11614#issuecomment-1302126005:28,perform,perform,28,https://root.cern,https://github.com/root-project/root/pull/11614#issuecomment-1302126005,1,['perform'],['perform']
Performance,"The `resize` called a few lines above initializes elements as; necessary. We don't need to call GenerateValue on those memory; locations (which performs another placement new on them), rather; a CaptureValue is enough.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10441:144,perform,performs,144,https://root.cern,https://github.com/root-project/root/pull/10441,1,['perform'],['performs']
Performance,"The `roobatchcompute` library dynamically loads the most performant implementation library that the CPU supports. However, it throws an error if the library was already loaded. Indeed, in most usecases it's correct that the implementation library is not loaded before the RooBatchCompute main library is initialized, but if a RooFit script is executed via; `gInterpreter->LoadMacro(""Macro_Name.cxx++"")`, the library is already loaded the second time the macro is launched like this. Hence, it's better is the `batchcompute` library throws no exception if the implementation is already loaded. This fixes a problem reported on the forum:; https://root-forum.cern.ch/t/roofit-computation-library-libroobatchcompute-avx2-was-loaded-before-roofit-initialisation-began/54580",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12696:42,load,loads,42,https://root.cern,https://github.com/root-project/root/pull/12696,8,"['Load', 'load', 'perform']","['LoadMacro', 'loaded', 'loaded-before-roofit-initialisation-began', 'loads', 'performant']"
Performance,"The `tmva-cpu` BLAS-accelerated TMVA backend uses the openblas version found on the system, but NumPy also ships its own `openblas` library when installed with pip. If both openblas versions are loaded, segfaults can occur if they are incompatible. We currently see this on the `alma9` CI runners. The minimal remedy for this is to just disable the TMVA BLAS backend. Nobody is using the CPU to train neural nets nowadays anyway. Like this, we don't have to disable features like PyMVA or RBDT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15302:195,load,loaded,195,https://root.cern,https://github.com/root-project/root/pull/15302,1,['load'],['loaded']
Performance,"The `tmva-cpu` BLAS-accelerated TMVA backend uses the openblas version found on the system, but NumPy also ships its own `openblas` library when installed with pip. If both openblas versions are loaded, segfaults can occur if they are incompatible. We currently see this on the `alma9` CI runners. The minimal remedy for this is to just disable the TMVA BLAS backend. Nobody is using the CPU to train neural nets nowadays anyway. Like this, we don't have to disable features like PyMVA or RBDT. Backport of https://github.com/root-project/root/pull/15302.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15303:195,load,loaded,195,https://root.cern,https://github.com/root-project/root/pull/15303,2,['load'],['loaded']
Performance,"The `tmva-cpu` BLAS-accelerated TMVA backend uses the openblas version found on the system, but NumPy also ships its own `openblas` library when installed with pip. If both openblas versions are loaded, segfaults can occur if they are incompatible. We currently see this on the `alma9` CI runners. The minimal remedy for this is to just disable the TMVA BLAS backend. Nobody is using the CPU to train neural nets nowadays anyway. Like this, we don't have to disable features like PyMVA or RBDT. Backport of https://github.com/root-project/root/pull/15302. Also, disable `tmva-pymva` on newer macOS versions, which are not supported by this ROOT version yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15305:195,load,loaded,195,https://root.cern,https://github.com/root-project/root/pull/15305,1,['load'],['loaded']
Performance,"The attached image shows a summary of differences on KNL with 128 threads. Notice how the wait time is significantly reduced from 1485.7s to 1105s. There are also 2936 less waits than before. CPU time of all threads is reduced by ~50s. These are not hugely visible in real runtime, because we are limited by I/O to the disk, essentially, but it would be clearly visible if I/O ceases to be the main bottleneck. The two figures on the bottom show that the time during which the threads run is shorter after the changes introduced in this PR. For reference, the running time without using VTune is about 40s. ![screenshot](https://user-images.githubusercontent.com/249404/27963876-988c7862-6336-11e7-9598-e48c4c760a5e.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964106-678b94b8-6337-11e7-9464-5cc1f4312bd1.png). ![screenshot](https://user-images.githubusercontent.com/249404/27964127-7ed03c78-6337-11e7-8832-7c61643b4939.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/747#issuecomment-313710392:399,bottleneck,bottleneck,399,https://root.cern,https://github.com/root-project/root/pull/747#issuecomment-313710392,1,['bottleneck'],['bottleneck']
Performance,"The best way to decrease your runtime would be transferring the data you need onto a faster storage medium (i.e. a faster disk/drive such as an SSD, or connecting to a faster network for remote file access), or to use a compression algorithm with a higher compression ratio, possibly at the cost of the decompression rate. Changing the number of threads is unlikely to help, and in fact using too many threads may degrade performance if they make requests to different regions of your local storage.; N.B. If no '--threads' argument was provided this is 1, otherwise it is the minimum of the value provided and the number of threads your CPU can run in parallel. It is worth noting that - on shared systems or if running other heavy applications - the number of your own threads running at any time may be lower than the limit due to demand on the CPU. 3. The 'Real Time' is similar to 'CPU Time / number of threads' AND 'Compressed Throughput' is lower than expected for your storage medium:; This would imply that your CPU threads aren't decompressing data as fast as your storage medium can provide it, and so decompression is the bottleneck. The best way to decrease your runtime would be to utilise a system with a faster CPU, or make use use of more threads when running, or use a compression algorithm with a higher decompression rate such as LZ4, possibly at the cost of some extra file size. A note on caching:. If your data is stored on a local disk, the system may cache some/all of the file in memory after it is first read. If this is realistic of how your analysis will run - then there is no concern. However, if you expect to only read files once in a while - and as such the files are unlikely to be in the cache - consider clearing the cache before running rootreadspeed. On Linux this can be done by running `echo 3 > /proc/sys/vm/drop_caches` as a superuser or a specific file can be dropped from the cache with `dd of=<FILENAME> oflag=nocache conv=notrunc,fdatasync count=0 > /de",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14039:4676,Throughput,Throughput,4676,https://root.cern,https://github.com/root-project/root/pull/14039,2,"['Throughput', 'bottleneck']","['Throughput', 'bottleneck']"
Performance,"The bt from gdb when loading this dictionary in other application (ThePEG); ```; (gdb) bt; #0 __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:49; #1 0x00007ffff73588a4 in __GI_abort () at abort.c:79; #2 0x00007ffff73b2177 in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff74c43a7 ""%s\n"") at ../sysdeps/posix/libc_fatal.c:155; #3 0x00007ffff73b9e6c in malloc_printerr (str=str@entry=0x7ffff74c2654 ""malloc(): corrupted top size"") at malloc.c:5389; #4 0x00007ffff73bd884 in _int_malloc (av=av@entry=0x7ffff74f6a00 <main_arena>, bytes=bytes@entry=48) at malloc.c:4135; #5 0x00007ffff73be8f4 in __GI___libc_malloc (bytes=48) at malloc.c:3078; #6 0x00007ffff7708959 in operator new (sz=sz@entry=48) at ../../../../libstdc++-v3/libsupc++/new_op.cc:50; #7 0x00007ffff368ded2 in TClassTable::FindElementImpl (cname=cname@entry=0x7ffff3e851be ""HepMC3::GenParticleData"", insert=insert@entry=true) at /usr/src/debug/root-6.22.08-1.fc33.x86_64/core/cont/src/TClassTable.cxx:525; #8 0x00007ffff368e591 in TClassTable::Add (cname=0x7ffff3e851be ""HepMC3::GenParticleData"", id=<optimized out>, info=..., dict=0x7ffff3e81a40 <ROOT::HepMC3cLcLGenParticleData_Dictionary()>, pragmabits=4); at /usr/src/debug/root-6.22.08-1.fc33.x86_64/core/cont/src/TClassTable.cxx:352; #9 0x00007ffff36fd338 in ROOT::TGenericClassInfo::TGenericClassInfo (this=this@entry=0x7ffff3e8c340 <ROOT::GenerateInitInstanceLocal(HepMC3::GenParticleData const*)::instance>, fullClassname=fullClassname@entry=0x7ffff3e851be ""HepMC3::GenParticleData"", ; declFileName=declFileName@entry=0x7ffff3e851a0 ""HepMC3/Data/GenParticleData.h"", declFileLine=declFileLine@entry=24, info=..., action=<optimized out>, dictionary=0x7ffff3e81a40 <ROOT::HepMC3cLcLGenParticleData_Dictionary()>, isa=0xe09a50, pragmabits=4, ; sizof=56) at /usr/src/debug/root-6.22.08-1.fc33.x86_64/core/meta/src/TGenericClassInfo.cxx:102; #10 0x00007ffff3e819a9 in ROOT::GenerateInitInstanceLocal () at /usr/src/debug/HepMC3-3.2.3-1.fc33.x86_64/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7781#issuecomment-812846680:21,load,loading,21,https://root.cern,https://github.com/root-project/root/issues/7781#issuecomment-812846680,1,['load'],['loading']
Performance,The case where the buffered implementation would possibly be more efficient are cases where the production rate varies so that there is time period where the queue grows (data production rate is high) and time where the queue decreases (data production rate is low (uses more cpu time)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14034#issuecomment-1814379159:158,queue,queue,158,https://root.cern,https://github.com/root-project/root/pull/14034#issuecomment-1814379159,2,['queue'],['queue']
Performance,"The changes in this pull request allows RNTuple to use Intel DAOS as storage backend (through libdaos). This support is still experimental. Currently, each page is assigned a sequential OID at the time it is commited; reserved OIDs are used to store the header, the footer, and the anchor. Each DAOS container cannot contain more than one ntuple. We expect at least three different follow-up pull requests that will address the following:; - Commit/load of sealed pages.; - Transition from the naive one-OID-per-page mapping to something more appropriate, e.g., map clusterIdx to dkey; akey might be the page number within the cluster.; - Multiple ntuples per DAOS container.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6825:449,load,load,449,https://root.cern,https://github.com/root-project/root/pull/6825,1,['load'],['load']
Performance,"The changes introduced in 4ce57e copy in the installation directory empty copies of all the directories found in the build directory. This was found out only recently when the MultiPython PR was merged. The solution introduced in 14366b does not work, since the globbing is performed at configuration time, when the build directory is still empty. Since commit 4ce57e was introduced only to install the ~10 pcms listed in ll. 4237-4253 of core/dictgen/src/rootcling_impl.cxx, here we find a more suitable solution to achieve this goal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4763:274,perform,performed,274,https://root.cern,https://github.com/root-project/root/pull/4763,1,['perform'],['performed']
Performance,"The cluster pool now not only schedules loading of the compressed pages but also their prompt decompression. All the pages that have been loaded are now pushed into a follow-up pipeline step for decompression and pushing into the page pool. This is done with multiple threads. Compared to unwrapping pages on demand, we might now decompress pages from which we never read (because they get completely skipped by the analysis). The RNTuple benchmarks suggest, however, that this happens quite rarely (<1%).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6106:40,load,loading,40,https://root.cern,https://github.com/root-project/root/pull/6106,2,['load'],"['loaded', 'loading']"
Performance,"The code issue seems to be that because the `TClonesArray` are not split, they require loading the original library to read the files. (I failed to emulate that library with `TFile::MakeProject` so there might still be other problems with the file which is at least missing some `StreamerInfo` entries).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12537#issuecomment-1481779109:87,load,loading,87,https://root.cern,https://github.com/root-project/root/issues/12537#issuecomment-1481779109,1,['load'],['loading']
Performance,"The code looks fine to me. I don't think using vector::reserve is needed in this case. . It would be nice to test the performance in a complex fix which takes some time and uses heavily the cache, The tutorial are maybe too simple and the fitting is too fast. ; If you can maybe simplify your workspace and make a standalone running example would be great. ; Also, did you observe a substantial performance penalty when creating the std::vector in recalculateCache instead of having as a data member of the class ? . Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/116#issuecomment-293337111:118,perform,performance,118,https://root.cern,https://github.com/root-project/root/pull/116#issuecomment-293337111,3,"['cache', 'perform']","['cache', 'performance']"
Performance,"The code seems fine. The commit logs reads:; ```; Before, it was loading the library which doesn't exists; ```; I am bit confused by the wording, what is the intent?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2167#issuecomment-396270321:65,load,loading,65,https://root.cern,https://github.com/root-project/root/pull/2167#issuecomment-396270321,1,['load'],['loading']
Performance,"The commit consistently marks the `RooAbsCache` class and the derived; `RooCacheManager` and `RooObjCacheManager` classes as transient; whereever they are used in RooFit, effectively excluding them from I/O. This change was made primarily to fix a bug happening when models are; read back from a ROOT file (the pointes in `RooAbsArg::_cacheList` were; not correct anymore), but it also has the nice effect of reducing the; size of RooFit models. The classes were almost de-facto removed from I/O already, because; almost all of their data members were excluded from I/O anyway. The only; exceptions are the following data members:. * `RooObjCacheManager::_clearOnRedirect`. * `RooObjCacheManager::_allowOptimize`. * `RooAbsCache::_owner`. All of these values are set in the respective constructors and are never; changed. To make these values consistent even if a class that uses a; cache is read back from a ROOT file, the correct constructor for the; cache is now also called in the default I/O constructors of the classes. A simple reproducer to see problem with `RooAbsArg::_cacheList` after reading back the model:. ```C++; #define private public. #include ""RooWorkspace.h""; #include ""RooGaussian.h"". #include ""TFile.h"". void reproducer() {. {; RooWorkspace w(""w"",""w"");; w.factory(""RooGaussian::gaus(x[0,-10,10],mean[0,-10,10],sigma[1,0.1,10.0])"");; w.writeToFile(""file.root"");. auto gaus = w.pdf(""gaus"");; std::cout << &gaus->_normMgr << std::endl;; std::cout << gaus->getCache(0) << std::endl;; std::cout << gaus->numCaches() << std::endl;. gaus->IsA()->GetListOfDataMembers()->Print();; }. {; TFile f1(""file.root"");; auto w =f1.Get<RooWorkspace>(""w"");. auto gaus = w->pdf(""gaus"");; std::cout << &gaus->_normMgr << std::endl;; std::cout << gaus->getCache(0) << std::endl;; std::cout << gaus->numCaches() << std::endl;. delete w;; }. }; ```. Here the nice report from @will-cern (thanks!!) that motivated this PR to give some more context:. > have been recently working on a workflow that involv",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8764:883,cache,cache,883,https://root.cern,https://github.com/root-project/root/pull/8764,2,['cache'],['cache']
Performance,"The commit for Vc/VecCore sneaked in from another branch. I added it just to shut up warnings because of how things are on master at the moment, but it's not part of this PR (i.e. I will remove it prior to merging). I don't see a decrease of single thread performance, did you measure it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/666#issuecomment-310398952:256,perform,performance,256,https://root.cern,https://github.com/root-project/root/pull/666#issuecomment-310398952,1,['perform'],['performance']
Performance,"The commits in this PR contain the necessary steps performed in order to allow the user to build PyROOT with more than one versions of Python. The version in use can be changed with the usual `source thisroot.sh` preceded by the specific Python version, e.g.:; `ROOT_PYTHON_VERSION=3.6 source bin/thisroot.sh`; performed inside the build directory. ; Quick summary of the commits:; (1) set the necessary CMake variables to build the PyROOT libraries in lib/pythonX.Y; (2) modify thisroot.sh to allow the user to select the Python version; (3) necessary changes to pyunittests and tutorials CMake variables; (4) installation",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4279:51,perform,performed,51,https://root.cern,https://github.com/root-project/root/pull/4279,2,['perform'],['performed']
Performance,"The commonality between the two cases seems to be that we generate a lot of code in a single function. The current hypothesis is that this makes some optimization (or their required analyses) explode because compilers perform better for a more balanced ratio of number of functions and their lengths. We therefore want to; 1. confirm that this is actually the case by creating a reproducer, ideally without including ROOT headers (but how hard can it be to generate some code...). If that also explodes, and confirms that performance is regressing with newer versions of LLVM, we can send that to `llvm-dev` and ask for help / advice.; 2. For RDF graphs, we could try chunking the code into multiple functions when exceeding a certain threshold, because we do want optimizations without things exploding.; 3. For the graphics code, we could just re-enable the existing [`#pragma cling optimize(0)`](https://github.com/root-project/root/blob/master/graf2d/gpad/src/TCanvas.cxx#L1891-L1894) because there we don't really care about optimizations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9312#issuecomment-976479313:150,optimiz,optimization,150,https://root.cern,https://github.com/root-project/root/issues/9312#issuecomment-976479313,6,"['optimiz', 'perform']","['optimization', 'optimizations', 'optimize', 'perform', 'performance']"
Performance,"The complete overnight build is certainly necessary and preferably from scratch (so no residuals are left over). Advantage of the tag files might be that some sub-projects can be build in parallel.; A reasonable new feature is the setting `NUM_PROC_THREADS`, so it might still be a bit buggy but it would definitely be of interest to see how ROOT performs here and whether or not the output is the same for larger project, so doxygen could be improved as well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8742#issuecomment-888471898:347,perform,performs,347,https://root.cern,https://github.com/root-project/root/issues/8742#issuecomment-888471898,1,['perform'],['performs']
Performance,"The crash occurs due to a missing guard that prevents `libcudart.so` from being loaded. Loading a library requires an executor which is not available in syntax-only mode. Without guard, the following assert is triggered in a debug build:; ```; cling: /home/sehrig/workspace/cling/llvm/tools/cling/lib/Interpreter/Interpreter.cpp:1657: const cling::DynamicLibraryManager *cling::Interpreter::getDynamicLibraryManager() const: Assertion `m_Executor.get() && ""We must have an executor""' failed.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10659:80,load,loaded,80,https://root.cern,https://github.com/root-project/root/pull/10659,2,"['Load', 'load']","['Loading', 'loaded']"
Performance,"The current code goes through different codepaths depending on the platform. One of the codepaths relies on a non-standard extension (variable-length arrays) and the other manually allocates and frees a char array.; Using a std::string, while losing a bit of performance on Linux/Mac, simplifies and unifies the codepaths and avoids using non-standard C++ (which in turns enable building with -Werror).; The perf hit is most likely negligible, especially given the use of dynamic_cast in the same block.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16476:259,perform,performance,259,https://root.cern,https://github.com/root-project/root/pull/16476,1,['perform'],['performance']
Performance,"The current failure in snapshot is due to an ABI incompatibility (or so it seems) that we may have encountered before.; The failing line is:; {code:c++}; auto snapshotRDF = std::make_shared<RInterface<RLoopManager>>(std::make_shared<RLoopManager>(nullptr, validCols));; {code}; and one of the component of make_shared is the call to the following shared_ptr constructor; {code:c++}; // This constructor is non-standard, it is used by allocate_shared.; template<typename _Alloc, typename... _Args>; shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,; _Args&&... __args); : __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...); { }; {code}; Note the use of std::forward. The snapshot test has 2 steps:. 1. Do the work, including a call to SnapshotImpl which contains the problem line, with only compiled code; 2. Do the same work relying on interpreted code, in which case SnapshotImpl is called via the interpreter. The symptoms of the failure is that **if** the snapshot test is compiled with optimization then. a. The compiled version works fine; b. In the interpreted version the constructor of the RInterface is wrong because the shared_ptr its constructor sees is **not** initialized. If the snapshot test is compiled without optimization then both steps succeeds. The main difference between the two is the amount of fully realized (i.e. non-inlined) functions emitted by the compiler. In the success fully case we have a stack like. {code}; interp SnapshotImpl calls; compiled std::make_shared<ROOT::Detail::RDF::RLoopManager … [in debug mode. this routine and down are used compiled]; compiled std::allocate_shared<ROOT::Detail::RDF::RLoopManager; ... implementation details .. all compiled.; compiled ROOT::Detail::RDF::RLoopManager::RLoopManager; compiled std::make_shared<ROOT::RDF::RInterface …; compiled std::allocate_shared<ROOT::RDF::RInterface …; compiled std::shared_ptr< ROOT::RDF::RInterface; compiled std::__shared_ptr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopMa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2158:1008,optimiz,optimization,1008,https://root.cern,https://github.com/root-project/root/pull/2158,1,['optimiz'],['optimization']
Performance,"The current failures stem from the excessive deserialization with call stack:; ```; frame #58: 0x00000001042e4611 libCling.so`TClingMethodInfo::SpecIterator::SpecIterator(this=0x00007fff5fbf7fc0, decl=0x0000000102b143c8) at TClingMethodInfo.cxx:66; frame #59: 0x00000001042e02dd libCling.so`TClingMethodInfo::SpecIterator::SpecIterator(this=0x00007fff5fbf7fc0, decl=0x0000000102b143c8) at TClingMethodInfo.cxx:66; frame #60: 0x00000001042de711 libCling.so`TClingMethodInfo::InternalNext(this=0x000000011b4805d0) at TClingMethodInfo.cxx:439; frame #61: 0x00000001042e0345 libCling.so`TClingMethodInfo::Next(this=0x000000011b4805d0) at TClingMethodInfo.cxx:463; frame #62: 0x000000010418b5f1 libCling.so`TCling::MethodInfo_Next(this=0x0000000100d2c4a0, minfo=0x000000011b4805d0) const at TCling.cxx:8023; frame #63: 0x0000000100411d70 libCore.so`TListOfFunctions::Load(this=0x000000011b4803d0) at TListOfFunctions.cxx:391; frame #64: 0x00000001003b8623 libCore.so`TClass::GetListOfMethods(this=0x000000011b480050, load=true) at TClass.cxx:3673; frame #65: 0x000000011acc89c4 libPyROOT.so`Cppyy::GetNumMethods(scope=10) at Cppyy.cxx:662; frame #66: 0x000000011ad28c71 libPyROOT.so`PyROOT::CreateScopeProxy(scope_name=""ROOT"", parent=0x0000000000000000) at RootWrapper.cxx:592; ```. @yamaguchi1024, that might be a good hint for you, too.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547#issuecomment-372030221:862,Load,Load,862,https://root.cern,https://github.com/root-project/root/pull/1547#issuecomment-372030221,2,"['Load', 'load']","['Load', 'load']"
Performance,"The current table of contents for https://root.cern/doc/master/classROOT_1_1RDataFrame.html is:; * Cheat sheet; * Introduction; * Crash course; * Efficient analysis in Python; * More features; * Transformations – manipulating data; * Actions – getting results; * Parallel execution – how to use it and common pitfalls; * Class reference – most methods are implemented in the RInterface base class. I think ""Parallel execution"" should become ""Performance tips and parallel execution"" and RunGraphs should have a section in there. But I'm open to better ideas!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6423#issuecomment-697346699:442,Perform,Performance,442,https://root.cern,https://github.com/root-project/root/pull/6423#issuecomment-697346699,1,['Perform'],['Performance']
Performance,The datasets are suboptimally created and trigger the loading of the; full dataset with reading the metadata. This results in reading 150GB; of data even if we run nominally only on 1% of the events.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6051:54,load,loading,54,https://root.cern,https://github.com/root-project/root/pull/6051,1,['load'],['loading']
Performance,The definition of `TExecutor::GetPoolSize()` causes errors in builds with `runtime_cxxmodules=OFF`:; ```; IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!; You are probably missing the definition of ROOT::TThreadExecutor::GetPoolSize() const; Maybe you need to load the corresponding shared library?; atexit not defined; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7033:343,load,load,343,https://root.cern,https://github.com/root-project/root/pull/7033,1,['load'],['load']
Performance,The difference in size for a Release build is not very significant:; ```; (base) vvassilev@vv-nuc /build/vvassilev/scratch/root_rtti $ du -hs rtti/build/; 2.0G	rtti/build/; (base) vvassilev@vv-nuc /build/vvassilev/scratch/root_rtti $ du -hs master/build/; 1.9G	master/build/; (base) vvassilev@vv-nuc /build/vvassilev/scratch/root_rtti $ du -hs rtti/build/lib/; 408M	rtti/build/lib/; (base) vvassilev@vv-nuc /build/vvassilev/scratch/root_rtti $ du -hs master/build/lib/; 408M	master/build/lib/; (base) vvassilev@vv-nuc /build/vvassilev/scratch/root_rtti $ du -hs rtti/build/bin; 492K	rtti/build/bin; (base) vvassilev@vv-nuc /build/vvassilev/scratch/root_rtti $ du -hs master/build/bin; 488K	master/build/bin; ```. Running hsimple does not show any performance differences.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10289#issuecomment-1088296952:747,perform,performance,747,https://root.cern,https://github.com/root-project/root/pull/10289#issuecomment-1088296952,1,['perform'],['performance']
Performance,"The distributed RDataFrame constructor accepts an optional `npartitions` keyword argument. Previously, if this argument was provided by the user, it set the number of partitions in which the rdf would split the distributed computations.; But then, right before starting the execution, the distributed backend implementation tried to optimize this number. In the case of Spark, an educated guess for the number of partitions would be spark.executor.instances * spark.executor.cores, that is the number of distributed nodes times the number of cores used for each node.; If we let this optimization happen just before the start of the execution, it means we completely disregard the user provided value for `npartitions`. Instead, the backend guessing at a number of partitions should happen only if the user doesn't supply one.; This commit addresses the issue by moving the call to `backend.optimize_npartitions` inside the initialization of the distributed dataframe object, plus adds a couple of tests to check the behaviour in the Spark backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7841:333,optimiz,optimize,333,https://root.cern,https://github.com/root-project/root/pull/7841,2,['optimiz'],"['optimization', 'optimize']"
Performance,The documentation suggests different approach: https://github.com/root-project/root/blob/master/core/newdelete/inc/MemCheck.h#L30. libNew depends on libCore. If you use LD_PRELOAD I am quite sure libCore will be loaded beforehand and it will use the system new/delete operators *most of the time*. If libNew is part of the binary everything should be fine as the binary takes always precedence.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4722#issuecomment-571302271:212,load,loaded,212,https://root.cern,https://github.com/root-project/root/pull/4722#issuecomment-571302271,1,['load'],['loaded']
Performance,The dynamic library manager's dyld can search a symbol in the library path.; This patch uses that functionality to aid the 'unresolved while linking'; diagnostics. Now we get:; ```; cling -L lib/. ****************** CLING ******************; * Type C++ code and press enter to run it *; * Type .q to exit *; *******************************************; [cling]$ extern int gErrorIgnoreLevel;; [cling]$ gErrorIgnoreLevel; IncrementalExecutor::executeFunction: symbol 'gErrorIgnoreLevel' unresolved while linking [cling interface function]!; Symbol found in '/.../lib/libCore.so'; did you mean to load it with .L /.../lib/libCore.so ?; [cling]$; ```. We should merge it after #6385 to not disturb the upgrade process.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6606:595,load,load,595,https://root.cern,https://github.com/root-project/root/pull/6606,1,['load'],['load']
Performance,"The error message is inaccurate, it did not take into account jagged filling of the TTreeCache. In this case, the cache was filled with a little more than one cluster and when it needs to do the next refill it restarted from the cluster start boundary of that partially downloaded cluster which is “indeed” within the range of the last TreeCache fill (i.e. the error).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8048#issuecomment-829528504:114,cache,cache,114,https://root.cern,https://github.com/root-project/root/issues/8048#issuecomment-829528504,1,['cache'],['cache']
Performance,"The error messages seems harder to produce (however it is legitimate to issue a message, it bug is that the message is reversed). [Now] you need to make an effective modification to the io header:; ```; pcanal@Viroflay:~/root_working/build/pristine-opt/src$ git diff; diff --git a/io/io/inc/TFile.h b/io/io/inc/TFile.h; index d5d6722e70..02d310f1cd 100644; --- a/io/io/inc/TFile.h; +++ b/io/io/inc/TFile.h; @@ -71,7 +71,8 @@ public:; enum ECacheAction { kDisconnect = 0, kDoNotDisconnect = 1 };. protected:; - Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far; +int fnewmember;; +Double_t fSumBuffer{0}; ///<Sum of buffer sizes of objects written so far; Double_t fSum2Buffer{0}; ///<Sum of squares of buffer sizes of objects written so far; Long64_t fBytesWrite{0}; ///<Number of bytes written to this file; Long64_t fBytesRead{0}; ///<Number of bytes read from this file; ```; and then (of course :) ) provoke an ""intentionally"" inconsistent built by doing a partial build:; ```; ninja RIO; ```; (otherwise ninja/make will correctly rebuild the pcm) and then:; ```; pcanal@Viroflay:~/root_working/build/pristine-opt$ rb RIO && root.exe -b -l -q; [26/26] Linking CXX shared library lib/libRIO.so; <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/pristine-opt/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date; <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/pcanal/root_working/build/pristine-opt/lib/MathCore.pcm'; Failed to load module MathCore; Failed to load module Hist; Failed to load module ROOTTMVASofie; input_line_4:2:2: error: unknown type name 'include'; #include ""TError.h""; ^; etc ....; ```. Note that RIO.pcm is already the ""newest"" of the pcm so it can not be the one out of date :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7704#issuecomment-932732690:1567,load,load,1567,https://root.cern,https://github.com/root-project/root/issues/7704#issuecomment-932732690,3,['load'],['load']
Performance,"The error occurs only when `loadLibrary()` is called with the argument `resolved = false`.; The const reference of lResolved in the statement `const std::string& canonicalLoadedLib = resolved ? libStem.str() : lResolved;` is a copy because the compiler insert the copy constructor and creates a temporary object. This is required, that the return type of libStem.str() and lResolved has the same value; type: prvalue. ## Checklist:. - [ ] tested changes locally. Related cling PR: https://github.com/root-project/cling/pull/455",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10593:28,load,loadLibrary,28,https://root.cern,https://github.com/root-project/root/pull/10593,1,['load'],['loadLibrary']
Performance,The error on `ROOT-performance-centos8-multicore/cxx17` is as usual related to `lvm::identify_magic`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10961#issuecomment-1184195689:19,perform,performance-,19,https://root.cern,https://github.com/root-project/root/pull/10961#issuecomment-1184195689,1,['perform'],['performance-']
Performance,"The error says; `./copiedEvent: error while loading shared libraries: libCore.so.6.14: cannot open shared object file: No such file or directory`; which is true, because we have `libCore.so.6.17` now...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2435#issuecomment-455587098:44,load,loading,44,https://root.cern,https://github.com/root-project/root/pull/2435#issuecomment-455587098,1,['load'],['loading']
Performance,The errors are unrelated.; ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:; df105_WBosonAnalysis_py: timeout; roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7018#issuecomment-759120884:166,perform,performance-,166,https://root.cern,https://github.com/root-project/root/pull/7018#issuecomment-759120884,1,['perform'],['performance-']
Performance,The errors on ROOT-performance-centos8-multicore/default. are pre-existing.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7018#issuecomment-760532814:19,perform,performance-,19,https://root.cern,https://github.com/root-project/root/pull/7018#issuecomment-760532814,1,['perform'],['performance-']
Performance,"The example code enables fp exceptions. fp operations are not ""stable"" - high optimization levels can re-order / re-arrange fp operations, causing fp exceptions that wouldn't be there for lower optimization levels. I like to understand why fp exceptions are a topic for you. While ROOT does offer an interface to manipulate the fp exception mask, it does *not* turn on fp exceptions by default. I wonder why they are on for you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713438085:78,optimiz,optimization,78,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713438085,2,['optimiz'],['optimization']
Performance,"The fact that TRandom3::Rndm() etc. are not marked final is a sensible hit in performance for applications that call it in an event loop (because the compiler does not dare de-virtualize the call, so you always have a cache miss/data dependency when you encounter the call).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12547:78,perform,performance,78,https://root.cern,https://github.com/root-project/root/issues/12547,2,"['cache', 'perform']","['cache', 'performance']"
Performance,The failure in TThreadedObjectAutoMemManagement appears to be likely a race condition that we just introduced that was not there before because the `ProcessLine` was always executed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14969#issuecomment-1998609408:71,race condition,race condition,71,https://root.cern,https://github.com/root-project/root/pull/14969#issuecomment-1998609408,1,['race condition'],['race condition']
Performance,"The failure in `test_snapshot_manytasks` is due to the following issue, introduced by this PR (and the previous failure in `test_snapshot` on 32 and 64 bit might be due to the same issue:. At the beginning of a task a new input TChain replaced the old input; TChain for that _thread_ in TTreeProcessorMT, causing a destruction of; the previous _thread-local_ TTree.; At the same time, the initialization of a new task _in a different; thread_ could delete the output TTree of a multi-thread Snapshot; action, which was listed in the fClones of the input TTree.; ; This race caused the input ~TTree to access an output tree just; after its deletion, in TTree::CopyAddresses.; ; The root cause of this issue is that TTreeProcessorMT uses thread-local; variables while RDataFrame uses processing slots which threads can; exchange between themselves. I see two options to solve this:; 1. we introduce a `FinalizeTask` method in all `RDataFrame` action helpers, and we use it in `SnapshotHelperMT` to delete the output trees when we are sure that the input tree is still in scope. This is quite easy.; 2. we have `TTreeProcessorMT` delete its thread-local `TChain`s at the end of one task, not at the beginning of the next task in that thread. @etejedor @dpiparo what do you think?; I know @amadio would be happy if we introduced a `FinalizeTask` method in symmetry with the `InitTask` that we already have",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2197#issuecomment-398737985:478,multi-thread,multi-thread,478,https://root.cern,https://github.com/root-project/root/pull/2197#issuecomment-398737985,1,['multi-thread'],['multi-thread']
Performance,"The failure is from the race condition, which was reverted. I'll re-run Jenkins and merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4332#issuecomment-527828358:24,race condition,race condition,24,https://root.cern,https://github.com/root-project/root/pull/4332#issuecomment-527828358,1,['race condition'],['race condition']
Performance,"The failure of `roottest_root_meta_tuple_exec_configtype_unload_auto` is an interesting one: It is a deserialization triggered by the `DeclUnloader`, which in turn makes the `DeclCollector` (rightfully) complain about the ""missing transaction during deserialization"". The reason for the deserialization is that `DeclUnloader` calls `spec_begin` requiring to load all specializations. I'm more and more eying to completely revert the lazy loading, as proposed in https://github.com/root-project/root/pull/12238 so that a situation like that can never happen...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12062#issuecomment-1535797912:358,load,load,358,https://root.cern,https://github.com/root-project/root/pull/12062#issuecomment-1535797912,2,['load'],"['load', 'loading']"
Performance,"The file `/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1519` doesn't exist/was removed. I tried to reproduce the error with `1529` by loading the stripped down header file (`root test.h`)instead and I now get a different error message. ```; Processing temp.h... ; In file included from input_line_8:1: ; In file included from /afs/cern.ch/user/d/dvalapar/temp.h:2: ; In file included from /cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/Phys/InstallArea/x86_64_v2-el9-gcc13-dbg/include/LoKi/Particles.h:20: ; /cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h:35:21: error: redefinition of 'CLID_ProtoParticle' ; static const CLID CLID_ProtoParticle = 803; ; ^ ; input_line_10:1:10: note: '/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h' included multiple times, additional include site here ; #include ""/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h"" ; ^ ; /cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/Phys/InstallArea/x86_64_v2-el9-gcc13-dbg/include/LoKi/Particles.h:20:10: note: '/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h' included multiple ; times, additional include site here ; #include ""Event/ProtoParticle.h"" ; ^ ; ...; ...SKIPPED LINES; ...; /cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h:55:9: error: redefinition of 'ProtoParticle' ; class ProtoParticle final : public KeyedObject<int> { ; ^ ; input_line_10:1:10: note: '/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patches/1529/LHCb/InstallArea/x86_64_v2-el9-gcc13-dbg/include/Event/ProtoParticle.h' included multiple times, additional include site here ; #include ""/cvmfs/lhcbdev.cern.ch/nightlies/lhcb-run2-patche",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15511#issuecomment-2161120817:140,load,loading,140,https://root.cern,https://github.com/root-project/root/issues/15511#issuecomment-2161120817,1,['load'],['loading']
Performance,The fit tutorials errors is; ```; Processing /build/jenkins/workspace/root-pullrequests-build/root/tutorials/fitsio/FITS_tutorial8.C...; Warning in <TFITSHDU::LoadHDU>: error opening FITS file. Details: could not open the named file; libc++abi.dylib: terminating with uncaught exception of type int; CMake Error at /build/jenkins/workspace/root-pullrequests-build/build/RootTestDriver.cmake:238 (message):; error code: Child aborted; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5099#issuecomment-597148699:159,Load,LoadHDU,159,https://root.cern,https://github.com/root-project/root/pull/5099#issuecomment-597148699,1,['Load'],['LoadHDU']
Performance,"The following sequence of calls results in c1 having a null fTree; but a non-null fFile. ```cpp; TChain* c1 = new TChain(""T"");; c1->Add(""Event.root"");. TChain* c2 = new TChain(""T2"");; c2->Add(""Event2.root/T"");; c1->AddFriend(c2);. c1->LoadTree(0);; c1->RemoveFriend(c2);. delete c1;; ```. In this situation, ~TChain ended up calling TTree::GetReadCache on; a null fTree. We now check that both fFile and fTree are valid before; trying to retrieve fTree's cache.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5489:235,Load,LoadTree,235,https://root.cern,https://github.com/root-project/root/pull/5489,2,"['Load', 'cache']","['LoadTree', 'cache']"
Performance,"The framework one depends on https://github.com/root-project/root/issues/6753; and https://gitlab.kitware.com/cmake/cmake/-/issues/21293; before we can potentially use it. And anyway if users install their own; Python we should be nice and use that, not Python coming with Xcode / cmd line tools. Works around:; dlopen(/Users/sftnight/build/jenkins/night/LABEL/mac10beta/SPEC/cxx17/V/master/build/lib/libROOTTPython.so, 9): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3; Referenced from: /Users/sftnight/build/jenkins/night/LABEL/mac10beta/SPEC/cxx17/V/master/build/lib/libROOTTPython.so; Reason: image not found",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6789:436,load,loaded,436,https://root.cern,https://github.com/root-project/root/pull/6789,1,['load'],['loaded']
Performance,"The functionality of Cache is all there. The only issue remaining is caching a cached TDF (let's call this latter ""A"") without destroying the cache of the cached (meaning ""A""). This is a side effect of the optimisation in place to deliver data with zero-copies to transformations and actions requesting it. As for testing, checking the caching works with IMT on needs to be done. The extra mile would consist in checking statically that T does not have a copy constructor and react. How to react is not completely clear to me yet. There are two ways perhaps to solve this problem: 1. Act on the container, keeping in mind that the containers which form the cache must support random access for MT execution. 2. Act on the contained type, wrapping objects in some way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1056#issuecomment-332682497:21,Cache,Cache,21,https://root.cern,https://github.com/root-project/root/pull/1056#issuecomment-332682497,5,"['Cache', 'cache']","['Cache', 'cache', 'cached']"
Performance,"The generated compiler invocation in TSystem::CompileMacro doesn't add the `-rpath` option. The output of `root-config --libs` contains that option on MacOS, so we should also have it here. This should fix errors seen in MacOS 14 when loading a shared library obtained via ACLiC. Fixes #13734",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13737:235,load,loading,235,https://root.cern,https://github.com/root-project/root/pull/13737,1,['load'],['loading']
Performance,"The generation of our PCH/PCM file requires only the header files to be in; place. There is no direct relationship between if the dictionaries will be; built or not. This patch fixes a build system bottleneck (esp visible when building in; -DLLVM_BUILD_TYPE=Debug), namely we use only one core to build the pch. Another; advantage is that now we can just say make Core or make Cling and fire up ROOT; without having to wait very long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1188:198,bottleneck,bottleneck,198,https://root.cern,https://github.com/root-project/root/pull/1188,1,['bottleneck'],['bottleneck']
Performance,"The global module index (GMI) is an optimization which hides the introduced by clang overhead when pre-loading the C++ modules at startup.; ; The GMI represents a mapping between an identifier and a set of modules which contain this indentifier. This mean that if we TH1 is undeclared the GMI will load all modules which contain this identifier which is usually suboptimal, too.; ; The semantic GMI maps identifiers only to modules which contain a definition of the entity behind the identifier. For cases such as typedefs where the entity introduces a synonym (rather than declaration) we map the first module we encounter. For namespaces we add all modules which has a namespace partition. The namespace case is still suboptimal and further improved by inspecting what exactly is being looked up in the namespace by the qualified lookup facilities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5884:36,optimiz,optimization,36,https://root.cern,https://github.com/root-project/root/pull/5884,3,"['load', 'optimiz']","['load', 'loading', 'optimization']"
Performance,"The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it.; ; Kudos Arpitha Raghunandan (@arpi-r)!. We still need some performance measurements but the preliminary results are promising. Performance; ===. Methodology; ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:; 1) root master without modules (modulesoff); 2) root master with modules (moduleson); 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation; ---; A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016:179,load,load,179,https://root.cern,https://github.com/root-project/root/pull/4016,8,"['Perform', 'load', 'perform']","['Performance', 'load', 'loaded', 'loads', 'performance']"
Performance,"The goal is to make RooFit completely independent on the cuda flag, except for building the BatchCompute CUDA library or not. This commit is the first step towards this goal. What is changed:. 1) The RooBatchCompute library has now two initialization functions: one for the CPU and one for CUDA. Like this, the CUDA library is only attempted to get loaded by the `RooFit::Evaluator` if evaluation on the GPU is requested, and not always when ROOT was built with `cuda=ON`. 2) Some code that was behind `ROOFIT_CUDA` prepprocessor macro `ifdefs` is now always built, if it doesn't depend on any symbols from CUDA libraries anyway.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15746:349,load,loaded,349,https://root.cern,https://github.com/root-project/root/pull/15746,1,['load'],['loaded']
Performance,"The idea of the RooGenProdProj is that we divide two integral objects; each created with this makeIntgral() function to get the normalized; integral of a product. Therefore, we don't need to normalize the; numerater and denominator integrals themselves. Doing the normalization; would be expensive and it would cancel out anyway. However, if we don't; specify an explicit normalization integral in createIntegral(), the; last-used normalization set might be used to normalize the pdf,; resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed; to an empty set in this case. Note that in RooFit, a nullptr; normalization set and an empty normalization set is not equivalent. The; former implies taking the last-used normalization set, and the latter; means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit; test is implemented to make sure no new numeric integrals pop up in the; reproducer code to that issue. Unfortunately, this change means that there will be again warnings about; missing `RooAddPdf` normalization sets, but this is not a regression; because these warnings only got fixed in the 6.28 development cycle in; https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12010:851,perform,performance,851,https://root.cern,https://github.com/root-project/root/pull/12010,1,['perform'],['performance']
Performance,"The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12174:625,perform,performance,625,https://root.cern,https://github.com/root-project/root/pull/12174,1,['perform'],['performance']
Performance,"The improvement at https://github.com/root-project/root/pull/10318 which stresses file opening in multi-thread RDF reported:; ```; With 256 threads (on partly loaded machine, but still representative):. Baseline:; Percent of CPU this job got: 1557%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:49.89. +this PR; Percent of CPU this job got: 14271%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.11; ```; This 'surprising' increase of CPU time by a factor 9 leading to only a factor 2 improvement in elapsed time is due to the bottleneck migrating from the ([re]moved mutex) to the (many) spin locks. The test can be tweaked (increase number of files, reduce number of entries per file) to stress the file opening more. On ntpl-perf01.cern.ch (single AMD EPYC 7702P 64-Core Processor), the test as is use close to 94% of all cpus and only a little system time:; ```; User time (seconds): 7250.76; System time (seconds): 3.58; Percent of CPU this job got: 12019%; ```; However tweaking to 390000 files of a 1000 entries, we get:; ```; User time (seconds): 450.77; System time (seconds): 438.39; Percent of CPU this job got: 7039%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.63; ```. Some are straight-forward to avoid:. ```; // Avoid lock internal to linux date/time:; diff --git a/io/io/src/TKey.cxx b/io/io/src/TKey.cxx; index e604af2980..f349bd8710 100644; --- a/io/io/src/TKey.cxx; +++ b/io/io/src/TKey.cxx; @@ -99,7 +99,7 @@ TKey::TKey() : TNamed(), fDatime((UInt_t)0); ////////////////////////////////////////////////////////////////////////////////; /// TKey default constructor.; ; -TKey::TKey(TDirectory* motherDir) : TNamed(), fDatime((UInt_t)0); +TKey::TKey(TDirectory* motherDir) : TNamed(), fDatime((UInt_t)0, (UInt_t)0); {; Build(motherDir, """", 0);; ; ```; Some require some thoughts:; ```; Try to avoid bottlenecking on recording TContext with gROOT when reading objects out files.; diff --git a/tree/dataframe/src/RLoopManager.cxx b/tree/dataframe/src/RLoopManager.cxx; inde",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12761:98,multi-thread,multi-thread,98,https://root.cern,https://github.com/root-project/root/issues/12761,3,"['bottleneck', 'load', 'multi-thread']","['bottleneck', 'loaded', 'multi-thread']"
Performance,"The incremental, for example: https://epsft-jenkins.cern.ch/job/root-incremental-master/LABEL=ROOT-performance-centos7-multicore,SPEC=default/8204/console; fails with:; ```; CMake Error at interpreter/cling/CMakeLists.txt:178 (message):; NVPTX backend is not activated. Please enable it via -DLLVM_TARGETS_TO_BUILD=""host;NVPTX"". -- Configuring incomplete, errors occurred!; See also ""/data/sftnight/wsincrmaster/LABEL/ROOT-performance-centos7-multicore/SPEC/default/build/CMakeFiles/CMakeOutput.log"".; See also ""/data/sftnight/wsincrmaster/LABEL/ROOT-performance-centos7-multicore/SPEC/default/build/CMakeFiles/CMakeError.log"".; gmake: *** [cmake_check_build_system] Error 1; Command exited with the value: 2; ```; What is the best solution?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4618#issuecomment-551202916:99,perform,performance-,99,https://root.cern,https://github.com/root-project/root/pull/4618#issuecomment-551202916,3,['perform'],['performance-']
Performance,"The issue in CMSSW is fixed now by just not doing a ranged fit, but in ROOT master this performance regression still needs to be fixed. Here is a simple reproducer for the problem, with the code extracted from the CMSSW source linked in the initial post:; ```c++; void script(); {; using namespace RooFit;. RooRealVar x(""x"", """", 0, 10);. RooRealVar mean(""mu"", """", 5.0, 0, 10);; RooRealVar width(""width"", """", 1.0, 0.1, 10);; RooRealVar sigma(""sigma"", """", 2.0, 0.1, 10);; RooVoigtian voigt(""voigt"", """", x, mean, width, sigma);. RooRealVar lambda(""lambda"", """", -0.01, -100., 1.);; RooExponential expo(""expo"", """", x, lambda);. RooRealVar b(""n_bkg"", """", 100., 0, 1000);; RooRealVar s(""n_sig"", """", 1000., 0, 10000);. RooAddPdf model(""model"", """", {voigt, expo}, {s, b});. std::unique_ptr<RooDataSet> data{model.generate(x)};. model.fitTo(*data, Range(0.0, 10.0), PrintLevel(-1));; }; ```. Most likely, this issue was caused by https://github.com/root-project/root/pull/11455. I set the priority to `high` now, because this is a regression that also affects experiment workflows and it needs to be fixed before the 6.28 release for sure! Therefore, this issue is also added to the 6.28 milestone.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11637#issuecomment-1297108209:88,perform,performance,88,https://root.cern,https://github.com/root-project/root/issues/11637#issuecomment-1297108209,1,['perform'],['performance']
Performance,"The issue only occurs in 32-bit Windows. As discussed, it is related to an optimization pass (`-O1` is enabled for ROOT, but not for standalone cling). Both workarounds below yield the correct result; the exact pass triggering this is to be determined. ```c++; root [0] .O 0; root [1] double z = 1234;; root [2] z = 1; (double) 1.0000000; root [3] z; (double) 1.0000000; ```; or; ```c++; root [0] volatile double z = 1234;; // ...; ```; As discussed with @Axel-Naumann, we'll probably defer this after the llvm upgrade.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9809#issuecomment-1045124040:75,optimiz,optimization,75,https://root.cern,https://github.com/root-project/root/issues/9809#issuecomment-1045124040,1,['optimiz'],['optimization']
Performance,"The last three commits are for Cling's CUDA support. It still doesn't fully work on my machine, but the errors are the same as `master` with LLVM 9 (complains about not finding symbols from `libcudart.so` even though that has been loaded; could be related to the CUDA version?) *without* assertions that I see tripping on `master`. Do we know which setup used to work for these tests? Maybe I'll have to install older versions of CUDA...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1092999970:231,load,loaded,231,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1092999970,1,['load'],['loaded']
Performance,The latter performs extra reading that we do not need.; With many thanks to @JavierCVilla !,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3001:11,perform,performs,11,https://root.cern,https://github.com/root-project/root/pull/3001,1,['perform'],['performs']
Performance,"The lazy loading approach may be faster, but it is continuously leading to problems with template instantiations and ODR violation checks in the most inconvenient places.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13112:9,load,loading,9,https://root.cern,https://github.com/root-project/root/pull/13112,1,['load'],['loading']
Performance,"The lazy loading approach may be faster, but it is continuously leading to problems with template instantiations and ODR violation checks in the most inconvenient places. Fixes #12003",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12238:9,load,loading,9,https://root.cern,https://github.com/root-project/root/pull/12238,1,['load'],['loading']
Performance,"The leak is related to the handling of conversion from unversioned class from MathCore (namely from ```ROOT::Math::Cartesian3D<double>``` to ```ROOT::Math::Cartesian3D<Double32_t>``` and ```ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>``` to ```ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>```. In some circumstances (involving which StreamerInfo was recorded in an acceleration structure/cache), TClass was not remembering that it already created the Conversion StreamerInfo from one to the other and recreating from each object read.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7016#issuecomment-758226471:509,cache,cache,509,https://root.cern,https://github.com/root-project/root/issues/7016#issuecomment-758226471,1,['cache'],['cache']
Performance,"The leak is related to the handling of conversion from unversioned class from MathCore; (namely from ```ROOT::Math::Cartesian3D<double>``` to ```ROOT::Math::Cartesian3D<Double32_t>``` and; ```ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>```; to ```ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>```. In some circumstances (involving which StreamerInfo was recorded in an acceleration structure/cache), TClass was; not remembering that it already created the Conversion StreamerInfo from one to the other and recreating from each object read. In the case of DUNE, the leak was triggered by running:; ```; Events->Draw(""recob::Tracks_pandoraTrack__DecoderandReco.obj.fTraj.fMomenta.fCoordinates.fX"");; ```; or similar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7018:512,cache,cache,512,https://root.cern,https://github.com/root-project/root/pull/7018,2,['cache'],['cache']
Performance,The list returned from TROOT::GetListOfFunctions needs to be protected; from concurrent access to allow use of TFormulas on different; threads.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/24:77,concurren,concurrent,77,https://root.cern,https://github.com/root-project/root/pull/24,1,['concurren'],['concurrent']
Performance,The llvm9 JIT issued callbacks when a symbol was missing and we reacted on it by loading the relevant library. In root-project/root@9b2041e3 we have kept the logic but now the JIT started querying more often even for symbols which are okay to be missing. In turn that leads to scanning all libraries causing performance issues. This patch tries to limit this functionality only in contexts where automatic loading is allowed. In addition when computing the offsets of a constant variable declaration we compute the initializers instead of searching in the shared objects.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287:81,load,loading,81,https://root.cern,https://github.com/root-project/root/pull/14287,3,"['load', 'perform']","['loading', 'performance']"
Performance,"The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/692:146,multi-thread,multi-thread,146,https://root.cern,https://github.com/root-project/root/pull/692,1,['multi-thread'],['multi-thread']
Performance,"The mac failure seems infrastructure related:; ```; Plugin dlopen(libXrdSecgsi-4.so, 256): image not found sec.protocol libXrdSecgsi-4.so; Secsss: 0x30 cryptography load failed; Protocol not supported; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5756#issuecomment-637158026:165,load,load,165,https://root.cern,https://github.com/root-project/root/pull/5756#issuecomment-637158026,1,['load'],['load']
Performance,"The macos failure are unrelated and 'seem' to be due to an environment setup problem.; The error is not finding the davix library:; ```; +Error in <TInterpreter::TCling::AutoLoad>: failure loading library libRDAVIX.so for TDavixFile; +cling::DynamicLibraryManager::loadLibrary(): dlopen(/Volumes/HDD2/ec/build/workspace/root-pullrequests-build/build/lib/libRDAVIX.so, 9): Library not loaded: libdavix.0.dylib; + Referenced from: /Volumes/HDD2/ec/build/workspace/root-pullrequests-build/build/lib/libRDAVIX.so; + Reason: image not found; ```; and loading on the machine running 'setup.sh' and thisroot.sh lead to inconsistent results; ```; cd /Volumes/HDD2/ec/build/workspace/root-pullrequests-build/roottest/root/io/webfile; root.exe -b -l -q runCloseTWebFile.C; Processing runCloseTWebFile.C...; ```; succeeds whereas the jenkins builds failed this test.; Loading the library explicit also works:; ```; macitois19:build sftnight$ root.exe -b -l ; gSroot [0] gSystem->Load(""libRDAVIX.so""); (int) 0; ```; but running rootls fails; ```; macitois19:build sftnight$ /Volumes/HDD2/ec/build/workspace/root-pullrequests-build/build/bin/rootls -1 http://root.cern.ch/files/pippa.root; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Volumes/HDD2/ec/build/workspace/root-pullrequests-build/build/lib/libRDAVIX.so, 9): Library not loaded: libdavix.0.dylib; Referenced from: /Volumes/HDD2/ec/build/workspace/root-pullrequests-build/build/lib/libRDAVIX.so; Reason: image not found; Error in <TInterpreter::TCling::AutoLoad>: failure loading library libRDAVIX.so for TDavixFile; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Volumes/HDD2/ec/build/workspace/root-pullrequests-build/build/lib/libRDAVIX.so, 9): Library not loaded: libdavix.0.dylib; Referenced from: /Volumes/HDD2/ec/build/workspace/root-pullrequests-build/build/lib/libRDAVIX.so; Reason: image not found; WARNING: File http://root.cern.ch/files/pippa.root does not exist; ````",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1517#issuecomment-358462709:189,load,loading,189,https://root.cern,https://github.com/root-project/root/pull/1517#issuecomment-358462709,11,"['Load', 'load']","['Load', 'Loading', 'loadLibrary', 'loaded', 'loading']"
Performance,"The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:; * we are at a historical low of RDF-related open bugs -> less backports are expected in the future; * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now; * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes; * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns; or defined columns. Due to recent refactorings, RCustomColumns are now; back to serving only their original purpose: representing Define nodes; in the computation graph.; RCustomColumn is a very opaque name, and it crops up when debugging,; reading code and looking at performance profilings. The new name,; RDefine, clearly describes what the class is supposed to do and it is in; line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:; RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes; RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6223:1498,perform,performance,1498,https://root.cern,https://github.com/root-project/root/pull/6223,1,['perform'],['performance']
Performance,"The main drawback of the ""temporary hack"" is that there is some duplication of information and operations now between the size of the vector and separate integer data members in the class which were previously needed to keep track of the size of the arrays. If migrating from bare arrays to ```std::vector``` to allow the compiler to autogenerate the constructors is the preferred solution (rather than implementing them by hand) then I can of course clean this up. For what concerns the readability of the code in C++11, one thing which could help a little bit and might be feasible is if ```std::apply``` were added to the STL backports. Another concern I had is that this implementation might be a bit slower than the previous individual cases if compiled without optimization (e.g. when jitted).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7499#issuecomment-805893760:767,optimiz,optimization,767,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-805893760,1,['optimiz'],['optimization']
Performance,"The minimizer test quite often did not converge. As a result there were; many spurious test failures. The test is tuned to converge _much_ more reliably by increasing the; learning rate (0.0001 -> 0.001), and the number of early stopping epochs; (5 -> 50). This commit also makes the `testMinimization` test the minimizer; _without_ using momentum (this code path was previously untested here). The following code was used to benchmark changes (only single precision; part of the test was tested and some aux text was commented out if you; want to reproduce):; ```; for i in `seq 100`; do tmva/tmva/test/DNN/testMinimizationCpu; done | awk '{print $6;}' | python -c 'import numpy; import fileinput; a = map(float, fileinput.input()); print(numpy.std(a), numpy.mean(a), numpy.min(a), numpy.max(a))'; ```. Results (typical values):; - Old version: 2.70*10^{-7} (std dev), 3.34*10^5 (mean), 2.27*10^{-6} (min), 0.0017 (max); - New verstion: 2.59 * 10^{-6} (std dev), 2.51*10*{-6} (mean), 1.16*10*{-7} (min), 1.37*10^{-5} (max). Time taken is roughly doubled (~1 sec -> ~2 secs). All results on local mac.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958:114,tune,tuned,114,https://root.cern,https://github.com/root-project/root/pull/1958,1,['tune'],['tuned']
Performance,"The new RooFit batchMode skipped zero-weight events to optimize the; likelihood calculation. However, this should not be done in general,; because it is unexpected to users is the output of batched computations; is not aligned with the original dataset. This commit also adds a smaller commit with a change to ensure that; norm set args are part of the graph in NormalizationHelpers, also used; in the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11134:55,optimiz,optimize,55,https://root.cern,https://github.com/root-project/root/pull/11134,1,['optimiz'],['optimize']
Performance,"The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:; 1) Replace gROOTMutex by a TRWMutexImp; 2) Add R__READLOCKGUARD; 3) Add a TListWithRWLock and THashListWithRWLock; 4) Use those in TROOT; 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles); 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock.; 7) Introduce scalability test on RecursiveRemove",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/676:491,scalab,scalability,491,https://root.cern,https://github.com/root-project/root/pull/676,2,['scalab'],['scalability']
Performance,The new namespace allows us to import libraries more lazily. Added a test that we load exactly the libraries that we expect.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5252:82,load,load,82,https://root.cern,https://github.com/root-project/root/pull/5252,1,['load'],['load']
Performance,"The new release includes some improvements in both Forward and; Reverse mode:; * Support `x += y`, `x -= y`, `x *= y`, `x /= y`, `x++`, `x--`, `++x`, `--x`; in forward mode.; * Reduce emission of unused expressions; * Add a special `#pragma clad ON/OFF/DEFAULT` to annotate regions which; contain derivatives; * Various small optimizations. See more at: https://github.com/vgvassilev/clad/blob/v0.4/docs/ReleaseNotes.md",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2918:326,optimiz,optimizations,326,https://root.cern,https://github.com/root-project/root/pull/2918,1,['optimiz'],['optimizations']
Performance,"The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4742:203,load,load,203,https://root.cern,https://github.com/root-project/root/pull/4742,2,['load'],"['load', 'loading']"
Performance,"The one failure on Fedora 39 is unrelated:; ```; Failed; test_import (import_load_libs.ImportLoadLibs.test_import); Test libraries loaded after importing ROOT ... ERROR. ======================================================================; ERROR: test_import (import_load_libs.ImportLoadLibs.test_import); Test libraries loaded after importing ROOT; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import; raise Exception('Found not whitelisted libraries after importing ROOT:' \; Exception: Found not whitelisted libraries after importing ROOT:; - libb2; - libgomp; If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------; Ran 1 test in 1.405s. FAILED (errors=1); CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14098#issuecomment-1836056879:131,load,loaded,131,https://root.cern,https://github.com/root-project/root/pull/14098#issuecomment-1836056879,3,['load'],['loaded']
Performance,"The only test failure happens for very obscure reasons only when LLVM is built in release mode. We use the linkage cache which is for some reason computed as internal. We can fix the problem by removing the `using` clause. ```cpp; #include ""ROOT/TDataFrame.hxx"" ; using namespace ROOT::Experimental; // The using clause causes the misbehavior. void test_readTotemNtuple() {; TDataFrame d(0);; auto validate_x = [](){ };; d.Foreach(validate_x);; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547#issuecomment-376315166:115,cache,cache,115,https://root.cern,https://github.com/root-project/root/pull/1547#issuecomment-376315166,1,['cache'],['cache']
Performance,"The only thing I see fixable (and not breaking existing use cases) is the case for returning integer types. Details:; - Unloading a transaction also unloads its generated code, AST, etc - that's violating a contract that existing uses rely on.; - `Calc` etc return whatever cast to long, since CINT, return a reference (cast to long) for ""objects"". As you know that means the temporary must be stored until the end of the process. Bad interface, but it is what it is, and breaking the interface contract is out of question.; - Memory allocated by `MachineFunctionPass` is likely the object code output of the JIT. It's a common use case to `Declare()` something and then `Calc()` say the address of a template instantiation - unloading the binary code after `Calc()` would again violate the usage contract. I believe much of this issue comes from a misunderstanding, as you point out:. > they are in fact not insulated one-offs of evaluating the code in some context. Would you like us to improve the documentation on those?. So what we're left with is adding new interfaces. We are considering employing nested interpreters for that (`RDataFrame` being a main customer), but due to person power constraints that won't happen in 2021. I'll let you know once I implemented the optimization for integer returns - thanks for reporting that!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7201#issuecomment-805946937:1276,optimiz,optimization,1276,https://root.cern,https://github.com/root-project/root/issues/7201#issuecomment-805946937,1,['optimiz'],['optimization']
Performance,"The operations done by the LookupHelper are costly in both memory and; performance. Almost every operation requires memory allocation and parsing; of often non-trivial C++ code. Unfortunately, the LookupHelper is used very intensively by rootcling and; ROOT. The callers usually do not use any caching mechanisms and redo the; expensive operations over and over even though the answer is known to be; the same as before. For instance, building the dictionary of shows:. ```; MathCore:; Cached entries: 217; Total parse requests: 54051; Cache hits: 53834; TreePlayer:; Cached entries: 183; Total parse requests: 57697; Cache hits: 57514; ```. This patch introduces the first set of caching functionality. In; particular, each LookupHelper::find* function allocates a memory buffer; which is then stored in the clang::SourceManager. We hash the buffer; content and keep a mapping between a hash and FileID and next time we; encounter the same content we do not allocate a new FileID but reuse the; old one. We see decrease in memory footprint by 7% for non-cxxmodules ROOT. For cxxmodules we see significant reduction of the pcm sizes (by half); which translates into rss improvements:. ```; master before:; cpu time = 0.291462 seconds; sys time = 0.064409 seconds; res memory = 345.816 Mbytes; vir memory = 573.508 Mbytes; master after:; cpu time = 0.235828 seconds; sys time = 0.098327 seconds; res memory = 260.012 Mbytes; vir memory = 377.945 Mbytes; ```. Patch by Yuka Takahashi and me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2483:71,perform,performance,71,https://root.cern,https://github.com/root-project/root/pull/2483,5,"['Cache', 'perform']","['Cache', 'Cached', 'performance']"
Performance,"The original `HistoToWorkspaceFactory` produced models that consisted of; a Poisson term for each bin. In this ""number counting form"" the; dataset has one row and the collumns corresponded to the number of; events for each bin. This led to severe performance problems in; statistical tools that generated pseudo-experiments and evaluated; likelihood ratio test statistics. Nowadays, everyone uses the faster `HistoToWorkspaceFactoryFast`; implementation that produces a model in the ""standard form"" where the; dataset has one row for each event, and the column corresponds to the; value of the observable in the histogram. Therefore, the original `HistoToWorkspaceFactory` is now removed to; avoid confusion and maintainance burden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10220:247,perform,performance,247,https://root.cern,https://github.com/root-project/root/pull/10220,1,['perform'],['performance']
Performance,"The original idea was a one-time check to see if we could successfully create a small `io_uring` instance (checking for errors like `ENOSYS`). Even then, the implementation was not ideal because it only tried to construct a `RIoUring` with queue depth 1, while the default constructor uses a much larger depth of 1024, so systems with low memlock limits will run right into this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7942#issuecomment-823492207:240,queue,queue,240,https://root.cern,https://github.com/root-project/root/pull/7942#issuecomment-823492207,1,['queue'],['queue']
Performance,"The original issue is with some python tutorial failing on macOS nodes due to; ```; <TNetXNGFile::Open>: [FATAL] Auth failed; ```; Which in turn is due to a failure in loading some xrootd security libraries, among which; ```; [Error ][Utility ] Unable to pre-load libXrdSecpwd.so: Plugin unable to load libXrdSecpwd-4.so; dlopen(libXrdSecpwd-4.so, 256): image not found; ```. This happens because the library depends on other libraries (`libXrdCrypto`, `libXrdUtils`) and cannot find them since the `@rpath` palceholder is not substituted with the correct path to the libraries directory at runtime.; While this is true for the xrootd libraries in `build/lib`, it's not for the ones in `build/XROOTD-prefix/../src` which have the `LC_RPATH` variable set. The difference can be shown with `otool -l`; ```; $ otool -l build/lib/libXrdSecpwd-4.so > libXrdSecpwd_buildlib.txt; $ otool -l build/XROOTD-prefix/src/XROOTD-build/src/libXrdSecpwd-4.so > libXrdSecpwd_xrootdprefixlib.txt; $ diff libXrdSecpwd_buildlib.txt libXrdSecpwd_xrootdprefixlib.txt; < build/lib/libXrdSecpwd-4.so:; ---; > build/XROOTD-prefix/src/XROOTD-build/src/libXrdSecpwd-4.so:; 307a308,311; > cmd LC_RPATH; > cmdsize 80; > path /Users/sftnight/vpadulan/build/XROOTD-prefix/src/XROOTD-build/src (offset 12); > Load command 14; 312c316; < Load command 14; ---; ```. This `LC_RPATH` variable is set for our own libraries, e.g. `libHtml.so`; ```; $ otool -l build/lib/libHtml.so; [...]; Load command 15; cmd LC_RPATH; cmdsize 80; path /Users/sftnight/vpadulan/build/lib (offset 12); ```; But for some reason this information is lost after building `builtin_xrootd` (probably while installing the libraries from the prefix to the install directory). A way to solve this is by manually adding the `CMAKE_INSTALL_RPATH` option to the `cmake` invokation of `builtin_xrootd` as is done in this PR. The result is:; ```; $ otool -l build/lib/libXrdSecpwd-4.so; [...]; Load command 15; cmd LC_RPATH; cmdsize 80; path /Users/sftnight/vpadulan/bui",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6128:168,load,loading,168,https://root.cern,https://github.com/root-project/root/pull/6128,3,['load'],"['load', 'loading']"
Performance,The output is as intended but the problem is that `TStreamerInfo::GetDataMemberOffset` is returning the offset of the cached member rather than the write (or repeat) member (i.e. the real live member).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15877#issuecomment-2307182599:118,cache,cached,118,https://root.cern,https://github.com/root-project/root/issues/15877#issuecomment-2307182599,1,['cache'],['cached']
Performance,"The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```; --------------------------------------------------------------------------------; Benchmark Time CPU Iterations; --------------------------------------------------------------------------------; BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1; BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1; BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1; BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1; BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1; BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1; BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1; BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1; BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1; BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1; BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1; BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1; BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1; BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1; BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1; BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1; ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12141:1324,perform,performance,1324,https://root.cern,https://github.com/root-project/root/pull/12141,1,['perform'],['performance']
Performance,"The performance gains are unclear and the option can harm users linking against the library with gcc<13, see also https://gcc.gnu.org/bugzilla/show_bug.cgi?id=55522 . EDIT: relevant forum conversation: https://root-forum.cern.ch/t/rootvecops-enables-ffast-math/53422",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12214:4,perform,performance,4,https://root.cern,https://github.com/root-project/root/pull/12214,1,['perform'],['performance']
Performance,"The performance of `hadd/TFileMerger` for some times of files (eg. with histograms) is proportional to the number of batches of files processed. So reducing it the max number of files could significantly decrease performance. As a compromise, I propose to reduce the max value to 256 (already a factor 4 slower compared to the typical 1024) ?. Would that be okay for your situation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11276#issuecomment-1234325449:4,perform,performance,4,https://root.cern,https://github.com/root-project/root/issues/11276#issuecomment-1234325449,2,['perform'],['performance']
Performance,"The problem is more profound. It is in the handling of the offset, dirty flags and simultaneous fit. ; For a simultaneous fit the NLL is made of several components and the offset is computed and stored in the NLL components and not in the top level NLL object. ; Now when you call again `nll->getVal()` on the same data point, the calculation is not performed and RooFit returns the cached value, as it is done for every function in RooFit. The cached value is the one without the offset. ; Now when calling Hesse, the offset is enabled, but the central point of f(x) used for the derivative computation does not contain the offset. This explains the huge gradient obtained, because f(x+eps) has offset subtracted , while f(x) has not the offset. ; Adding this two lines before calling `hesse()`, fixes the problem: ; ```; auto mu = (RooRealVar*)params.find(""mu"");; mu->setValueDirty();; ```. A possible fix is being sure that the nll is in a dirty state when we start minimize() or hesse()",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7659#issuecomment-805920338:350,perform,performed,350,https://root.cern,https://github.com/root-project/root/issues/7659#issuecomment-805920338,3,"['cache', 'perform']","['cached', 'performed']"
Performance,"The problem seems to be an update of glibc-devel, in particular this file `/usr/include/bits/floatn.h` (it is the last file that is loaded before the assertion according to `strace`). lxplus-arm; ```; glibc-devel-2.34-83.el9_3.7.aarch64 : Object files for development using standard C libraries.; Repo : @System; Matched from:; Filename : /usr/include/bits/floatn.h; ```; [Our docker container](gitlab-registry.cern.ch/sft/docker/alma9:aarch64); ```; glibc-devel-2.34-60.el9_2.7.aarch64 : Object files for development using standard C libraries.; Repo : @System; Matched from:; Filename : /usr/include/bits/floatn.h. ```; Updating glibc-devel in our docker container reproduces the issue. Updating gcc does not reproduce the issue. There are some differences in the file like ; ```diff; - # if !__GNUC_PREREQ (7, 0) || defined __cplusplus; + # if !__GNUC_PREREQ (7, 0) || (defined __cplusplus && !__GNUC_PREREQ (13, 0)); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14789#issuecomment-1976486042:132,load,loaded,132,https://root.cern,https://github.com/root-project/root/issues/14789#issuecomment-1976486042,1,['load'],['loaded']
Performance,"The problem was due the introduction (in commit f3f0f13) of a fast path in TClass::GetListOfDataMember which did not take in consideration the case:. c = GetClass(someclassname); c->GetState() == TClass::kForwardDeclared; c->GetListOfDataMember() -> list is now created but empty.; load and parse header file for; c->GetState() == TClass::kInterpreted; c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point). The logic assumed incorrectly that if someclassname was indeed pointing to a class or struct and the list was created then it was loaded. To keep the fast path and correct the logic, we need to 'promote' TListOfDataMembers::fIsLoaded to be an std::atomic",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6668:282,load,load,282,https://root.cern,https://github.com/root-project/root/pull/6668,3,['load'],"['load', 'loaded']"
Performance,"The problem was due the introduction (in commit f3f0f13) of a fast path in TClass::GetListOfDataMember which did not take in consideration the case:; ```; c = GetClass(someclassname); c->GetState() == TClass::kForwardDeclared; c->GetListOfDataMember() -> list is now created but empty.; load and parse header file for; c->GetState() == TClass::kInterpreted; c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point).; ```; The logic assumed incorrectly that if someclassname was indeed pointing to a class or struct and the list was created then it was loaded. To keep the fast path and correct the logic, we need to 'promote' TListOfDataMembers::fIsLoaded to be an std::atomic",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6669:287,load,load,287,https://root.cern,https://github.com/root-project/root/pull/6669,3,['load'],"['load', 'loaded']"
Performance,"The problem was in RPageSourceChain, it can't deal with cached pages.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4344#issuecomment-537975320:56,cache,cached,56,https://root.cern,https://github.com/root-project/root/pull/4344#issuecomment-537975320,1,['cache'],['cached']
Performance,"The problem with trying one after the other is that the number of combinations quickly goes through the roof. Consider that a python-side proxy can be freely converted from/to `T*`, `T**`, `T[]`, `T&`, `T&&`, and their `std::shared_ptr<>` and `std::unique_ptr<>` equivalents. So, that may mean 15 tries. If there are 3 arguments, the number of combinations is 455, faculty being what it is. Sure, I can make some educated guess to put the most likely candidates first, and that is basically when is currently going on. But a single lookupHelper call for template instantiation can already be too slow to be usable: e.g. for PCL they run (after the first 7-14s loading, which modules should fix) they are still of the order of 0.1s. (We have discussed that problem, too: contrary to normal Clang usage, Cling dumps everything in a single translation unit, vastly increasing the number of possible matches. Try going after `operator<<(std::ostream&)` or `operator==` in the global namespace, for example.). You mention int, but there are `int8_t`, `uint8_t` (these are often `char` varieties), `short`, `unsigned short`, `int16_t`, `uint16_t`, `int`, `unsigned int`, `long`, `unsigned long`, `long long`, and `unsigned long long` to try. Sure, let's do `str` to `const char*`, but that won't work for `std::string&`, and `std::string` usage is more common. But ah, what about `wchar_t`, `char16_t`, `char32_t`, `std::wstring`?. Collections, sure, but what if instead I have a tuple or list on the Python side and the template expects some STL container? Then it can not just be that STL container of say `T*`, but also the STL container of pointer any of the base classes, or worse, a mix thereof. And what if the tuple isn't actually targeting a container, but is an initalizer_list? There is often no (relevant) type information available at that point in Python, but many cases can still be resolved b/c the C++ side has some hints. For example `template<typename T, int N> void func(const std::array",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6393#issuecomment-696889449:660,load,loading,660,https://root.cern,https://github.com/root-project/root/issues/6393#issuecomment-696889449,1,['load'],['loading']
Performance,"The purpose of this PR is to support discussion about the following proposal for a modern application interface for TMVA. See below the tutorial, which showcases the interface implemented in this PR as proof-of-concept. ```cpp; void train(const std::string& filename) {; // optimized out; }. void tmva003_RLegacyReader(); {; // First, let's train a model with TMVA.; const std::string filename = ""http://root.cern.ch/files/tmva_class_example.root"";; train(filename);. // Next, we load the model from the TMVA XML file.; RLegacyReader model(""TMVAClassification/weights/TMVAClassification_BDT.weights.xml"");. // In case you need a reminder of the names and order of the variables during; // training, you can ask the model for it.; auto variables = model.GetVariableNames();; std::cout << ""\nVariable names used during training: "" << variables << ""\n\n"";. // The model can now be applied in different scenarios:; // 1) Event-by-event inference; // 2) Batch inference on data of multiple events; // 3) Model inference as part of an RDataFrame graph. // 1) Event-by-event inference; // The event-by-event inference takes the values of the variables as a std::vector<float>.; // Note that the return value is as well a std::vector<float> since the reader; // is also capable to process models with multiple outputs.; auto prediction = model.Predict({0.5, 1.0, -0.2, 1.5});; std::cout << ""Single-event inference: "" << prediction << ""\n\n"";. // 2) Batch inference on data of multiple events; // For batch inference, the data needs to be structured as a matrix. For this; // purpose, TMVA makes use of the RTensor class. For convenience, we use RDataFrame; // and the AsTensor utility to make the read-out from the ROOT file.; ROOT::RDataFrame df(""TreeS"", filename);; auto df2 = df.Range(3); // Read only 10 events; auto x = AsTensor<float>(df2, variables);; std::cout << ""RTensor input for inference on data of multiple events:\n"" << x << ""\n\n"";. auto y = model.Predict(x);; std::cout << ""Prediction perform",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3321:274,optimiz,optimized,274,https://root.cern,https://github.com/root-project/root/pull/3321,2,"['load', 'optimiz']","['load', 'optimized']"
Performance,"The pythonization of `TTree::SetBranchAddress` was implemented in C++, hacking into CPyCppy by using implementation details like data member caches (this call: `((CPPInstance *)address)GetDatamemberCache()`). Not too surprising that it apparently breaks with the upcoming Python 3.13. It's better to implement the pythonizations in Python and also manage the lifetime of the necessary data in Python. This is done in this commit. The pythonization is extensively tested in `ttree_setbranchaddress.py`. Closes #15799.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15807:141,cache,caches,141,https://root.cern,https://github.com/root-project/root/pull/15807,1,['cache'],['caches']
Performance,The race condition could lead to the TContext indirectly spinning the lock indefinitively,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1441:4,race condition,race condition,4,https://root.cern,https://github.com/root-project/root/pull/1441,2,['race condition'],['race condition']
Performance,"The reason for using an environment variable is the following:. It is a common occurrence in the root code to use initialization classes that perform configuration in its constructor, and then have a static instance of this class declared in a library so that this initialization happens automatically when the library is loaded. This initialization often depends on the various directory paths. Since the initialization of the static instances in the libraries an application links to happens before the main program starts, the behaviour of these initialization routines can not be modified by command line options, since these options are parsed by the main program. With an environment variable this works though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/130#issuecomment-170823193:142,perform,perform,142,https://root.cern,https://github.com/root-project/root/pull/130#issuecomment-170823193,2,"['load', 'perform']","['loaded', 'perform']"
Performance,"The reason of `isACLiC` branch in rootclingmain is for optimization. CompileMacro is calling rootcling just because it wants to generate dictionary, which is used to initialize gAutoLoads with {symbol, library name}. In this case, we do not want to generate pcm nor check it's validity, it's just unrelated.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2396#issuecomment-435095167:55,optimiz,optimization,55,https://root.cern,https://github.com/root-project/root/pull/2396#issuecomment-435095167,1,['optimiz'],['optimization']
Performance,"The rf503_wspaceread tutorial mus be run after the rf502_wspacewrite; tutorial in the unit tests. This dependency was already defined for the; C++ tutorial tests. The lines added to `tutorials/CMakeLists.txt` in; this commit make the same definitions for the Python tutorials, and also; indicate that the Python tests rf502 and rf503 should be run after the; C++ tests to avoid a race condition on the output file. Failures caused by the dependencies not handled correctly were observed in the ROOT nightlies, and this commit should avoid them in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8491:380,race condition,race condition,380,https://root.cern,https://github.com/root-project/root/pull/8491,1,['race condition'],['race condition']
Performance,"The root cause is that, for generality, when reading from file we always read `TTrees` via `TChain`, and although the `TTree` object read from file has a friend, the `TChain` that contains it does not: . ```cpp ; TChain c; ; c.Add(""f.root/t1""); ; c.LoadTree(0); ; std::cout << c.GetListOfFriends() << '\n'; // prints 0 ; std::cout << c.GetTree()->GetListOfFriends() << '\n'; // prints a valid address ; ```. @pcanal is this behavior of TChain intentional? Could it instead return the list of friends of its only TTree in this scenario?. EDIT: note an inconsistency: `chain.GetListOfFriends()` is null, but `chain.FindBranch(""t2.x"")` does return the friend's branch.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6741#issuecomment-754779467:249,Load,LoadTree,249,https://root.cern,https://github.com/root-project/root/issues/6741#issuecomment-754779467,1,['Load'],['LoadTree']
Performance,"The second ""bigger"" problem are the `filemerger` tests on macOS AArch64 that compare the expected compressed file size of `hsimple.root`. These turn out to be caused by how LLVM 16 optimizes `pz = px*px + py*py;` in `hsimple.C`, resulting in slightly different floating point results and therefore different compression. I have no really good solution here other than updating the expected reference sizes / their tolerance. An alternative would be to check in a ""known"" `hsimple.root` and not generate it on the fly. What do you think @pcanal ?. edit: I found a better solution by disabling floating point contractions when producing `hsimple.root` for these tests, see https://github.com/root-project/roottest/pull/989.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13273#issuecomment-1649423962:181,optimiz,optimizes,181,https://root.cern,https://github.com/root-project/root/pull/13273#issuecomment-1649423962,1,['optimiz'],['optimizes']
Performance,"The second case fails because the I/O representation of the map is different from the compiler and the user is requested the former to loaded in the later.; The first case is failing to warn because `TTreeReader` is ; * asking the TTree to manage the memory (in which case, for example, `TTreeFormula` can still read/use the data); * unconditionally casting the address to the compile form; The solution is to add code to TTreeReader to check if the type is properly loaded (see code in `TTree::SetBranchAddress[Impl]`)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10254#issuecomment-1082191149:135,load,loaded,135,https://root.cern,https://github.com/root-project/root/issues/10254#issuecomment-1082191149,2,['load'],['loaded']
Performance,"The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source; or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as; dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that; the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4355:258,race condition,race conditions,258,https://root.cern,https://github.com/root-project/root/pull/4355,2,['race condition'],['race conditions']
Performance,The test failure on fedora28/native are unrelated (likely race condition in cmake/ctest or lack of cleanup),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2691#issuecomment-424830883:58,race condition,race condition,58,https://root.cern,https://github.com/root-project/root/pull/2691#issuecomment-424830883,1,['race condition'],['race condition']
Performance,The test failures seems unrelated (library compilation/loading failure),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8228#issuecomment-848055016:55,load,loading,55,https://root.cern,https://github.com/root-project/root/pull/8228#issuecomment-848055016,1,['load'],['loading']
Performance,"The test should reuse the prebuilt modules in the module cache. However, due to a mismatch between the module-related flags exported by FindROOT. There is a mismatch between the -D passed by cmake. This patch make sure that the build arguments match more closely the build setup of ROOT. Thus we can reuse the already built module files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2545:57,cache,cache,57,https://root.cern,https://github.com/root-project/root/pull/2545,1,['cache'],['cache']
Performance,The transient Windows error is a known race condition in the roottest build system.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11261#issuecomment-1232028318:39,race condition,race condition,39,https://root.cern,https://github.com/root-project/root/pull/11261#issuecomment-1232028318,1,['race condition'],['race condition']
Performance,"The tutorials ""tutorial-pyroot-geometry-py"" and ""tutorial-pyroot-na49view-py"" were failing in Experimental PyROOT because of the absence of an extra lookup performed inside gROOT, which was implemented in the old PyROOT in the function LookupCppInstance(). ; It was decided to solve this problem by adding this third lookup to the _fallback_getattr() function inside _facade.py. ; This also allow to get an object inside gROOT by simply typing:; `ROOT.a`; instead of ; `ROOT.gROOT.FindObject(a)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4084:156,perform,performed,156,https://root.cern,https://github.com/root-project/root/pull/4084,1,['perform'],['performed']
Performance,The update of the time step for the optimizer must be each batch update and not for each epoch. ; This affects the correction for the bias applied to the computed first and second momentum when using ADam. (see https://root.cern.ch/doc/master/Adam_8h_source.html#l00147 ). . After this correction the obtained convergence results look better and compatible with what obtained when using when using Keras,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5042:36,optimiz,optimizer,36,https://root.cern,https://github.com/root-project/root/pull/5042,1,['optimiz'],['optimizer']
Performance,"The v1 binary format knows cluster groups. Cluster groups correspond to page list envelopes in the binary format, i.e. to blocks of meta-data with page locations. As a result, cluster groups allow for incremental loading of page locations (page meta-data), which is useful for very large files and combined data sets (chains, friends). This PR restructures the `RNTupleDescriptor` and `RClusterDescriptor` and their builder classes such that they can eventually make proper use of cluster groups. To this end, the descriptor is first populated with cluster groups and cluster summaries only. Cluster summaries only contain the cluster's event range (plus, at a later point, the column group ID for sharded clusters). In a second step, page lists of cluster groups are loaded and used to populate the page locations of clusters. At this point, ntuples still load all meta-data on open. Follow-up PRs should change it such that ntuples initially only know cluster summaries. The cluster details (i.e. page locations) will the be loaded and dropped during event iteration based on an actively set event range window, which needs to be controlled by the user of the page source (`RNTupleReader`, `RNTupleDS`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9565:213,load,loading,213,https://root.cern,https://github.com/root-project/root/pull/9565,4,['load'],"['load', 'loaded', 'loading']"
Performance,Then the executable does not work:; ```; % outputs/bin/zevis.exe ; dyld: Library not loaded: @rpath/libZevLib.dylib; Referenced from: /Users/couet/git/zevis-build/outputs/bin/zevis.exe; Reason: image not found; zsh: abort outputs/bin/zevis.exe; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-693379514:85,load,loaded,85,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-693379514,1,['load'],['loaded']
Performance,"There are a number of trivial operations that users often want to perform on dataframes that are surprisingly hard to get right, for example adding several `Define`s in a loop or conditionally adding a `Filter` depending on a runtime boolean (both use-cases are challenging in C++, trivial in python). The way I see it, difficulties boil down to the fact that different dataframe nodes have different types (because their types incorporate e.g. the type of the callable passed to a `Filter` and the type of their parent node in the computation graph). In this PR I propose to add a common base class `ROOT::RDF::RNode` to all nodes of the graph (except leaves a.k.a results, which have a completely different interface),; so that users can, for example:; * take any dataframe node by reference in non-template functions as `RNode&`; * `emplace_back` dataframe nodes in ~`std::vector<RNode>`~ `vector<RInterface<RNode>>`; * have non-const pointers to dataframe nodes. and so on. For example, conditionally adding a `Range` do a dataframe now looks like this:. ```c++; auto maybe_ranged = [&df, mustAddRange] { ; return mustAddRange ? ROOT::RDF::RNode(d.Range(1)); : ROOT::RDF::RNode(d); ; }(); ; ```. while before this PR one would have to add fake `Filter(""true"")` filters to normalize the return type of the lambda, involving the interpreter for no reason. Internal `RDataFrame` code is also simplified by the introduction of this common base class.; The only downside I can think of is that if this mechanism is abused users might end up with extra, unnecessary virtual calls in their event loop -- on the other hand, this mechanism should only be used in situations that required either complex template magic or dirty and slow tricks before. Questions:; * can we come up with a better name than `ROOT::RDF::ToCommonNodeType` for the function that upcasts any dataframe object to the same type?; * should this cast only be explicit through an upcasting function call or should we allow implicit cas",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2182:66,perform,perform,66,https://root.cern,https://github.com/root-project/root/pull/2182,1,['perform'],['perform']
Performance,There are issues trying to compile ROOT7 code with only c++11-capable compiler - see error messages from `ROOT-performance-centos7-multicore` platform. ; I just remove several commits. Current state was tested on all other platforms.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4041#issuecomment-508670401:111,perform,performance-,111,https://root.cern,https://github.com/root-project/root/pull/4041#issuecomment-508670401,1,['perform'],['performance-']
Performance,"There are some performance numbers comparing what went into master with the additional impact of this commit in the description of https://github.com/root-project/root/pull/9486 (at the bottom). The detailed previous discussion over why this couldn't go into the above PR, etc is in https://github.com/root-project/root/pull/9486#discussion_r779221047 and the follow-up comments",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7710#issuecomment-1079059064:15,perform,performance,15,https://root.cern,https://github.com/root-project/root/issues/7710#issuecomment-1079059064,1,['perform'],['performance']
Performance,"There has been discussion on a cloudpickle issue very similar to this one, https://github.com/cloudpipe/cloudpickle/issues/405 .; In that issue they suggest a fix/workaround, that is to define a custom `__reduce__` method for the facade class that practically does the `import ROOT` automatically. I tried it with this reproducer; ```python; import ROOT; import cloudpickle as pickle. def foo():; return ROOT.TH1F(). print(pickle.loads(pickle.dumps(foo))); print(pickle.loads(pickle.dumps(foo()))); ```; and it works; ```; $ python cloudpickle_root_th1f.py ; <function foo at 0x7f76c62679d0>; Name: Title: NbinsX: 1; ```. I have opened a draft PR related to this issue to show the fix",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6764#issuecomment-820294447:430,load,loads,430,https://root.cern,https://github.com/root-project/root/issues/6764#issuecomment-820294447,2,['load'],['loads']
Performance,"There is a ugly workaround to check for network:; ```; execute_process(; COMMAND ping www.github.com -n 2 -w 1000; RESULT_VARIABLE NO_CONNECTION; ); ```; And then use `NO_CONNECTION` like for example:; ```; if(builtin_tbb); if(NO_CONNECTION EQUAL 1); if(fail-on-missing); message(FATAL_ERROR ""No internet connection. Please check your connection, or either disable the 'builtin_tbb' option or the 'fail-on-missing' to automatically disable options requiring internet access""); else(); message(STATUS ""No internet connection, disabling 'builtin_tbb' option""); set(builtin_tbb OFF CACHE BOOL ""Disabled because there no internet connection"" FORCE); set(imt OFF CACHE BOOL ""Disabled because 'builtin_tbb' was set but there no internet connection"" FORCE); endif(); else(); ...; ```; I quickly tried and the principle works, but I'll need time to make it working properly and that will complexify (again) CMake",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-864912549:579,CACHE,CACHE,579,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-864912549,2,['CACHE'],['CACHE']
Performance,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>; <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff; diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py; index 113e778cda..21c8aa7454 100644; --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py; +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py; @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'); # Configure ROOT facade module; import sys; from ._facade import ROOTFacade; -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython); +xxx = ROOTFacade(sys.modules[__name__], _is_ipython); +__getattr__ = xxx._getattr; +__setattr__ = xxx._setattr; +; +# Configure meta-path finder for ROOT namespaces; +import importlib.abc; +from importlib.util import spec_from_loader; +; +class RootNamespaceLoader(importlib.abc.Loader):; + def __init__(self):; + self._module_cache = {}; +; + def is_package(self, fullname):; + if fullname in self._module_cache:; + return True; + if not fullname.startswith(""ROOT.""):; + raise ImportError(""This loader only loads ROOT.*""); + module = xxx; + partial_name = ""ROOT""; + for part in fullname.split(""."")[1:]:; + partial_name += f"".{part}""; + module = getattr(module, part, None); + if module is None:; + raise NotImplementedError(f""No module named {partial_name}""); + # HACK: There is a probably a better way to do this; + if ""namespace"" not in str(module):; + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""); + self._module_cache[fullname] = module; + return True; +; + def create_module(self, spec):; + self.is_p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14097#issuecomment-1824949593:191,Load,Loader,191,https://root.cern,https://github.com/root-project/root/issues/14097#issuecomment-1824949593,1,['Load'],['Loader']
Performance,"There is indeed a missing protection/warning message. We currently do not support storing `std::array` as a top level objects. Instead you need to wrap it into a struct. For example, this can be done in your example by adding:; ```; #ifdef __ROOTCLING__; #pragma link C++ class std::vector<std::vector<int>>+;; #pragma link C++ class Binner+;; #endif; ```; to a linkdef file (or your script if you load it via ACLiC). and writing with ; ```; fout->WriteObject(this,""binner""); // i.e. you using don't need to give the class name, the compiler can pass enough information.; ```; and read with:; ```; auto binner = f->Get<Binner>(""binner""); // Not casting needed here, binner will be a `Binner*`; ```. With the updated version of the script I get:; [example.C.txt](https://github.com/root-project/root/files/10025600/example.C.txt). ```; $ root.exe -b -l; root [0] .L example.C+; Info in <TMacOSXSystem::ACLiC>: creating shared library /Users/pcanal/Downloads/./example_C.so; root [1] finderBinner(); Creating std::array<std::array<std::vector<std::vector<Int_t>>, LAYER1>, LAYER2> in FinderBinning.root; root [2] loadFinderBinning(); Loading FinderBinning.root; root [3] ; ```. Cheers,. Philippe. PS. Side note the example.C contained:; ```; mBinsS = castedBinsS;; ```; which ended up copying all the data from castedBinsS to mBinsS which was wastefull. See my alternative in the updated script.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11722#issuecomment-1317651615:398,load,load,398,https://root.cern,https://github.com/root-project/root/issues/11722#issuecomment-1317651615,3,"['Load', 'load']","['Loading', 'load', 'loadFinderBinning']"
Performance,"There is no issue of exception safety here, it's only a `new` that can work or not. > And move assignment and move construction of unique pointers should be equally cheap, right?. With compiler optimizations yes, but why create unnecessary work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10263#issuecomment-1081665773:194,optimiz,optimizations,194,https://root.cern,https://github.com/root-project/root/pull/10263#issuecomment-1081665773,1,['optimiz'],['optimizations']
Performance,"There is still the a final optimization proposal here, in the initial post:; > Generation of events. Unless specialised generator functions are implemented, RooFit employs accept/reject sampling. Since this has to evaluate the PDF many times, one could think about using the batch interface to generate e.g. 2x the requested number of events, and do accept/reject on those. Repeat until enough events have been generated, and throw away the rest. But I migrated this to the general ""Ideas for RooFit"" issue (into the initial post of Stephan), so this one can be closed:; https://github.com/root-project/root/issues/6557. Like this, we have a better overview on the possible improvements and ideas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7032#issuecomment-2241552715:27,optimiz,optimization,27,https://root.cern,https://github.com/root-project/root/issues/7032#issuecomment-2241552715,1,['optimiz'],['optimization']
Performance,"There is two ways to work-around the problem. (a) Fix the file. With the old release setup.; ```; auto f = TFile::Open(filename, ""UPDATE"");; TClass::GetClass(missingClassName)->GetStreamerInfo()->ForceWriteInfo();; delete f;; ```; (b) Create a fixit file that would then need to be loaded as part of any jobs that needs this type of broken file:; ```; auto f = TFile::Open(""fixitfile.root"", ""NEW"");; TClass::GetClass(missingClassName)->GetStreamerInfo()->ForceWriteInfo();; delete f;; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11436#issuecomment-1258467674:282,load,loaded,282,https://root.cern,https://github.com/root-project/root/issues/11436#issuecomment-1258467674,1,['load'],['loaded']
Performance,"There still was a constructor of `RooDataSet` that was hardcoded to use; the TreeDataStore. This needs to be changed, because the; RooVectorDataStore is more performant and compatible with the new; BatchMode. This PR also includes some other commits that improve the memory management in the dataset classes with `std::unique_ptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11410:158,perform,performant,158,https://root.cern,https://github.com/root-project/root/pull/11410,1,['perform'],['performant']
Performance,"There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5756:306,perform,performance,306,https://root.cern,https://github.com/root-project/root/pull/5756,3,"['load', 'optimiz', 'perform']","['loading', 'optimization', 'performance']"
Performance,"There was a problem in the `IntegralEvaluator` class in the FitUtils.h; in case veccore and vc is used. To evaluate the integral, some input; doubles `x` need to be transferred each of them into a different; `ROOT::Double_v` to call the underlying function. However, the `ROOT::Double_v` can't load just a single double. Calling; the `Load()` function should be done with a pointer to a `double *`; arrary that is large enough to hold as many doubles as the; `ROOT::Double_v` for SIMD instructions. If you use pointers to single doubles anyway, then you get rightly and; out-of-bounds warning. This commits suggests to get gid of this problem by first transferring; the doubles to the beginning of temporary buffers of the right size, and; then passing these buffers to `vecCore::Load()`. Furthermore, I suggest to merge the two code paths of 1D and ND; functions into one. The difference was that the ND path allocated the; `Double_v`s on the heap in a STD vector, and the 1D path used just an; single `Double_v` on the stack, probably for performance reasons. This commit suggests to use the stack also for the ND code path using; stack arrays, so the 1D path would not be a special case anymore. Also, the `<Math/Util.h>` header can not be compiled with CUDA if `vc` is enabled, so there is a second commit in this PR to avoid that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13772:294,load,load,294,https://root.cern,https://github.com/root-project/root/pull/13772,4,"['Load', 'load', 'perform']","['Load', 'load', 'performance']"
Performance,"There was an evil hack in `RooAbsOptTestStatistic`:. ```c++; _dataClone->cacheArgs(this,_cachedNodes,_normSet,!_funcClone->getAttribute(""BinnedLikelihood"")) ;; ```. The final parameter determins if zero weights should be skipped when recalculating the caches. Indeed, for the NLL case, this corresponds to the BinnedLikelihood attrribute being present or not, but it broke the other test statistics for which zero weights should not be skipped at all. This commit suggests a safer way to manage this with a new `RooAbOptTestStatistic::_skipZeroWeights` flag. In particular, this change fixed a bug that got uncovered during a forum discussion:. https://root-forum.cern.ch/t/failing-chi2-fit/56309/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13639:73,cache,cacheArgs,73,https://root.cern,https://github.com/root-project/root/pull/13639,2,['cache'],"['cacheArgs', 'caches']"
Performance,These are local displays and have tiny difference with standard HTTP communication.; Also Openui require very strict URL formatting.; Also qt5 web display performance increased. Now one can use local display for eve7 and all other custom applications with complex HTML layout,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2884:155,perform,performance,155,https://root.cern,https://github.com/root-project/root/pull/2884,1,['perform'],['performance']
Performance,"These are the libs from failed job:; ```; name=/cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdUtils.so.2 (6 segments); name=/cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdClient.so.2 (6 segments); name=/cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2 (6 segments); name=/cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdXml.so.2 (6 segments); ```. and these are the libs from a job that was successful:. ```; name=/cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdUtils.so.2 (6 segments); name=/cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdClient.so.2 (6 segments); name=/cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdCl.so.2 (6 segments); name=/cvmfs/atlas.cern.ch/repo/sw/software/21.2/AnalysisBaseExternals/21.2.139/InstallArea/x86_64-centos7-gcc8-opt/lib/libXrdXml.so.2 (6 segments); ```. yes, they are the same, so it's not a problem with loading a wrong version of xrootd client.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-748197821:1356,load,loading,1356,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-748197821,1,['load'],['loading']
Performance,"These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device; 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:; https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13556:38,Perform,Performance,38,https://root.cern,https://github.com/root-project/root/pull/13556,1,['Perform'],['Performance']
Performance,"These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:; ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:; ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/666:105,Load,LoadClassInfo,105,https://root.cern,https://github.com/root-project/root/pull/666,4,"['Load', 'load', 'optimiz', 'perform']","['LoadClassInfo', 'loaded', 'optimizations', 'performance']"
Performance,"These days, ClassImp() causes more harm than good. See e.g. https://root-forum.cern.ch/t/error-cling-loadlibrary-while-compiling-in-root-6-08/30340/5",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2563:101,load,loadlibrary-while-compiling-in-root-,101,https://root.cern,https://github.com/root-project/root/pull/2563,1,['load'],['loadlibrary-while-compiling-in-root-']
Performance,"These engines can be used to obtain the same sequences of numbers as RANLUX generators using recursive subtract-with-borrow steps, but with enhanced performance. Apart from the choice of parameters, the main difference between the various implementations is the way of seeding the initial state of the generator. This commit includes engines for compatibility with:; * the original implementation by Fred James, with parameters for; - luxury level 3 (`p = 223`), also matching `gsl_rng_ranlux`; - luxury level 4 (`p = 389`), also matching `gsl_rng_ranlux389` producing floating point numbers from 24 bits of randomness;; * the family of generators using a second-generation version of the RANLUX algorithm as implemented in the GNU Scientific Library:; - `gsl_rng_ranlxs[012]` using 24 bits per floating point number, and; - `gsl_rng_ranlxd[12]` using 48 bits per floating point number;; * the implementation by Martin Lüscher written in C that uses four states per generator; similar to GSL, there are `ranlxs[012]` with 24 bits per number and `ranlxd[12]` with 48 bits per number; and; * the generators `std::ranlux{24,48}` defined by the C++ standard. The values in the tests were extracted directly from the mentioned implementations, showing that the LCG implementation is equivalent to the RANLUX algorithm. I am not adding compatibility engines for CLHEP because its semantics are very weird: While `CLHEP::RanluxEngine::setSeed` yields the same sequences as the original implementation by James, the seed is treated differently when passed as an argument to the constructor.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8383:149,perform,performance,149,https://root.cern,https://github.com/root-project/root/pull/8383,1,['perform'],['performance']
Performance,"These locks were only activated when inside TTreeProcessorMT::Process,; and they seem to protect the usecase in which the method is called; concurrently on the same object, which is not a valid usecase (anymore?). **Note:** just checking that this change does not cause crashes for now",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5301:140,concurren,concurrently,140,https://root.cern,https://github.com/root-project/root/pull/5301,1,['concurren'],['concurrently']
Performance,"These minor changes seem to affect the way in which TTreeCache interacts with different IO classes, e.g. TTree/TChain vs TTreeReader. In `TTreeCache::FillBuffer` the change in values of `fEntryCurrent` and `fEntryNext`, respectively the first entry of the current cluster and the first entry of the next cluster, has been moved before an `if` condition that was causing an early exit from the function.; This, in conjunction with the change in `TTreeReader::SetEntriesRange` apparently fixes the issues with the cache when running a simple program that uses only TTreeReader. At the same time, the changes affect the interaction of the cache with a TTree-only program in a way that now is throwing a log error:; ```Error in <TTreeCache::FillBuffer>: Inconsistency: fCurrentClusterStart=821695 fEntryCurrent=821695 fNextClusterStart=1643390 but fEntryCurrent should not be in between the two```. I'm not sure why these changes affect positively the TTreeReader examples and negatively the TTree ones. Some links to these examples follow.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5365:512,cache,cache,512,https://root.cern,https://github.com/root-project/root/pull/5365,2,['cache'],['cache']
Performance,These need to be corrected (`///<!` instead of `///<`):; ```; tmva//tmva/inc/TMVA/RuleFitAPI.h:193: mutable MsgLogger fLogger; ///< message logger; tmva//tmva/inc/TMVA/Reader.h:161: mutable MsgLogger* fLogger; ///< message logger; tmva//tmva/inc/TMVA/Config.h:145: mutable MsgLogger* fLogger; ///< message logger; tmva//tmva/inc/TMVA/Types.h:181: mutable MsgLogger* fLogger; ///< message logger; tmva//tmva/inc/TMVA/KDEKernel.h:88: mutable MsgLogger* fLogger; ///< message logger; tmva//tmva/inc/TMVA/PDEFoamKernelBase.h:44: mutable MsgLogger* fLogger; //! message logger; tmva//tmva/inc/TMVA/QuickMVAProbEstimator.h:37: mutable MsgLogger* fLogger;; tmva//tmva/inc/TMVA/OptimizeConfigParameters.h:97: mutable MsgLogger* fLogger; ///< message logger; tmva//tmva/inc/TMVA/LDA.h:78: mutable MsgLogger *fLogger; ///< message logging service; tmva//tmva/inc/TMVA/FitterBase.h:88: mutable MsgLogger* fLogger; // message logger; tmva//tmva/inc/TMVA/ModulekNN.h:163: mutable MsgLogger* fLogger; // message logger; tmva//tmva/inc/TMVA/Timer.h:96: mutable MsgLogger* fLogger; ///< the output logger; tmva//tmva/inc/TMVA/RuleFit.h:173: mutable MsgLogger* fLogger; ///< message logger; tmva//tmva/inc/TMVA/Tools.h:227: mutable MsgLogger* fLogger;; tmva//tmva/inc/TMVA/RuleCut.h:97: mutable MsgLogger* fLogger; // message logger; tmva//tmva/inc/TMVA/ExpectedErrorPruneTool.h:77: mutable MsgLogger* fLogger; ///< message logger; tmva//tmva/inc/TMVA/ROCCalc.h:77: mutable MsgLogger* fLogger; //! message logger; tmva//tmva/inc/TMVA/CostComplexityPruneTool.h:86: mutable MsgLogger* fLogger; //! output stream to save logging information; tmva//tmva/inc/TMVA/GeneticAlgorithm.h:101: mutable MsgLogger* fLogger; // message logger; tmva//tmva/inc/TMVA/VarTransformHandler.h:48: mutable MsgLogger* fLogger; //! message logger; tmva//tmva/inc/TMVA/SimulatedAnnealing.h:118: mutable MsgLogger* fLogger; ///< message logger; tmva//tmva/inc/TMVA/GeneticPopulation.h:99: mutable MsgLogger* fLogger; ///< message logger; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792#issuecomment-1925352541:670,Optimiz,OptimizeConfigParameters,670,https://root.cern,https://github.com/root-project/root/issues/9792#issuecomment-1925352541,1,['Optimiz'],['OptimizeConfigParameters']
Performance,These three lines before begin-tikzpicture should do the job:. ```; \def\CheckTikzLibraryLoaded#1{ \ifcsname tikz@library@#1@loaded\endcsname \else \PackageWarning{tikz}{You forgot to add usetikzlibrary{#1} in the preamble!} \fi }; \CheckTikzLibraryLoaded{patterns}; \CheckTikzLibraryLoaded{plotmarks}; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9143#issuecomment-947612250:125,load,loaded,125,https://root.cern,https://github.com/root-project/root/issues/9143#issuecomment-947612250,1,['load'],['loaded']
Performance,These tutorials run in multi-threads and will use all machine cores by default.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7133#issuecomment-773862104:23,multi-thread,multi-threads,23,https://root.cern,https://github.com/root-project/root/pull/7133#issuecomment-773862104,1,['multi-thread'],['multi-threads']
Performance,"These two libraries do not need to be linked, they can be loaded at runtime when necessary. `ROOTVecOps` in particular forces `libPyROOT.so` to link against Vdt when that is enabled, which we would like to avoid. *Note:* `RVec` pythonization has been recently made lazy in 3017be2d80c160d8726c887fad2ede81c295c27a.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3225:58,load,loaded,58,https://root.cern,https://github.com/root-project/root/pull/3225,1,['load'],['loaded']
Performance,"They do, but they are not at odd. libImt is presently the tool used via TROOT to get the status of the activation of ImplicitMT. That requires the load of libImt and the invocation of a function. This PR made of 1 commit simplifies the mechanism, avoiding to load libImt (and initialise the entire TROOT) in case only the activation status of ImplicitMT is required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1127#issuecomment-334141079:147,load,load,147,https://root.cern,https://github.com/root-project/root/pull/1127#issuecomment-334141079,2,['load'],['load']
Performance,"They were picked up as side effects of classes, but not forward declared as; and by themselves. This fixes namespaces and enums not being available / known at the ROOT prompt despite their dictionary being loaded:; https://root-forum.cern.ch/t/enum-in-namespace-not-available-after-loading-dictionary/45757",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8661:206,load,loaded,206,https://root.cern,https://github.com/root-project/root/pull/8661,2,['load'],"['loaded', 'loading-dictionary']"
Performance,"This PR add a new architecture for TMVA GPU based on using the cuDNN library from NVIDIA. ; This includes the work of Joana Niermann, OpenLab summer stuident 2019. ; This accelerates significantly the performance in convolutional neural networks. ; See the figure below; [cudnnPerformanceNew.pdf](https://github.com/root-project/root/files/3716742/cudnnPerformanceNew.pdf). This PR introduces two new classes TCpuTensor whic his an extension of RTensor for using tensor operations in the CPU architecture (thanks to the work of Sitong An) and TCudaTensor for GPU operations with or without CuDNN.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4531:201,perform,performance,201,https://root.cern,https://github.com/root-project/root/pull/4531,1,['perform'],['performance']
Performance,"This PR adds `RooGradMinimizerFcn`, an alternative to `RooMinimizerFcn` that calculates gradient itself outside of Minuit during minimization. To be able to use `RooGradMinimizerFcn`, `RooMinimizer` had to be refactored to be able to use `RooAbsMinimizerFcn` instead of the concrete RooMinimizerFcn class. To accomodate this change, several other changes had to be made:; - `_optConst` and `_func` members were removed, since these are now managed by the `*MinimizerFcn`.; - This means also things like function name and title, but also optimization switches, were moved to `RooAbsMinimizerFcn` as well.; - Functions `getMultiGenFcn`, `fitterFcn` and `fitFcn` were added which are used in several places as convenience functions to access the concrete `RooAbsMinimizerFcn` object with its proper type. The concrete type matters, for instance, when passing the class to the derivator, because a gradient enabled `*MinimizerFcn` needs to take different overloads than the classic function-value-only `RooMinimizerFcn`. A `FcnMode` enum class was added for this disambiguation as well.; - Construction of a `RooMinimizer` can be done the same as always when using a classic `RooMinimizerFcn`. However, to activate `RooGradMinimizerFcn`, a new create function can be used with the proper type as template parameter. In a later PR, this pattern will be extended with another gradient-enabled `RooAbsMinimizerFcn` instantiation that will also include multi-processing implementations. Since we had to refactor construction, we took the opportunity to also put default parameters in the header declaration, instead of in the constructor initializer lists. Finally, this PR changes the default minimizer from Minuit to Minuit2. **Note that this may require some discussion.** We already briefly touched upon this in a Zoom meeting, but haven't thoroughly mapped out consequences yet. The reason for the switch is that the derivator scheme used in `RooGradMinimizerFcn` replicates that of Minuit2, so comparing",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596:537,optimiz,optimization,537,https://root.cern,https://github.com/root-project/root/pull/8596,1,['optimiz'],['optimization']
Performance,"This PR adds a new `Create` factory method to the `RNTupleInspector` that takes the name and source path of the `RNTuple` to be inspected as its arguments. This removes the need for the user to open the relevant `TFile` and load the `RNTuple` manually, which can be useful in case one is only interested in inspecting an `RNTuple`. Additionally, a check is added to the existing `Create(RNTuple *sourceNTuple)` method to make sure the pointer that was passed does not refer to null.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12574:224,load,load,224,https://root.cern,https://github.com/root-project/root/pull/12574,1,['load'],['load']
Performance,"This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load; values of all required columns when `RDataSource::SetEntry` is called, but; the loading can be delayed to the moment in which a value is actually; needed. In case of strict upstream `Filters`, this should result in; less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6348:296,load,load,296,https://root.cern,https://github.com/root-project/root/pull/6348,3,"['load', 'perform']","['load', 'loading', 'performed']"
Performance,"This PR allows to change the minimiser options when doing a second fit or when calling Hesse or Minos. . In case of Hesse the minimizer can also be changed but not in case of Minos, because the minimizer requires a a valid minimisation that is performed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4691:244,perform,performed,244,https://root.cern,https://github.com/root-project/root/pull/4691,1,['perform'],['performed']
Performance,"This PR allows us to use [`liburing`](https://github.com/axboe/liburing), the ""application-level"" interface to [`io_uring`](https://kernel.dk/io_uring.pdf), the new Linux kernel IO interface.; `liburing` takes care of many of the low-level details (e.g. `mmap` calls, barriers) required to correctly use `io_uring`. `io_uring` is supported on Linux kernels 5.1 and up, but it's up to the user to download and install `liburing` themselves, either from source (`make && make install`) or through a package manager. The rationale for including `liburing` in ROOT is to experiment with `io_uring`'s parallel, async IO features. This may drive performance improvements in low-level IO. . I based the CMake changes on how `jemalloc` is handled. I am not very experienced with CMake and would be happy to find out that I've done something wrong here. We need to able to include (at least) two `liburing` header files and link against the shared library, namely . * `#include ""liburing.h""`; * `#include ""liburing/io_uring.h""`; * `liburing.so`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5919:640,perform,performance,640,https://root.cern,https://github.com/root-project/root/pull/5919,1,['perform'],['performance']
Performance,"This PR applies several improvements to the RooAddPdf class:. 1. Avoid code duplication of `updateCoefficients()` with RooAddModel; 2. Reduce footprint of cache object by using `std::vector` and avoid creating dummy RooRealVars; 3. Avoid redundant computation of raw coefficient values in BatchMode, which fixes performance problems in important fits like the ATLAS Higgs combination. More details can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11161:155,cache,cache,155,https://root.cern,https://github.com/root-project/root/pull/11161,2,"['cache', 'perform']","['cache', 'performance']"
Performance,This PR can actually be closed because it's fully covered by the combination of. https://github.com/root-project/root/pull/7105 (merged); https://github.com/root-project/root/pull/7106 (merged); https://github.com/root-project/root/pull/7260 (the other one we're discussing). The performance improvements were added to the PR descriptions but indeed not in the commit messages themselves.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-800509915:280,perform,performance,280,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-800509915,1,['perform'],['performance']
Performance,"This PR change contains:; - Registering DeserializationListener to ASTReader and get callbacks; when decls are deserialized.; We inherited ASTDeserializationListener in DeclCollector and register; DeserializationListener to our ASTReader at DeclCollector setup time.; In the callback(DeclRead), we get owning modules from decls and store; the information in Transaction. - Load libraies for deserialized decls; Before executeTransaction(where linking happens) we put our callback; beforeEmittingModuleForTransaction in InterpreterCallbacks. This loads; libraries when it wasn't in its first run, and store modules if it's; in its first run. This is because Interpreter is not yet initialized; at first run but we need to use Interpreter services when loading; libraries. I think this is the last piece of semantic change related to runtime; cxxmodules. This also enables us to reduce dependency on rootmap files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1882:373,Load,Load,373,https://root.cern,https://github.com/root-project/root/pull/1882,3,"['Load', 'load']","['Load', 'loading', 'loads']"
Performance,This PR continues the work in #5376. It creates a vcruntime.modulemap file which is loaded before libc and std modulemaps in order to fix several include errors. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5586:84,load,loaded,84,https://root.cern,https://github.com/root-project/root/pull/5586,1,['load'],['loaded']
Performance,"This PR does a few things; 1) Extends the RDF Fill functionality to support arbitrary types and number of columns and an arbitrary mix of individual objects and containers with variadic templates. Note that this will likely result in slower code being generated in case of compiling/jitting without optimization. 2) Adds a HistoND function to RDF to fill a THnD with arbitrary number of dimensions. The main issue here was actually that THnT does not have a publicly accessible copy constructor or assignment operator, which are needed for use with RDF. I didn't have the patience to implement this by hand for all the classes in the inheritance chain, so the relevant classes have been migrated from C-style arrays to std::vector such that default copy (and move) constructors and assignment operators can be automatically generated. 3) Appropriate constructors have been added to allow THnT to be used with variable binning.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7499:299,optimiz,optimization,299,https://root.cern,https://github.com/root-project/root/pull/7499,1,['optimiz'],['optimization']
Performance,"This PR duplicates one of the commits in PR #1520 (that PR in addition addresses two more issues in JsMVA not related to the d3 change). As written in the description of PR #1520:. > The code has not been updated to reflect changes in jsroot. The code still tries to load d3.v3.min.js from jsroot. In the current version of jsroot the d3 script has been updated to version 4 and the file is now called d3.min.js. The pull request changes the name of the file in the two places where it is referenced, so it should now find the file. However this change is incomplete since the d3 API changes between the versions and some porting is needed. This PR does not introduce any other changes than changing the name of the js file in the two places where it is referenced in the code, just as PR #1520 does. The API of d3 v4 is not fully backward compatible with d3 v3. Did you go through the code and check that nothing else needs to be changed? In jsroot itself there were many other changes to the code to adapt to the changed API when the d3.js file was updated to v4 as seen in the commit:. https://github.com/root-project/jsroot/commit/c156b8956f77d1aef4b70cd8609c4b1f2036f94f#diff-26681b69718507c05077030d69e5ba58. One more comment: In addition to the change that changes the name of the d3.js file, this PR also proposes changes to some error messages in jsroot. These proposed changes should be proposed to jsroot upstream (https://github.com/root-project/jsroot), otherwise they will be overwritten next time root's bundled copy of jsroot is updated by copying files from upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2353#issuecomment-409446728:267,load,load,267,https://root.cern,https://github.com/root-project/root/pull/2353#issuecomment-409446728,1,['load'],['load']
Performance,"This PR fixes ; - #15919; ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). clingwrapper tries to lookup the `ClassInfo` of `TViewPubFunctions` in meta which is not public. The return type of `GetListOfAllPublicMethods` should be a `TList` but the public `ClassDefInlineOverride` here:. https://github.com/root-project/root/blob/a038a2f345f41392ce86e07b0683d1740dc9b07c/core/meta/src/TViewPubFunctions.h#L78-L82. and this usage:. https://github.com/root-project/root/blob/a038a2f345f41392ce86e07b0683d1740dc9b07c/core/meta/src/TClass.cxx#L3845-L3849. exposes the type as `TViewPubFunctions`. This causes the observed offset calculation between `TList` and `TViewPubFunctions` in `Cppyy::GetBaseOffset`:; https://github.com/root-project/root/blob/a038a2f345f41392ce86e07b0683d1740dc9b07c/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1443-L1457. which then fails, producing the warning. Running a check on the type:. ```python; import ROOT; print(""Type:"", ROOT.TObject.Class().GetListOfAllPublicMethods().IsA().GetName())""; ```. Gives:; ```; Warning: failed offset calculation between TList and TViewPubFunctions; Type: TViewPubFunctions; ```. No longer performing this override in `TViewPubFunction.h` fixes the type back to `TList` and the call to `GetBaseOffset` no longer happens:. ```python; print(""Type:"", ROOT.TObject.Class().GetListOfAllPublicMethods().IsA().GetName()); ```; and the warning disappears:. ```; Type: TList; ```. This fix also required an update in the reference file in roottest : https://github.com/root-project/roottest/pull/1159",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16177:1212,perform,performing,1212,https://root.cern,https://github.com/root-project/root/pull/16177,1,['perform'],['performing']
Performance,"This PR fixes ROOT-10081. ; When calling TRandom1::SetSeed(seed ) a different initialization was done respect to calling ; TRandom1::SetSeeds( { seed, 0}, 0); With this PR the same initialization is now performed . In addition the documentation is updated for TRandom2::SetSeed. In that case the store seed value is not the same passed and the user needs to store by himself the seed value in order to reproduce the generated sequence.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4925:203,perform,performed,203,https://root.cern,https://github.com/root-project/root/pull/4925,1,['perform'],['performed']
Performance,"This PR fixes a race condition in which a TTreeReader and its; TTreeReaderValues could be deleted concurrently, possibly leading to use-after-deletes:; Thread #1) a task ends and pushes back processing slot; Thread #2) a task starts and overwrites thread-local TTreeReaderValues; Thread #1) first task deletes TTreeReader",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/833:16,race condition,race condition,16,https://root.cern,https://github.com/root-project/root/pull/833,2,"['concurren', 'race condition']","['concurrently', 'race condition']"
Performance,This PR fixes the issue that we don't export macros from the loaded modules. See the specific commits for more.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1381:61,load,loaded,61,https://root.cern,https://github.com/root-project/root/pull/1381,1,['load'],['loaded']
Performance,"This PR fixes the way data member offsets are determined for `std::pair` fields. The previous implementation used an auto-generated TClass for `std::pair` without its information loaded in the interpreter (as explained in #14084), which for ROOT builds *with* runtime C++ modules enabled is no problem, but without would need the addition of some dictionaries, most notably for `std::map` fields. In #14084, a fix is proposed which works. However, I also discovered that the way that is currently used to get the data member offsets for `std::tuple` fields through `TRealData` also works, so I opted to implement that one instead for consistency's sake (if there are reasons this implementation is problematic, we should also change it for `RTupleField`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14181:179,load,loaded,179,https://root.cern,https://github.com/root-project/root/pull/14181,1,['load'],['loaded']
Performance,This PR improves the test (forward pass and full training tests) for all the recurrent layers using the CPU and the GPU (Cudnn based) implementation. . It also compares the forward results obtained in CPU and GPU. By doing this it has been found that the GPU Cudnn implementation uses a variant in case of GRU (the resetGate is applied after the multiplication of the previous state with the candidate weights). ; This option is now implemented also in teh CPU case (both forward and backward pass) to have consistent results when training on GPU and evaluating on CPU . The PR fixes also a bug seen when using the SGD optimizer with the RNN layers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5367:619,optimiz,optimizer,619,https://root.cern,https://github.com/root-project/root/pull/5367,1,['optimiz'],['optimizer']
Performance,"This PR increases the optimization level (in many cases, this lead to more time spend in loading the script that executing it) and disable nullptr pointer check for **\*everybody\*** is that really the intent?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6038#issuecomment-658906375:22,optimiz,optimization,22,https://root.cern,https://github.com/root-project/root/pull/6038#issuecomment-658906375,2,"['load', 'optimiz']","['loading', 'optimization']"
Performance,"This PR introduces the functionality offered by `ROOT::RDF::RunGraphs` in distributed RDataFrame. Some things may still need polishing or discussion.; - [x] Implement function for the Spark backend; - [x] Implement generic function available in the distributed module; - [x] Add test for the Spark backend; - [ ] Discuss whether we should keep the logic that all actions should be triggered by the same type of distributed backend (i.e. a user can submit N Spark jobs concurrently, but not N Spark jobs and M Dask jobs from the same call to RunGraphs); - [ ] Discuss default value of `concurrent_runs` parameter, i.e. number of jobs submitted concurrently from the client to the scheduler.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8972:468,concurren,concurrently,468,https://root.cern,https://github.com/root-project/root/pull/8972,2,['concurren'],['concurrently']
Performance,"This PR introduces the support for performing inference on Graph Neural Network models in TMVA SOFIE, based on [DeepMind's Graph Nets](https://github.com/deepmind/graph_nets). . **Checklist**; - [x] RModel_GNN class; - [x] RFunction class for graph-based functions; - [x] GraphInput structure for providing inputs to the graph; - [x] ~~RModel_GNNStack class for multi-graph architectures~~ (Should be user customized from Python interface); - [x] Initialize & Generate function for RModel_GNN class; - [x] RFunction_MLP for updation; - [x] RFunction_Mean for aggregate; - [x] RFunction_Sum for aggregate; - [x] RModel_GraphIndependent class; - [x] Pythonization for RModel_GNN & RModel_GraphIndependent (ParseFromMemory functions); - [x] Tests for RModel_GNN and RModel_GraphIndependent; - [x] Pythonization: (Parser, Tests)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11208:35,perform,performing,35,https://root.cern,https://github.com/root-project/root/pull/11208,1,['perform'],['performing']
Performance,This PR is a WIP for implementing dictionary reusing within a branch in ZSTD. The work is based on previous work of Brian for the Compression Engine although it does not make use of any of the functions associated with training. This work depends on: https://github.com/root-project/root/pull/3947. Two extra file are added (ZSTDEngine2.hxx/cxx) that provide the infrastructure to perform a detailed analysis of the compression and decompression at basket level. An analysis related with the current performance of this implementation can be found [here](https://gist.github.com/fylux/ac92de799ac3e9d3e81d5edeeeef46f6).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4248:381,perform,perform,381,https://root.cern,https://github.com/root-project/root/pull/4248,2,['perform'],"['perform', 'performance']"
Performance,"This PR is a follow-up on https://github.com/root-project/root/pull/15746. Make it possible to build RooFit CUDA evaluation library standalone to use in existing ROOT release, as discussed on the forum:; https://root-forum.cern.ch/t/installing-root-with-cuda-support-in-a-conda-environment/59208/5. To try it out:; * Build the content of `roofit/batchcompute` in this repository, replacing the CMakeLists.txt file with the code listing below:; * Build the project. You should now have a `libRooBatchCompute_CUDA.so` file. Make sure it's in the `LD_LIBRARY_PATH`; * Your fits should now work with `EvalBackend(""cuda"")` (see also the [RooAbsPdf](https://root.cern.ch/doc/master/classRooAbsPdf.html#a24b1afec4fd149e08967eac4285800de) documentation about this). ```cmake; # Adapt to your system; set (CMAKE_CUDA_ARCHITECTURES ""native"" CACHE STRING """" FORCE); set (CMAKE_CUDA_HOST_COMPILER /usr/bin/g++-13 CACHE STRING """" FORCE); set (CMAKE_CUDA_COMPILER ""/opt/cuda/bin/nvcc"" CACHE STRING """" FORCE). find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}). cmake_minimum_required(VERSION 3.14); project(batchcompute-cuda LANGUAGES CUDA). # in the src directory, put all files from roofit/batchcompute/src and roofit/batchcompute/res; add_library(RooBatchCompute_CUDA SHARED src/RooBatchCompute.cu src/ComputeFunctions.cu src/CudaInterface.cu); target_include_directories(RooBatchCompute_CUDA PRIVATE src res). target_compile_options(RooBatchCompute_CUDA PRIVATE -lineinfo --expt-relaxed-constexpr); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15775:831,CACHE,CACHE,831,https://root.cern,https://github.com/root-project/root/pull/15775,3,['CACHE'],['CACHE']
Performance,"This PR is a reload of #1896 . All the work of @amadio is there + 2 workarounds for 2 problems:; 1) On Ubuntu 16, gcc 54, interpreted macros and prompt cannot autoload TVec<(unsigned) long long>. The autoload key is there, the autoload can be triggered e.g. with TClass::GetClass but somehow through interpreted code this does not work. The workaround consists in not declaring the TVec<long long> extern, therewith leaving it in the pch and have it working (the library by definition is not needed at the price of using that class w/o the optimisations of the compiled library in interpreted code). 2) Windows. MVCC has issues digesting all the templates. Since 6.14 is the first ROOT6 version working with Windows and performance through data paralellism made accessible by VecOps is not a top priority, the extern templates have been removed alltogether with a preprocessor statement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1945#issuecomment-385142341:720,perform,performance,720,https://root.cern,https://github.com/root-project/root/pull/1945#issuecomment-385142341,1,['perform'],['performance']
Performance,"This PR is related to #1010 . I could be more efficient to cancel the tasks immediately than wait for unnecessary tasks to be finished. Especially when cache is invalid, unzipping task has to continue running return function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1180:152,cache,cache,152,https://root.cern,https://github.com/root-project/root/pull/1180,1,['cache'],['cache']
Performance,"This PR is the first part of a split and clean-up of #8294, as suggested by @guitargeek. In this PR, only the changes to mathcore and Minuit2 are taken into account. These changes will be necessary for the later RooFit parts which will come in separate PRs. Specifically, this PR introduces the ExternalInternalGradientCalculator in Minuit2. This subclass of AnalyticalGradientCalculator enables calculation of the derivative outside of Minuit2, but in ""Minuit-internal"" parameter space. This allows exact replication of the gradients as calculated in Minuit2 itself, which in turn enables external optimization and parallelization of this process without having to modify Minuit2, without having to worry about differences in outcome. In other words, the resulting external gradient calculation can be easily unit tested against the existing Minuit2 gradient calculation. ~Note: still working on ""cherry picking"" all changes and organizing them into functionally sensible commits. Will un-draft the PR once this is done.~ Ready for review.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8369:599,optimiz,optimization,599,https://root.cern,https://github.com/root-project/root/pull/8369,1,['optimiz'],['optimization']
Performance,"This PR modifies the TBufferMerger callback (that CMS requested) so that it wraps the merge operation--the callback is passed the function to perform the merge and is responsible for calling it. The motivation for this change is that the merge operation is taking enough CPU time that we need it to be executed in the CMSSW framework's TBB task arena so that we don't overrun our CPU commitment. With this change, we can use a callback like. ```; mergeExec_ = [this](const std::function<void()> &f){; std::promise<void> barrier;; auto fwrap = [&]() { ; auto set_value = [](decltype(barrier)* b) { b->set_value(); };; std::unique_ptr<decltype(barrier), decltype(set_value)> release(&barrier, set_value);; f();; };; taskArena_->enqueue(fwrap);; barrier.get_future().wait();; };; ```. to queue the merge operation to our task arena and wait for it to complete. This also ensures that any IMT operations invoked by the merge operation are also executed in our task arena. Since the callback can still perform any operations it wants after executing the merge operation, this is a superset of the previous callback functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1706:142,perform,perform,142,https://root.cern,https://github.com/root-project/root/pull/1706,3,"['perform', 'queue']","['perform', 'queue']"
Performance,This PR needs a review (mainly because it's a lot of code). Here a small walkthrough:. Preparation:. ```; pip install keras theano; ```. Testing:. ```; # Run unit tests (PyMVA-Keras-Classification and PyMVA-Keras-Regression); ctest -V -R PyMVA; # Check out examples; cd tutorials/tmva/keras; # Classification; ./ClassificationKeras.py; root -l LaunchClasGUI.C; ./ApplicationClassificationKeras.py; # Regression; ./RegressionKeras.py; root -l LaunchRegGUI.C; ./ApplicationRegressionKeras.py; # Multiclass; ./MulticlassKeras.py; root -l LaunchMultGUI.py; ```. Questionable lines of code from my point of view:; - in `testPyKeras*.C` the test datasets are loaded with `curl` (such as done in `TMVAClassification.C`),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/280#issuecomment-253197836:653,load,loaded,653,https://root.cern,https://github.com/root-project/root/pull/280#issuecomment-253197836,1,['load'],['loaded']
Performance,"This PR propagates the disconnect action from TFileCacheRead to TFilePrefetch. This is needed to restore TFilePrefetch compatibility with the CMS use of kDoNotDisconnect to swap TTreeCaches. CMS frequently swaps TTree caches with code like. filePtr_->SetCacheRead(cache, nullptr , TFile::kDoNotDisconnect);; branch->GetEntry(entryNumber);; filePtr_->SetCacheRead(nullptr, nullptr , TFile::kDoNotDisconnect);. This is done partially for ownership reasons and partially because CMS uses multiple TTreeCaches for different use cases (one cache for frequently read branches, a second for less frequently accessed branches, and potentially one or two more specialized use cases). kDoNotDisconnect tells the TFile that this cache may later be reconnected to the TFile, so it should not disconnect the cache from the file. TFile propagates the flag to TFileCacheRead, but TFileCacheRead does not propagate it to TFilePrefetch. If pre-fetching is enabled, TFilePrefetch clears its cached blocks due to this commit:. https://github.com/root-project/root/commit/4290bf4942285b754b2edb7bffd122bcf36c979d. which added clearing of the read and pending prefetch lists when SetFile() is called. This violates the assumptions made by TTreeCache in the kDoNotDisconnect case, leading to a deadlock where `TTreeCache::ReadBufferPrefetch` waits forever on a buffer that has been cleared from the prefetched and pending lists. This patch propagates the kDisconnect/kDoNotDisconnect action flag to `TFilePrefetch::SetFile`, only clearing the fetched and pending lists in the kDisconnect case. (The same end could be accomplished more simply by just not calling TFilePrefetch::SetFile() for the kDoNotDisconnect case; propagating the action seems more correct to me, but it is a matter of taste.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1769:218,cache,caches,218,https://root.cern,https://github.com/root-project/root/pull/1769,6,['cache'],"['cache', 'cached', 'caches']"
Performance,This PR provides some optimisation for Cuda. In particular: . - optimise update weights/gradient of SGD and ADAM/ ; - We avoid now creating temporary matrices in SGD ; - For ADAM it is more efficient defining three new updates functions which will blenched on the GPU. This also avoid creating temporaries . These changes speed-up by almost a factor of 2 the code in GPU for dense layer when using ADAM and restore the previous performances for SGD. - optimise also computation of convolutional weight gradients. ; In this case we can just simply use the ScaleAdd function. A speed up of ~ 20% is obtained . This PR also adds a commit that remove the computation of correlation matrix in case of large number of variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2502:428,perform,performances,428,https://root.cern,https://github.com/root-project/root/pull/2502,1,['perform'],['performances']
Performance,"This PR refactors (or rather, rewrites) `hadd`'s argument parsing code to achieve the following improvements:; - code is simpler to follow, more consistent among different flags and extracted from main; - adding new flags is easier; - allows the familiar syntax of `-j2` in addition to `-j 2`. As a bonus, and for consistency with `-cachesize=`, all flags can now also be passed as `-j=2` (except for `-f` which has a special logic).; - allows passing flags after the positional arguments; - hadd will abort when encountering invalid flag arguments, instead of just printing a message. In the name of code simplification, this PR doesn't attempt to replicate the same exact error-reporting behavior string-by-string as the current version, but the results should ideally be the same. I ran the roottest suite and all tests pass but we might want to add more tests to be sure. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090:333,cache,cachesize,333,https://root.cern,https://github.com/root-project/root/pull/16090,1,['cache'],['cachesize']
Performance,This PR removes the dependency of libTMVA from libROOTDataFrame. . The dependency is needed only for the test programs. ; This should fix the conflict seen when loading PyTorch models on some architectures. See https://github.com/root-project/root/pull/13674#issuecomment-1733208800 . In addition the PR veto some Keras tutorials which time-out on macOS due to need to keep eager execution on MacOS; (see https://github.com/root-project/root/pull/13634/commits/e1d2ed4a937e546d197a1c1c026c17f671a16bcc ),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13718:161,load,loading,161,https://root.cern,https://github.com/root-project/root/pull/13718,1,['load'],['loading']
Performance,"This PR should fix a race condition with some of the TMVA tutorials on ARM, as they all use the same files in the `dataset` folder: http://cdash.cern.ch/testDetails.php?test=22693533&build=331203",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/420:21,race condition,race condition,21,https://root.cern,https://github.com/root-project/root/pull/420,1,['race condition'],['race condition']
Performance,"This Pull request extends `RPageSink::RPageSinkDaos` to implement `RPageSinkDaos::CommitSealedPageVImpl()`, of signature: ; ```c++; vector<RNTupleLocator> RPageSinkDaos::CommitSealedPageVImpl(span<RPageStorage::RSealedPageGroup> ranges); ```; , which is virtually declared in the parent class `RPageSink` since PR #10775. . The implemented method modifies the default behavior for committing page ranges, i.e. calling `::CommitSealedPage` repeatedly for each individual page. ; Instead, it coalesces the buffered page ranges - e.g. all pages in a column or cluster - into a batch of vector writes, enabling I/O parallelization after recent optimizations to the `RDaos` library. . As with the batched fetching case in `RPageSourceDaos::LoadClusters()`, the page write requests are aggregated by the pair (Object ID, Distribution Key). This pair is part of the `RDaosKey` determined by the mapping strategy set in `kDefaultDaosMapping` from the pages metadata and the `RPageSinkDaos` instance's atomic counter `fPageId` that uniquely identifies pages in the storage sink. ## Changes or fixes:. * Implements `std::vector<RNTupleLocator> RPageSinkDaos::CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges)`; * Modifies the default behavior in `RPageSink::CommitSealedPageV()` to coalesce pages before sending out the write request to storage; * Enables optimized (i.e. batched) vector write requests of multiple pages within a column range by exploiting the refactored `RDaos` interface and the generalized ntuple-object mappings in `RPageStorageDaos`. ## Checklist:. - [x] tested changes locally and on openlab cluster `olsky-03` with DAOS 2.0.x; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10944:640,optimiz,optimizations,640,https://root.cern,https://github.com/root-project/root/pull/10944,3,"['Load', 'optimiz']","['LoadClusters', 'optimizations', 'optimized']"
Performance,This Pull request fixes an issue with the LSTM operator and provides some performance improvement for all recurrent operators,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9435:74,perform,performance,74,https://root.cern,https://github.com/root-project/root/pull/9435,1,['perform'],['performance']
Performance,"This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. ; Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. ; The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:; - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling.; - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called.; - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking.; - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10795:105,perform,performance,105,https://root.cern,https://github.com/root-project/root/pull/10795,7,"['perform', 'queue']","['performance', 'queue', 'queues']"
Performance,"This Pull request refactors `RPageSourceDaos::LoadClusters()` to coalesce the fetch requests for pages in the same cluster bunch before calling `RDaosContainer::ReadV`, instead of launching a call to remote storage for the pages of each cluster separately. A cluster bunch corresponds to all clusters being fetched together by `LoadClusters()` at a time. . Since the call by `ReadV()` is ultimately blocking until all requests are done, this change enables the asynchronous page fetch requests from different clusters to share queue and flight time; thus, remote storage can parallelize them toward a higher read throughput. . The requests are still coalesced according to object ID and distribution key resulting from the mapping strategy in `kDefaultDaosMapping`. The modification allows support for new mappings that do not feature the ntuple cluster ID among the object ID and distribution key (i.e. such page requests may now be parallelized despite not being from the same cluster). ## Changes or fixes:; - `RPageSourceDaos::LoadClusters()` has been refactored to batch up page requests from all provided clusters before the blocking `RDaosContainer::ReadV()` call. ## Checklist:. - [x] tested changes locally + openlab `olsky-03`; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10982:46,Load,LoadClusters,46,https://root.cern,https://github.com/root-project/root/pull/10982,5,"['Load', 'queue', 'throughput']","['LoadClusters', 'queue', 'throughput']"
Performance,"This address one of the issue noted in https://sft.its.cern.ch/jira/browse/ROOT-2869. Instead of resetting`fNfill` (i.e. forgetting all cached data) right after taking an action (actual putting the data into the histogram), we now reset it at the beginning of the entry processing if we took action during the previous processing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12555:136,cache,cached,136,https://root.cern,https://github.com/root-project/root/pull/12555,1,['cache'],['cached']
Performance,This addresses test failures like:; ```; 998/1157 Test #997: tutorial-v7-draw_mt.cxx .............................................***Failed 8.47 sec; Processing /builddir/build/BUILD/root-6.25.01/tutorials/v7/draw_mt.cxx...; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT12Experimental7HistLogEv' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::Experimental::HistLog(); Maybe you need to load the corresponding shared library?; CMake Error at /builddir/build/BUILD/root-6.25.01/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: 1. 1007/1157 Test #1007: tutorial-v7-draw_subpads.cxx ........................................***Failed 6.81 sec; Processing /builddir/build/BUILD/root-6.25.01/tutorials/v7/draw_subpads.cxx...; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT12Experimental7HistLogEv' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::Experimental::HistLog(); Maybe you need to load the corresponding shared library?; CMake Error at /builddir/build/BUILD/root-6.25.01/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: 1. 1017/1157 Test #1005: tutorial-v7-draw_rh3.cxx ............................................***Failed 28.52 sec; Processing /builddir/build/BUILD/root-6.25.01/tutorials/v7/draw_rh3.cxx...; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT12Experimental7HistLogEv' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::Experimental::HistLog(); Maybe you need to load the corresponding shared library?; CMake Error at /builddir/build/BUILD/root-6.25.01/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: 1; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8417:451,load,load,451,https://root.cern,https://github.com/root-project/root/pull/8417,3,['load'],['load']
Performance,"This adds gdb pretty printers for a few objects such as TString and TNamed, as well; as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`; is set to ROOT's lib directory.; The printers should only be installed during debug builds. A couple of things are still unclear:; - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make.; - Is it correct to use `install(FILES ...)` to install?; - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail; o With old gdbs; o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3633:138,load,load,138,https://root.cern,https://github.com/root-project/root/pull/3633,4,['load'],"['load', 'load-safe-path']"
Performance,This allows to interactively adjust histogram parameters before; performing a projection to a lower dimensional representation. This patch implements ROOT-4515. A unit test is being added in root-mirror/roottest/pull/6.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/212:65,perform,performing,65,https://root.cern,https://github.com/root-project/root/pull/212,1,['perform'],['performing']
Performance,This allows us to pass in flags directly to cling such as:; -Xclang -dump-deserialized-decls or -Xclang Rmodule-build which are very; useful for debugging performance.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1524:155,perform,performance,155,https://root.cern,https://github.com/root-project/root/pull/1524,1,['perform'],['performance']
Performance,This allows users to specify the modulemap name not just the folder. The CLING_MODULEMAP_FILES env variable should have a list of space-separated files which cling will try to load as modulemaps. This should allow cmssw to load the boost modulemap and use it. cc: @davidlange6,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6082:176,load,load,176,https://root.cern,https://github.com/root-project/root/pull/6082,2,['load'],['load']
Performance,"This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4837:11,load,loading,11,https://root.cern,https://github.com/root-project/root/pull/4837,1,['load'],['loading']
Performance,"This avoids that the first time the NLL is computed, a real calculation is performed and not a cached value is used. The cached value could be computed without subtracting the offset and this could be problematic in case the fcn is offsetting. This fixes #7659. Note that the real changes are only at around line 200, the rest are only extra whitespaces removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7671:75,perform,performed,75,https://root.cern,https://github.com/root-project/root/pull/7671,3,"['cache', 'perform']","['cached', 'performed']"
Performance,This basically means we are loading the llvm libraries twice. This can happen by linking the llvm symbols to a library outside libCling for instance.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1658994069:28,load,loading,28,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1658994069,1,['load'],['loading']
Performance,"This behaviour is understood (discussed already with @stwunsch). In a multi-python ROOT build, `TPython` is only compiled for the highest Python (i.e. Python3) and therefore it can only be used from that Python. The situation reported here only happens when using `TPython` from Python2 in a multi-python ROOT build, since `TPython` will trigger the loading of `libcppyy3_X` and `libcppyy_backend3_X`, thus causing the redefinition of symbols.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7678#issuecomment-825492372:350,load,loading,350,https://root.cern,https://github.com/root-project/root/issues/7678#issuecomment-825492372,1,['load'],['loading']
Performance,This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:; * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily; * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available; * Reduce scope of interpreter locks in several places where the lock is taken before necessary; * Add locks where unprotected use of `gInterpreter` is made; * Improve code clarity and performance of `TTree::Fill()`; * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/709:51,perform,performance,51,https://root.cern,https://github.com/root-project/root/pull/709,3,"['Load', 'perform']","['LoadClassInfo', 'performance']"
Performance,"This captures a wider set of use cases than `TTreeCache`, but doesn't perform as well as `TTreeCache` for the cases TTC is designed for.; - TTC works best when most of the IO is walking sequentially through the tree, reading from non-local storage, with approximately the same branches read for each event. `TFileCacheRead` will handle this case OK - but not as well as TTC.; - `TFileCacheRead` will perform better when the event access is non-sequential, when branch access patterns are not predictable, or when non-TTree data is used.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/146#issuecomment-328637604:70,perform,perform,70,https://root.cern,https://github.com/root-project/root/pull/146#issuecomment-328637604,2,['perform'],['perform']
Performance,"This chane is an optimization of the PyROOT value printing. Instead of jitting the value printing at every invocation of the __str__ method, the jitting now happens only once per type. The printer function pointers are stored in a map. The time needed to print is now equivalent to the previous one only for the first print, much faster afterwards. The memory used is also much lower, since traces in the AST are left only at the first print and only the type name and function pointer are stored in an unordered_map. Fixes https://github.com/root-project/root/issues/12817. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13901:17,optimiz,optimization,17,https://root.cern,https://github.com/root-project/root/pull/13901,1,['optimiz'],['optimization']
Performance,This change could be quite interesting; a proper solution that avoids the link everywhere could be quite powerful if combined with runtime checks. The biggest issue is probably that ROOT will need to load (and potentially pick?) a pythonlib before loading PyROOT and PyMVA.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3396#issuecomment-462739690:200,load,load,200,https://root.cern,https://github.com/root-project/root/pull/3396#issuecomment-462739690,2,['load'],"['load', 'loading']"
Performance,"This change is an optimization of the PyROOT value printing. Instead of jitting the value printing at every invocation of the __str__ method, the jitting now happens only once per type. The printer function pointers are stored in a map. The time needed to print is now equivalent to the previous one only for the first print, much faster afterwards. The memory used is also much lower, since traces in the AST are left only at the first print and only the type name and function pointer are stored in an unordered_map. Fixes https://github.com/root-project/root/issues/12817. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # https://github.com/root-project/root/issues/12817",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13876:18,optimiz,optimization,18,https://root.cern,https://github.com/root-project/root/pull/13876,1,['optimiz'],['optimization']
Performance,"This change was considered for some time now, and a bug recently; reported on the forum was the final motivation to open this PR:. https://root-forum.cern.ch/t/roodecay-getval-normalization-problem/49457. There are many problems with the pointer comparisons:. 1. If normalization sets are created on the stack it can often happen; that the same address gets reused (as happened in that forum post,; more precisely in the implementation of `RooAddModel`); 2. Memeory might also be reused on the heap, which lead to the; developement of a memory arena where memory is not reused. This; memory arena often causes other problems related to heap; fragmentation or dictionaries.; 3. Pointer comparisons still work if the RooArgSets for the cache; entry are already out of scope, which can also cause problems. The `UniqueId` is unique for each `RooArgSet` instance created in a; RooFit process, no matter if on the heap or on the stack. The IDs are; also never reused. This makes the `UniqueId` much more practical for; cache keys than RooArgSet pointers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10333:734,cache,cache,734,https://root.cern,https://github.com/root-project/root/pull/10333,2,['cache'],['cache']
Performance,"This code should be removed asap, and, if the functionality needed, an alternative found. The time needed to `import ROOT` shall be reduced to the minimum possible, as the one to start `root`. Invoking a command can increase significantly the time needed to import ROOT, especially if the distribution is accessed through cached file systems such as CVMFS.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13799#issuecomment-1746138442:322,cache,cached,322,https://root.cern,https://github.com/root-project/root/pull/13799#issuecomment-1746138442,1,['cache'],['cached']
Performance,"This commit enables serialization of the Python proxy defined within cppyy to the C++ std::runtime_error class. By doing so, we avoid errors that happen in certain configurations of Dask tasks where a std::runtime_error may be thrown within the event loop itself. Recent CI failures report the following:. ```; RDataFrame::Run: event loop was interrupted; Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it.; Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved; Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved; Error in <TClass::New>: cannot create object of class runtime_error; Error in <TBufferFile::ReadObject>: could not create object of class runtime_error; *** Break *** segmentation violation; ```. This is due to the fact that for some reason the std::runtime_error object is serialized at the end of the function scope within the Dask task. It is important to note that this has only appeared very recently (after October 20th 2023), somehow concurrently on multiple platforms/configurations:. * Alma9 (GCC 11, C++17, Python 3.9, Dask 2023.10) - also tested with Dask 2022.8.1 - 2023.9.3; * Ubuntu22 (GCC11, C++17, Python 3.10, Dask 2023.10); * Ubuntu23.10 (GCC13, C++20, Python 3.11, Dask 2023.10). ~~The reason why have appeared on these platforms and not on others (notably they do not appear in any Jenkins CI run) is unclear.~~Found culprit, see comment below",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13926:1324,concurren,concurrently,1324,https://root.cern,https://github.com/root-project/root/pull/13926,1,['concurren'],['concurrently']
Performance,"This commit provides a rewrite of key functions of TGeoParallelWorld, achieving: . (a) faster initialization; (b) faster execution of the Safety function (from ~O(N) to ~O(1)) ; (c) faster or equal execution of FindNode/FindBoundary functions (~log(N)) ; (d) less memory consumption (better memory scalability). The development for this commit was motivated from a use case in ALICE, in which the parallel world ""scene"" can be very large (~100K volumes). In this case, TGeoVoxelFinder takes very long; to construct and consumes a very large amount of memory (GBs). In addition, the evaluation of the Safety function dominates the Geant simulation time. The improvements in this commit are mainly achieved through:. * The use of a boundary volume hierarchy (BVH) as the base acceleration entity, replacing TGeoVoxelFinder.; BVH are the standard in industry/computer-graphics, for what concerns ray-object intersection tasks. The BVH is constructed from axis-aligned bounding boxes and employed in the FindBoundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:298,scalab,scalability,298,https://root.cern,https://github.com/root-project/root/pull/16442,1,['scalab'],['scalability']
Performance,"This commit provides an (optional) optimization to reduce the cost of safety evaluations associated with TGeoParallelWorld. The approach consists in the introduction of additional cache-state in TGeoNavigator. This state remembers the last location for which TGeoParallelWorld::Safety was evaluated, together with the corresponding value returned. Since TGeoNavigator follows the evolution of tracks step-by-step, we have some sort of history-locality. This means that the cache-state has a high-probability of being relevant for multiple track locations in a row. The optimization proposed here is orthogonal to other improvements. It adds on top of algorithmic improvements within TGeoParallelWorld (bounding volume hierarchies, see separate PR), gaining a few extra percent in speed. By default, the new feature is not enabled by default for backward compatibility. Once fully verified, we can make it the default mode. That said, in ALICE simulations, the caching did not modify stepping behaviour and yielded identical results compared to not doing the caching. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16470:35,optimiz,optimization,35,https://root.cern,https://github.com/root-project/root/pull/16470,4,"['cache', 'optimiz']","['cache-state', 'optimization']"
Performance,"This commit provides the possibility to pass system library search paths as well as some compiler include paths to ROOT as environment variables.; This has the advantage that ROOT will spawn less sub-processes and we can do the setup only once, instead of doing it for every single executable that is linked to ROOT. The commit does not change any default behaviour! Rather, expert-users may use the new feature by moving the initialization of the search paths to say software environment loading. In ALICE, we do something like. ```; export ROOT_LDSYSPATH=$(LD_DEBUG=libs LD_PRELOAD=DOESNOTEXIST ls /tmp/DOESNOTEXIST 2>&1 | grep -m 1 ""system search path"" | sed 's/.*=//g' | awk '//{print $1}'). export ROOT_CPPSYSINCL=$(LC_ALL=C c++ -xc++ -E -v /dev/null 2>&1 | sed -n '/^.include/,${/^ \/.*++/{p}}' | tr '\n' ':' | tr ' ' ':'); ```. speeding up the initialization of our executables at runtime and doing less syscalls that create short-lived processes, for instance calling the compiler. The effect from this operation can be seen by counting the `execve` syscalls in a small example:. ```; strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 14 calls. export ROOT_LDSYSPATH=...; export ROOT_CPPSYSINCL=...; strace -e execve -f root.exe -q -e ""double x=1;"" # ---> 6 calls; ```. This gain can accumulate to significant savings when used in a multi-process environment such as ALICE is using.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12613:489,load,loading,489,https://root.cern,https://github.com/root-project/root/pull/12613,1,['load'],['loading']
Performance,"This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in; RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in; `RooAbsOptTestStatistic` to mask histogram entries out of the variable; range in case of a subrange fit. The reasons why `cacheValidEntries` and; the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is; creating a clone of the dataset with the subrange only using; `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For; the RooDataHist, `valid()` tells you ""if bin `i` is considered; valid within the current range definitions of all observables""; (according to the documentation). For the RooDataSet, it always; returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the; `mutable` state of the RooDataHist, which can cause trouble if one; updates the observable range but then forgets to call; `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`; was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep; it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful; way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9168:245,cache,cacheValidEntries,245,https://root.cern,https://github.com/root-project/root/pull/9168,5,['cache'],['cacheValidEntries']
Performance,"This commit reverts:; ""[cxxmodules] Disentangle Vc and VecCore"" root-project/root@fa4c3f5e722cc96e1a5a6fc0ef2d1ea331b22b19.; ""[cxxmodules] Do not perform version checks for Vc."" root-project/root@a4e70032b2a89d3f8306b0a5b328cf28326a1275.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9641:146,perform,perform,146,https://root.cern,https://github.com/root-project/root/pull/9641,1,['perform'],['perform']
Performance,"This does not completely resolve the issue of the race conditions, but simplifies the implementation of TBufferMerger a lot by doing away with the ThreadFileMerger imported from GeantV and using TFileMerger directly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/577:50,race condition,race conditions,50,https://root.cern,https://github.com/root-project/root/pull/577,1,['race condition'],['race conditions']
Performance,This does not seem to affect the startup performance of ROOT.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1350:41,perform,performance,41,https://root.cern,https://github.com/root-project/root/pull/1350,1,['perform'],['performance']
Performance,This enables to easily get build performance statistics and debug other build; bottlenecks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/661:33,perform,performance,33,https://root.cern,https://github.com/root-project/root/pull/661,2,"['bottleneck', 'perform']","['bottlenecks', 'performance']"
Performance,"This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:; * We can split performance tests from unit tests;; * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);; * We can calculate asymptotic complexity (Big O) of the benchmarked items;; * Multithreading is a first class citizen;; * We can fine tune optimization levels (preventing some code to be optimized away);; * Rich reporting options;; * Possibility for calculating statistical performance deviations;; * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/688:25,perform,performance,25,https://root.cern,https://github.com/root-project/root/pull/688,6,"['optimiz', 'perform', 'tune']","['optimization', 'optimized', 'performance', 'tune']"
Performance,"This ensures that each thread-local TChain knows which tree contains; which global entry number without having to open all intermediate; files to check how many entries they contain, resulting in much; less contention in TTreeProcessorMT when multiple threads are loading; the right file to process. An artificial example running on 342 files of about 2MB each, with 8 cores, release build of ROOT, has the following timings:; * current master, 8 cores: ~10s; * with this fix, 8 cores: ~3.5s; * no imt (current master and with the fix): ~1s. To merge after #2115.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2116:264,load,loading,264,https://root.cern,https://github.com/root-project/root/pull/2116,1,['load'],['loading']
Performance,This feature can be enabled by setting an env variable ROOT_CLING_TIMING.; It prints some information about how much time different parts of clang; take. Example use:. ```; ROOT_CLING_TIMING=1 root.exe -l -b -q tutorials/hsimple.C . Processing tutorials/hsimple.C...; hsimple : Real Time = 0.12 seconds Cpu Time = 0.12 seconds; (TFile *) 0x37430c0; ===-------------------------------------------------------------------------===; Clang front-end time report; ===-------------------------------------------------------------------------===; Total Execution Time: 3.0650 seconds (3.0786 wall clock). ---User Time--- --System Time-- --User+System-- ---Wall Time--- --- Name ---; 2.1559 ( 72.3%) 0.0469 ( 55.7%) 2.2028 ( 71.9%) 2.2163 ( 72.0%) Reading modules; 0.6367 ( 21.4%) 0.0087 ( 10.4%) 0.6455 ( 21.1%) 0.6461 ( 21.0%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/TMVA.pcm; 0.0604 ( 2.0%) 0.0161 ( 19.1%) 0.0765 ( 2.5%) 0.0767 ( 2.5%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/stl.pcm; 0.0210 ( 0.7%) 0.0000 ( 0.0%) 0.0210 ( 0.7%) 0.0213 ( 0.7%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Cling_Runtime.pcm; 0.0195 ( 0.7%) 0.0000 ( 0.0%) 0.0195 ( 0.6%) 0.0193 ( 0.6%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/RooFit.pcm; 0.0122 ( 0.4%) 0.0041 ( 4.8%) 0.0163 ( 0.5%) 0.0163 ( 0.5%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/VMC.pcm; 0.0111 ( 0.4%) 0.0000 ( 0.0%) 0.0111 ( 0.4%) 0.0109 ( 0.4%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/ROOTDataFrame.pcm; 0.0064 ( 0.2%) 0.0000 ( 0.0%) 0.0064 ( 0.2%) 0.0061 ( 0.2%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/Eve.pcm; 0.0053 ( 0.2%) 0.0000 ( 0.0%) 0.0053 ( 0.2%) 0.0056 ( 0.2%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/ProofDraw.pcm; 0.0057 ( 0.2%) 0.0000 ( 0.0%) 0.0057 ( 0.2%) 0.0053 ( 0.2%) Loading /home/vagrant/workspace/root/runtime_cxxmodules_obj/lib/HistFactory.pcm; 0.00,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2867:821,Load,Loading,821,https://root.cern,https://github.com/root-project/root/pull/2867,2,['Load'],['Loading']
Performance,"This fix a ""corruption"" of the state of TStreamerSTL when using multi-thread. Fix ROOT-10648. See related 777f6b750e657e5c70bdf07095214d59c320e985; and 274c7302ebf95d81255db6d8a02afccb387d3c9e",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5319:64,multi-thread,multi-thread,64,https://root.cern,https://github.com/root-project/root/pull/5319,1,['multi-thread'],['multi-thread']
Performance,This fixes #10357 (a race condition when reading vectors with custom; allocators with TTreeProcessorMT that also affected RDataFrame). Co-authored-by: Philippe Canal <pcanal@fnal.gov>,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10373:21,race condition,race condition,21,https://root.cern,https://github.com/root-project/root/pull/10373,1,['race condition'],['race condition']
Performance,This fixes #10357 (a race condition when reading vectors with custom; allocators with TTreeProcessorMT that also affected RDataFrame). Co-authored-by: Philippe Canal <pcanal@fnal.gov>. EDIT: regression test at https://github.com/root-project/roottest/pull/866,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10361:21,race condition,race condition,21,https://root.cern,https://github.com/root-project/root/pull/10361,1,['race condition'],['race condition']
Performance,"This fixes #11907. Inadvertently a previous commit (79a669b) disabled the ability to cleanup the thread local gDirectory in other; threads when the TFile they pointed to is deleted. Also fix a set of rare race conditions:. Fix race condition between RegisterContext and gDirectory cleanup. Description of the race conditions:. (1) thread one create TFile, gDirectory now points to that file.; (2) thread two delete TFile, the destructor calls CleanTargets which has 4 distinct phase; (a) take the TFile spin lock and update all the TContext that points to the file; (b) still hold the spin lock, clean the other thread's directory.; (c) deal with the TContext that were being destructed at the same time; (d) update the local gDirectory. If between (2)(a) and (2)(b), thread (1) starts the creation of a TContext, and; is held at the start of RegisterContext after thread 2 release the spin lock,; thread 1 might awaken only after the TFile object has been deleted and thus; RegisterContext would access delete memory. If during the destruction of the TFile by thread 2, thread (1) starts the; creation of a TContext, but is suspended right before the start of RegisterContext,; when it comes back it will use deleted memory to try to acquire the spin lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11908:205,race condition,race conditions,205,https://root.cern,https://github.com/root-project/root/pull/11908,12,['race condition'],"['race condition', 'race conditions']"
Performance,"This fixes ROOT-10504. the script:; ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away; struct TTUBE {};. }}. ```; reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:; ```; static const char* fwdDeclCode = R""DICTFWDDCLS(; extern int __Cling_Autoloading_Map;; ....; ```. The order of parsing is (with many ellipsis):; ```; ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”; standalone.C : line 1 : #pragma GCC diagnostic push; standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map; standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map; standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string; input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map; input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map; input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map; ```; The last line triggers the assert because when recording the state change, it records it as being from; ```; standalone.C : line 12; ""<<< cling interactive line includer >>>"" : line 9; ```; but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),; which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interac",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4882:228,load,loading,228,https://root.cern,https://github.com/root-project/root/pull/4882,4,['load'],['loading']
Performance,"This fixes a race condition in which a TTreeReader and its; TTreeReaderValues could be deleted concurrently:; Thread #1) a task ends and pushes back processing slot; Thread #2) a task starts and overwrites thread-local TTreeReaderValues; Thread #1) first task deletes TTreeReader. I have not run a stress-test on this PR yet, to check for rare crashes. Will update as soon as I do.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/837:13,race condition,race condition,13,https://root.cern,https://github.com/root-project/root/pull/837,2,"['concurren', 'race condition']","['concurrently', 'race condition']"
Performance,"This fixes issue #9939. The mechanism introduced in commits e97dc3678ae9da6628242afceca3142d6c319832; and 30fd4c79425c8be12be7af6fe1936317d1f5eec7 : TFileMerger delete directory only if we induced its creation/loading; also had the unforunate consequence leading to the deletion of the; TDirectory object when reading other objects, leading to the need; to re-read the TDirectory objects as many time as object in; the directory ... (This is triggered only for the 2nd and higher files).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10088:210,load,loading,210,https://root.cern,https://github.com/root-project/root/pull/10088,1,['load'],['loading']
Performance,This fixes test failure:; ```; 745/1157 Test #729: tutorial-multicore-mp102_readNtuplesFillHistosAndFit ................***Failed 1.55 sec; Processing /builddir/build/BUILD/root-6.25.01/tutorials/multicore/mp102_readNtuplesFillHistosAndFit.C...; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT16TTreeProcessorMPC1Ej' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::TTreeProcessorMP::TTreeProcessorMP(unsigned int); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT16TTreeProcessorMP11ReplyToIdleEP7TSocket' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::TTreeProcessorMP::ReplyToIdle(TSocket*); Maybe you need to load the corresponding shared library?; CMake Error at /builddir/build/BUILD/root-6.25.01/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: 1; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8366:495,load,load,495,https://root.cern,https://github.com/root-project/root/pull/8366,2,['load'],['load']
Performance,"This fixes the following error when running (for example) tmva004_RStandardScaler.C:; ```; IncrementalExecutor::executeFunction: symbol '?AddDefinesToGraph@GraphDrawing@RDF@Internal@ROOT@@YA?AV?$shared_ptr@VGraphNode@GraphDrawing@RDF@Internal@ROOT@@@std@@V56@ABVRBookedDefines@234@ABV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@6@@Z' unresolved while linking function '??__Eid@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@YAXXZcling_module_12_'!; You are probably missing the definition of class std::shared_ptr<class ROOT::Internal::RDF::GraphDrawing::GraphNode> __cdecl ROOT::Internal::RDF::GraphDrawing::AddDefinesToGraph(class std::shared_ptr<class ROOT::Internal::RDF::GraphDrawing::GraphNode>,class ROOT::Internal::RDF::RBookedDefines const &,class std::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::allocator<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > const &); Maybe you need to load the corresponding shared library?; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6897:1141,load,load,1141,https://root.cern,https://github.com/root-project/root/pull/6897,1,['load'],['load']
Performance,"This fixes the following error:; ```; error G34C21FBE: static_assert expression is not an integral constant expression; static_assert(offsetof(TEveVectorT, fZ) == offsetof(TEveVectorT, fX) + 2*sizeof(TT),; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files (x86)\Windows Kits\10\Include\10.0.15063.0\ucrt\stddef.h:42:31: note: expanded from macro 'offsetof'; #define offsetof(s,m) ((size_t)&reinterpret_cast<char const volatile&>((((s*)0)->m))); ^; TEveProjections.h:174:71: note: in instantiation of member function 'TEveVectorT<float>::Arr' requested here; virtual Float_t* GetProjectedCenter() { return fProjectedCenter.Arr(); }; ^; TEveVector.h:55:21: note: cast that performs the conversions of a reinterpret_cast is not allowed in a constant expression; static_assert(offsetof(TEveVectorT, fZ) == offsetof(TEveVectorT, fX) + 2*sizeof(TT),; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.15063.0\ucrt\stddef.h:42:32: note: expanded from macro 'offsetof'; #define offsetof(s,m) ((size_t)&reinterpret_cast<char const volatile&>((((s*)0)->m))); ^; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1150:709,perform,performs,709,https://root.cern,https://github.com/root-project/root/pull/1150,1,['perform'],['performs']
Performance,This fixes the following type of error with recent versions of Visual Studio (v17.6):; ```; 800: Processing C:/root-dev/git/debug/tutorials/roofit/rf614_binned_fit_problems.C...; 800: IncrementalExecutor::executeFunction: symbol '__std_find_trivial_8' unresolved while linking [cling interface function]!; 800: You are probably missing the definition of __std_find_trivial_8; 800: Maybe you need to load the corresponding shared library?; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13254:399,load,load,399,https://root.cern,https://github.com/root-project/root/pull/13254,1,['load'],['load']
Performance,This fixes the nightlies from today: http://cdash.cern.ch/testSummary.php?project=1&name=pyunittests-pyroot-import-load-libs&date=2020-04-08,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5321:115,load,load-libs,115,https://root.cern,https://github.com/root-project/root/pull/5321,1,['load'],['load-libs']
Performance,"This fixes warnings such as these:; ```; IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL19make_ROperator_SeluERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'!; You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Selu(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&); Maybe you need to load the corresponding shared library?; ```; # This Pull request:. ## Changes or fixes:. Move private declarations away from the public header file. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10145:1048,load,load,1048,https://root.cern,https://github.com/root-project/root/pull/10145,1,['load'],['load']
Performance,"This follow-up PR further improved the situation after #12380. In particular, the staging area of a collection cannot (apparently) be iterated -- see; https://github.com/root-project/root/blob/master/io/io/src/TGenCollectionProxy.cxx#L1573.; Other uses in the ROOT repository rely on `TVirtualCollectionProxy::At()`. However, we can instead exploit the fact that the staging area is backed by an array, i.e. the elements are contiguous in memory. Use this optimization also for `kSTLvector` collections, which was a TODO anyways. This should also provide an advantage/simplification to PR #12948. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13197:456,optimiz,optimization,456,https://root.cern,https://github.com/root-project/root/pull/13197,1,['optimiz'],['optimization']
Performance,"This follows the C++ Core Guidelines item F.16, 'For ""in"" parameters, pass cheaply-copied types by value and others by reference to const.' `RClusterIndex` consists of two 64-bit values which for most recent platforms with 64-bit pointers is cheap to copy and better to pass in two registers instead of passing a pointer to stack memory. This in turn helps some recursive calls in RNTuple, for example `RColumn::ReadV` (at the moment of writing). In numbers, this scores a single-digit performance improvement in the usual ATLAS analysis benchmark, -5% analysis runtime on my system. The other usual benchmarks show no changes beyond fluctuations. This changes was prepared by running; ```; $ git grep -l ""RClusterIndex &"" | xargs sed -i ""s/const \(ROOT::Experimental::\)\?RClusterIndex &/\\1RClusterIndex /g""; ```; then reverting the change in `RNTupleUtil.hxx` for the copy-constructor and copy-assignment operator, and finally running clang-format.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14406:486,perform,performance,486,https://root.cern,https://github.com/root-project/root/pull/14406,1,['perform'],['performance']
Performance,"This functionality was put there to understand the potential benefits of generating optimized C++ shared libraries on-the-fly starting from the RDataFrame operations requested by the user in the application. With the benchmarks done so far, we have never seen a real reason to switch to this behaviour from the traditional PyROOT based approach. Also, it needed extra care when dealing with some special operations that cross the Python-C++ boundary (e.g. `AsNumpy`). We can remove it for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13232:84,optimiz,optimized,84,https://root.cern,https://github.com/root-project/root/pull/13232,1,['optimiz'],['optimized']
Performance,"This idea is to have an optional ROOT variable we can set in the PanDA pilot or the PanDA worker node wrapper environment that allows to limit the number of threads spawned on the worker node by ROOT. We did this in the past e.g. with `ProofLite.Workers` to prevent prooflite processes to grab all available CPU cores on a worker node instead of the actual usual 8 cores on a WLCG multi-core slot. We steer AthenaMP and MT jobs via the environment variables ATHENA_PROC_NUMBER and ATHENA_CORE_NUMBER and set them to the PanDA queue core count. Asking the GDB might be a bit too high level committee, but if needed this could be brought up in some WLCG operations meetings if others would be interested to steer ROOT in a similar way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9805#issuecomment-1030031260:526,queue,queue,526,https://root.cern,https://github.com/root-project/root/issues/9805#issuecomment-1030031260,1,['queue'],['queue']
Performance,"This implements a proof of concept of a new histogram auto binning mode designed to produced mergeable histograms when run in multi-threaded / multi-process mode. The algorithm chooses powers of 2 to chose the boundaries, ranges and number of bins. The idea is described in the following document: https://docs.google.com/document/d/1TEntRbVnRzZRLio8JhND51FTNqqTAvu0ngnhLGneahg/edit?usp=sharing. A method to adjust the final looking of the histogram is also included in the patch. Two multicore tutorials illustrate the usage: mt303_fillHistosAutobin.C and mt301_fillHistos.C .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1227:126,multi-thread,multi-threaded,126,https://root.cern,https://github.com/root-project/root/pull/1227,1,['multi-thread'],['multi-threaded']
Performance,"This improves performance for certain cases when creating non-JITted actions from the interpreter, for example when executing a macro that calls `Histo1D<int>()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10228:14,perform,performance,14,https://root.cern,https://github.com/root-project/root/pull/10228,1,['perform'],['performance']
Performance,"This improves performance for certain cases when creating non-JITted actions from the interpreter, for example when executing a macro that calls `Histo1D<int>()`. (cherry picked from commit 48189c862fa4e2cdd9c859d3c5a72090cb11fb1e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10237:14,perform,performance,14,https://root.cern,https://github.com/root-project/root/pull/10237,1,['perform'],['performance']
Performance,"This improves thread safety in RooFit, as inspired by a recent forum; post where someone wanted to do multiple fits in parallel. It was checked that this has no visible impact on performance. Also, a small bugfix and general code improvements in separate commits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16385:179,perform,performance,179,https://root.cern,https://github.com/root-project/root/pull/16385,1,['perform'],['performance']
Performance,"This in turn fixes a problem with TTreeProcessorMT and multi-thread; RDataFrame ""forgetting"" about the TTreeIndexes associated with; input friend trees. It fixes https://github.com/root-project/root/issues/12260,; ""[DF] Bogus data read from indexed friend trees in multi-thread runs"". A test is added for this case as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12269:55,multi-thread,multi-thread,55,https://root.cern,https://github.com/root-project/root/pull/12269,2,['multi-thread'],['multi-thread']
Performance,"This initialization should be unnecessary, but avoids a warning on some compiler platforms about potentially uninitialized use of the variable. Most other compiler platforms should optimize away the assignment. Fixes an issue reported by @pcanal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1202:181,optimiz,optimize,181,https://root.cern,https://github.com/root-project/root/pull/1202,1,['optimiz'],['optimize']
Performance,"This introduces a `SetAutoSave()` function to `TBufferMerger` that lets users choose how often data is merged into the output file. This avoid excessive writing of TTree headers, which are compressed and causes the output thread to do too much work if merges happen at every buffer read from the queue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1052:296,queue,queue,296,https://root.cern,https://github.com/root-project/root/pull/1052,1,['queue'],['queue']
Performance,"This is ROOT6 support for [CMA-ES](https://www.lri.fr/~hansen/cmaesintro.html), a state-of-the-art black box stochastic minimizer. The implementation uses [libcmaes](https://github.com/beniz/libcmaes), a novel high performance C++11 (with Python bindings) library for blackbox optimization. The new minimizer yields better results than Minuit2 for most problems, though for an higher computation cost on average. See below for links to relevant benchmarks backing up these claims. This implementation is on behalf of [Inria Saclay Research group TAO](http://www.inria.fr/en/teams/tao), [Laboratoire de l'Accelerateur Lineaire, group AppStat](http://appstat.lal.in2p3.fr/) and [University Paris-Sud LRI](https://www.lri.fr/index_en.php?lang=EN). ===Features===; - Seamless replacement for Minuit, Minuit2 and Fumili; - Seamless support for RooFit; - Relying on libcmaes allows for best performances known for CMA-ES + access to several flavors of the original algorithm, yielding best results with a trade off for computational cost, as needed; - Compilation support for both Autotools and CMake; - Included tutorial files, tests, and a special benchmark vs Minuit2. ===Documentation===; - Main documentation for building and using the new minimizer is here: https://github.com/beniz/libcmaes/wiki/using-CMA-ES-in-CERN's-ROOT. ===Performances===; - On-par with Minuit2 on low dimensional problems (< 10-D), consistently beats Minuit2 in higher dimension, leading to better fits. These claims are backed by two benchmarks and two experiments on real world data (we are still waiting from some results from usage at CERN); - Benchmark CMA-ES vs Minuit on [BBOB](http://coco.gforge.inria.fr/doku.php?id=bbob-2013) available here: https://drive.google.com/open?id=0B3J1vWYhta9ibktXc2JLRUExUTA&authuser=0; - In-ROOT benchmark vs Minuit2 on low-dimensional problems, results available here: https://drive.google.com/open?id=0B3J1vWYhta9iTmR0T0hnN21lSGM&authuser=0; - Beats out Minuit2 up to 98% of the time o",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/40:215,perform,performance,215,https://root.cern,https://github.com/root-project/root/pull/40,3,"['optimiz', 'perform']","['optimization', 'performance', 'performances']"
Performance,"This is a backport of #2482 . This is an additional fix for cms-sw/cmssw#22594. If one of the class associated with a TBranchElement has a base class and/or sub-object class that; has a rule that requires a cache (onfileObject) object to stage the original data but does not; have branch in the TTree that also neeed the same cache object, we need to associate a cache; object with the StreamerInfoAction sequence that needs it (associated with a higher level branch); and give it ownership of this cache object)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2488:207,cache,cache,207,https://root.cern,https://github.com/root-project/root/pull/2488,4,['cache'],['cache']
Performance,"This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:; https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt; 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`; 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore; cf653869f7 [RF] Don't bar xroofit behind `root7` anymore; e5a67bc647 [RF] More type safety and better memory management with CUDA interface; bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute; 529ba82432 [RF] RAII management of CUDA events and streams; cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays; 77299a2c34 [RF] Reduce public headers of `roobatchcompute`; 8b0a768f0c [RF] Refactor CUDA code in RooFit; 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra; a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors; e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude; 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction; 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`; bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`; 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`; 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`; e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx; 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr; 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions; 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf; 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface; e11a5e4d8c [RF] Improve `RooNumInt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13295:438,perform,performance-faster-string-find,438,https://root.cern,https://github.com/root-project/root/pull/13295,1,['perform'],['performance-faster-string-find']
Performance,"This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:; https://github.com/root-project/root/pull/3579; is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3581:30,load,loader,30,https://root.cern,https://github.com/root-project/root/pull/3581,1,['load'],['loader']
Performance,"This is a first stab to an optimized DF workflow generator in the; DistRDF workers. The optimization consists in generating the; C++ code of the workflow, compile it with ACLiC and execute it.; A compiled workflow might be faster than its purely jitted version. The optimized mode coexists with the old (jitted) mode, which is; the default. To enable the optimized mode the following flag; can be used:; ```python; ROOT.RDF.Experimental.Distributed.optimized = True; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8867:27,optimiz,optimized,27,https://root.cern,https://github.com/root-project/root/pull/8867,5,['optimiz'],"['optimization', 'optimized']"
Performance,"This is a fix for ROOT-7121. If a cache is updated in RooVectorDataStore and the cache has more than 1000 elements to be updated, an array on the stack will overrun and smash the stack. roofit will therefore crash. Solution: RooVectorDataStore uses a std::vector instead of an array[1000] to hold the pointers to the cache elements. Comments on the speed of the fix:; Using a std::vector placed on the stack (mimicking the original implementation), the fits would get slower. Therefore I added the vector as a member of RooVectorDataStore. This saves the time of constantly having to reallocate the vector. I tested with my (private) workspace: The crash is fixed. Unfortunately, I cannot provide this workspace.; To give a more meaningful test for you guys, I ran all the roofit/roostats tutorials and diffed the logs to check if roofit gives the same results. The diffs are attached. Apart from out-of-order execution and time measurements, there is no difference.; From the time measurements you can also see that the fixed version is not slower. [tutorials_roofit.diff.txt](https://github.com/root-mirror/root/files/56528/tutorials_roofit.diff.txt); [tutorials_roostats.diff.txt](https://github.com/root-mirror/root/files/56529/tutorials_roostats.diff.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/115:34,cache,cache,34,https://root.cern,https://github.com/root-project/root/pull/115,3,['cache'],['cache']
Performance,"This is a fix for ROOT-7121. If a cache is updated in RooVectorDataStore and the cache has more than 1000 elements to be updated, an array on the stack will overrun and smash the stack. roofit will therefore crash. Solution: RooVectorDataStore uses a std::vector instead of an array[1000] to hold the pointers to the cache elements. Comments on the speed of the fix:; Using a std::vector placed on the stack (mimicking the original implementation), the fits would get slower. Therefore I added the vector as a member of RooVectorDataStore. This saves the time of constantly having to reallocate the vector. I tested with my (private) workspace: The crash is fixed. Unfortunately, I cannot provide this workspace.; To give a more meaningful test for you guys, I ran all the roofit/roostats tutorials and diffed the logs to check if roofit gives the same results. The diffs are attached. Apart from out-of-order execution and time measurements, there is no difference.; From the time measurements you can also see that the fixed version is not slower. [tutorials_roofit.diff.txt](https://github.com/root-mirror/root/files/56546/tutorials_roofit.diff.txt); [tutorials_roostats.diff.txt](https://github.com/root-mirror/root/files/56547/tutorials_roostats.diff.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/116:34,cache,cache,34,https://root.cern,https://github.com/root-project/root/pull/116,3,['cache'],['cache']
Performance,"This is a follow-up to 15a14ae6b4c. The `FindCUDA` module is deprecated since CMake 3.10 and the mentioned; commit therefore removed the usage of it. This was fine for RooFit, but TMVA not only compiles sources with the; NVidia compiler but also uses the CUDA toolkit in regular C++. This was fine for RooFit, but TMVA not only compiles sources with the; NVidia compiler but also uses the CUDA toolkit in regular C++. Therefore, that commit broke the TMVA GPU features. Unfortunately, I didn't notice before, because of this check; in `cmake/modules/SearchInstalledSoftware.cmake`:; ```cmake; if(tmva-gpu AND NOT CUDA_FOUND); set(tmva-gpu OFF CACHE BOOL ""Disabled because cuda not found"" FORCE); endif(); ```. The `CUDA_FOUND` variable is not set anymore now that `FindCUDA` is not; used. That means that `tmva-gpu` was silently disabled, and not building; successfully (which I had wrongly concluded because of the absence of; errors). This check needs to be replaced with; `if( NOT CMAKE_CUDA_COMPILER)`. As recommended in the CMake docs, this should be done with the; `FindCUDAToolkit` module, which is what this PR suggests. The `CUDA_ADD_EXECUTABLE` command is also replaced with the regular; `add_executable`, because `CUDA_ADD_EXECUTABLE` was also deprecated with; `FindCUDA`. Furthermore, all `cuda AND tmva-gpu` checks were replaced with only; `tmva-gpu`, because `tmva-gpu` implies `cuda`. Finally, `stressTMVA` is moved to the `tmva` subdirectory so that it is built in the same cmake project as ROOT; itself, so that we can query the `tmva-gpu` and `tmva-cpu` flags. See also:. * https://cmake.org/cmake/help/latest/module/FindCUDA.html; * https://cmake.org/cmake/help/latest/module/FindCUDAToolkit.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13991:643,CACHE,CACHE,643,https://root.cern,https://github.com/root-project/root/pull/13991,1,['CACHE'],['CACHE']
Performance,"This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11619:722,perform,performance,722,https://root.cern,https://github.com/root-project/root/pull/11619,2,['perform'],['performance']
Performance,"This is a low-level function to reset the buffer for which this RVec is acting as a view. Before this commit, the only way to reset the pointed-to address of a non-owning RVec was to construct a new RVec and swap it with the old one, which is much more expensive than the two assignments ResetView performs. It is immediately useful for RDF bulk processing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12671:298,perform,performs,298,https://root.cern,https://github.com/root-project/root/pull/12671,1,['perform'],['performs']
Performance,"This is a partial, but long-overdue modernisation of RooDataHist. Instead of accessing members in array or vectors, it was using the convoluted logic of:; - I need the event weight of event `i`.; - So I have to load the coordinates(!) of `i` by calling `get(i)`.; - This has the side effect of writing the weight that belongs to `i` into the mutable member `_curWgt` or similar.; - To retrieve the weight, I can now call `weight()`. This obviously creates problems and might be slow, so the overwriting of such internal buffers was removed to a large extent. Many things can now be retrieved by index (`weight(i)` for example), and many functions don't have side effects, any more. Further:; - Remove lots of unnecessary mutable members from RooDataHist/RooVectorDataStore.; - Remove side effects from many of RooDataHist's functions.; - Implement getters that don't rely on setting the active bin.; ""h.get(binNumber); h.weight() --> h.weight(binNumber)"" etc.; - Remove useless members such as _curWeight. Those are replaced by; a lookup in the weight vectors.; - Implement retrieval of bin coordinates and weights in batches.; - Sort functions that rely on the presence of side effects into a; deprecated section for doxygen.; - Fix docstrings of many functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6718:211,load,load,211,https://root.cern,https://github.com/root-project/root/pull/6718,1,['load'],['load']
Performance,This is a performance optimisation.; We do not need a rw lock in this case because a write lock is needed; both when a slot is taken out of the stack and when it's put back.; The header of the class has also been made slimmer thanks to the usage; of a fwd declaration.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3189:10,perform,performance,10,https://root.cern,https://github.com/root-project/root/pull/3189,1,['perform'],['performance']
Performance,"This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header; - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch; - [x] Implement the basic outline of the MethodPyTorch Class.; - [x] Implement the DeclareOptions methods.; - [x] Implement ProcessOptions methods.; - [x] Implement SetupTorchModel method.; - [x] Implement train methods. (Done); - [x] Implement simple basic structure for training; - [x] Add ability to load code from users; - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders; - [x] Use default (optional optimizer SGD); - [x] Add savebest model; - [x] Add scheduler; - [x] Implement Validation; - [x] Add model prediction function loading ability; - [x] Implement user code ability; - [x] Implement helper function. ## Tests; - [x] Add testPyTorchClassification.C; - [x] Add generatePyTorchModelClassification.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added.; - [x] Add testPyTorchMulticlass.C; - [x] Add generatePyTorchModelMulticlass.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added.; - [x] Add testPyTorchRegression.C; - [x] Add generatePyTorchModelRegression.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added. ## GPU; - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials; These are implemented in #6273. ## Documentation; - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5757:688,load,load,688,https://root.cern,https://github.com/root-project/root/pull/5757,6,"['Load', 'load', 'optimiz']","['Load', 'load', 'loading', 'optimizer']"
Performance,"This is a refactored version of part of PR #709. The figure attached below shows an example of the difference in wait time, as measured by VTune for parallel filling of a TTree with random numbers. The number of waits on `LoadClassInfo()` is reduced from 451 to just 8 (one wait per thread). ![screenshot](https://user-images.githubusercontent.com/249404/27913555-cbd6b592-6260-11e7-87af-7a11f376b71a.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/747:222,Load,LoadClassInfo,222,https://root.cern,https://github.com/root-project/root/pull/747,1,['Load'],['LoadClassInfo']
Performance,"This is a simple fix to reduce imbalance in multi-thread event-loops; with no data-source: previously we spawned one task per worker thread. Expected to break `test_emptysource`, which is fixed by [PR 96](https://github.com/root-project/roottest/pull/96) in roottest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1104:44,multi-thread,multi-thread,44,https://root.cern,https://github.com/root-project/root/pull/1104,1,['multi-thread'],['multi-thread']
Performance,"This is a simplification of Snapshot's logic itself and a small performance optimization as we don't invoke the interpreter separately for each Snapshot call but we now take advantage of the same machinery that's already used by all other actions (and that merges all code to be jitted together). This PR fixes the Snapshot side of [ROOT-9790](https://sft.its.cern.ch/jira/browse/ROOT-9790), ""Lazy jitting of Cache and Snapshot"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6585:64,perform,performance,64,https://root.cern,https://github.com/root-project/root/pull/6585,3,"['Cache', 'optimiz', 'perform']","['Cache', 'optimization', 'performance']"
Performance,"This is a updated pull request from #59 The same experiments have been run and performance results are shown here:. | Algorithm | compression(write) | decompression(read) | Compressed File Size |; | --- | --- | --- | --- |; | zlib | 11.74 MB/s | 131.06 MB/s | 181 MB |; | lzma | 0.86 MB/s | 17.36 MB/s | 157 MB |; | lz4 | 5.22 MB/s | 143.81 MB/s | 221 MB |. The following performance is from the root file @pcanal's ticket (https://root.cern.ch/files/CMS_7250E9A5-682D-DF11-8701-002618943934.root). The file is 1.9 GB large, and I tried to decompressed it and it seems its original size is 6.4 GB. The following compression/decompression speeds are calculated by dividing 6.4 GB by the time each test run. @bbockelm , we could discuss implementation details of my tests tomorrow. . | Algorithm | compression(write) | decompression(read) | Compressed File Size |; | --- | --- | --- | --- |; | zlib | 15.83 MB/s | 63.23 MB/s | 1.6 GB |; | lzma | 1.28 MB/s | 22.62 MB/s | 1.2 GB |; | lz4 | 8.32 MB/s | 66.53 MB/s | 1.8 GB |",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/81:79,perform,performance,79,https://root.cern,https://github.com/root-project/root/pull/81,2,['perform'],['performance']
Performance,"This is a very early draft for caching `RNTuple`s. The goal is to save only the portions (clusters) of the original RNTuple that are actually read during an analysis to a new RNTuple . In this draft it is shown an attempt at exercising the part where the compressed clusters are saved during the IO pipeline already implemented in RClusterPool. To this end, an `RPageSink` is created at the beginning of the pipeline with the same header as the RNTuple being read. After the compressed cluster is retrieved in memory, its columns and pages are traversed and saved to the cached RNTuple. For now this feature can be reproduced with a very limited example, divided in three pieces; ### 1. Write an RNTuple; ```cpp; void write_ntuple(); {; auto model = RNTupleModel::Create();; auto myintfield = model->MakeField<int>(""myintfield"");; auto myintfieldsquared = model->MakeField<int>(""myintfieldsquared"");. std::string_view ntuplename{""myntuple""};; std::string_view filename{""myntuple.root""};; auto ntuple = RNTupleWriter::Recreate(std::move(model), ntuplename, filename);. constexpr int nentries = 10;; for (int i = 0; i < nentries; i++) {; *myintfield = i;; *myintfieldsquared = i*i;; ntuple->Fill();; // Create a cluster every 5 entries; if (i == 4 || i == 9) ntuple->CommitCluster();; }; }; ```; ### 2. Read the RNTuple (this will create a `cachedntuple.root` file); ```cpp; void read_ntuple(); {; std::string_view ntuplename{""myntuple""};; std::string_view filename{""myntuple.root""};; auto ntuple = RNTupleReader::Open(ntuplename, filename);. for (auto entryid: *ntuple){; ntuple->LoadEntry(entryid);; }; }; ```; ### 3. Print info of the cached RNTuple; ```cpp; void read_cache(); {; std::string_view ntuplename{""myntuple""};; std::string_view filename{""cachedntuple.root""};. auto model = RNTupleModel::Create();; auto myintfield = model->MakeField<int>(""myintfield"");; auto myintfieldsquared = model->MakeField<int>(""myintfieldsquared"");; auto ntuple = RNTupleReader::Open(std::move(model), ntuplename, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8329:571,cache,cached,571,https://root.cern,https://github.com/root-project/root/pull/8329,1,['cache'],['cached']
Performance,"This is actually still buggy and we now have a use case where not having it brings down the storage of some site, due to the excessive number of IOPS per server (50 IOPS, 720 concurrent accesses to 3 storage servers for a total of 0.2PB of data being read). Enabling this would allow us to reduce the IOPS by a factor ~5. The actual error that we get by enabling it is:. ```; [1923904:internal-dpl-aod-reader]: Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1679 of `/local/workspace/DailyBuilds/DailyO2Physics-slc9/daily-tags.nRQdop69vk/SOURCES/ROOT/v6-32-06-alice1/v6-32-06-alice1/tree/tree/src/TBranch.cxx'; [1923904:internal-dpl-aod-reader]: aborting; ```. I can provide some file which has the issue, if needed. This becomes rather urgent for us now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8962#issuecomment-2393067291:175,concurren,concurrent,175,https://root.cern,https://github.com/root-project/root/issues/8962#issuecomment-2393067291,1,['concurren'],['concurrent']
Performance,"This is an additional fix for cms-sw/cmssw#22594. If one of the class associated with a TBranchElement has a base class and/or sub-object class that; has a rule that requires a cache (onfileObject) object to stage the original data *but* does not; have branch in the TTree that also neeed the same cache object, we need to associate a cache; object with the StreamerInfoAction sequence that needs it (associated with a higher level branch); and give it ownership of this cache object)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2482:177,cache,cache,177,https://root.cern,https://github.com/root-project/root/pull/2482,4,['cache'],['cache']
Performance,"This is an extension allowing the VMC package to run a simulation; with multiple different engines at a time. Tracks can be transferred; among engines during a simulation run based on conditions specified by; the user. Important notes on the extensions:; 1) This extension preserves backward-compatibility in the sense that; user code relying on the former version of VMC is still running; with the extended version. Was tested with GEANT3_VMC@v2-6 and; GEANT4_VMC@v3-6-p1.; 2) A shared simulation is only possible when TGeo is used for geometry; construction and navigation.; 3) A TMCManager singleton object is responsible for handling multiple; engines and can be obtained on request calling; TVirtualMCApplication::RequestManager() during construction of the; user application class.; 4) The introduced TMCParticleStatus objects hold additional; information to keep track of properties when a track is transferred; between engines.; 5) When a track is interrupted in one engine to be transferred to; another, the geometry state is cached in the form of a; TGeoBranchArray object. It will be used to initialize the navigator; when this track is picked up for further transport in the next; engine. This is especially useful/required when a track is; transferred at a volume boundary in order to be picked up in the; entered volume and not in the one just left. This is a main reason; why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and; implementation in the user code can be found in the; montecarlo/vmc/README.md. Further note:; This commit also applies the clang format to the modified and new; files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3513:1035,cache,cached,1035,https://root.cern,https://github.com/root-project/root/pull/3513,1,['cache'],['cached']
Performance,"This is an overhaul of the optimize baskets algorithm, primarily done by Ilija Vukotic and extended by David Smith. Goal of this algorithm is to minimize overall memory size when writing and number of baskets in a cluster. Since this work predates ROOT moving to GitHub, it appears the patches primarily are floating around in various people's inbox. This is my attempt to ""capture"" the knowledge and ideas, even if we don't decide to go this direction. @pcanal @smithdh",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/657:27,optimiz,optimize,27,https://root.cern,https://github.com/root-project/root/pull/657,1,['optimiz'],['optimize']
Performance,"This is applying most of the suggestions from the CMSSW clang-tidy configuration:; https://github.com/cms-sw/cmssw/blob/master/.clang-tidy. Two checks are excluded though, because they can make wrong suggestions about replacing copies with const references:. * `performance-for-range-copy`. * `performance-unnecessary-copy-initialization`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13953:262,perform,performance-for-range-copy,262,https://root.cern,https://github.com/root-project/root/pull/13953,4,['perform'],"['performance-for-range-copy', 'performance-unnecessary-copy-initialization']"
Performance,"This is applying most of the suggestions from the CMSSW clang-tidy configuration:; https://github.com/cms-sw/cmssw/blob/master/.clang-tidy. Two checks are excluded though, because they can make wrong suggestions about replacing copies with const references:. * `performance-for-range-copy`. * `performance-unnecessary-copy-initialization`. **Note:** the trivial `nullptr` changes are in a separate commit for easier reviewing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13988:262,perform,performance-for-range-copy,262,https://root.cern,https://github.com/root-project/root/pull/13988,2,['perform'],"['performance-for-range-copy', 'performance-unnecessary-copy-initialization']"
Performance,"This is critical because we might load who knows what into the frameworks. But because the fix is rather intrusive, and the OP has a simple workaround, I'll *not* backport the fixes to our existing release branches.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7955#issuecomment-856839812:34,load,load,34,https://root.cern,https://github.com/root-project/root/issues/7955#issuecomment-856839812,1,['load'],['load']
Performance,This is done to reduce the feature divergence between PyROOT and C++ ROOT. Also improves code performance and robustness.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16707:94,perform,performance,94,https://root.cern,https://github.com/root-project/root/pull/16707,1,['perform'],['performance']
Performance,This is due to the introduction (in commit f3f0f138797) of a fast path in `TClass::GetListOfDataMember` which did not take in consideration the case:; ```; c = GetClass(someclassname); c->GetState() == TClass::kForwardDeclared; c->GetListOfDataMember() -> list is now created but empty.; load and parse header file for `someclass`; c->GetState() == TClass::kInterpreted; c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point).; ```; The logic assumed incorrectly that if `someclassname` was indeed pointing to a class or struct and the list was created then it was loaded.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6666#issuecomment-712450152:288,load,load,288,https://root.cern,https://github.com/root-project/root/issues/6666#issuecomment-712450152,3,['load'],"['load', 'loaded']"
Performance,"This is first step to make Web GUI code running in multiple threads.; There are many threads introduced and many communication patterns are supported. 1. Provide special thread, which handle all http requests of THttpServer.; This thread serves JavaScript/HTML files and redirects websocket requests to recipients.; Try to reduce access to global ROOT structures from that thread - only list of classes for the moment is used. Potentially many THttpServer instances with such thread can run fully independent. 2. Let run websocket handlers (THttpWSHandler) in separate threads. ; Requires correct locking of shared resources. 3. Support special threads for sending data via websocket from server to clients. ; When many clients are connected to the same TWebWindow, slowest client can ; break down performance. With use of such specialized thread problem can be solved. 4. Implement all necessary locks and protections to use many TWebWindows in different user threads. ; Provide TWebWindow::Run(double) method, which allows to run window code in any user thread. . Introduce tutorials/v7/draw_mt.cxx macro, which shows how three RCanvas instances can run; in three independent thread and regularly updated. Of course, default behavior should work - all functionality runs in main thread. ; Means THttpServer requests processing, websockets processing, RCanvas handling - ; everything runs in main application thread. Simple, but not scalable. This is very preliminary code , I still plan to change/extend some API.; Any comments comments are welcome",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2487:798,perform,performance,798,https://root.cern,https://github.com/root-project/root/pull/2487,2,"['perform', 'scalab']","['performance', 'scalable']"
Performance,This is import of calorimeters from original EVE to server-client model of event display.; Macro tutorials/eve7/calorimeters.C is an example of 3D and projected visualization.; ![calorimeters.C](http://xrd-cache-1.t2.ucsd.edu/alja/calo.png),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5978:206,cache,cache-,206,https://root.cern,https://github.com/root-project/root/pull/5978,1,['cache'],['cache-']
Performance,This is now; ```; IncrementalExecutor::executeFunction: symbol '_ZN10TParameterIcE8StreamerER7TBuffer' unresolved while linking symbol '__cf_7'!; You are probably missing the definition of TParameter<char>::Streamer(TBuffer&); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN10TParameterIcE5ClassEv' unresolved while linking symbol '__cf_7'!; You are probably missing the definition of TParameter<char>::Class(); Maybe you need to load the corresponding shared library?. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10724#issuecomment-1925609491:245,load,load,245,https://root.cern,https://github.com/root-project/root/issues/10724#issuecomment-1925609491,2,['load'],['load']
Performance,"This is related to the fix of includeInLinkdef. Load; ""./module.modulemap"" if it exists. User can cd to different directory; and LoadModule loads the new modulemap.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2375:48,Load,Load,48,https://root.cern,https://github.com/root-project/root/pull/2375,3,"['Load', 'load']","['Load', 'LoadModule', 'loads']"
Performance,"This is still a problem in 6.26.04:. ```; root [0] ROOT::RDataFrame(10).Define(""x"", ""42"").Histo1D(""x"").DrawClone(); ROOT_prompt_0:1:52: error: no member named 'DrawClone' in 'ROOT::RDF::RResultPtr<TH1D>'; did you mean to use '->' instead of '.'?; ROOT::RDataFrame(10).Define(""x"", ""42"").Histo1D(""x"").DrawClone(); ^; ->; root [1] ROOT::RDataFrame(10).Define(""x"", ""42"").Histo1D(""x"")->DrawClone(); root.exe: /home/conda/feedstock_root/build_artifacts/root_base_1654795774398/work/root-source/interpreter/cling/lib/Interpreter/DynamicLibraryManagerSymbol.cpp:1187: std::string cling::Dyld::searchLibrariesForSymbol(llvm::StringRef, bool): Assertion `!llvm::sys::DynamicLibrary::SearchForAddressOfSymbol(mangledName) && ""Library already loaded, please use dlsym!""' failed.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6439#issuecomment-1158723732:731,load,loaded,731,https://root.cern,https://github.com/root-project/root/issues/6439#issuecomment-1158723732,1,['load'],['loaded']
Performance,"This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to).; * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different.; - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time...; - [ ] Performance optimizations to reduce the impact of comparing axis binning, including...; * [ ] Not comparing every axis bin border when the axes are equidistant; * [ ] Reducing reliance on virtual function calls, especially in loops; * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...); - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5725:899,Perform,Performance,899,https://root.cern,https://github.com/root-project/root/pull/5725,2,"['Perform', 'optimiz']","['Performance', 'optimizations']"
Performance,"This is the gdb output in Release mode:. ```; Thread 1 ""runGUI"" received signal SIGINT, Interrupt.; 0x00007ffff6b46ad3 in futex_wait_cancelable (private=<optimized out>, expected=0, futex_word=0x5555562a4138) at ../sysdeps/unix/sysv/linux/futex-internal.h:88; 88	../sysdeps/unix/sysv/linux/futex-internal.h: No such file or directory.; (gdb) info threads; Id Target Id Frame ; * 1 Thread 0x7ffff7f8fb80 (LWP 20703) ""runGUI"" 0x00007ffff6b46ad3 in futex_wait_cancelable (private=<optimized out>, expected=0, futex_word=0x5555562a4138) at ../sysdeps/unix/sysv/linux/futex-internal.h:88; 2 Thread 0x7fffa4c86700 (LWP 20736) ""runGUI"" 0x00007ffff6b46ad3 in futex_wait_cancelable (private=<optimized out>, expected=0, futex_word=0x5555573d87fc) at ../sysdeps/unix/sysv/linux/futex-internal.h:88; (gdb) thread apply all bt. Thread 2 (Thread 0x7fffa4c86700 (LWP 20736)):; #0 0x00007ffff6b46ad3 in futex_wait_cancelable (private=<optimized out>, expected=0, futex_word=0x5555573d87fc) at ../sysdeps/unix/sysv/linux/futex-internal.h:88; #1 __pthread_cond_wait_common (abstime=0x0, mutex=0x5555573d8880, cond=0x5555573d87d0) at pthread_cond_wait.c:502; #2 __pthread_cond_wait (cond=0x5555573d87d0, mutex=0x5555573d8880) at pthread_cond_wait.c:655; #3 0x00007ffff537d8fe in TThread::XARequest(char const*, int, void**, int*) () from /opt/root/lib/libThread.so; #4 0x00007ffff537dadd in TThread::Printf(char const*, ...) () from /opt/root/lib/libThread.so; #5 0x00007ffff7ba899d in RThread::Stop (this=0x5555568eb150) at /home/user/Desktop/zdt/gui/RThread.cpp:119; #6 0x00007ffff7bb776e in MainWindow::DoStopDAQ (this=0x7ffffffdd1f0) at /home/user/Desktop/zdt/gui/MainWindow.cpp:1250; #7 0x00007ffff7bb5164 in MainWindow::SaveAndExit (this=0x7ffffffdd1f0) at /home/user/Desktop/zdt/gui/MainWindow.cpp:848; #8 0x00007fffa43c802a in ?? (); #9 0x0000000000000000 in ?? (). Thread 1 (Thread 0x7ffff7f8fb80 (LWP 20703)):; #0 0x00007ffff6b46ad3 in futex_wait_cancelable (private=<optimized out>, expected=0, futex_word=0x",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365#issuecomment-878288640:154,optimiz,optimized,154,https://root.cern,https://github.com/root-project/root/issues/8365#issuecomment-878288640,4,['optimiz'],['optimized']
Performance,"This is to avoid crashes on 32-bit platforms. It's not necessary to use; 64-bit integers anyway, because the return types of the caching codes; were `Int_t` anyway (now just int). And since caches are never part of; IO anyway, it's not important to be platform independent. For the UniqueId, using `unsigned long` is fine too, because the unique; ID is transient and therefore doesn't need to be platform independent.; Any fixed-size choice here caused either problems on either 32- or; 64-bit platforms. This fixes crashes in the nightly builds on Debian 10 32-bit, which was verified on the Debian 10 build node.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10349:190,cache,caches,190,https://root.cern,https://github.com/root-project/root/pull/10349,1,['cache'],['caches']
Performance,"This is useful for external users to specify a writable modules cache path where the global module index can be generated on demand. This patch should resolve an issue in cmssw where the default module cache path (ROOTSYS/lib) is in a non-writable area in cvmfs. cc: @oshadura, @davidlange6",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5100:64,cache,cache,64,https://root.cern,https://github.com/root-project/root/pull/5100,2,['cache'],['cache']
Performance,"This is what I meant with:. > We should always have an up-to-date build from `master`, so this shouldn't be a problem in practice. Plus it generates a race condition between the build on `master` and any PR build. Ole's argument is that we may want incremental builds in PRs (between pushes), but I currently don't see this implemented and I'm not sure if this is actually a good idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12201#issuecomment-1417728784:151,race condition,race condition,151,https://root.cern,https://github.com/root-project/root/pull/12201#issuecomment-1417728784,1,['race condition'],['race condition']
Performance,"This is what my debugger shows before it freezes:. ![image](https://user-images.githubusercontent.com/10653970/108070249-4bf5ae80-7032-11eb-9f35-124c473c0521.png). It looks as if the Selected(Int_t) signal argument (integer) is being passed as a string?. I was able to reproduce the crash isolatedly in a ROOT terminal:. ```; const char* cs = reinterpret_cast<const char*>(0x1);; strlen(cs); #0 0x00007fa539040457 in __GI___waitpid (pid=20783, stat_loc=stat_loc; entry=0x7ffc922ae768, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:30; #1 0x00007fa538fab177 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:149; #2 0x00007fa539d4d5c4 in TUnixSystem::Exec (this=0x55bdc96f17c0, shellcmd=0x55bdca31f240 ""/opt/root_bld/etc/gdb-backtrace.sh 20254 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2120; #3 0x00007fa539d4de75 in TUnixSystem::StackTrace (this=0x55bdc96f17c0) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2411; #4 0x00007fa532b992f1 in TCling__PrintStackTrace () at /opt/root_src/core/metacling/src/TCling.cxx:324; #5 0x00007fa532cecc2b in TClingCallbacks::PrintStackTrace (this=0x55bdc9c9adc0) at /opt/root_src/core/metacling/src/TClingCallbacks.cxx:921; #6 0x00007fa532d5dfc8 in cling::MultiplexInterpreterCallbacks::PrintStackTrace() () from /opt/root_bld/lib/libCling.so; #7 0x00007fa532d5d902 in cling_runtime_internal_throwIfInvalidPointer () from /opt/root_bld/lib/libCling.so; #8 0x00007fa53a595075 in ?? (); #9 0x00007ffc922b0b70 in ?? (); #10 0x00007fa532b99375 in TCling__ResetInterpreterMutex () at /opt/root_src/core/metacling/src/TCling.cxx:351; #11 0x00007fa532ddb133 in cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const () from /opt/root_bld/lib/libCling.so; #12 0x00007fa532d5fcf0 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) () from /opt/root_bld/lib/libCling.so; #13 0x00007fa532d60d58 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::cha",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7195#issuecomment-779844279:597,optimiz,optimized,597,https://root.cern,https://github.com/root-project/root/issues/7195#issuecomment-779844279,1,['optimiz'],['optimized']
Performance,"This is work done by Alex Saperstein, and ANL SULI who worked with me. While working on TTreeCache learning, our Summer Intern (Alex Saperstein) observed that for simple TTrees, the basket size optimization isn’t optimal for two reasons: 1) rounding down to 512 byte blocks 2) neglecting to accommodate for ROOT offsets stored in the baskets. As a result, e.g. with simple (constant size) float array branches the basket size is to small resulting in two baskets per auto-flush. The change would be pretty straight-forward: tree/tree/src/TTree.cxx. Line; -6583 newBsize = newBsize - newBsize%512;. Should become:; +6583 if (pass) { // only on the second pass so that it doesn't interfere with scaling; +6583 Int_t nevbuf = branch->GetBasket(0)->GetNevBuf();; +6583 newBsize = newBsize + (nevbuf \* sizeof(Int_t) \* 2); // make room for meta data; +6583 newBsize = newBsize - newBsize%512 + 512; // rounds up; +6583 }. Tests on simple data show that with this the baskets end up more appropriately sized so that all the auto-flush data fits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/238:194,optimiz,optimization,194,https://root.cern,https://github.com/root-project/root/pull/238,1,['optimiz'],['optimization']
Performance,"This issue is fixed by migrating to the new-style buffer interface:. ```cpp; if (PyObject_CheckBuffer(pyobject)) {; Py_buffer bufinfo;; memset(&bufinfo, 0, sizeof(Py_buffer));; ```; ; Where we update the check to perform ; ```cpp; if (check && bufinfo.itemsize != size); ```; determine incompatibility between the bit size of declared nd.array dtypes and the subscripted type in `cppyy.gbl.std.vector('type')` in CPyCppyy/src/Utility.cxx. @vepadulano",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12230#issuecomment-1940884154:213,perform,perform,213,https://root.cern,https://github.com/root-project/root/issues/12230#issuecomment-1940884154,1,['perform'],['perform']
Performance,"This issue is very case-dependent.; When trying to calculate memory usage, normally the actual free memory on the system is `free + buffer + cached `. If shared memory usage is high (e.g mmaping a big cache) the calculation is slightly different:; `(free + buffer/cache) - shared`. The author of **htop** mentions on [this](https://stackoverflow.com/questions/55090900/how-can-i-calculate-memory-utilisation-of-a-linux-server-using-sar-report) question that htop uses this convention(in 2016):. - Total used memory = MemTotal - MemFree; - Non cache/buffer memory = Total used memory - (Buffers + Cached memory). Now htop (managed by htop-dev) uses this (on https://github.com/htop-dev/htop/blob/main/linux/LinuxMachine.c#L210):. ```; const memory_t usedDiff = freeMem + cachedMem + sreclaimableMem + buffersMem;; host->usedMem = (totalMem >= usedDiff) ? totalMem - usedDiff : totalMem - freeMem;; ```. This issue intends to merge the total used memory to include cached instead of just free which isn't strictly a correct solution. I have implemented the current approach utilised by **htop** which includes the following fields to calculate `MemUsed`, `MemAvailable` and `SwapUsed`:. ```; Int_t fMemAvailable; // available RAM in MB; Int_t fMemCached; // cached RAM in MB; Int_t fMemBuffer; // buffer RAM in MB; Int_t fMemShared; // shared RAM in MB; Int_t fSwapCached; // cached swap in MB; Int_t fSReclaimable // slab that might be reclaimed; ```; Fixed in ; - https://github.com/root-project/root/pull/14695",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7196#issuecomment-1941955488:141,cache,cached,141,https://root.cern,https://github.com/root-project/root/issues/7196#issuecomment-1941955488,9,"['Cache', 'cache']","['Cached', 'cache', 'cached', 'cachedMem']"
Performance,This looks good indeed. That would leave (at some point) to understand the difference in memory/time cost of always loading/connecting all the modules vs loading (some version of) the rootmap files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/543#issuecomment-298660248:116,load,loading,116,https://root.cern,https://github.com/root-project/root/pull/543#issuecomment-298660248,2,['load'],['loading']
Performance,This looks like a nasty mix of runtime reflection information and IO (we use TEmulatedTuple to abstract from implementation details of the tuple class in the stl to perform IO in a simple way). @pcanal would you be able to suggest a path to improve the current situation?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8875#issuecomment-2076689182:165,perform,perform,165,https://root.cern,https://github.com/root-project/root/issues/8875#issuecomment-2076689182,1,['perform'],['perform']
Performance,"This makes all functions end up in the same text section, which is important for TCling on macOS to catch exceptions from constructors: Stack unwinding requires information about program addresses to find out which objects to destroy and what code should be called to handle the exception. These addresses are relocated against a single __text section when loading the produced MachO binary, which breaks if the call sites of global constructors end up in a separate init section. Fixes ROOT-10703 and ROOT-10962. (cherry picked from commit 028fcca0fa76111877751df876cf13968be602f9)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12069:357,load,loading,357,https://root.cern,https://github.com/root-project/root/pull/12069,1,['load'],['loading']
Performance,"This makes all functions end up in the same text section, which is important for TCling on macOS to catch exceptions from constructors: Stack unwinding requires information about program addresses to find out which objects to destroy and what code should be called to handle the exception. These addresses are relocated against a single __text section when loading the produced MachO binary, which breaks if the call sites of global constructors end up in a separate init section. Fixes ROOT-10703 and ROOT-10962. (cherry picked from commit 028fcca0fa76111877751df876cf13968be602f9). Backport of PR https://github.com/root-project/root/pull/12069",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12105:357,load,loading,357,https://root.cern,https://github.com/root-project/root/pull/12105,1,['load'],['loading']
Performance,"This makes all functions end up in the same text section, which is important for `TCling` on macOS to catch exceptions from constructors: Stack unwinding requires information about program addresses to find out which objects to destroy and what code should be called to handle the exception. These addresses are relocated against a single `__text` section when loading the produced MachO binary, which breaks if the call sites of global constructors end up in a separate init section. Fixes ROOT-10703 and ROOT-10962",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7100:361,load,loading,361,https://root.cern,https://github.com/root-project/root/pull/7100,1,['load'],['loading']
Performance,"This makes it possible to create a pre-downloaded cache before running the tests, so that it is possible to run the tests in an environment without network access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/404:50,cache,cache,50,https://root.cern,https://github.com/root-project/root/pull/404,1,['cache'],['cache']
Performance,"This may break loading PyROOT *from* ROOT, however, since Python would also need to be loaded.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3396#issuecomment-461615276:15,load,loading,15,https://root.cern,https://github.com/root-project/root/pull/3396#issuecomment-461615276,2,['load'],"['loaded', 'loading']"
Performance,"This memory leak is demonstrated with the following ROOT macro:. ```; {; {; RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call); cout << ""make ws"" << endl;; RooWorkspace w(""combined"", ""combined"");; cout << ""factory method:"" << endl;; w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");; w.writeToFile(""/tmp/test.root"");; cout << ""reading back"" << endl;; {; TFile f(""/tmp/test.root"");; RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");; std::cout << ""deleting w2"" << endl;; delete w2;; }; std::cout << ""deleting w"" << endl;; }; }; ```; along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```; Processing test.C...; Created 0x12cb8cc68 <--- this is the static instance; make ws; Created 0x7ffee2baaab0 <--- the workspace's cache; factory method:; reading back; Created 0x7fcbc7b39008 <--- the read-back workspace's cache; Created 0x7fcbd45a0b70 <--- memory leaking cache; deleting w2; Destroyed 0x7fcbc7b39008; deleting w; Destroyed 0x7ffee2baaab0; root [1] .q; Destroyed 0x12cb8cc68; ```. After the fix caches are created and destroyed as expected:. ```; Processing test.C...; Created 0x1290a5c68; make ws; Created 0x7ffee623eab0; factory method:; reading back; Created 0x7f9bd8437408; deleting w2; Destroyed 0x7f9bd8437408; deleting w; Destroyed 0x7ffee623eab0; root [1] .q; Destroyed 0x1290a5c68; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12024:955,cache,cache,955,https://root.cern,https://github.com/root-project/root/pull/12024,4,['cache'],"['cache', 'caches']"
Performance,"This might be a solution. The point is that those things are loaded after cmake's defaults, but before the information is put to use. ### MyInitFlags.cmake; ```cmake; # Overwrite the init values choosen by CMake; if (CMAKE_CXX_COMPILER_ID MATCHES ""GNU""); set(CMAKE_CXX_FLAGS_DEBUG_INIT ""-ggdb3 -O0""); endif(); ```; ### CMakeLists.txt; ```cmake; set(CMAKE_USER_MAKE_RULES_OVERRIDE ""MyInitFlags.cmake""). project(your_project C CXX); ```. From [here](https://stackoverflow.com/questions/28732209/change-default-value-of-cmake-cxx-flags-debug-and-friends-in-cmake). An alternative, also from that post, is to check whether users tried to alter the variables. That's probably less work for ROOT's setup:; ```cmake. project(your_project C CXX). if (DEFINED CMAKE_CXX_FLAGS_DEBUG_INIT AND ; ""${CMAKE_CXX_FLAGS_DEBUG_INIT}"" STREQUAL ""${CMAKE_CXX_FLAGS_DEBUG}""); # Overwrite the init values choosen by CMake; if (CMAKE_CXX_COMPILER_ID MATCHES ""GNU""); set(CMAKE_CXX_FLAGS_DEBUG ""-ggdb3 -O0"" CACHE STRING """" FORCE); endif(); endif(); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6577#issuecomment-822378481:61,load,loaded,61,https://root.cern,https://github.com/root-project/root/issues/6577#issuecomment-822378481,2,"['CACHE', 'load']","['CACHE', 'loaded']"
Performance,This new release includes performance and stability improvements. See more at: https://github.com/vgvassilev/clad/releases/tag/v1.3,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14654:26,perform,performance,26,https://root.cern,https://github.com/root-project/root/pull/14654,1,['perform'],['performance']
Performance,"This one give a crash on Ubuntu:; ```; $ g++ pavelabel.cxx $(root-config --glibs --cflags --libs) -o pavelabel -g; $ ./pavelabel. *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f0abbc31c2a in __GI___wait4 (pid=1802850, stat_loc=stat_loc; entry=0x7ffd75e11aa8, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:27; #1 0x00007f0abbc31beb in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7ffd75e11aa8, options=options; entry=0) at waitpid.c:38; #2 0x00007f0abbba10e7 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:172; #3 0x00007f0abc5fc82e in TUnixSystem::StackTrace() () from /home/sftnight/couet/build/lib/libCore.so; #4 0x00007f0abc5f96b5 in TUnixSystem::DispatchSignals(ESignals) () from /home/sftnight/couet/build/lib/libCore.so; #5 <signal handler called>; #6 0x00007f0abc0edb04 in TPad::PaintBox(double, double, double, double, char const*) [clone .cold] () from /home/sftnight/couet/build/lib/libGpad.so; #7 0x00007f0abc203909 in TBox::PaintBox(double, double, double, double, char const*) () from /home/sftnight/couet/build/lib/libGraf.so; #8 0x00007f0abc24db3d in TPave::PaintPave(double, double, double, double, int, char const*) () from /home/sftnight/couet/build/lib/libGraf.so; #9 0x00007f0abc2517ad in TPaveLabel::PaintPaveLabel(double, double, double, double, char const*, char const*) () from /home/sftnight/couet/build/lib/libGraf.so; #10 0x00005635d042e337 in main (argc=1, argv=0x7ffd75e14b58) at pavelabel.cxx:13; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Pleas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6375#issuecomment-694316738:589,optimiz,optimized,589,https://root.cern,https://github.com/root-project/root/issues/6375#issuecomment-694316738,2,['optimiz'],['optimized']
Performance,This optimizes the ROOT startup for C++ Modules by avoiding deserialization of redundant declarations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2998:5,optimiz,optimizes,5,https://root.cern,https://github.com/root-project/root/pull/2998,1,['optimiz'],['optimizes']
Performance,This patch actually loads the modulemap as previously it wrongly detected; it was already loaded.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3695:20,load,loads,20,https://root.cern,https://github.com/root-project/root/pull/3695,2,['load'],"['loaded', 'loads']"
Performance,"This patch already landed in https://reviews.llvm.org/rL336660 in Clang. This was biting us to enable runtime modules in CMSSW. Detailed desciption:; https://bugs.llvm.org/show_bug.cgi?id=37878. lookupModule was falling back to loadSubdirectoryModuleMaps when it couldn't; find ModuleName in (proper) search paths. This was causing iteration over all; files in the search path subdirectories for example ""/usr/include/foobar"" in; bugzilla case. Users don't expect Clang to load modulemaps in subdirectories implicitly, and; also the disk access is not cheap. if (AllowExtraModuleMapSearch) true with ObjC with @import ModuleName.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2307:228,load,loadSubdirectoryModuleMaps,228,https://root.cern,https://github.com/root-project/root/pull/2307,2,['load'],"['load', 'loadSubdirectoryModuleMaps']"
Performance,This patch also reports the branch name when a class cannot be loaded by the importer to make debugging easier.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12019:63,load,loaded,63,https://root.cern,https://github.com/root-project/root/pull/12019,1,['load'],['loaded']
Performance,"This patch consolidates the symbol resolution facilities throughout TCling into; a new singleton class Dyld part of the cling's DynamicLibraryManager. The new dyld is responsible for:; * Symlink resolution -- it implements a memory efficient representation of; the full path to shared objects allowing search at constant time O(1). This; also fixes issues when resolving symbols from OSX where the system libraries; contain multiple levels of symlinks.; * Bloom filter optimization -- it uses a stohastic data structure which gives; a definitive answer if a symbol is not in the set. The implementation checks; the .gnu.hash section in ELF which is the GNU implementation of a bloom; filter and uses it. If the symbol is not in the bloom filter, the; implementation builds its own and uses it. The measured performance of the; bloom filter is 30% speed up for 2mb more memory. The custom bloom filter on; top of the .gnu.hash filter gives 1-2% better performance.; The advantage for the custom bloom filter is that it works on all; implementations which do not support .gnu.hash (windows and osx). It is also; customizable if we want to further reduce the false positive rates; (currently at p=2%).; * Hash table optimization -- we build a hash table which contains all symbols; for a given library. This allows us to avoid the fallback symbol iteration; if multiple symbols from the same library are requested. The hash table; optimization targets to optimize the case where the bloom filter tells us; the symbol is *maybe* in the library. Patch by Alexander Penev (@alexander-penev) and me!. Performance Report; ===. |platform|test|PCH-time|Module-time|Module-PR-time|; |:--------|:---|:---------:|:-----------:|:---------------|; |osx 10.14|roottest-python-pythonizations|22,82|26,89|20,08|; |osx 10.14| roottest-cling| 589,67|452,97|307,34|; |osx 10.14| roottest-python| 377,69|475,78|311,5|; |osx 10.14| roottest-root-hist| 60,59|90,98|49,65|; |osx 10.14| roottest-root-math| 106,18|140,41|73,96|",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4717:469,optimiz,optimization,469,https://root.cern,https://github.com/root-project/root/pull/4717,3,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,This patch enables the module file to mmap the rdict memory region before the; request to load it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3967:90,load,load,90,https://root.cern,https://github.com/root-project/root/pull/3967,1,['load'],['load']
Performance,"This patch includes:; - Remove existing modulemap.overlay files; Cling now can generate virtual overlay files on-demand.; - Implement `-modulemap_overlay` flag to Cling; This flag is used to tell Cling the location of modulemaps to be; overlayed. (eg. stl.modulemap, libc.modulemap); - Generate and load virtual modulemap in Cling; It is in Interpreter constructor, happens as part of cxxmodules; initialization step.; - Implement an interface to Clang CompilerInvocation which can take FileSystem pointer; Previously, Clang only took a ""string of filenames"" which clearly doesn't; work for our usecase. We already discussed this new interface at; modules meeting, so this change will land upstream.; - Add a file existence check in Clang; When compiling a pcm and when Clang saw the #include with which pcm was available; (or being generated implicitly), Clang was putting a notation of the full path to this pcm.; This caused an error when build directory was deleted, because the path didn't exist anymore. This patch enables modules to be binary distributed, and to make it; work in CMSSW enviroment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3267:299,load,load,299,https://root.cern,https://github.com/root-project/root/pull/3267,1,['load'],['load']
Performance,"This patch reduces loaded libraries to half, nearly the same amount of pch's.; ; What I did is:; 1. Change DeclCollector and Transaction to collect clang::Decls, not; clang::Modules so that we still have decls information after finishing; deserialization.; 2. In TClingCallbacks, we check if the decl is ""isUsed()"" or not. If; not, we don't want to load corresponding libararies. ```; w/o; yuka@yukadesk:~/module-release$ lsof -p 25477 | grep so | wc -l; 88; with; yuka@yukadesk:~/module-release$ lsof -p 23676 | grep so | wc -l ; 37. PCH; yuka@yukadesk:~/root-release$ lsof -p 9664 | grep so | wc -l; 32. w/o; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.08 seconds Cpu Time = 0.07 seconds; (TFile *) 0x5563018a1d30; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 1.524314 seconds; sys time = 0.157075 seconds; res memory = 546.867 Mbytes; vir memory = 895.184 Mbytes. with; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.05 seconds Cpu Time = 0.05 seconds; (TFile *) 0x55c8a399bfa0; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 0.371789 seconds; sys time = 0.069116 seconds; res memory = 273.5 Mbytes; vir memory = 461.43 Mbytes. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2009:19,load,loaded,19,https://root.cern,https://github.com/root-project/root/pull/2009,2,['load'],"['load', 'loaded']"
Performance,"This patch reimplemented signal handling in CMSSW. It avoids async-unsafe functions in signal handler. For reference, see the link https://github.com/bbockelm/cmssw/blob/stacktrace_handler_revisit/FWCore/Services/src/InitRootHandlers.cc. I tried this patch with some simple multi-thread test cases and it worked fine. Is there any complicated test cases I can run? I think this patch is not very ready to merge, but it achieved basic functions. Any criticisms are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/96:274,multi-thread,multi-thread,274,https://root.cern,https://github.com/root-project/root/pull/96,1,['multi-thread'],['multi-thread']
Performance,This patch seems to be a good performance enhancement (skipping some work that will not be used) but I am confused on how it helps with the increase in autoloading as I would have expected that in the case where this patch is active (i.e. autoloading is disabled) the net effect would have been the same (i.e. autoloading not activated). What am I missing?. i.e. this patch looks good to me as-is but does not seem to fully address the problem.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287#issuecomment-1864902070:30,perform,performance,30,https://root.cern,https://github.com/root-project/root/pull/14287#issuecomment-1864902070,1,['perform'],['performance']
Performance,"This prevents certain ugly error messages in case an exception is; thrown during a multi-thread event loop: before this patch, in that; case the thread's slot number was never returned to the RSlotStack; and it could result in some misleading error messages being printed on; screen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6601:83,multi-thread,multi-thread,83,https://root.cern,https://github.com/root-project/root/pull/6601,2,['multi-thread'],['multi-thread']
Performance,"This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in; addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same; STL collection (this is supported) and we have the following sequence of operation:. 1. load library A; 2. load library B (dictionary registration is ignored as intended); 3. request TClass for STL collection.; 4. unload (dclose) library B; 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL; collection to be marked as ""unloaded"" even though it library (A); was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed; from memory on first use and thus if the library was closed and re-opened/loaded; we no longer had the information needed to restore the TClass object corresponding; to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12863:270,load,loaded,270,https://root.cern,https://github.com/root-project/root/pull/12863,8,['load'],"['load', 'loaded', 'loading']"
Performance,"This problem is blocking ATLAS in adopting ROOT 6.28.x in production. . We use an ATLAS specific pyROOT script 'diff-root' that compares AODs branch-by-branch in our CI and integration tests that is not working in ROOT 6.28.x with the symptoms described above. The original error message of this script is:. ```; [..]; Py:diff-root INFO comparing [2932] leaves over entries...; IncrementalExecutor::executeFunction: symbol '_ZNSt7__equalILb0EE5equalIPKN4xAOD28CaloClusterBadChannelData_v1ES5_EEbT_S6_T0_' unresolved while linking symbol '__cf_295'!; You are probably missing the definition of bool std::__equal<false>::equal<xAOD::CaloClusterBadChannelData_v1 const*, xAOD::CaloClusterBadChannelData_v1 const*>(xAOD::CaloClusterBadChannelData_v1; const*, xAOD::CaloClusterBadChannelData_v1 const*, xAOD::CaloClusterBadChannelData_v1 const*); Maybe you need to load the corresponding shared library?; cling JIT session error: Failed to materialize symbols: { (main, { _ZSteqISt6vectorIN4xAOD28CaloClusterBadChannelData_v1ESaIS2_EESaIS4_EEbRKS0_IT_T0_ESA_ }) }; IncrementalExecutor::executeFunction: symbol '_ZNSt7__equalILb0EE5equalIPK20TrigRoiDescriptor_p3S4_EEbT_S5_T0_' unresolved while linking symbol '__cf_452'!; You are probably missing the definition of bool std::__equal<false>::equal<TrigRoiDescriptor_p3 const*, TrigRoiDescriptor_p3 const*>(TrigRoiDescriptor_p3 const*, TrigRoiDescriptor_p3 const*, Trig; RoiDescriptor_p3 const*); Maybe you need to load the corresponding shared library?; cling JIT session error: Failed to materialize symbols: { (main, { _ZN16__cppyy_internal8is_equalI30TrigRoiDescriptorCollection_p3S1_EEbRKT_RKT0_ }) }; cling JIT session error: Failed to materialize symbols: { (main, { _ZN16__cppyy_internal8is_equalI30TrigRoiDescriptorCollection_p3S1_EEbRKT_RKT0_ }) }; [..] ; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12406#issuecomment-1543771925:860,load,load,860,https://root.cern,https://github.com/root-project/root/issues/12406#issuecomment-1543771925,2,['load'],['load']
Performance,"This problem was solved by putting the Debian 10 machine to a colder place. The timeouts where caused by CPU throttling because the machine ran to hot. While investigating this issue, I figured out that we could also speed the tests up by using the `-O3` optimization flag (as in `Release` mode). The `RelWithDebInfo` build type that is used in the nightlies implies `-O2`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14306#issuecomment-1886686200:255,optimiz,optimization,255,https://root.cern,https://github.com/root-project/root/issues/14306#issuecomment-1886686200,1,['optimiz'],['optimization']
Performance,"This pull request adds an intermediate buffering mode between ""normal ROOT IO"" and the prefetching system. When enabled, it will cache a remote file to the local disk (uses the same logic as prefetching to determine what is ""remote"") for as long as it is opened and automatically cleans up afterward. This is useful in cases where you want to hide the effects of network latency (for various use cases which work poorly with `TTreeCache`, such as when an unpredictable set of branches are used or non-sequential scans) but do not want to set aside a directory to use as a persistent cache or have a cache-unfriendly workflow. The approach has been ported from CMSSW (there, it is called `lazy-download`) where it has been in use for several years.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/146:129,cache,cache,129,https://root.cern,https://github.com/root-project/root/pull/146,4,"['cache', 'latency']","['cache', 'cache-unfriendly', 'latency']"
Performance,"This pull request adds support for the concatenation of RNTuple pages into 'cages' that are then written to, and read from, DAOS containers as a single value of the key-value object store under the same attribute key, thus the smallest addressable unit. Pages from the same page-group are concatenated in the order they are handled on the DAOS side through vector I/O from the sealed pages' buffers. The name 'cage' is a portmanteau of ""concatenated pages"" and suggests the fact that pages caged together must be read together in DAOS. This change emancipates the DAOS backend from the original, on-disk ntuple page size. The option to concatenate sealed and buffered pages avoids unnecessary throughput constraints caused by the original page size (e.g., the on-disk default, 64KiB, generally leads to lower performance than pages an order of magnitude larger, e.g. 1MiB), particularly if the pattern of data analysis is based on reading back entire page-group ranges at once. On the other hand, this change ties the reader to the new, concatenated sizes; in DAOS key-value stores, it is impossible to read only a part of the value. It is important that the cage size limit be set adequately for the use-case during writing to DAOS. ## Changes or fixes:. - `RNTupleWriteOptions` provides a way to `SetMaxCageSize()` (default: caging enabled with 1 MiB cages), the maximum size a concatenation of pages from the same page-group can achieve.; - `RPageSinkDaos::CommitSealedPageVImpl()` maps pages from the same page-group to the same attribute key, thus concatenating them on the DAOS-side (i.e. relies on scatter-gathered I/O) until the cage limit is reached. The cage sizes can vary due to page compression and the length of page-groups, thus it is calculated and stored to be referenced when reading back.; - `RWOperation` is generalized to allow many IOVs associated with one attribute key in a request, enabling the non-contiguous buffers of sealed pages to be aggregated into a cage under the sam",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11466:693,throughput,throughput,693,https://root.cern,https://github.com/root-project/root/pull/11466,2,"['perform', 'throughput']","['performance', 'throughput']"
Performance,"This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:; ```c++; virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);; void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);; ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:; - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId.; The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation.; - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range; via `CommitSealedPageV()`.; - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10775:658,throughput,throughput,658,https://root.cern,https://github.com/root-project/root/pull/10775,2,"['optimiz', 'throughput']","['optimized', 'throughput']"
Performance,This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:; - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12637:120,multi-thread,multi-threading,120,https://root.cern,https://github.com/root-project/root/pull/12637,1,['multi-thread'],['multi-threading']
Performance,"This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage.; - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. ; - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results); - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once.; - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10860:722,Load,LoadClusters,722,https://root.cern,https://github.com/root-project/root/pull/10860,2,"['Load', 'perform']","['LoadClusters', 'performance']"
Performance,This pull request has a lot of useful information. The current infrastructure is flexible and can disable rootpcms if required for further performance studies. Let's close this now and come back to it if necessary.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-851627675:139,perform,performance,139,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-851627675,1,['perform'],['performance']
Performance,"This pull request is the result of work done by David Clark as a summer intern at Argonne:; To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. This change will prevent additional reads from occurring when reading events out of sequence.; ; By setting the `MaxVirtualSize` of the tree to a negative value, entire clusters will be loaded into memory and previous clusters will be retained - the absolute value of `MaxVirtualSize` indicates how many additional clusters will be kept in memory.; ; If `TTree MaxVirtualSize` is set to a negative value, `GetEntry()` will load the entire cluster into memory, not just the first basket. `GetBasket()` is modified to call a new function `GetFreshCluster()` if `MaxVirtualSize` is negative. This function is responsible for returning a new basket and clearing out clusters from memory. Because clusters can have varying numbers of baskets, `GetFreshCluster()` reuses the first basket and clear the rest of the baskets. Reusing all baskets may be more efficient, but adds significant complexity and would not affect the typical case where each cluster only contains a single basket (all the baskets will be reused here).; ; To test the performance of the change, I read 1000 entries (about 1 GB) from a tree of randomly generated data consisting of 2000 branches. Every read had a 2.5% chance of reading 10 entries back or a 2.5% chance of reading 10 entries forward from the current entry. - Without the change enables there were 1.5 GB read in 31102 read calls. ; - With MaxVirtualSize set to -1, there were 1.1 GB read in 90 read calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/796:107,multi-thread,multi-threaded,107,https://root.cern,https://github.com/root-project/root/pull/796,4,"['load', 'multi-thread', 'perform']","['load', 'loaded', 'multi-threaded', 'performance']"
Performance,This pull request provides a bug fix:. - fixing wrong safety in TGeoParallelWorld due to double application of coordinate transformation) ; - fix a crash in VoxelFinder when we have only 1 primitive. as well as some optimizations for TGeoPallelWorld usage:. - call TGeoParallelWorld::Safety with existing limit from normal safety to speedup search; - make TGeoPhysicalNode::IsMatchingState faster,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16425:216,optimiz,optimizations,216,https://root.cern,https://github.com/root-project/root/pull/16425,1,['optimiz'],['optimizations']
Performance,"This pull request provides a page allocator that caches previous allocations up to a certain limit. The cache is thread-local and defaults to 16 pages per thread (~1MiB per thread for default-sized pages). This PR is largely based on the concepts in #8634. Reuse of memory allocations in `RPageAllocatorCache` not only reduces calls to the global allocator but also heap fragmentation. The global allocator is thread-safe albeit locked; thus, to also reduce contention, the cache in `RPageAllocatorCache` is thread-local.; Given the small size of the (per-thread) cache, the internal structure is a simple `std::deque`. Anything more complex is not justified at the moment of this writing. . **NOTE:** Performance evaluation (specially for the multi-threaded case) should be inserted here tomorrow. ## Changes or fixes:; - Add `RPageAllocatorCache`: this templated allocator returns pages that have at least the required capacity. `DeletePage()` does not immediately deallocate memory; instead, pages are returned to a thread-local cache, dropping the smallest allocated buffer if the cache is full. If a previous page cannot be recycled, the underlying allocator `AllocT` (`RPageAllocatorHeap` by default) is used to allocate memory.; - Change the signature of `RPageSource::UnsealPage()`: `SealPage()`, the counterpart of `UnsealPage()` takes an RPage and returns an RSealedPage. Make the interface of `UnsealPage()` symmetric and return an RPage.; - Make `UnsealPage()` use `RPageAllocatorCache` by default.; - Remove stray `RPageAllocator{File,Daos}` classes. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR supersedes #8634.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12279:49,cache,caches,49,https://root.cern,https://github.com/root-project/root/pull/12279,8,"['Perform', 'cache', 'multi-thread']","['Performance', 'cache', 'caches', 'multi-threaded']"
Performance,This pull request simplifies the implementation of `RPageSourceDaos::LoadClusters()` as a prior step to handling the population of the page zero. A follow-up PR factors out common code for handling `kTypePageZero` locators in storage backends + enables their population in the DAOS backend. ## Checklist:; - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13381:69,Load,LoadClusters,69,https://root.cern,https://github.com/root-project/root/pull/13381,1,['Load'],['LoadClusters']
Performance,"This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip; threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12044:569,queue,queue,569,https://root.cern,https://github.com/root-project/root/pull/12044,1,['queue'],['queue']
Performance,"This pull requests adds additional functionality to RDF Define in c++ in order to facilitate new features via pythonization. New features in c++:; - more flexibility in template arguments in order to allow argument and return types to be specified independently of the callable type (this means types don't have to match exactly and implicit conversions between float and double, etc are possible); (Specification of Define result type independent from inferred function return type may facilitate future optimizations related to suppressing dynamic memory allocation.); - support for callables with overloaded operator() as long as argument types are explicitly specified; - reduced copying/moving of callable. New features from pythonization of Define:; - support for free functions, static class member functions, and bound class member functions, with or without additional template arguments, and compatible with overloaded functions transparently from pyroot.; - support for expression strings, and a complete lambda expression passed as a string; - automatic inference of types from the graph (which don't have to exactly match the callable argument types as long as implicit conversion is available); - automatic inference of column names from callables in case column names are not explicitly provided (but only when available and unambiguous); - all variations are jitted with fully templated types for maximum possible inlining. given the following defined in c++; ```cpp; float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>; T squared(T x) { return x*x; }. float squared2(float x) { return x*x; }. double squared2(double y) { return y*y; }. class Callable {; public:; float operator() (float x) { return x*x; }; double operator() (double x) { return x*x; }. template<typename T>; T operator() (T x) { return x*x; }. float squared(float x) { return x*x; }. double squared(double x) { return x*x; }. template<typename T>; T squared(T x) { r",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9174:505,optimiz,optimizations,505,https://root.cern,https://github.com/root-project/root/pull/9174,1,['optimiz'],['optimizations']
Performance,"This pull-request adds new write performance counters to the file/DAOS backends:; - fSzWritePayload: that keeps track of the total volume written in committed pages.; - fSzZip: volume before zipping; - fTime{Wall,Cpu}Zip: that measure the wall clock/cpu time spent compressing. This suffices to compute the actual write throughput, where needed. Closes issue #8283.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8328:33,perform,performance,33,https://root.cern,https://github.com/root-project/root/pull/8328,2,"['perform', 'throughput']","['performance', 'throughput']"
Performance,"This pull-request extends `RPageSink` and `RPageSource` to provide a common set of performance counters that can be enabled in a subclass via `EnableDefaultMetrics()`. Afterward, the set might be extended in a subclass via a call to `fMetrics.MakeCounter<...>()`. This not only removes boilerplate code from subclasses, but also provides a useful set of regular/computed counters. A subclass, however, is still responsible for updating the base counters. Alternatively, subclasses may still ignore the default set of metrics and provide their own `RNTupleMetrics` object by overriding the `GetMetrics()` member function. Closes issue #8360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8397:83,perform,performance,83,https://root.cern,https://github.com/root-project/root/pull/8397,1,['perform'],['performance']
Performance,"This pull-request extends the support in `RClassField` to load/store arbitrary types by correctly handling inheritance. See below for the list of changes. ## Changes or fixes:; - An internal subfield named `:XXX` is created for each inherited `XXX` class; additional fields are recursively generated for data members/base classes.; - Reading/writing an object of the derived class includes both, direct and inherited data members. Non-persistent data members, i.e. `//!`, are not stored. This PR closes issue #7856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8552:58,load,load,58,https://root.cern,https://github.com/root-project/root/pull/8552,1,['load'],['load']
Performance,"This reduces the time required by jitting dramatically in many common scenarios, as we do not need a different template specialization of types that are expensive to instantiate for each Define or Filter expression. Performance measurements available [here](https://indico.cern.ch/event/909884/)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5329:216,Perform,Performance,216,https://root.cern,https://github.com/root-project/root/pull/5329,1,['Perform'],['Performance']
Performance,"This reverts commit 5298b418eec4129351888f41cb7c3bfc90161e22. This commit was mistakenly committed. PR was opened in #1730, but it was; closed and moved to #1761. I didn't notice this and created another PR; in #1980. This change was causing 100+ failures in runtime cxxmodules nightlies.; (Eg. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29183/testReport/junit/projectroot/runtutorials/tutorial_fit_FittingDemo/); We want to have **proper** PrebuildModulesPaths which information were; extracted from LD_LIBRARY_PATH and DYLD_LIBRARY_PATH, not a random ""."". Because of this commit, we were trying to autoload libraries generated; by roottest on-demand (for example ""./h1analysisTreeReader_C.so"") This; is not an intentional behavior, these autogenerated libraries are; already loaded by roottest and what we want to do is to load **proper**; libraries like libHist.so instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2160:792,load,loaded,792,https://root.cern,https://github.com/root-project/root/pull/2160,2,['load'],"['load', 'loaded']"
Performance,"This seems to be due to an inconsistent build (at least with the instruction given). The commit mentioned increases the size of `TGenericClassInfo`. The crash happens because at the destruction of a `TGenericClassInfo` object has its internal are garbled:; ```; #0 0x00007ffff639406b in ROOT::TGenericClassInfo::~TGenericClassInfo (; this=0x7fffd2e50d20 <ROOT::GenerateInitInstanceLocal(std::vector<HFShowerLibraryEventInfo, std::allocator<HFShowerLibraryEventInfo> > const*)::instance>, __in_chrg=<optimized out>); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.29.01-13ee096080b2ed8565e449c6c0dc4529/root-6.29.01/core/meta/src/TGenericClassInfo.cxx:223; #1 0x00007ffff6ad526c in __run_exit_handlers () from /lib64/libc.so.6; ```; ```; (gdb) p *this; .....; fAlternate = {<std::_Vector_base<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >> = {; _M_impl = {<std::allocator<ROOT::TClassAlt*>> = {<__gnu_cxx::new_allocator<ROOT::TClassAlt*>> = {<No data fields>}, <No data fields>}, <std::_Vector_base<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >::_Vector_impl_data> = {_M_start = 0x1, _M_finish = 0x0, _M_end_of_storage = 0x0}, <No data fields>}}, <No data fields>}}; ```. This garbling (the `_M_start = 0x1`) happens here:; ```; Hardware watchpoint 5: *(long*)0x7fffd2e50e20. Old value = 0; New value = 1; __cxxabiv1::__cxa_guard_release (; g=0x7fffd2e50e20 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<HFShowerLibraryEventInfo, std::allocator<HFShowerLibraryEventInfo> > const*)::instance>); at ../../../../libstdc++-v3/libsupc++/guard.cc:432; 432 ../../../../libstdc++-v3/libsupc++/guard.cc: No such file or directory.; (gdb) bt; #0 __cxxabiv1::__cxa_guard_release (; g=0x7fffd2e50e20 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<HFShowerLibraryEventInfo, std::allocator<HFShowerLibraryEventInfo> > const*)::instance>); at ../../../../libstdc++-v3/libsupc++/guard.cc:432; #1 0x00007fffd2e3dba8 in RO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12957#issuecomment-1585135652:499,optimiz,optimized,499,https://root.cern,https://github.com/root-project/root/issues/12957#issuecomment-1585135652,1,['optimiz'],['optimized']
Performance,"This sequence is triggered in a case where a dictionary for requested twice for the same class and upon loading the 2nd library, a Warning is being issued about the duplicated dictionary. While setting up in order to print, the initialization `gROOT` is triggered and this includes the loading of the `rootmap files` which in turns warning about the (same) class being listed in 2 distinct `rootmap` files. ```; #0 0x00007f586472654d in __lll_lock_wait () from /lib64/libpthread.so.0; #1 0x00007f5864721e9b in _L_lock_883 () from /lib64/libpthread.so.0; #2 0x00007f5864721d68 in pthread_mutex_lock () from /lib64/libpthread.so.0; #3 0x00007f5865797806 in DebugPrint(char const*, ...) () from /cvmfs/[cms.cern.ch/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_4_8/external/slc7_amd64_gcc10/lib/libCore.so](http://cms.cern.ch/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_4_8/external/slc7_amd64_gcc10/lib/libCore.so); #4 0x00007f5865797abd in DefaultErrorHandler(int, bool, char const*, char const*) () from /cvmfs/[cms.cern.ch/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_4_8/external/slc7_amd64_gcc10/lib/libCore.so](http://cms.cern.ch/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_4_8/external/slc7_amd64_gcc10/lib/libCore.so); #5 0x00007f586584fb23 in ErrorHandler () from /cvmfs/[cms.cern.ch/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_4_8/external/slc7_amd64_gcc10/lib/libCore.so](http://cms.cern.ch/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_4_8/external/slc7_amd64_gcc10/lib/libCore.so); #6 0x00007f58657aa2cc in TObject::Warning(char const*, char const*, ...) const () from /cvmfs/[cms.cern.ch/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_4_8/external/slc7_amd64_gcc10/lib/libCore.so](http://cms.cern.ch/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_4_8/external/slc7_amd64_gcc10/lib/libCore.so); #7 0x00007f584695be33 in TCling::ReadRootmapFile(char const*, TCling::TUniqueString*) () from /cvmfs/[cms.cern.ch/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_4_8/external/slc7_amd64_gcc10/lib/libCling.so](http://cms.cern.ch/slc7_amd64_gcc10/cms/cmssw/CMSSW_12_4_8/external/slc7_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11383:104,load,loading,104,https://root.cern,https://github.com/root-project/root/issues/11383,2,['load'],['loading']
Performance,"This set of improvements to TBufferMerger (and more) was inspired by the terrible performance of the parallel merging (and fast merging in general) in the case where the TTree has a very large number of branches (1000+). Where in the original version a TBufferMerger with a file with 1000+ branches and only 50s and ran with any number of threads would take more than 3m (did not wait until the end) the new version takes 11s with 1 thread, 8s with 6 threads and 22s with 6 thread when increased to 500 events. (using the CMS file ../data//250202_181_RECO.root). This PR includes:. * skipping the boxing/compressing/uncompressing/unboxing cycle if the TBufferMerger is available (not already merging) when the thread is writing its TMemFile. * skipping SetBranchAddress and SetMakeClass in when doing fast cloning (where that information is not used anyway). * Replacing calling to the slow TObjArray::GetEntries (which *counts* the slot used) by calling GetEntriesFast. * Speeding up the GetMother implementation (caching parent's address sooner when reading, use that information in GetMother). * In fast cloning, delay writing the output until the last input is processed (instead of writing the output after each input),. * Optimization of fast cloning handing of empty write basket. It also contains a couple of bug fixes (RNtuple merging forgetting to merge the result of the objects in the file, iofeatures incorrectly cloned). Also made TBufferMerger::GetQueueSize actually thread safe (it is necessary to use it to stop the producer from adding more data if the queue is too full). Also improved TClass::GetBaseClassOffset parallelism (benefit parallel boxing/unboxing) and reduced/removed contention see in the mechanism use to determine the actual object type at run-time (TIsAProxy).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7286:82,perform,performance,82,https://root.cern,https://github.com/root-project/root/pull/7286,3,"['Optimiz', 'perform', 'queue']","['Optimization', 'performance', 'queue']"
Performance,"This should be fixed by:; - moving your code to a dictionary C++ modules (available in later ROOT versions); we can share the details on how to do that, please let me know! ; - splitting this into two dictionaries or even libraries, such that loading `MyClass` is independent of loading `OtherClass`. I realize that the second option is a workaround, but the modules *are* the propose solution here. Please let me know if we can close the issue!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10512#issuecomment-1148738184:243,load,loading,243,https://root.cern,https://github.com/root-project/root/issues/10512#issuecomment-1148738184,2,['load'],['loading']
Performance,"This should be landed with allmodules and library loading patch, closing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1835#issuecomment-388297331:50,load,loading,50,https://root.cern,https://github.com/root-project/root/pull/1835#issuecomment-388297331,2,['load'],['loading']
Performance,"This should be ready to go, with two performance optimizations (marked as TODOs) that are left for future PRs (this one is already terribly large, I think).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8770#issuecomment-1131388799:37,perform,performance,37,https://root.cern,https://github.com/root-project/root/pull/8770#issuecomment-1131388799,2,"['optimiz', 'perform']","['optimizations', 'performance']"
Performance,"This should fix issue #10353. Use a spin lock to protect gInlined. Also, use in-place lamba calls instead of checking at each call if the static was initialized.; In addition to the (slight) performance gain, this make those intialization thread safe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10369:191,perform,performance,191,https://root.cern,https://github.com/root-project/root/pull/10369,1,['perform'],['performance']
Performance,"This should fix the recent test failures seen in `gtest-tree-treeplayer-test-treetreeplayertestUnit`. Full lldb stack traces at https://codimd.web.cern.ch/s/QKEMHg5H1. # PR description. The test was dynamically allocating the array data members of the `Data` struct, but never deallocating them. This commit polishes the `Data` struct definition and ensures proper management of the data members. The previous way of writing data to the TTree was leading to a bad memory access in the ReadBasicPointer inlined function in TStreamerInfoReadBuffer.cxx while reading the `double*` array. In particular, the issue arises when accessing and then deallocating the array at the current index provided by the `TCompInfo` object. ```; Target 0: (repro.out) stopped.; (lldb); Process 13498 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = step in; frame #0: 0x00000001044cf140 libRIO.so`int TStreamerInfo::ReadBuffer<char**>(this=<unavailable>, b=<unavailable>, arr=<unavailable>, compinfo=<unavailable>, first=<unavailable>, last=<unavailable>, narr=<unavailable>, eoffset=<unavailable>, arrayMode=0) at TStreamerInfoReadBuffer.cxx:923:65 [opt]; 920 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kLong: ReadBasicPointer(Long_t); continue;; 921 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kLong64: ReadBasicPointer(Long64_t); continue;; 922 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kFloat: ReadBasicPointer(Float_t); continue;; -> 923 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kDouble: ReadBasicPointer(Double_t); continue;; 924 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kUChar: ReadBasicPointer(UChar_t); continue;; 925 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kUShort: ReadBasicPointer(UShort_t); continue;; 926 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kUInt: ReadBasicPointer(UInt_t); continue;; Target 0: (repro.out) stopped.; (lldb); Process 13498 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = step in; frame #0: 0x000000010",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16501:802,queue,queue,802,https://root.cern,https://github.com/root-project/root/pull/16501,1,['queue'],['queue']
Performance,This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6190:44,load,load,44,https://root.cern,https://github.com/root-project/root/pull/6190,2,['load'],"['load', 'loading']"
Performance,"This testSpecFuncSiCi failure is fixed after applying #2396, which enables the autoloading of libraries for ACLiC. The problem is that we were blindly putting libMathCore to ""need loading"" list for ACLiC, but now we have to get a proper callback from CompileMacro. We can try to land #2396, or we can do something like; ```; if (isACLiC); fInterpreter->Load(""libMathCore.so""); ```; in TCling or somewhere for workaround.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2854#issuecomment-434295309:180,load,loading,180,https://root.cern,https://github.com/root-project/root/pull/2854#issuecomment-434295309,2,"['Load', 'load']","['Load', 'loading']"
Performance,"This version still unfortunately fails with the stack trace below.; This is true even if I call `mytree->ResetBit(kMustCleanup);` right after creation in the Google test.; It did take ~1500 runs to fail, however.; ```; ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================. Thread 2 (Thread 0x7fbd8b86a700 (LWP 3468)):; #0 0x00007fbd8e6deb7b in __GI___waitpid (pid=3475, stat_loc=stat_loc; entry=0x7fbd8b863080, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29; #1 0x00007fbd8e6661eb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fbd8f7d1e1d in TUnixSystem::Exec (shellcmd=<optimized out>, this=0x111a4f0) at /home/amadio/src/root/core/unix/src/TUnixSystem.cxx:2118; #3 TUnixSystem::StackTrace (this=0x111a4f0) at /home/amadio/src/root/core/unix/src/TUnixSystem.cxx:2412; #4 0x00007fbd8f7d440c in TUnixSystem::DispatchSignals (this=0x111a4f0, sig=kSigSegmentationViolation) at /home/amadio/src/root/core/unix/src/TUnixSystem.cxx:3632; #5 <signal handler called>; #6 TList::Remove (this=this; entry=0x1134310, obj=obj; entry=0x7fbd8b865a90) at /home/amadio/src/root/core/cont/src/TList.cxx:705; #7 0x00007fbd8f7546be in THashList::Remove (this=0x1134310, obj=0x7fbd8b865a90) at /home/amadio/src/root/core/cont/src/THashList.cxx:289; #8 0x00007fbd900270ea in TFileMerger::~TFileMerger (this=0x7fbd8b865a90, __in_chrg=<optimized out>) at /home/amadio/src/root/io/io/src/TFileMerger.cxx:110; #9 0x00007fbd90001798 in ROOT::Experimental::TBufferMerger::WriteOutputFile (this=0x7ffcab4c96f0) at /home/amadio/src/root/io/io/src/TBufferMerger.cxx:63; #10 0x00007fbd8f1d3572 in ?? () from /usr/lib/gcc/x86_64-pc-linux-gnu/6.3.0/libstdc++.so.6; #11 0x00007fbd8e9c43f4 in start_thread (arg=0x7fbd8b86a700) at pthread_create.c:333; #12 0x00007fbd8e70f65f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:105. Thread ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/577#issuecomment-301754774:659,optimiz,optimized,659,https://root.cern,https://github.com/root-project/root/pull/577#issuecomment-301754774,2,['optimiz'],['optimized']
Performance,"This warning was first seen in rootbench:. ```c++; root-benchmark/BUILDTYPE/Release/COMPILER/gcc62/LABEL/performance-cc7/build/include/ROOT/TDFActionHelpers.hxx:745:34:; warning: parameter ‘slot’ set but not used [-Wunused-but-set-parameter]; void SetBranches(unsigned int slot, BranchTypes&... values, StaticSeq<S...> /*dummy*/); ^~~~; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1811:105,perform,performance-,105,https://root.cern,https://github.com/root-project/root/pull/1811,1,['perform'],['performance-']
Performance,This was detected by redundant loading on libRooStats when we are trying; to resolve _ZN5TTreeC1Ev. libRooStats contains it as an unresolved symbol; but the wrong flag checks did not filter it out. This patch should fix a few subtle test failures which fluctuate depending; on the linker optimizations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2764:31,load,loading,31,https://root.cern,https://github.com/root-project/root/pull/2764,2,"['load', 'optimiz']","['loading', 'optimizations']"
Performance,"This was first reported at: https://cdcvs.fnal.gov/redmine/issues/25615; with the error:; ```; Fatal Root Error: TBranchElement::InitializeOffsets; Could not find the real data member 'fOutputNames' when constructing the branch '4anab::MVADescriptions_emtrkmichelid_emtrkmichel_Reco1.obj' [Likely an internal error, please report to the developers].; ROOT severity: 6000; ```; during the creation of a branch. With a class like:; ```; class mystrarray {; public:; string fDataTag; ///< offset= 0 type=300 ,stl=365, ctype=365, Tag of the reco data products (art::InputTag format); string fOutputInstance; ///< offset= 32 type=300 ,stl=365, ctype=365, Instance name of the feature vector collection; string fOutputNames[4]; ///< offset= 64 type=320 ,stl=365, ctype=365, Feature vector entries names/meaning. static short Class_Version() { return 10; }; };; ```; creating any split branch containing this kind of object (or collection there of) will work fine. But if a file containing the `StreamerInfo` for `mystrarray` version 10 before loading the library containing its dictionary then the `StreamerInfo` from the file (since it has the same checksum has the one that would come from the dictionary info) is used. However, instead of; ```; root [1] TClass::GetClass(""mystrarray"")->GetStreamerInfo()->GetElement(2)->GetFullName(); (const char *) ""fOutputNames[4]""; ```; it produces:; ```; root [1] TClass::GetClass(""mystrarray"")->GetStreamerInfo()->GetElement(2)->GetFullName(); (const char *) ""fOutputNames""; ```; Which does not match the expectation of `TBranchElement::InitializeOffsets`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8033:1037,load,loading,1037,https://root.cern,https://github.com/root-project/root/issues/8033,1,['load'],['loading']
Performance,This was reported at https://github.com/art-framework-suite/art/issues/142 and is due to the combination of; (a) We do not generate dictionary for std::tuple instances (b) When TClass::GetClass is called it tries to load the dictonary until there is a full TClass object is in memory (c) The emulated std::tuple TClass are marked as 'not loaded' (d) Searching for the TClass for a templated class will cost memory (during the lookup of the instantiation). (e) TPluginManager::ExecPluginImpl was looking up the TClass for the typle `std::type< list of arguments>`. The lookup induced in (e) in the user's case (root built with runtime cxx module on) lead to some memory allocation in Clang while trying to find out if there was now a library or dictionary to load. This fixes #14199,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14200:216,load,load,216,https://root.cern,https://github.com/root-project/root/pull/14200,3,['load'],"['load', 'loaded']"
Performance,"This way, if another process requests the file from the cache while; the file is still being written/downloaded, it does not ""find"" it; and does not read an incomplete file. This should fix failures such as [these](https://github.com/root-project/root/pull/9495#issuecomment-1005637703) where multiple process (in this case multiple ROOT tests) require to cache the same file concurrently.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9479:56,cache,cache,56,https://root.cern,https://github.com/root-project/root/pull/9479,3,"['cache', 'concurren']","['cache', 'concurrently']"
Performance,This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1344:32,load,load,32,https://root.cern,https://github.com/root-project/root/pull/1344,1,['load'],['load']
Performance,"This will allow, in the future, to optimize loading of entries; from TDataSources: `GetColumnReaders` does not have to pass through; virtual calls to `TDataSource` anymore, which means that concrete; TDS's can provide custom, possibly lazy column readers which; TInterface will use directly. Concretely I would make this mechanism opt-in: TDataSources can still implement the usual `GetColumnReadersImpl` method, but if they implement `GetColumnReadersFast<T>` (better names are welcome) `TInterface` will switch to using that one.; `GetColumnReadersFast<T>` is not limited to returning `vector<void *>` but can return smart objects which behave like pointers but can perform e.g. callbacks to their TDataSource.; This basically allows `TDataSources` to implement a mechanism similar to `TTreeReader`/`TTreeReaderValue`, if required for performance reasons or in order to implement certain features.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1939:35,optimiz,optimize,35,https://root.cern,https://github.com/root-project/root/pull/1939,4,"['load', 'optimiz', 'perform']","['loading', 'optimize', 'perform', 'performance']"
Performance,"This will fail again (sorry for the mails @pcanal ). I need to double-check what RDF's behavior is with scalar values and vector weights for histogram fillings with/without histo models and with/without multi-threading. It looks like we have an inconsistency in how Histo1D with/without models treats that case (the former allows it, the latter does not).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11552#issuecomment-1279135184:203,multi-thread,multi-threading,203,https://root.cern,https://github.com/root-project/root/pull/11552#issuecomment-1279135184,1,['multi-thread'],['multi-threading']
Performance,"This work on the C++ tutorial really shows that we need a fake column with the entry number. If we agree, this would be easy to achieve thanks to the recent developments done for cache :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1131:179,cache,cache,179,https://root.cern,https://github.com/root-project/root/pull/1131,1,['cache'],['cache']
Performance,"This would allow CMSSW to build its third party modules by calling:. ```; rootcling bare-cling -xc++ -I${ROOTSYS}/etc -I ${headers_location}; -fmodules -Xclang -emit-module -fmodule-name=tinyxml2; -fmodules-cache-path=${CMSSW_LIBDIR} -o ${module_file_location}; ${headers_location}/module.modulemap; ```. This commit has several issues one is that it does not order the dependencies so if libc.pcm goes out of date the build system does not regenerate std.pcm. cc: @oshadura, @davidlange6, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5521:207,cache,cache-path,207,https://root.cern,https://github.com/root-project/root/pull/5521,1,['cache'],['cache-path']
Performance,"This. ```cpp; #include <TFile.h>; #include <TROOT.h>. void foo() {; // works; auto *f2 = TFile::Open(""~/Scratchpad/work/UnROOT_RDataFrame_MiniBenchmark/Run2012BC_DoubleMuParked_Muons.root"", ""READ_WITHOUT_GLOBALREGISTRATION"");; gROOT->GetListOfFiles()->Print();. // doesn't work; auto *f = TFile::Open(""root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root"", ""READ_WITHOUT_GLOBALREGISTRATION"");; gROOT->GetListOfFiles()->Print();; }; ```. yields. ```; Processing foo.cpp...; Collection name='Files', class='TList', size=0 // OK; Collection name='Files', class='TList', size=1 // KO; TFile: name=root://eospublic.cern.ch//eos/opendata/cms/derived-data/AOD2NanoAODOutreachTool/Run2012BC_DoubleMuParked_Muons.root, title=, option=READ; ```. i.e. the `READ_WITHOUT_GLOBALREGISTRATION` is ignored when using `TFile::Open` to read a file via xrootd. This might lead to unexpected performance degradation as well as use-after-deletes in some cases (e.g. a `TChain` with `kWithoutGlobalRegistration` uses `TFile::Open` to read a remote file, loads a tree (which will have the `kMustCleanup` bit reset by the `TChain`), then if the global list of files is cleaned before the `TChain` is destroyed the chain will have a dangling pointer to its `fFile` and `fTree`). This is likely not just an issue with xrootd files but all TFile implementations except the local.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10742:935,perform,performance,935,https://root.cern,https://github.com/root-project/root/issues/10742,2,"['load', 'perform']","['loads', 'performance']"
Performance,Those report are challenging to parse with a human eye (where does one report end and the next start). Also they seems to be sorted by source file (which is good we have enough effort to address all of them) rather than categories (which is good if we need to prioritize the functional error (using an object after deletion) over the performance one (unused assigned variable).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7426#issuecomment-794534333:334,perform,performance,334,https://root.cern,https://github.com/root-project/root/issues/7426#issuecomment-794534333,1,['perform'],['performance']
Performance,"Time/ms: 470; Chunk: 8 Time/ms: 531; Chunk: 9 Time/ms: 592; ```; (In contrast, if I use `std::cout` instead of `Printf`, every step is perfectly 50 ms). I found out that on line https://github.com/root-project/root/blob/a89eb12f83228833842813c4b690a2033778316b/core/thread/src/TThread.cxx#L1043, there is a timer being created, with a timeout of 20 ms, https://github.com/root-project/root/blob/a89eb12f83228833842813c4b690a2033778316b/core/thread/inc/TThread.h#L208. If I remove the `+ 10` ms and recompile ROOT, I get better results, (except for the first iteration):; ```; Chunk: 0 Time/ms: 0; Chunk: 1 Time/ms: 111; Chunk: 2 Time/ms: 161; Chunk: 3 Time/ms: 211; Chunk: 4 Time/ms: 262; Chunk: 5 Time/ms: 312; Chunk: 6 Time/ms: 362; Chunk: 7 Time/ms: 415; Chunk: 8 Time/ms: 469; Chunk: 9 Time/ms: 521; ```. ### Optional: share how it could be improved; It would be nice if there was a static method to tune the resolution of the `TThreadTimer` as well as the `TSystem::kITimerResolution` for applications requiring high performance, so that there is no 10ms (or 100ms at the beginning) delay due to a `Printf()` (or an` Emit()` for the signal-slot mechanism to communicate between threads). Right now, `ESysConstants::kItimerResolution` is not assignable at runtime, and `TThreadTimer` timeout is not configurable by the user, thus the only solution is a fork and recompile. ### To Reproduce. 1. cd /opt/ && git clone https://github.com/CLIUtils/CLI11; 2. Download [zdt2.zip](https://github.com/root-project/root/files/6744587/zdt2.zip) and unzip it, cd into it; 3. mkdir build && cd build; 4. cmake -DROOT_DIR=/build-debug-mode-ROOT -DCMAKE_BUILD_TYPE=Debug ../; 5. make; 6. gui/runGUI --prbs 26 -q. ### Setup; ```; ------------------------------------------------------------------; | Welcome to ROOT 6.25/01 https://root.cern |; | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 28 2021, 13:40:49 |; | From heads/th1_long@v6-25-01-1451-gaed0c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8582:3048,tune,tune,3048,https://root.cern,https://github.com/root-project/root/issues/8582,2,"['perform', 'tune']","['performance', 'tune']"
Performance,Timings reported [here](https://sft.its.cern.ch/jira/browse/ROOT-9468) show a factor 2 speedup for compilation and jitting of large snapshot calls (test was performed with 200 `int` columns).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2713#issuecomment-425431899:157,perform,performed,157,https://root.cern,https://github.com/root-project/root/pull/2713#issuecomment-425431899,1,['perform'],['performed']
Performance,"To Reproduce; * Create any workspace file with ROOT 5.34, eg.; ```; % root -b; ROOT 5.34/32 (v5-34-32@v5-34-32, Jul 28 2015, 17:41:47 on linuxx8664gcc); root [0] RooWorkspace w(""w"");; root [1] w.factory(""Gaussian::sigx(x[-10,10],m[0,-10,10],s[3,0.1,10])"");; root [4] w.writeToFile(""simplest-53432.root"");; ```; * Since it isn't easy to get ROOT 5.34 running on CentOS7 these days, I have saved some workspace files here:; * `/afs/cern.ch/user/a/adye/public/root/bug-62206/simplest-53425.root` (created with ROOT 5.34/25); * `/afs/cern.ch/user/a/adye/public/root/bug-62206/simplest-53432.root` (created with ROOT 5.34/32); * `/afs/cern.ch/user/a/adye/public/root/bug-62206/simplest-60212.root` (created with ROOT 6.02/12); * Setup ROOT 6.22/06 and load the file:; ```; % . /cvmfs/sft.cern.ch/lcg/views/setupViews.sh LCG_99 x86_64-centos7-gcc8-dbg; % root -b; root [0] TFile::Open(""simplest-53432.root""); *** Break *** segmentation violation; ...; #10 std::__atomic_base<TVirtualStreamerInfo*>::load (__m=std::memory_order_seq_cst, this=0x1d8) at /cvmfs/sft.cern.ch/lcg/releases/gcc/8.3.0-cebb0/x86_64-centos7/include/c++/8.3.0/bits/atomic_base.h:713; #11 std::__atomic_base<TVirtualStreamerInfo*>::operator TVirtualStreamerInfo* (this=0x1d8) at /cvmfs/sft.cern.ch/lcg/releases/gcc/8.3.0-cebb0/x86_64-centos7/include/c++/8.3.0/bits/atomic_base.h:590; #12 0x00007f791c62f23e in std::atomic<TVirtualStreamerInfo*>::operator TVirtualStreamerInfo* (this=0x1d8) at /cvmfs/sft.cern.ch/lcg/releases/gcc/8.3.0-cebb0/x86_64-centos7/include/c++/8.3.0/atomic:367; #13 0x00007f791c625873 in TClass::GetStreamerInfo (this=0x0, version=0, isTransient=false) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-v6.22.06/src/ROOT/v6.22.06/core/meta/src/TClass.cxx:4563; #14 0x00007f7919c70b29 in (anonymous namespace)::FixCollectionV5 (context=0x372fc40, oldClass=0x3a21c20, newClass=0x3a23a30) at /build/jenkins/workspace/lcg_release_pipeline/build/projects/ROOT-v6.22.06/src/ROOT/v6.22.06/io/io/src/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7276:1655,load,load,1655,https://root.cern,https://github.com/root-project/root/issues/7276,1,['load'],['load']
Performance,"To Track down the problem, you may want to turn on the multi-thread access protector for TList and THashList. To do so, either add -DR__CHECK_COLLECTION_MULTI_ACCESS or revert 9b8bd150c1cae2d1bd96405c87cb8c350738b4fe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/666#issuecomment-309834050:55,multi-thread,multi-thread,55,https://root.cern,https://github.com/root-project/root/pull/666#issuecomment-309834050,1,['multi-thread'],['multi-thread']
Performance,To add a bit of potentially stale knowledge from my side (it has been a bit since I looked into this): I think root ships a partial re-implementation of zlib with better performance (at least [this comment chain](https://github.com/spack/spack/pull/20839#pullrequestreview-569061383) suggests that). I am not sure whether those have ever made it into zlib proper.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14172#issuecomment-1840871550:170,perform,performance,170,https://root.cern,https://github.com/root-project/root/pull/14172#issuecomment-1840871550,1,['perform'],['performance']
Performance,"To be clear, it seems to me that the following:. ```C++; diff --git a/tree/tree/src/TBranch.cxx b/tree/tree/src/TBranch.cxx; index c69a3a95e3..e80e45d8be 100644; --- a/tree/tree/src/TBranch.cxx; +++ b/tree/tree/src/TBranch.cxx; @@ -1403,6 +1403,7 @@ Int_t TBranch::GetBasketAndFirst(TBasket *&basket, Long64_t &first,; /// to perform bulk IO (reasonable type, single TLeaf, etc); the bulk IO may; /// still fail, depending on the contents of the individual TBaskets loaded.; Bool_t TBranch::SupportsBulkRead() const {; + return true;; return (fNleaves == 1) &&; (static_cast<TLeaf*>(fLeaves.UncheckedAt(0))->GetDeserializeType() != TLeaf::DeserializeType::kDestructive);; }; @@ -1432,7 +1433,7 @@ Int_t TBranch::GetBulkEntries(Long64_t entry, TBuffer &user_buf); // TODO: eventually support multiple leaves.; if (R__unlikely(fNleaves != 1)) return -1;; TLeaf *leaf = static_cast<TLeaf*>(fLeaves.UncheckedAt(0));; - if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {return -1;}; +// if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {return -1;}; ; // Remember which entry we are reading.; fReadEntry = entry;; @@ -1488,8 +1489,7 @@ Int_t TBranch::GetBulkEntries(Long64_t entry, TBuffer &user_buf); Int_t N = ((fNextBasketEntry < 0) ? fEntryNumber : fNextBasketEntry) - first;; //printf(""Requesting %d events; fNextBasketEntry=%lld; first=%lld.\n"", N, fNextBasketEntry, first);; if (R__unlikely(!leaf->ReadBasketFast(user_buf, N))) {; - Error(""GetBulkEntries"", ""Leaf failed to read.\n"");; - return -1;; + leaf->ReadBasket(user_buf);; }; user_buf.SetBufferOffset(bufbegin);; ```. works just fine with all the basic types.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6520#issuecomment-701704099:326,perform,perform,326,https://root.cern,https://github.com/root-project/root/issues/6520#issuecomment-701704099,2,"['load', 'perform']","['loaded', 'perform']"
Performance,"To clarify, we are talking about the case where a library has a module. Users do not use make project often and roottest claims to cover a good amount of their workflows. As for the dev hours: they are already invested and we know that only under very specific conditions we need rdicts -- it seems that it depends on the amount of header files we parse. If the number is very high, as in Philippe's example, we should load the rdict -- it slows things by 2%...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-650964137:419,load,load,419,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-650964137,1,['load'],['load']
Performance,"To leave here some details of the discussion: the use of `vector<char>::data()` happens during the creation of the iterator, not during the iteration itself, so the performance impact is much smaller. As for the change in behaviour, the pythonization reverts the temporary addition immediately after the call to the real data(), so the changes are never seen by the user.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9708#issuecomment-1025637980:165,perform,performance,165,https://root.cern,https://github.com/root-project/root/pull/9708#issuecomment-1025637980,1,['perform'],['performance']
Performance,To make the RReader usable in multi-thread we ned to move the loch to all the COmpute funcitions in order to protect the setting of the input variables. This fixes #16600 as suggested in https://root-forum.cern.ch/t/tmva-rreader-not-multithread-safe/59662,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16616:30,multi-thread,multi-thread,30,https://root.cern,https://github.com/root-project/root/pull/16616,1,['multi-thread'],['multi-thread']
Performance,"To reproduce error, just call:; ```; TClass::GetClass(""TTreeCache"")->GetStreamerInfo(); ```; Produces crash with output:; ```; input_line_9:6:31: error: 'MissCache' is a protected member of 'TTreeCache'; default_delete<TTreeCache::MissCache> _1;; ^; /home/linev/build/json/include/TTreeCache.h:85:11: note: declared protected here; struct MissCache {; ^; input_line_9:7:16: error: 'MissCache' is a protected member of 'TTreeCache'; TTreeCache::MissCache* _0;; ^; /home/linev/build/json/include/TTreeCache.h:85:11: note: declared protected here; struct MissCache {; ^; Error in <Load>: Could not declare TEmulatedTuple<TTreeCache::MissCache*,default_delete<TTreeCache::MissCache> >. *** Break *** segmentation violation. ===========================================================; There was a crash.; This is the entire stack trace of all threads:; ===========================================================; ```. There are also few other classes with similar problems:; ```; TClass::GetClass(""TMVA::VarTransformHandler"")->GetStreamerInfo();; TClass::GetClass(""TTreeCacheUnzip"")->GetStreamerInfo();; ```. Probably, issue https://github.com/root-project/root/issues/7276 connected with this one.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8194:578,Load,Load,578,https://root.cern,https://github.com/root-project/root/issues/8194,1,['Load'],['Load']
Performance,"To reproduce problem - store canvas with histogram and palette in the file, then load such canvas back and try to change any attribute in the palette before painting canvas.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11503#issuecomment-1270217358:81,load,load,81,https://root.cern,https://github.com/root-project/root/pull/11503#issuecomment-1270217358,1,['load'],['load']
Performance,"To support inline namespace and opaque typedefs without needing interpreter information the dictionary for class template often load a alternate spelling of the class name (beside the normalized name) by using `ROOT::AddClassAlternate`. However when unloading the library, those aliases are not removed. In practice this means that you can define a class inside an inlined namespace in one iteration of the library and in a distinct inlined namespace the next one (Since inline namespace are mostly only used by the STD libraries, this should be a very are occasion). . Possibly more common (but still, it has never been reported so far), you can not change the number or order a class template for which one of the instance is using any opaque typedef (`Double32_t` etc...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12868:128,load,load,128,https://root.cern,https://github.com/root-project/root/issues/12868,1,['load'],['load']
Performance,"Total 31202 (delta 448), reused 561 (delta 442), pack-reused 30551; Receiving objects: 100% (31202/31202), 19.11 MiB | 22.64 MiB/s, done.; Resolving deltas: 100% (23380/23380), done.; jonesmz@ymir ~ $ cmake -S cling -B build-cling -Dbuiltin_llvm=OFF; -- The C compiler identification is GNU 11.3.1; -- The CXX compiler identification is GNU 11.3.1; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/bin/cc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found LLVM_CONFIG as /usr/lib/llvm/15/bin/llvm-config; -- Performing Test HAVE_FFI_CALL; -- Performing Test HAVE_FFI_CALL - Success; -- Found FFI: /usr/lib64/libffi.so; -- Performing Test Terminfo_LINKABLE; -- Performing Test Terminfo_LINKABLE - Success; -- Found Terminfo: /usr/lib64/libtinfo.so; -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.13""); -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.10.3""); -- Linker detection: GNU ld; -- Performing Test C_SUPPORTS_FPIC; -- Performing Test C_SUPPORTS_FPIC - Success; -- Performing Test CXX_SUPPORTS_FPIC; -- Performing Test CXX_SUPPORTS_FPIC - Success; -- Building with -fPIC; -- Performing Test C_SUPPORTS_FNO_SEMANTIC_INTERPOSITION; -- Performing Test C_SUPPORTS_FNO_SEMANTIC_INTERPOSITION - Success; -- Performing Test CXX_SUPPORTS_FNO_SEMANTIC_INTERPOSITION; -- Performing Test CXX_SUPPORTS_FNO_SEMANTIC_INTERPOSITION - Success; -- Performing Test SUPPORTS_FVISIBILITY_INLINES_HIDDEN_FLAG; -- Performing Test SUPPORTS_FVISIBILITY_INLINES_HIDDEN_FLAG - Success; CMake Warning (dev) at /usr/lib/llvm/15/lib/cmake/llvm/HandleLLVMOptions.cmake:449 (option):; Policy CMP0077 is not set: option() honors normal variables. Run ""cmake; --help-policy CMP0077"" for pol",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:1220,Perform,Performing,1220,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,2,['Perform'],['Performing']
Performance,"Transactions are so divided that we don't get any benefit if we reset cache every time a new transaction was added. I think we should remove one element of a cache if a decl in the new transaction matches the key, otherwise we can keep the cache. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2434#issuecomment-414747466:70,cache,cache,70,https://root.cern,https://github.com/root-project/root/pull/2434#issuecomment-414747466,3,['cache'],['cache']
Performance,TrustAssuredCAG3-runbytheissuer.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG3-runbytheissuer.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLECCCA4.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLECCCA4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLECCCA4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/18700496.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/5d9ea26d.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e732ef10.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/617ff41b.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58b08cb5.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/cer,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:22635,load,load,22635,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,Try to optimize treeviewer and treeplayer includes ROOT-10336,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4485:7,optimiz,optimize,7,https://root.cern,https://github.com/root-project/root/pull/4485,1,['optimiz'],['optimize']
Performance,"Trying to wrap up: I agree that the interactive case is real, and more than one loop is triggered on purpose. Likewise, I tend to think that it's not really possible to distinguish this case from the case when subsequent, unintended, runtime performance degrading loops are triggered (how can we check we are not at the root prompt, python prompt, ipython, jupyter...). Doesn't all this point to closing this issue?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13440#issuecomment-1967511621:242,perform,performance,242,https://root.cern,https://github.com/root-project/root/issues/13440#issuecomment-1967511621,1,['perform'],['performance']
Performance,"Tstate (kwnames=0x0, nargsf=2, args=0x7ffc2594e6a0, callable=0x7f1095b4fce0, tstate=0x55f908be5998 <_PyRuntime+166328>) at /usr/local/src/conda/python-3.11.9/Include/internal/pycore_call.h:92; #71 object_vacall (tstate=0x55f908be5998 <_PyRuntime+166328>, base=<optimized out>, callable=0x7f1095b4fce0, vargs=0x7ffc2594e730) at /usr/local/src/conda/python-3.11.9/Objects/call.c:819; #72 0x000055f90889837a in PyObject_CallMethodObjArgs (obj=0x0, name=<optimized out>) at /usr/local/src/conda/python-3.11.9/Objects/call.c:878; #73 0x000055f90878fbff in import_find_and_load (abs_name=0x7f101f5dbd70, tstate=0x55f908be5998 <_PyRuntime+166328>) at /usr/local/src/conda/python-3.11.9/Python/import.c:1748; #74 PyImport_ImportModuleLevelObject (name=0x7f101f5ff730, globals=<optimized out>, locals=<optimized out>, fromlist=0x7f109593fb50, level=1) at /usr/local/src/conda/python-3.11.9/Python/import.c:1847; #75 0x000055f90885d817 in import_name (level=0x55f908bbd348 <_PyRuntime+872>, fromlist=0x7f109593fb50, name=0x7f101f5ff730, frame=0x7f10960126e8, tstate=<optimized out>) at /usr/local/src/conda/python-3.11.9/Python/ceval.c:7422; #76 _PyEval_EvalFrameDefault (tstate=<optimized out>, frame=<optimized out>, throwflag=<optimized out>) at /usr/local/src/conda/python-3.11.9/Python/ceval.c:3946; #77 0x000055f90890ea8d in _PyEval_EvalFrame (throwflag=0, frame=0x7f10960126e8, tstate=0x55f908be5998 <_PyRuntime+166328>) at /usr/local/src/conda/python-3.11.9/Include/internal/pycore_ceval.h:73; #78 _PyEval_Vector (tstate=0x55f908be5998 <_PyRuntime+166328>, func=0x7f101f5faa20, locals=<optimized out>, args=0x0, argcount=0, kwnames=0x0) at /usr/local/src/conda/python-3.11.9/Python/ceval.c:6434; #79 0x000055f90890e11f in PyEval_EvalCode (co=0x55f90aaa9b60, globals=<optimized out>, locals=0x7f10202a8e40) at /usr/local/src/conda/python-3.11.9/Python/ceval.c:1148; #80 0x000055f9089256ee in builtin_exec_impl (module=<optimized out>, closure=<optimized out>, locals=0x7f10202a8e40, globals=0x7f10202a8e4",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15970:19813,optimiz,optimized,19813,https://root.cern,https://github.com/root-project/root/issues/15970,2,['optimiz'],['optimized']
Performance,Tune BDTG parameters,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/836:0,Tune,Tune,0,https://root.cern,https://github.com/root-project/root/pull/836,1,['Tune'],['Tune']
Performance,Two optimizations fro the ci:; 1) Use zstd with 8 threads to compress ROOT builds for nightlies and releases.; 2) Use gzip compression level 2 instead of level 6 to compress artifacts.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15802:4,optimiz,optimizations,4,https://root.cern,https://github.com/root-project/root/pull/15802,1,['optimiz'],['optimizations']
Performance,"Type-erased reading should work via the default entry (or new entries) of the reader's generated model. Like this. ```cpp; auto r = RNTupleReader::Open(""r"", fileGuard.GetPath());; auto v = r->GetModel()->Get<ROOT::RVec<int>>(""v"");; r->LoadEntry(0);; // v now points to an RVec with the data of field v in event 0; ```. Edit: I guess I see the issue, you'd like to avoid `Get<ROOT::RVec<int>>` but instead pass the type name somewhere as a string. Let me think about that for a moment. Can you send me the complete snippet how you read the data before the API change in RNTuple?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10408#issuecomment-1117135780:235,Load,LoadEntry,235,https://root.cern,https://github.com/root-project/root/issues/10408#issuecomment-1117135780,1,['Load'],['LoadEntry']
Performance,UNAMgrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d0a33f8e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d0a33f8e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dd4b34ea.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b2783ac.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TSU-GE.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/4b2783ac.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/dd4b34ea.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f4db168.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7f4db168.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/089450c2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy-CA.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA3G3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy-CA.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/089450c2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy-CA.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA3G3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/368bc755.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy-CA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1149214e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1149214e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/87429b,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:30179,load,load,30179,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,URLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/156a0f0f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2G3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2G3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/24c3ccde.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/37a553c6.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/24c3ccde.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3f638905.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Robots.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Robots.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNLPGrid.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SDG-G2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Robots.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7a819ef2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNLPGrid.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.namespac,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:51823,load,load,51823,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,URLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/617ff41b.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/58b08cb5.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e732ef10.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2f2f573f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridTrustCAG2-Classic.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/18700496.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/bd43b60c.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/f5ead794.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PK-Grid-2007.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1db3b27f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d33760ec.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/KEK.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eScience-SSL-CA-3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/633dc6a4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TERENA-eS,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:24003,load,load,24003,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,URLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/ANSPGrid.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/20b7db76.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/156a0f0f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2G3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2G3.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/24c3ccde.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/37a553c6.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/24c3ccde.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/3f638905.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Robots.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Robots.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNLPGrid.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/SDG-G2.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/AC-GRID-FR-Robots.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7a819ef2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UNAMgrid-ca.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/QuoVadis-Root-CA2.info' ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:51636,load,load,51636,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,URLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-Root-2.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/78351451.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7022e3c4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/7ed47087.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/98ef0ee5.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceRoot-2007.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceRoot-2007.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceRoot-2007.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/UKeScienceRoot-2007.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/2436bbb8.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustPrivateRootCAG4.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustPrivateRootCAG4.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustPrivateRootCAG4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustPrivateRootCAG4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/585d9326.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d58bb4bc.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/585d9326.signing_policy' from CURLOPT_C,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:8075,load,load,8075,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,URLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeSciencePersonalECCCA4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeSciencePersonalCA4.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeSciencePersonalCA4.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeSciencePersonalECCCA4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeSciencePersonalCA4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeSciencePersonalCA4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/943fd5f3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/d9343743.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG3-runbytheissuer.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG3-runbytheissuer.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG3-runbytheissuer.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustAssuredCAG3-runbytheissuer.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLECCCA4.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLECCCA4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/GEANTeScienceSSLECCCA4.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigitalTrustSecureCAG3-runbytheissuer.namespaces' from CURLOPT_C,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:21473,load,load,21473,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"Uncomment line setting operation mode of partInt components of RooPro…dPdf using current operation mode. This seems to be needed in order to propagate to the cached intergal component s of the RooProdPdf is operation mode.; It fixes issue #7157 where RooProdPdf is used from a RooFFTConv. In this case; the RooFFTConv sets AlwaysDirty as operation mode its components, and then the ROoProdPdf needs to propage to its owned parts, otherwise during the FFT computation the RooProdPdf returns always its first evaluation. To fix the example in #7157 it is sufficient to uncomment line RooProdPdf.cxx:1622, since it is case IVa in code. ; But a similar issue is present when using case IIIa and IIb.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7242:158,cache,cached,158,https://root.cern,https://github.com/root-project/root/pull/7242,1,['cache'],['cached']
Performance,"Under some circumstances TStreamerInfo::BuildOld crashes in TStreamerInfo::AddReadAction. See original report: cms-sw/cmsdist#6314 (comment). With the recent updates to switch more std::pair's TClass to be auto-generated from the typename (as opposed to generated from interpreter information), more STL's collection TClass have their StreamerInfo build earlier. In the case above, a file is being fast cloned and thus the StreamerInfo to the new file. In particular there is this sequence of operation. Get TClass for pair(type1, vector<type2>>; ** At this point the dictionary for vector<type2> is not loaded.; ** The TClass for the pair is generated nonetheless; *** This requires the building of the StreamerInfo for the TClass for vector<type2>, let's call it c1 but (intentionaly because it is not needed yet) does not trigger the loading of the dictionary the vector<type2>; Some other operation requires the loading of the library that contains the dictionary for vector<type2>; ** SInce c1 exists, it is replaced by the dictionary generated TClass for vector<type2>, let's call it c2; ** Part of this replacement is to transfer c1's StreamerInfo into c2 (after 'reseting` it's state); Then the StreamerInfos are copied form the input file to the output; ** This includes ""building"" and ""compiling"" the StreamerInfo; *** This crasesd when calling AddReadAction. An STL collection's TClass (like c1 and c2)'s StreamerInfo contains an artificial StreamerElement (for infrastructures purposes) that points back to its owner. So when the StreamerInfo is created it has internally a pointer to c1. The deficiency is that whenc1 is replaced by c2 and then deleted, the StreamerInfo was not updated and thus the later building of the StreamerInfo was using a stale pointer to c1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6768:604,load,loaded,604,https://root.cern,https://github.com/root-project/root/pull/6768,6,['load'],"['loaded', 'loading']"
Performance,"Under some circumstances TStreamerInfo::BuildOld crashes in TStreamerInfo::AddReadAction. See original report: https://github.com/cms-sw/cmsdist/pull/6314#issuecomment-721115953. With the recent updates to switch more std::pair's TClass to be auto-generated from the typename (as opposed to generated from interpreter information), more STL's collection TClass have their StreamerInfo build earlier. In the case above, a file is being fast cloned and thus the StreamerInfo to the new file. In particular there is this sequence of operation. * Get `TClass` for `pair(type1, vector<type2>>`; ** At this point the dictionary for `vector<type2>` is not loaded.; ** The TClass for the pair is generated nonetheless; *** This requires the building of the `StreamerInfo` for the `TClass` for `vector<type2>`, let's call it `c1` but (intentionaly because it is not needed yet) does not trigger the loading of the dictionary the `vector<type2>`; * Some other operation requires the loading of the library that contains the dictionary for `vector<type2>`; ** SInce `c1` exists, it is replaced by the dictionary generated TClass for `vector<type2>`, let's call it `c2`; ** Part of this replacement is to transfer `c1`'s StreamerInfo into `c2` (after 'reseting` it's state); * Then the `StreamerInfos` are copied form the input file to the output ; ** This includes ""building"" and ""compiling"" the StreamerInfo; *** This crasesd when calling `AddReadAction`. An STL collection's TClass (like `c1` and `c2`)'s StreamerInfo contains an artificial StreamerElement (for infrastructures purposes) that points back to its owner. So when the `StreamerInfo` is created it has internally a pointer to `c1`. The deficiency is that when`c1` is replaced by `c2` and then deleted, the StreamerInfo was not updated and thus the later building of the `StreamerInfo` was using a stale pointer to `c1`. ```; #4 <signal handler called>; #5 0x00002af4f3e84290 in TStreamerInfo::AddReadAction (this=0x2af506a31000, readSequence=0x2af5",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6767:649,load,loaded,649,https://root.cern,https://github.com/root-project/root/issues/6767,1,['load'],['loaded']
Performance,"Unfortunately the projectroot.roottest.root.io.double32.roottest_root_io_double32_make failure is a real issue. It, surpringly, fails to merge some consecutive `Double32_t` data member that it was able to before (so the issue appear in `TStreamerInfo::Compile`):; ```; - i= 3, ff2 type= 29, offset= [deleted from log], len=4, method= [deleted from log] [optimized]; - i= 4, ff4 type= 49, offset= [deleted from log], len=1, method= [deleted from log]; + i= 3, ff2 type= 29, offset= [deleted from log], len=3, method= [deleted from log]; + i= 4, ff3 type= 9, offset= [deleted from log], len=1, method= [deleted from log]; + i= 5, ff4 type= 49, offset= [deleted from log], len=1, method= [deleted from log]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9008#issuecomment-921724322:354,optimiz,optimized,354,https://root.cern,https://github.com/root-project/root/pull/9008#issuecomment-921724322,1,['optimiz'],['optimized']
Performance,"Unfortunately this issue still exist in head version, but now the error appears for JsMVA.py file:. the gist for test_ipp.py script:; https://gist.github.com/TatianaOvsiannikova/eb8065352b3605cbebf547e7d2465c37; now fails with an error:. NameErrorTraceback (most recent call last)<string> in <module>(); /afs/cern.ch/work/t/tovsiann/public/test_multi/ipp.py in f(x); ----> 2 import ROOT # script works, if remove this line; 3 return x; 4 ; 5 from ipyparallel import Client; 6 pool = Client(); /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/__init__.pyc in <module>(); 88 if hasattr(ip,""kernel""):; 89 import JupyROOT; ---> 90 import JsMVA; 91 ; 92 # Register cleanup; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/ROOT/_facade.pyc in _importhook(name, *args, **kwds); 160 except Exception:; 161 pass; --> 162 return _orig_ihook(name, *args, **kwds); 163 __builtin__.__import__ = _importhook; 164 ; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in <module>(); 10 ip = get_ipython(); 11 extMgr = ExtensionManager(ip); 12 extMgr.load_extension(""JsMVA.JsMVAMagic""); 13 ; ---> 14 loadExtensions(); /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python2/Tue/x86_64-centos7-gcc8-opt/lib/JsMVA/__init__.py in loadExtensions(); 8 ## This function will register JsMVAMagic class to ipython; 9 def loadExtensions():; ---> 10 ip = get_ipython(); 11 extMgr = ExtensionManager(ip); 12 extMgr.load_extension(""JsMVA.JsMVAMagic""); NameError: global name 'get_ipython' is not defined",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6974#issuecomment-866391935:1207,load,loadExtensions,1207,https://root.cern,https://github.com/root-project/root/issues/6974#issuecomment-866391935,3,['load'],['loadExtensions']
Performance,"Unless we make something like `5*60 / 1.423 = 211` requests, one after the other, in order to retrieve those 60k events this doesn't add up. EDIT:; I'm assuming that the latency is ~constant w.r.t. the size of the request, of course",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13018#issuecomment-1592086053:170,latency,latency,170,https://root.cern,https://github.com/root-project/root/issues/13018#issuecomment-1592086053,1,['latency'],['latency']
Performance,"Unlike in the old RooFit, the PDF was not cloned in the BatchMode when a; likelihood object was created with `RooAbsPdf::createNLL`. This caused; trouble in a few places, because changing the state of the NLL changed; the state of the original model. Actually, the model was already cloned when a RooSimultaneous was used,; and because the cloning is only expensive for large simultaneous models,; this change is not expected to have a negative performance impact for; realistic workflows. The `testRooSimultaneous` closure test with a one-channel; RooSimultaneous is now extended to use also the BatchMode, because this; was one of the cases where it failed before the suggested change in this; commit. This PR includes a second technical commit with some code modernization in `stressRooFit`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11406:445,perform,performance,445,https://root.cern,https://github.com/root-project/root/pull/11406,1,['perform'],['performance']
Performance,Unload is bad idea :). The fact that loading leads to failure seems to be an indication that having it happens 'here' leads to incorrect loading.(could be nesting of loading),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14930#issuecomment-1992134659:37,load,loading,37,https://root.cern,https://github.com/root-project/root/pull/14930#issuecomment-1992134659,3,['load'],['loading']
Performance,"Up to now all ES6 modules were loaded with relative path like `./jsrootsys/modules/core.mjs`. ; This works nice when all used code is located in one sub-directory `./jsrootsys/` which is alias for `$ROOTSYS/js`.; But this does not work when other location has to be used and modules have to reference jsroot code. Solution provided by modern browsers is `importmap` which can look like:; ```; <script type=""importmap"">; {; ""imports"": {; ""jsroot"": ""./jsrootsys/modules/main.mjs"",; ""jsroot/draw"": ""./jsrootsys/modules/draw.mjs"",; ""jsroot/io"": ""./jsrootsys/modules/io.mjs"",; ""jsrootsys/"" :: ""./jsrootsys/""; }; }; ```. This allow to use `import { draw } from 'jsroot';` syntax - including different external modules. Therefore add support of ""importmap"" in `THttpServer` which automatically insert appropriate map if `<!--jsroot_importmap-->` comment appears in HTML file. . Old HTML files with JSROOT import via relative path will work as before. ; But newer JSROOT HTML files with absolute path will not work with older ROOT versions - may be backport to 6.32 and 6.30 can be done later. Special handling of Qt5 is provided - while used there chromium version does not support importmap :(. ; Nevertheless all ROOT web widgets will be working. Provide `tutorials/webgui/custom` demo with usage of user-defined modules for support of custom user classes `TTriangle`. Demo should run witth ACLiC to provide dictionary for the class. Several changes in TWebCanvas and RWebWindowsManager class were done to let configure custom modules paths and register custom classes.; Macro also works in batch mode where workaround has to be implemented - until headless browser will allow to use ES6 modules directly from the file system. Update JSROOT with support of ES6 modules loading and with many spelling fixes. Ensure that new modules approach works with our external project where web graphics intensively used.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16042:31,load,loaded,31,https://root.cern,https://github.com/root-project/root/pull/16042,2,['load'],"['loaded', 'loading']"
Performance,Update basket optimization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/238:14,optimiz,optimization,14,https://root.cern,https://github.com/root-project/root/pull/238,1,['optimiz'],['optimization']
Performance,Update concurrentfill.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8492:7,concurren,concurrentfill,7,https://root.cern,https://github.com/root-project/root/pull/8492,1,['concurren'],['concurrentfill']
Performance,"Update: another problem which seems connected with this change is that **PyRDF** and **gaudi_tests** fail for the **optimized** builds, the only one we can test (see, for example, [here](http://cdash.cern.ch/testDetails.php?test=11740534&build=140717) and [here](http://cdash.cern.ch/testDetails.php?test=11738354&build=140717)). So all the LCG nightlies seem to be affected now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1015620171:116,optimiz,optimized,116,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1015620171,1,['optimiz'],['optimized']
Performance,"Updates of the day:. ### 1; @Axel-Naumann suggested creating targets for the builtin_xrootd libraries . This should in theory give us the possibility of changing target properties through something like; `set(TARGET libXrdSecpwd-4 PROPERTY INSTALL_RPATH ${CMAKE_INSTALL_FULL_LIBDIR})`. We still want to keep all the building process in the `ExternalProject_Add` step, thus these new targets would be created as IMPORTED libraries. But unfortunately, CMake doesn't allow to install IMPORTED libraries as TARGETS ([SO post](https://stackoverflow.com/a/41179630), [CMake developer citation](https://public.kitware.com/Bug/view.php?id=14311) ). ### 2; I tried to create a post install script that manually invokes `install_name_tool` to change the rpath from the build directory to the install directory. This would be called in `SearchInstalledSoftware.cmake` through something like; `install(SCRIPT ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules/XROOTDPostInstall.cmake"")`; and the script itself would work along these lines; ```; file(GLOB XROOTD_ALL_LIBRARIES; ""${CMAKE_INSTALL_PREFIX}/lib/libXrd*""; ); find_program(INSTALL_NAME_TOOL install_name_tool). if(INSTALL_NAME_TOOL); foreach(XRD_LIB_PATH ${XROOTD_ALL_LIBRARIES}); set(OLD_RPATH ${CMAKE_BINARY_DIR}/lib); set(NEW_RPATH ${CMAKE_INSTALL_PREFIX}/lib); execute_process(COMMAND ${INSTALL_NAME_TOOL} -rpath ${OLD_RPATH} ${NEW_RPATH} $$; endforeach(); endif(); ```; The problem with this idea, if not for its ad-hoc nature, is that `install_name_tool` would actually be called each time `cmake --install` is called causing errors from the second time since ${OLD_RPATH} is not set to the `build` folder anymore:; ```; error: install_name_tool: no LC_RPATH load command with path: /Users/sftnight/vpadulan/build/lib found in: /Users/sftnight/vpadulan/install/lib/libXrdClient.dylib (for architecture x86_64), required for specified option ""-rpath /Users/sftnight/vpadulan/build/lib /Users/sftnight/vpadulan/install/lib""; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6128#issuecomment-672083860:1704,load,load,1704,https://root.cern,https://github.com/root-project/root/pull/6128#issuecomment-672083860,1,['load'],['load']
Performance,"Updates on the failing tests:; * Centos8/multicore: Failure because the same wrong mechanism of changing files happens in `FinalizeSlot` instead of `Finalize` in `SnapshotHelperMT`. Weirdly this didn't happen on my machine with 8 threads but it does on this node with 16 threads, still not sure what's the real difference there.; * MacOS: Both failures happen in the dataframe test, but in the **single threaded** Snapshot, that is in the `Finalize` method of the `SnapshotHelper` class. At first this PR wasn't even considering the single threaded case, that's also why `SnapshotHelper` wasn't modified. So there was this difference between the single threaded Snapshot that still used the weird ChangeFile behaviour (although it shouldn't have triggered a segfault anyway since it's using a plain TFile), and the multithreaded Snapshot that got its behaviour changed to avoid the issue. Considering both types of failures, and the fact that a coherent behaviour across the two Snapshot modes is desirable, I would refactor the usage of `TTree::SetMaxTreeSize` inside of RDF Snapshot in a single common point that both single-thread and multi-thread operations have to go through, if that exists. Or in alternative, the workaround should be done at construction time of both helpers and then removed at destruction time (or in `Initialize` and `Finalize` methods).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6570#issuecomment-720955137:1138,multi-thread,multi-thread,1138,https://root.cern,https://github.com/root-project/root/pull/6570#issuecomment-720955137,1,['multi-thread'],['multi-thread']
Performance,Use GenerateDictionary instead of LoadDictionaryForSTLType,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1752:34,Load,LoadDictionaryForSTLType,34,https://root.cern,https://github.com/root-project/root/pull/1752,1,['Load'],['LoadDictionaryForSTLType']
Performance,Use Read/Write lock where relevant. Cache the last result of TProcessID::IsValid and TProcessID::GetProcessWithUID as; most often the same PID will be used for most of the process lifetime. This addresses: https://root-forum.cern.ch/t/copying-trefs-and-accessing-tref-data-from-multiple-threads/29417,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2391:36,Cache,Cache,36,https://root.cern,https://github.com/root-project/root/pull/2391,1,['Cache'],['Cache']
Performance,"Use `${PYTHON_LIBRARIES}` to automatically select the correct (debug/release) Python library when both are installed. For example, with both debug and release versions of Python, `PYTHON_LIBRARIES` is set as:; ```; PYTHON_LIBRARIES:INTERNAL=optimized;C:/Python310/libs/python310.lib;debug;C:/Python310/libs/python310_d.lib; ```; And with only the release version:; ```; PYTHON_LIBRARIES:INTERNAL=C:/Python310/libs/python310.lib; ```; So the correct one will be used.; This fixes the following error when both versions are installed:; ```; CMake Error at bindings/pyroot/cppyy/CPyCppyy/CMakeLists.txt:61 (target_link_libraries):; The ""optimized"" argument must be followed by a library.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13013:241,optimiz,optimized,241,https://root.cern,https://github.com/root-project/root/pull/13013,4,['optimiz'],['optimized']
Performance,"Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12070:196,load,loading,196,https://root.cern,https://github.com/root-project/root/pull/12070,1,['load'],['loading']
Performance,Use correct suffix (`.dll` on Windows and `.so` elsewhere) and test also loading/unloading` in threads,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13473:73,load,loading,73,https://root.cern,https://github.com/root-project/root/pull/13473,1,['load'],['loading']
Performance,"Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:; ```; SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13576:115,concurren,concurrently,115,https://root.cern,https://github.com/root-project/root/pull/13576,2,['concurren'],['concurrently']
Performance,Use different filename in loopdir.C and loopdir11.C to avoid race condition,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11725:61,race condition,race condition,61,https://root.cern,https://github.com/root-project/root/pull/11725,1,['race condition'],['race condition']
Performance,Use file cache when accessing remote files during testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/404:9,cache,cache,9,https://root.cern,https://github.com/root-project/root/pull/404,1,['cache'],['cache']
Performance,Use full path for loading CDLL,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/569:18,load,loading,18,https://root.cern,https://github.com/root-project/root/pull/569,1,['load'],['loading']
Performance,"Use larger vectors and access them more sparsely if needed (e.g.; threads now access one every 16 elements in hot std::vector<int>; on systems where a cache line is 64 bytes). In some edge cases in which the analysis workload is light and/or many; threads (48, 64) are involved, this patch reduces runtimes by factors.; The increase in memory usage should be little relative to the memory; required e.g. by jitting or by per-thread histograms.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8007:151,cache,cache,151,https://root.cern,https://github.com/root-project/root/pull/8007,1,['cache'],['cache']
Performance,"Use now a lock to create the TVirtualFitter class also in the case when ROOT is having MT enabled. Only the 'User' fitting option cannot be use din multi-thread mode, since it relies on a static global TVirtulFitter. Disable then that option when running in MT. Fix also printing of FitResult in MT. This Pull request fixes issue #13041 and also still works (it is a better fix) for https://sft.its.cern.ch/jira/browse/ROOT-7300; In that case the correct fix was applied for histogram/graph fitting but not for TTree Unbinned fits. . Fixes also the print of the fit results when running in multi-thread as in the example code posted in ROOT-7300",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13048:148,multi-thread,multi-thread,148,https://root.cern,https://github.com/root-project/root/pull/13048,2,['multi-thread'],['multi-thread']
Performance,"Use random numbers in the file names created during unit tests, so that concurrent unit tests don't remove each others files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4208:72,concurren,concurrent,72,https://root.cern,https://github.com/root-project/root/pull/4208,1,['concurren'],['concurrent']
Performance,Use the gROOTMutex to protect access to possible concurrent accesses; to gROOT->GetListOfFiles().,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/45:49,concurren,concurrent,49,https://root.cern,https://github.com/root-project/root/pull/45,1,['concurren'],['concurrent']
Performance,Use the gRootMutex to protect access to possible concurrent accesses; to gROOT->GetListOfFiles().,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/38:49,concurren,concurrent,49,https://root.cern,https://github.com/root-project/root/pull/38,1,['concurren'],['concurrent']
Performance,Use the non static TString::Form to actually modify the cmd string.; Use || to actually delete the file when the .ROOT.cachefile does not exist. See https://root-forum.cern.ch/t/cacheread-with-given-local-file-name-to-overwrite-local-file-on-many-file-reads/38660,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5317:119,cache,cachefile,119,https://root.cern,https://github.com/root-project/root/pull/5317,2,['cache'],"['cachefile', 'cacheread-with-given-local-file-name-to-overwrite-local-file-on-many-file-reads']"
Performance,Use the std::atomic load() method to access its content,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1098:20,load,load,20,https://root.cern,https://github.com/root-project/root/pull/1098,1,['load'],['load']
Performance,"Users can now register one or more callbacks to TResultProxies (i.e.; the results of TDF actions). A callback is just a callable that takes; a reference to the result type as argument and is going to be invoked; by each worker thread once every N entries (users choose N). It is meant to be used to inspect partial results of the analysis; while the event loop is still running.; For example, in a single-thread event loop, one can draw a histogram; and update the canvas every 100 entries like this:; ; ```c++; auto h = tdf.Histo1D(""x"");; TCanvas c(""c"",""x hist"");; // update the canvas every 100 entries; h.RegisterCallback(100, [&c](TH1D &h_) { h_.Draw(); c.Update(); });; // trigger event loop, this `Draw` will be performed afterwards; h->Draw();; ```. Each worker thread invokes callbacks sequentially, but the same callback; might be invoked concurrently by different worker threads if implicit multi-threading; is enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1037:718,perform,performed,718,https://root.cern,https://github.com/root-project/root/pull/1037,3,"['concurren', 'multi-thread', 'perform']","['concurrently', 'multi-threading', 'performed']"
Performance,"Using Cache() and Display() with an argument like {""x"", ""y""} matches both the string_view and the vector<string> overloads, causing ambiguity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2515:6,Cache,Cache,6,https://root.cern,https://github.com/root-project/root/pull/2515,1,['Cache'],['Cache']
Performance,"Using approach as before, just perform multiple `JSROOT.draw` inside; this special HTML file. When producing PDF - all these images should; be dump in single file. In all other cases correspondent number of; image files will be created. Advantage of such approach - starting web browser and loading JSROOT; scripts happens only once. Improve PDF generation. Simple 100 images can be generated in ~3 seconds (instead of 70s if doing one by one)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13244:31,perform,perform,31,https://root.cern,https://github.com/root-project/root/pull/13244,2,"['load', 'perform']","['loading', 'perform']"
Performance,"Using the same file in multiple tests is never good, they might run concurrently",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8740#issuecomment-896008555:68,concurren,concurrently,68,https://root.cern,https://github.com/root-project/root/pull/8740#issuecomment-896008555,1,['concurren'],['concurrently']
Performance,Vadis-Root-CA3G3.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/368bc755.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/PSC-Myproxy-CA.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1149214e.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/1149214e.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/87429ba3.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30ffc224.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/295adc19.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/30ffc224.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TRGrid.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DFN-GridGermany-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/295adc19.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DFN-GridGermany-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/6f071272.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DFN-GridGermany-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/REUNA-ca.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/6f071272.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DFN-GridGermany-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/TRGrid.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/e18bfb83.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/18bc5b05.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/REUNA-ca.info',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:31699,load,load,31699,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['load'],['load']
Performance,"Var(f""sigma_{i}"", """", 1.3, 0, 5)); gauss_list.append(ROOT.RooGaussian(f""gauss_{i}"", """", observable, mu_list[-1], sigma_list[-1])); frac_list.append(ROOT.RooConstVar(f""frac_{i}"", """", 1/3)). gauss = ROOT.RooAddPdf(""gauss"", """", gauss_list, frac_list[:-1]); gauss.keepAlive = (gauss_list, frac_list[:-1]); return (mu_list, sigma_list), gauss. def fit_gauss(model, data, batch_mode):; # build the loss; nll = model.createNLL(data, BatchMode=batch_mode). # minimize; minimizer = ROOT.RooMinimizer(nll); minimizer.minimize(""Minuit2"", """"). result = minimizer.save(); return result. def main(n_events):; observable = ROOT.RooRealVar(""x"", """", 0, -5, 20); data1 = get_data(observable, n_events); data2 = get_data(observable, n_events); parameters1, model1 = get_model(observable); parameters2, model2 = get_model(observable). result1 = fit_gauss(model1, data1, ""cpu""); result2 = fit_gauss(model2, data2, ""cuda""). c = ROOT.TCanvas("""", """", 800, 400); c.Divide(2). c.cd(1); frame1 = observable.frame(); data1.plotOn(frame1); model1.plotOn(frame1); frame1.SetTitle(""Fit performed with the 'cpu' backend""); frame1.Draw(). c.cd(2); frame2 = observable.frame(); data2.plotOn(frame2); model2.plotOn(frame2); frame2.SetTitle(""Fit performed with the 'cuda' backend""); frame2.Draw(). c.Print(""myPlot.png""). if __name__ == ""__main__"":; main(int(1e6)); ```; Run the code as `python fit.py`. ### ROOT version. ``` bash; ------------------------------------------------------------------; | Welcome to ROOT 6.29/01 https://root.cern |; | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Aug 29 2023, 08:42:45 |; | From heads/master@v6-29-01-2512-gf6aeead07d |; | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. build from source. ### Operating system. Ubuntu 22.04.3 LTS. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13603:3125,perform,performed,3125,https://root.cern,https://github.com/root-project/root/issues/13603,2,['perform'],['performed']
Performance,"Vassil,. > We cannot control what's in the static init of user libraries. They can; use interpreter services. This approach used to work, why locking is; necessary? Aren't we 'just' reading?. Other threads could be trying to write the symbol tables at the same time,; so we still need to lock them for reading. In your case your lookup enters a generator (HostLookupLazyFallbackGenerator),; so it will end up writing as well as reading. :). The right thing to do here is to refactor HostLookupLazyFallbackGenerator; to do its work in two steps:; Step 1: Identify libraries that could be loaded to provide the requested; symbols, and record their paths but do not load them yet. Instead you; should record a map of libraries to the symbols they provide. E.g. [ (; ""liba.so"", [ ""foo"", ""bar"" ] ), ( ""libb.so"", [ ""baz"" ] ) ]. For each; library/symbol-set pair you can install a custom MaterializationUnit using; JITDylib::define.; Step 2: In the custom MaterializationUnit's materialize function you'll; walk the map from before, do the library load, and then resolve the symbols. Since step 2 happens outside the session lock the idea is that it should; prevent the kind of deadlock that you're seeing. Unfortunately if you can reference JIT'd code from static initializers in; precompiled code then there's still a chance for similar failures. Consider; a precompiled ""libx.so"" containing a global ""x"" and a static constructor; that calls a JIT'd function ""f"" which uses the ""x"" from ""libx.so"" (a; circular reference). I believe this will result in starvation or deadlock; (depending on the number of threads involved). The failure path looks like; this:. 1. A lookup for ""x"" enters the generator, which discovers that ""libx.so""; provides ""x"" and creates a MaterializationUnit, MU, to load ""libx.so"" and; resolve ""x"".; 2.1 Outside the lock, MU dlopens ""libx.so""...; 2.2. dlopen runs the initializers for ""libx.so"" which triggers a lookup in; the JIT for ""f"".; 2.2.1. The lookup for ""f"" finds and runs th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1274280300:1044,load,load,1044,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1274280300,1,['load'],['load']
Performance,Versions/A/UIFoundation.tbd and library file /System/Library/PrivateFrameworks/UIFoundation.framework/Versions/A/UIFoundation are out of sync. Falling back to library file for linking. ; - ld: warning: text-based stub file /System/Library/Frameworks//ApplicationServices.framework/Versions/A/ApplicationServices.tbd and library file /System/Library/Frameworks//ApplicationServices.framework/Versions/A/ApplicationServices are out of sync. Falling back to library file for linking. ; - ld: warning: text-based stub file /System/Library/Frameworks//Foundation.framework/Versions/C/Foundation.tbd and library file /System/Library/Frameworks//Foundation.framework/Versions/C/Foundation are out of sync. Falling back to library file for linking. ; - ld: warning: text-based stub file /System/Library/Frameworks//CoreFoundation.framework/Versions/A/CoreFoundation.tbd and library file /System/Library/Frameworks//CoreFoundation.framework/Versions/A/CoreFoundation are out of sync. Falling back to library file for linking. . And 77 more. ### Failing tests:; - [projectroot.roottest.root.io.compression.roottest_root_io_compression_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/45640/testReport/projectroot.roottest.root.io/compression/roottest_root_io_compression_make/); - [projectroot.roottest.root.io.treeForeign.roottest_root_io_treeForeign_testForeignDraw](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/45640/testReport/projectroot.roottest.root.io/treeForeign/roottest_root_io_treeForeign_testForeignDraw/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_perfstattest](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/45640/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_perfstattest/); - [projectroot.roottest.root.tree.cloning.roottest_root_tree_cloning_exectrim](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/45640/testReport/projectroot.roottest.root.tree/cloning/roottest_root_tree_cloning_exectrim/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2806#issuecomment-433152730:3249,cache,cache,3249,https://root.cern,https://github.com/root-project/root/pull/2806#issuecomment-433152730,2,['cache'],['cache']
Performance,WITCH_DEFAULT_FLAG; -- Performing Test C_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG; -- Performing Test CXX_SUPPORTS_COVERED_SWITCH_DEFAULT_FLAG - Failed; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG; -- Performing Test CXX_SUPPORTS_CLASS_MEMACCESS_FLAG - Success; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_REDUNDANT_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG; -- Performing Test CXX_SUPPORTS_PESSIMIZING_MOVE_FLAG - Success; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG; -- Performing Test CXX_SUPPORTS_NOEXCEPT_TYPE_FLAG - Success; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR; -- Performing Test CXX_WONT_WARN_ON_FINAL_NONVIRTUALDTOR - Failed; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG; -- Performing Test CXX_SUPPORTS_SUGGEST_OVERRIDE_FLAG - Success; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL; -- Performing Test CXX_WSUGGEST_OVERRIDE_ALLOWS_ONLY_FINAL - Success; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP; -- Performing Test C_WCOMMENT_ALLOWS_LINE_WRAP - Failed; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test C_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG; -- Performing Test CXX_SUPPORTS_STRING_CONVERSION_FLAG - Failed; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test C_SUPPORTS_MISLEADING_INDENTATION_FLAG - Success; -- Performing Test CXX_SUPPORTS_MISLEADING_INDENTATION_FLAG; -- Performing Test CXX_SUPPORTS_MISLEADING_INDENTATION_FLAG - Success; -- Performing Test C_SUPPORTS_FNO_FUNCTION_SECTIONS; -- Performing Test C_SUPPORTS_FNO_FUNCTION_SECTIONS - Success; -- Performing Test C_SUPPORTS_FFUNCTION_SECTIONS; -- Performing Test C_SUPPORTS_FFUNCTION_SECTIONS - Success; -- Performing Test CXX_SUPPORTS_FFUNCTION_SECTIONS; -- Performing Test CXX_SUPPORTS_FFUNCTION_SECTIONS - Succe,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920#issuecomment-1370394653:4539,Perform,Performing,4539,https://root.cern,https://github.com/root-project/root/issues/11920#issuecomment-1370394653,1,['Perform'],['Performing']
Performance,"Wait, cpp reference says this about `vector<bool>`. > Does not guarantee that different elements in the same container can be modified concurrently by different threads. Is `vector<bool>` not thread safe?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3135#issuecomment-446356834:135,concurren,concurrently,135,https://root.cern,https://github.com/root-project/root/pull/3135#issuecomment-446356834,1,['concurren'],['concurrently']
Performance,Warnings:; - [2020-08-24T09:17:16.646Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/root/core/lz4/src/ZipLZ4.cxx:173:77: warning: format specifies type 'long' but the argument has type 'int64_t' (aka 'long long') [-Wformat] ; - [2020-08-24T09:17:57.131Z] /Users/sftnight/build/jenkins/workspace/root-pullrequests-build/root/tree/tree/src/TBranch.cxx:2639:15: warning: unused variable 'leaves' [-Wunused-variable] . ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93668/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_snapshot/); - [projectroot.roottest.root.io.filemerger.roottest_root_io_filemerger_execFileMerger](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93668/testReport/projectroot.roottest.root.io/filemerger/roottest_root_io_filemerger_execFileMerger/); - [projectroot.roottest.root.tree.cache.roottest_root_tree_cache_TestCache](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93668/testReport/projectroot.roottest.root.tree/cache/roottest_root_tree_cache_TestCache/); - [projectroot.roottest.root.tree.chain.roottest_root_tree_chain_make](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93668/testReport/projectroot.roottest.root.tree/chain/roottest_root_tree_chain_make/); - [projectroot.roottest.root.tree.cloning.roottest_root_tree_cloning_runtreeCloneTest2](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93668/testReport/projectroot.roottest.root.tree/cloning/roottest_root_tree_cloning_runtreeCloneTest2/); - [projectroot.roottest.root.tree.cloning.roottest_root_tree_cloning_exectrim](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/93668/testReport/projectroot.roottest.root.tree/cloning/roottest_root_tree_cloning_exectrim/); - [projectroot.roottest.root.tree.cloning.roottest_ro,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6221#issuecomment-679020948:1400,cache,cache,1400,https://root.cern,https://github.com/root-project/root/pull/6221#issuecomment-679020948,1,['cache'],['cache']
Performance,"We actually need those callbacks as they are responsible for; loading decls from unresolved identifiers, which then actually; triggers the loading of the specific header (or in our case; the specific C++ modules). For now we need this as long as the modules are based on the; rootmap mechanism.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1267:62,load,loading,62,https://root.cern,https://github.com/root-project/root/pull/1267,2,['load'],['loading']
Performance,"We are still discussing the names. The current proposal is:; ```; using TFilePtr = std::unique_ptr<TFile>;. /// Open a file with `name` for reading.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForRead(std::string_view name, const Options_t &opts = Options_t());. /// Open an existing file with `name` for reading and writing. If a file with; /// that name does not exist, an invalid RFilePtr will be returned.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr OpenForUpdate(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. Fail (return an invalid; /// `RFilePtr`) if a file with this name already exists.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Create(std::string_view name, const Options_t &opts = Options_t());. /// Open a file with `name` for reading and writing. If a file with this name; /// already exists, delete it and create a new one. Else simply create a new file.; ///; /// \note: Synchronizes multi-threaded accesses through locks.; static TFilePtr Recreate(std::string_view name, const Options_t &opts = Options_t());; ```. In the meantime, you should indeed start getting familiar with the testing infrastructure. See io/io/test for some examples.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14017#issuecomment-1821818413:179,multi-thread,multi-threaded,179,https://root.cern,https://github.com/root-project/root/pull/14017#issuecomment-1821818413,4,['multi-thread'],['multi-threaded']
Performance,"We are still not there yet. ```; 6 0x00007fdefa08e12d in TCling::LoadPCM(TString, char const**, void (*)()) const () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCling.so; #7 0x00007fdefa091484 in TCling::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool, bool) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCling.so; #8 0x00007fdeff28f846 in TROOT::RegisterModule(char const*, char const**, char const**, char const*, char const*, void (*)(), std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int> > > const&, char const**, bool) () from /mnt/build/workspace/root-pullrequests-build/build/lib/libCore.so; #9 0x00007fdeef0e706a in (anonymous namespace)::TriggerDictionaryInitialization_libGraf3d_Impl() () from /mnt/build/workspace/root-pullrequests-build/build/lib/libGraf3d.so; #10 0x00007fdeff9b76ba in ?? () from /lib64/ld-linux-x86-64.so.2; #11 0x00007fdeff9b77cb in ?? () from /lib64/ld-linux-x86-64.so.2; #12 0x00007fdeff9bc8e2 in ?? () from /lib64/ld-linux-x86-64.so.2; #13 0x00007fdeff9b7564 in ?? () from /lib64/ld-linux-x86-64.so.2; #14 0x00007fdeff9bbda9 in ?? () from /lib64/ld-linux-x86-64.so.2; #15 0x00007fdefdf5ef09 in ?? () from /lib/x86_64-linux-gnu/libdl.so.2; #16 0x00007fdeff9b7564 in ?? () from /lib64/ld-linux-x86-64.so.2; #17 0x00007fdefdf5f571 in ?? () from /lib/x86_64-linux-gnu/libdl.so.2; #18 0x00007fdefdf5efa1 in dlopen () from /lib/x86_64-linux-gnu/libdl.so.2; #19 0x00007fdefa1987b6 in cling::utils::platform::DLOpen(std::__cxx11::basic_string<char, std::char_traits<cha",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547#issuecomment-359575131:65,Load,LoadPCM,65,https://root.cern,https://github.com/root-project/root/pull/1547#issuecomment-359575131,1,['Load'],['LoadPCM']
Performance,"We are working on LCFIPlus, a flavor tagging software used for linear collider (ILC/CLIC) studies.; We use multi-class BDT with output of b-tag, c-tag, and uds-tag (3 outputs).; We also separate events into four categories according to number of reconstructed vertices; (0-vtx, 1-vtx, 1-vtx+1-partial-vtx, and 2-vtx) which are trained and evaluated independently.; In the previous release with TMVA 4.1.0 we can use the output of BDTs as variables common to ; all categories, because the average value of eg. b-tag output from each BDT; over full training samples reflects the fraction of b events in the training samples.; (eg. if we have 80% of b and 20% of c + uds, we have the avarage value of .8 for b-tag output.); We found this feature is not preserved in the latest releases (after TMVA 4.1.2); due to the normalization procedure introduced in that version.; In result this causes significant degradation of our flavor tagging performance,; which was reported from a user using latest ROOT/TMVA.; We also found that just switching off the normalization procedure in the ROOT 6.06/TMVA 4.2.1; gives very similar performance to the ROOT 5.28/TMVA 4.1.0.; Therefore, we need to switch off the normalization to keep the performance,; which is realized in an option implemented in this pull request.; We hope this will be accepted, to avoid us from patching this to every release of ROOT; we use for studies using LCFIPlus flavor tagging feature.; We set this option to non-default, so current users should not be affected by this change.; ![btag-100k-root-6 06 02-skipnorm](https://cloud.githubusercontent.com/assets/7939934/18453216/0f501eb0-78f3-11e6-892c-912f9b68553d.png); B-tag performance with the SkipNormalization option; ![btag-100k-root-6 06 02-noskipnorm](https://cloud.githubusercontent.com/assets/7939934/18453215/0f4e6b60-78f3-11e6-94bd-b4be9631937d.png); B-tag performance without the SkipNormalization option",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/244:935,perform,performance,935,https://root.cern,https://github.com/root-project/root/pull/244,5,['perform'],['performance']
Performance,We first need to fix the dependencies that TreePlayer is built before we try to load it.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1328#issuecomment-344347407:80,load,load,80,https://root.cern,https://github.com/root-project/root/pull/1328#issuecomment-344347407,1,['load'],['load']
Performance,"We had symbols exposed, which in turn meant symbols were resolved by the dynamic loader,; which in turn meant another libllvm.so could interfere with those of cling. By hiding these; symbols, all symbols are self-contained and not external symbols leak into libCling.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4689:81,load,loader,81,https://root.cern,https://github.com/root-project/root/pull/4689,1,['load'],['loader']
Performance,We have a suboptimal behavior in the way cling optimizes code in O2 mode.; Disable it until the issue is understood and fixed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1211:47,optimiz,optimizes,47,https://root.cern,https://github.com/root-project/root/pull/1211,1,['optimiz'],['optimizes']
Performance,"We have failures in our nightly builds for some MacOS builds, for example [here](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-v6-22-00-patches/LABEL=mac1015,SPEC=noimt,V=6-22/lastCompletedBuild/testReport/) (v6.22, mac10.15). The issue seems to be caused by multiple python versions installed (e.g. system python3 and python3 coming with Xcode 12): it seems that ROOT picks up different versions at different times causing stacktraces that look like this:. ```; Processing /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/root/tutorials/tmva/TMVA_CNN_Classification.C...; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so, 9): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3; Referenced from: /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so; Reason: image not found; Error in <TCling__LazyFunctionCreatorAutoloadForModule>: Failed to load library /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so, 9): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3; Referenced from: /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so; Reason: image not found; Error in <TCling__LazyFunctionCreatorAutoloadForModule>: Failed to load library /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so; IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12PyMethodBase12PyInitializeEv' unresolved while linking [cling interface function]!; You are probably missing the definition of TMVA::PyMethodBase::PyInitialize(); Maybe you need to load the corresponding shared library?; CMake Error at /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/RootTestDriver.cmake:237 (message):",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6563:650,load,loadLibrary,650,https://root.cern,https://github.com/root-project/root/issues/6563,2,['load'],"['loadLibrary', 'loaded']"
Performance,"We intentionally keep macros ""illegal C++"": we have a C++ interpreter and we should benefit from this, removing parts of C++ not needed for interactive use, *especially* for tutorials. We find this simplifies the tutorials. We have exceptions for tutorials where we believe many uses will be compiled. . Being able to compile the tutorials isn't a benefit in and by itself. This PR here came out of https://github.com/root-project/root/pull/10004 which claims ""Precompiles C++ script to potentially speedup (slightly) documentation building"". If that's indeed correct then that's a bug in cling. cling must be as fast as compiled code (if using the same optimizer, the same clang version as cling links against etc). So I'd like to better understand the motivation of this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10195#issuecomment-1075129814:654,optimiz,optimizer,654,https://root.cern,https://github.com/root-project/root/pull/10195#issuecomment-1075129814,1,['optimiz'],['optimizer']
Performance,"We might be in a situation where we linked the library into an executable and; our trigger function is inside it. There is no point in trying to load rdict; and pcm files as it will fail. In that case we exit early avoiding the; invalid state pointed by an assert. This patch is another try to fix the assert in the incrementals. @Axel-Naumann, I have tested and this patch fixes the assert. However it does not fix the test failure. I checked with a local alternative patch which did not have the early exit but just avoided the LoadPCM section and the test fails in the same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3896:145,load,load,145,https://root.cern,https://github.com/root-project/root/pull/3896,2,"['Load', 'load']","['LoadPCM', 'load']"
Performance,"We move to cling, this should now work without explicitly loading; it. This also unblocks the modularization project which doesn't; include MathCore in the minimal base image.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1430:58,load,loading,58,https://root.cern,https://github.com/root-project/root/pull/1430,1,['load'],['loading']
Performance,We need several adjustments to do. First pre-loading of RInterface.pcm in root-project/root@5096f5fffc causes some crashes. Second we seem to still have issues when trying to resolve symbols from the Rcpp library.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8831:45,load,loading,45,https://root.cern,https://github.com/root-project/root/pull/8831,1,['load'],['loading']
Performance,We need to respect the existing ExternalASTSource when setting up the; interpreter. Otherwise the ASTReader (which is the existing source); doesn't receive the required callbacks to properly load C++ modules. This patch now creates a multiplexer that contains our new; ASTSource and the existing one if it's necessary. We also; no longer attach the existing sema source which seemingly; was only a workaround that only works for the special case; were the external sema source and the external AST source; are the same object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1284:191,load,load,191,https://root.cern,https://github.com/root-project/root/pull/1284,1,['load'],['load']
Performance,"We now reset `fMustRunEventLoop` when a new named filter is added.; This fixes ROOT-9117: TDF now correctly re-runs the event-loop if; users ask for a cutflow report for a named filter that has been; added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that; only the new named filters (and possibly new actions) are executed,; but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1377:248,perform,performed,248,https://root.cern,https://github.com/root-project/root/pull/1377,1,['perform'],['performed']
Performance,"We ran the proposed script as `root.exe -l -q a.c` where a.c is:; ```; {; gSystem->Load(""roottest/root/meta/MakeProject/cms310/cms310.so"");; auto f = TFile::Open(""roottest_src_directory/root/meta/MakeProject/CMSSW_3_1_0_pre11-RelValZTT-default-copy.root"");; TTree *tree = nullptr; f->GetObject(""Events"", tree);; for(Long64_t e = 0; e < tree->GetEntriesFast(); ++e) tree->GetEntry(e);; }; ```. and we get consistent to the above stated results. Without this pr >D=0K,e=0.94s,F=5,I=152,O=8,K=0K,p=0K,t=0K,M=307076K,S=0.10s,U=0.77s. With the pr: >D=0K,e=0.84s,F=0,I=0,O=0,K=0K,p=0K,t=0K,M=305576K,S=0.07s,U=0.76s. Here important are M and U.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3012#issuecomment-471630295:83,Load,Load,83,https://root.cern,https://github.com/root-project/root/pull/3012#issuecomment-471630295,1,['Load'],['Load']
Performance,"We read a TTree in the classical way with TBranch pointers.; For improved performance, we deactivate all branches using TTree::SetBranchStatus(""*"",0) as advised at:; https://root.cern.ch/doc/master/classTTree.html#a9fc48df5560fce1a2d63ecd1ac5b40cb. If one first gets the number of entries, then one deactivates all branches, all goes commonly well. But if the TChain is initialized only with a *single* file, then the tree is not read! . This appears to be a bug, since the functionality of a TChain should be independent on the number of input files. I am using ROOT 6.20/06. Minimum example to be executed with `$ root -b -l read_tree.cxx` is:. ```; using namespace std::chrono;. void process_tree(TString name, int nFiles, bool DoGetEntries, bool DoDeactivateBranches ) {. // any root files with a TTree; const TString filename = (""/cvmfs/cms.cern.ch/slc6_amd64_gcc530/lcg/root/6.06.00-ikhhed6/tutorials/hsimple.root"");. TChain* chain = new TChain(""ntuple"");; for ( int i = 0 ; i<nFiles ;i++ ) {; chain->Add(filename);; }. long nEntries = -1;; if ( DoGetEntries ) nEntries = chain->GetEntries();. if ( DoDeactivateBranches ); chain->SetBranchStatus(""*"",0); // this line, together with a previous GetEntries() causes a bug, but only if a single file is passed to the TChain!. // read a single branch; float px,py,pz,random=0.333333;; TBranch* b_random;; chain->SetBranchAddress(""random"", &random, &b_random); // initialize one branch only. auto start = high_resolution_clock::now();// timer start. double sum = 0;; int iev = 0;; int nerrors=0;; const int nrepetitions = 100; // read files more often for a more reliable timing.; for ( int n = 0 ; n<nrepetitions ; n++ ) { // more repetitions for more accurate timing; for ( int i = 0 ; i<chain->GetEntries() ; i++, iev++ ){ // read tree; int bytes = chain->GetEntry(i);; if ( !bytes ) { // some printout (if something goes wrong ;) ); if ( nerrors++ < 3 ) cout<<""Error! No bytes were read!""<<endl; // this prints errors; if ( nerrors==3 ) cout<<""Omi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7567:74,perform,performance,74,https://root.cern,https://github.com/root-project/root/issues/7567,1,['perform'],['performance']
Performance,"We set our own defaults for `CMAKE_CXX_FLAGS_${BUILD_TYPE}$ here: https://github.com/root-project/root/blob/master/cmake/modules/SetUpLinux.cmake#L97. Because cmake sets it own defaults for that variable (initialized by `project(ROOT)`) in the cache and without using `set(... FORCE)` our own settings are not picked up. This is especially important because we would like to have `RelWithDebInfo` builds without `NDEBUG`, which is currently not possible (`NDEBUG` is part of the default cmake variable for `CMAKE_CXX_FLAGS_RELWITHDEBINFO`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6574:244,cache,cache,244,https://root.cern,https://github.com/root-project/root/issues/6574,1,['cache'],['cache']
Performance,"We should add the infamous Open Data benchmarks to rootbench. Originally meant to showcase the DF programming model (see https://github.com/stwunsch/opendata-benchmarks), it went now a little bit out of hand and it's used for measuring ROOT performance (see the fork here https://github.com/masonproffitt/opendata-benchmarks and the forum entry here https://root-forum.cern.ch/t/scalability-of-rdataframes-on-16-cores/44222). At the end, they have nice properties, which we should profile, like a significant amount of jitted code and quite a lot of allocations due to the missing SBO in RVec.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7745:241,perform,performance,241,https://root.cern,https://github.com/root-project/root/issues/7745,2,"['perform', 'scalab']","['performance', 'scalability-of-rdataframes-on-']"
Performance,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff; diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py; index cf0d095e7a..765aea1c56 100644; --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py; +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py; @@ -17,7 +17,7 @@ import types; ; import concurrent.futures; ; -from typing import TYPE_CHECKING; +from typing import Iterable, TYPE_CHECKING; ; from DistRDF.Backends import build_backends_submodules; ; @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):; return logger; ; ; -def RunGraphs(proxies):; +def RunGraphs(proxies: Iterable) -> int:; """"""; Trigger the execution of multiple RDataFrame computation graphs on a certain; distributed backend. If the backend doesn't support multiple job; @@ -83,6 +83,9 @@ def RunGraphs(proxies):; actions belonging to different RDataFrame graphs will be; triggered to avoid useless calls.; ; + Return:; + (int): The number of unique computation graphs executed by this call.; +; Example:; ; @code{.py}; @@ -99,7 +102,7 @@ def RunGraphs(proxies):; ]; ; # Execute the 3 computation graphs; - RunGraphs(histoproxies); + n_graphs_run = RunGraphs(histoproxies); # Retrieve all the histograms in one go; histos = [histoproxy.GetValue() for histoproxy in histoproxies]; @endcode; @@ -121,6 +124,8 @@ def RunGraphs(proxies):; futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]; concurrent.futures.wait(futures); ; + return len(uniqueproxies); +; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13167#issuecomment-1619699859:476,concurren,concurrent,476,https://root.cern,https://github.com/root-project/root/pull/13167#issuecomment-1619699859,2,['concurren'],['concurrent']
Performance,"We should always give the most performant version to users (even those who pick up a ROOT build with `-march=...`). For experts we need to have a way to select a certain computational library, but I'm convinced that this should not be at configure time - again, to ensure that users get exposed to the most performant version.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7415#issuecomment-793953700:31,perform,performant,31,https://root.cern,https://github.com/root-project/root/pull/7415#issuecomment-793953700,2,['perform'],['performant']
