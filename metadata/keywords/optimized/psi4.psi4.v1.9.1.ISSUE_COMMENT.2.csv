quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Deployability,"@loriab `v1.2.1` tagged. With all necessary fixes this time, at least from my testing. I've updated docs and tests. The DALTON inputs and output files for the geometry optimization test are also included.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988#issuecomment-386082337:92,update,updated,92,https://psicode.org,https://github.com/psi4/psi4/pull/988#issuecomment-386082337,1,['update'],['updated']
Deployability,"@loriab after some consideration with @lothian , I think the simplest course of action would be to simply not store the scalar variable. the unit question is somewhat nontrivial, plus there is the issue of scaling the rotation by the molecular weight of the system (which is handled very differently for solvated molecules, but is not accounted for in `ccresponse`). therefore the best way to make sure the user knows what they're getting is to let them compute it themselves from the mixed electric dipole-magnetic dipole response tensor. . following this logic, I also propose removing the scalar electric dipole polarizability, which is also easily computed using the trace of the stored tensor. I would update the new test to reflect this, just want to be sure this is an agreeable solution for everyone before I commit the changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-717483962:707,update,update,707,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-717483962,1,['update'],['update']
Deployability,@loriab ah! I didn't even check for `.a`s vs `.so`s. It looks like the conda recipe passes the shared flag to `b2` so I only had the `.dylib`s for almost all of the libraries. . I toggled the `Boost_USE_STATIC_LIBS` flag in `ConfigBoost.cmake` and the paths appear to be set correctly to find the `.dylib`s in `$HOME/anaconda/envs/psi4-py2.7`. I am checking to make sure that compiles fine now. ( I have to admit I don't really know what the difference between `.so` and `.dylib` is but CMake seems to think the `.dylib`s are okay. . I also modified the recipe so I can build the `.a`s as well. I report back later this evening after I check these options with hombrew boost linked/unlinked to see if having the .`a`s in the search path stops CMake from using the home-brew binaries. . Thanks for the help.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-196536537:180,toggle,toggled,180,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-196536537,1,['toggle'],['toggled']
Deployability,"@loriab ah, it's a minimal basis issue; I already ran into the same issue in ERKALE but forgot to put the patch in Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-455379347:106,patch,patch,106,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-455379347,1,['patch'],['patch']
Deployability,@loriab aren't you still using your own libxc repo? You can just update those files to 3.0.1...?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345818613:65,update,update,65,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345818613,1,['update'],['update']
Deployability,"@loriab could you add a pipeline variable, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560#issuecomment-467843249:24,pipeline,pipeline,24,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-467843249,1,['pipeline'],['pipeline']
Deployability,"@loriab could you configure the pipeline variables, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539#issuecomment-467004339:32,pipeline,pipeline,32,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467004339,1,['pipeline'],['pipeline']
Deployability,"@loriab could you define the variables in the pipeline settings, so the PR can pass. A demonstration on my *Azure* account:; - By default (`ctest.type=quick` and `pytest.type=quick`), the automatic and manual builds behave the same: https://dev.azure.com/raimisg/psi4/_build/results?buildId=478 Time ~1 h; - Setting `ctest.type=full` and manually triggering a build, it does all the ctests: https://dev.azure.com/raimisg/psi4/_build/results?buildId=479 Time ~4 h; - Setting `pytest.type=full` and manually triggering a build, it does all the pytests: https://dev.azure.com/raimisg/psi4/_build/results?buildId=480 Time ~3 h; - `ctest.type=full` and `pytest.type=full` runs out of time. Max time is 6 h.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-462760398:46,pipeline,pipeline,46,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-462760398,1,['pipeline'],['pipeline']
Deployability,"@loriab did you have an easy fix for the svml error? psi4 was working until I installed rdkit and ambertools, and during the process it seems to have over-rode something. now I have the . ```; Traceback (most recent call last):; File ""/home/user/psi4conda/bin/psi4"", line 183, in <module>; import psi4 # isort:skip; File ""/home/user/psi4conda/lib//python3.8/site-packages/psi4/__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: /home/user/psi4conda/lib//python3.8/site-packages/psi4/core.cpython-38-x86_64-linux-gnu.so: undefined symbol: __svml_exp4_mask_e9; ```; error. Thanks",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1036#issuecomment-923928460:78,install,installed,78,https://psicode.org,https://github.com/psi4/psi4/issues/1036#issuecomment-923928460,1,['install'],['installed']
Deployability,"@loriab it does; though I kinda agree with @susilehtola that maybe the `.bin` files could be done with entirely. Also, the binary renaming in 2926990 won't work for the Debian package as it requires `git apply`, the usual Debian machinery just runs `patch` with preset options which can't handle it. So would have to wait for 1.2.2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451911135:250,patch,patch,250,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451911135,1,['patch'],['patch']
Deployability,"@loriab not yet, I think? Are there any more api changes that need to be included? I'm sure Miguel and Micael could be persuaded to make a stable release. However, Miguel is probably still working on porting the functionals into a new Maple interface, so I don't know how much sense it would be to release now, or how difficult it would be to cherrypick that stuff away.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450764575:146,release,release,146,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450764575,2,['release'],['release']
Deployability,"@loriab ok. Micael Oliveira said he'd do the release next week, with the fixes to the MVS and TM functionals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-384512147:45,release,release,45,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-384512147,1,['release'],['release']
Deployability,"@loriab one more note about AMD Ryzen performance: AVX is fully supported (except AVX-512), but internally the floating point units are only 128 bit wide, so any 256 bit wide AVX/AVX2 instructions are split in half to be executed. This means that for current Ryzen/EPYC chips, using AVX is unlikely to offer the significant performance benefit seen for Intel chips, unless it can alleviate some specific bottleneck. But AFAIK there is no separate ""AVX-mode"" like Intel, and running AVX code (i.e. complied for Haswell) is often harmless and does not cause a performance degradation. ; Really the only mayor weak points of Zen CPUs is memory latency and the communication latency between CCX-es (acts kinda like NUMA-on-a-chip). Especially EPYC CPUs are NUMA-like, you should even be able to toggle the NUMA mode in EFI/BIOS between full-on NUMA and try-to-act-like UMA. But really, core-to-core synchronization latency wise a single socket EPYC system acts more like a quad or octa socket, depending on how you look at it.; EPYC is great if you are looking into using multiple GPUs or NVMe drives, it has absolutely massive amounts of PCI-E lanes.; Hope this helps!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391027877:791,toggle,toggle,791,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391027877,1,['toggle'],['toggle']
Deployability,@loriab that's a common problem when adding new functionals. The list of available functionals is updated by the make system by running `get_funcs.pl`. The easiest way to force the list to be regenerated is to remove the build directory and rebuild,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755795443:98,update,updated,98,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755795443,1,['update'],['updated']
Deployability,"@loriab the `install(FILES ""${headers_list} include/lib*)` directives are everywhere in all subdirectories in `src/lib-bin` since we are using the `make_cmake_files.py` script to generate the leaf `CMakeLists.txt`. Most of them are most likely not needed in a proper installation.; Possibly the include directory layout in robertodr/psi4public@d5a193f1 is good enough?; See also #218",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-172786390:13,install,install,13,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-172786390,2,['install'],"['install', 'installation']"
Deployability,"@loriab these were all `bin`-type modules, so the install rule was not added.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1253#issuecomment-424835232:50,install,install,50,https://psicode.org,https://github.com/psi4/psi4/pull/1253#issuecomment-424835232,1,['install'],['install']
Deployability,"@loriab, #843 is related but not fixed: see attached calculations with (a relatively old) master and patched versions:; [master.txt](https://github.com/psi4/psi4/files/2246477/master.txt); [patched.txt](https://github.com/psi4/psi4/files/2246478/patched.txt); ```; pk@dream:~/psi4/tests/ecp_fix_tests/issue-843::grep ""Final E"" master.txt ; @DF-RHF Final Energy: -594.38702051330188; @DF-RHF Final Energy: -297.22774750033523; pk@dream:~/psi4/tests/ecp_fix_tests/issue-843::grep ""Final E"" patched.txt ; @DF-RHF Final Energy: -594.38702051366886; @DF-RHF Final Energy: -297.22774750056516; ```; While the current patch fixes _a_ bug, it doesn't fix _the_ bug. I'll have a look if I can figure out why ghosts still posess ECP's.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1109#issuecomment-409309750:101,patch,patched,101,https://psicode.org,https://github.com/psi4/psi4/pull/1109#issuecomment-409309750,5,['patch'],"['patch', 'patched']"
Deployability,"@loriab, I noticed that you posted a fix for my Psi4/Cfour problem at https://github.com/psi4/psi4/pull/2615. Thank you for that! As I understand correctly, you have the updated files using which all Cfour test jobs run successfully. If so, could you please help me which files have been modified, and from where I can download them?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1168954201:170,update,updated,170,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1168954201,1,['update'],['updated']
Deployability,"@loriab, I would have thought DETCI ROHF MP2 would agree with other codes,; but I can think of at least a couple little reasons it might not. I should; check into this next couple weeks (help me remember). David. On Mon, Mar 7, 2016 at 5:37 AM, Lori A. Burns notifications@github.com; wrote:. > @bozkaya https://github.com/bozkaya, regarding READ_SCF_3INDEX for CD; > calcs, I'll just believe you. For this (#245 (comment); > https://github.com/psi4/psi4/issues/245#issuecomment-186302823); > comment, though, for DF calcs, I'm not seeing that that keyword can make a; > difference. Toggling its presence and value in the below makes no; > difference to the energies. So fyi, I'm not implementing the advice in your; > comment for now.; > ; > mp2totg = psi4.Matrix(2, 3); > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028301835],; > [ 0.0000000000, 0.0000000000, -0.0028301835]]; > mp2tot_vals = [[ 0.0000000000, 0.0000000000, 0.0028193375],; > [ 0.0000000000, 0.0000000000, -0.0028193375]]; > mp2totg.set(mp2tot_vals); > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > set basis cc-pvdz; > set scf_type pk; > set mp2_type df; > set points 5; > set freeze_core false; > set reference rhf; > set READ_SCF_3INDEX true #FALSE # TOGGLE; > ; > set qc_module dfmp2 #occ # TOGGLE; > energy('mp2'); > ; > compare_values(-100.0194112690226973, get_variable('scf total energy'), 6, 'scf'); > compare_values(-0.203779972647527, get_variable('mp2 correlation energy'), 6, 'mp2corl'); > compare_values(-100.2231912416702215, get_variable('mp2 total energy'), 6, 'mp2tot'); > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/245#issuecomment-193199034.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-193492980:1229,TOGGLE,TOGGLE,1229,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-193492980,2,['TOGGLE'],['TOGGLE']
Deployability,"@loriab, my pull request https://github.com/psi4/psi4/pull/366 should address boxes 3-5. I am not sure about box 2. Do we want printing when calling `--new-plugin`? Perhaps the message with the manual link should appear for both conda/nonconda installations. Right now the relevant documentation is in http://www.psicode.org/psi4manual/master/plugins.html.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216#issuecomment-213240900:244,install,installations,244,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-213240900,1,['install'],['installations']
Deployability,"@loriab, with the new DMRG changes, I am not able to compile this directory anymore. Hold off on merging. It seems that CheMPS2 has not updated. I get an error that it can't find chemps2/caspt2.h and when I look at the chemps2 directory, there does not exist a CASPT2 file. However, the new CheMPS2 has this include file. . Well, it looks like the new DMRG detection ran into some trouble. I forgot to remove a usr/local instance of libchemps2 that I have not used in a very long time. The cmake build would not build CheMPS2 if it found this library so I believe this was the root of my problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/405#issuecomment-225029668:136,update,updated,136,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225029668,1,['update'],['updated']
Deployability,"@loriab: Ah, thanks so much! I didn't see that install page. Very helpful! I'll close this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3031#issuecomment-1685414098:47,install,install,47,https://psicode.org,https://github.com/psi4/psi4/issues/3031#issuecomment-1685414098,1,['install'],['install']
Deployability,"@loriab: This sounds good --- I think die+traceback is probably the right; default if the exception isn't caught. On Wed, Aug 8, 2018 at 6:02 PM Lori A. Burns <notifications@github.com>; wrote:. > @CDSherrill <https://github.com/CDSherrill>; >; > Oh, and if an error's raised but not caught, it just shows the traceback; > and triggers coffee:; >; > PsiException: Could not converge SCF iterations in 4 iterations.; >; > Failed to converge.; >; > Traceback (most recent call last):; > File ""stage/usr/local/psi4/bin/psi4"", line 269, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2008, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; > e_scf = scf_wfn.compute_energy(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; > raise e; > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; > self.iterations(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; > raise ConvergenceError(""""""SCF iterations"""""", self.iteration_); >; > ConvergenceError: Could not converge SCF iterations in 4 iterations.; >; > Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; > Psi4 wall time for execution: 0:00:01.01; >; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303:640,patch,patch,640,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303,3,['patch'],['patch']
Deployability,"@loriab: Unfortunately, I don't think it's quite as simple as updating only the `tight-cc-pwcvXz.gbs` and `tight-cc-pwcvXz-ri.gbs` in the `primatives/`. The Psi4 `primatives/basis-cc-pvXz.gbs` files also disagree in a couple cases for these elements with the cc-pVXZ basis sets from Peterson's website. For Lithium cc-pVDZ, for example, it looks like we have basis from `T.H. Dunning, Jr. J. Chem. Phys. 90, 1007 (1989)`, but the higher angular momentum shells were updated in `Prascher, D.E. Woon, K.A. Peterson, T.H. Dunning, Jr., A.K. Wilson, Theor. Chem. Acc. 128, 69 (2011).`. So, in order to add the cc-pwCVXZ bases for Li, Be, Na, and Mg, I'm going to need the tight functions, but also update the `primatives/basis-cc-pvXz.gbs` files, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/727#issuecomment-305862396:466,update,updated,466,https://psicode.org,https://github.com/psi4/psi4/issues/727#issuecomment-305862396,2,['update'],"['update', 'updated']"
Deployability,"@loriab: the following patches to `psi4/share/psi4/plugin/ambit/CMakeLists.txt.template` should fix the above problem. Can you try it when you have a chance?. line 54; ```; extern ""C""; SharedWavefunction @plugin@(SharedWavefunction ref_wfn, Options &options); {; using namespace ambit;. ambit::initialize(); // <== add; ```. line 181:; ```; //B.print();. ambit::finalize(); // <== add. return ref_wfn;; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/593#issuecomment-293693404:23,patch,patches,23,https://psicode.org,https://github.com/psi4/psi4/pull/593#issuecomment-293693404,1,['patch'],['patches']
Deployability,"@loriab: what happens if you set MKL_NUM_THREADS instead of calling the Psi function?. Sent from my iPhone. > On Jun 30, 2017, at 5:29 PM, Lori A. Burns <notifications@github.com> wrote:; > ; > I agree, although this issue was seen on Linux and both psi4 and numpy are using MKL`, just different ones:; > ; > Psi4 libmkl_rt.so of a local c.2016 Intel install; > NumPy libmkl_core.so, thread, lp64 of default-channel c.2017 conda install; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-312382898:351,install,install,351,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312382898,2,['install'],['install']
Deployability,"@loriab; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/1; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587:94,install,installed,94,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587,4,"['configurat', 'install', 'update']","['configuration', 'installed', 'update', 'updates']"
Deployability,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:106,install,installed,106,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131,7,"['configurat', 'deploy', 'install', 'patch', 'update']","['configuration', 'deploy-preview', 'installed', 'patch-', 'update', 'updates']"
Deployability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 5aa048b39 has been issued to your PR branch; * this updates 4 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin ghadocs3` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319:95,install,installed,95,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319,5,"['configurat', 'deploy', 'install', 'update']","['configuration', 'deploy-preview', 'installed', 'update', 'updates']"
Deployability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:95,install,installed,95,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574,6,"['configurat', 'deploy', 'install', 'patch', 'update']","['configuration', 'deploy-preview', 'installed', 'patch-', 'update', 'updates']"
Deployability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816151920:95,install,installed,95,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816151920,6,"['configurat', 'deploy', 'install']","['configuration', 'deploy-preview', 'installed']"
Deployability,"@lothian For EFP I would argue that we should figure out the corner case now while were thinking about it as they are likely to come up again in the future. If we simple pass through the SCF Wavefunction or a blank Wavefunction for these, thats fine. But we need to make it a rule. @fevangelista By the same token, psimrcc doesn't need a Wavefunction if you are ok with the default behavior for Wavefunction-less methods. I could see moving the C1 symmetry conversion to a later date (David has already strongly encouraged me to think about overhauling the Wavefunction class). Everything else I would want in a 1.0 release as they are enhancements that will prevent additional forum posts (documentation, softer fails, and plugins using modern Psi programming practice) or what I would call logical flow\* issues (passing orbitals to SCF, what wavefunction is returned). *Logical flow: If an advanced user is used to certain mechanics working it is quite jarring when a conventional call suddenly does not work for no apparent reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-191759336:616,release,release,616,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191759336,1,['release'],['release']
Deployability,"@lothian I am just happy that I remembered this! . I updated some CC output printing to align a bit better and checked over a few CC test cases. I think everything looks ok, but if someone else could eye ball a couple that would be great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205340495:53,update,updated,53,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205340495,1,['update'],['updated']
Deployability,"@lothian I fixed cc5 in this branch. cc5 now runs, passes, and the output.ref is updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205297042:81,update,updated,81,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205297042,1,['update'],['updated']
Deployability,@mbanck you can easily patch out the few lines of code in Psi4 that require a newer version of libxc. I did it in Fedora a few months ago. See https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450826912:23,patch,patch,23,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450826912,2,['patch'],['patch']
Deployability,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170252262:79,install,installations,79,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262,2,"['configurat', 'install']","['configuration', 'installations']"
Deployability,"@mfherbst , there's a couple of the ddx tests failing now https://github.com/psi4/psi4/actions/runs/4703123664/jobs/8341938828?pr=2906#step:23:739, and I suspect it's because of the v0.4.1 released yesterday since it was working fine with v0.3.0 after your #2918 . Does this sound right? If so, we can pin to v0.3 unless you have a PR in the works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906#issuecomment-1509276521:189,release,released,189,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1509276521,1,['release'],['released']
Deployability,"@mhlechner Can you please update your fork with directions from [here](https://github.com/psi4/psi4/wiki/1_Obtaining#get-updates-3). Also, let us know if any of the directions are misleading!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/500#issuecomment-258734207:26,update,update,26,https://psicode.org,https://github.com/psi4/psi4/pull/500#issuecomment-258734207,2,['update'],"['update', 'updates-']"
Deployability,@obrien951 Can you patch this up for 1.4?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1628#issuecomment-643792621:19,patch,patch,19,https://psicode.org,https://github.com/psi4/psi4/pull/1628#issuecomment-643792621,1,['patch'],['patch']
Deployability,@obrien951 Lets patch this up or close this.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1628#issuecomment-683466334:16,patch,patch,16,https://psicode.org,https://github.com/psi4/psi4/pull/1628#issuecomment-683466334,1,['patch'],['patch']
Deployability,"@psi-rking @avcopan Some more thorough testing of the #859 hotfix above allowed me to reproduce non-deterministic behavior where the IRC may or may not converge after the second step. Output files below. [output1.txt](https://github.com/psi4/psi4/files/1533781/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1533782/output2.txt). I want #859 fixed before trying to fix this issue, because that kills my test cases before they encounter this bug. I see two options for the #859 fix. 1. Forbid the IRC from ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-349520464:59,hotfix,hotfix,59,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464,1,['hotfix'],['hotfix']
Deployability,"@psi4 (we'll see who that reaches). ## Attention. When this is merged:; * `psi4/core.so` won't be named that. It'll be something like `psi4/core.cpython-36m-x86_64-linux-gnu.so`; * `{objdir}/stage/${CMAKE_INSTALL_PREFIX}/bin/psi4`, `/lib`, `share/`, etc. won't be named that. It'll be just `{objdir}/stage/bin/psi4`, `{objdir}/stage/lib`, etc. Any symlinks to `bin/psi4` will need adjusting.; * Next time you build, I recommend `rm -rf {objdir}/stage/*` beforehand so you don't have multiple staged installs lying around.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-416293233:499,install,installs,499,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-416293233,1,['install'],['installs']
Deployability,"@psi4. Assuming the most recent check in passes this PR is imminently ready to merge (Lori is working on the Conda binary part). Short version: Checking code in for the next month will be difficult and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236723542:662,install,install,662,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542,1,['install'],['install']
Deployability,"@raimis Thanks very much - this is exactly the information I needed, and I've been able to reproduce the Azure DevOps results in my own tests. @dgasmith The Azure DevOps failures were associated with how the MDI Library compiles and installs DLL libraries. I've fixed the problems with the library, and all the tests are finishing successfully now. The relevant commits are [here](https://github.com/MolSSI/MDI_Library/commit/25cdcb30abfb4e13ced726249f619ef8acc19582) and [here](https://github.com/MolSSI/MDI_Library/commit/2ea5621ff3ee2020276c588a9962d756cc2cfb18). Thanks for your comments; I've incorporated them in the latest commits. @loriab Thanks very much for these comments. I'll try to address them soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-512852479:233,install,installs,233,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-512852479,1,['install'],['installs']
Deployability,"@raimis This was working for me fine before, but when I do a clean install now on Windows 10 (1809) with Miniconda3, I get the following error when I try to run a simple test job:. `ValueError: Object arrays cannot be loaded when allow_pickle=False`. Are you seeing this? Happy to discuss on Psi4 Slack if real time discussion would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492353928:67,install,install,67,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492353928,1,['install'],['install']
Deployability,"@raimis, I'm sorry I had to switch back some of your changes in #1348. This current PR looks to work for me. For Windows, I don't see any OpenMP configuration errors or notice OMP compiling problems in Azure. If Azure's working, are there additional things to check to make sure I didn't in turn break something you need?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048:145,configurat,configuration,145,https://psicode.org,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048,1,['configurat'],['configuration']
Deployability,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599#issuecomment-276677358:404,integrat,integration,404,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358,3,"['Release', 'integrat']","['Release', 'integration']"
Deployability,"@robertodr A gentle poke here, can you provide a status update?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/810#issuecomment-533552543:56,update,update,56,https://psicode.org,https://github.com/psi4/psi4/pull/810#issuecomment-533552543,1,['update'],['update']
Deployability,@robertodr I have moved the Windows configuration to FindTargetOpenMP.cmake and made some clean up while debugging.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1348#issuecomment-441595235:36,configurat,configuration,36,https://psicode.org,https://github.com/psi4/psi4/pull/1348#issuecomment-441595235,1,['configurat'],['configuration']
Deployability,"@robertodr Made a PR a bit ago, any updates there?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-351387637:36,update,updates,36,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-351387637,1,['update'],['updates']
Deployability,"@robertodr's PR fixes the urgent problem. @jturney, @CDSherrill, @lothian: is there any support for namespacing the includes (e.g., in the conda package, python, chemps, psi4, hdf5, possibly gcc headers are all installed to `prefix/include`). If anyone thinks this isn't a problem, just close the ticket.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173789229:211,install,installed,211,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173789229,1,['install'],['installed']
Deployability,"@shannonhouck Gentle poke here, let us know if this will be make the Psi4 1.4 release or needs to be pushed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855#issuecomment-643792312:78,release,release,78,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-643792312,1,['release'],['release']
Deployability,"@similt I just added options to compute only specific SAPT0 terms (e4070d0024742579a445e084da9dde078310094d). You should be able to use it if you pull Psi4 latest version from Github. I will update the manual shortly, but in the meantime, here is how it works.; The three options are; - sapt0_e10; - sapt0_e20ind; - sapt0_e20disp; If none of these options is specified, SAPT0 proceeds as usual. If one or more of these is specified, only the specified terms are computed. Be aware that the driver will still perform the 3 SCF computations for the monomers and the dimer, and that all preparative work (computing integrals) will always be done.; Also, the \delta_{HF} term is computed from first- and second-order terms, so if some of them are not computed, \delta_{HF} will be wrong. Similarly, exchange scaling is computed from first-order exchange, so it will not be valid if first-order exchange is not computed. However, you can easily compute these terms (see the manual for their definition) from gathering all SAPT0 data from different output files. Simple example to compute only dispersion terms:; molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess sad; sapt0_e20disp true; }. energy('sapt0'). Finally, if redoing the 3 SCF is too much of a hassle, you could write the final orbitals and feed them to the SCF so that they converge in 1 iteration. It's not really ideal but it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-178215766:191,update,update,191,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-178215766,1,['update'],['update']
Deployability,"@susilehtola Right, I was just trying to work out the settings to get an AM=8 build, which is as high as I ever expect to go. This mostly (for me) affects the conda build (which I can patch), but it will also place a hard limit on the AM that Psi4 can build internally. I suppose I should look at your Fedora build to see what's useful. I agree that I don't see why a large constant in the generator should harm the efficiency of the built libraries. I just wish I would have thought of this issue _before_ declaring everything was ready to go this morning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/695#issuecomment-300335205:184,patch,patch,184,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300335205,1,['patch'],['patch']
Deployability,"@susilehtola Thank you for the explanation. Given that we want to run psi4 run on clusters where the maintenance is done by people holding permanent positions, it is quite difficult to have them do anything. I wonder if you can suggest the oldest kernel version that I can purpose them to update to? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792#issuecomment-607181717:289,update,update,289,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607181717,1,['update'],['update']
Deployability,"@susilehtola good news, thank you!. I downloaded the 3.0.1 tarball, compiled with -fPIC and replaced the libxc.a and header files in my psi4 installation with the new ones. Then re-linked psi4. Seemed the quickest way, but not 100% sure this is fully correct. Instead of a segmentation fault I get nans; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -nan -nan -nan . ```. edit: replacing C_SCAN with C_TPSS works gives normal results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345706660:141,install,installation,141,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345706660,1,['install'],['installation']
Deployability,"@susilehtola, I've switched the build-from-src libxc target to v6.1 somewhere, and I'll make sure that makes it into the psi v1.8 release. c-f packaging is already at v6.1. Is there anything else to do in psi4 libxc-wise? Otherwise, I'll bump this to v1.9.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1904#issuecomment-1520899600:130,release,release,130,https://psicode.org,https://github.com/psi4/psi4/pull/1904#issuecomment-1520899600,1,['release'],['release']
Deployability,"@susilehtola, is there a xc4 release with the tweaks in public api?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450763852:29,release,release,29,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450763852,1,['release'],['release']
Deployability,@taylor-a-barnes Can you update this PR for the MDI 1.0 release? We are looking to get Psi4 1.4 out soon and love to get this in!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-592038986:25,update,update,25,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-592038986,2,"['release', 'update']","['release', 'update']"
Deployability,"@taylor-a-barnes I suspect, you are missing some pipeline variables. Check if your pipeline is configured like this:; ![azure_config](https://user-images.githubusercontent.com/2469715/61285389-230b9880-a7c1-11e9-9035-669f83ec66ad.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-511751304:49,pipeline,pipeline,49,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-511751304,2,['pipeline'],['pipeline']
Deployability,"@tgaillard This bug has been fixed by #1299, so it will be fixed in Psi 1.3 and all future alpha/beta versions of 1.3. If you need this issue fixed for your current research, let us know, and we'll help you get Psi updated in the least painful way possible. (Warning: Psi 1.3 includes updates to physical constants, so results will differ slightly from those in Psi 1.2.) Otherwise, we'll close the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1282#issuecomment-431684933:215,update,updated,215,https://psicode.org,https://github.com/psi4/psi4/issues/1282#issuecomment-431684933,2,['update'],"['updated', 'updates']"
Deployability,@timostrunk BTW can you update your issue showing that your points are complete?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133#issuecomment-414423326:24,update,update,24,https://psicode.org,https://github.com/psi4/psi4/pull/1133#issuecomment-414423326,1,['update'],['update']
Deployability,"@tobirolinew, pretty much all you need for runtime are the changes in this file, https://github.com/psi4/psi4/pull/2615/files#diff-3ca8e1e030771d01af412b9603a6f8e06d4c04e44dbcb40a4f7248ff8120efdd . So, you could either make those edits in your local install, or compile psi4 from master, or grab the latest conda package next week after I build them again. I'll also probably back-port these fixes into v1.6.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1169479941:250,install,install,250,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1169479941,1,['install'],['install']
Deployability,@tsexton Any update on this? I can do a quick fix if you are busy.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/713#issuecomment-308200699:13,update,update,13,https://psicode.org,https://github.com/psi4/psi4/issues/713#issuecomment-308200699,1,['update'],['update']
Deployability,"@wpoely86 Yes one of the huge things I wanted to address with the new rewrite is the fact that things like CMAKE_C_FLAGS wasn't being respected. Admittedly we were ignorant of the CMake way to do things when we wrote the first pass. This second pass should be substantially more aligned with CMake philosophy, although by means of disclaimer I do not claim to be a CMake expert. . As for the plugin issue I suspect it will go away. I'm switching us to a superbuild strategy that relies on having things installed. Finally, the way we run tests has completely changed since the last time I tested them with MPI. Taking a quick glance at the scripts I think that the problem might be that the actual tests are run with a Python script and I suspect that the usual CTest options are not being passed to it. For what it's worth, MPI has been removed from Psi4 in my rewrite. The idea going forward is to make plugins responsible for it; we have a similar strategy in Pulsar that I think works nicely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230783977:503,install,installed,503,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783977,1,['install'],['installed']
Deployability,@xiexr151e you should install the BLAS/LAPACK development package using your linux distribution's package manager. (Note that you should install an optimized implementation such as ATLAS or OpenBLAS instead of the reference BLAS/LAPACK implementation.),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-380550429:22,install,install,22,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-380550429,2,['install'],['install']
Deployability,"A (much overdue) update! There is a very significant update to libecpint coming early next week (99% already available on libecpint/readecp branch) with: . - analytical 1st and 2nd derivatives; - general performance improvements; - much better API; - more robust testing. I will have a look at @andysim previous attempts and see if I can get it working, but I will probably need help hooking in the derivatives to Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-698260609:17,update,update,17,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-698260609,2,['update'],['update']
Deployability,"A couple of remarks:; - chemps2 v1.7 is not yet released and will not be until I do a few applications and write a paper myself. The recommended version to use is still v1.6 in the meantime and CASPT2 is therefore not supported yet. But that doesn't mean it shouldn't work.; - One important thing is that I haven't made CASPT2 parallel yet. You will have to wait forever when the number of virtuals is modest / large.; - A second important remark is that I also currently use only pseudocanonical orbitals for DMRG-CASPT2, so for elongated molecules you will waste your time at the moment, because the virtual dimension is way smaller by using localized orbitals. But for that I need to implement the full 4-RDM instead of the diagonal one, and that is not for the very near future. The cumulant approximation is also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:48,release,released,48,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['release'],['released']
Deployability,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172151258:154,update,updated,154,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258,1,['update'],['updated']
Deployability,"A few docs. What's in the conda packages psi4 & psi4-deps and the installer psi4conda?; --------------------------------------------------------------------------. psi4 - has full-featured psi4 itself and necessarily all the link-time qc addons (e.g., chemps2). Of gcc-ness, it has minimal, run-time libraries, not compilers, though, for linux, full gcc and run-time gcc are the same. It doesn't have the run-time qc addons (e.g., dftd3). psi4-deps - does not have psi4 itself (though fine to install it alongside). Does have all the link-time and run-time addons. Does have cmake and sphinx (and python). Of gcc-ness, has full packages, that is, compilers, not runtime packages. installer - has full-featured psi4 itself, all link-time qc addons, all run-time qc addons, and minimal gcc runtime libraries. How to just get Psi4 with minimal conda interaction; ---------------------------------------------------. Download one of the six installers (Linux/Mac; Py27, 35, 36; presently at http://vergil.chemistry.gatech.edu/download/). `bash` it. Follow the prompts and _do_ make the adjustments to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. Done. How to get a pre-build Psi4 into a conda environment of an existing Ana/Miniconda installation; ----------------------------------------------------------------------------------------------. `conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4`. Same for Mac/Linux. Substitute desired python version: 2.7, 3.5, 3.6. Only reason for psi4-deps is to get the qc runtime addons; could say ""dftd3 gcp v2rdm_casscf"" instead of ""psi4-deps""; or leave them out if you don't want them. Activate environment and make the adjustmets to PATH and PSI_SCRATCH that it suggests at the end. Test with `psi4 --test`. How to use all those conda packages to compile Psi4 faster and easier; ---------------------------------------------------------------------. `conda create -n p4deps python=x.x psi4-deps -c psi4`. Sa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-292102715:66,install,installer,66,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-292102715,4,['install'],"['install', 'installer', 'installers']"
Deployability,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-234470967:55,install,installing,55,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967,11,['install'],"['install', 'installation', 'installed', 'installing']"
Deployability,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:6,update,updates,6,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812,2,"['Install', 'update']","['Installation', 'updates']"
Deployability,"A lot has changed in libxc 4, but that's all on the back-end side. Libxc 3 still used hand-written functionals, whereas libxc 4 uses computer algebra generated code. I'd say there's a lot of things that work better in libxc 4. But some of the added functionals might not be thoroughly tested. The release of libxc 4 is pending improvements to the test suite, so that functionals that work pass on a variety of compilers and architectures.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-330907649:297,release,release,297,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-330907649,1,['release'],['release']
Deployability,"A patch in format-patch format is here: https://gist.github.com/mbanck/7292871. I don't feel like cloning psi4 on github right now, but if this is a requirement for getting the patch applied, I'll do it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/26#issuecomment-27649815:2,patch,patch,2,https://psicode.org,https://github.com/psi4/psi4/issues/26#issuecomment-27649815,3,['patch'],['patch']
Deployability,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/552#issuecomment-267762083:216,install,installed,216,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083,1,['install'],['installed']
Deployability,"ARY_DIRS}` to external/downstream/gpu_dfcc seems to do the trick and gpu_dfcc builds OK (within the psi4 tree). It does also need CMAKE_CUDA_COMPILER and CUDA_TOOLKIT_ROOT_DIR defining before it's happy (rather than having defaults). I added them to CMakeCache.txt but presumably they'd work if added to the original cmake command. Once built, it fails when trying to install gpu_dfcc within the tree:; ```; [ 64%] Performing build step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; [ 70%] Performing install step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; Install the project...; -- Install configuration: ""Release""; -- Up-to-date: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/gpu_dfcc/gpu_dfcc.so; CMake Error at cmake_install.cmake:61 (file):; file INSTALL cannot find; ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external/__init__.py"". Makefile:84: recipe for target 'install' failed; make[3]: *** [install] Error 1; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:73: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install] Error 2; CMakeFiles/Makefile2:1419: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; It looks like __init__.py isn't being generated from __init__.py.in for some reason. It _could_ be because I've been hacking stuff about: I'll try with a fresh tree (modified with your additions) tomorrow. Interestingly, the stand-alone version I built doesn't even link against libiomp5.so or and LAPACK or BLAS libraries (apart from the CUDA libraries):;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634:1116,install,install,1116,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634,2,['install'],['install']
Deployability,"AS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Found gCP: /usr/local/bin/gcp; -- Adding test cases: Psi4 + gCP; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/bsenjean/Documents/Git_repositories/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:7167,install,install,7167,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['install'],['install']
Deployability,"According to Jet ""The segfault occurs on some systems because Python has already been shutdown but Boost Python objects still exists."" This is fixed and the fix will come out in the next minor release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/8#issuecomment-19999150:193,release,release,193,https://psicode.org,https://github.com/psi4/psi4/issues/8#issuecomment-19999150,1,['release'],['release']
Deployability,"Acknowledged. Two problems, one solved, one not. * First issue is for v1.5 you have to grab a certain libint2 build as described here: https://github.com/psi4/psi4/issues/2593#issuecomment-1145503791 Probably you didn't get to the segfault the ""newest"" L2 would cause because the missing symbol got in the way. :-(; * Second issue is the missing symbol. I've seen it myself with py38. (It can incidentally be solved by preloading `libirc` if you've an Intel installation lying around (`LD_PRELOAD=/psi/gits/software/intel/oneapi/compiler/2021.1.1/linux/compiler/lib/intel64_lin/libirc.so python -c ""import psi4""` is clean), but that's not a worthy solution. But clearly the missing symbol wasn't happening in the earlier issue. Current theories:; * some newer version/build of a package got uploaded in the past week or so that throws off this env; * py37 _did not_ get updated versions of packages on the psi4 channel with the 1.6 release, so it's getting old, compatible versions of some psi4-channel based package and is fine, while py38 and py39 got a fresh package and got broken.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2596#issuecomment-1151532059:458,install,installation,458,https://psicode.org,https://github.com/psi4/psi4/issues/2596#issuecomment-1151532059,3,"['install', 'release', 'update']","['installation', 'release', 'updated']"
Deployability,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301289886:475,configurat,configuration,475,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886,2,['configurat'],['configuration']
Deployability,"Actually, that wasn't it either. Starting from scratch with a fixed install location still results in the failed install. The command I used now was; ./setup --cc gcc --cxx g++ --fc gfortran --blas /usr/lib64/libopenblaso.a --lapack /usr/lib64/libopenblaso.a --pcmsolver on --chemps2 on --ambit off --prefix /home/work/psi4/install -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib objdir",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/460#issuecomment-239647371:68,install,install,68,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-239647371,3,['install'],['install']
Deployability,"Actually, you still do have to pass `--accelerate` to `setup`, as it's not on by default. @robertodr , is there a reason accelerate shouldn't be on by default for release builds?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-122120131:163,release,release,163,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122120131,1,['release'],['release']
Deployability,Added some more docs warning and a release note item. Thanks for the approval!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1310708464:35,release,release,35,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1310708464,1,['release'],['release']
Deployability,Added the releasenotes from psicode downloads page to the github release: https://github.com/psi4/psi4/releases/tag/1.0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-232781392:10,release,releasenotes,10,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232781392,3,['release'],"['release', 'releasenotes', 'releases']"
Deployability,"Admittedly the error message should be updated to be more informative, but; the short answer is a single atom doesn't have a vibrational frequency. More generally any molecular system has 3 times the number of atoms, total; degrees of freedom; the difference between that and the number of external; degrees of freedom is the internal degrees of freedom, i.e. the; vibrations. An atom has three external degrees of freedom and thus in turn; has 0 internal degrees of freedom. Hope that helps.; On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:. > Attempting frequency() on atomic species fails irrespective of charge,; > multiplicity, and reference type.; > ; > Typical error message:; > ; > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > : basic_string::replace: File """", line 26, in; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > frequency; > psi4.thermo(wfn, wfn.frequencies()); > ; > Thanks,; > -drhaney, -- that's ""D. R."", not Doctor.; > ; > Typical input file attached (C atom, neutral triplet).; > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204210196:39,update,updated,39,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204210196,1,['update'],['updated']
Deployability,After chatting with the LibXC dev's I think we can do a few workarounds so that LibXC 4 works for us. If I get a second I might work on getting that upgrade through.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345250225:149,upgrade,upgrade,149,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345250225,1,['upgrade'],['upgrade']
Deployability,"After installing the binary patches, I get the error; ```; psi4.driver.p4util.exceptions.MissingMethodError: Method=ccsdt is not available for any derivative level. Did you mean? ccd ccsd ccsd(t) cisd cisdt cisdtq lccsd ksdt; ```; with the above input as well as `tests/mrcc/ccsdt/input.dat`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2071575524:6,install,installing,6,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2071575524,2,"['install', 'patch']","['installing', 'patches']"
Deployability,"Ah I see. The limited benchmarking I did that showed better performance from the mini forge build must be due to something else then. I would look into this more to be more thorough, but there are too many processes running on my machine to get any useful information from them. At any rate, it looks like it should be possible to build numpy from source using Accelerate as a backend now, but I don't see anything in the release notes for numpy > 1.21.0 about changing the BLAS for the macOS-arm64 wheels. I have to imagine that in the not-too-distant future (unless more bugs have been uncovered) that future arm64 wheels will be build using Accelerate since this seems to be the most suitable BLAS for this platform. Let me see if I can find out the exact build that I installed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961483124:422,release,release,422,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961483124,2,"['install', 'release']","['installed', 'release']"
Deployability,"Ah, NumPy issue. Needs a rebuild after Psi4 1.3.2 release since NumPy fixed a security bug and broke quite a few downstream repos. You can try downgraded NumPy by one patch version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492354867:50,release,release,50,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492354867,2,"['patch', 'release']","['patch', 'release']"
Deployability,"Ah, nevermind - now I see that the problem is in the **install** directory, which I did not remove after my last OS upgrade. Why does the build even use that?!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1256#issuecomment-424017716:55,install,install,55,https://psicode.org,https://github.com/psi4/psi4/issues/1256#issuecomment-424017716,2,"['install', 'upgrade']","['install', 'upgrade']"
Deployability,"Ah, nevermind, the pybind11 issue is because it had been updated and I just needed a recompile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1694#issuecomment-520789143:57,update,updated,57,https://psicode.org,https://github.com/psi4/psi4/issues/1694#issuecomment-520789143,1,['update'],['updated']
Deployability,"Ah, ok. I think I see the problem in the code. Patch coming shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/171#issuecomment-133544723:47,Patch,Patch,47,https://psicode.org,https://github.com/psi4/psi4/issues/171#issuecomment-133544723,1,['Patch'],['Patch']
Deployability,"Ah, recent releases are now on c-f, including through py311. please use ` conda install psi4 python=3.11 -c conda-forge/label/libint_dev -c conda-forge` from https://psicode.org/installs/v18/ with choices conda/3.11/stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3031#issuecomment-1685413743:11,release,releases,11,https://psicode.org,https://github.com/psi4/psi4/issues/3031#issuecomment-1685413743,3,"['install', 'release']","['install', 'installs', 'releases']"
Deployability,"Ah, the plan is to have only official releases through `conda install psi4 -c psi4`. Any nightly build will be through `conda install psi4 -c psi4/label/dev [-c psi4]` (bracketed part needed if any QC dependencies need to be got from the main psi4 channel). This is in the docs, but not any that have built yet :-). So next week there'll be a 1.1 on main psi4 channel. We're gearing up for `1.1rc2` now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-301264612:38,release,releases,38,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-301264612,3,"['install', 'release']","['install', 'releases']"
Deployability,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194993406:363,update,update,363,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406,2,"['install', 'update']","['install', 'update']"
Deployability,"Ah, yes you are right. I have a class wrapper around psi4 that sets the initial configurations and that has the default value 64. That must be why I have the spikes. Because psi4 knows that is available to it because I requested it in the initial configurations. . Okay so I set up tests where I am generating an interaction energy surface scan for a dimer. I am using `mp2/cc-pvqz-ri`. I didn't know if the resolution identity error was implied like gaussian or if I had to explicitly state it. It's about 72 point single point energy scans. . **Test 1**. I reduced down the `64` to `16`. ```bash; -pe smp 16; ```. Reset the default where this is happening to set the thread to one. with the OMP and MKL flags set in the job submission script. . ```bash; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```; ```python. psi4.set_num_threads(1). ```; **Test 2**. Only rely on the flags in the job submission script. ```; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```. ```python. # psi4.set_num_threads(1); ```. It seems like so far the loads seem to be continuously used. I will get some graphs in the morning for you to look at.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201:80,configurat,configurations,80,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201,3,"['configurat', 'continuous']","['configurations', 'continuously']"
Deployability,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:350,install,install,350,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742,3,['install'],"['install', 'installation']"
Deployability,"All requested changes made. I have also run the _entire_ test suite, modulo plugins and dft benchmarks. I stumbled across a rather critical bug that way: empirical_dispersion needed to be updated with the new FINDIF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1024#issuecomment-410711426:188,update,updated,188,https://psicode.org,https://github.com/psi4/psi4/pull/1024#issuecomment-410711426,1,['update'],['updated']
Deployability,"All right, I believe all outstanding issues up to this point have been resolved! As of recent, all checks and queries based on GauXC's AM (e.g., L2 cross-validation) are now conducted at runtime instead of compile-time, GauXC GPU memory allocation is user-controllable, and the build system is set up to propogate `CMAKE_CUDA_ARCHITECTURES` to GauXC in a reasonable fashion. Current issues in CI seem to revolve around problems with finding a suitable `basis_set_exchange` package to use for configuration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2105124429:492,configurat,configuration,492,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2105124429,1,['configurat'],['configuration']
Deployability,"All right, I moved the location of the `FORCE_PEDANTIC` definition, as per the suggestion of @loriab. This seems to work, as when I compile a local instance of this Psi4 branch with an internally-built IntegratorXX, it now compiles, whereas it did not previously.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018100402:202,Integrat,IntegratorXX,202,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018100402,1,['Integrat'],['IntegratorXX']
Deployability,"All the AM comparisons changed back from (fb42b53) in https://github.com/loriab/psi4/commit/79c7f2248831cb2f7323cf93eebf7d26ec06bb7b . Also, insufficient AM messages updated. I tested it systematically, so I have confidence in the current settings, but if there was evidence in favor of the fb42b53 logic, I'd like to know it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241014675:166,update,updated,166,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241014675,1,['update'],['updated']
Deployability,All the build type and Python version combinations works:; - `cmake.build_type=Debug` and ` python.version=3.6`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=515; - `cmake.build_type=Release` and ` python.version=3.6`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=517; - `cmake.build_type=Debug` and ` python.version=3.7`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=518; - `cmake.build_type=Release` and ` python.version=3.7`: https://dev.azure.com/raimisg/psi4/_build/results?buildId=519,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539#issuecomment-467403433:196,Release,Release,196,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467403433,2,['Release'],['Release']
Deployability,"All these tests are successful on my mac, which not the current version of psi4. Then, I download the latest psi4 binary on my linux cluster, then dfomp2p5-grad1 is still successful. However, dfomp3-grad2 fails. When trace the error, I saw that the SCF energies are quite different. Hence, there should be some changes in the SCF module recently. Now, I am compiling the current version of psi4, and I will update the tests that you were mentioned. . I can attribute the failure of all tests whose name ended with ""2"", which means they are open-shell molecules. However, dfomp2p5-grad1 should be successful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/190#issuecomment-157470643:407,update,update,407,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157470643,1,['update'],['update']
Deployability,"All worked well. I'll check with the student to make sure he is happy too. So this is my mindless list of commands, including the suggested correction and a few small changes to install inside the p4dev environment:. ```; wget 'https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh'; chmod +x Miniconda3-latest-Linux-x86_64.sh; ./Miniconda3-latest-Linux-x86_64.sh -b; source miniconda3/bin/activate; conda create -n p4dev psi4-dev python=3.7 -c psi4/label/dev -y; conda activate p4dev; conda install libint am8 -c psi4/label/dev -y; git clone https://github.com/psi4/psi4.git && cd psi4; `psi4-path-advisor --gcc` -DMAX_AM_ERI=8 -DENABLE_simint=OFF -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} -DPYMOD_INSTALL_LIBDIR=/python3.7/site-packages; cd objdir && make install -j`getconf _NPROCESSORS_ONLN`; ```. Few notes for the casual reader:. - The suggested option ` -DENABLE_simint=OFF` may no longer be needed at some point in the future.; - Installing in `${CONDA_PREFIX}` is only safe when you don't install the PSI4 package with conda in the same environment. Edits:; - Added activate line.; - Added -y options; - Updated to py3.7; - Install Python modules in the canonical location.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-437007249:178,install,install,178,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-437007249,7,"['Install', 'Update', 'install']","['Install', 'Installing', 'Updated', 'install']"
Deployability,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235916559:144,install,install,144,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559,5,['install'],"['install', 'installation', 'installing']"
Deployability,Almost certainly because Ben took down some old qcel/qcng docs in preparation for the qcfractal release. I'll hunt down the replacement. Probably this can still join the merge queue b/c only Azure is required to pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318:96,release,release,96,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318,1,['release'],['release']
Deployability,"Already [known and fixed](https://github.com/psi4/psi4/pull/1607) in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542:117,release,release,117,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542,4,"['install', 'release']","['installed', 'release']"
Deployability,"Alright, I made the changes. I am now uncertain why Azure Pipelines was unhappy with one of the commits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2089#issuecomment-768401902:58,Pipeline,Pipelines,58,https://psicode.org,https://github.com/psi4/psi4/pull/2089#issuecomment-768401902,1,['Pipeline'],['Pipelines']
Deployability,"Also fails with `set diag_method mitrushenkov`. Not completely surprised as the `olsen` and `mitrushenkov` methods have not been tested since this was integrated into Psi4 from Psi3 as far as I know. Its a bit of strange error in debugging as it looks like the H0 block was not initialized even though it was. Ill look into when I have time, but thats not likely to be soon. Do you really want something besides Davidson iterations or is this just a report that it doesn't work?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/559#issuecomment-271455005:151,integrat,integrated,151,https://psicode.org,https://github.com/psi4/psi4/issues/559#issuecomment-271455005,1,['integrat'],['integrated']
Deployability,Also updates the unit tests for DF_Helper.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/742#issuecomment-308568798:5,update,updates,5,https://psicode.org,https://github.com/psi4/psi4/pull/742#issuecomment-308568798,1,['update'],['updates']
Deployability,"Also, I note that your latest cdash build named LAB-intel15.0.3-mkl-release-conda doesn't show a cc54 crash. Strangeness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/130#issuecomment-121981549:68,release,release-conda,68,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121981549,1,['release'],['release-conda']
Deployability,"Also, please `grep` for comments related to `dftd3` in the code and update them as needed. `proc.py::scf_helper` certainly needs to be updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142#issuecomment-896096206:68,update,update,68,https://psicode.org,https://github.com/psi4/psi4/pull/2142#issuecomment-896096206,2,['update'],"['update', 'updated']"
Deployability,"Alternatively to the [separate libtool build of libint2](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), you can build a Libint2 externally with cmake or internal to psi4. 1. Get some extra dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:226,install,install,226,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,2,['install'],"['install', 'installed']"
Deployability,Always `git pull --rebase upstream master` to update. I've [experienced](https://github.com/psi4/psi4/pull/1010#issuecomment-390319253) this pain before.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-450866105:46,update,update,46,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-450866105,1,['update'],['update']
Deployability,"Ambit's easy, `conda install pyambit -c conda-forge`. There's nothing in psi that actually links to it, so it's fine to simply install psi4 binary and ambit binary into the same env. For CheMPS2, are you wanting to run chemps2 through psi4? That's easy to enable if you're building psi4 from src. But there isn't a good sol'n for using psi4 binary. I'd suggest compiling chemps2 from src if you want chemps2 w/o psi4 linkage. Or wait until we finally re-plugin-ize it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854:21,install,install,21,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854,2,['install'],['install']
Deployability,"An update - after a colleague rebooted the node I'd been using for testing with the `noxsave` kernel parameter (disabling AVX capability visibility in the CPU flags), I retried the same test files with the same settings and env on the same machine. ...and now I get the ""correct"" answer -- the one I'd get with `set wcombine false`. So I think despite 9163cbd08865d26129cfbaf5c302fc14f870f30f there is still a sketchy use of DGETRI or DGETRF somewhere getting pulled in by an edge-case I'm hitting (because, again, if I tweak the number of processes, or the memory, or the basis set, or the geometry ever so slightly, it goes away!). I think I should flag @andysim here?. I'll continue with `wcombine` for my genrealized fix and I'm am happy to keep testing this weird job on the same machine as patches come down-the-line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967:3,update,update,3,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967,2,"['patch', 'update']","['patches', 'update']"
Deployability,"An updated script that works with current master:; ```; from qcengine.programs.dftd3 import get_dispersion_aliases; from qcengine.programs.dftd3 import dashcoeff; from psi4.driver.procrouting.dft import dft_builder; from psi4.driver import procedures; import psi4. for dtype in dashcoeff.keys() :; for func in dashcoeff[dtype][""definitions""]:; check=func in procedures['energy']; if check == False:; check=""{0:s}-{1:s}"".format(func,dtype) in procedures['energy']; if check == False:; alt= psi4.p4util.find_approximate_string_matches(func,dft_builder.dict_functionals,3); print(dtype, func.upper(), ""not found! maybe? :"",alt); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/996#issuecomment-481998433:3,update,updated,3,https://psicode.org,https://github.com/psi4/psi4/issues/996#issuecomment-481998433,1,['update'],['updated']
Deployability,And regarding the build: I cloned Psi4 yesterday on a machine where I never had Psi4 installed. The configure is also telling me that pybind11 could not be located and that it will be built.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288530704:85,install,installed,85,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288530704,1,['install'],['installed']
Deployability,"And toggle https://github.com/psi4/psi4/blob/master/external/upstream/pcmsolver/CMakeLists.txt#L41 off, as you recommended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988#issuecomment-385191049:4,toggle,toggle,4,https://psicode.org,https://github.com/psi4/psi4/pull/988#issuecomment-385191049,1,['toggle'],['toggle']
Deployability,"And, updated. This'll be good to go once tests pass. Sphinx build was clean, and the edited files looked good when viewed locally. This is a bigger change than I expected, so I'll leave it to somebody else to double-check my work and merge in. The dark blue vs. light blue thing turned out not to be related to section headers, but to whether I had clicked on a specific subsection.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883426326:5,update,updated,5,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883426326,1,['update'],['updated']
Deployability,"And, yes, the reason for using tee so extensively in my Travis scripts is twofold: a) making the output stream continuous so that we don't timeout, as @jturney said, and b) allowing us to filter extraneous output to ensure we don't print too much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/247#issuecomment-183717105:111,continuous,continuous,111,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183717105,1,['continuous'],['continuous']
Deployability,And/or add to our cmake scripts a check for numpy. . It would also be useful to add cmake checks for the C++11 specific features we use and error out at configuration time. I think it tests for some but doesn't error out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/407#issuecomment-225233909:153,configurat,configuration,153,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225233909,1,['configurat'],['configuration']
Deployability,Another set of instructions installing numpy+vecLib:; https://developer.apple.com/forums/thread/695963?answerId=697568022#697568022,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-1007349779:28,install,installing,28,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-1007349779,1,['install'],['installing']
Deployability,"Any chance it could be a disk space issue? I created a minimal env with cmake, eigen, mpfr, python, GCC, and it unpacked fine. Gnu compilers, but surely that wouldn't matter at the unpacking stage. ```; -- Found LAPACK MKL: /theoryfs2/common/software/intel2019/compilers_and_libraries_2019.4.243/linux/mkl/lib/intel64/libmkl_rt.so;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Could NOT find Libint2 (missing: Libint2_DIR); -- Suitable Libint2 could not be located, Building Libint2 5-4-3-6-5-4 instead.; -- Suitable qcelemental could not be located, Building qcelemental instead.; -- Suitable qcengine could not be located, Building qcengine instead.; -- Suitable Libxc could not be located, Building Libxc instead.; -- Suitable BrianQC could not be located, please contact info@brianqc.com to obtain BrianQC; -- Documentation targets available: doxyman (html); -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); -- Adding test cases: Psi4; -- Running some tests requires pytest. Please install it manually (try: /home/psilocaluser/toolchainconda/envs/minbld/bin/python3.6 -m pip install pytest); -- Configuring done; -- Generating done; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2147#issuecomment-813663636:1099,install,install,1099,https://psicode.org,https://github.com/psi4/psi4/issues/2147#issuecomment-813663636,3,['install'],['install']
Deployability,Any chance the rc2 installer behaves differently?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-874964763:19,install,installer,19,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-874964763,1,['install'],['installer']
Deployability,"Any chance you're building CMAKE_BUILD_TYPE=Debug? That's been seen, and healed upon switch to Release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2399#issuecomment-1131736286:95,Release,Release,95,https://psicode.org,https://github.com/psi4/psi4/issues/2399#issuecomment-1131736286,1,['Release'],['Release']
Deployability,Any status update on this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/842#issuecomment-433958214:11,update,update,11,https://psicode.org,https://github.com/psi4/psi4/pull/842#issuecomment-433958214,1,['update'],['update']
Deployability,Any update on whats wrong with this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/818#issuecomment-345243568:4,update,update,4,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-345243568,1,['update'],['update']
Deployability,Anyhow MP2 orbital-optimization works (I compared it with ORCA OO-MP2).; It would be interesting to find out the date of df-ocepa release. Vladimir.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152804235:130,release,release,130,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152804235,1,['release'],['release']
Deployability,"Anything involving tensor contractions is just moving code around, and isn't something I'm worried about. Test updates, I'm confident are correct. Things worth checking:; * Code readability; * Nothing obviously suspicious in the DIIS call or setup in `occ_iterations`; * `opt-irc-2`, are we okay punting on this until PyOptking?. It may also be worth letting @susilehtola have a look, since he has experience with OO. Now that I type this out, it occurs to me that I may also need to change some of the DIIS keywords along with the DIIS behavior change... As I recall, UB had separate keywords for OO or non-OO DIIS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1846#issuecomment-596133916:111,update,updates,111,https://psicode.org,https://github.com/psi4/psi4/pull/1846#issuecomment-596133916,1,['update'],['updates']
Deployability,"Anyway, does this look like a Boost installation problem? If so I would certainly want to fix that for my other users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411#issuecomment-226008003:36,install,installation,36,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226008003,1,['install'],['installation']
Deployability,"Are all of these really necessary for a 1.0 release? Some of them seem to me to be design-/feature-related issues that could wait until 1.X or 1.0.X. For example, are we worried at this point that general users are going to run EFP calculations?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-191517725:44,release,release,44,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191517725,1,['release'],['release']
Deployability,"Are you able to make the internal stage directory optional based on a cmake option?. The internal stage directory adds complexity without providing any benefit - with or without it the files should be installed into the real stage directory, but internal stage directory makes the process more complex and error prone.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214289555:201,install,installed,201,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214289555,1,['install'],['installed']
Deployability,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343715845:50,deploy,deployment,50,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845,4,"['deploy', 'install']","['deployment', 'install', 'installed']"
Deployability,"Are you definitely selecting the libint2 via `conda install psi4=1.5 libint2=*=hc9558a2_9 python=3.7 -c psi4`? I can definitely see a ""latest"" libint2 causing a segfault. The above cmd is from https://psicode.org/installs/v16/ with linux/conda/py37/previous selected. It's admittedly unexpected to not be able to use the installs/v15 cmd.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593#issuecomment-1145503791:52,install,install,52,https://psicode.org,https://github.com/psi4/psi4/issues/2593#issuecomment-1145503791,3,['install'],"['install', 'installs']"
Deployability,Are you getting your plugin cmake line from `psi4 --plugin-compile`? It does return a `CMAKE_PREFIX_PATH` like the below:. ```; cmake -C /theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax/share/cmake/psi4/psi4PluginCache.cmake -DCMAKE_PREFIX_PATH=/theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax .; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775#issuecomment-320452824:165,install,install,165,https://psicode.org,https://github.com/psi4/psi4/issues/775#issuecomment-320452824,2,['install'],['install']
Deployability,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:32,release,release,32,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498,4,"['configurat', 'release']","['configuration', 'release']"
Deployability,"Are you using a detected pre-build pybind11? Pybind11 changes so often just now (we usually update to their HEAD once a month and need to adapt the Psi4 code) that we can't guarantee that any but the [tag](https://github.com/psi4/psi4/blob/master/external/pybind11/CMakeLists.txt#L11) works. In case you're alarmed by the fork, the alterations are just changes to the build, not to pybind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261727164:92,update,update,92,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261727164,1,['update'],['update']
Deployability,"As I said, my current take is idiotic. The only thing kept around is the Conda installation itself, not the environment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444496031:79,install,installation,79,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444496031,1,['install'],['installation']
Deployability,"As a matter of fact, I was confused too :smile: What is the policy you plan on following for external projects? Upgrade the `GIT_TAG` anytime the external project is updated or a more conservative approach? I assumed the latter, hence the lack of changes in Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-225985713:112,Upgrade,Upgrade,112,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225985713,2,"['Upgrade', 'update']","['Upgrade', 'updated']"
Deployability,"As an update, these will be enabled in the Psi4 1.2 patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/39#issuecomment-274263328:6,update,update,6,https://psicode.org,https://github.com/psi4/psi4/issues/39#issuecomment-274263328,2,"['patch', 'update']","['patch', 'update']"
Deployability,"As for Debian and 1.2(.1), I have patched out libxc similar to what @susilehtola suggested in https://github.com/psi4/psi4/issues/1302#issuecomment-450826912 - for the next development cycle I guess psi4 will be able to use a system ilbxc, but time was running out. 1.2.1 is currently bulding here: https://buildd.debian.org/status/package.php?p=psi4 - there are a couple fo test suite failures I have not diagnosed yet, I'll try to find time over the weekend.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451496547:34,patch,patched,34,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451496547,1,['patch'],['patched']
Deployability,"As of last July when I made the psi PR and xc issue, the current api changes were sufficient (though there were some further tweakers that could get us a couple more functionals). If you think there’s hope of a tag, I can update the PR on this side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450767109:222,update,update,222,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450767109,1,['update'],['update']
Deployability,As the code is in place and we have a long test for it I say lets go ahead and get this in. This is a good unit of work currently and I think the discussion on how to integrate this properly into Psi4 is a long one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/921#issuecomment-369678429:167,integrat,integrate,167,https://psicode.org,https://github.com/psi4/psi4/pull/921#issuecomment-369678429,1,['integrat'],['integrate']
Deployability,"Aside from the warning, the install is working properly whether one builds psi4so or not. The incompatibility of exclude_from_all and install seems well known, and I've only seen a rather complicated procedure to handle this w/o the warning. Whether psi4so gets built is not known at configure time, and I haven't seen a cmake check dependent on whether a make target was executed. I agree the warning is annoying, but is it really a problem for anything?. > On Jun 19, 2016, at 10:59 PM, Susi Lehtola notifications@github.com wrote:; > ; > Configuring my psi4 I get the warning message; > ; > WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; > ; > Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/415#issuecomment-227061602:28,install,install,28,https://psicode.org,https://github.com/psi4/psi4/issues/415#issuecomment-227061602,4,['install'],['install']
Deployability,"At end of [this page](http://www.linuxfromscratch.org/lfs/view/development/chapter06/gcc.html) is a nice run-down of what's supposed to come with a gcc. `liblto_plugin.a` (the static) seems to be an oddity. Glad the conda pkg is working. You're getting it off the `test` [subchanel](https://anaconda.org/psi4/chemps2/files), I hope? `conda install chemps2 -c psi4/label/test` . That should be a well-built one, so let me know if it acts up. Build options is conda's weakness, I think. For instance, I can't use their `git` because I'm addicted to `git add -p`, and they don't build with perl enabled. There's ""features"" in the works to counteract this, but I can't suggest any other gcc right off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288472702:340,install,install,340,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288472702,1,['install'],['install']
Deployability,"At various times Psi4 has been made python3-compatible, and then that compatibility diminishes as the developers don't use py3. We're in the middle of an infrastucture update at present (build and python bindings). After that, python3 support and/or switch is likely, so probably this calendar year. I'm sorry it probably can't be this month, but there's so many under-the-hood changes that we want to decouple them as much as possible. A py35 package is definitely a target (and will be far easier when we don't have to deal with Boost).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-246136990:168,update,update,168,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-246136990,1,['update'],['update']
Deployability,"Awesome. Thanks for all the info. I hadn't realized the ""main"" user-facing basis set files were formed by scripts that composed other files, so I wouldn't have done this properly had I not asked :). I'll do this tomorrow. Sent from my iPhone. > On Jun 1, 2017, at 7:00 PM, Lori A. Burns <notifications@github.com> wrote:; > ; > Thanks! Could you instead just update the files tight-cc-pwcvXz.gbs and tight-cc-pwcvXz-ri.gbs that live here? Those are the ""w-core"" and ""w-core-ri"" that get composed (e.g., here and here) into the actual basis set files to keep everything consistent. I'll run the scripts afterward to do the composing, so don't feel you need to follow the README in primitives/ . Let me know if you've any questions – I wasn't an experienced scripter when I put this together.; > ; > On Andy's comments, any comment that you add about the origin to the top of the primitives/*.gbs files will get carried through to the final basis set file. And you're not (I think) creating new basis sets, just adding elements to existing basis sets, so there shouldn't be any need to set fitting defaults for orbital bases.; > ; > @susilehtola, I am exceedingly grateful for EMSL. But if I trusted their internal consistency on basis sets that should contain the same info, I wouldn't have the crazy basis file summing scheme in Psi4. Admittedly, I haven't reexamined EMSL in a few years.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/727#issuecomment-305644835:359,update,update,359,https://psicode.org,https://github.com/psi4/psi4/issues/727#issuecomment-305644835,1,['update'],['update']
Deployability,BLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3448,install,installation,3448,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['install'],['installation']
Deployability,"Back to the examples from https://github.com/psi4/psi4/issues/817#issuecomment-351739145, @robertodr has a scheme that won't get the dir right from within the psi input file, but it will fix the dir upon completion of psi4 execution, as shown below. Would that fix your pipeline for now?. ```; >>> cat test.py; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()). >>> psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; >>> pwd; /home/raimis/debug/psi4_PCM; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356990910:270,pipeline,pipeline,270,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356990910,1,['pipeline'],['pipeline']
Deployability,"Bad luck -- opt13 hits memory problems. It passes the ""in-core AOs"" check with 200 kb to spare (14042044 and 14074472 below are need and supplied in ints), then runs out of memory for AO blocking. The result of the print statement in second snippet is `AAAA 1: 14176380 > 14074472 || 3 == 65`. Should we put padding back or go another route?. ```; ==> Integral Setup <==. DFHelper Memory: AOs need 0.104621 GiB; user supplied 0.104863 GiB. 14042044 14074472; Using in-core AOs. Traceback (most recent call last):; File ""stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 1113, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 639, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2068, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 1360, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 84, in scf_compute_energy; self.initialize(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 178, in scf_initialize; self.initialize_jk(self.memory_jk_). RuntimeError:; Fatal Error: DFHelper: not enough memory for (p shell) AO blocking! required memory: 0.105622[GiB].; Error occurred in file: /home/psilocaluser/gits/hrw-release/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862:648,release,release,648,https://psicode.org,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862,3,['release'],['release']
Deployability,"Based on your writing, I assume you're a student researcher. Posting error messages _like this_ is not a good way to get help. Large input files like this make it difficult for developers to find the actual problem. It's best practice to simplify the input file as much as possible while still making the error clear. Sometimes, doing that can tell _you_ where the problem is. If you don't know how to do this kind of troubleshooting, consult your seniors in your research group or your professor. I've played around with your latest input file and can confirm that you have made a fairly straightforward mistake, but you've discarded important information. As an exercise, please post a _simplified_ input that reproduces your problem, and a _complete_ error message. Once you've done that, I'll update the error message to be more explicit and offer some advice on how to bypass this. (Though once you understand the error, it's fairly straightforward.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955:797,update,update,797,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955,1,['update'],['update']
Deployability,"Basic documentation is now added. I think the only thing missing is to push a recent version of CPPE (0.0.8) to conda, @loriab .; Then, one could install CPPE in the travis procedure. Other than that, this is ready for merge, in my opinion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-507618854:146,install,install,146,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-507618854,1,['install'],['install']
Deployability,"Be aware that analytic Hessians are available for Hartree–Fock (and a few DFT fctls that no one uses) only. So if wB97X-D is the target, it probably is best to prototype with `freq(..., dertype='gradient')` for consistency (as you were already doing). For all those displacements, QCFractal is the proposed way to run through them in parallel. You can get an idea how it works with a ""snowflake"" calc that just uses all the threads on a single node (and doesn't require database storage setup). conda-wise you'd need to `conda install qcfractal postgresql -c conda-forge`. An example is https://github.com/psi4/psi4/blob/master/tests/ddd-deriv/input.dat#L40-L47 . Snowflake is a lightweight single-node route. The full QCFractal approach is backed by a database (yours; not MolSSI's) and handles distributing gradient jobs through your cluster's queue. It takes a little more setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575:527,install,install,527,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575,1,['install'],['install']
Deployability,"Because of the switch from `QMMM()` obj to `embedded_charges` arg (req'd for DDD), all current inputs will break anyway. Upgrade guidance is already in place: https://github.com/psi4/psi4/pull/1351/commits/232d0378f893d619ecf16d95fc59281e948fbb23#diff-6c69f4c34c8ea7d7015fd7abef2e5a88R123 . Since reason can't guide one to a sensible default, I'm against the units of Mol influencing anything outside the `molecule {...}` block. I agree that the `Q X1 Y1 Z1 CHARGE1` is appealing, but I think we want to address this as a whole with all the multipoles. Andy, Daniel, and I got started on this for a day last September, then L2 took over. Schema started over at https://github.com/MolSSI/QCElemental/pull/133 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625894875:121,Upgrade,Upgrade,121,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625894875,1,['Upgrade'],['Upgrade']
Deployability,"Before I start reviewing, is this a 1.4 target? Lori [has decreed](https://github.com/psi4/psi4/pull/2154#issuecomment-870728272) that the target 1.4 release date is next week.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190#issuecomment-871423573:150,release,release,150,https://psicode.org,https://github.com/psi4/psi4/pull/2190#issuecomment-871423573,1,['release'],['release']
Deployability,"Before anything else, update to a more recent version of Psi4 and see if there is still an error. Psi4 1.1 is almost three years old, and there have been a lot of improvements since then. Instructions to download the latest stable version of Psi, Psi4 1.3.2, can be found [here](https://admiring-tesla-08529a.netlify.com/installs/v132/).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1828#issuecomment-593935057:22,update,update,22,https://psicode.org,https://github.com/psi4/psi4/issues/1828#issuecomment-593935057,2,"['install', 'update']","['installs', 'update']"
Deployability,Before the release of 1.4 we should ensure that these monomer calculations are not included by default and are opt-in only to keep currently released behavior.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-558877867:11,release,release,11,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-558877867,2,['release'],"['release', 'released']"
Deployability,"Being one of those who thought psi4 1.0 to be a good idea, I'll state that my main requirement is that the project name is `psi4` and that we have the ability to bump major (in major.minor.patch) in an API change without bumping psi generations to psi5. If everyone prefers the stable release as `psi4` & `4.0.0`, with future `psi4` & `5.0.0` instead of stable release `1.0.0` and future `2.0.0`, I can live with that. (Of course the psi5 folks someday may regret that decision.) Maybe it's time to start naming major releases after (house)cats.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-182945585:189,patch,patch,189,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182945585,4,"['patch', 'release']","['patch', 'release', 'releases']"
Deployability,"Below is an overview of the M11 situation. I'm mainly looking for opinions on whether I'm entering the functional wrong or if the parameter hookup may need adjustment after Libxc 3-->4 changes + new dict func initialization. This is the first use of `use_libxc` for a LRC. ---. Ok, I believe I'm now using `use_libxc` correctly for LRC fctls (test case still unhappy):. ```; funcs.append({; ""name"": ""M11"",; ""x_functionals"": {; ""HYB_MGGA_X_M11"": {; ""use_libxc"": True; }; },; ""x_hf"": {; ""use_libxc"": ""HYB_MGGA_X_M11""; },; ""c_functionals"": {; ""MGGA_C_M11"": {}; },; ""description"": ' M11 Meta-GGA XC Functional\n',; ""citation"": ' R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011\n',; ""doi"": '10.1021/jz201170d',; }); ```. Aren't really any other M11 fctls in Libxc to get confused by:; ```; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11_L 75 /*M11-L correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11 76 /*M11 correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_X_M11_L 226 /*M11-L exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_HYB_MGGA_X_M11 297 /*M11 hybrid exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_MGGA_X_M11 225 /* Worker for M11 functional */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_HYB_MGGA_XC_M11 462 /* M11 functional from Minnesota */; ```; This turns into psi output; ```; => Composite Functional: M11 <=. M11 Meta-GGA XC Functional. R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011. Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_HYB_MGGA_X_M11 [omega = 0.2500]. => Exact (HF) Exchange <=. 1.5720 HF,LR [omega = 0.2500]; 0.4280 HF. => Correlation Functionals <=. 1.0000 XC_MGGA_C_M11; ```; which doesn't match; ![screen shot 2018-04-20 at 2 19 31",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383182397:806,install,install-libxc,806,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383182397,2,['install'],['install-libxc']
Deployability,"Boost compilation is really a royal pain... Can you try this:. ```; using intel-linux : : /opt/cray/craype/2.2.1/bin/CC ; using mpi : : mpich ;; ```. it is supposed to work, but I tried on my laptop with two different versions of GCC installed and it's always the default version that gets picked.; You might want to give a shot also to the suggestion in the third post in this forum thread:; http://boost.2283326.n4.nabble.com/MPI-how-to-compile-Boost-MPI-on-Cray-Linux-td4634179.html",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/196#issuecomment-163389379:234,install,installed,234,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-163389379,1,['install'],['installed']
Deployability,"Broadly, [psithon](http://psicode.org/psi4manual/master/tutorial.html) is when you make a molecule with `molecule name {...}`, use other non-strictly-python syntax in your input and submit the file to the executable `bin/psi4`, while [psiapi](http://psicode.org/psi4manual/master/psiapi.html) is when you `import psi4`, make a molecule with `name = psi4.geometry(...)`, use strictly python syntax, and submit the file to python interpreter. Sounds like you use psithon (only choice until Oct 2016 (dev) or May 2017 (release)), though you might like psiapi. Have you tested the fix with #818? My concern, once I looked carefully (albeit late at night, so I could be talked down), was that to handle pcm there's a snippet of code in the inputparser (only psithon passes through the input parser) that 818 _didn't_ change and a very similar snippet (that only psiapi uses) that 818 _did_ change. So I worry that 818 _didn't_ fix your problem and _did_ break pcm in psiapi mode for me (shows up in `psi4 --test` that's actually running psiapi). If 818 fixes your problem, then I'm imagining things. Could you read this over, @robertodr, and see if it raises your alarm? pcm in `psi4 --test` is broken for me, and this was my theory why.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356713683:516,release,release,516,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356713683,1,['release'],['release']
Deployability,"Btw does the x2c code actually do the exact treatment, i.e. update the transformation matrices at (every) iteration?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/868#issuecomment-347519616:60,update,update,60,https://psicode.org,https://github.com/psi4/psi4/issues/868#issuecomment-347519616,1,['update'],['update']
Deployability,"Btw, @dgasmith , I didn't `pull --rebase` this one because the sequential patching hits a merge conflict that I resolved some time ago (we'd both messed with scf_grad.cc at some point). When this is ready to go I'll squash the commits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230533062:74,patch,patching,74,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230533062,1,['patch'],['patching']
Deployability,"Building from ToT in conda at home, I can confirm that `initialize_lebedev` in fact is never called... it's optimized straight out of the code! (I couldn't find anywhere where it got called, so I am not surprised). ```; (base) liz@Gaston:~/Development/psi4/objdir/stage/tests$ nm ../lib/psi4/core.cpython-38-x86_64-linux-gnu.so | grep lebedev; 00000000020dbe80 b _ZN3psi13SphericalGrid16lebedev_mapping_E; ```. Doing the same breakpoint tests using the line-numbers in ToT cubature.cc, I can also see that `initialize_lebedev` is never called, and `lebedev_mapping_` ends up with no entries in it when it's first accessed. Will work on a patch now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735#issuecomment-1267804371:638,patch,patch,638,https://psicode.org,https://github.com/psi4/psi4/issues/2735#issuecomment-1267804371,1,['patch'],['patch']
Deployability,"By the way, C++ folks, @bennybp , @jturney , @ryanmrichard , what/how strong are your feelings towards installing headers behind namespaces?. Consider an external project that (1) have only one or two public headers, (2) aren't likely to be conflicting header names (e.g., `efp.h`, `pcmsolver.h`, `PCMInput.h`), and (3) don't already install behind project directory like `include/libefp/` and `include/PCMSolver/`. Do you feel strongly enough about namespaces to forcibly insert a project directory (possibly with a CMake option so that headers installed default way _or_ Psi4 way)?. In cases where there is a project directory under includes, do you favor (1) `-I/path/to/outer/install/includes` and `#include <project/project_header.h>` or (2) `-I/path/to/inner/install/includes/project` and `#include <project_header.h>`?. I think I favor not injecting a project library when the header structure is simple and option (1) on the second question.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239211359:103,install,installing,103,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239211359,5,['install'],"['install', 'installed', 'installing']"
Deployability,"By the way, I've managed to modify the checker to also run the code style validation on Python using YAPF. [Here is an example](https://github.com/PCMSolver/danger-python-example/pull/1) I'll integrate that too as soon as the modifications to the checker make it upstream.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/809#issuecomment-334001557:192,integrat,integrate,192,https://psicode.org,https://github.com/psi4/psi4/pull/809#issuecomment-334001557,1,['integrat'],['integrate']
Deployability,"By the way, MKL/Intel compiler performance is actually reasonably good on recent AMD Ryzen/Epyc CPUs, the only thing that may need to be done, is to patch the binaries with [this tool](https://github.com/jimenezrick/patch-AuthenticAMD). What it does, is look for CPU detection checks, and disable the ""cripple_AMD()"" paths that MKL, and Intel compilers often tend to insert. When this is done, AMD CPUs will get to run the same, optimized/vectorized code paths that an Intel CPU would run, instead of the unoptimized/less optimized path that is intended to be run by non-Intel CPUs. This is just fine, since Ryzen CPUs are actually very happy to run code optimized for Haswell, in fact IIRC for a long time the best --march= flag to use with GCC on Ryzen has been ironically --march=haswell.; So using MKL and Intel compiled binaries are just fine on Ryzen systems, just make sure to patch the MKL and compiled binaries. PS: we are in the process of acquiring some Ryzen systems, so in a couple months I will be able to provide actual test results",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390958853:149,patch,patch,149,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390958853,3,['patch'],"['patch', 'patch-AuthenticAMD']"
Deployability,"By the way, and I realize that this is quickly getting off-topic, but I am baffled that the 1.0 release wasn't tweeted from @psi_code... I'm following the commit feed, but there was no obvious ""release 1.0"" or ""bump version to 1.1devel"" commits, so I totally missed it until now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-232787398:96,release,release,96,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232787398,2,['release'],['release']
Deployability,"By the way, you're quite right to leave the PSIDATADIR business to conda. I only mentioned it because having that set is a way to lead the conda binary astray. I didn't have any problem with the SAPT test case upon install onto a fresh machine. Closing, but do reopen or start another issue if you've any further problems. Or for just questions about the new information-passing, try out forum.psicode.org . Thanks for helping us debug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182669910:215,install,install,215,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182669910,1,['install'],['install']
Deployability,CI error with the recent updates: . ```; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 9 100 9 0 0 46 0 --:--:-- --:--:-- --:--:-- 49; tar: Error opening archive: Unrecognized archive format; Error: Process completed with exit code 1.; ```. Seems to be the CI acting goofy again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406:25,update,updates,25,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406,1,['update'],['updates']
Deployability,"CMake already declares those variables and they are in the build ; documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252929596:639,update,updated,639,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596,1,['update'],['updated']
Deployability,"CMake is still back magic too me, but i just tried again from scratch and actually the error occurs when making psi4-core. The Simint library is installed before and cmake finds it in the correct path. ```; [ 10%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/gshell.cc.o; [ 10%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/integral.cc.o; In file included from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/vectorization/intrinsics_avx.h:7:0,; from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/vectorization/vectorization.h:11,; from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/ostei/ostei_config.h:3,; from /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/simint.h:4,; from /home/kruse/Progs/psi4.custom/psi4/src/psi4/libmints/siminteri.h:34,; from /home/kruse/Progs/psi4.custom/psi4/src/psi4/libmints/integral.cc:55:; /home/kruse/Progs/psi4.custom/objdir2/stage/home/kruse/Progs/psi4.deleteme/include/simint/vectorization/intrinsics_sse.h:7:35: fatal error: simint/cpp_restrict.hpp: No such file or directory; #include ""simint/cpp_restrict.hpp""; ^; compilation terminated.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356928723:145,install,installed,145,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356928723,1,['install'],['installed']
Deployability,"CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1931,Install,Installing,1931,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Install'],['Installing']
Deployability,Can we rebase and patch up this PR now that #1591 is in as well. Be good to look at migrating this change in as well.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1581#issuecomment-497955232:18,patch,patch,18,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-497955232,1,['patch'],['patch']
Deployability,"Can you grant me write access to your fork of PCMSolver?; 1. I already use the OpenMP Autocmake module, just not its latest version, which I will update.; 2. Testing for Python 3 support will be easier starting from your current version than the mess I currently have on my development branch... :disappointed: . The Travis and Distelli builds are not building PCMSolver, neither are they running the `pcmsolver` tests in Psi4. Am I missing something here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599#issuecomment-276601209:146,update,update,146,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276601209,1,['update'],['update']
Deployability,Can you just remove the internal stage directory and make it install like all other cmake based projects?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325758134:61,install,install,61,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325758134,1,['install'],['install']
Deployability,"Can you update the description of the PR to say what it does? Plus, if it is ready to merge when the testing is complete please click ""Ready to go"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-220310110:8,update,update,8,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220310110,1,['update'],['update']
Deployability,"Can you update the test to also test using MOs obtained from an SCF that did _not_ finish successfully?. I like the interface, but it'd be best to get more opinions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190#issuecomment-857127925:8,update,update,8,https://psicode.org,https://github.com/psi4/psi4/pull/2190#issuecomment-857127925,1,['update'],['update']
Deployability,"Certainly doesn't look correct... maybe one of the team knows exactly what; this is coming from. Seems like a required library that psi4 expects to be; installed is not installed (or not installed in the expected location). On Mon, Apr 3, 2017 at 2:44 PM, tanorjb <notifications@github.com> wrote:. > Hello,; >; > I am working on a university project and want to confirm that Psi4 is; > running correctly. When I run the test that the binary installation guide; > specifies I get the following error:; >; > [image: image]; > <https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/675>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhTNc393EsuLqC8YxKtbTATrTkzZks5rsT35gaJpZM4Mx72O>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-291237788:152,install,installed,152,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291237788,4,['install'],"['installation', 'installed']"
Deployability,"CheMPS2 is the latest version released today, since i need CASPT2.; Sorry, no idea how to verify tags of CheMPS2. I separately compiled psi4.0.5 and latest version of CheMPS2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185853311:30,release,released,30,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185853311,1,['release'],['released']
Deployability,"Classes are hidden by default because when we expose a class as `PSI_API`, changing that class affects plugin developers, so we need to add warnings before we actually make the changes. And that takes time. So we can expose a class if it's useful, but we're not going to expose a class by default. Could you elaborate on what your usecase is for this particular class? Before exposing the class, I'd like to make sure you really do need this class instead of something else in the `libmints` machinery. I believe that some pieces moved around during our recent upgrade to libint2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214:561,upgrade,upgrade,561,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214,1,['upgrade'],['upgrade']
Deployability,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410#issuecomment-227006245:253,install,installed,253,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245,2,['install'],"['install', 'installed']"
Deployability,"Closing this as there's nothing to be done on Psi4's side, and this will resolve naturally when Fedora package updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531#issuecomment-272725891:111,update,updated,111,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-272725891,1,['update'],['updated']
Deployability,Closing this out as the 1.1 release is imminent. Several places link back to this thread for reference.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-301263002:28,release,release,28,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-301263002,1,['release'],['release']
Deployability,"Code updated to use a C++ class as a wrapper to the Python interface. The result is _very _ similar to the old interface, but I was able to eliminate redundant arguments. There's more ripping out of old `libdiis` tech that I could do (`diisentry.cc` is now unused), but I'll wait to hear that the current interface looks good before gutting any more code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136:5,update,updated,5,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-986822136,1,['update'],['updated']
Deployability,"Conda development packages updated to psi4-1.4a1.dev163 - thanks @loriab ! I must have gotten confused above, it is actually #1607 that resolves the issue. It is also marked as backport, so in case 1.3.2 is planned, we shouldn't forget. Closing this one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611#issuecomment-490665325:27,update,updated,27,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-490665325,1,['update'],['updated']
Deployability,Confirmed - builds succesfully with gcc7 with this patch.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/633#issuecomment-283692563:51,patch,patch,51,https://psicode.org,https://github.com/psi4/psi4/pull/633#issuecomment-283692563,1,['patch'],['patch']
Deployability,Confirmed fixed with the latest patch files for MRCC.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1176411227:32,patch,patch,32,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1176411227,1,['patch'],['patch']
Deployability,Consolidated and expanded in RN: https://github.com/psi4/psi4/releases/tag/v1.3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406#issuecomment-468774358:62,release,releases,62,https://psicode.org,https://github.com/psi4/psi4/issues/1406#issuecomment-468774358,1,['release'],['releases']
Deployability,"Cool! Ill look into this later, I think I patched up Distelli with help from GT folks. Ping me if it goes down again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295384269:42,patch,patched,42,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295384269,1,['patch'],['patched']
Deployability,"Cool, I think this looks great! Thank you for patching SAD up. @psi4/maintainers @CDSherrill Any last comments here before merging?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-454390292:46,patch,patching,46,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-454390292,1,['patch'],['patching']
Deployability,"Cool, glad to see these updates. Thanks for pinging me about the naming. I don't have a strong preference for POL vs IND. I suppose being; consistent with IND is a good thing. Does it make sense to alias these; variables so either version works? Might be less confusing for people; consulting the EFP docs. I don't really like EFP_AI_XXX. I do like pre-pending with EFP so that all; EFP keywords start with that. But AI connotes Artificial Intelligence more; easily than ab initio, which I assume it's supposed to mean. I think I; like QM better. (EFP_QM_XXX). This makes sense in a QM/MM context, which; this basically is (EFP being a very advanced MM method). Additionally, I'm not sure the docs are not totally clear... I'm not; totally sure what this means:. /*- Do include polarization energy term in EFP computation? (QMEFP_POL c.; v1.1) -*/. Is this the polarization of the EFP by the QM region, or the polarization; of the QM region by the EFP?. On Tue, May 1, 2018 at 10:38 AM, Lori A. Burns <notifications@github.com>; wrote:. > @CDSherrill <https://github.com/CDSherrill>, you might want the; > opportunity to weigh in on this commit; > <https://github.com/psi4/psi4/pull/993/commits/609a84f64a50e5dee8728fcaa9a19cfaebffb4c2>,; > as it involves keyword names for EFP and our compromise between SAPT-like; > and libefp-like. Please see top post of PR for discussion.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/993#issuecomment-385686547>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdlhxccTVCdSWeK_EOxZgrE6MEQvnks5tuHNogaJpZM4TsPv1>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993#issuecomment-385707749:24,update,updates,24,https://psicode.org,https://github.com/psi4/psi4/pull/993#issuecomment-385707749,1,['update'],['updates']
Deployability,"Cool, thanks for the update. Big fan of this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/881#issuecomment-351773593:21,update,update,21,https://psicode.org,https://github.com/psi4/psi4/pull/881#issuecomment-351773593,1,['update'],['update']
Deployability,"Correct, @ryanmrichard , what you describe is what's going on. One could get confused, though, if changes to `objdir/../psi4/share` sometimes had an effect (if there had been a `make` (changes applied to `stage/...` through internal install)) and sometimes didn't. It wasn't hard to figure out, just trying to fend off others' confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240472831:233,install,install,233,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240472831,1,['install'],['install']
Deployability,"Correction (I have a very bad cold at the moment so my mind is even less reliable than usual):; The spherical harmonics expressed in terms of cartesians in the th transformation matrix in gdma.f90 are not normalized to unity but they should be orthogonal with respect to integration over a sphere. Note that the x^i y^j z^k are not the normalized v(i,j,k) of Schlegel and Frisch but literal products of powers of x, y and z.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875:271,integrat,integration,271,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472388875,1,['integrat'],['integration']
Deployability,"Crash replicated. Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's `ldd` and psi4's (`envname/lib/pythonx.x/site-packages/psi4/core.so`). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Indeed, if I install psi4 the way you listed into `p4env` and then create _another_ env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (`sys.path.append('/path/to/p4env/lib/python3.6/site-packages/`), I can `import psi4` just fine. Next problem is that `psi4.test()` or any molecule specification just fails. This one is new to me, and 20 min hacking did not solve it. One suspicion is that regex is involved, and regex is the big reason psi4 ships with its own gcc (5.2) rather than the longstanding conda default of 4.8. But on the other hand, everything c++ is supposed to be statically linked in to avoid such troubles. So you've found a real problem, and I don't have a ready solution. The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Copying people who have had related problems. @dsirianni, @j3mdamas, Pascal (hit a `bad_cast` error)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345402467:335,install,install,335,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345402467,3,"['install', 'rolling']","['install', 'rolling']"
Deployability,Culprit identified: Boost. So _some_ non-custom-install boost libraries on _some_ architectures go haywire on _some_ DGEMMs. I'd feel better if such things announced themselves at link-time rather than run-time. My apologies for raising an overly general alarm.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-199094163:48,install,install,48,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-199094163,1,['install'],['install']
Deployability,"Daniel Smith <notifications@github.com>; wrote:. > Description; >; > The DFT_CUSTOM_FUNCTIONAL keyword died at some point so I started to; > examine how to re-enable it (@loriab <https://github.com/loriab>) and I; > was also bugged about HF-3C gradients (@bwb314 <https://github.com/bwb314>).; > Luckily it turns out I had already done most of the work at some point (I; > have 3 more of these branches apparently that I need to merge). Basically; > this works finishes the movement of trying to distinguish between DFT and; > SCF where SCF is now a very basic DFT ""functional"". This could lead it; > towards ""functionals"" are just SCF + stuff where the stuff could be XC,; > PCM, -D, external potentials, etc.; >; > I recall @adabbott <https://github.com/adabbott> is willing to document; > this.; > Todos; >; > Notable points that this PR has either accomplished or will accomplish.; >; > - *Developer Interest*; > - SCF is now basically a very vanilla case of DFT; > - Adds finite difference Hessians from gradients for -D corrections; > - *User-Facing for Release Notes*; > - Enables HF-3C gradients and Hessians.; >; > Status; >; > - Ready to go; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/799; > Commit Summary; >; > - XC: Work towards the UKS XC derivative kernel; > - Driver: Removes extraneous _dft_* funcs in favor of _scf_*; > - fd: Can quite fd funcs with print=0; > - gcp: Fixes analytical Hessians with fd gcp; > - proc: workaround for post-scf methods; > - xc: removes dft_functional keyword; > - Hess: Finishes up HF3C Hessians; > - DFT: Allows arbitrary dft_functionals to be called with SCF; > - DFT: Adds dft-custom test; > - DFT: Adds a MP2 example using a DFT reference; >; > File Changes; >; > - *M* psi4/driver/driver_util.py; > <https://github.com/psi4/psi4/pull/799/files#diff-0> (8); > - *M* psi4/driver/p4util/optproc.py; > <https://github.com/psi4/psi4/pull/799/files#diff-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/799#issuecomment-330258817:1155,Release,Release,1155,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817,1,['Release'],['Release']
Deployability,"Dean Jonathon,. Thank you for your quick reply. I installed Psi4 by executing the bash script `Psi4conda-1.6-py38-Linux-x86_64.sh` (with the command `bash Psi4conda-1.6-py38-Linux-x86_64.sh -b -p /xstorage/tobias/bin/psi4`). I guess I installed the 1.6 version:. ```; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.6 release; ```; Thanks again. Best regards,. Roland",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155136649:50,install,installed,50,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155136649,3,"['install', 'release']","['installed', 'release']"
Deployability,"Dear Bartek,. FYI, I did some additional investigating and discovered that some problems were introduced in PSI4 regarding restarts. You do need to set ""force_restart true"" (that will be corrected in the next release), but you also need to specify the file numbers assigned to the binary files so that PSI4 knows where the necessary wfn data is stored. Normally the files are named using the process ID number of the psi4 parent process, which changes from run to run. However, for a restart, you need to tell PSI4 which number to use using the ""filename"" keyword. For example, if your binary files were named, e.g., psi.60235.h2o.35, the process ID was 60235. To restart, place the following line at the TOP of your input file:. filename 60235. If you also set force_restart = true, then the CC codes will try to grab the amplitudes from the appropriate file. I'll be interested in hearing if this works for you. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 4, 2013, at 10:22 AM, sbart76 notifications@github.com wrote:. > Thanks for the quick reply. I am running these jobs on my local workstation with only one drive and of which I am the only user. I keep all scratch files in the job directory by setting:; > ; > psi4_io.set_default_path('./'); > ; > in my .psi4rc file. I will check the force_restart keyword. Does the program print the information about the reason of not using the restart files somewhere? That would be useful I guess...; > ; > Bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-29866542:209,release,release,209,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29866542,1,['release'],['release']
Deployability,"Dear Jonathon,. The idea is that ones orbitals are optimized there is no need to rotate MOs further. Hence, just semi-canolicalize MOs and compute energies. However, after original implementation there has been lot of revisions in convergence criteria. I think during these modifications the equality of Lagrangian and usual energy is somewhat slightly broken. I will update DFOCC module in this week and push it to Lori's repo. During this update I will fix this issue. @JonathonMisiewicz . Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509#issuecomment-459946532:368,update,update,368,https://psicode.org,https://github.com/psi4/psi4/issues/1509#issuecomment-459946532,2,['update'],['update']
Deployability,"Default switched to `adcc`, if available. Old test cases for built-in code still use the built-in code. Fixed a bug where it was impossible to _select_ the built-in code. Docs updated accordingly. @loriab @maxscheurer @mfherbst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700:176,update,updated,176,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700,1,['update'],['updated']
Deployability,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:2374,Release,Release,2374,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,2,"['Release', 'install']","['Release', 'install']"
Deployability,"Diagnosis: simint is sly (or, you can't defeat the header search). Completely fresh build dir, configured from the start to build simint locally with sse (`-DCMAKE_DISABLE_FIND_PACKAGE_simint=ON -DSIMINT_VECTOR=sse`). Consequently every signal in sight (see below) is set to local build and sse. _But_, there's still a simint installed alongside libint, etc. and that simint is avxfma. And it is those simint headers that show up in `./psi4-core-prefix/src/psi4-core-build/src/psi4/libmints/CMakeFiles/mints.dir/CXX.includecache` and are presumably defining SIMINT_AVX and thus triggering the offending `intrinsics_avx.h` inclusion. In the end, the same trouble as with multiple pybind11's – CMake can't trump native C++ header-seeking, so one has to keep any interferences out of sight. Resolved, sorry for the wild goose chase. ```; #pragma once; #define SIMINT_SSE; ```. ```; >>> grep -ir simint_VECTOR .; ./CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/CMakeFiles/simint_external.dir/build.make:	cd /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build && /Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DSIMINT_STANDALONE=OFF -DENABLE_TESTS=OFF -DSIMINT_VECTOR=sse -DSIMINT_MAXAM=6 -C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-Release.cmake ""-GUnix Makefiles"" /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/simi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356840364:326,install,installed,326,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356840364,1,['install'],['installed']
Deployability,"Diazonium, I believe your assessment is correct and I have little to add here unfortunately. While thread safety in the pthread code has been improved recently, OpenMP is still considered the safer option. (Though you could try a pthread build - ideally of the current ""develop"" branch that should soon become the 0.3.0 release - with USE_SIMPLE_THREADED_LEVEL3=1 which should work around at least some of the remaining bugs.) ; Please create issues for any OpenBLAS bugs you find, ideally with some standalone code that makes it easy to reproduce and track down the problem. I am anything but an expert on multithreading, but at least there are powerful debugging tools available now that simply did not exist when K.Goto wrote; the library that OpenBLAS builds upon. ; (Incidentally my own involvement with OpenBLAS came about through dft as well, though in my case it is condensed matter codes like Elk and Wien2k)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926:320,release,release,320,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390436926,1,['release'],['release']
Deployability,Did I read right above that `make install` has to be performed before `ctest`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235903234:34,install,install,34,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235903234,1,['install'],['install']
Deployability,Didn't we use to install the psi4 headers into `prefix/include/psi4` ?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173890912:17,install,install,17,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173890912,1,['install'],['install']
Deployability,"Different keywords that do the same thing really isnt in the Psi4 keyword ethos. I would suggest simply setting the `qc_module detci` keyword as you have done in the past. FNO code is toggled [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procedures/proc.py#L918). However, without some kind of overhaul to support attributes this is unlikely to help you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/598#issuecomment-276377431:184,toggle,toggled,184,https://psicode.org,https://github.com/psi4/psi4/issues/598#issuecomment-276377431,1,['toggle'],['toggled']
Deployability,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252927823:344,update,updated,344,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823,1,['update'],['updated']
Deployability,Do you have all the patches installed?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070618193:20,patch,patches,20,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070618193,2,"['install', 'patch']","['installed', 'patches']"
Deployability,"Doesn't seem to be working too great; I get on my machine; ```; $ psi4 -n 8 ; 	SAPT0 energy with Ca2+, without ECP: computed value (-0.095615678) does not match (-0.095616042) to 8 digits.; Traceback (most recent call last):; File ""/home/work/psi4/install.susi/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 38, in <module>; File ""/home/work/psi4/install.susi/lib/psi4/driver/p4util/util.py"", line 230, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SAPT0 energy with Ca2+, without ECP: computed value (-0.095615678) does not match (-0.095616042) to 8 digits.; ```; and the result is the same regardless of the guess...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-455380290:248,install,install,248,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-455380290,2,['install'],['install']
Deployability,Dont forget you can just `conda create -n cformat -c conda-forge clangdev`. Really recommend a venv for this as it installs a lot of things you may not want floating around.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/857#issuecomment-345269703:115,install,installs,115,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-345269703,1,['install'],['installs']
Deployability,ED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2109,Install,Install,2109,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,ED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not det,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3670,Install,Install,3670,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,ED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detect,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:4012,Install,Install,4012,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"ENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version 7.2.0; -- Found OpenMP_C: -qopenmp ; -- Found OpenMP_CXX: -qopenmp ; -- Found OpenMP_Fortran: -qopenmp ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:4072,configurat,configuration,4072,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,1,['configurat'],['configuration']
Deployability,"ENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version ; CMake Error at cmake/custom_cxxstandard.cmake:39 (if):; if given arguments:. ""VERSION_LESS"" ""4.9"". Unknown arguments specified; Call Stack (most recent call first):; CMakeLists.txt:168 (include). -- Configuring incomplete, errors occ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:4371,configurat,configuration,4371,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,1,['configurat'],['configuration']
Deployability,"Either of those dft gradients calls works, though I exclusively use the former. They work b/c all functionals are added to procedures[‘energy’] and all but dh are added to procedures[‘gradient’]. (see snippet below.) (They’re missing from procedures['property’] and that should probably be remedied. So DFT is generally in good shape: energies work, gradients work (analytic except findif for dh), r/u ks set exclusively by option. You can use ‘scf’ to mean HF, and then it works just the same as DFT. I’d advocate thoroughly adding ‘hf’ (that is not just to energy() like it has been) so it’s on-par with DFT. The r/u/ro options were a nice thought, but not thoroughly carried out, with disturbing consequences, as you found. # Integrate DFT with driver routines. for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient. > On Jun 8, 2015, at 9:49 PM, David Sherrill notifications@github.com wrote:; > ; > Is there an advantage to doing; > ; > gradient('b3lyp'); > ; > instead of; > ; > set reference rks; > set dft_functional b3lyp; > gradient('scf')?; > ; > I guess the former is certainly shorter. But primarily I'm wondering; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:729,Integrat,Integrate,729,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,1,['Integrat'],['Integrate']
Deployability,"Error:; > Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; > The most recent 5 function calls were:; >; > 2. HF/cc-pVDZ: Passed; > 3. AO DF-CASSCF/cc-pVDZ: Passed; > 4. DFT Smoketests; > - B2PLYP/cc-pVDZ: Passed; > - CAM-B3LYP/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:3268,install,install,3268,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,Everything looks good to me for the SAPT output. Do you think we need to update the SAPT tests reference output files so that they look the same than the new output format ?; (And the example in the SAPT doc ?); It's only minor changes so we may just leave these alone.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/330#issuecomment-205082377:73,update,update,73,https://psicode.org,https://github.com/psi4/psi4/pull/330#issuecomment-205082377,1,['update'],['update']
Deployability,Everything works fine for me. The only issue I noticed in my small series of test jobs was that `nan` is printed for the user and system time. I installed via:; `conda create -n psi4env python=3.7`; `conda activate psi4env`; `conda install -c raimis -c psi4 -c conda-forge psi4=1.3.2`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-499999284:145,install,installed,145,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-499999284,2,['install'],"['install', 'installed']"
Deployability,"Exactly so, @hadim. psi4 has a c-f-compatible release, so that's on the `main` feedstock branch and accessible with `-c conda-forge`. _But_ psi4 still needs a unreleased libint branch, so that's packaged from the `dev` feedstock branch, so altogether, it's `conda install psi4 -c conda-forge/label/libint_dev -c conda-forge`. The long-term reference for the current channel path is https://psicode.org/installs/latest/ with selections (any os)-conda-(any py)-stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382:46,release,release,46,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1548171382,3,"['install', 'release']","['install', 'installs', 'release']"
Deployability,"Example; ```; molecule {; 0 1; Ne; }. set basis aug-cc-pV5Z; set dft_spherical_points 974; set dft_radial_points 450. camlda0 = {; ""name"": ""CAM-LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_CAM_LDA0"": {""use_libxc"": True} }; }; lda0 = {; ""name"": ""LDA0"",; ""xc_functionals"": { ""HYB_LDA_XC_LDA0"": {""use_libxc"": True} }; }; ```; I've just merged these into libxc master. The hybrid LDA family and these two functionals will appear in the next (major?) release. Unfortunately, these aren't available anywhere else, so I can't be 100% sure the functionals themselves are correct. I just checked that the energies appear to be sane, i.e. the Ne energy is somewhere around -128 hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1645#issuecomment-492620323:441,release,release,441,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492620323,1,['release'],['release']
Deployability,"Excellent call, Jet - I've updated the dependencies to properly reflect how the PB11 deps get introduced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2387#issuecomment-1001269681:27,update,updated,27,https://psicode.org,https://github.com/psi4/psi4/pull/2387#issuecomment-1001269681,1,['update'],['updated']
Deployability,"Excellent idea about the Conda distribution, Lori. I emailed Prof. Stone yesterday, but haven't heard back. He is retired now, so I don't know if his Cambridge email is active; his seminal red book was updated last year so I think he's still doing some work. I doubt he will object to our distribution idea; I think he would've chosen a different license to GPL if he didn't want his code to be used in this way. Regardless, I think we should wait a week to hear back and merge the PR if we don't get a response. He deserves to have a say in how we handle his code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201122403:202,update,updated,202,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201122403,1,['update'],['updated']
Deployability,"Except for some stray bits (sow/reap, databases, the ancillary scripts directory), Psi4 is now python3 compatible (largely thanks to @dgasmith). In fact, the majority of our CI testing is now with py3, so it should stay that way. There is now a py3 conda package for Linux uploaded to anaconda.org. Niceties of packaging and channels aren't in place yet, but a full working psi4/py3 conda environment (named `p4py35`) can be obtained with the below. Please report any problems. `conda create -n p4py35 python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`. **Update 15 Dec 2016** If your gcc from the above balks at ""Hello, world"", add `isl=0.12.2 mpc=1.0.1 mpfr=3.1.2` after `dftd3`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-260094686:561,Update,Update,561,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-260094686,1,['Update'],['Update']
Deployability,"FWIW, I'm crudely patching out the internal libint on Debian/Ubuntu: http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/system_libint.patch?view=markup. I wasn't 100% sure this was kosher, but am glad it's going to (properly) happen upstream as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-221837384:18,patch,patching,18,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-221837384,3,['patch'],"['patch', 'patches', 'patching']"
Deployability,"FYI, I think this has hampered python detection for the conda build. Doing sad things like:. ```; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib64/libpython2.7.so ; ```. at cmake configure time until I told the conda recipe explicitly where to get its library from:. ```; -DPYTHON_INTERPRETER=${PYTHON} \; + -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/lib/libpython2.7.so \; ```. Ugly hack but stable for now. Just be aware the Python detection still not ideal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-134687960:149,install,install,149,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134687960,2,['install'],['install']
Deployability,"FYI, new set of conda packages today. These handle the Linux ""hello world"" bug internally. It's recommended _not_ to update from a circa 1.0 psi4 (e.g., 1.0.54) with `conda update psi4` but to create a new environment for them as follows. If you already have a pre 1.1 psi4 installed, `conda update psi4 -c psi4/label/test -c psi4` should do the trick. * Linux, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Linux, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Mac, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/clang -c psi4`; * Mac, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/clang -c psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-272589229:117,update,update,117,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-272589229,4,"['install', 'update']","['installed', 'update']"
Deployability,"Fantastic news! I think we can probably kill this branch and concentrate on getting the latest and greatest in instead. We're doing a massive rewrite of the integrals right now, so best to wait until that's merged before working on the ECPs I think - we don't want to have any merge problems. When we have the new integrals code in (very soon, hopefully), I'll ping you and try to coordinate the ECP rewrite. Thanks for the very positive update :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-699121196:438,update,update,438,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-699121196,1,['update'],['update']
Deployability,"Few more notes:; - external projects currently installed in `install/externals/proj_name`. How about installing them ""on top"" of psi4 so that the external project bins go in `install/bin`, headers go in `install/include/proj_name`, etc. ?; - external projects look to be built as static libs. will want to be able to build and detect as shared libs; - py-side replacement for `psi4_main/create_new_plugin.cc` is checked in. Right now, the cmake variable substitution works equally not at all for C++ and Python versions. Will need to consider how to call in pre-Inversion period.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235532620:47,install,installed,47,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235532620,5,['install'],"['install', 'installed', 'installing']"
Deployability,"Figured it out. The problem occurs in a few areas, so I'll fix them all and send a patch. Or I can push directly to your repo if you prefer; I'd need permissions to do that. It's just a case of including some of the Boost headers in different orders.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235115266:83,patch,patch,83,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235115266,1,['patch'],['patch']
Deployability,Final release notes at: https://github.com/psi4/psi4/releases/tag/v1.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485#issuecomment-305368061:6,release,release,6,https://psicode.org,https://github.com/psi4/psi4/issues/485#issuecomment-305368061,2,['release'],"['release', 'releases']"
Deployability,"Finally, I have built an experimental *Psi4* package for *Windows*: https://anaconda.org/raimis/psi4. Limitations/issues:; - Minimal functionality: no addons and plugins; - Slow: not optimized and with debugging instrumentation; - ~~Can be used as a *Python* package only (i.e. `psi4` command is not working)~~ -- #1420; - ~~`PSI_SCRATCH` has to be set, otherwise it will crash~~ -- #1413; - A few tests are failing:; - ~~`cbs-parser`~~ -- #1442; - ~~`ci-property`~~ -- #1440; - ~~`cc46`~~ -- #1422; - ~~`cc47`~~ -- #1422; - ~~`cc53`~~ -- #1438; - ~~`fci-tdm`~~ -- #1441; - ~~`fci-tdm-2`~~ -- #1441; - ~~`psimrcc-fd-freq2`~~ -- #1427; - ~~`psithon2`~~ -- #1410. If you are a *Windows* user, could you try and give feed back, please:; ```; > conda install -c raimis -c psi4 -c conda-forge psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-445293936:747,install,install,747,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-445293936,1,['install'],['install']
Deployability,"FindPythonLibsNew should be removed from the repo -- I guess we left it as a transition. Since https://github.com/psi4/psi4/pull/2048 for v1.4, it's been replaced by the cmake native detection. Is it feasible to apply that to v1.3.2 as a patch? If a fresh edit is easier, switching `find_package(3.7 PythonLibsNew)` for `find_package(Python 3.7 EXACT COMPONENTS Interpreter Development REQUIRED)` in two places (top-level CM and psi4/CM) and replacing all `PYTHON_` with `Python_` in CM files should do most of the trick. Good news is that there's no other active distutils in master, so there should be a workaround to anything else from 1.3.2 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438:238,patch,patch,238,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438,1,['patch'],['patch']
Deployability,"First step is it'll replace `psi4/label/dev`. The timing of a new official release and hence `psi4/label/main` is beyond my control (that is, effectively I can veto but not assert). But absolutely, the plan is for `gcc_linux-64`-built Psi to trickle ever upward and replace the `gcc-5` presently distributed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-347223179:75,release,release,75,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347223179,1,['release'],['release']
Deployability,"First, you've `s/PYTHON_EXECUTABLE/Python_EXECUTABLE/g cmake/FindPythonModule.cmake` already probably. maybe patch it with to get more info out of the error. ```; diff --git a/cmake/FindPythonModule.cmake b/cmake/FindPythonModule.cmake; index 2b6f93172..b2061b8a6 100644; --- a/cmake/FindPythonModule.cmake; +++ b/cmake/FindPythonModule.cmake; @@ -77,8 +77,10 @@ macro(find_python_module module); print(parse_version('${${module}_VERSION}') ${_op} parse_version('${${module}_tgtver}'))""; RESULT_VARIABLE _${module}_verenuf_status; OUTPUT_VARIABLE _${module}_verenuf; - ERROR_QUIET; + #ERROR_QUIET; OUTPUT_STRIP_TRAILING_WHITESPACE); + message(""_${module}_verenuf_status ${_${module}_verenuf_status}""); + message(""_${module}_verenuf ${_${module}_verenuf}""); if(NOT ${_${module}_verenuf_status}); if(${_${module}_verenuf} STREQUAL ""True""); set(_${module}_requested_version_found ""${Python_EXECUTABLE}""); ```. and kill off the `QUIET` in external/upstream/qcelemental/CM. ```; if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.24.0 QUIET); endif(); ```. But really, assuming you're detecting a qcel in path, the only part of external/upstream/qcelemental/CM that further cmake cares about is ` add_library(qcelemental_external INTERFACE) # dummy`, so you could set that and bypass the FindPythonModule.cmake entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213:109,patch,patch,109,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213,1,['patch'],['patch']
Deployability,Fixed after psi4/psi4#801 after I properly installed dot/graphviz on the building computer.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/792#issuecomment-331600219:43,install,installed,43,https://psicode.org,https://github.com/psi4/psi4/issues/792#issuecomment-331600219,1,['install'],['installed']
Deployability,"For MKL, I did not install the development package yet.; As for psi4, I was using the conda distribution, but I am trying to build from source.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-380478391:19,install,install,19,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-380478391,1,['install'],['install']
Deployability,"For `conda` n00bs like myself who want a speclfic command to execute, your `Dockerfile` would now look like the following (using python3.9 since that is what comes with `miniconda3:4.10.3`). Can confirm this works. @loriab if you suggest any changes to the command below just let me know. ```docker; FROM continuumio/miniconda3:4.10.3; RUN conda install psi4=1.5 -c psi4 && \; conda install psi4::libint2=*=hc9558a2_9 pytest=5 psi4::pcmsolver=*=py39h6d17ec8_2 -c psi4; ```. > For solid reproducibility, the psi4conda installers have the advantage. What exactly do you mean by this? Is there a preferred way to install psi4 other than `conda install psi4=1.5 -c psi4`? Pardon my lack of depth with the nuances of conda distributions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2596#issuecomment-1151756100:346,install,install,346,https://psicode.org,https://github.com/psi4/psi4/issues/2596#issuecomment-1151756100,5,['install'],"['install', 'installers']"
Deployability,For anyone else running into this. Having some packages from `-c conda-forge` and some from the main channel can lead to this issue. I had -c conda-forge set as a preferred channel and had to turn it off to resolve this issue. Create a new environment in conda and install psi4 separately to avoid relying on other packages from -c conda-forge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2294#issuecomment-1054328789:265,install,install,265,https://psicode.org,https://github.com/psi4/psi4/issues/2294#issuecomment-1054328789,1,['install'],['install']
Deployability,"For final release:. ### Repo/GH state. * follow tagging procedure; * before reengaing the ""include admin"" button, push a branch at the tag commit (not the records commit). ```; >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x; ```. * set up new branch as protected branch. ### conda stage. * edit and switch to specific `git_tag` instead of `master` for psi4-multiout (L&M) and psi4-docs (L); * in `ltrtver` in `conda_build_config.yaml`, make a new non-dev line (probably a ditto)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468415517:10,release,release,10,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468415517,1,['release'],['release']
Deployability,"For future reference, the commented out test is causing Ecosystem build fails. We don't understand why, but it's holding up the rest of the development pipeline, so we're commenting it out temporarily. This should be fixed by the next full release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2644#issuecomment-1194434738:152,pipeline,pipeline,152,https://psicode.org,https://github.com/psi4/psi4/pull/2644#issuecomment-1194434738,2,"['pipeline', 'release']","['pipeline', 'release']"
Deployability,"For future reference: since this is a bug in the Psi4 Fedora package, you should file the bug in the Fedora bug tracker. But yes, I can reproduce this on Fedora 24 and Fedora 25, although I'm not sure why this happens: I have been able to run jobs with the Fedora package before. I'm waiting on the 1.1 release to update the Fedora packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531#issuecomment-263449298:303,release,release,303,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-263449298,2,"['release', 'update']","['release', 'update']"
Deployability,"For history, back when Python detection in cmake was very broken (exe and lib weren't matching pair), numpy made their own alternate find python cmake file and pybind11 used numpy's and psi4 used pybind11's. I hear cmake has totally rewritten theirs, and pybind11 is now amenable to either (https://github.com/pybind/pybind11/pull/2370, I think). So, yes, upgrade now reasonable. Note that psi, in turn, installs the python finder module so that plugins can use it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060#issuecomment-743297163:356,upgrade,upgrade,356,https://psicode.org,https://github.com/psi4/psi4/issues/2060#issuecomment-743297163,2,"['install', 'upgrade']","['installs', 'upgrade']"
Deployability,"For information of my system, it was mkl 2018.3 update 3 and gcc 5.4.0 (probably it does not have icpc). Here is the result of `ldd -v /share/psi4/lib/psi4/core.so` (my prefix install path = /share/psi4):; ```; linux-vdso.so.1 => (0x00007fffbe1a5000); libmkl_rt.so => not found; libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fe75a99a000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fe75a691000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fe75a48d000); libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fe75a10b000); libgomp.so.1 => /usr/lib/x86_64-linux-gnu/libgomp.so.1 (0x00007fe759ee9000); libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fe759cd3000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fe759909000); /lib64/ld-linux-x86-64.so.2 (0x00007fe75de8f000). Version information:; /share/psi4/lib/psi4/core.so:; libgcc_s.so.1 (GCC_3.0) => /lib/x86_64-linux-gnu/libgcc_s.so.1; libpthread.so.0 (GLIBC_2.2.5) => /lib/x86_64-linux-gnu/libpthread.so.0; libgomp.so.1 (OMP_2.0) => /usr/lib/x86_64-linux-gnu/libgomp.so.1; libgomp.so.1 (GOMP_4.0) => /usr/lib/x86_64-linux-gnu/libgomp.so.1; libgomp.so.1 (OMP_1.0) => /usr/lib/x86_64-linux-gnu/libgomp.so.1; libgomp.so.1 (OMP_3.0) => /usr/lib/x86_64-linux-gnu/libgomp.so.1; libgomp.so.1 (GOMP_1.0) => /usr/lib/x86_64-linux-gnu/libgomp.so.1; libgomp.so.1 (GOMP_2.0) => /usr/lib/x86_64-linux-gnu/libgomp.so.1; libm.so.6 (GLIBC_2.2.5) => /lib/x86_64-linux-gnu/libm.so.6; libc.so.6 (GLIBC_2.3) => /lib/x86_64-linux-gnu/libc.so.6; libc.so.6 (GLIBC_2.4) => /lib/x86_64-linux-gnu/libc.so.6; libc.so.6 (GLIBC_2.3.4) => /lib/x86_64-linux-gnu/libc.so.6; libc.so.6 (GLIBC_2.14) => /lib/x86_64-linux-gnu/libc.so.6; libc.so.6 (GLIBC_2.2.5) => /lib/x86_64-linux-gnu/libc.so.6; libstdc++.so.6 (GLIBCXX_3.4.14) => /usr/lib/x86_64-linux-gnu/libstdc++.so.6; libstdc++.so.6 (GLIBCXX_3.4.18) => /usr/lib/x86_64-linux-gnu/libstdc++.so.6; libstdc++.so.6 (CXXABI_1.3.1) => /usr/lib/x86_64-linux-gnu/l",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397094612:48,update,update,48,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397094612,2,"['install', 'update']","['install', 'update']"
Deployability,"For methods (or methods in certain circumstances, say reference or conv/df) only available through an external add-on, do we want those opt-in? That is, certainly the external must be (1) installed and detectable. But do we also want to (2) require the user to `set qc_module=mrcc|adcc|chemps2` ? CheMPS2 has a long history of not requiring (2). ADCC has a shorter history of being the preferred backend and automatic choice, if present. I just switched MRCC syntax in #2731 to yes require (2). That was in keeping with the user opt-ing in via `energy(""mrccsd"")`. I can go either way, and I guess I'm now leaning toward not requiring (2) and adjusting MRCC accordingly. But it seems like something to discuss and settle on a consistent treatment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737#issuecomment-1268969031:188,install,installed,188,https://psicode.org,https://github.com/psi4/psi4/pull/2737#issuecomment-1268969031,1,['install'],['installed']
Deployability,For note: I have enabled the installation of adcc (via pip) on Travis via `-DENABLE_adcc=ON` for testing purposes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-553134043:29,install,installation,29,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-553134043,1,['install'],['installation']
Deployability,"For reference, Debian fixed this slightly differently: https://salsa.debian.org/debichem-team/psi4/-/blob/master/debian/patches/cmake_pymodulesuffix.patch. ```; --- a/cmake/FindPythonLibsNew.cmake; +++ b/cmake/FindPythonLibsNew.cmake; @@ -78,7 +78,7 @@; print(sys.prefix);; print(s.get_python_inc(plat_specific=True));; print(s.get_python_lib(plat_specific=True));; -print(s.get_config_var('SO'));; +print(s.get_config_var('SO') or s.get_config_var('EXT_SUFFIX'));; print(hasattr(sys, 'gettotalrefcount')+0);; print(struct.calcsize('@P'));; print(s.get_config_var('LDVERSION') or s.get_config_var('VERSION'));; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1407774402:120,patch,patches,120,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1407774402,2,['patch'],"['patch', 'patches']"
Deployability,"For the ""print error"" line, I get the below on a recent version. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z -0.59785921 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -152.75596848 ; ---------------------------------------------------------------------------------------------------------; ```. The above looks ok to me, so I suspect you've hit #455 . You can easily patch your installation by doing https://github.com/psi4/psi4/commit/2e6b373102294cd59faf47d68044ff2402376e73 , no recompile required. Let me know if you think yours is a different issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/528#issuecomment-263048284:712,patch,patch,712,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263048284,2,"['install', 'patch']","['installation', 'patch']"
Deployability,"For the long-term we have the required Hessian-vector products. We need #886 would allow us to optimize them, planned for 1.3 when Python-SCF iterations go live. Please do make a PR for 1) and 2) as they are quite needed before 1.2 is released.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/973#issuecomment-383228055:235,release,released,235,https://psicode.org,https://github.com/psi4/psi4/issues/973#issuecomment-383228055,1,['release'],['released']
Deployability,"For the reduced PBS file, I think you'll want something like the below. For psidatadir, just ensure non-interference. need to have psipath existing before appending. and jobname must match pbs name. i've tested it on dftd3 at least. ```; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSI4DATADIR; unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i jobname.in -o jobname.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/361#issuecomment-212251160:807,install,install,807,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212251160,1,['install'],['install']
Deployability,"For this I plan on setting the `DOCC` keyword in the test case and then printing a warning in `UHF` and `CUHF` that if a singlet is requested these things *can* go wonky in the presence of degeneracies. There are better solutions that range greatly in time, but I think this at least covers it. Ill update #736 unless anyone has objections.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738#issuecomment-308200161:299,update,update,299,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-308200161,1,['update'],['update']
Deployability,"For what its worth 1.1 shouldn't be too far down the pipeline. This year at the very latest, but hopefully 2-3 months.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-232783553:53,pipeline,pipeline,53,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232783553,1,['pipeline'],['pipeline']
Deployability,"Forewarning that the [documentation in occ/dfocc](http://www.psicode.org/psi4manual/master/occ.html#) needed reworking even _before_ this commit, and it certainly will afterwards. I'll hold off on rewriting that (and updating the `driver.energy` docstring) until the rest of the PR looks good. How I decide to rewrite the manual will depend on if I need to make other changes, and the docstring updates will depend on the manual changes... Aren't dependencies fun?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742:395,update,updates,395,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742,1,['update'],['updates']
Deployability,"Formatting is great, but just in case part of your goal is to compare basissets at the `.gbs` file level, I wanted to let you know about https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/primitives/diff_gbs.py . Thhe basis set exchange has one, too, -- I think https://github.com/MolSSI-BSE/basis_set_exchange/blob/master/basis_set_exchange/curate/diff.py. I'll look into the adcc errors. I think Max updated the conda packages recently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2937#issuecomment-1529060031:414,update,updated,414,https://psicode.org,https://github.com/psi4/psi4/pull/2937#issuecomment-1529060031,1,['update'],['updated']
Deployability,"From a strategic point of view, the answer is yes, it would be a great; addition. However, it would depend on the technical details ... how much work it; would be to get this working, how soon we could do it, etc. I'll try to; discuss with Lori and Daniel S. We've already done a ""soft"" 1.0 release (not heavily advertized yet). On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you want; > to stick to DMRG-SCF?; > ; > If you would like to, I can release an intermediate version v1.7, and you; > can use the plugin (or copy parts of); > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > to run the CASPT2 calculations...; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220613816:291,release,release,291,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220613816,3,['release'],['release']
Deployability,"From my perspective, we need to figure out the tuple data type in `index.cc` before I can flatten the `tuple` member of the `IndexIterator`, before I can run final speed tests. I was hoping Jet could show me VTune by then, but if that doesn't happen, I'll just run some computations from Allen's recent paper using Mk-MRCC with both versions and see if the update causes notable slowdowns.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-636794573:357,update,update,357,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-636794573,1,['update'],['update']
Deployability,"From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. The build is well-tested by devs with Mac+AppleClang and Linux+Intel(GCC), and CI covers Linux+GCC and Linux+Clang. It's going to be tricky to debug remotely, but if you work it out and care to submit a PR, we'd be grateful (particularly if you updated to master from 1.1). One thing to watch out for (wrt #852) is to make sure CMake can't find a different (higher than 2.0) version of pybind11 _anywhere_ on your system. We try to nail it down in CMake, but sometimes it finds and uses a wrong version installed alongside another dependency. Naturally, if I recognize the cause for an error, I'm glad to help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/853#issuecomment-343702224:387,update,updated,387,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702224,2,"['install', 'update']","['installed', 'updated']"
Deployability,"From the text on this issue, it is not entirely clear to what the release notes are relative to. Is this 3.4.0 or 4.0beta2? This should be mentioned in the opening paragraph of the final version I think",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-220827431:66,release,release,66,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-220827431,1,['release'],['release']
Deployability,"Full overview of default cutoffs and generating python file can be found here: https://gist.github.com/hokru/546307545c7bf0d96de5cf867e036cae. Currently the best way forward, I think, is leaving density screening **off** by default to avoid setting too tight thresholds for certain components leading to unintuitive behaviour. ; I will update the PR accordingly unless another direction is wanted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-616657858:336,update,update,336,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-616657858,1,['update'],['update']
Deployability,Full tests pass except DCFT5/6 which attempts to compare the energy to 10 decimal places. On that note it looks like the SCF/CCSD energy difference is about 5.e-10 or so. Not too surprising since the one-electron integrals are slightly different. Might try to rig up a test where we check the norm between the current and previous versions matrix elements for large basis sets and heavy atoms. ```; # 6 core update; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001758 0.000034 0.001248 0.001832 0.000177 0.001438; 1 98 104 0.002072 0.000253 0.004509 0.002503 0.000808 0.005072; 2 168 35 0.002780 0.000696 0.017807 0.003713 0.001938 0.019500; 3 238 17 0.003789 0.001310 0.044333 0.005827 0.003503 0.047694; 4 308 10 0.005321 0.002705 0.093579 0.009500 0.006423 0.096568; 5 378 6 0.007993 0.004080 0.178422 0.012842 0.009268 0.173306; 6 448 4 0.011465 0.006115 0.276808 0.017397 0.012930 0.282091; 7 518 3 0.015315 0.007962 0.426757 0.023739 0.018704 0.436435; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-277145466:408,update,update,408,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-277145466,1,['update'],['update']
Deployability,Further CI update - it seems the ddd-deriv test fails with this PR... but only on Windows.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833#issuecomment-1372611138:11,update,update,11,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1372611138,1,['update'],['update']
Deployability,Get 1.3 from here: https://admiring-tesla-08529a.netlify.com/installs/v13/. I have no fort.56 files with it,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1584#issuecomment-475855410:61,install,installs,61,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475855410,1,['install'],['installs']
Deployability,"Glad it's out there. Needs some patching up, will do in another pass. . -Daniel Smith; Sent from my iPhone. . > On Jun 24, 2016, at 22:04, Lori A. Burns notifications@github.com wrote:; > ; > @dgasmith, n-body docs now show up – http://psicode.org/psi4manual/master/nbody.html; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/426#issuecomment-228502764:32,patch,patching,32,https://psicode.org,https://github.com/psi4/psi4/pull/426#issuecomment-228502764,1,['patch'],['patching']
Deployability,"Glad to hear it's mostly working; * https://github.com/psi4/psi4/pull/2829 might help `matrix1`; * yes, the hungarian file had that change and now resides https://github.com/MolSSI/QCElemental/blob/master/qcelemental/util/scipy_hungarian.py#L103; * the datastructures is refactored into a different class https://github.com/MolSSI/QCElemental/blob/master/qcelemental/datum.py#L45 but your changes are good; * it looks like the uno_bipartite file has had some updates, incl. node -> nodes https://github.com/MolSSI/QCElemental/blob/master/qcelemental/util/gph_uno_bipartite.py#L108",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865#issuecomment-1409681147:459,update,updates,459,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1409681147,1,['update'],['updates']
Deployability,"Glad to hear it’s fixed. Yes, 1.0.54 is a few hundred commits ago. Currently we’re building up to a 1.1 release, but unless you need pcmsolver, ambit, or advanced plugin technology, the current development head should be perfectly useable. There is a later conda binary, but we’re keeping development snapshots under a different label, so that only releases are pulled with “conda update psi4 -c psi4”. You can get the development snapshots via “conda update psi4 -c psi4 -c psi4/label/test”. That will pull packages additionally from the “test” (name may change) label. The 1.0.54 to pre-1.1 changes are sufficiently drastic that you should probably do a fresh conda install of psi4, rather than just a conda update. > On Nov 26, 2016, at 5:45 PM, Holger Kruse <notifications@github.com> wrote:; > ; > Thanks! That fixes it.; > I wasn't aware the conda binary is so far behind the git version.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/528#issuecomment-263090503>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACNR6kYmnjd_KUOlMjljX6_8G0XiaKIcks5rCLaRgaJpZM4K8kr4>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/528#issuecomment-263098427:104,release,release,104,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263098427,6,"['install', 'release', 'update']","['install', 'release', 'releases', 'update']"
Deployability,"Glad you're finding QCSchema input useful!. Peter's right that not all calculations are possible at the moment through the schema input, most notably optimizations and the ""wrappers"" like cbs and nbody. What the schema is targeted to express at the moment are single-points, and that's how QCEngine is using it in the various <program>Harnesses. A major update coming to psi4 is the ""distributed"" driver that reworks wrapper communication to be more dict-like. The schema input to wrappers isn't well-defined yet, but it will probably inherit from the single-point schema (`AtomicInput`). I think then that what you're asking for could be arranged within schema_wrapper.py, but I'm just not sure yet. Glad to know you're interested, and we'll keep this use case in mind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349:354,update,update,354,https://psicode.org,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349,1,['update'],['update']
Deployability,"Go ahead and pull down updated versions of the packages with blas/lapack dependencies `conda update chemps2 libefp v2rdm_casscf -c psi4/label/dev -c psi4`. We switched over math handling recently from statically linked mkl to single dynamic library mkl. If you want, you can grab the whole updated list `conda update pcmsolver libxc gdma libint dkh erd simint libefp chemps2 v2rdm_casscf -c psi4/label/dev -c psi4` as they now come with more instruction sets embedded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/764#issuecomment-318659874:23,update,updated,23,https://psicode.org,https://github.com/psi4/psi4/issues/764#issuecomment-318659874,4,['update'],"['update', 'updated']"
Deployability,"Good catch! Yes, I agree that the docs need to be updated. That particular manual page was already a [target to be updated](https://github.com/psi4/psi4/issues/1796), but we hadn't specifically realized the problem with frozen core. As for frozen core support... `occ` includes methods that are orbital-optimized and methods that are not. The non-orbital optimized methods support frozen core energies but not gradients, but there is no frozen core for orbital optimized methods. `dfocc` universally has frozen-core for its orbital optimized methods, but orbital-optimized methods in `dfocc` are known for convergence issues, and trying to use frozen core makes them worse. Getting frozen core (and frozen virtual!) support into orbital-optimized methods of the `occ` module is on my to-do list, but my current ETA is Spring 2021 due to circumstances you probably don't care about. If you don't mind me asking, what are you trying to do?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249:50,update,updated,50,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611901249,2,['update'],['updated']
Deployability,"Good day Sir,. Please I am still finding it difficult to generate the potential energy; data for the CF molecule. Would you be pleased to be of help? I don't mind; having a virtual meeting with you so you can assist me. I am the one one; doing this kind of research in my school and my supervisor doesn't know; much in this area. Please help 🙏 me.; If you request any information pertaining this, I will send it across; immediately. Thank you in anticipation. Kind regards; Sanctus. On Tue, Jun 18, 2024, 02:27 Jonathon Misiewicz ***@***.***>; wrote:. > Based on your writing, I assume you're a student researcher.; >; > Posting error messages *like this* is not a good way to get help. Large; > input files like this make it difficult for developers to find the actual; > problem. It's best practice to simplify the input file as much possible; > while still making the error clear. Sometimes, doing that can tell *you*; > where the problem is. If you don't know how to do this kind of; > troubleshooting, consult your seniors in your research group or your; > professor.; >; > I've played around with your latest input file and can confirm that you; > have made a fairly straightforward mistake, but you've discarded important; > information. As an exercise, please post a *simplified* input that; > reproduces your problem, and a *complete* error message. Once you've done; > that, I'll update the error message to be more explicit and offer some; > advice on how to bypass this. (Though once you understand the error, it's; > fairly straightforward.); >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3181#issuecomment-2174102955>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/BA3DXYANKY74HK5CYFXZ6YLZH4TB5AVCNFSM6AAAAABI5T5SNGVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDCNZUGEYDEOJVGU>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549:1390,update,update,1390,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2184941549,1,['update'],['update']
Deployability,"Good news: it works fine for me. The patch below (n/c from @mlestep, I don't think) gives the output below (it just needed to be told to compute something).; ```; -; - outfile->Printf( ""\nProperties computed using the %s density matrix\n\n"", title_.c_str());; + if (title_ == """") {; + outfile->Printf(""OEProp: No title given, name of density matrix used for the following properties is %s\n"", Da_so_->name().c_str());; + } else {; + outfile->Printf( ""\nProperties computed using the %s density matrix\n\n"", title_.c_str());; + }; ```; ```; e, wfn = energy('MP2', return_wfn=True); oeprop(wfn, ""MULTIPOLES(1)""); ```; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; OEProp: No title given, name of density matrix used for the following properties is SCF density. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electric (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417462300 to convert to Debye; Dipole X : 0.0000000 0.0000000 0.0000000; Dipole Y : 0.0000000 0.0000000 0.0000000; Dipole Z : -0.2704549 1.1770271 0.9065722. --------------------------------------------------------------------------------; ```. Bad news: we [lost a test](https://github.com/psi4/psi4/commit/71bf174e60bc54b6a7424ce13dd28cef264fa850) (one of the two cc properties ones) and it fails. @amjames or TDC group, could you take a look?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1068#issuecomment-402301904:37,patch,patch,37,https://psicode.org,https://github.com/psi4/psi4/pull/1068#issuecomment-402301904,1,['patch'],['patch']
Deployability,"Good point about summarizing changes since Psi3. Maybe I can work that in; very briefly somewhere. 1.0 announcement will be tweeted soon. On Thu, Jul 14, 2016 at 4:58 PM, Daniel Smith notifications@github.com; wrote:. > You could call it a soft release thats still not quite official. The code; > base has been tagged 1.0 and frozen; however, the accompanying distribution; > networks (binaries and conda channels) have not quite caught up. The; > release notes are among the very last things on the check list.; > ; > Cheers,; > Daniel Smith; > ; > > On Jul 14, 2016, at 3:47 PM, Michael Banck notifications@github.com; > > wrote:; > > ; > > By the way, and I realize that this is quickly getting off-topic, but I; > > am baffled that the 1.0 release wasn't tweeted from @psi_code...; > > ; > > I'm following the commit feed, but there was no obvious ""release 1.0"" or; > > ""bump version to 1.1devel"" commits, so I totally missed it until now.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub <; > > https://github.com/psi4/psi4/issues/367#issuecomment-232787398>, or mute; > > the thread <; > > https://github.com/notifications/unsubscribe/ABsBcehgmOltfNKwWYvW1L8pGmD3ttWGks5qVqBIgaJpZM4INszQ; > > .; > ; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/367#issuecomment-232790462, or mute; > the thread; > https://github.com/notifications/unsubscribe/AC9QdmfHboo-xz1xgQ43fJ4qeZhIXBogks5qVqL-gaJpZM4INszQ; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-232799162:245,release,release,245,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232799162,4,['release'],['release']
Deployability,"Good point, @mbanck. These release notes will be relative to 4.0beta5 from July 2013. Incremental release notes for earlier betas (though not all the way back to psi3 3.4.0) are at http://psicode.org/downloads.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-220846631:27,release,release,27,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-220846631,2,['release'],['release']
Deployability,"Good question. The todo list is [here](https://github.com/psi4/psi4/projects/3). Except for a couple things (basis set and dkh changes), it's mainly a task of finishing up the interfacing of other software that works with Psi4, rather than Psi4 itself. I'd venture a RC w/i 3 weeks. What's your software release?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/608#issuecomment-278019226:304,release,release,304,https://psicode.org,https://github.com/psi4/psi4/issues/608#issuecomment-278019226,1,['release'],['release']
Deployability,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249720030:220,install,install-libefp-so,220,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030,3,['install'],"['install-libefp-so', 'install-libint-', 'install-pcmsolver']"
Deployability,"Good to know, I updated my comment... Would be good to have tests for these integrals though. @andysim could the pseudospectral ints be handled by M-D somehow?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2414#issuecomment-1064376101:16,update,updated,16,https://psicode.org,https://github.com/psi4/psi4/issues/2414#issuecomment-1064376101,1,['update'],['updated']
Deployability,"Good, thanks!. Assuming [this is the log](https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=i386&ver=1%3A1.2.1-1&stamp=1546604357&raw=0) to look at, a few comments:; - no need for boost at all (`libboost-atomic1.67-dev libboost-atomic1.67.0 libboost-chrono-dev`); - psi 1.2 won't work with py < 3.5 (`Get:19 http://debian.csail.mit.edu/debian unstable/main i386 python2.7 i386 2.7.15-5 [299 kB]`); - production needs at least AM6 (`-DMAX_AM_ERI=4`) and preferably 7 or 8; - source is probably a little out of date as this turned to c++14 around Christmas (`-- Setting (unspecified) option psi4_CXX_STANDARD: 11`); - I think you were the one who wanted to be able to use a default theme rather than the psi custom one. this is available now (`-- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme`); - threaded blas that's not mkl can go wrong (`CMake Warning at external/common/lapack/CMakeLists.txt:50 (message):`) and unfortunately the test suite in single thread mode can't catch it. would be good to test it, perhaps with this script https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L270.; - it's finding an AM=5 libint (`-- [36mFound Libint 5[m: /usr/lib/libint.a (found version 1.2.0)`). this'll make it through the tests but not good for production.; - aha, you're targeting v1.2.1, not v1.3! nevermind what I said about c++14; - `ImportError: Install python module networkx`; - Unfortunately solutions to test failures aren't leaping to mind. Some are very strange for a consistent codebase (`TypeError: set_memory_bytes(): incompatible function arguments. The following argument types are supported:`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451508824:1403,Install,Install,1403,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451508824,1,['Install'],['Install']
Deployability,Got it!. I created the p4env via `conda create -n p4env psi4 -c psi4` and then used pip to install rdkit via `pip install rdkit`. closing issue,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488634530:91,install,install,91,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488634530,2,['install'],['install']
Deployability,"Great idea! I still have some concerns about potential ways to abuse `compute_gradient`, but my test cases won't even run for reasons far beyond the scope of this PR. Issue list is about to grow, but I'll be happy with the PR once the tests are updated. Thanks for this, Lori.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2200#issuecomment-869854948:245,update,updated,245,https://psicode.org,https://github.com/psi4/psi4/pull/2200#issuecomment-869854948,1,['update'],['updated']
Deployability,Great to hear. I've updated the `psi4-dev` package with the extra flags. Please let me know if it gives further trouble.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386861610:20,update,updated,20,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386861610,1,['update'],['updated']
Deployability,"Great to see this capability added! A pdf in doc/external can probably be linked to from Sphinx docs, though it won't be searchable. If Stone isn't keen on the subdir of Psi4 scheme, we could arrange so that his code stays on his website, a conda recipe (or cmake Add_External_Project) curls it from the web, a patch converts it to build as a lib rather than an exe, and so libgdma.so stays outside psi4. Then the interface code between gdma and libmints stays in psi4. Would like to make the built library available from our conda channel, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201110783:311,patch,patch,311,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201110783,1,['patch'],['patch']
Deployability,Great! Can you also update `output.ref` in `tests/dft1`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/453#issuecomment-236929158:20,update,update,20,https://psicode.org,https://github.com/psi4/psi4/pull/453#issuecomment-236929158,1,['update'],['update']
Deployability,"Great! If you're not already, adding `--solver libmamba` to the solve can improve the speed considerably. (You may need to install `conda-libmamba-solver` to base env https://conda.github.io/conda-libmamba-solver/getting-started/ .)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3031#issuecomment-1685426469:123,install,install,123,https://psicode.org,https://github.com/psi4/psi4/issues/3031#issuecomment-1685426469,1,['install'],['install']
Deployability,"Great!. If you need more precision, set the PySCF grids by a pair of numbers, rather than by grid level. That should disable PySCF's numerical integration grid pruning. Psi is not pruned, by default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487206380:143,integrat,integration,143,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487206380,1,['integrat'],['integration']
Deployability,"Great, glad it's working. I'll get your OpenBLAS patch added in, and it'll make its way back upstream to autocmake one day. Your `ldd` looks good. Only thing strikes me as odd is `libpython.so`. We stopped actually linking to this and now only require the interpreter, not the library. But maybe you're compiling 1.1a1 and the change happened afterward. In any case, when you update someday, don't be alarmed if that goes away. On the `#!/cluster/apps/python/2.7.12/x86_64/bin/python`, we go back and forth on whether to embed the specific compile-time version or a more generic `/usr/bin/env python2` or `usr/bin/env python3`. Advantages of the former: (a) user can be oblivious to what or if python in path at all, (b) conda does it this way. Advantages of the latter: (a) it's what Linux users expect to be happening, (b) avoids trouble of psi4 still using compile environment if you have separate compile and run-time environments. We've stuck with the former since it's friendlier to the inexperienced. Go right ahead and edit that line to a `/usr/bin/env` if it's more suited to your cluster, but I do recommend doing `python2` since the python2/3 headers are used during the build. By the way, on testing, there's `share/psi4/samples/*/test.in` files that'll print `SUCCESS`/`FAILED` to the screen and are handy for testing (or run `ctest -L quick -j4`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275136191:49,patch,patch,49,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275136191,2,"['patch', 'update']","['patch', 'update']"
Deployability,"Great, thanks for patching this up!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/553#issuecomment-267800015:18,patch,patching,18,https://psicode.org,https://github.com/psi4/psi4/pull/553#issuecomment-267800015,1,['patch'],['patching']
Deployability,"Great, thanks for working on this. I merged in those patches, lets see what the CI brings.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-619543286:53,patch,patches,53,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-619543286,1,['patch'],['patches']
Deployability,"Great, we were talking yesterday about how an interfaces doc page was needed, and here it is!. I was going to just mention topic here, but it turned into a write-up, so made an independent issue (https://github.com/psi4/psi4/issues/122). Would you take a look and see if you agree with its strategy?. On the `pcm {...}` block, is that the same syntax across the other QC programs that pcmsolver is integrated with?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/212#issuecomment-171668610:398,integrat,integrated,398,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171668610,1,['integrat'],['integrated']
Deployability,"Great. And it looks like everything in `lib/scripts` gets installed, so no special action needed there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/142#issuecomment-171780349:58,install,installed,58,https://psicode.org,https://github.com/psi4/psi4/issues/142#issuecomment-171780349,1,['install'],['installed']
Deployability,"Great. Let me explain the issue here. DFT does a numerical integration. If you want to compute a gradient, then _in principle_, you should include derivatives of the integration grid itself. Psi4 does not do that. (@susilehtola tells me that an open-source library in active development will handle that for us soon.) In the limit of an infinitely large grid, the error due to neglecting the geometry dependence of the grid vanishes. That error is _probably_ what you're seeing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161#issuecomment-2075978791:59,integrat,integration,59,https://psicode.org,https://github.com/psi4/psi4/issues/3161#issuecomment-2075978791,2,['integrat'],['integration']
Deployability,Guess you are looking for these: https://github.com/psi4/psi4/releases,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-273774074:62,release,releases,62,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273774074,1,['release'],['releases']
Deployability,"HI @loriab,. I'm still having this issue with psi 1.2 (the released, not the dev one). It's quite erratic - sometimes it works, sometimes it doesn't.; I was trying to do some reproducible tests, but I couldn't in the end. I suspect the size of the path to the file is somehow relevant, but I really couldn't prove it with those tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-442801726:59,release,released,59,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-442801726,1,['release'],['released']
Deployability,"Hard to say. Psi links omp libraries based on whether it finds a library with ""mkl"" in the name. Flexiblas could cover that up and apply its own gomp here: https://gitlab.mpi-magdeburg.mpg.de/software/flexiblas-release/-/blob/master/cmake/FindMklOpenMP.cmake#L12-27 . I'm thinking Flexiblas will be most common in Fedora for now. Our conda builds mostly hard-code the blas libraries list to bypass the math detection cmake. I'd feel a little better if flexiblas was behind MKL in priority since MKL is our special case, but I don't know of any definite disruptions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246#issuecomment-880252991:211,release,release,211,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880252991,1,['release'],['release']
Deployability,Have you modeled on the examples [here](http://psicode.org/psi4manual/master/build_planning.html#how-to-configure-blas-lapack-for-building-psi4)? . You can work from conda mkl nowadays with `conda install mkl-devel`. cmake commands are https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-dev-src/psi4DepsMKLCache.cmake#L15-L16,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-380309166:197,install,install,197,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-380309166,1,['install'],['install']
Deployability,"Have you pulled tags after the latest release? `git fetch upstream ""refs/tags/*:refs/tags/*""`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3028#issuecomment-1683136919:38,release,release,38,https://psicode.org,https://github.com/psi4/psi4/issues/3028#issuecomment-1683136919,1,['release'],['release']
Deployability,"Have you tried installing into an environment (i.e., `conda create -n p4env python=3.8 psi4 -c psi4`)? Especially with heavy main environments like an Anaconda installation, there may be small pinning problems like mkl=2019.4 vs 2020.2 (b/c psi4 releases don't get rebuilt) that manifest as UnsatisfiableError. For most anyone, a recent psi4 would do. (Testing is the same as for releases.) `conda install psi4 -c psi4/label/dev`. The upper limit on python version is because psi4 must be built for each version. E.g., one could compile psi against a py3.9 alpha, but until one does (and checks that all the deps do, too), there's an upper limit to what can be installed. (That `2.7.*` is because the constraint solver can find _some_ psi4 for py27 in that channel; it won't be the one you want.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-671572540:15,install,installing,15,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671572540,6,"['install', 'release']","['install', 'installation', 'installed', 'installing', 'releases']"
Deployability,"Hear ye, hear ye, the `1.3a1` tag is released. Commits after and including it may generate slightly different results due to the CODATA 2010 --> 2014 change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/972#issuecomment-425681815:37,release,released,37,https://psicode.org,https://github.com/psi4/psi4/issues/972#issuecomment-425681815,1,['release'],['released']
Deployability,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331682241:1065,configurat,configuration,1065,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241,1,['configurat'],['configuration']
Deployability,"Hello,. The short answer is, at the moment, no. As said above, nothing in these equations prevents parallelism, but the equations are extremely complex and so is the code...; Improving the parallelism of SAPT0, which is much simpler, is on the pipeline though.; Sorry we can't help more for now, but if you know someone who can code, contributions are welcome!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-135840223:244,pipeline,pipeline,244,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-135840223,1,['pipeline'],['pipeline']
Deployability,"Hello,; I installed Psi4 and chemps2 from Miniconda. How can I interface Chemps2 with Psi4? Thanks in advance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222644633:10,install,installed,10,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222644633,1,['install'],['installed']
Deployability,"Hello,; it works fine for me with a relatively recent psi4 (Git: Rev {master} a3d8d93). It also works with the latest dev. conda package (837e345). Which psi4 version are you using? If it's anything older, try [updating](http://www.psicode.org/psi4manual/master/conda.html#how-to-update-a-psi4-binary).; Peter. Log: [{master} a3d8d93](https://github.com/psi4/psi4/files/1811137/master.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373012577:280,update,update-a-,280,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373012577,1,['update'],['update-a-']
Deployability,"Here are release notes for PRs 1765-2246 (I have all of this in a .md file, if it would be easier to just send that file along instead):. New Methods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:9,release,release,9,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['release'],['release']
Deployability,"Here's an update on the effects of your #1988, @JonathonMisiewicz. On the OCC LCCD bullet, no change, since it doesn't hit that mograd code. On the OCC OLCCD bullet, you can see the before and after below of the final iteration of nine cases. No change in number of iterations (final integer) because convergence is energy limited (first inequality) rather than mograd limited (second inequality). Do you think adjusting https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/occwave.cc#L144-L155 is in order?. ### olccd conv ae r/u/ro dz/adz/qz2p. pre-1988 WRONG; ```; iter: abs( 3.92e-07) < 1.00e-06 9.61e-08 < 1.00e-04 8; iter: abs( 8.96e-07) < 1.00e-06 2.68e-07 < 1.00e-04 8; iter: abs( 4.92e-07) < 1.00e-06 2.32e-08 < 1.00e-04 10; iter: abs( 1.04e-09) < 1.00e-06 4.03e-07 < 1.00e-04 10; iter: abs( 8.83e-07) < 1.00e-06 1.84e-07 < 1.00e-04 10; iter: abs( 1.94e-07) < 1.00e-06 3.62e-07 < 1.00e-04 9; iter: abs( 1.29e-07) < 1.00e-06 8.37e-07 < 1.00e-04 9; iter: abs( 4.13e-07) < 1.00e-06 1.17e-07 < 1.00e-04 11; iter: abs( 4.27e-07) < 1.00e-06 1.04e-07 < 1.00e-04 11; ```; post-1988 RIGHT; ```; iter: abs( 3.92e-07) < 1.00e-06 8.04e-07 < 1.00e-04 8; iter: abs( 8.96e-07) < 1.00e-06 2.11e-06 < 1.00e-04 8; iter: abs( 4.92e-07) < 1.00e-06 2.03e-07 < 1.00e-04 10; iter: abs( 1.04e-09) < 1.00e-06 2.32e-06 < 1.00e-04 10; iter: abs( 8.83e-07) < 1.00e-06 1.45e-06 < 1.00e-04 10; iter: abs( 1.94e-07) < 1.00e-06 3.03e-06 < 1.00e-04 9; iter: abs( 1.29e-07) < 1.00e-06 4.81e-06 < 1.00e-04 9; iter: abs( 4.13e-07) < 1.00e-06 9.22e-07 < 1.00e-04 11; iter: abs( 4.27e-07) < 1.00e-06 9.10e-07 < 1.00e-04 11; ```. By the way, there's more of those rms formulas. Look suspicious to you, too?. ```; >>> grep sqrt ../psi4/src/psi4/occ/* | grep rms_; ../psi4/src/psi4/occ/iterate_t2o1_amplitudes.cc: rms_t2 = std::sqrt(rms_t2 / nElements);; ../psi4/src/psi4/occ/iterate_t2o1_amplitudes.cc: rms_t2AA = std::sqrt(rms_t2AA) / nElements;; ../psi4/src/psi4/occ/iterate_t2o1_amplitudes.cc: rms_t2BB = std::sqrt(rms_t2BB",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-682100500:10,update,update,10,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-682100500,1,['update'],['update']
Deployability,"Here's the proposed patch copied over from Trac. @jturney , does this need further consideration, or do you want to close it out?. ```; --- psi4.0b4/src/lib/libmints/osrecur.cc.nuclear 2013-04-07 10:13:35.000000000 +0300; +++ psi4.0b4/src/lib/libmints/osrecur.cc 2013-04-22 14:52:27.921823318 +0300; @@ -637,22 +637,22 @@ void ObaraSaikaTwoCenterVIDerivRecursion; double tmp = sqrt(zeta) * M_2_SQRTPI;; // U from A21; double u = zeta * (PC[0] * PC[0] + PC[1] * PC[1] + PC[2] * PC[2]);; - double *F = new double[mmax+1];; + double *F = new double[mmax+2];. // Zero out F; - memset(F, 0, sizeof(double) * (mmax+1));; + memset(F, 0, sizeof(double) * (mmax+2));. // Form Fm(U) from A20; - calculate_f(F, mmax, u);; + calculate_f(F, mmax+1, u);. // Perform recursion in m for (a|A(0)|s) using A20; for (m=0; m<=mmax; ++m) {; vi_[0][0][m] = tmp * F[m];; }; - for (m=0; m<=mmax-1; ++m) {; - vx_[0][0][m] = 2.0*zeta*PC[0]*vi_[0][0][m+1];; - vy_[0][0][m] = 2.0*zeta*PC[1]*vi_[0][0][m+1];; - vz_[0][0][m] = 2.0*zeta*PC[2]*vi_[0][0][m+1];; + for (m=0; m<=mmax; ++m) {; + vx_[0][0][m] = 2.0*zeta*PC[0]*tmp*F[m+1];; + vy_[0][0][m] = 2.0*zeta*PC[1]*tmp*F[m+1];; + vz_[0][0][m] = 2.0*zeta*PC[2]*tmp*F[m+1];; }. // Perform recursion in b with a=0; @@ -670,7 +670,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] = PB[2] * vi_[0][bind-bzm][m] - PC[2] * vi_[0][bind-bzm][m+1];; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] = PB[2] * vx_[0][bind-bzm][m] - PC[2] * vx_[0][bind-bzm][m+1];; vy_[0][bind][m] = PB[2] * vy_[0][bind-bzm][m] - PC[2] * vy_[0][bind-bzm][m+1];; vz_[0][bind][m] = PB[2] * vz_[0][bind-bzm][m] - PC[2] * vz_[0][bind-bzm][m+1] + vi_[0][bind-bzm][m+1];; @@ -679,7 +679,7 @@ void ObaraSaikaTwoCenterVIDerivRecursion; for (m=0; m<=mmax-b; ++m) {; vi_[0][bind][m] += ooz * (bz-1) * (vi_[0][bind-2*bzm][m] - vi_[0][bind-2*bzm][m+1]);; }; - for (m=0; m<=mmax-b-1; ++m) {; + for (m=0; m<=mmax-b; ++m) {; vx_[0][bind][m] += ooz ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3#issuecomment-121322945:20,patch,patch,20,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-121322945,1,['patch'],['patch']
Deployability,"Hey all, I have updated the code to account for the two density matrices present in UHF. I ran a couple of tests. UHF does just as well as RHF for similar test cases with respect to screening and parallel performance. I have also discovered that density screening is not very effective for systems with diffuse basis sets (like aug-cc-pvdz)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-759736713:16,update,updated,16,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-759736713,1,['update'],['updated']
Deployability,"Hey there! I've been working with @averyparr and wanted to chime in on the _specific_ issue of omega in wb97m-v. I'm don't think this is worth promoting to a bigger issue, but at least so if someone else is searching and finds this issue, there's some context. In _addition_ to the patches made in #2643, there's another change that needs to happen to enable one to set `omega` in wb97m-v. Specifically, the version of libxc that psi4 pulls in is 5.1.5 (https://github.com/psi4/psi4/blob/master/external/upstream/libxc/CMakeLists.txt#L18) . This version is old enough that the C file for wb97m-v is missing a _lot_ of content compared to it's other wb97 cousins (see https://gitlab.com/libxc/libxc/-/blob/5.1.5/src/hyb_mgga_xc_wb97mv.c#L38 and compare to, e.g., https://gitlab.com/libxc/libxc/-/blob/5.1.5/src/hyb_gga_xc_wb97.c#L145). Because `xc_func_info_get_n_ext_params` ends up returning 0 (since it's not properly set in wb97m-v), psi4 thinks there's nothing it can set (`NPAR` is 0 and the names are NULL). . Unfortunately this isn't fixed until version 5.3 (https://gitlab.com/libxc/libxc/-/blob/release-5.3.0/src/hyb_mgga_xc_wb97mv.c), which isn't yet a stable release. It's pretty easy to monkey-patch your own libxc 5.2.3+, which _seems_ to work just fine with psi4, but I haven't run any tests besides the basic ones that run during installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1198448773:282,patch,patches,282,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1198448773,5,"['install', 'patch', 'release']","['installation', 'patch', 'patches', 'release', 'release-']"
Deployability,"Hi @bozkaya, glad you're continuing to work on this. I worry that we're combining too many things here. I can see that saving the deltaMP2 energies are relevant to getting the FNO energies working, but changes to the tensor class and UHF-DF-CCSD perhaps are not. . For the latter two, I suggest a separate PR. If you send git patches of the commits where you added those features/fixes (can add `.patch` to end of GH commit view like https://github.com/psi4/psi4/commit/28caec54bff4a0ef39f01269cb94a930f6bd7223.patch or can do on the command line, https://stackoverflow.com/questions/6658313/generate-a-git-patch-for-a-specific-commit), I can get that PR started for you. The changes in those diffs/patches should be new work on, for example, the tensor class, not historical changes. For this PR, mainly what's needed are the deltaMP2 changes (again, if you'll send a patch, I'll add it to this PR) and tests. For the tests, it'll be straightforward to start from this branch and add new files.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-462830483:326,patch,patches,326,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-462830483,6,['patch'],"['patch', 'patch-for-a-specific-commit', 'patches']"
Deployability,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710#issuecomment-305441942:39,update,updated,39,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942,1,['update'],['updated']
Deployability,"Hi @loriab @dgasmith,. Sorry I didn't update. I was able to compile the C code that I wanted using the newest gcc packages from conda (gcc_linux-64). From my side is all fine except that when we depend on psi4, we bring all its dependencies with us, and I was wondering if this gcc version differences may cause problems down the line. If you guys make psi4 work with the default gcc from conda, that would be ideal, but I am no one to ask for that from you guys :) you already do a very good job. I think that's all. Feel free to close this if you feel it makes no sense to continue open. Cheers,; João",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-347174011:38,update,update,38,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347174011,1,['update'],['update']
Deployability,"Hi @loriab, I was just wondering if there are any updates on this issue please? I'm not sure how easy it would be to revert to behaviour before PR #2127? - at this point we had fully functioning access to both MBIS charges and atomic volumes. The calculation of the free atom volumes does not seem like a key feature to me (they can be easily tabulated). Thanks for your help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-925810175:50,update,updates,50,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-925810175,1,['update'],['updates']
Deployability,"Hi @loriab,. Just did a fresh conda installation, and this problem does not exist. I'm going to close it for now then. Sorry to bother!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820#issuecomment-336332157:36,install,installation,36,https://psicode.org,https://github.com/psi4/psi4/issues/820#issuecomment-336332157,1,['install'],['installation']
Deployability,"Hi @mkrompiec, thanks! I'm still working on local correlation methods in Psi4. This pull request is effectively done, and is only waiting on the official Psi4 1.4 release to be merged. I expect that to happen relatively soon, but I'm not sure of the exact timeline. . Once this pull request is merged in, it would be straightforward to expose PNOs and integrals to the Python layer. By the way, if you're interested in regular (non-DLPNO) two-electron integrals, those are easily accessible through the `MintsHelper` class, [as is done here.](https://github.com/psi4/psi4numpy/blob/1233d1af2d168f91065e4f7dbb1a96e02b95b6e1/Tutorials/01_Psi4NumPy-Basics/1e_mints-helper.ipynb)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-863548414:163,release,release,163,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-863548414,1,['release'],['release']
Deployability,"Hi @ndattani, I'm sorry you weren't linked in with this thread. Unfortunately, the situation at the moment isn't much better than this issue reflects. Between branch and API updates (see #2442), the specific requirements of psi (see https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L26), and the quirk that I can't yet myself get past a symbol limit with larger AM and the Intel linker to build a big-AM L2 conda package, building bigger Libint2's hasn't been something we recommend casually. As far as I know, it can be done with gcc, though. Any generation or build step will take hours in parallel. I don't suggest you do this, esp. if you're most accustomed to single-line builds. Nevertheless, a strategy is:; * clone and switch branches to https://github.com/loriab/libint/tree/new-cmake-harness-lab-rb1; * collect deps as described https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md . You'll need C++ compiler, CMake, Ninja, Boost headers, GMPXX, and Eigen3; * configure something like Exhibit A below. `CMAKE_PREFIX_PATH` is where you hint your boost, gmp, eigen, etc. install locations. You might have to comment out traps in int_am.cmake that stop you setting the AM too high.; * I suggest only doing the generation step by building as `cmake --build <build_dir> --target export`. when this finishes (several hours, so you might want to test run with lower AM), there'll be a `libint-*.tgz` file produced.; * Now back at your psi4 clone, edit this line https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 to the location of that tarball (according to cmake manual a filepath is ok -- needn't be URL).; * Configure Psi4. The buildsys can build from source most QC dependencies, but you'll need the basics of Python, NumPy, etc. as described https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L36-L50 . I'd definitely suggest passing in `-D BUILD_SHARED_LIBS=ON`, too. Note L2 h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906:174,update,updates,174,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906,2,"['INSTALL', 'update']","['INSTALL', 'updates']"
Deployability,"Hi @susilehtola, I was looking around the Fedora packaging site to see if there was a download counter. Didn't find one but did notice a few details from your build scripts that could be updated:. * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n45 actually need Py >= 2.7, as I'm not holding back from dictionary comprehensions; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n19 more simply, `psi4/psi4`, though github re-directs; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n107 It's on by default anyway, so no change, but wrong variable https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L99; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n109 not sure if this is still working. May need to be `-DLAPACK_LIBRARIES=...`. Is there actually a monitor that you know of for Fedora package downloads? We like to track them for grant reviews.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631#issuecomment-284125806:187,update,updated,187,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-284125806,1,['update'],['updated']
Deployability,"Hi @susilehtola, I've been following Libxc v5.1 https://gitlab.com/libxc/libxc/-/issues/186 with interest. When I compiled this branch (after rebase; including your fixes from the spring, thanks!) in late December against the the Libxc 5.0 branch, I got about the same Psi4 test results as recorded above -- lots of `Matrix::power: C_DSYEV failed`. However, when I compile this branch against the new Libxc 5.1 hotfix branch, I don't even get that far. After disabling OpenMP, I get segfaults (dft-psivar):; ```; (gdb) bt; #0 0x00007ffff78351d7 in raise () from /lib64/libc.so.6; #1 0x00007ffff78368c8 in abort () from /lib64/libc.so.6; #2 0x00007ffff782e146 in __assert_fail_base () from /lib64/libc.so.6; #3 0x00007ffff782e1f2 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffed70db12 in xc_mix_func (func=func@entry=0x555556ca7500, np=np@entry=255, rho=rho@entry=0x555556e575c0, sigma=sigma@entry=0x555556ccda80, lapl=lapl@entry=0x0, tau=tau@entry=0x0, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, vlapl=0x0, vtau=0x0, v2rho2=0x0, v2rhosigma=0x0, v2rholapl=0x0, v2rhotau=0x0, v2sigma2=0x0, ; v2sigmalapl=0x0, v2sigmatau=0x0, v2lapl2=0x0, v2lapltau=0x0, v2tau2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rho2lapl=0x0, v3rho2tau=0x0, v3rhosigma2=0x0, v3rhosigmalapl=0x0, v3rhosigmatau=0x0, v3rholapl2=0x0, v3rholapltau=0x0, v3rhotau2=0x0, v3sigma3=0x0, v3sigma2lapl=0x0, v3sigma2tau=0x0, v3sigmalapl2=0x0, v3sigmalapltau=0x0, v3sigmatau2=0x0, ; v3lapl3=0x0, v3lapl2tau=0x0, v3lapltau2=0x0, v3tau3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho3lapl=0x0, v4rho3tau=0x0, v4rho2sigma2=0x0, v4rho2sigmalapl=0x0, v4rho2sigmatau=0x0, v4rho2lapl2=0x0, v4rho2lapltau=0x0, v4rho2tau2=0x0, v4rhosigma3=0x0, v4rhosigma2lapl=0x0, v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmala",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084:411,hotfix,hotfix,411,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084,1,['hotfix'],['hotfix']
Deployability,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220670249:632,release,release,632,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249,3,['release'],['release']
Deployability,"Hi Eugene, Any update on this one?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34#issuecomment-37975681:15,update,update,15,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-37975681,1,['update'],['update']
Deployability,"Hi Jonathon,. This type of behavior is known, I am not sure if there is an easy solution to this. When iterative solution does not converge, the DCT code attempts to solve the quadratic equation for tau directly by completing a square and taking a square root. This usually works fine, but in some problematic cases (for example, multi-reference situations or converging SCF on an excited state) the matrix under the square root becomes non-positive-semidefinite and its square root becomes undefined. This is the most likely reason why the code produces NaNs. There is a number of possible solutions to this, but for now one can just check the eigenvalues of the matrix under the square root and throw an exception when one of the eigenvalues becomes negative. I can look into this in the next few days and add a patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1117#issuecomment-410071671:814,patch,patch,814,https://psicode.org,https://github.com/psi4/psi4/issues/1117#issuecomment-410071671,1,['patch'],['patch']
Deployability,"Hi Justin,. My /tmp was erased, so it took me a while before being able to reproduce the error.; What was happening is the following:; - I started off with a really bad geometry and a certain order of C an H atoms.; - After a while, I killed psi4 to generate a new input file with D2h symmetry. Therefore I reordered the C and H atoms to corresponding D2h pairs.; - So in the folder (the problem would happen in any folder), filename.moleculename.intco was still there from the previous atom ordering.; - Psi4 tried to combine the new molecule with the old filename.moleculename.intco, and it got nowhere. It restrained the update steps to negligibly small displacements. ==> So how about changing filename.moleculename.intco > filename.moleculename.pid.intco ?. Best,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66#issuecomment-73297994:624,update,update,624,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73297994,1,['update'],['update']
Deployability,"Hi Konrad,; Thanks for bringing this up. Do you know the magnitude of the change that this will introduce? We will likely need to make the fix and then highlight this heavily in our patch notes. @ehohenstein2 any thoughts here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1677#issuecomment-510926629:182,patch,patch,182,https://psicode.org,https://github.com/psi4/psi4/issues/1677#issuecomment-510926629,1,['patch'],['patch']
Deployability,"Hi Lori,. I am sorry that I am really confused. How about this, I send you the dfocc module, you add it to the present psi4. Then, I will update my psi4 and my fork and proceed as usual. If it is okay for you I will send the whole module as a zip file to you via e-mail. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-462781952:138,update,update,138,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-462781952,1,['update'],['update']
Deployability,"Hi Lori,. Now, the dfocc source code is properly clang-formatted. I also update the docs. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/797#issuecomment-328286189:73,update,update,73,https://psicode.org,https://github.com/psi4/psi4/pull/797#issuecomment-328286189,1,['update'],['update']
Deployability,"Hi Lori,. Thank you very much for your help. I have updated my tensor class. Further, I have added delte-MP2 corrections to the energy of the method, hence it is saved to PsiVar now. I think, you may add it public repo now. However, when try to make a push I got the following error:. remote: Permission to loriab/psi4.git denied to bozkaya.; fatal: unable to access 'https://github.com/loriab/psi4.git/': The requested URL returned error: 403. As I understand you should allow me to push my changes. Let me know if we need anything else. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-446552988:52,update,updated,52,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-446552988,1,['update'],['updated']
Deployability,"Hi Rob, great to hear from you!. I'll patch up https://github.com/psi4/psi4/pull/2135 so that psi is using libecpint rather than internal ecp code. That'll be a better starting point for debugging. Thanks for the report!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2564#issuecomment-1112962032:38,patch,patch,38,https://psicode.org,https://github.com/psi4/psi4/issues/2564#issuecomment-1112962032,1,['patch'],['patch']
Deployability,"Hi Rolling,. Thank you very much for the explanation. I have calculated number of perturbed geometries assuming 3-point formulas are used for the Hessian. Therefore the calculated number of 930 appeared to me too large. However, considering the formula used for off-diagonal elements, it is no more a 3-point formula. . For efficient computation of frequencies we need to implement mode=sow for findif of gradients, which would dramatically decrease the cost of frequencies. @loriab @psi-rking",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/145#issuecomment-122027995:3,Rolling,Rolling,3,https://psicode.org,https://github.com/psi4/psi4/issues/145#issuecomment-122027995,1,['Rolling'],['Rolling']
Deployability,"Hi Ryan,. Capturing cout in a string or stringstream and feeding it to psi::PsiOutStream is OK if the message to be printed is limited in time and volume. If by calling a single function of a library, it executes for a long time and prints a lot of lines over its execution time, it might be good to have a way to intermediary feed them to the psi::PsiOutStream. Else you have to wait till the end of execution to get any information at all. If something goes wrong, you then also don't get an indication where things might have gone wrong. So is there a possibility to redirect cout's stream directly to psi::outfile, with a continuous output?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83085867:626,continuous,continuous,626,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83085867,1,['continuous'],['continuous']
Deployability,"Hi Vladimir,. Thank you for your interest for our OO codes. . In fact, I am working on df-ocepa implementation now. This week I will leave the city for a conference and then I will join a workshop camp for our chemistry olympiad students, I am teaching physical chemistry for chemistry olympiad team. All these will take a two-weeks period. Then, I can finish and release it. I guess a few weeks later the code will be ready for public release. Also note that I will prefer the ""orbital-optimized linearized coupled-cluster doubles"" as the name of new code because cepa is mixed up with other cepa variants. Hence, the new code will be called by energy('df-olccd'). You may follow the psi4public for the new release. Alternatively, I can inform you when it has been released if you provide me your e-mail address. Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/185#issuecomment-152814498:364,release,release,364,https://psicode.org,https://github.com/psi4/psi4/issues/185#issuecomment-152814498,4,['release'],"['release', 'released']"
Deployability,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:103,configurat,configurations,103,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214,2,['configurat'],['configurations']
Deployability,"Hi all, . I just updated the density screening code with the UHF/ROHF cases. I also added a test in the test_erisieve.py pytest file that ensures the same number of shell quartets are being screened out with RHF and UHF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-924242589:17,update,updated,17,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-924242589,1,['update'],['updated']
Deployability,"Hi all, I have recently updated the algorithm to perform a shell-based LinK algorithm while maintaining atomic blocking to maximize parallel efficiency. This is consistent with the algorithm in the paper (as the first line of the algorithm is ""Loop over types (angular momenta, contraction, ...) of shell-pair blocks, and atom blocking is a valid way to block shell pairs"". I tried to implement a linK variant using only shell-blocking, and the parallel efficiency was severely impaired. Here are some timings results of the new updated LinK code (run on Pople Basis Sets):; ![LinK_timings_631gs](https://user-images.githubusercontent.com/60559795/147882191-40115cbd-56fa-47bc-90a4-d57e707cca47.png); ![LinK_timings_631pgs](https://user-images.githubusercontent.com/60559795/147882187-ca00313a-07cb-48b1-9628-1f491f083d49.png)![LinK_timings_6311gs](https://user-images.githubusercontent.com/60559795/147882185-d70f96d7-064b-4a92-a335-f4d707a2fa32.png); ![LinK_JK_ratios_pople](https://user-images.githubusercontent.com/60559795/147882192-1c6bcaf8-b01d-4574-98e1-710dafd1d74e.png). Core Developers, if you are able to, please prioritize the review of this PR. There are a plethora of new Psi features that would be contingent on the finalization of this PR (Direct-DFJ, CFMM, Split-JK architecture, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024:24,update,updated,24,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1003741024,2,['update'],['updated']
Deployability,"Hi all,. I am out of Country for the International Junior Science Olympiad (IJSO), hence I could not catch up with you. I know the problem for large molecules, it is because of int. I think if I change all ints to long long int, the problem will be solved. When I find an available time I can take a look. Meanwhile, you can use your patch and update dfocc as long as your patch passes all dfocc tests. Alternatively, a volunter may change all int data types to LLI for dfocc. @devinamatthews @dgasmith . Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405:334,patch,patch,334,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405,3,"['patch', 'update']","['patch', 'update']"
Deployability,"Hi all. Thanks for the quick response! :). I implemented b86bpbe in; nwchem back in the day, but psi4's results are a bit off (not too; much, a bit over 1e-3). I'll try to figure out what's going on when I; have some time (attending a conference right now), add b86bpbe to; the dft1 test, and update the pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/438#issuecomment-230823292:293,update,update,293,https://psicode.org,https://github.com/psi4/psi4/pull/438#issuecomment-230823292,1,['update'],['update']
Deployability,"Hi everyone!. It was [my forum thread](http://forum.psicode.org/t/building-with-high-am/936) that Toon linked in the first comment of this GitHub Issue. I never got a response there, so I never ended up using Psi4. Today I searched on Google to see if anything changed in the last 4.5 years, and found this page for the first time. I wonder why Toon, and then Lori, continued the discussion here rather than in that forum thread (or why no link to this page was provided there), because for that reason I didn't see this until more than 4 years later. Anyway, it looks like unresolved issues remained in May 2022. **Does anyone have a set of instructions for building with `AM=10`, that is safe for 2023 (preferably without Conda)?** I just need to calculate energies (no need for the Hessian, for example). Is it not possible to just install Psi4 with a sequence like the one below, that I use to install OpenMolcas?; ```; cmake .. ; make -j; ```; Or like the command that is used for MRCC:; ```; build.mrcc Intel -pOMP; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374142428:835,install,install,835,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374142428,2,['install'],['install']
Deployability,"Hi guys,; What is the status on this? I see [here](https://anaconda.org/psi4/psi4/files) that the dev has the py35 and py36. Any idea of when this dev version will be definitive (released)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-289740614:179,release,released,179,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-289740614,1,['release'],['released']
Deployability,"Hi hokru,. Thank you very much, this is exactly what I am looking for. Is this documented anywhere ? Or is there a link on the main page of the psi4 github repository pointing to this release page ?. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-273778973:184,release,release,184,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273778973,1,['release'],['release']
Deployability,"Hi loriab,. Sorry for asking that many questions. v1.1a1 requires GCC 4.9 or newer. Most software on our cluster is compiled with GCC 4.8.2 and I would like to avoid recompiling Python, HDF5, GSL etc. with a newer compiler version. The reason for compiling a newer version of psi4 is the the following post from Robert (SAPT bug in 1.0 rc1):. http://forum.psicode.org/t/problem-in-sapt2-3-dmp2-calculation/395. In your reply to the post you mentioned that there was a clean up of the SAPT code in july:. ""Your input worked just fine on my current Psi4. There've been a lot of changes to Psi4 since 1.0rc, and there was a clean-up of SAPT printing in July, so I recommend you update to current Psi4 which is ~700 commits ahead of where you're at. Especially since you're running SAPT. Did you build your own or do you want to try the conda binary?"". Is there are psi4 version with the new SAPT code, which builds with GCC 4.8.2 ?. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274027886:675,update,update,675,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274027886,1,['update'],['update']
Deployability,"Hi loriab,. Thank you for your reply. On our HPC cluster, we do not update software. If there is a newer version of a software, we do an additional installation next to the existing version. For us it is important to provide continuity to the researchers. If data is published and a year or two later a researcher for some reason needs to reproduce a calculation, we would like to provide exactly the same software version that was used for the first run. Since that means that we have a lot of versions installed for a certain softwares, there needs to be a transparent way to distinguish the versions (and it should be obvious to the user, which version he is using). Tags sounds like a good solution for the installations that I am doing. I just tried to build release 1.0 from the release tarball and encountered some problems (half a year ago I have built 1.0 rc1 and this worked well). I just need to build a version that is newer than 1.0 rc1, because of a SAPT bug in rc1. Are tagged versions static or do they also change ?. I will try to clone and build 1.1a1. Thank you very much for replying to my questions. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-273809137:68,update,update,68,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273809137,6,"['install', 'release', 'update']","['installation', 'installations', 'installed', 'release', 'update']"
Deployability,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:1378,integrat,integrated,1378,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906,1,['integrat'],['integrated']
Deployability,"Hi, ; For electron correlation methods like MP2 used in your double-hybrid functional you need at least 2 electrons. . Older psi4 versions didn't catch this case gracefully. I assume you use v1.3.2?; This has been patched earlier this year in the development version (https://github.com/psi4/psi4/pull/1857 by @PeterKraus ).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1995#issuecomment-682052040:214,patch,patched,214,https://psicode.org,https://github.com/psi4/psi4/issues/1995#issuecomment-682052040,1,['patch'],['patched']
Deployability,"Hi, I installed via sudo apt install psi4 on Windows Subsystem for Linux; Ubuntu. I believe this version may not be up to date as the online manual; on the psi4 website for version 1.2 indicates no frontier_orbital option; for cubeprop_tasks, whilst the manual for 1.3 indicates the option. I will recompile the latest stable release from source tonight and confirm,; which may then allow this issue to be closed. Currently at work so will be; a while until I can check. Thanks. On Mon, 23 Sep 2019, 22:40 Lori A. Burns, <notifications@github.com> wrote:. > I just ran; >; >; > molecule {; > O; > H 1 1.0; > H 1 1.0 2 90.0; > }; >; > set basis 6-31G; > set scf_type df; > set freeze_core True; > set cubeprop_tasks ['frontier_orbitals']; > E, wfn = optimize('b3lyp', return_wfn=True); > cubeprop(wfn); >; > and it correctly produced cube files. Are you running from a conda install; > or a compiled version? If the latter and you recompiled recently, try; > touching the psi4/src/core.cc and psi4/src/export_* files and re makeing.; > I suspect there's something odd going on with the pybind11 2.3.0 update and; > mixed versions.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1722?email_source=notifications&email_token=ANJDDIFK6K3R2HAQ7BJLEV3QLEZUFA5CNFSM4IZS2FU2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD7MLNTQ#issuecomment-534296270>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ANJDDIFGT4Q26HSV47LQHXDQLEZUFANCNFSM4IZS2FUQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1722#issuecomment-534496864:6,install,installed,6,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534496864,5,"['install', 'release', 'update']","['install', 'installed', 'release', 'update']"
Deployability,"Hi, Rob. All ECP-related issues are marked with the `ecpint-needed` tag. There are currently five open ones. I'm going to go through them and attempt to reproduce them with the v1.6 release, so we can assess if ECPs are broken. You raise a good point: debugging ECP issues is going to be harder if we also change basis functions. @loriab, can we put a moratorium on #2537 until we've had more time to investigate the ECP issues and evaluate the performance of DDD ""in the wild""? While I would not expect DDD to introduce strange correctness errors like I would expect of integral convention swaps, I am too paranoid to neglect the possibility. Say hi to Nick Stair for me. I'll report back once I've finished my preliminary investigations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2564#issuecomment-1133518145:182,release,release,182,https://psicode.org,https://github.com/psi4/psi4/issues/2564#issuecomment-1133518145,1,['release'],['release']
Deployability,"Hi, Sorry for your trouble. I haven't used Colab myself, but your commands look reasonable, and I don't see any red flags in your `conda list` (thanks for including that). Since you're seeing trouble, here's a few suggestions:; * I would ordinarily advise putting psi4 is a separate conda env, not the base one. That seems awkward in colab (has to be activated per cell!) but is a possibility, https://stackoverflow.com/questions/53031430/conda-environment-in-google-colab-google-colaboratory; * You're pulling a py37 miniconda, then updating everything, then installing a py38 psi4 into its base environment. That's not the smoothest path. I'd choose a py38 or py39 installer https://docs.conda.io/en/latest/miniconda.html#linux-installers, then don't update all the packages, and do install the psi4 of matching python.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152453242:560,install,installing,560,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152453242,5,"['install', 'update']","['install', 'installer', 'installers', 'installing', 'update']"
Deployability,"Hi, did you get a chance to look at this further? So long as as big problems aren't uncovered in last week's rc3, we'd like to do the 1.4 release including the new databases this week. I think the items in https://github.com/psi4/psi4/pull/2154#issuecomment-870728272 were pretty small. Let me know if you need advice for the rebase.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-878487254:138,release,release,138,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-878487254,1,['release'],['release']
Deployability,"Hi, thank you very much for your response. > I would ordinarily advise putting psi4 is a separate conda env, not the base one. That seems awkward in colab (has to be activated per cell!) but is a possibility, https://stackoverflow.com/questions/53031430/conda-environment-in-google-colab-google-colaboratory. I tried this and am able to install psi4 and even import it without any errors. [psi4-test.txt](https://github.com/psi4/psi4/files/8883628/psi4-test.txt) contains the results of `psi4 --test`; kindly let me know if this mean that psi4 is in functional state.; Here is the `conda list` output in case it is needed.; [psi4-env_conda-list.txt](https://github.com/psi4/psi4/files/8883643/psi4-env_conda-list.txt). Now I have some compatibility issues against python3.8 but that's with other packages I am trying to use. Just to make sure, psi4 is no longer supported on python3.7, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152894724:337,install,install,337,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152894724,1,['install'],['install']
Deployability,"Hi,; Please, if possible, kindly let me ask a question as follows:. Recently, I lost my Psi4 code and had to again install its newest version 1.9.1 through ""Conda-Forge"". Moreover, I did build a scratch folder for Psi4 in the Home directory and its path was truly included in "".bashrc""; i.e.; export PATH=/home/saeed/miniconda3/bin:$PATH; export PSI_SCRATCH=/home/saeed/Scratch_PSI4. When a given Psi4 task is ran, the scratch folder is filled and empty alternately. But, after finishing calculations, this folder remains full and there are several files in it that must be deleted manually, while there was no such problem before. Please also let me state that the problem mentioned above only exists for ""CBS-extrapolations"" calculations while ""SAPT"" calculations are never encountered such a problem. Could you please let me know how I can resolve this problem so that this folder, when a task is over, to be emptied automatically as before?. In advance, too many thanks for your highly valuable guidance. Sincerely,; Saeed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/416#issuecomment-2254445245:115,install,install,115,https://psicode.org,https://github.com/psi4/psi4/issues/416#issuecomment-2254445245,1,['install'],['install']
Deployability,"Hi; I created an environment, psi4, and run `conda activate psi4`; Here is what I got after I run `conda info`; ```. active environment : psi4; active env location : /home/tim/anaconda3/envs/psi4; shell level : 2; user config file : /home/tim/.condarc; populated config files : /home/tim/.condarc; conda version : 4.11.0; conda-build version : 3.21.4; python version : 3.8.8.final.0; virtual packages : __linux=5.10.0=0; __glibc=2.31=0; __unix=0=0; __archspec=1=x86_64; base environment : /home/tim/anaconda3 (writable); conda av data dir : /home/tim/anaconda3/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/ngsolve/linux-64; https://conda.anaconda.org/ngsolve/noarch; https://conda.anaconda.org/conda-forge/linux-64; https://conda.anaconda.org/conda-forge/noarch; https://repo.anaconda.com/pkgs/main/linux-64; https://repo.anaconda.com/pkgs/main/noarch; https://repo.anaconda.com/pkgs/r/linux-64; https://repo.anaconda.com/pkgs/r/noarch; package cache : /home/tim/anaconda3/pkgs; /home/tim/.conda/pkgs; envs directories : /home/tim/anaconda3/envs; /home/tim/.conda/envs; platform : linux-64; user-agent : conda/4.11.0 requests/2.26.0 CPython/3.8.8 Linux/5.10.0-1052-oem ubuntu/20.04.3 glibc/2.31; UID:GID : 1000:1000; netrc file : None; offline mode : False. ```. And this is after running `~/.condarc`:. `bash: /home/tim/.condarc: Permission denied`. I try with the command you proposed with a newly created environment, psi. `conda install psi4 python=3.9 psi4::libxc`. But it appears the same as I had shown you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761:1471,install,install,1471,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761,1,['install'],['install']
Deployability,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:122,install,installs,122,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467,3,['install'],"['install', 'installed', 'installs']"
Deployability,"Hm, I don't get these errors when building in a proper buildroot with only Python 3 installed...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1565#issuecomment-469254424:84,install,installed,84,https://psicode.org,https://github.com/psi4/psi4/issues/1565#issuecomment-469254424,1,['install'],['installed']
Deployability,"Hmm, I see the same – `.h` are installing but `.hpp` are not. @bennybp, [this line](https://github.com/simint-chem/simint-generator/blob/master/skel/simint/CMakeLists.txt#L92) doesn't seem to be functioning. The simint conda package has the cpp_restrict.hpp file installed, though, so once upon a time it worked. ```; >>> (objdir) find . -name ""cpp_restrict.hpp""; ./external/upstream/simint/simint_external-prefix/src/simint_external/simint/cpp_restrict.hpp; >>> (objdir) ll ./external/upstream/simint/simint_external-prefix/src/simint_external/simint; total 64; -rw-r--r-- 1 loriab staff 2451 Mar 22 2017 CMakeLists.txt; drwxr-xr-x 8 loriab staff 272 Mar 22 2017 boys; -rw-r--r-- 1 loriab staff 332 Jan 24 2017 constants.h; -rw-r--r-- 1 loriab staff 165 Mar 22 2017 cpp_restrict.hpp; drwxr-xr-x 14 loriab staff 476 Mar 28 2017 ostei; drwxr-xr-x 8 loriab staff 272 Mar 22 2017 shell; -rw-r--r-- 1 loriab staff 138 Feb 2 2017 simint.h; -rw-r--r-- 1 loriab staff 831 Feb 2 2017 simint_eri.c; -rw-r--r-- 1 loriab staff 1927 Mar 22 2017 simint_eri.h; -rw-r--r-- 1 loriab staff 253 Jan 24 2017 simint_init.c; -rw-r--r-- 1 loriab staff 1148 Mar 22 2017 simint_init.h; drwxr-xr-x 8 loriab staff 272 Mar 22 2017 vectorization; >>> objdir: ll stage/usr/local/psi4/include/simint/; total 32; drwxr-xr-x 7 loriab staff 238 Jan 11 01:05 boys; -rw-r--r-- 1 loriab staff 332 Jan 24 2017 constants.h; drwxr-xr-x 8 loriab staff 272 Jan 11 01:05 ostei; drwxr-xr-x 5 loriab staff 170 Jan 11 01:05 shell; -rw-r--r-- 1 loriab staff 138 Feb 2 2017 simint.h; -rw-r--r-- 1 loriab staff 1927 Mar 22 2017 simint_eri.h; -rw-r--r-- 1 loriab staff 1148 Mar 22 2017 simint_init.h; drwxr-xr-x 8 loriab staff 272 Jan 11 01:05 vectorization; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-357041900:31,install,installing,31,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-357041900,2,['install'],"['installed', 'installing']"
Deployability,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:93,install,installs,93,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,3,"['install', 'patch', 'update']","['installs', 'patch', 'update']"
Deployability,"Hmm, looks like I missed this option. Ill create a patch for it. For now you can do the following:. ``` python; e, wfn = energy('detci', return_wfn=True); wfn.get_opdm(-1, -1, ""SUM"", False).print_out(); wfn.get_tpdm(""SUM"", False).print_out(); ```. OPDM signature is as follows:. ```; /**!; * Obtains the OPDM <Iroot| Epq |Jroot> from the ciwave object. If Jroot is; * negative then Iroot == Jroot, if both roots are -1 then the ""special"" CI; * OPDM is returned.; * @param Iroot Left root; * @param Jroot Right root; * @param spin Selects which spin to return: A, B, or SUM; * @param full_space If false return only the active OPDM else return full OPDM; * @return OPDM or TDM shared matrix; **/; SharedMatrix get_opdm(int Iroot=-1, int Jroot=-1, const std::string& spin=""SUM"",; bool full_space=false);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/477#issuecomment-251968634:51,patch,patch,51,https://psicode.org,https://github.com/psi4/psi4/issues/477#issuecomment-251968634,1,['patch'],['patch']
Deployability,"Hmm, sounds like #1548, which I wasn't able to hunt down. Really should be installing to `<objdir>/stage/lib/${PYMOD_INSTALL_LIB}/`. Are you setting `CMAKE_INSTALL_PATH`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1582#issuecomment-475242008:75,install,installing,75,https://psicode.org,https://github.com/psi4/psi4/issues/1582#issuecomment-475242008,1,['install'],['installing']
Deployability,"Hmmm. The fnocc2 can be explained by the following diff.... ```; -energy('g2'); -refg2 = -76.332048016380 #TEST; -refgibbs = -76.349644827450 #TEST; +energy('g2',dertype=1); +refg2 = -76.332048079709 #TEST; +refgibbs = -76.349644891507 #TEST; ```. that was part of my last set of commits. I updated the reference values to reflect that I'd switched to analytic Hessians. Then when I committed it, I realized that analytic Hessians require angular momentum beyond what Travis can handle, so I switched back to finite differences but forgot to roll back the reference values. Feel free to revert the reference values, and that'll be fine. The other two problems appear to be a seg fault, so I'll try to check out your changes and see if I can reproduce. Sorry for the hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235102762:291,update,updated,291,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235102762,1,['update'],['updated']
Deployability,"Holger's comment stands. Build fail is due to an environment, not this PR, and will be automatically fixed once the commit is updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1230376809:126,update,updated,126,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1230376809,1,['update'],['updated']
Deployability,"Holger, very glad you are taking this on!. On Fri, Apr 5, 2019, 2:32 AM Holger Kruse <notifications@github.com> wrote:. > Description; >; > This *work-in-progress* PR implements standard grid pruning techniques,; > where one assumes that the electron density is largely isotropic close to; > the atomic centre and thus coarse grids are sufficient. Typically the; > atomic integration sphere is divided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:372,integrat,integration,372,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,3,"['integrat', 'update']","['integration', 'updated']"
Deployability,"How did `TargetHDF5Config.cmake`, etc. even get into `/usr/local/` except through a Psi4 install? Or possibly libefp or CheMPS2 install? Those are just CMake target wrappings around HDF5 and LAPACK detections. If you're not wanting Psi to install those (they're mainly for info sharing w/i the Psi cmake superbuild), then libefp and chemps2 shouldn't be installing them either. Just in case it's unclear, every package gets internally installed to `<builddir>/stage/${CMAKE_PREFIX_PATH}`, which is a full-fledged psi installation. The result of user `make install` is to just bodily copy the `stage/` dir into the filesystem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/855#issuecomment-343778590:89,install,install,89,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778590,7,['install'],"['install', 'installation', 'installed', 'installing']"
Deployability,"How did you get gau2grid (psi4 dependency) compiled without `mpmath`? There are ways around it, but simplest precaution is to make sure the python psi4 cmake is detecting (look in `<objdir>/CMakeCache.txt`; influence through `cmake -DPYTHON_EXECUTABLE=/full/path/to/bin/python`) and any conda-supplied psi dependencies are in the *same* conda environment and that that's active throughout cmake configure, `make`, `make install`, and runtime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382181608:420,install,install,420,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382181608,1,['install'],['install']
Deployability,"How soon do you need this? This bug is an easy fix, and I can include it in the Psi4 1.8 release coming out in a couple weeks. If you need this sooner, the ""workaround"" is simple.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989#issuecomment-1533540405:89,release,release,89,https://psicode.org,https://github.com/psi4/psi4/issues/1989#issuecomment-1533540405,1,['release'],['release']
Deployability,"Huh, never mind the jobname bit then. I was changing various things so I must have been mistaken on that point. Ah, in tutorial.rst, there's a sentence below. That `sec:install_III_7` link is to a long-deceased file. Please replace that link with one to the ""7."" on the wiki page or anywhere else you think best covers the subject. ```; ""For your convenience, the above example can be found in :srcsample:`tu1-h2o-energy`. You can run it if you wish. Once |PSIfour| is in your path (see the :ref:`User Configuration <sec:install_III_7>` section""; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/361#issuecomment-212422557:502,Configurat,Configuration,502,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212422557,1,['Configurat'],['Configuration']
Deployability,"I added tests that check ccsort/transqt2 give the same results as other tests provided they are installed. These tests will not fiddle with the `run_cctransort` option if pasture is not installed. I also cleaned up some of my fixup commits since the twin PR has been closed. . The last things I need to do is finalize the pasture install instructions to go in the PastureNotFoundError message, and then this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/534#issuecomment-265466569:96,install,installed,96,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265466569,3,['install'],"['install', 'installed']"
Deployability,I agree that a CMake Libint1 build failed to be least common denominator for downstream on two fronts: (1) no `.pc` files and (2) no `libr12` library. I've fixed the first one Libint-side. Second I don't particularly have time for and can't do anyways until someone volunteers to test the resulting `libr12`. The one-line patch on the packager side to use the libtool build with Psi4 is above. Closing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1589#issuecomment-495759282:322,patch,patch,322,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-495759282,1,['patch'],['patch']
Deployability,"I agree with Andy about merge-as-is. Also more people than just the listed reviewers looked at (parts of) the code according to github. Before we merge, just wanting to confirm if the right `conda install libint2 -c psi4/label/dev` is available?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-730193219:197,install,install,197,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-730193219,1,['install'],['install']
Deployability,"I agree with the plan already in place. API changes as we view them should; not be sufficient to bump us to PSI5, so naming the project PSI4 and; versioning against X.Y.Z makes sense to me. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Thu, Feb 11, 2016 at 11:33 AM, Lori A. Burns notifications@github.com; wrote:. > Being one of those who thought psi4 1.0 to be a good idea, I'll state that; > my main requirement is that the project name is psi4 and that we have the; > ability to bump major (in major.minor.patch) in an API change without; > bumping psi generations to psi5. If everyone prefers the stable release as; > psi4 & 4.0.0, with future psi4 & 5.0.0 instead of stable release 1.0.0; > and future 2.0.0, I can live with that. (Of course the psi5 folks someday; > may regret that decision.) Maybe it's time to start naming major releases; > after (house)cats.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/213#issuecomment-182945585.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-182946562:520,patch,patch,520,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182946562,4,"['patch', 'release']","['patch', 'release', 'releases']"
Deployability,"I agree, although this issue was seen on Linux and both psi4 and numpy are using MKL`, just _different_ ones:; * Psi4 `libmkl_rt.so` of a local c.2016 Intel install; * NumPy `libmkl_core.so`, thread, lp64 of default-channel c.2017 conda install",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-312377006:157,install,install,157,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312377006,2,['install'],['install']
Deployability,"I always use a fresh build directory. I found 2 cmake related issues. 1) I noticed 'pybind11_external' is build with the gcc 4.8( system default) instead of the locally installed gcc 5.4. So I added . ```; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER} ; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} . ```. to [CMakeLists.txt](https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt) like it is done for the libint cmake file. 2) The second issue is that pybind11 auto-detects python3.4 and psi4 detected python2.7 on my workstation. I fixed it by changing the python version in the CMakeCache.txt file for pybind11 by hand, since I don't know how to tell cmake that. After rebuilding pybind11 the compilation of psi4 finishes normally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273472426:169,install,installed,169,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273472426,1,['install'],['installed']
Deployability,I am adding intel ib into the PATH and it is running flawlessly right now. I am checking dkh running and will report here. //////This error happens after installing a fresh PSI4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126183761:154,install,installing,154,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126183761,1,['install'],['installing']
Deployability,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182861777:84,release,release,84,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777,5,"['install', 'release']","['installed', 'release', 'released']"
Deployability,"I am glad you were able to get it running: I failed in my attempt. I added the orbital basis sets from Grant Hill's site to your input, but there do not appear to be any auxiliary basis sets available for the density fitting procedure that's used in the SCF and, I believe, the SAPT parts. Please check your output to make sure that a reasonable auxiliary basis set is being used for the density fitting calculations: the aux basis should normally be about a factor of 3 larger than the orbital basis, but it's possible that a slightly smaller one will suffice for something as large as aug-cc-pV5Z. There is an [effort underway](https://github.com/MolSSI-BSE/basis_set_exchange) at MolSSI to curate basis sets in a more organized way and we will almost certainly be using that to update the library when it is ready to go, so I don't think a PR is needed at this time, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467169919:781,update,update,781,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467169919,1,['update'],['update']
Deployability,"I am looking to update the failing dft test where absolute energies are tested. Looking for opinions and advice:. options:; * A) reduce the comparison thresholds, where necessary. Down to 5 or 6 (from 7 or even higher); * B) make new reference values using the new BS radii. Perhaps cleanest test history about the origin of the numbers and best for gradients; * C) a mixture of both. these `ctest -L dft` fail on my machine:; 157 - dft-grad-lr1 (Failed); 159 - dft-grad-lr3 (Failed); 167 - dft-grad-meta (Failed); 169 - dft-grad1 (Failed); 170 - dft-grad2 (Failed); 171 - dft-psivar (Failed); 173 - dft1 (Failed); 174 - dft-vv10 (Failed); 178 - dft-omega (Failed); 390 - dft-custom-mgga (Failed); 423 - dftd3-grad (Failed); 431 - pcmsolver-dft (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739:16,update,update,16,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739,1,['update'],['update']
Deployability,I am not sure what the rc2 installer is or what it could be compared to,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-874965917:27,install,installer,27,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-874965917,1,['install'],['installer']
Deployability,"I appreciate the `E` vs. `ENERGY` reasoning, but I think I still favor the latter. Text in the output file shows that it was written by a dozen coders, while the psivars have some unifying properties, including spelling out energy. We can just patch it later, if you'd rather not bother.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480#issuecomment-253958928:244,patch,patch,244,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253958928,1,['patch'],['patch']
Deployability,I believe the patch for pydantic v2 support should be in the psi4 1.8.1 build. Try `psi4==1.8.1` in your conda install.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1698257545:14,patch,patch,14,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698257545,2,"['install', 'patch']","['install', 'patch']"
Deployability,I build in the FreeBSD ports framework and it sets ```CMAKE_BUILD_TYPE=Release``` by default.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2399#issuecomment-1131914853:71,Release,Release,71,https://psicode.org,https://github.com/psi4/psi4/issues/2399#issuecomment-1131914853,1,['Release'],['Release']
Deployability,"I can answer more fully later, but check where the `GENBAS` file lives in your CFOUR installation. It looks like it's looking for it at `/xstorage/tobias/bin/cfour/basis/GENBAS`. (This could be the trouble in the Psi4/Cfour route, too.) I don't remember the exact fallback procedure for GENBAS, but if it's missing from that spot, you could copy it to there or copy the one from the psi4 install (approx <install>/share/psi4/basis/GENBAS).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155521774:85,install,installation,85,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155521774,3,['install'],"['install', 'installation']"
Deployability,"I can build+link against my local install of boost successfully, using the modified conda recipe to build the static libs, but only if the hombrew boost is unlinked at setup, _and_ compile time.. . If the homebrew boost is linked at the time I run the `setup` script I will end up with the same issue where the local (boost 1.59.0) headers are in the boost inc paths, but the homebrew (1.60.0) libraries end up in the boost lib paths. . If hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible ver",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-198164795:34,install,install,34,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795,3,['install'],"['install', 'installed']"
Deployability,"I can confirm @robertodr's error. But it does away with CMake 3.3 (even though I can't see what the change was from the [release notes](https://cmake.org/cmake/help/v3.7/release/3.3.html)). I've sort of been wanting 3.3 because that detects the HDF5 version number, and I, at least, am susceptible to mixed 1.8.16 and 1.8.17 compilations, which the build system can now avoid. So shall we bump again?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281106134:121,release,release,121,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281106134,2,['release'],['release']
Deployability,"I can fix v2rdm_casscf - I just pulled these new changes to psi. > On Jan 3, 2018, at 12:47 PM, Roberto Di Remigio <notifications@github.com> wrote:; > ; > I see it's the switch to a strong enum that causes trouble. That's quite easily fixed. How should I proceed? Submit a patch to the v2rdm_casscf repository, wait for it to be applied and then update the plugin's version in this PR?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/872#issuecomment-355077662>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGh-i1i5u-bNJtPsuPz4wXRe-jUOGks5tG70_gaJpZM4QyuVF>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355082034:274,patch,patch,274,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355082034,2,"['patch', 'update']","['patch', 'update']"
Deployability,"I can put in an `INSIST_FIND_PACKAGE` signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. On the Libxc front, their development moved to GitLab (https://gitlab.com/libxc/libxc). I've added CMake to their build system, but their only official release since its been in (4.0, a few weeks ago) isn't compatible with Psi4 yet). So you're right that it's GH:loriab/libxc for now. But that repo should absolutely be installing `share/cmake/Libxc/LibxcConfig.cmake` and similar files. Note that [this line](https://github.com/psi4/psi4/blob/master/external/upstream/libxc/CMakeLists.txt#L21) has to be in place for Psi to work. I'm glad to look at your build directive if that'd help. There's also a conda package for Libxc, but that won't much interest you for packaging purposes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343717373:292,release,release,292,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343717373,2,"['install', 'release']","['installing', 'release']"
Deployability,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172192255:322,update,updated,322,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255,1,['update'],['updated']
Deployability,"I can't reproduce this behavior on my linux installation of add49b95b6be2441c522f71bddb47f1371e16958 (icc 2017.2.050, mkl 2017.1.143, numpy is also linked to the same `libmkl_rt.so`). I turned down `thread = 20` to `threads = 4`, but regardless of the import order I see `Psi4@n1 : Psi4@n4 ratio (want ~4)` close to 4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-312377598:44,install,installation,44,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312377598,1,['install'],['installation']
Deployability,"I cannot install psi4 v1.8 from conda. I get the following error. I'm on Ubuntu 22.04. Is this a known issue? Workarounds?. ```sh; ❯ conda create --name psi4-2 --channel conda-forge 'psi4==1.8' 35s  base; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Package qcengine conflicts for:; psi4==1.8 -> qcengine[version='>=0.26.0,<0.27.0a0']; Package libint conflicts for:; psi4==1.8 -> libint=2.7.3dev1; Package _openmp_mutex conflicts for:; psi4==1.8 -> _openmp_mutex[version='*,>=4.5',build=*_llvm]; Package python_abi conflicts for:; psi4==1.8 -> python_abi[version='3.10.*|3.11.*|3.8.*|3.9.*',build='*_cp311|*_cp310|*_cp38|*_cp39']; Package libxc-c conflicts for:; psi4==1.8 -> libxc-c[version='>=6.1.0,<7.0a0',build=cpu_*]; Package qcelemental conflicts for:; psi4==1.8 -> qcelemental[version='>=0.25.1,<0.26.0a0']; Package python conflicts for:; psi4==1.8 -> python[version='>=3.10,<3.11.0a0|>=3.11,<3.12.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; Package pytest conflicts for:; psi4==1.8 -> pytest[version='>=7.0.1']; Package pyddx conflicts for:; psi4==1.8 -> pyddx[version='>=0.4.1']; Package pymdi conflicts for:; psi4==1.8 -> pymdi[version='>=1.2']; Package mkl conflicts for:; psi4==1.8 -> mkl[version='>=2022.2.1,<2023.0a0']; Package dkh conflicts for:; psi4==1.8 -> dkh[version='>=1.2,<1.3.0a0']; Package adcc conflicts for:; psi4==1.8 -> adcc[version='>=0.15.16']; Package networkx conflicts for:; psi4==1.8 -> networkx; Package numpy conflicts for:; psi4==1.8 -> numpy; Package libblas conflicts for:; psi4==1.8 -> libblas=[build=*mkl]; Package pybind11-abi conflicts for:; psi4==1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972:9,install,install,9,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972,1,['install'],['install']
Deployability,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-197012335:148,update,updated,148,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335,1,['update'],['updated']
Deployability,"I decided to take an intermediate step regarding this issue by making a PR wherein the error messages received upon breaking COSX with negative grid weights are more informative to the end user. Not a full fix, but at least with that, an end user that runs into this issue can know how to get around it. In the meantime, what do we all think the _best_ fix for this issue would be? Discussion in this chat has different reformulations of the X matrix to be able to handle grids with negative grid weights, while recent discussion in the Psi4 dev Slack has suggested the possibility of simply removing grid configurations that lead to negative weights. Which approach is the best, I do not immediately know. Also worth sharing in this chat, it seems that the negative grid weights that were observed as part of this issue, are _not_ an explicit bug, but rather a consequence of how the grids weights are determined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013:606,configurat,configurations,606,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013,1,['configurat'],['configurations']
Deployability,"I did have a PR, but it didn't seem to work in you case. The alternate change (not in addition to my PR, but instead of it) was to force lock_frame_ to false just before the call to update geometry. I don't know if you attempted that yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-193477050:182,update,update,182,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-193477050,1,['update'],['update']
Deployability,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:93,patch,patch,93,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967,4,"['install', 'patch']","['install', 'install-lib', 'patch']"
Deployability,"I didn't know about the new external repo - we are using the upstream libint-1.1.5 package, as it is required by several other codes as well, most notably CP2K. Did you officially take over maintainership of the libint-1 branch from evaleev? Do you plan to make regular releases? Is there a big code-difference between the new repo and the last libint1 tarball from Sourceforge and/or https://github.com/evaleev/libint/releases/tag/release-1-1-6 ? . I'll take a look at that repo once I have time, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474#issuecomment-249515051:270,release,releases,270,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249515051,3,['release'],"['release-', 'releases']"
Deployability,"I didn't think of that, @loriab. These Hessians come in peace (although they could well impart the occasional seg fault). I was within epsilon of having the code done last week (literally; I screwed up some orbital energy scaling term somehow) so I came very close to beating `1.0`. Still, this code is almost useless until we get DF and KS terms in there, so no sense in hurrying it into a new release version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-230548237:395,release,release,395,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-230548237,1,['release'],['release']
Deployability,"I do like the ability to do slices (and it's the correct name IMO). Perhaps if View is not used much we can just cut it out and promote the Slice class which is probably ultimately more extensible. . Sorry to grab you for more changes, but you keep bringing up good ones :). -Daniel Smith; Sent from my iPhone. . > On May 31, 2017, at 22:55, fevangelista <notifications@github.com> wrote:; > ; > @fevangelista commented on this pull request.; > ; > In psi4/src/psi4/libmints/matrix.cc:; > ; > > + double value = block->get(h,p,q);; > + set(h,p + rows_start[h],q + cols_start[h],value);; > + }; > + }; > + }; > +}; > +; > +/**; > + * Set a matrix block; > + *; > + * @param rows Rows slice; > + * @param cols Columns slice; > + * @return SharedMatrix object; > + */; > +void set_block(Slice rows,Slice cols,SharedMatrix block);; > +; > For what I can see View was not integrated extensively and it is used only in exactly three lines of psi4. View is really a shared pointer plus a set of start/end Dimension objects. It uses pointers to store what are dimension-like objects and should be modernized. Slice here is just a set of start/end Dimension objects. Indeed I think it might be a good idea to write View using Slice (perhaps my choice of class name is not idea, we could also call it DimensionRange, Range, etc.). So I think this is not a case of repetition.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-305376168:867,integrat,integrated,867,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-305376168,1,['integrat'],['integrated']
Deployability,"I do think that the dcft/pywrap-alias changed sample files are just due to my sloppiness in changing the tests before packing up the tarball. SUMMARY should not be changing its contents for a given set of psi4/tests. It may, though, change its ordering of the contents and trigger your changed-source-alert. Thus, I think it's best to drop tracking it and see that it gets cleaned up when distclean runs. That directory doesn't need an ascii index when a formatted html index exists. Our original plan was to web-host docs for each public release of the code, but admittedly, even I can't find the address of the older versions just now. If you want to package up a thousand html files, we'll try to remove the minor obstacles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14#issuecomment-22985263:539,release,release,539,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22985263,1,['release'],['release']
Deployability,"I don't have an approximate delay. Nightly gets updated whenever @loriab updates it. There's no deeper pattern, that I'm aware of.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1954#issuecomment-658159539:48,update,updated,48,https://psicode.org,https://github.com/psi4/psi4/issues/1954#issuecomment-658159539,2,['update'],"['updated', 'updates']"
Deployability,"I don't have an opinion about the include_pure_transform_ flag, depends on; use cases. However, it seems at the very least that the documentation needs to get; updated. On Mon, Dec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = cor",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:160,update,updated,160,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475,1,['update'],['updated']
Deployability,"I don't have enough memory to complete these jobs, but I note that the first env example is using package `dftd3` from the psi4 channel, and the second env has no dftd3-related packages, suggesting a local binary. That older implementation of dftd3 with a fairly recent psi4 (1.7 from late 2022) could manifest the incompatibility you saw. I'd suggest using the latest version of psi4 (1.8.1) and the newer `dftd3-python` package instead. A new env from `conda create -n p4env psi4 python=3.10 dftd3-python -c conda-forge/label/libint_dev -c conda-forge` (variations as needed from https://psicode.org/installs/v18/ with `*/conda/*/stable` selections).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2914#issuecomment-1720790520:602,install,installs,602,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1720790520,1,['install'],['installs']
Deployability,"I don't recall the actual recc. values, but that paper does discuss two sets of integration grid. probably (99, 590) for the main functional grid and ~SG1~(50, 146) for the VV10 grid.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/827#issuecomment-339688990:80,integrat,integration,80,https://psicode.org,https://github.com/psi4/psi4/issues/827#issuecomment-339688990,1,['integrat'],['integration']
Deployability,I don't see any issues cropping up. I should make some documentation updates though to inform users how `optking` inherits logging from `psi4`. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923:69,update,updates,69,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923,1,['update'],['updates']
Deployability,"I don't see differences in the `openblas_config.h` file between both of my; versions (or in other .h files). `ldd` shows one has `libgomp.so.1` linked,; the other not. On Fri, May 18, 2018 at 3:23 PM Diazonium <notifications@github.com> wrote:. > @dgasmith <https://github.com/dgasmith> I do not know. But probably not.; > If that is the case, patches are welcome, the project tends to be very; > receptive to PRs.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1009#issuecomment-390205517>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ABkoABawYkG1NwY7Iqub-m5Nf6uQiuB3ks5tzstogaJpZM4T0MLO>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390206167:344,patch,patches,344,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390206167,1,['patch'],['patches']
Deployability,"I don't think the inferring of grid order from `lebedev_mapping` was *ever* correct, to be clear. I believe (but am not 100% sure) that the new way of gaining the information (using information from `LebedevGridMgr`) proposed in #2736 works?. I can test -- do you have a simple input I can test with my build of that patch?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2754#issuecomment-1292381264:317,patch,patch,317,https://psicode.org,https://github.com/psi4/psi4/issues/2754#issuecomment-1292381264,1,['patch'],['patch']
Deployability,"I don't understand what Peter means by ""separate tests from docs"". I suspect the word ""tests"" should be ""samples,"" and I have no concrete idea as to how this PR combines them. My best guess is have ""a build of the documentation target"" not be what re-generates `samples`. I strongly disagree with removing git command line instructions. They will work in 99% of cases, and not following these instructions could cause merge conflicts that will take more effort from core devs to shepherd new devs through. For the sample regeneration section: Give examples of why changes might not be okay. Move the bullet point explaining the point of the auto-commit up a level. For the documentation section: I don't understand the point of the first bullet point. Explain why an edit to this branch might be needed. Explain the difference between deploy-preview and the `sphinxman-html` download. Make clear that editing the PR branch is also needed for the `sphinxman-html` download.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088:835,deploy,deploy-preview,835,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088,1,['deploy'],['deploy-preview']
Deployability,"I forget the exact PR, but this was fixed in one of the JSON updates.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/944#issuecomment-394477556:61,update,updates,61,https://psicode.org,https://github.com/psi4/psi4/issues/944#issuecomment-394477556,1,['update'],['updates']
Deployability,"I got a high AM version generated. It built all its files (some indiv files take 10h to compile) and then it failed on the link step. I've still got the directory, so I'm hoping to investigate more next week. The generated code is at [Libint2-export-7-7-4-8-8-5_mm4f12ob2.tgz](https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2.tgz) if you're feeling adventurous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1130271539:310,release,releases,310,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1130271539,1,['release'],['releases']
Deployability,"I got the static_assert error again now. The file it's triggering on hasn't had recent changes, so I don't know why it's popping up now, unless it's an intermittant/brownout strategy to push upgrades. Anyways, switching the llvm version https://github.com/psi4/psi4/pull/2791/files#diff-9f5f8e4d87a7d1fbb0e8f30d1c680c5f42f6af10c04aa81d342c7dfa5af9a99fR10 at least gets the build started.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1333200894:191,upgrade,upgrades,191,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1333200894,1,['upgrade'],['upgrades']
Deployability,"I had a bit of time to work on Windows build. Current status of dependencies:; - *libint*: with some hacking (https://github.com/raimis/libint/tree/win) I have manged to build it (https://ci.appveyor.com/project/raimis/libint). There are no tests, so high probability of not detected issues.; - *libxc*: with some more hacking (https://github.com/raimis/libxc/tree/win) I have to managed to build it too (https://ci.appveyor.com/project/raimis/libxc).; - *gau2grid*: it need just a few changes (https://github.com/raimis/gau2grid/tree/win) to compile (https://ci.appveyor.com/project/raimis/gau2grid). Though I have not managed to make the test to work. It seems, `ctypes` behave differently on Windows. Finally, I have reached a point to stat building *Psi4* (https://github.com/raimis/psi4/tree/win) and got stuck with MKL configuration and other `cmake` related problems (https://ci.appveyor.com/project/raimis/psi4). @loriab, for Linux builds, do you use MKL from `conda` or install it manually?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390236786:825,configurat,configuration,825,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390236786,2,"['configurat', 'install']","['configuration', 'install']"
Deployability,"I had put this together as I was building v1.4, so may as well share here. ### `psi4`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libint2 | yes | psi4 | psi4 | psi4 | | C++; libxc | yes | psi4 | psi4 | c-f | | C; gau2grid | yes | psi4 | psi4 | c-f | | C; qcelemental | yes | | | | psi4 copied from c-f | Py; qcengine | yes | | | | psi4 copied from c-f | Py; ambit | no | psi4 | psi4 | --- | | C++; chemps2 | no | psi4 | psi4 | --- | | C++; dftd3 | no | psi4 | psi4 | psi4 | | Fortran; dkh | no | psi4 | psi4 | --- | | Fortran; gcp | no | psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libef",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:960,release,releases,960,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900,1,['release'],['releases']
Deployability,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-223730550:251,Update,Update,251,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550,2,"['Update', 'install']","['Update', 'installing']"
Deployability,I had to install `conda-forge` not psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3154#issuecomment-2048342556:9,install,install,9,https://psicode.org,https://github.com/psi4/psi4/issues/3154#issuecomment-2048342556,1,['install'],['install']
Deployability,"I hadn't seen exactly this manifestation of the BLAS issue, but yes, it's why I was strongly advising against statically linking MKL in the other thread. . * ""MKL Trio"" := `mkl_intel_lp64` `mkl_intel_thread` `mkl_core`; * ""MKL RT"" := `libmkl_rt`; * if the Psi4 CMake can find MKL RT, that's what it'll link to for BLAS rather than MKL trio; * current NumPy from defaults conda channel links against MKL RT. (until recently, it linked against MKL Trio, which was why we sometimes advised getting numpy from the Intel conda channel, which has long linked against RT); * so it's safe to get psi4 & numpy via `conda install psi4 -c psi4/label/dev` because that'll pull numpy from defaults and psi4 from psi4 and both have the same BLAS linking. (may want to `conda update numpy` to make sure your numpy is the recent build.) can always `ldd` them to inspect.; * for the same reasons as above, it's safe to build psi4 from source against the conda `psi4-dev` package. That package provides MKL from conda and instructs psi4 cmake to use MKL RT. It also provides NumPy which (so long as recent build) uses MKL RT.; * unless you want to build NumPy yourself, the numpy you have pretty much determines how you must build or use psi4. So it's dangerous to:; * use statically linked MKL in psi4 and use NumPy with dynamically linked MKL; * use system BLAS like Apple's Accelerate with psi4 and use NumPy with dynamically linked MKL; * use MKL RT with psi4 and use NumPy with MKL trio. Since PPA probably doesn't have license to distribute MKL, it's likely that Psi4 w/MKL RT plus their NumPy is also dangerous. What are they linked against, if you can find out easily through `ldd` (have to burrow pretty deep into numpy to find a `.so`)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387922677:612,install,install,612,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387922677,2,"['install', 'update']","['install', 'update']"
Deployability,"I have a patch written -- I can see that `initialize_lebedev` actually gets called, and when I inspect `lebedev_mapping_`'s values at a breakpoint, things look reasonable. ...I also see no changes in the energy anywhere. In fact, I don't see any evidence of any use of `order_` at all, except in one printing function. Is this intentional? . Anyway, PR incoming. I am OK not understanding the mysteries of `order_`, as long as I no longer get 1/1000 hangs when trying to run large workflows.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735#issuecomment-1267820055:9,patch,patch,9,https://psicode.org,https://github.com/psi4/psi4/issues/2735#issuecomment-1267820055,1,['patch'],['patch']
Deployability,"I have been meaning to mention this for a while actually. . If we require c++11, why is there an option in setup to disable c++11 support? Also, why can CMake revert to the older standard?. with intell 13.1, I will see this during the configure step: ; `-- Buggy compiler support for C++11. Using Older Standard.` . If I edit this line in CMakeCache.txt; `CMAKE_CXX_FLAGS:STRING=-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=gnu++98`; to `-std=c++11` before I make I can build successfully, but if I don't I will get the same errors mentioned above. . CMake should produce an error if C++11 support is not detected, fail at the configuration step, and report why to the user. I think the current behavior is very confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-156910025:642,configurat,configuration,642,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156910025,1,['configurat'],['configuration']
Deployability,I have built *Psi4* 1.3 packages for *Windows*!. You can install:; ```; conda install -c raimis -c conda-forge psi4=1.3; ```; The 1.3 version for *Windows* is actually: `v1.3` + #1560 + #1571 = https://github.com/raimis/psi4/commit/a13da3b642abd02b943abce4984876070e85473b. For reference: ; - Build for *Python* 3.6: https://dev.azure.com/raimisg/psi4/_build/results?buildId=606; - Build for *Python* 3.7: https://dev.azure.com/raimisg/psi4/_build/results?buildId=607. We try to deploy and see how do they behave in comparison with the *Linux* packages.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-474864291:57,install,install,57,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-474864291,3,"['deploy', 'install']","['deploy', 'install']"
Deployability,"I have changed some CMake variable and now the compilation works fine (I think it was related to having CMAKE_OLDINCLUDEDIR set to /usr/include, causing a permission problem in the installation step). Linking with OpenBLAS also seems to have worked fine:. ```; [sfux@develop01 x86_64]$ ldd lib/psi4/core.so ; linux-vdso.so.1 => (0x00007ffc83bea000); libpython2.7.so.1.0 => /cluster/apps/python/2.7.12/x86_64/lib64/libpython2.7.so.1.0 (0x00007f1a75aa0000); libdl.so.2 => /lib64/libdl.so.2 (0x00007f1a7588b000); libopenblas.so.0 => /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib/libopenblas.so.0 (0x00007f1a736f5000); libstdc++.so.6 => /cluster/apps/gcc/5.2.0/lib64/libstdc++.so.6 (0x00007f1a73366000); libm.so.6 => /lib64/libm.so.6 (0x00007f1a730e1000); libgomp.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgomp.so.1 (0x00007f1a72ec0000); libgcc_s.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgcc_s.so.1 (0x00007f1a72caa000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275104849:181,install,installation,181,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849,1,['install'],['installation']
Deployability,"I have installed mkl-devel, but now I have a new issue:. ```; CMake Error at tests/fsapt-terms/CMakeLists.txt:4 (file):; file COPY cannot find; ""/server-home1/.../psi4/tests/fsapt-terms/../../psi4/share/psi4/fsapt/fsapt.py"". CMake Error at tests/fsapt-allterms/CMakeLists.txt:6 (file):; file COPY cannot find; ""/server-home1/.../psi4/tests/fsapt-allterms/../../psi4/share/psi4/fsapt/fsapt.py"".; ```. Is there a cmake comment I should look at in the psi4 documentation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-381277308:7,install,installed,7,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-381277308,1,['install'],['installed']
Deployability,"I have made one final commit here to update the comment, this should be OK to merge unless someone else wants to chime in. The tests run by the CI are passing, here is hoping there will no surprises the next time someone runs the full test suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1252900992:37,update,update,37,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1252900992,1,['update'],['update']
Deployability,I have now updated in the information above under software specs.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930#issuecomment-1520131433:11,update,updated,11,https://psicode.org,https://github.com/psi4/psi4/issues/2930#issuecomment-1520131433,1,['update'],['updated']
Deployability,"I have overhauled this interface in #365 for SCF/DFT/MP2/CI so that the following now works:. ``` python; prop('above_method', properties=['any_opdm_func']); ```. See [here](http://www.psicode.org/psi4manual/master/oeprop.html?highlight=oeprop) for full OEProp functionality; this documentation and the `property` documentation also had a facelift in the PR. Full tests suites can be found in the following test cases:; - ci-properties ('transition_dipole', etc, works here); - mp2-properties; - scf-properties. I did not touch occ/dfocc/cc due to how they integrated their OEProp calls, but I would assume that this will eventually be deprecated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-213409294:557,integrat,integrated,557,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-213409294,1,['integrat'],['integrated']
Deployability,"I have revised the footnote. On Wed, Jul 8, 2015 at 11:53 PM, David Sherrill notifications@github.com; wrote:. > Footnote [2] of the capabilities table in the manual is a little unclear; > about what methods are available:; > ; > RHF and UHF reference are available, however the latter one should be; > requsted from DFOCC module. DF-MP2 is recommended as a faster; > alternative.; > ; > Update and revise manual. Check with Ugur about ROHF. Make appropriate; > defaults.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/106. ## . Assoc. Prof. Ugur Bozkaya; Department of Chemistry,; Ataturk University,; 25240 Erzurum, Turkey,; Tel: +90 442 231 41 14,; E-mail: ugrbzky@gmail.com,; ugur.bozkaya@atauni.edu.tr.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/106#issuecomment-119739035:388,Update,Update,388,https://psicode.org,https://github.com/psi4/psi4/issues/106#issuecomment-119739035,1,['Update'],['Update']
Deployability,I have updated my psi4 program and still got the message BasisSetNotFound; How can I download and install new basis set list,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/917#issuecomment-364853728:7,update,updated,7,https://psicode.org,https://github.com/psi4/psi4/issues/917#issuecomment-364853728,2,"['install', 'update']","['install', 'updated']"
Deployability,I have updated the body of the issue with details about the error message. Thanks in advance!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238:7,update,updated,7,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238,1,['update'],['updated']
Deployability,I have updated the call points for the new signature of `triplet/doublet` and tests pass locally with warnings converted to errors. So this is ready for final review + merge. @psi4/maintainers,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349#issuecomment-456894587:7,update,updated,7,https://psicode.org,https://github.com/psi4/psi4/pull/1349#issuecomment-456894587,1,['update'],['updated']
Deployability,I have updated the docstrings and extended the error message just in case someone runs into a legitimate situation where it needs to be bypassed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767:7,update,updated,7,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767,1,['update'],['updated']
Deployability,I have updated the reference on my branch and will file a pull request (on private) as soon a I manage to build and run some tests. For the moment I have updated the wiki (`git clone` ---> `git clone --recursive`),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/189#issuecomment-157114525:7,update,updated,7,https://psicode.org,https://github.com/psi4/psi4/issues/189#issuecomment-157114525,2,['update'],['updated']
Deployability,"I have vague memories about some of the DSD methods changing parameters; from one paper to another. I discussed this with Jan Martin way back when; via email, and thought the situation was somewhat confusing. Without; remembering this any more clearly than I do, I suppose Holger's idea of; using the more recent paper is probably a good one. On Wed, Mar 7, 2018 at 12:43 PM, Holger Kruse <notifications@github.com>; wrote:. > i remember the omega issue from a forum post: http://forum.psicode.org/t/; > wb97x-definition-bug/480; >; > I think ORCA was used for all the DSD developments. There you can defined; > DHDF compositions in the input file (see e.g. my reference outputs). If; > manual defining parameters for another program really counts as a good test; > is perhaps debatable because typos never come alone ;); >; > Are the non-dispersion forms of DSD-PBEP86 from both papers really; > different? I hope not...; > Anyway, I'd stick with the 2013 paper in doubt because it is the latest; > ""update"".; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/922#issuecomment-371221109>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdkpodkciT2JkrcNFW-gbLDLpUy4Mks5tcBwzgaJpZM4SJ0Uw>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-371240538:1001,update,update,1001,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-371240538,1,['update'],['update']
Deployability,"I haven't heard anything over at https://github.com/psi4/psi4/issues/2940, so I think a ""hard pin"" is in order for the release. That is, not just prevent CI from using the new 0.4 but update the external/ddx/CMakeLists.txt to avert users grabbing it. I'll fix this PR up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2921#issuecomment-1534991954:119,release,release,119,https://psicode.org,https://github.com/psi4/psi4/pull/2921#issuecomment-1534991954,2,"['release', 'update']","['release', 'update']"
Deployability,"I haven't reloaded all my freq familiarity, but I did various comparisons around the time of the thermo update, but [molpro](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/molpro.out#L469-L481) and [psi4](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/output.ref#L4113-L4136) match, and there's other examples in that folder. Psi4 output vibs through both findif routes I'm confident are nmw (through analytic I haven't looked at). Normalization sounds good to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286563411:104,update,update,104,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286563411,1,['update'],['update']
Deployability,"I hit your error today in building the rc3 installer. It didn't happen when the rc2 installer was originally built or for recent plain `conda install psi4` installations like you ended up with, so it has to do with available packages upstream. I've fixed it by switching channel order in the installer. If you should try a Psi4conda install again with rc3, I'd be interested to hear success/failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349:43,install,installer,43,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-877510349,6,['install'],"['install', 'installations', 'installer']"
Deployability,"I installed anaconda and psi4 independently. does the code below help?. ```; (base) C:\Users\erikc>where conda; C:\Users\erikc\anaconda3\Library\bin\conda.bat; C:\Users\erikc\anaconda3\Scripts\conda.exe; C:\Users\erikc\psi4conda\condabin\conda.bat; C:\Users\erikc\psi4conda\Scripts\conda.exe. (base) C:\Users\erikc>where python; C:\Users\erikc\anaconda3\python.exe. (base) C:\Users\erikc>where psi4; C:\Users\erikc\psi4conda\Scripts\psi4.exe. (base) C:\Users\erikc>conda create -n psi4env psi4 -c psi4/label/dev; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError:. (base) C:\Users\erikc>; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875226101:2,install,installed,2,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875226101,1,['install'],['installed']
Deployability,I installed psi4 from miniconda.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-124953379:2,install,installed,2,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124953379,1,['install'],['installed']
Deployability,"I just added a small section to the manual, advertising the new functionality. A number of samples got updated during my local docs build. With that in place, I think this is good to go. Given that this is a bug fix, I think we should try to cherrypick it into the tagged release version, if that's not too much hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234756317:103,update,updated,103,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234756317,2,"['release', 'update']","['release', 'updated']"
Deployability,"I just compiled this branch and it looks like the test that I have still doesn't work. I think I remember trying to flip this as well and eventually concluded that the issue was ""something weird"" because `update_geometry` _should_ update the symmetry information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-191828792:231,update,update,231,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191828792,1,['update'],['update']
Deployability,"I just pushed this up so that others can play with it - there has been a lot of interest in getting it implemented. The current system is very janky from a build point of view. I currently just `conda install pugixml -c conda-forge` first, and build LibECPInt as a standalone library. From there, you can hardwire the location to those libraries by something awful like ` cmake .. -DCMAKE_CXX_FLAGS=""-L/Users/simmonettac/programming/libecpint/installdir/lib -lFaddeeva -lecpint /Users/simmonettac/opt/anaconda3/envs/psi4dev/lib/libpugixml.a -I/Users/simmonettac/programming/libecpint/installdir/include -I/Users/simmonettac/opt/anaconda3/envs/psi4dev/include""`. As things stand, the implementation looks very straightforward but the answers don't appear to be correct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802760259:201,install,install,201,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802760259,3,['install'],"['install', 'installdir']"
Deployability,"I just ran . ```memory 8 Gb. molecule {; O; H 1 1.0; H 1 1.0 2 90.0; }. set basis 6-31G; set scf_type df; set freeze_core True; set cubeprop_tasks ['frontier_orbitals']; E, wfn = optimize('b3lyp', return_wfn=True); cubeprop(wfn); ```. and it correctly produced cube files. Are you running from a conda install or a compiled version? If the latter and you recompiled recently, try `touch`ing the `psi4/src/core.cc` and `psi4/src/export_*` files and re `make`ing. I suspect there's something odd going on with the pybind11 2.3.0 update and mixed versions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1722#issuecomment-534296270:302,install,install,302,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534296270,2,"['install', 'update']","['install', 'update']"
Deployability,"I just ran your input as copied from your posted output, and it runs cleanly. That was a mkl 2018.0.2, icpc 2018.0.3, gcc 7.2.0 Release build. Not sure what's going on for you. What's your `ldd -v psi4/core.so`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397012149:128,Release,Release,128,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397012149,1,['Release'],['Release']
Deployability,"I just updated the docs too. One thing I am confused about, why is the `screening` keyword only in the sapt module? I think we should refactor it as a global module.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-898695692:7,update,updated,7,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-898695692,1,['update'],['updated']
Deployability,"I keep hearing about this ""problem"" also elsewhere, but the fact is that the regular grid for cube files is ill fitted for integrating the density of steep regions (e.g. at the nuclei). ; python-based integrator for testing: https://gist.github.com/hokru/71c61f5afb2e5921b5b4955fed70f5db. cubes were made for visualization not for further analysis, iirc. Does chargemol only work with cube files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-433074513:123,integrat,integrating,123,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-433074513,2,['integrat'],"['integrating', 'integrator']"
Deployability,"I keep seeing ""continuous-integration/travis-ci — Waiting for status to be reported"", and it doesn't appear to have run your merge of Lori's commits. Is anybody else seeing the same?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183784922:15,continuous,continuous-integration,15,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183784922,1,['continuous'],['continuous-integration']
Deployability,"I know havoc and epochs and non-sortability ensue. We're actually trying to be _more_ versioning standards compliant, since if we went with project `psi` and version `4.0` we couldn't ever make an API change w/o bumping to psi5. So the plan is that the stable release will be project `psi4` and version `1.0`, as in https://github.com/psi4/psi4public/wiki/Versioning#how-to-get-and-interpret-the-version-number .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-182772882:260,release,release,260,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182772882,1,['release'],['release']
Deployability,"I know the code used `P::e` before I touched it, but I don't think any of the code I added uses `P::e`. If that's not the case, let me know, and I'll see if I can remove the offending code, to help eliminate globals. I'm holding off on documentation update until I know if I need to make other changes while I'm at it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424#issuecomment-448039186:250,update,update,250,https://psicode.org,https://github.com/psi4/psi4/pull/1424#issuecomment-448039186,1,['update'],['update']
Deployability,"I know, it's this issue: https://github.com/PCMSolver/pcmsolver/issues/206 . An additional check was added to pcmsolver that hits larger molecules, and when I updated from v1.2.1 to v1.2.3 when doing the conda-forge transition, that check got turned on. I should do a new binary version commenting out that check so that calcs at least run as before, even if they're slightly less to be trusted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3202#issuecomment-2276260506:159,update,updated,159,https://psicode.org,https://github.com/psi4/psi4/issues/3202#issuecomment-2276260506,1,['update'],['updated']
Deployability,"I looked into this recently. The issue is that O2 has two degenerate orbitals. The issue begins when psi4 guesses the correct occupation. To determine which orbital is occupied we sort the orbitals and then populate them with electrons. If the alpha and beta orbitals end up being sorted in the same way we get a closed-shell det, if their order is switched (as it sometimes happens) then we get an open shell determinant (say pi_a pi'_b). Here is some debug info that I printed about a week ago. It shows the iterations through the sorted eigenvalues. You can see that in the second set the orbitals are picked in a different order and we get an open shell configuration. *Correct*; ```; nalphapi_ -> 0, 0, 5; nalphapi_ -> 0, 1, 0; nalphapi_ -> 1, 2, 0; nalphapi_ -> 1, 3, 5; nalphapi_ -> 0, 4, 6 // <; nalphapi_ -> 0, 5, 7 // <; nalphapi_ -> 2, 6, 0; nalphapi_ -> 0, 7, 2 // < corresponding beta is in the same irrep; nbetapi_ -> 0, 0, 5; nbetapi_ -> 0, 1, 0; nbetapi_ -> 1, 2, 0; nbetapi_ -> 1, 3, 5; nbetapi_ -> 0, 4, 6 // <; nbetapi_ -> 0, 5, 7 // <; nbetapi_ -> 2, 6, 0; nbetapi_ -> 0, 7, 2 // <. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 1, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. *Fail*; ```; nalphapi_ -> 0, 0, 5; nalphapi_ -> 0, 1, 0; nalphapi_ -> 1, 2, 0; nalphapi_ -> 1, 3, 5; nalphapi_ -> 0, 4, 7 // <; nalphapi_ -> 0, 5, 6 // <; nalphapi_ -> 2, 6, 0; nalphapi_ -> 0, 7, 3 // < corresponding beta is from irrep #2; nbetapi_ -> 0, 0, 5; nbetapi_ -> 0, 1, 0; nbetapi_ -> 1, 2, 0; nbetapi_ -> 1, 3, 5; nbetapi_ -> 0, 4, 6 // < order is flipped here; nbetapi_ -> 0, 5, 7 // < order is flipped here; nbetapi_ -> 2, 6, 0; nbetapi_ -> 0, 7, 2 // <. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]; ```. I am not sure what's the origin of the different ordering. I would assume that the sorting algorithm is deterministic. Perhaps the diagonalization step is not in the case of degenerac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738#issuecomment-307585640:658,configurat,configuration,658,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307585640,1,['configurat'],['configuration']
Deployability,I managed to solve the issue by installing psi4 **first** using only conda channels. `mamba install psi4 -c conda-forge/label/libint_dev -c conda-forge`. and then installing open-ff with. `mamba install -c conda-forge openff-toolkit`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3046#issuecomment-1706625052:32,install,installing,32,https://psicode.org,https://github.com/psi4/psi4/issues/3046#issuecomment-1706625052,4,['install'],"['install', 'installing']"
Deployability,"I may need some help building a new Windows L2 library with the extra OEI hessians; the VM that I had set up is no longer available after the IT folks kindly sent a security patch that bricked my laptop. I should be able to get Parallels running again if needed, but would appreciate help from anyone with a Windows machine. The failure in ADCC is something I see locally too; I get `ImportError: /u/andysim/anaconda3/envs/psi4dev/lib//python3.9/site-packages/../.././libmkl_sequential.so.1: undefined symbol: mkl_lapack_xzlaswp_i4`, so it looks like some kind of Conda dependency problem. If I try and build ADCC instead, I get problems finding `libtensorlight`, which I have installed via Conda. Any clues about this are welcome, before I head down the rabbithole.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298:174,patch,patch,174,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004856298,2,"['install', 'patch']","['installed', 'patch']"
Deployability,"I need to run bin/psi4 from bash on different cloud nodes, and instead of having to figure out to mount mkl install on all nodes in the same way as on build server, it would just be alot easier to have mkl linked static in to psi4.... What would it take for me to make psi4 compile with static mkl, so I more easy can share my psi4 install dir between calculation nodes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386415227:108,install,install,108,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386415227,2,['install'],['install']
Deployability,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205097386:10,update,update,10,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386,1,['update'],['update']
Deployability,"I now have a version that compiles at home, though I'm not getting the narrowing warning-as-error that the auto-builder is. Still I've patched for it. This *should work* now...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1271938459:135,patch,patched,135,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1271938459,1,['patch'],['patched']
Deployability,"I pretty much agree with this. One thing to keep in mind is [Rollin's problem](https://travis-ci.org/psi4/psi4public/builds/105540128) that was only picked up with debug settings, so I think that a solitary debug build for GCC and clang could be worth keeping in mind. If we do go that route, they should be the first ones built, so the time to failure is low if it's a compile error. Clang 3.8 isn't stable yet and will seg fault with optimization turned on, but the [final release](http://llvm.org/) is slated for a week from now, so I expect that to change very soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182874560:475,release,release,475,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182874560,1,['release'],['release']
Deployability,"I put a patch to DF-MP2 code, so it computes the one-electron properties with property() function. I also added capability to use property() for the DETCI one-electron and transition properties. An example would be something like this:; property('cisd', properties=['transition_dipole']); As in the CC code, the properties=[] argument has to be specified, otherwise python throws an error. The list of properties for DETCI so far is limited to 'dipole', 'quadrupole', 'transition_dipole', and 'transition_quadrupole', but can be augmented easily if needed. Let me know if more functionality is needed. ; In the next few days I'll add support of property() for DCFT. I'll e-mail Ugur and ask if he can do the same. I'll also modify the manual and create a table with methods and references that can be used with property() function. But, besides that, we can probably close this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-38212166:8,patch,patch,8,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-38212166,1,['patch'],['patch']
Deployability,"I put in a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:707,install,install,707,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160,4,['install'],['install']
Deployability,"I put in a patch so that this should soft fail now. SOSCF is quite a new module, out of curiosity have you used it for any other systems?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/256#issuecomment-184814615:11,patch,patch,11,https://psicode.org,https://github.com/psi4/psi4/issues/256#issuecomment-184814615,1,['patch'],['patch']
Deployability,"I ran (cd doc; make) which amounts to the same I guess. I understand that the web-hosted documentation is great, but having the HTML along with the binaries would be more canonical, in case a user is using an older version but looking at the latest docs online. What I am not quite clear about yet is whether the content of SUMMARY gets changed based on present functionality (some dcft tests appear to have been dropped for me), or whether that is due to outdated source files. If it is strictly the latter, then yeah, making sure those are uptodate at tarball release would suffice I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14#issuecomment-22983952:562,release,release,562,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22983952,1,['release'],['release']
Deployability,"I ran ```conda create -n <p4env> psi4 -c psi4/label/dev -c conda-forge``` and it worked. makes sense since rdkit uses conda-forge as well. I then ran ```psi4 --test``` and here are the results. does it matter some were skipped/ failed?. ```; (psi4env) C:\Users\erikc>psi4 --test; =========================================================================== test session starts ===========================================================================; platform win32 -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:796,Install,Install,796,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"I ran `sapt1` on an s390x box now and compared the output to `output.ref` and one thing is weird:. ```; - Geometry (in Bohr), charge = 0, multiplicity = 1:; + Geometry (in Bohr), charge = 0, multiplicity = 2:; ```. Nothing else much stands out besides `output.ref` being from an older version so having some other strings here and there. When SAPT would start. ```; - SAPT0 ; - Ed Hohenstein; - 6 June 2009; ```; I immediately get the backtrace:; ```; +Traceback (most recent call last):; + File ""/usr/bin/psi4"", line 269, in <module>; + exec(content); + File ""<string>"", line 53, in <module>; + File ""/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; + wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); + File ""/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; + e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn); +; +RuntimeError: ; +Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; ```. I checked and adding `DENOMINATOR_ALGORITHM CHOLESKY` to `input.dat` makes the test pass:. ```; Nuclear Repulsion Energy..........................................PASSED; SAPT0 Eelst.......................................................PASSED; SAPT0 Eexch.......................................................PASSED; SAPT0 Eind........................................................PASSED; SAPT0 Edisp.......................................................PASSED; SAPT0 Etotal......................................................PASSED; ```. I'll try to step through the code first before I start recompiling with the patches you suggested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451695207:1693,patch,patches,1693,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451695207,1,['patch'],['patches']
Deployability,"I ran into another issue during the `make install` step.; I kept getting the `ImportError: No module named mpmath`. I have attempted to install `mpmath` through conda, and the issue still persists.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382179737:42,install,install,42,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382179737,2,['install'],['install']
Deployability,"I ran some tests with a hotfix of #859, and while there was still some variation, it was confined to the last decimal place, even after nine points on the path. So yes, this is a bug closely tied to #859 after all. Note to Self:. Said hotfix was inserting the following line of code under the ""Test for convergence"" section of opt_data.cc:; `if (Opt_params.opt_type == OPT_PARAMS::IRC && g_iteration() == 1) return false;`; I recall some rare cases where the second iteration would be taken as the stationary point. I'm having a hard time reproducing this, but checking if the Hessian has a negative eigenvalue would fix it. I do not have the time at the moment to figure out how I would actually check that, in the C++ code. This explains nothing about the symmetry problem, but I would be completely unsurprised if there was some symmetrizing step somewhere in this logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-346434514:24,hotfix,hotfix,24,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346434514,2,['hotfix'],['hotfix']
Deployability,"I ran your command but I get pydantic v1.3 again by default. Here is the output of `conda list`:. ```; # Name Version Build Channel; pydantic 1.3 py38hfa6e2cd_0 psi4; ```. Edit: Now it tells me that a newer conda version exists. ; ```; ==> WARNING: A newer version of conda exists. <==; current version: 4.12.0; latest version: 4.13.0. Please update conda by running; $ conda update -n base conda; ```. Having updated the base conda, it still gives me the default version of 1.3, however.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1161383668:343,update,update,343,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1161383668,3,['update'],"['update', 'updated']"
Deployability,"I really agree those files are annoying because they also recompile when; you install. There's got to be a better way to do this. From what I; understand, and @loriab can correct me if I'm wrong, the idea is to keep; track of modifications to the source in the event that people obtained it; in some backwaters way (like a tar ball off GitHub, which apparently; doesn't include the .git files). That way we know how many changes since; the git hash have occurred for versioning purposes. If everyone obtained; it through normal manners, i.e. git clone, then you can just ask git how; many revisions have occurred since the hash and update the tag that way. On Wed, Aug 10, 2016 at 7:24 PM, Ben Pritchard notifications@github.com; wrote:. > In doing some development with the branch, I only have one more complaint; > (so far). Whenever I make a change to a file (in my case, in libmints),; > running make will compile several files before my changed file. This; > happens every time I make a change. The files are in versioned_code:; > ; > version.cc; > psi_start.cc; > python.cc; > ; > I know they have to be compiled every time, but it's annoying that they; > are compiled _before_ my changed files. Ie, these files are compiled; > before any self-induced compiler errors will surface. If you are fixing; > multiple errors, it's annoying (since some of them take a little while); > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-239034822, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8Tzhn7tnmOB6CZousGrZoVr20xrks5qel27gaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239042342:78,install,install,78,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239042342,2,"['install', 'update']","['install', 'update']"
Deployability,"I really couldn't care less about pluralization in function names, but this is going to break the three findif related tests in `cookbook`. Expected timeline on getting this in? The changes to read/write wavefunction syntax will impact the updated orbital guess code I should be submitting tomorrow. I also never thought I'd see you _remove_ hand-formatting. See the read/write wavefunction code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1394#issuecomment-443564379:240,update,updated,240,https://psicode.org,https://github.com/psi4/psi4/pull/1394#issuecomment-443564379,1,['update'],['updated']
Deployability,"I reduced the active space of the `dmrg-caspt2-n2` testcase (see http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/relax_dmrg_caspt2_test.patch?view=markup), and (now?) some architectures show slightly different results, e.g. powerpc:. ```; DMRG-SCF Energy...................................................PASSED; DMRG-CASPT2 Energy: computed value (-107.5036885) does not match (-107.5036855) to 6 decimal places.; ```. See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=powerpc&ver=1%3A1.0~rc-2&stamp=1464563141 for the full log. This also happened on arm64, i386 (x86-32) and ppc64. The differences are quite small, but mentioning here nevertheless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222506368:128,patch,patches,128,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222506368,2,['patch'],"['patch', 'patches']"
Deployability,"I reinstalled with the rc2 installer and the same error persists. I am looking in the psi4 python module and the ""core"" file seems to not have been compiled correctly? I am guessing it should be a .py file but in my directory its a .pyd file and has a name ""core.cp38-win_amd64.pyd"". Can anyone confirm this and/or point me to where the corrrect file is here so I can download and replace?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875007336:27,install,installer,27,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875007336,1,['install'],['installer']
Deployability,"I remove these two channels. But after running; `conda create --override-channels -n p4env psi4 python=3.9 -c psi4 -c defaults`. It remains the same...; ```. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; python=3.9; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> mkl-service[version='>=2.3.0,<3.0a0'] -> python[version='>=3.10,<3.11.0a0|>=3.7|>=3.6|>=3.5|>=3.6.0|>=3.6,<3.7']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113:1204,install,installed,1204,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005448113,1,['install'],['installed']
Deployability,I reran the input file from the OP with a newly updated version of Psi. The large basis computation gives the same result as before. #1456 does not fix this issue.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1439#issuecomment-451590172:48,update,updated,48,https://psicode.org,https://github.com/psi4/psi4/issues/1439#issuecomment-451590172,1,['update'],['updated']
Deployability,I say review and pull this in. We can patch it up based on @ajmisquitta's comments at a later date.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/942#issuecomment-378368134:38,patch,patch,38,https://psicode.org,https://github.com/psi4/psi4/pull/942#issuecomment-378368134,1,['patch'],['patch']
Deployability,"I second that. The original FCHK writer was specifically for GDMA, and I reverse engineered it from an example that I found in the GDMA repo. It's great that people who actually know what FCHK should look like have been able to patch it up, and it seems like it was only a very minor fix to our GDMA wrapper to get back up and running. Maybe we're close to converging on a proper FCHK!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1524#issuecomment-460845537:228,patch,patch,228,https://psicode.org,https://github.com/psi4/psi4/pull/1524#issuecomment-460845537,1,['patch'],['patch']
Deployability,"I see a 3c smoke test in here, so I think it's best for me to update the branch with the 3c PR contents, before merging. Thoughts, @loriab ? Excellent stuff in this one - sorry for the delayed review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627#issuecomment-283403855:62,update,update,62,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-283403855,1,['update'],['update']
Deployability,"I see it's the switch to a strong `enum` that causes trouble. That's quite easily fixed. How should I proceed? Submit a patch to the `v2rdm_casscf` repository, wait for it to be applied and then update the plugin's version in this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355077662:120,patch,patch,120,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355077662,2,"['patch', 'update']","['patch', 'update']"
Deployability,"I see that this goes a lot further than I was expecting it to; some day that will stop surprising me. It's a shame about the apparent necessity to keep the inconsistent definitions, but you're probably right when you say lots of downstream code is going to rely on the current behavior, whether or not we see it as ""correct."" The dual-identity of type-A and type-B ghosts only complicates matters further, though I definitely see the need for it. It would almost be better if type-A ghosts didn't exist and at parse-time any ""default"" ghosts are treated as type-B ghosts somehow, but this is likely more complicated then it sounds. Either way, the ability to go back-and-forth between real and ghost is absolutely necessary, and type-B is the only one that can consistently do that. . Fixing only type-A ghosts to return zero mass may only confuse things further. If nothing else, the functions should at least do the same thing for type-A and type-B ghosts. Consistency between `Molecule.mass` and `Molecule.Z` could be worked on later, though as you pointed out it's probably not a good idea to change `Molecule.Z`. . As for a new `Molecule` function to ensure the user knows what they're going to get, are you referring specifically to a `molecular_weight` function or more generally a function to return either the mass or Z val as either zero or real depending on input? I could get behind either of those, though with `molecular_weight` I would suggest simply setting a default for ghost atoms to return zero mass as I can't imagine anyone would want a molecular weight including ghost atom masses. . EDIT: I just saw what you said about ACS and DGAS nre edit in [#844](https://github.com/psi4/psi4/pull/844). That could work, requiring the argument c-side and giving a default py-side, though I wonder how many places we'd have to update c-side calls to conform to this. Might be the best answer with the least pain involved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363495902:1838,update,update,1838,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363495902,1,['update'],['update']
Deployability,"I see the same issue with Psi4 installed on Ubuntu 16.04.1 LTS, compiled with gcc 5.4.0. It is also using ATLAS for BLAS/LAPACK, and my build is a debug build. The following test cases fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 133 - dfomp2-grad2 (Failed). I'll update as I switch to another BLAS/LAPACK.; Other test cases fail but they might be related to different problems:; 188 - mints9 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 314 - fsapt1 (Timeout); 321 - python-energy (Failed); 322 - python-curve (Failed); 323 - python-pubchem (Failed); 324 - json-energy (Failed); 325 - json-gradient (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-277545780:31,install,installed,31,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277545780,2,"['install', 'update']","['installed', 'update']"
Deployability,"I should add that the reason I point to conda in the first step of the above is because I installed boost, Eigen and gmp in there. Those are all needed for libint2, and are easily obtained via conda.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-537946083:90,install,installed,90,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537946083,1,['install'],['installed']
Deployability,"I should have read this first before replying on twitter. That 7-7-4-8-8-5 file was a trial I was making (https://github.com/psi4/psi4/issues/1341#issuecomment-1130271539). And in generating the tarball, I caught some uncommitted local changes that I was trying to fix a separate issue of paths in Windows. Thanks for the report, and I'm sorry for the trouble. I'll certainly patch it up before officially recommending that larger AM tarball. Out of curiosity, what architecture/threads were you using that you got that tarball to build in 3 hours?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586#issuecomment-1133782381:376,patch,patch,376,https://psicode.org,https://github.com/psi4/psi4/issues/2586#issuecomment-1133782381,1,['patch'],['patch']
Deployability,"I skimmed the functionality for new goodies, I dont see too many that effects us (and nothing in a major way). So nothing too promising there. Do the PyBind11 folks have an official stance on cross version compatibility. I dont see a huge reason for major releases not to work together at the moment. Although I do see possible issues as they tweak things like `py::keep_alive` between 2.1 and 2.2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-335233936:256,release,releases,256,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-335233936,1,['release'],['releases']
Deployability,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172235413:197,install,installed,197,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413,5,['install'],"['install', 'install-dir', 'installed']"
Deployability,"I still get an error entering 'conda create -n p4env python=3.8 psi4 -c psi4/label/dev' into anaconda prompt. does my computer being a windows have anything to do with this failed installation?. `(base) C:\Users\erikc>conda create -n p4env python=3.8 psi4 -c psi4/label/dev; WARNING: A directory already exists at the target location 'C:\Users\erikc\anaconda3\envs\p4env'; but it is not a conda environment.; Continue creating environment (y/[n])? y. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> msgpack-python -> python[version='>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.5,<3.6.0a0|>=3.6|>=3.5|>=3.6.0']; python=3.8; psi4 -> python=3.8`. I would appreciate any help to get psi4 up and running. thanks",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341:180,install,installation,180,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-874806341,1,['install'],['installation']
Deployability,"I strongly recommend not doing that as you can get wrong answers and/or lose all threading capacity. . To get around the mkl-on-nodes problem, I advise installing the psi4-dev conda package that provides all of psi4's dependencies, incl. numpy and mkl, then building against that. ```; cd {top-level-psi4-dir}; conda create -n p4dev35 python=3.5 psi4-dev -c psi4/label/dev -c psi4; conda activate p4dev35; `psi4-path-advisor --intel`; # cmake configures; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; make install; ```; Is there any reason the psi4 conda package itself isn't suitable? If size is an issue, then mkl is the problem, and it doesn't do to just fix mkl for psi4 b/c other pieces (numpy, chemps2) use it, too. I'm working on an openblas build. If you're resolved on statically linking mkl, short of probing the math detection, I'd consult the mkl-link-advisor and pass the resulting advice to psi4 cmake via example (G.) of http://psicode.org/psi4manual/master/build_planning.html#cmake-lapack . EDIT: `conda install` --> `conda create` on 2nd line of snippet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281:152,install,installing,152,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281,3,['install'],"['install', 'installing']"
Deployability,"I suppose I should add my setup is kind of unusual in that I don't develop with or for python, only C++, so never have that stuff installed. So it caught me out for a minute, but easy to fix. Not critical by any means, but If one were a stickler for good cmake practices code compilation should never fall over because of cmake missing dependency checks, . Perhaps I'll try and port psi4 build to meson one day .. famous last words. :D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060#issuecomment-743313067:130,install,installed,130,https://psicode.org,https://github.com/psi4/psi4/issues/2060#issuecomment-743313067,1,['install'],['installed']
Deployability,"I suppose if people want to get the ""broken"" version of ADC, they can install Psi4 between (at least) 1.3.2 and 1.5, right? I don't think we need to deprecate features that don't work, and if `adcc` is a ""drop-in"" replacement for ADC, I'd too **vote for removal**. Maybe in 1.6, and perhaps 1.7, calls to ADC should be shimmed to `adcc` with a deprecation warning, and afterwards the ADC interface removed (if it's different than `adcc`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1030693330:70,install,install,70,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1030693330,1,['install'],['install']
Deployability,"I suspect it's a stray forte somewhere. However, I have not installed forte as part of this separate environment, I do have a failed compilation of it around so that could be the reason. The call appears to be coming from this function in psi4:; `PSI4.DRIVER.P4UTIL.PROCUTIL`. is this forte:. ```; def prepare_options_for_set_options() -> Dict[str, Any]:; """"""Collect current state of :py:class:`psi4.core.Options` information for; reloading by :py:func:`~psi4.driver.p4util.set_options`. Returns; -------; Dict[str, Any]; Dictionary where keys are keyword names, either plain for those to be; set globally or mangled ""module__keyword"" for those to be set locally,; and values are keyword values. """"""; flat_options = {}; has_changed_snapshot = {module: core.options_to_python(module) for module in _modules}. for opt in core.get_global_option_list():; handled_locally = False; ghoc = core.has_global_option_changed(opt); opt_snapshot = {k: v[opt] for k, v in has_changed_snapshot.items() if opt in v}; for module, (lhoc, ohoc) in opt_snapshot.items():; if ohoc:; if lhoc:; key = module + '__' + opt; val = core.get_local_option(module, opt); else:; key = opt; val = core.get_global_option(opt); handled_locally = True; flat_options[key] = val. if ghoc and not handled_locally:; # some options are globals section (not level) so not in any module; flat_options[opt] = core.get_global_option(opt). # The normal machinery to forward plugin options to Psi goes through 'plugin_load'.; # Forte doesn't use this. Pending a larger options rewrite (move to a Python dictionary?),; # we need the following dirty hack. try:; import forte # Needed for Forte options to run.; except ImportError:; pass; else:; # Initialization tasks with Psi options; psi_options = core.get_options(); current_module = psi_options.get_current_module(); # Get the current Forte options from Forte; forte_options = forte.ForteOptions(); forte.register_forte_options(forte_options); psi_options.set_current_module(""FORTE""); try:; fort",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686:60,install,installed,60,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686,1,['install'],['installed']
Deployability,"I sympathize, but enough would break that a non-psi-theme-psi-docs is probably best built by hand. psi_theme has a couple sphinx extensions, and psi_theme is a light tweak on cloud_theme which also has extensions psi uses. And all the api autodoc-ing uses extensions from astropy. So if you change the theme and comment out enough from [here](https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/conf.py.in#L67-L86), you can get a docs build with a built-in theme (I've done it), but it's definitely incomplete. There came to be so many external requirements that I thought it was better practice to add psi_theme to the list and just make sure they were all easily installable (https://github.com/psi4/psi4/blob/master/doc/sphinxman/CMakeLists.txt#L18-L21). How intent are you on evading psi_theme?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/892#issuecomment-356276924:675,install,installable,675,https://psicode.org,https://github.com/psi4/psi4/issues/892#issuecomment-356276924,1,['install'],['installable']
Deployability,"I tested my code after rebasing, still looks just like it did before. I updated the timings and errors graphs based on the results of my rebased code (I used an intel compiler this time, rather than GCC)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187#issuecomment-855159767:72,update,updated,72,https://psicode.org,https://github.com/psi4/psi4/pull/2187#issuecomment-855159767,1,['update'],['updated']
Deployability,"I think (B) with a comment in the tests about why updated. We want to keep checking to the same precision, but like physconst updates, the ref value has changed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494026644:50,update,updated,50,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494026644,2,['update'],"['updated', 'updates']"
Deployability,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53039792:734,update,update,734,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792,1,['update'],['update']
Deployability,I think I updated my post while you wrote back to me.... for some reason --intel fails in cmake (se previous post),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386438642:10,update,updated,10,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386438642,1,['update'],['updated']
Deployability,"I think an auto-update is a good idea, but will need some sanity checks. Thinking back a decade, I think the original motivation for not auto updating was to accommodate the following:; ```; molecule h2 {; H; H 1 R; }. h2.R = 0.7; ```; There were some problems caused by attempting to update in the absence of all variables, but they should be easy to overcome with the appropriate checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/765#issuecomment-316152578:16,update,update,16,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316152578,2,['update'],['update']
Deployability,"I think for a locally compiled psi4 you also have to remove the install dir, if one exists. Susi Lehtola; Sent from my phone so excuse my brevity. On 14 Feb 2019, at 3.40, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. TL;DR If conda psi4 is acting up, update libint, too: conda update libint -c psi4/label/dev. If locally compiled psi4 is acting up, trigger a partial recompile: cd objdir && rm -rf external/upstream/libint/ && make. We've been planning for a while to distribute conda psi4 with libint compiled at MAX_AM_ERI 8, not 6. I have rebuilt the libint package and now the v1.3rc1 will be the first psi4 package with extended AM. Unfortunately, both libint of different AM are not hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:64,install,install,64,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,3,"['install', 'update']","['install', 'update']"
Deployability,I think in terms of changes for this particular patch this is all ready to go. Any objections?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/747#issuecomment-312716724:48,patch,patch,48,https://psicode.org,https://github.com/psi4/psi4/pull/747#issuecomment-312716724,1,['patch'],['patch']
Deployability,I think something's wrong with the new 1.3.0 pandas pkg minted a few hours ago. Avoiding it fixes the problem for adcc. May be simplest to add three lines to this PR: https://github.com/psi4/psi4/pull/2255/files . First line fixes the problem. Others a general update and debug line.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883636314:261,update,update,261,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883636314,1,['update'],['update']
Deployability,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275138618:159,toggle,toggle,159,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618,2,"['install', 'toggle']","['installed', 'toggle']"
Deployability,"I think that is likely the way to go, I believe you will still need to merge some of the new integral code. It may be worth splitting that off into a another PR to get a digestible component there. We usually can merge small chunks quicker and expanding functionality through python is usually quite preferred if that level of integration is sufficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-498737983:327,integrat,integration,327,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-498737983,1,['integrat'],['integration']
Deployability,"I think that looks good, @dgasmith. @jturney, how about a weekly build/test for the full matrix (and OSX) using the Docker solution that @dgasmith proposed before. That would give us complete coverage of compilers and debug/release, but on a slight delay. We'd catch most bugs before that stage with the limited Travis builds. Just a thought.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182893800:224,release,release,224,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182893800,1,['release'],['release']
Deployability,"I think that should be sufficient, the differences are nominal enough. On this note can you quantify the energy differences (both absolute and relative) so that we can mention this in the release notes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494793194:188,release,release,188,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494793194,1,['release'],['release']
Deployability,"I think that sounds right, Jet. David. On Fri, Jan 22, 2016 at 6:31 AM, Justin Turney notifications@github.com; wrote:. > Didn't we use to install the psi4 headers into prefix/include/psi4 ?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/215#issuecomment-173890912.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173925344:139,install,install,139,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173925344,1,['install'],['install']
Deployability,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:123,configurat,configuration,123,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143,1,['configurat'],['configuration']
Deployability,"I think the name `ncore` is ok, since it's still asking for the number of core electrons (maybe `n_ecp_core` is more explicit?). The docstring certainly needs an update - good catch! If you have a suggestion on `ncore` nomenclature, fire away.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/734#issuecomment-307966347:162,update,update,162,https://psicode.org,https://github.com/psi4/psi4/pull/734#issuecomment-307966347,1,['update'],['update']
Deployability,"I think this could be due to the fact that Matrix::copy() will reallocate the matrix if the matrix being copied has a different size or number of irreps:. void Matrix::copy(const Matrix\* cp); {; // Make sure we are the same size as cp; bool same = true;; if (nirrep_ != cp->nirrep_ || symmetry_ != cp->symmetry_) {; same = false;; }; else {; if (colspi_ != cp->colspi_ || rowspi_ != cp->rowspi_); same = false;; }. ```; if (same == false) {; release();; nirrep_ = cp->nirrep_;; symmetry_ = cp->symmetry_;; rowspi_ = Dimension(nirrep_);; colspi_ = Dimension(nirrep_);; for (int i=0; i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/127#issuecomment-122116756:443,release,release,443,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756,1,['release'],['release']
Deployability,"I think this is again in a good shape and also writes now the correct orbital coeff/energies in the FCHK sense, meaning SCF ones.; Please check the updated main post. I am not 100% sure what I did with the `Vector.copy()` is fully correct, please have a close look. It works for my use case.; (https://github.com/psi4/psi4/pull/1884/files#diff-ce944be82d781507cd2bfa56fdb26af1R323)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-670485596:148,update,updated,148,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670485596,1,['update'],['updated']
Deployability,"I think this is pretty close pending the review comments, any chance we can get this patched up and in?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-497955312:85,patch,patched,85,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-497955312,1,['patch'],['patched']
Deployability,I think we're on the same page (certainly for the headers). Installed changes:; - agreed; - `share/psi/* --> share/psi4/*`. Source changes:; - `top-source-dir/lib/* --> top-source-dir/share/psi4/*`. I'd like to have the two directory levels to keep the source and install tree similar could keep confusion down when setting `PSIDATADIR`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173961471:60,Install,Installed,60,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173961471,2,"['Install', 'install']","['Installed', 'install']"
Deployability,"I tried `conda create -n p4env python=3.8 psi4 -c psi4` to no avail:. ```; UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0']; psi4 -> networkx -> python[version='>=3.5|>=3.8,<3.9.0a0|>=3.6.0|>=3.6']; python=3.8; ```. I'm out of my depths here, but it seems that networkx already works in python3.8, so I'm not sure why that would show up as a conflict. A Python 3.8 build would be great, since it seems to be the default python in Conda now (and it will allow people to start arguing over walrus operators in their code). Installing with `python=3.7` works.; Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-671585693:763,Install,Installing,763,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671585693,1,['Install'],['Installing']
Deployability,I updated the `energy` function docstring to include the boolean option of write_orbitals,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190#issuecomment-873261074:2,update,updated,2,https://psicode.org,https://github.com/psi4/psi4/pull/2190#issuecomment-873261074,1,['update'],['updated']
Deployability,I updated the graph at the start of the pull request to reflect the `DGAS Victory` commit,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1749#issuecomment-551189913:2,update,updated,2,https://psicode.org,https://github.com/psi4/psi4/pull/1749#issuecomment-551189913,1,['update'],['updated']
Deployability,"I updated the input file to the [new syntax](https://github.com/psi4/psi4/issues/150#issuecomment-228951911), and it does the SCF and seemingly gets into the DMRG. Is this any improvement to what you experienced?. ```; molecule {; 0 2; C; H 1 RCH; H 1 RCH 2 A; C 1 RCd 3 A 2 D180; H 4 RCH 1 A 3 D; C 4 RCs 5 A 2 D180; H 6 RCH 4 A 5 D180; C 6 RCd 7 A 4 D180; H 8 RCH 6 A 7 D180; C 8 RCs 9 A 6 D180; H 10 RCH 8 A 9 D180; C 10 RCd 11 A 8 D180; H 12 RCH 10 A 11 D180; C 12 RCs 13 A 10 D180; H 14 RCH 12 A 13 D180; C 14 RCd 15 A 12 D180; H 16 RCH 14 A 15 D180; C 16 RCs 17 A 14 D180; H 18 RCH 16 A 17 D180; H 18 RCH 16 A 19 D180. RCs=1.45; RCd=1.36; RCH=1.08; A=120.0; D=0.0; D180=180.0; }. set basis STO-3G; set reference rohf; set scf_type pk; set docc [ 28, 4 ]; set socc [ 0, 1 ]; set e_convergence 1e-13; set d_convergence 1e-13; set ints_tolerance 0.0; # Include 20% old density; set damping_percentage 20; # and stop damping once density has converged to 1e-3; set damping_convergence 1e-3. set dmrg_irrep 1; set dmrg_multiplicity 2; set restricted_docc [ 9, 0 ]; set active [ 38, 9 ]. set dmrg_sweep_states [ 250, 250 ]; set dmrg_sweep_energy_conv [ 1e-8, 1e-8 ]; set dmrg_sweep_max_sweeps [ 10, 10 ]; set dmrg_sweep_noise_prefac [ 0.05, 0.00 ]; set dmrg_sweep_dvdson_rtol [ 1e-5, 1e-8 ]; set dmrg_print_corr false; set dmrg_mps_write false. set dmrg_scf_active_space loc; set dmrg_local_init true. set dmrg_molden_write true # DMRG-CI pseudocanonical orbitals; set dmrg_opdm_ao_print true # DMRG-CI density in the AO basis. energy('dmrg-ci'); ```. ```; @ROHF iter 32: -342.84910912994206 -1.13687e-13 7.97882e-15 DIIS; @ROHF iter 33: -342.84910912994206 0.00000e+00 5.47136e-15 DIIS; ```. ```; Psi4 symmetry group was found to be <cs>.; wfn_irrep = 1; wfn_multp = 2; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ###################################################",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-244580097:2,update,updated,2,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-244580097,1,['update'],['updated']
Deployability,"I updated the title and posted some blurb describing the issue. I approve the PR, but I'm a part author so maybe another reviewer would be good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444471200:2,update,updated,2,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444471200,1,['update'],['updated']
Deployability,"I used the MKL DEBUG flag. The compiler penalties you mentioned were removed at one point (https://github.com/jimenezrick/patch-AuthenticAMD), currently I don't worry about them unless there is a new report on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633678203:122,patch,patch-AuthenticAMD,122,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633678203,1,['patch'],['patch-AuthenticAMD']
Deployability,I was running `mp2/cc-pvqz-ri` and also `mp2/cc-pvqz` and saw the difference in the energy and was thinking I needed to explicitly set ri. . Thanks for clarifying that. Really helps before I scale. . Will update soon with some test results.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1279098432:205,update,update,205,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1279098432,1,['update'],['update']
Deployability,"I was running the basis set diff-er (with mods) on these and got the summary below (black: unchanged to 8 decimals, yellow: changed, blue: new). So changes are fairly obscure except for 2zapa carbon.; <img width=""923"" alt=""Screen Shot 2021-07-23 at 10 19 12 AM"" src=""https://user-images.githubusercontent.com/2314730/126795680-fbf3104c-55f7-4b65-ac9c-18ae05c5f6b6.png"">; Magnitudes of changes seen in the next printouts. I did look into one of them (0.3945 <-- 0.39945 in 5zapa Li), and it tracked with psi's being the version 0 on BSE and the PR's being the version 1. So it's probably safe to assume this is all an upgrade. I'm with Jonathon on wanting to see what's changing.; <img width=""980"" alt=""Screen Shot 2021-07-23 at 10 17 10 AM"" src=""https://user-images.githubusercontent.com/2314730/126795684-17df1224-f2d7-4402-944e-ffed9edd4325.png"">; <img width=""1211"" alt=""Screen Shot 2021-07-23 at 10 16 48 AM"" src=""https://user-images.githubusercontent.com/2314730/126795688-24e6245e-05c9-4079-a44b-4f9bdddbb282.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2254#issuecomment-885679289:617,upgrade,upgrade,617,https://psicode.org,https://github.com/psi4/psi4/pull/2254#issuecomment-885679289,1,['upgrade'],['upgrade']
Deployability,"I went to the link and typed ""which psi4"" in my terminal and got a return synonymous with the path being correct, I believe (so it said the code for the path should be redundant): [If you installed the Psi4conda distribution or installed the PSI4 conda package into the main environment of an Anaconda or Miniconda distribution and added that to your [PATH](https://psicode.org/psi4manual/master/external.html#envvar-PATH), as prompted, then which psi4 likely yields condadist/bin/psi4 and the PATH setting lines below are redundant.] . which psi4; /home/emkal/psi4conda/bin/psi4. Additionally, trying the two commands suggested also had errors in syntax I believe? I also tried psi4 --psiapi which gave me the path and pythonpath; I tried copying the output in substitution of the ""PYTHONPATH"" but it didn't make a difference. [1] export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/; File ""/tmp/ipykernel_10582/3886179417.py"", line 1; export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/; ^; SyntaxError: invalid syntax. [2] sys.path.append(<same>); File ""/tmp/ipykernel_10582/3391378744.py"", line 1; sys.path.append(<same>); ^; SyntaxError: invalid syntax",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195298996:188,install,installed,188,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195298996,2,['install'],['installed']
Deployability,"I wonder if this is obvious, but there's no Psi4 for python 3.8 in the main channel:; ```; linux-64/psi4-1.3.2+ecbda83-py37h06ff01c_1.tar.bz2; linux-64/psi4-1.3.2+ecbda83-py36h34e5639_1.tar.bz2; ```; That being said, unless you really want the current release version (1.3.2), I'd strongly suggest you go for Psi4 from the `dev` channel using `conda create -n p4env python=3.8 psi4 -c psi4/label/dev`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-671664349:252,release,release,252,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671664349,1,['release'],['release']
Deployability,I would not mind trying to fix this. ; I am not very familiar with the manual. I have identified the .rts file on the repo. But I am uncertain if any other files need to be updated as well.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2087#issuecomment-764948136:173,update,updated,173,https://psicode.org,https://github.com/psi4/psi4/issues/2087#issuecomment-764948136,1,['update'],['updated']
Deployability,"I wouldn't know about that, since this patch solved my convergence problems on ROHF calculations, e.g. the example in #423 . Sure, I can switch out the for loops to the versions you suggested; I just adapted the routines from rhf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/422#issuecomment-228449211:39,patch,patch,39,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228449211,1,['patch'],['patch']
Deployability,"I'd appreciate some feedback, especially on the docs. There's one or two items where I'd like @loriab to weigh in further: function aliases and zero-if-not-present for VV10 and empirical dispersion. The failing build seems to be a random crash of the windows pipeline, not related to this PR as far as I can tell.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-939466200:259,pipeline,pipeline,259,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-939466200,1,['pipeline'],['pipeline']
Deployability,I'd be for using `psi4` since psi3 is still out in the wild and uses `psi`. Looking at that cmake url it looks like only `DOCDIR` is automatically namespaced. We'd only need to namespace `INCLUDEDIR` and `DATADIR`. Maybe now is a good time to rename the `lib` in our top source directory to `share/psi4` since that is where the items will be installed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173950354:342,install,installed,342,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173950354,1,['install'],['installed']
Deployability,"I'd like to team up on this, but Psi4 is trying to get back into the science business from having been in the infrastructure business for much of the past year, so our rewriting energies are depleted. On the monolithic vs. modular, on the whole I agree with preferring the latter, but I'm thinking that math detection is also going to have to be installed alongside packages so system dependencies can be detected from installed projects, and a single alternate file like [FindPythonLibsNew](https://github.com/pybind/pybind11/blob/master/tools/FindPythonLibsNew.cmake) (originally from numpy, i think) is more palatable than installing half-a-dozen+ files. So I'm guessing that on the core math, we'll probably keep applying bandaids but will be glad to serve as a test bed in developing needed specs and solutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537#issuecomment-264468397:346,install,installed,346,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264468397,3,['install'],"['installed', 'installing']"
Deployability,"I'd love to have RKS GGA hessians for the 1.10 release next May (and I'd probably be the one who codes it). I'm currently tracking down some errors in integrals, which is higher priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3068#issuecomment-1787026243:47,release,release,47,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1787026243,1,['release'],['release']
Deployability,"I'd prefer not needing to throw in a prefactor at all, but I suppose that's necessary given that `occ` and `dfocc` measure the ""residual"" as the size of the first order update, not the size of the residual proper. No issues there. My thoughts about the CEPA issue are unchanged from my previous comment; as best as I can tell, the energy being within convergence tolerance does not mean all of its spin components are. As for why this doesn't afflict other modules:; * `fnocc` and `occ` compute the energy differently. `fnocc` uses an energy functional that is variational in the amplitudes, where `occ` uses the normal CCD-like energy functional. They'll both agree at convergence, but not at other amplitudes. This difference seems to give `fnocc` its better behaved spin-components.; * There don't seem to be `dfocc` LCCD eneries in the standard suite, so of course those aren't raising errors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-676587339:169,update,update,169,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-676587339,1,['update'],['update']
Deployability,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:224,update,updated,224,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469,1,['update'],['updated']
Deployability,I'll be the first to admit that the RPATHs in this version are a little wanky. I just give it both its install and build locations. I really like the relative RPATHS @jturney brought up and that's probably the way to do it if we can find a Mac solution as well. [Site with the CMake commands to pull this off](https://www.semipol.de/2012/02/16/relative-rpath-settings-with-cmake.html),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236021130:103,install,install,103,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236021130,1,['install'],['install']
Deployability,"I'll check the code usage in the plugin. Currently, plugins only link against the plugin library but it may not be necessary. Everything else is dynamically linked at runtime. If the plugin library isn't needed then none of the archives need to be installed. The headers certainly need to be installed and referenced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162#issuecomment-130124191:248,install,installed,248,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130124191,2,['install'],['installed']
Deployability,I'll have time tomorrow to update the docs and tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/634#issuecomment-283811506:27,update,update,27,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-283811506,1,['update'],['update']
Deployability,"I'll try to wrap everything up this afternoon. I just need to do the official release (which is easy, just requires me making a changelog and stuff). And I will remove the restrict keyword from cmake",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-289815684:78,release,release,78,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-289815684,1,['release'],['release']
Deployability,"I'll work on that one. What needs to be done:; 1) All codes that have relaxed density available (DCFT, OCC, DF-MP2(RHF), others?) should be able to compute one-electron properties using property() function. This is easy, the relaxed one-particle density matrix should be stored on disk and OEPROP should then be called. OEPROP title needs to be updated.; 2) Manual needs to be updated. More description of property() capabilities needs to be written, the description of OEPROP should be only for developers.; 3) Methods that do not compute the one-particle density for the reference requested by the user should throw.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-37993139:345,update,updated,345,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-37993139,2,['update'],['updated']
Deployability,"I'm a bit late to this party, but what strikes me as interesting (as Jet; says) is that the spin components printed look OK, but the various; summations at the very bottom of the table are wrong. That smells vaguely; like corruption in one of the summations. -Rob. On Fri, Feb 12, 2016 at 4:02 PM, Ugur Bozkaya notifications@github.com; wrote:. > Now I have install a fresh binary version (Psi4 0.4.16) and run the same; > input and get:; > ; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914770; > REF Energy (a.u.) : -25.94513055914770; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; > CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; > CD-MP2 Total Energy (a.u.) : -25.96664562659070; > =======================================================================; > ; > I also tried with another older version (Psi4 0.3.137) I still get the; > correct result. Hence, the new version yields wrong result while older; > versions give the correct result. Therefore, it should be related to the; > recent changes were made. I do not know how to fix it.; > @loriab https://github.com/loriab @CDSherrill; > https://github.com/CDSherrill @andysim https://github.com/andysim; > @jturney https://github.com/jturney; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/244#issuecomment-183535595.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183540864:358,install,install,358,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183540864,1,['install'],['install']
Deployability,"I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.). ```; ### Setup. molecule dimer {; He; X 1 R ; He 2 1.0 1 180 ; }. set basis 6-31G(d). Rvals = [1.4, 1.5]. ### Compute; ecp = {}; for R in Rvals:; dimer.R = R ; ecp[R] = energy(""mp2""). ### Printout; psi4.print_out(""\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""). for R in Rvals:; psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); ```. The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744:649,update,updated,649,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744,1,['update'],['updated']
Deployability,"I'm building Libint2 via Psi4; I wouldn't have this error otherwise ;). I'm waiting on Ed to release a stable updated version of Libint2, so that I can package it in Fedora.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737416449:93,release,release,93,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737416449,2,"['release', 'update']","['release', 'updated']"
Deployability,"I'm confused, too, as that doesn't seem congruent with your reported . ```; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```. Unless you have a stray `/tmp/qcengine.yaml`, I'd expect https://github.com/MolSSI/QCEngine/blob/master/qcengine/config.py#L186 to be invoked. Here's a CI run on psi4 1.7 that shows up in qcengine info https://github.com/MolSSI/QCEngine/actions/runs/3654021638/jobs/6174071225#step:9:19 and there's no special configuration or `qcengine.yaml` files. So all I can think of to debug on your setup is to print stuff until the error becomes clear. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199:528,configurat,configuration,528,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199,1,['configurat'],['configuration']
Deployability,I'm fine with leaving the sample updates in. Looks good to me so far.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1274#issuecomment-426228182:33,update,updates,33,https://psicode.org,https://github.com/psi4/psi4/pull/1274#issuecomment-426228182,1,['update'],['updates']
Deployability,"I'm fine with this. We should mention it in release notes, and perhaps make sure the ""Description"" and ""Citation"" elements are filled in properly for both new B97 and B97-0 (not sure they currently are).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1403#issuecomment-444398462:44,release,release,44,https://psicode.org,https://github.com/psi4/psi4/pull/1403#issuecomment-444398462,1,['release'],['release']
Deployability,"I'm glad to hear you're using an external libint; I hope everyone will be soon. If you've switched from the [patch](https://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/system_libint.patch?view=markup) to the [new external repo](https://github.com/psi4/libint) and it gives you any problems, please let us know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474#issuecomment-249428766:109,patch,patch,109,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249428766,3,['patch'],"['patch', 'patches']"
Deployability,"I'm going to put together a psi-hosted libxc 4.0 + patch for psi to build from, in case that's helpful. Congrats for tracking that down.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900#issuecomment-379371277:51,patch,patch,51,https://psicode.org,https://github.com/psi4/psi4/issues/900#issuecomment-379371277,1,['patch'],['patch']
Deployability,"I'm going to update the branch and then add to merge queue, so heads-up that local != remote.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997#issuecomment-1618728269:13,update,update,13,https://psicode.org,https://github.com/psi4/psi4/pull/2997#issuecomment-1618728269,1,['update'],['update']
Deployability,"I'm inclined to force an update, given that GCC5 hasn't been supported for years, but as I'm not familiar with cluster management, my opinion isn't very strong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2092#issuecomment-767187015:25,update,update,25,https://psicode.org,https://github.com/psi4/psi4/pull/2092#issuecomment-767187015,1,['update'],['update']
Deployability,I'm kind of surprised this hasn't been caught sooner. Looks like we're using a decently old version of a file similar to the one that you linked to. Might be time to upgrade the checks to the modern style.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060#issuecomment-743284249:166,upgrade,upgrade,166,https://psicode.org,https://github.com/psi4/psi4/issues/2060#issuecomment-743284249,1,['upgrade'],['upgrade']
Deployability,"I'm not following, I'm afraid. On a build with only pb11 built internally and configured and launched from odd directories to try to provoke a `pwd` issue, these are the only Target files I get under `stage/`, and they seem to be in place and not duplicated. ```; objdir1: (insist) find stage/ -name ""*Target*""; stage/usr/local/psi4/share/cmake/TargetLAPACK; stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5Config.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; stage/usr/local/psi4/share/cmake/pybind11/pybind11Targets.cmake; stage/usr/local/psi4/share/cmake/psi4/psi4Targets.cmake; stage/usr/local/psi4/share/cmake/psi4/psi4Targets-release.cmake; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/855#issuecomment-343783023:933,release,release,933,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343783023,1,['release'],['release']
Deployability,"I'm not sure how often `oeprop` really gets called directly in an input, so this is an interesting case. I'm actually tempted to say this is ""expected"" behavior - if you're not calling `oeprop` within the pre-built workflow of another method, maybe it shouldn't get a name unless you specify one. . the only issue is you may not be confident in _how_ the dipole was calculated - e.g. if you run a CCSD energy calculation, then call `oeprop`, does it form the CCSD density and contract with the dipole integrals? generally we only update the density in `properties`, so I'd wager you would actually get the SCF dipole back out. if I recall, it should be printed in the output file which density is used, but if you pull results directly from the python output then you won't necessarily know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203#issuecomment-869187545:530,update,update,530,https://psicode.org,https://github.com/psi4/psi4/issues/2203#issuecomment-869187545,1,['update'],['update']
Deployability,"I'm not sure if it's related but I just ran a conda upgrade an a fresh, clean anaconda install, and this happened:; ```; QuickSilver:~ > conda update --prefix /Users/andysim/anaconda3 anaconda; Solving environment: done. ## Package Plan ##. environment location: /Users/andysim/anaconda3. added / updated specs: ; - anaconda. The following packages will be downloaded:. package | build; ---------------------------|-----------------; mkl-2018.0.3 | 1 149.2 MB. The following packages will be DOWNGRADED:. mkl: 2019.0-118 --> 2018.0.3-1; ```; Maybe this means that there's a known problem with mkl2019 and it's being rolled back?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1408#issuecomment-445278710:52,upgrade,upgrade,52,https://psicode.org,https://github.com/psi4/psi4/pull/1408#issuecomment-445278710,4,"['install', 'update', 'upgrade']","['install', 'update', 'updated', 'upgrade']"
Deployability,"I'm ok with linking to a PDF manual or external website for GDMA, but I; think we would also at least need a little paragraph in our manual; explaining that the capability is there, and giving any Psi keywords that; are used to access GDMA. On Thu, Mar 24, 2016 at 11:38 PM, Andy Simmonett notifications@github.com; wrote:. > Excellent idea about the Conda distribution, Lori. I emailed Prof. Stone; > yesterday, but haven't heard back. He is retired now, so I don't know if; > his Cambridge email is active; his seminal red book was updated last year; > so I think he's still doing some work. I doubt he will object to our; > distribution idea; I think he would've chosen a different license to GPL if; > he didn't want his code to be used in this way. Regardless, I think we; > should wait a week to hear back and merge the PR if we don't get a; > response. He deserves to have a say in how we handle his code.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/323#issuecomment-201122403",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/323#issuecomment-201297358:534,update,updated,534,https://psicode.org,https://github.com/psi4/psi4/pull/323#issuecomment-201297358,1,['update'],['updated']
Deployability,"I'm sorry, but the issue does not seem to be fully solved... Yes now the atom nr in the header of the cube file is correct:; ```; Psi4 Gaussian Cube File.; Property: Dt [e/a0^3]. Isocontour range for 85% of the density: (0.0571983,0); 5 -12.329260 -10.002258 -9.679907; 131 0.160000 0.000000 0.000000; 120 0.000000 0.160000 0.000000; 122 0.000000 0.000000 0.160000; 53 0.000000 0.438284 -0.000000 -0.000001; 6 0.000000 -3.552440 -0.000000 -0.000001; 1 0.000000 -4.296614 -1.929221 -0.000001; 1 0.000000 -4.296803 0.964516 1.670895; 1 0.000000 -4.296614 0.964705 -1.670708. ```; But the integrated electrons in the cube file still misses alot of electrons. I use the cube file as input for the Chargemol code, and it works perfect for all other than molecules with Iodine as in this example. ```; Starting DDEC program; 2018/08/14 12:53:41; Copyright (c) 2014, 2015, 2016 by Thomas A. Manz and Nidia Gabaldon Limas. Rights reserved.; ; **************** THREAD INFORMATION ******************; Job running using OpenMP.; The number of parallel threads is: 4; ; ******************************************************; ; /home/termo/chargemol_09_26_2017/atomic_densities/ ; ; ******************** TIME CONTROL ********************; Starting format_total_cube_density; ******************************************************; ; inputfile = ""total_density.cube""; parameters; 5.0000000000000000 -12.329260000000000 -10.002257999999999 -9.6799070000000000 ; 131.00000000000000 0.16000000000000000 0.0000000000000000 0.0000000000000000 ; 120.00000000000000 0.0000000000000000 0.16000000000000000 0.0000000000000000 ; 122.00000000000000 0.0000000000000000 0.0000000000000000 0.16000000000000000 ; sum_negative_density= 0.0000000000000000 ; center_nabc =; 80 63 60; 55 63 60; 50 50 60; 50 69 71; 50 69 50; delta_na= 61; delta_nb= 61; delta_nc= 61; ; ******************** TIME CONTROL ********************; Starting check_grid_spacing; ******************************************************; ; The grid spacing in y",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074:586,integrat,integrated,586,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074,1,['integrat'],['integrated']
Deployability,"I'm still confused. You say that `D_in` is the density matrix ""after mixing"". What exactly is ""mixing""? My best guess is that this is related to what we call ""update damping"", but I don't know. I'm only vaguely familiar with plane wave methods, so I'm not qualified to explain what exactly the differences are. What I meant was that ""ten minutes of Google reading has me convinced that the approach to mixing there is very different from quantum chemistry.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065#issuecomment-1783272230:159,update,update,159,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1783272230,1,['update'],['update']
Deployability,I'm still figuring out the caching of Conda-installed dependencies.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444295268:44,install,installed,44,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444295268,1,['install'],['installed']
Deployability,I'm the opposite: Testing intermediate compiler releases is important and the 5 concurrent build limit is unimportant. We're not talking about about an enormous about of time testing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182893146:48,release,releases,48,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182893146,1,['release'],['releases']
Deployability,"I'm trying to remember if there was a reason to duplicate the install path under the stage dir, but I don't think there is. I feel like it was a cmake recommendation, as maybe it could handle non-standard install directories (some stuff in /bin, /usr/bin, or something). At least right now, I can't think of a reason to keep it that way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411824471:62,install,install,62,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411824471,2,['install'],['install']
Deployability,I'm using the latest version according to `conda update psi4`. Is there a dev version for me to use?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344080503:49,update,update,49,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344080503,1,['update'],['update']
Deployability,"I've actually been thinking about Fermi smearing recently, as well, but didn't come to a conclusion which code to put it into; Psi4 was and is one of the options. Psi4 already appears to have support for fractional occupation numbers. The problem about Fermi smearing is that updating the occupation numbers breaks the Pulay DIIS convergence accelerator, which have to be reset at every iteration. Typical choices are to break the optimization into:; - orbital optimization for fixed occupation numbers and; - occupation number update for fixed orbitals.; The first part is already implemented, while the second part would need to be implemented. Again, the problem here is that a given input set of orbitals define a density via occupation numbers which are determined by the corresponding orbital energies, but the orbital energies depend on the density through the Fock matrix. I've seen two different schemes to do this. First, in which the occupation number update is based on a line search between the density matrices with the old and the new occupation numbers, `Dtilde = (1 - damp)*Dold + damp*Dnew`; this I read converges in something like 3-7 iterations, and then you repeat the SCF with the new fixed occupation numbers (I don't know how many cycles in total this will need). There's also a more evolved scheme by Marzari [PRL 79, 1337 (1997)] where one employs non-diagonal occupation numbers in again a two-loop SCF scheme.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797:528,update,update,528,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797,2,['update'],['update']
Deployability,"I've discussed this PR with Yi. This is just to confirm that we want to change the default exch-disp scaling scheme, as the new one appears to be more reliable. Apparently the previous test case didn't break because the exch-disp scheme was manually selected in the test case, rather than utilizing the (updated) default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067:304,update,updated,304,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067,1,['update'],['updated']
Deployability,"I've fixed this, but the changes haven't been synched to psi4public yet. Will do that this week. . Sent from my iPhone. > On May 3, 2015, at 8:00 AM, wpoely86 notifications@github.com wrote:; > ; > psi4 --version gives:; > ; > (gdb) r; > Starting program: /home/ward/tmp/psi4release/build2/bin/psi4 --version; > [Thread debugging using libthread_db enabled]; > Using host libthread_db library ""/lib64/libthread_db.so.1"".; > ; > Program received signal SIGSEGV, Segmentation fault.; > std::ostream::sentry::sentry (this=0x7fffffffcea0, __os=...) at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream.tcc:51; > 51 if (__os.tie() && __os.good()); > Missing separate debuginfos, use: debuginfo-install python-libs-2.7.8-9.fc21.x86_64; > (gdb) bt; > #0 std::ostream::sentry::sentry (this=0x7fffffffcea0, __os=...) at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream.tcc:51; > #1 0x000000390e699869 in std::__ostream_insert<char, std::char_traits<char> > (__out=..., __s=__s@entry=0x2baeb60 "" "", '-' <repeats 71 times>, ""\n"", __n=76); > at /usr/src/debug/gcc-4.9.2-20150212/obj-x86_64-redhat-linux/x86_64-redhat-linux/libstdc++-v3/include/bits/ostream_insert.h:82; > #2 0x0000000001e6bd18 in operator<< std::char_traits<char > (__s=0x2baeb60 "" "", '-' <repeats 71 times>, ""\n"", __out=...) at /usr/include/c++/4.9.2/ostream:535; > #3 Write2Buffer<char*> (Input=<synthetic pointer>, this=0x0) at /home/ward/tmp/psi4release/src/lib/libparallel/PsiOutStream.h:157; > #4 psi::PsiOutStream::Printf (this=0x0, format=format@entry=0x204e9c0 "" "", '-' <repeats 71 times>, ""\n"") at /home/ward/tmp/psi4release/src/lib/libparallel/PsiOutStream.cc:82; > #5 0x00000000008a79bf in psi::print_version () at /home/ward/tmp/psi4release/build2/src/bin/psi4/version.cc:38; > #6 0x00000000008e2d57 in psi::psi_start (argc=argc@entry=2, argv=argv@entry=0x7fffffffd798) at /home/ward/tmp/psi4release/src/bin/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98488186:751,install,install,751,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98488186,1,['install'],['install']
Deployability,"I've got a `fockci` conda package built, so you can try adding it to https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L90 and seeing if your pytest runs in continuous integration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855#issuecomment-644380628:117,pipeline,pipelines,117,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-644380628,4,"['continuous', 'integrat', 'pipeline']","['continuous', 'integration', 'pipelines', 'pipelines-linux']"
Deployability,"I've got all the parts that affect REMP ready. Final stage is to persuade dfocc to converge simple molecules to default tolerance under default conditions :-) . I'll update this PR as the amalgamation, then break off just `occ` changes for you and other to look over, @behnle. A couple easy questions:; * Do you want REMP controlled by `mp_type` (covers all MPn > 2 and ZAPT) or `cc_type` (covers CEPA and CC)? Either is sensible, so your call.; * Any need to future-proof QCVariables with `REMP2` (or `REMP2,3`!)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1198695727:166,update,update,166,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1198695727,1,['update'],['update']
Deployability,"I've just merged the new code in libxc master. Libxc4 is going to be released tomorrow, after which you can switch over.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-331278345:69,release,released,69,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-331278345,1,['release'],['released']
Deployability,"I've just noticed that this is meant for the 1.3 release. I'll have another look at it and will implement both `freeze_core True/False` and `freeze_core 0/-1/-2/-3` options, where `False == 0` witout FC, `True` is the ""smart handling"" (previous rare gas of each atom, taking into account charge), and `-1/-2/-3` would be ""strict"" N-th previous rare gas, ignoring charge but throwing a reasonable error when all electrons are frozen. I will have it done by Monday, if that's OK?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-451187734:49,release,release,49,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-451187734,1,['release'],['release']
Deployability,"I've just tested the following:; * cloned to `/external_disk/gits/psi4`; * from there, configured to `/tmp` via `cmake -S. ... -DCMAKE_INSTALL_PREFIX=/home/auser/installs/psi4 -B/tmp/compile-psi4`; * build in `/tmp/compile-psi4` via `cmake --build .`; * test internal install via `/tmp/compile-psi4/stage/bin/psi4 --test`; * install via `cmake --build . --target install` to `/home/auser/installs/psi4`; * test external install via `/home/auser/installs/psi4/bin/psi4 --test`. That spans an external disk, an account home, and `/tmp/`, and I don't observe the mis-installed quadratures files you report. You are using CMake variables, not environment variables to configure this, right? Do you have a link to the recipe you're using? This is what I use for conda, if that's any help. https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/build.sh#L120",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1215839867:162,install,installs,162,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1215839867,8,['install'],"['install', 'installed', 'installs']"
Deployability,"I've made a new PR #2743 to JUST fix the hang bug, and then we can keep bikeshedding here on what we actually want to do about `RadialGrid` and `SphericalGrid` but have a fix in the codebase that actually stops the nasty hang that took me down this rabbit hole in the first place. - @susilehtola this initializes with an initializer list like you requested; - @hokru this loses NO information over the prior state-of-the-world like you suggested was desirable (if I was reading correctly); - @JonathonMisiewicz I guess you won't like it because spaghetti didn't go away but it's short and sweet, at least. Obviously this patch would undo all of that patch but I think the scope of this discussion exceeded the original PR statement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1273725391:621,patch,patch,621,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1273725391,2,['patch'],['patch']
Deployability,"I've made a nofortran py37 Mac build accessible through `conda create -n amber3 ambertools=20 blas=*=mkl psi4/label/dev::libxc psi4 -c conda-forge -c psi4/label/nofortran -c psi4/label/dev`. It won't get automatically updated regularly, but I can do so upon pinging. Hopefully this'll do for CI. lmk if a different python preferred.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-723231235:218,update,updated,218,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-723231235,1,['update'],['updated']
Deployability,"I've merged all your changes into the development repository. (Except for the grendel changes- there would have been some doubly defined functions, and I think grendel is only intended to work with Python 2.7. There's no test cases for it.) fd-freq-energy is fixed, too. It just needed comments instead of an exit(). Your changes will appear in the next release (and we'll try not to re-introduce the Python 2 syntax), but if it would help your github stats, we can merge your pull requests into the psi4release flat repo. I'll keep your format_kwargs_for_input suggestion in mind. The file written by that has to pass through the inputparser minimally scathed, which might be tricker in binary. I suspect the whole process needs to be rejiggered (for python 3 and other considerations). We've considered setting up nightly builds/tests/valgrinds of the code. Buildbot certainly looks well-suited for this, and I'll bring it up the next time we're contemplating this. One complication for its use from your intent is that the research groups actively stifle variety in architecture/OS/library versions for sanity in running jobs. Most development is done on Mac laptops, and most production runs are on various Linux flavors/intel compilers/Python 2.6/2.7. But automated testing is certainly something we should do, if we can gather a suitable variety of unused boxes. I'm glad to hear you're a convert to psi4. Please do let us know of any other problems you find or features that would be particularly useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20587095:354,release,release,354,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20587095,1,['release'],['release']
Deployability,"I've rebased this so that dev psi4 is working with dev libxc (soon to be libxc v5). Haven't tried fixing up psi for xc changes in the last year+, so there are failing tests at present. * Libxc master is still labeled 4.3.4, which is the same as the very different release branch current psi is accustomed to. Probably the easiest way to work with clones of both projects and be sure of what you're getting is to build libxc master (`-DBUILD_SHARED_LIBS=ON`), install it, edit the `ConfigVersion.cmake` file to `4.4`, go to psi, force uninstall libxc conda package if libxc is in your active env, edit external/upstream/libxc/CM to 4.4, build psi passing `-DLibxc_DIR=/path/to/dir/of/ConfigVersion`, build psi, check you've got the right one with `ldd stage/lib/psi4/core`.; * Errors at present:; ```; 	158 - dft-grad-lr1 (Failed); 	159 - dft-grad-lr2 (Failed); 	160 - dft-grad-lr3 (Failed); 	175 - dft1 (Failed); 	177 - dft1-alt (Failed); 	179 - dft3 (Failed); 	180 - dft-omega (Failed); 	213 - frac-ip-fitting (Failed); 	338 - sapt-dft-lrc (Failed); 	364 - soscf-dft (Failed); 	397 - dft-custom-hybrid (Failed); 	399 - dft-custom-gga (Failed); 	443 - dftd3-energy (Failed); ```; ```; >>> pytest ../tests/pytests/test_dft_benchmarks.py -rws -v -n12; [gw8] [ 5%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[B5050LYP- - ]; [gw7] [ 18%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[MN12-SX- - ]; [gw5] [ 22%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN0- - ]; [gw8] [ 33%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97- - ]; [gw6] [ 36%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-D- - ]; [gw6] [ 43%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-V- - ]; [gw2] [ 47%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN- - ]; [gw8] [ 54%] FAILED ../tests/pytests/test_dft_benchm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105:264,release,release,264,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105,2,"['install', 'release']","['install', 'release']"
Deployability,"I've run full tests with both py27 & py36 and both report the following. The last two are b/c hungarian not installed – not a problem. The first two are b/c MemDFJK isn't handling Cartesian basis sets right. I'm not sure how those other errors you were seeing came about, @schiebermc. Was there a point in this branch where full tests was clean? There's been upheaval to `master`, so we could reason from there. ```; The following tests FAILED:; 	187 - fd-freq-energy-large (Failed); 	212 - mints8 (Failed); 	375 - pywrap-align (Failed); 	376 - pywrap-align-chiral (Failed); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384197920:108,install,installed,108,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384197920,1,['install'],['installed']
Deployability,"I've tried installation on my personal laptop (the issue was in the first place on my desktop at work) and accidentally did something different and it worked, so the issue might be solved. We'll figure out what's different and post the solution or further questions. Thanks for the quick reply.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-437585280:11,install,installation,11,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-437585280,1,['install'],['installation']
Deployability,"I've written a patch to allow for a custom frozen policy that is a bit clunky but safer than `num_frozen_docc` (because it applies per-atom rules, so works properly for cases like SAPT, MBIS_VOLUME_RATIOS, etc) -- once I can be sure this builds in vanilla psi4 (trying now) I will re-run my test jobs and submit the patch. . Still not sure what to do about `scf::HF::compute_fcpi` because I'm still a newbie to the code base (and this patch does NOT fix that issue).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1208404402:15,patch,patch,15,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1208404402,3,['patch'],['patch']
Deployability,IMHO the smartest SCF solver would be the augmented Roothaan-Hall method described in https://doi.org/10.1063/1.2974099 which uses a trust-region method to update the orbitals.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1135#issuecomment-468628046:156,update,update,156,https://psicode.org,https://github.com/psi4/psi4/pull/1135#issuecomment-468628046,1,['update'],['update']
Deployability,"IS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; [Error prints before oeprop]; ```. The other crash I saw was just the input/output from the conda install test. Let me know if you need more information.; -kratz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:9284,install,install,9284,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['install'],['install']
Deployability,"IS_TRANSITION', 'SCF_INITIAL_START_DIIS_TRANSITION', 'SCF_MEM_SAFETY_FACTOR', 'SCF_PROPERTIES', 'SCF_SUBTYPE', 'SCF_TYPE', 'SCHMIDT_ADD_RESIDUAL_TOLERANCE', 'SCREENING', 'SCSN_MP2', 'SCS_CCSD', 'SCS_CEPA', 'SCS_MP2', 'SCS_TYPE', 'SEKINO', 'SEMICANONICAL', 'SF_RESTRICT', 'SIGMA_OVERLAP', 'SIMPLE_STEP_SCALING', 'SINGLES_PRINT', 'SMALL_CUTOFF', 'SOCC', 'SOLVER_CONVERGENCE', 'SOLVER_MAXITER', 'SOLVER_N_GUESS', 'SOLVER_N_ROOT', 'SOLVER_PRECONDITION', 'SOLVER_ROOTS_PER_IRREP', 'SOSCF', 'SOSCF_CONV', 'SOSCF_MAX_ITER', 'SOSCF_MIN_ITER', 'SOSCF_PRINT', 'SOSCF_START_CONVERGENCE', 'SOS_TYPE', 'SPIN_SCALE_TYPE', 'SSAPT0_SCALE', 'SS_E_CONVERGENCE', 'SS_R_CONVERGENCE', 'SS_SCALE', 'SS_SKIP_DIAG', 'SS_VECS_PER_ROOT', 'STABILITY_ADD_VECTORS', 'STABILITY_ANALYSIS', 'STABILITY_AUGMENT_SPACE_TOL', 'STABILITY_CHECK', 'STABILITY_CONVERGENCE', 'STABILITY_MAX_SPACE_SIZE', 'STABILITY_N_EIGENVALUES', 'STABILITY_N_GUESS_VECTORS', 'STEP_TYPE', 'SUMMATION_FIELDS', 'SYMMETRIZE', 'S_CHOLESKY_TOLERANCE', 'S_CUT', 'S_ORTHOGONALIZATION', 'S_TOLERANCE', 'T', 'T2_COUPLED', 'T3_WS_INCORE', 'TDM', 'TDSCF_COEFF_CUTOFF', 'TDSCF_GUESS', 'TDSCF_MAXITER', 'TDSCF_PRINT', 'TDSCF_R_CONVERGENCE', 'TDSCF_STATES', 'TDSCF_TDA', 'TDSCF_TDM_PRINT', 'TDSCF_TRIPLETS', 'TEST_B', 'TEST_DERIVATIVE_B', 'THETA_POINTS', 'THICKNESS', 'THREE_PARTICLE', 'TIKHONOW_MAX', 'TIKHONOW_OMEGA', 'TIKHONOW_TRIPLES', 'TILE_SZ', 'TPDM', 'TPDM_ABCD_TYPE', 'TRANSLATE_PSI4', 'TREE_EXPANSION_ORDER', 'TREE_THETA', 'TRIPLES_ALGORITHM', 'TRIPLES_DIIS', 'TRIPLES_IABC_TYPE', 'TRIPLES_LOW_MEMORY', 'TURN_ON_ACTV', 'T_AMPS', 'T_CUT_CLMO', 'T_CUT_CPAO', 'T_CUT_DO', 'T_CUT_DO_IJ', 'T_CUT_DO_PRE', 'T_CUT_MKN', 'T_CUT_PNO', 'T_CUT_PRE', 'UHF_NOONS', 'UPDATE', 'USE_DF_INTS', 'USE_SPIN_SYM', 'USE_SPIN_SYMMETRY', 'VAL_EX_LEVEL', 'VECS_CC3', 'VECS_PER_ROOT', 'WABEI_LOWDISK', 'WCOMBINE', 'WFN', 'WFN_SYM', 'WFN_TYPE', 'WRITER_FILE_LABEL', 'WRITE_NOS', 'WRITE_OPT_HISTORY', 'WRITE_OPT_RESULT', 'WRITE_TRAJECTORY', 'XI', 'XI_CONNECT', 'ZERO_INTERNAL_AMPS', 'ZETA'].",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:23285,UPDATE,UPDATE,23285,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['UPDATE'],['UPDATE']
Deployability,If @loriab can update current status post-#2655?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1230383695:15,update,update,15,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1230383695,1,['update'],['update']
Deployability,"If I have different compilations such as a Debug and a Release version, how do I make sure the correct PSIDATADIR is being found?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271979443:55,Release,Release,55,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271979443,1,['Release'],['Release']
Deployability,"If I read this correctly, this patch does not specify the auxiliary jkfit and ri basis sets for SAPT calculations for aug-cc-pV5Z or cc-pV5Z, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1559#issuecomment-469008343:31,patch,patch,31,https://psicode.org,https://github.com/psi4/psi4/pull/1559#issuecomment-469008343,1,['patch'],['patch']
Deployability,"If I run `conda list`, it tells me that I installed the `py39h1f3b974_0` NumPy 1.21.0 build from conda-forge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961484165:42,install,installed,42,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961484165,1,['install'],['installed']
Deployability,"If I'm remembering where I left off and performing the diffs correctly, there's no more changes to be made to those 4 array/tensor files in the dfocc saga. And none of the yet-to-be-PRd code uses `davidson`, `cdsyev`, `cdgesv`, `lineq_flin`, or `lineq_pople`. There is new code with `diagonalize`, though, listed below. If the changes in this PR don't interfere with the calls below, or we can work around them, I think we can release the hold and merge this. Thanks for your patience, @TiborGY. ```; # HciA is Tensor2d (or sharedptr to it); cis.cc: HciA->diagonalize(CciA, EciA, cutoff);. # G is Tensor2d; davidson.cc: G->diagonalize(init_dim, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(L, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(init_dim, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(L, alpha, lambda, 1e-12, true);; davidson.cc: G->diagonalize(L, alpha, lambda, 1e-12, true);. # Gamma* and Fock* are Tensor2d; fno.cc: Gamma_->diagonalize(Tvv_, diag_n_, cutoff_, false);; fno.cc: FockfvA->diagonalize(UfvA, eigfvA, cutoff_);; fno.cc: FockvvA->diagonalize(UvvA, eigvvA, cutoff_);; fno.cc: GammaA_->diagonalize(TvvA_, diag_nA_, cutoff_, false);; fno.cc: GammaB_->diagonalize(TvvB_, diag_nB_, cutoff_, false);; fno.cc: FockfvA->diagonalize(UfvA, eigfvA, cutoff_);; fno.cc: FockvvA->diagonalize(UvvA, eigvvA, cutoff_);; fno.cc: FockfvB->diagonalize(UfvB, eigfvB, cutoff_);; fno.cc: FockvvB->diagonalize(UvvB, eigvvB, cutoff_);. # a_opdm, etc. are Matrix; occ_iterations.cc: a_opdm->diagonalize(aevecs, aevals, descending);; occ_iterations.cc: a_opdm->diagonalize(aevecs, aevals, descending);; occ_iterations.cc: b_opdm->diagonalize(bevecs, bevals, descending);. # FockooA, etc. are Tensor2d; semi_canonic.cc: FockooA->diagonalize(UooA, eigooA, cutoff);; semi_canonic.cc: FockvvA->diagonalize(UvvA, eigvvA, cutoff);; semi_canonic.cc: FockooB->diagonalize(UooB, eigooB, cutoff);; semi_canonic.cc: FockvvB->diagonalize(UvvB, eigvvB, cutoff);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2684#issuecomment-1499733138:427,release,release,427,https://psicode.org,https://github.com/psi4/psi4/pull/2684#issuecomment-1499733138,1,['release'],['release']
Deployability,If Intel were to release 18.0.1 for instance?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/931#issuecomment-370890288:17,release,release,17,https://psicode.org,https://github.com/psi4/psi4/pull/931#issuecomment-370890288,1,['release'],['release']
Deployability,"If `/Users/hugomacdermott/Desktop/dev/psi4_build/` is your `CMAKE_INSTALL_PREFIX`, then this is fine, but you can make development a little easier by skipping the `install` step. In your `objdir/` is a `stage/` dir with a complete install that gets updated with every `make`. It's this installation that gets run with `ctest`. I'd seek that, then run the results of `objdir/stage/bin/psi4 --psiapi` and check that the `which` & `python -c ` commands returns paths in `objdir/stage/`. This way there's a quick turnaround between edit/make/test. I don't see anything necessarily wrong with what you posted. The above is just a setup that can reduce confusion if you forget the install step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646:164,install,install,164,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646,5,"['install', 'update']","['install', 'installation', 'updated']"
Deployability,"If anybody needs this immediately, the patch to get threaded gradients working is. ```; --- a/psi4/src/psi4/libmints/mintshelper.cc; +++ b/psi4/src/psi4/libmints/mintshelper.cc; @@ -2469,11 +2469,12 @@ SharedMatrix MintsHelper::three_idx_grad(const std::string& aux_name, const std:; auto idx3p = idx3_matrix->pointer();; #pragma omp parallel for; for (int aux = 0; aux < np; aux++) {; + auto elt = &data[ntri * aux];; for (int p = 0; p < nprim; p++) {; for (int q = 0; q <= p; q++) {; - idx3p[aux][p * nprim + q] = *data;; - idx3p[aux][q * nprim + p] = *data;; - data++;; + idx3p[aux][p * nprim + q] = *elt;; + idx3p[aux][q * nprim + p] = *elt;; + elt++;; }; }; }; ```. I want to make sure that the quick tests pass with threading before submitting the PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2192#issuecomment-863224877:39,patch,patch,39,https://psicode.org,https://github.com/psi4/psi4/issues/2192#issuecomment-863224877,1,['patch'],['patch']
Deployability,If conda is used you will likely need to run this:; `update psi4 libefp libint erd simint pcmsolver chemps2 gdma dkh libxc -c psi4/label/dev` or else; you will get this error: http://forum.psicode.org/t/psi4-error-after-upgrade/662/2. (I happend to run into this today morning),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373034538:53,update,update,53,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373034538,2,"['update', 'upgrade']","['update', 'upgrade']"
Deployability,"If it isn't too late - we've already had one [report](http://forum.psicode.org/t/trouble-with-optimize-function-cbs-extrapolation-and-cfour/1336/3) on the forums about the CFOUR interface bugs fixed in 1577. Can we get those in here as well? It doesn't look like they're in from the compare, and I can't access your release notes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062:316,release,release,316,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-482088062,1,['release'],['release']
Deployability,"If it solves this **and** library detection problems, then let's go for it. I notice that in [3.6](https://cmake.org/cmake/help/v3.7/release/3.6.html) they added support for compiler features also for Intel compilers, but maybe that's not as interesting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281110156:133,release,release,133,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281110156,1,['release'],['release']
Deployability,"If it's been tested to work correctly on ; ```; option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer"" ""-nonsense""); ```; and; ```; ""-nonsense"" ""-fsanitize=address -fno-omit-frame-pointer""); ```; then I really like @robertodr 's patch. Do you think the `unset(CMAKE_REQUIRED_FLAGS)` needs to be `CACHE`? I don't understand these things; just know that they can go very wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343300716:329,patch,patch,329,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343300716,1,['patch'],['patch']
Deployability,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235914479:17,install,installing-untested-prog,17,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479,5,['install'],"['install', 'installed', 'installing', 'installing-untested-prog']"
Deployability,"If someone can confirm what the units are, or how they should be described,; I'm happy to update the docs and the code. On Mon, Oct 2, 2017 at 7:31 AM, Daniel Smith <notifications@github.com>; wrote:. > Sounds like a good plan, looks like the units should be in natural units; > since we are not applying conversion factors. @fevangelista; > <https://github.com/fevangelista> may be a better person to comment.; >; > 1. Docs for cube prop can be found here; > <https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/cubeprop.rst>; > .; > b) Looks like editing these keys or lines here; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libcubeprop/cubeprop.cc#L202>; > will change the name header.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/815#issuecomment-333534925>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ABxha7tvsa0oDGt2ZE-ABO63Yg54lRgqks5soOW8gaJpZM4Ppvfg>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/815#issuecomment-333552997:90,update,update,90,https://psicode.org,https://github.com/psi4/psi4/issues/815#issuecomment-333552997,1,['update'],['update']
Deployability,"If the argument to psi4.set_memory() is reduced to 2 GB (forcing the disk algorithm), the MKL install gives an energy for wB97X-D3BJ/6-31G* of -1964.4297 Hartree, which is reasonable. So I continue to believe that the in-core algorithm is implicated, or at least magnifying an existing problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-900713515:94,install,install,94,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900713515,1,['install'],['install']
Deployability,"If the latest patches work, ConfigMath should never again find a conda MKL (which probably means I should revert #611) because it can't find a `mkl.h` at the same MKL_ROOT. For all of us with intel compilers and mkl, this doesn't change a thing because ConfigMath was always finding our intel installations, never conda (the final lib may have shown up as linked to conda, but that's a `rpath`, not a ConfigMath, issue). But in cases w/o an intel installation and w/ a conda installation, ConfigMath should no longer settle upon conda mkl_rt.so because there's no associated `mkl.h`. Instead, should give up on MKL and proceed to OpenBLAS, ..., SYSTEM_NATIVE.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-279088836:14,patch,patches,14,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279088836,4,"['install', 'patch']","['installation', 'installations', 'patches']"
Deployability,"If the tests can be fixed and we can go back to testing all test cases; soon, that's fine. If there are persistent problems then the troublesome; tests could be removed from the list temporarily while they get patched up. On Tue, Nov 22, 2016 at 3:37 PM, Lori A. Burns notifications@github.com; wrote:. > At the moment, just quicktests (~118) because cc14 and mints9 are still; > failing. The latter is my fault, the former is a mystery. Failures make the; > conda build fail, so the test suite needs to be clean before go back to; > running all.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262358481, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdm1_eSI8ptMLf1jUlyVER46R1xZpks5rA1J3gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262370710:210,patch,patched,210,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262370710,1,['patch'],['patched']
Deployability,"If you are doing an update of the documentation for Molecule.Z, it might be useful to consider possible user confusion between Molecule.Z (capital, gives the charge) and Molecule.z (lowercase, gives the z-coordinate). Both return floats, so no type mismatch, and it's not an obvious typo visually. Maybe a warning in the API would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363502006:20,update,update,20,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363502006,1,['update'],['update']
Deployability,"If you like, we have conda boost packages for py3 in the omnia suite https://github.com/omnia-md/conda-recipes, https://anaconda.org/omnia/boost/files. Feel free to copy / take. Note that if yoy use boost 1.58.0, there is a bug in the py3 support that you need to patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/111#issuecomment-122005457:264,patch,patch,264,https://psicode.org,https://github.com/psi4/psi4/issues/111#issuecomment-122005457,1,['patch'],['patch']
Deployability,"If you update your code (`git pull origin master` if you direct cloned or `git pull upstream master` if you forked, then cloned, then added a remote; look at `git remote -v` to see which is pointing to psi4/psi4), no `mpmath` should now be needed. Remove your `<objdir>/` and reissue `cmake` and recompile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382411619:7,update,update,7,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382411619,1,['update'],['update']
Deployability,"If you want to try the new compilers version, create a new environment `conda create -n psi4 python=3.6 -c psi4/label/agg` (only things from psi4 channel in `conda list` should be psi4, libint, libxc). Should be safe to install jupyter in the same env. Strongly suggest jupyter (and numpy) from defaults (where they're well into the process of rebuilding everything with the new compilers), not conda-forge (where they're considering how to use them). I've been getting psi4 to build this way for less than a day, so it's very much a trial package. If that doesn't work (and I won't be able to test it myself until Monday), no, there's nothing actionable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345422371:220,install,install,220,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345422371,1,['install'],['install']
Deployability,"If you would, @robertodr, please go over this file and see if anything can be updated or elaborated. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/pcmsolver.rst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988#issuecomment-385086549:78,update,updated,78,https://psicode.org,https://github.com/psi4/psi4/pull/988#issuecomment-385086549,1,['update'],['updated']
Deployability,"If you're gonna change things with CMake, I've got two items on the wish lists:; - respect `-DCMAKE_C_FLAGS` (and CXX). If CMake gets flags, they should be used (and not ignore as currently happens); - Make it possible to build plugins after installing PSI4. Currently, the `--new-makefile` generate a makefile with points to the build dir of psi4 (instead of install). We have to patch and work around that every time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230762763:242,install,installing,242,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230762763,3,"['install', 'patch']","['install', 'installing', 'patch']"
Deployability,"If your final target is Linux, I'd advise starting there now, as it's going to have more software and be better behaved than Windows. If you do continue with Win, I think there was a geometric-on-win bug that was patched this year, so make sure you're getting the `_1` build https://anaconda.org/conda-forge/geometric/files",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1487053389:213,patch,patched,213,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1487053389,1,['patch'],['patched']
Deployability,"Im still not completely sure that there is a way to bridge the two. Ultimately the modification in-place leads to quite a few errors; however, the Psithon API make the in-place a logical operation. It would be better to do something like:; ```; new_mol = molecule.update({""var1"": 5, ""var2"": 6}); ```; or something similar. Getting that across in something like Psithon would be difficult I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332298418:264,update,update,264,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332298418,1,['update'],['update']
Deployability,"In cases where reference values are not matched perfectly (but the test should pass) is it better to loosen the comparison or update the reference value. I assume updating the reference value is the way to go but I want to have some record of asking before I start slightly changing reference values. Secondarily, should the reference values be updated in general at some point so that users don't stumble across an instance where the value is slightly off and wonder why?. Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. `atol = 0.001` the difference is `~ 0.0017`. These tests are using the default `qchem` convergence criteria ~ `3e-4` max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262512828:126,update,update,126,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262512828,2,['update'],"['update', 'updated']"
Deployability,"In general your install structure should be the same as the source ; structure. I would recommend installing to include/psi4/src/bin/ or ; include/psi4/src/lib/. On 05/11/2016 03:53 AM, Lori A. Burns wrote:. > @jturney https://github.com/jturney , @edeprince3 ; > https://github.com/edeprince3 , @ryanmrichard ; > https://github.com/ryanmrichard, @dgasmith ; > https://github.com/dgasmith should look over a0a8c2b ; > https://github.com/psi4/psi4/commit/a0a8c2b644de0380d0fa5339f47731a362d8a02e ; > and see if it's ok. Basically, we were installing headers ; > |src/lib/libmodule/_.h| to |includes/psi4/libmodule/_.h|, which is ; > fine. But then we were installing headers |src/bin/module/_.h| to ; > |includes/psi4/libmodule/_.h|, which meant that a header couldn't be ; > referred to through the same path from both a source and installed ; > file tree. Cue problems for compiling plugins against both.; > ; > This commit installs bin headers to |includes/psi4/module/*.h|. Then ; > since the intermediate lib or bin dir is gone, can't do |#include ; > <../bin/fnocc/blas.h>| anymore, so added the bin dirs to the CMake ; > includes path. Then also installed |FCMangle.h| since Fortran plugins ; > needed it.; > ; > The above gets Eugene's v2rdm built for me. Have I introduced any bad ; > practices?; > ; > @dgasmith https://github.com/dgasmith , contrary to what I wrote ; > you, please hold off on merging this PR until this issue gets resolved; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4/pull/376#issuecomment-218387805",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/376#issuecomment-218519582:16,install,install,16,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218519582,7,['install'],"['install', 'installed', 'installing', 'installs']"
Deployability,"In response to @loriab 's call for issues, I'm going to bump this thread. Moving forward to a massively parallel program something has to be done about the way we handle files. You have to remember, as Psi4 stands, each MPI process spawns its own files. For massively parallel runs this is too much. In my experience most supercomputer have network mounted disk and the `psi.<pID>.clean` files alone are hammering it. I've gotten lucky in that I have access to a supercomputer that has disk on each node, so I've been able to generate data, but long term I don't think we want to limit ourselves to supercomputers with local disk. I think we need a whole new way of handling files, in particular I'd like to see:; - Less files. Things should only be written to disk in the event of checkpointing or because the value simply does not fit in memory.; - Virtual files. The reality is the previous bullet is probably going to be difficult to obtain in practice, which is where support for so-called virtual files comes in. Basically our file manager would decide whether your file is going to disk or memory and then do the above for you, but as far as your code is concerned you're reading from an actual file. Thus you get to be agnostic to the details.; - Different numbering/naming scheme. PID is not a great naming scheme as the possibility of a naming conflict is pretty great (see my last update to this thread).; - The MPI standard also covers disk I/O we should adhere to that...; - Exceptional error messages/detection. There are a bajillion reasons why file I/O can't occur.; - Compression. I don't think we compress our files at all, do we?. For the record HDF5 supports virtual files, parallel I/O through MPI, and compression. Seeing whether it meets our file needs overall is on my todo list, but if someone else wants to take a stab at it in the meantime go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/81#issuecomment-119230390:1392,update,update,1392,https://psicode.org,https://github.com/psi4/psi4/issues/81#issuecomment-119230390,1,['update'],['update']
Deployability,"Independent of the options issues -- should something be patched/changed such that if the user/a program/etc passes a nonsense `num_frozen_docc`, the program gives a sensible error rather than segfaulting?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1193156348:57,patch,patched,57,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1193156348,1,['patch'],['patched']
Deployability,"Inside my `p4env` environment, I ran `conda install -c defaults jupyter` and `conda install -c defaults ipykernel`. I also separately ran `conda install nb_conda_kernels` to make sure that `jupyter` could see all my `conda` kernels (from [here](https://github.com/jupyter/jupyter/issues/245)), although that just cluttered things in notebook GUI. I'm getting the same kernel crash. Here's a new `conda list`:; ```; bleach 2.0.0 py36_0 conda-forge; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; dbus 1.10.22 h3b5a359_0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; entrypoints 0.2.3 py36_1 conda-forge; erd 3.0.6 1 psi4/label/dev; expat 2.2.5 he0dffb1_0 ; fontconfig 2.12.1 3 ; freetype 2.5.5 2 ; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; glib 2.53.6 h5d9569c_2 ; gmp 6.1.2 0 conda-forge; gst-plugins-base 1.12.2 he3457e5_0 ; gstreamer 1.12.2 h4f93127_0 ; hdf5 1.8.17 11 conda-forge; html5lib 0.999999999 py36_0 conda-forge; icu 54.1 0 ; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36hbf841aa_0 ; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; ipywidgets 7.0.0 py36h7b55c3a_0 ; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jinja2 2.9.6 py36_0 conda-forge; jpeg 9b h024ee3a_2 ; jsonschema 2.6.0 py36_0 conda-forge; jupyter 1.0.0 py36h9896ce5_0 ; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_console 5.2.0 py36he59e554_1 ; jupyter_core 4.3.0 py36h357a921_0 ; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4 ; libgcc 7.2.0 h69d50b8_2 ; libgcc-ng 7.2.0 h7cc24e2_2 ; libgfortran 3.0.0 1 ; libiconv 1.14 0 ; libint 1.2.1 1 psi4/label/dev; libpng 1.6.32 hda9c8bc_2 ; libsodium 1.0.10 0 conda-forge; libstdcxx-ng 7.2.0 h7a57d05_2 ; libxc 3.0.0 6 psi4/label/dev; libxcb 1.12 h84ff03f_3 ; libxml2 2.9.4 0 ; markupsafe 1.0 py36_0 conda-forge; mistune 0.8 py36_0 conda-forge; mkl 2018.0.0 h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345317385:44,install,install,44,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345317385,3,['install'],['install']
Deployability,"Installed changes:; - `prefix/include/herebeheaders.h` --> `prefix/include/psi4/herebeheaders.h`; - `share/psi/python` --> `share/psi4/python`, etc. Then, Jet, you're also proposing the following?; Source changes:; - `top-source-dir/lib/python` --> `top-source-dir/share/psi4/python`. I agree the `lib` is misleading, but two directory levels is a lot just to match names. I'd leave it as is or move to `share`. That won't affect the public interface, so easier to change in future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173956800:0,Install,Installed,0,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173956800,1,['Install'],['Installed']
Deployability,"Installed changes:; - agreed; - agreed (yes, that's what I meant to write). Source changes:; The extra psi4 dir in source wouldn't be expected in includes (i.e., we're not moving `top-source-dir/include/` to `top-source-dir/include/psi4` so I don't see that the shareables folder in source needs the namespace protection either. And setting `PSIDATADIR` is a slightly advanced topic. If the concensus is for mirroring the dir structure of shareables, I'm fine with it, but I mildly favor as is or `share`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173967734:0,Install,Installed,0,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173967734,1,['Install'],['Installed']
Deployability,"Installing `networkx` fixes `pywrap-align` and `pywrap-align-chiral`. However, the other tests still fails for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403465760:0,Install,Installing,0,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403465760,1,['Install'],['Installing']
Deployability,"Installing `share/` files into `<builddir>/stage` is normal from https://github.com/psi4/psi4/blob/master/psi4/CMakeLists.txt#L354-L358 . If the `%%DATADIR%%` is literal, could you be not getting `CMAKE_INSTALL_DATADIR` set correctly from `GNUInstallDirs`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214284697:0,Install,Installing,0,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214284697,1,['Install'],['Installing']
Deployability,"Installing user add-ons into the normal tree would be alarming for things like basis sets into `share/psi4/basis` because that could deviously rename common data. But talking it over with a few people, we think that the normal installation tree is fine for conda packages with binaries going to `bin` and python packages going to `lib/python-2.7/site-packages`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229#issuecomment-176997138:0,Install,Installing,0,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-176997138,2,"['Install', 'install']","['Installing', 'installation']"
Deployability,"Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; mak",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4677,Install,Installing,4677,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Install'],['Installing']
Deployability,"Intel 16.0.2 compilers with MKL 11.3.2 seems to work fine on the i7-5930 with parallel enabled. Not sure whether it was the compiler or the MKL upgrade that fixed it, but either way, I can run my calculations again. Yay. I'm going to chock this up to a compiler bug and close the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/209#issuecomment-200522653:144,upgrade,upgrade,144,https://psicode.org,https://github.com/psi4/psi4/issues/209#issuecomment-200522653,1,['upgrade'],['upgrade']
Deployability,Intel released 2016 update 2 today (16.0.2) and it resolves this header file issue. We may need to note this someplace for others to find: Intel C++ version 16.0.0 and 16.0.1 with GCC 5 C++ standard library has problems. Either use Intel 16.0.0 and 16.0.1 with pre-GCC 5 or update your Intel compiler to 16.0.2. Closing the issue as it was a compiler and not a Psi4 bug.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262#issuecomment-185960794:6,release,released,6,https://psicode.org,https://github.com/psi4/psi4/issues/262#issuecomment-185960794,3,"['release', 'update']","['released', 'update']"
Deployability,"Interesting stuff. As for the Apple M1, I guess it depends whether we'll be pushing out a released and tested binaries for Apple M1 before clang gets around fixing the defaults, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836:90,release,released,90,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836,1,['release'],['released']
Deployability,Intriguing. I had the reverse problem last week where a MKL-linked numpy was inoperable in psi4 when an openblas was installed in same conda env. I'll see about recreating your env locally.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311490565:117,install,installed,117,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311490565,1,['install'],['installed']
Deployability,"Is it possible to use `options=None` in the class definition? Then the options are mostly not required at all in the current commits above. Yes, I implemented the Client so that you always can calculate the current energy/force of the initialised molecule, which enables testing of the passed on configuration. When ipi is available, it will also be used for communicating back to the driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806:296,configurat,configuration,296,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806,1,['configurat'],['configuration']
Deployability,"Is that the 0.2.278 from 9 hours ago or 20 hours ago? The earlier one I can believe has that problem (as does 0.2.279 if you had caught it before I erased it. But the 278 that's available now I thought was ok. (Note that if you had downloaded the earlier 278, you would need to `conda remove psi4`, `rm` the packages from `miniconda/pkgs`, and `conda install psi4` to force the download and installation of the new 278.). The `libifport` error arises when trying to mix in Fortran code (for dkh) with static compilation (for conda). They're not wanting to play nicely together: https://public.kitware.com/Bug/bug_relationship_graph.php?bug_id=13249&graph=dependency . I can hand-link a mostly static exe but haven't gotten the build system to do it yet. Please keep on reporting these library errors. I really thought the current conda package should be clean (if Fortran-less).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126180494:351,install,install,351,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126180494,2,['install'],"['install', 'installation']"
Deployability,"Is there a 0.4.0 already out? I can't see one tagged here... When you make a new stable release, I'll update the Fedora packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182755475:88,release,release,88,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182755475,2,"['release', 'update']","['release', 'update']"
Deployability,"Is there a release date for 1.1? :). Cc @mj-harvey. On Apr 28, 2017 01:09, ""Lori A. Burns"" <notifications@github.com> wrote:. > Since Psi4:; >; > - is primarily a shared library / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297864305:11,release,release,11,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305,2,['release'],['release']
Deployability,"Is there a way to disable libxc in psi4-1.2, maybe with minimal patching? As this issue does not look like it is going to be addressed (by the libxc maintainers) in due short, it'd be good to be able to disable libxc entirely if still possible, or would that mean no DFT at all?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450760485:64,patch,patching,64,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450760485,1,['patch'],['patching']
Deployability,"Is this PR still relevant? We're already using a released version of LibXC, no?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-529100279:49,release,released,49,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-529100279,1,['release'],['released']
Deployability,"Is this on cerebro? We discussed this issue some time ago, since it's the same hiccup that hinders compilation of PCMSolver on cerebro. Intel relies on the standard headers from some installation of GCC. The only non-conflicting GCC on cerebro is 4.4.6 which implemented just those 3 overloads for `std::to_string`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/220#issuecomment-173222692:183,install,installation,183,https://psicode.org,https://github.com/psi4/psi4/issues/220#issuecomment-173222692,1,['install'],['installation']
Deployability,Is this the same issue as in #1724? You can try your own workaround or update to the development version.; This has been addressed in PR #1725.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1960#issuecomment-660487256:71,update,update,71,https://psicode.org,https://github.com/psi4/psi4/issues/1960#issuecomment-660487256,1,['update'],['update']
Deployability,It appears the problem is that `Tensor1d` (used e.g. in `Tensor2d::write_symm()`) uses `int` for the size--I'll have to update the whole class.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562356814:120,update,update,120,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562356814,1,['update'],['update']
Deployability,"It depends on which ones you're targeting and how you're getting psi4. If you're building from src, you'd `-D ENABLE_<addon>=ON` as described here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L69-L108 . (Note that ""addon""s is what you'd want to search; ""plugins"" are different in psi4.). If you're using the conda binary, it varies by the nature of the addon. Addons that have to be enabled/disabled at psi4-build-time tend to be already in the psi4 binary. Unfortunately CheMPS2 is one that hasn't been transitioned to conda-forge yet due to license issues. You could grab psi4 v1.7 to use it. Ambit is available to install from c-f. Other addons that psi4 doesn't need to know about at compile time, like cppe or dftd3, can be conda installed at any time. That's the general picture. I can probably help on specifics if you run into difficulties.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087:628,install,install,628,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087,2,['install'],"['install', 'installed']"
Deployability,"It does work if you copy the PG directly like your update has done. Since this seems kosher and we have explained away the `update_geometry` issues I think everything is fine. So if you can replace those lines and run it through travis id say we have covered the primary issue. If it doesn't fix everything we can come back to it, but at least we can make some improvement.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-193482535:51,update,update,51,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-193482535,1,['update'],['update']
Deployability,"It hits the troublesome geometry a couple optimization iterations in, so not guaranteed. But given that this error hasn't popped up for 10 years, micro-wiggle is a good bet. btw, `conda install psi4 -c psi4/label/agg` will get you a working `-ng`-compiler package at the moment. Though that's my sandbox channel and so the latest package mayn't always be working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-380151298:186,install,install,186,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-380151298,1,['install'],['install']
Deployability,"It looks like [SL6 was release back in 2011 and is going to be end-of-life later this year](https://en.wikipedia.org/wiki/Scientific_Linux). Upgrading to SL7 (released 2014) should give the sys admins a familiar environment and it looks like it comes with glibc 2.17, which is known to work for Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792#issuecomment-607278556:23,release,release,23,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607278556,2,['release'],"['release', 'released']"
Deployability,"It looks like `setup --accelerate` sets accelerate and turns off auto detecting blas/lapack. From all reports, accelerate is what is detected automatically with a plain installation. I guess the only use for the flag is when on a Mac there are multiple blas/lapack installations findable, and you want to quickly force the framework. I don't know any such complicated Macs in the connection, except perhaps this one at VaTech that inspired the flag. So how about (i) reclosing the issue, since accelerate is auto-detected, (ii) leave the `--accelerate` flag in setup for a while since it's doing no harm, (iii) stop actually passing that flag to setup on Macs and check the `otool -L`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-122294961:169,install,installation,169,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122294961,2,['install'],"['installation', 'installations']"
Deployability,It looks like one of the three test configurations failed due to a timeout. The other two passed fine. I think this is ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-304529137:36,configurat,configurations,36,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304529137,1,['configurat'],['configurations']
Deployability,It might well be you've downloaded the stable version (psi4 version 1.1) and the mid-bond functionality might have been introduced afterwards (so it's available only in the dev releases). What does `psi4 --version` return?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373018664:177,release,releases,177,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373018664,1,['release'],['releases']
Deployability,It seems so ... actually already in the first `conda install` it does not pick up the hdf5 from the psi4 channel but uses a default one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598821323:53,install,install,53,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598821323,1,['install'],['install']
Deployability,"It seems that I am having some trouble with PSIO. . ```; Traceback (most recent call last):; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File; ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 4005, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/Users/kevinhannon/Programs/psi4_test_cmake/Build/stage/Users/kevinhannon/Programs/psi4_test_cmake/Install/bin/../lib//psi4/driver/procedures/proc.py"", line 1306, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: PSIO Error; ```. This error is happening randomly. I had to run the ctest -R ""ao"" a few times to get this error. . @dgasmith, what should I change in proc.py for detcas if I want the JK object to handle the initialization of the integrals?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-261257394:198,Install,Install,198,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-261257394,4,['Install'],['Install']
Deployability,It should never be `.../psi4/share` that is running. That's source code. When running tests in `objdir` it should be the staged one and when installed it should be the installed version.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240470127:141,install,installed,141,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240470127,2,['install'],['installed']
Deployability,"It shouldn't take a bit of time to execute. The implementation symbols are currently not exported but will be from the PR. I just want to expose the interface and not the implementation. Ultimately, I will move to keep the implementation header files from being installed as the interface headers are the only ones that should be used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444183208:262,install,installed,262,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444183208,1,['install'],['installed']
Deployability,"It took me getting flu to find the time to look into this, and here's my initial finding. If I optimize the geometry and dump it into an input file; ```; molecule h2o {; O 0.000000000000 -0.000000000000 0.063771204693; H -0.000000000000 0.748825894352 -0.506047648051; H 0.000000000000 -0.748825894352 -0.506047648051; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; I get ; ``` No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.945 2519.217; 2 4142.103 5959.555; 3 4237.372 6096.625; ```; If I permute the first two rows of the geometry, per the bug report, I get:; ``` No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; This is clearly wrong, but it does at least mean that the hessian code is for the most part correct. I'm trying to figure out where the atom and/or basis function ordering issue is introduced and hope to have a patch soon. Thanks for the report.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/901#issuecomment-360894371:1009,patch,patch,1009,https://psicode.org,https://github.com/psi4/psi4/issues/901#issuecomment-360894371,1,['patch'],['patch']
Deployability,"It was in a local install, so I was able to modify that file; the code is now running as expected on this finicky system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126#issuecomment-1911070621:18,install,install,18,https://psicode.org,https://github.com/psi4/psi4/issues/3126#issuecomment-1911070621,1,['install'],['install']
Deployability,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194954608:31,install,install,31,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608,1,['install'],['install']
Deployability,"It would be nice if you could add the code. I don't need to show up as a contributor (as the changes are based on code in the autocmake github repo). But can you please wait before adding the code, until we could verify that the compilation with OpenBLAS works. After getting the error, I have run make a second time and then I did not get the error any more. I have therefore deleted the installation and redid it from scratch. This time, I am running make serially. The compilation is still ongoing. I will provide you an update once it finished and after having verified that the code is properly linked against OpenBLAS. Best regards. Sam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274828765:389,install,installation,389,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274828765,2,"['install', 'update']","['installation', 'update']"
Deployability,"It'd be helpful to see the output from your configuration step. That is, the `cmake -S. -Bobjdir` result. Are you seeking to use other than MKL?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1619297631:44,configurat,configuration,44,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1619297631,1,['configurat'],['configuration']
Deployability,"It's all conda, but I can do an entire fresh install just to test this. On Oct 11, 2017 21:07, ""Lori A. Burns"" <notifications@github.com> wrote:. > See if you can check that a proper gcc is being loaded for psi4/core.so.; > That cxx11::basic_string<char, std::char_traits brings to mind the; > pre-/post-gcc-5.1 string issue. Is anything here compiled yourself or is it; > all conda?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/820#issuecomment-335915587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQolTJ-EViA2tp1K0qf6SdZIdHlKOks5srRHYgaJpZM4P19oY>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820#issuecomment-335970314:45,install,install,45,https://psicode.org,https://github.com/psi4/psi4/issues/820#issuecomment-335970314,1,['install'],['install']
Deployability,"It's been in since late January. But the nightly conda build machinery is broken until I get some time to universally update to the new conda-build compilers (prototyped in the fall that they do work with psi) which won't be until after ACS. As far as stable release, the fix'll be in the next one, 1.2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-370274485:118,update,update,118,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-370274485,2,"['release', 'update']","['release', 'update']"
Deployability,"It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`. There's some additional notes in #2965 in case helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430:52,install,installation,52,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430,3,['install'],"['install', 'installation', 'installed']"
Deployability,"It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (with",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98498738:348,release,release,348,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738,4,"['release', 'update']","['release', 'releases', 'updates']"
Deployability,"I’m still suspicious of those blas/pin/implementation combos up in the first block. Psi really has no constraints on numpy. The >=0.12 was just there to settle a mkl problem iirc. I wonder what installing Psi4, then force removing numpy, then trying an ambertools install would do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-718347497:194,install,installing,194,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-718347497,2,['install'],"['install', 'installing']"
Deployability,I’m traveling so I’ll see if I can update the libxc PR tonight. Which libxc (3 or 4) are each of you packagers actually aiming for? We’ve been trying to stay up to date with upstream dependencies and maximize functionals provided.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451021739:35,update,update,35,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451021739,1,['update'],['update']
Deployability,"I’ve hit that myself. Add to the cmake command -DENABLE_simint=OFF. I’ll have another go at the simint ppl to get them to release a tarball with simint am8 so we can build both at once. Or, having pointed cmake toward an am8 libint prebuilt, reduce your min requested to 7.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-436999448:122,release,release,122,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-436999448,1,['release'],['release']
Deployability,"Just a heads-up: you don't need to close the PR and reopen it to apply fixes. The request is automatically updated as you add features / fixes, until it gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/224#issuecomment-175864194:107,update,updated,107,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175864194,1,['update'],['updated']
Deployability,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-278105814:14,update,update,14,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814,1,['update'],['update']
Deployability,Just a note to whomever that I will use this all-but-done update as soon as we can get it merged. Let me know if I can help. Whose problem is the dfocc one to solve?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/844#issuecomment-346040344:58,update,update,58,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-346040344,1,['update'],['update']
Deployability,"Just a quick note on the failing tests so I don't forget: `dft-smoke` fails because it includes DSD-PBEP86 (which was parametrised for -D2, now is parametrised without it); `dftd3-energy` fails because of `dashparams['sr8']` not being passed in. It would make sense to generalise that interface somewhat - set defaults and then update from the passed-in dict.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-370332915:328,update,update,328,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-370332915,1,['update'],['update']
Deployability,"Just a quick update - I'm making a little bit of progress. I hacked my local branch to get valgrind info from the test machines. Here's the pertinent section of the resulting error:. `vex amd64->IR: unhandled instruction bytes: 0xF 0xB 0x89 0xD1 0x48 0x89 0x45 0xC8; ==20864== valgrind: Unrecognised instruction at address 0x22fd55c.; ==20864== at 0x22FD55C: psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::string, std::string, char const*) (buf4_sort.cc:1977); ==20864== by 0x191AEB0: psi::cctransort::sort_tei_rhf(boost::shared_ptr<psi::PSIO>, int) (sort_tei_rhf.cc:35); ==20864== by 0x18F8C81: psi::cctransort::cctransort(psi::Options&) (cctransort.cc:472); ==20864== by 0x1434733: py_psi_cctransort() (python.cc:497); ==20864== by 0x144C47D: _object* boost::python::detail::invoke<boost::python::to_python_value<double const&>, double (*)()>(boost::python::detail::invoke_tag_<false, false>, boost::python::to_python_value<double const&> const&, double (*&)()) (invoke.hpp:75)`. I'm digging around now, because I can't see anything obviously wrong in those lines of code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178350753:13,update,update,13,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178350753,1,['update'],['update']
Deployability,"Just observed a separate issue, commenting here to raise awareness before merge at the advice of @loriab. . If the OPTKING bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; Current energy : -154.6485078443. Energy change for the previous step:; Projected : -0.0449999979; Actual : 0.0000000000; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; the error isn't translated to a Py-side exception, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` exception, so that the output does not fly under the radar as successful. **UPDATE**: Migrated this comment to #800 to expedite the merging of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/798#issuecomment-330583293:996,UPDATE,UPDATE,996,https://psicode.org,https://github.com/psi4/psi4/pull/798#issuecomment-330583293,1,['UPDATE'],['UPDATE']
Deployability,"Just out of interest, does `dft-bench-ionisation` (where the wB97X-D functional is a good canary) pass with your ICC + MKL build?. With GCC, I had success with netlib and blis - OpenBLAS seems to be hit-and-miss, and I didn't try with MKL. However, as I mentioned before, the `dft-custom-gga` always passes for me, and it's the other test that fails.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397376716:90,canary,canary,90,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397376716,1,['canary'],['canary']
Deployability,"Just to add to everyone else's guidance. Yes you can use cartesian coordinates. Just note that to update the geometry,without using a zmatrix, you'll want to use the `ranged_dihedral` keyword instead of `frozen_dihedral`. You can still freeze dihedrals with cartesian geometries, they just can't be set directly in the input file. `ranged_dihedral` sets a target value for the optimizer to optimize towards. . ```import psi4 ; ; hooh = psi4.geometry(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """""") ; ; psi4.set_options({ ; ""basis"": ""cc-pvdz"", ; ""intrafrag_step_limit"": 0.1, ; }) ; ; dihedrals = [100, 110, 120, 130, 140, 150] ; PES = [] ; ; for phi in dihedrals: ; psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ; E = psi4.optimize('scf', mol=hooh) ; PES.append((phi, E)) ; ; print(""\n\tcc-pVDZ SCF energy as a function of phi\n"") ; for point in PES: ; print(""\t%5.1f%20.10f"" % (point[0], point[1])) ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821:98,update,update,98,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821,1,['update'],['update']
Deployability,"Just to let you know, I updated to Mac OS Sierra and the new build system works great with Apple Clang 8.0 right out of the box.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249650815:24,update,updated,24,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249650815,1,['update'],['updated']
Deployability,"Just to make sure I understand how the library works:; During the installation procedure, there will be a `trex.json` file added. The contents of this file change the _groups_ and _variables available within each group_. (For Psi devs, this is equivalent to libpsio file and libpsio entry name.) So by editing the file and then re-compiling (`make`, `make check` and then `make install`?), we can edit the entries available to `trexio`. Is that all right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466:66,install,installation,66,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466,2,['install'],"['install', 'installation']"
Deployability,"Just to make sure, you have also installed `ipykernel` into the environment, and added that kernel into your notebook spec using something like [this guide](https://medium.com/@nrk25693/how-to-add-your-conda-environment-to-your-jupyter-notebook-in-just-4-steps-abeab8b8d084), correct? And you're sure your jupyter is loading the correct kernel (i.e. the correct conda env)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947731624:33,install,installed,33,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947731624,1,['install'],['installed']
Deployability,"Just tried a water with direct scf in ERD, and it worked fine, including 2e- energy. This was a while ago in terms of how ERD integrates. And when ERD is expected to work (essentially scf_type=direct only) is now documented. So closing. Please reopen if reappears.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/173#issuecomment-272780463:126,integrat,integrates,126,https://psicode.org,https://github.com/psi4/psi4/issues/173#issuecomment-272780463,1,['integrat'],['integrates']
Deployability,Just updated my code with shell pair screening for P and Q.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1043327258:5,update,updated,5,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1043327258,1,['update'],['updated']
Deployability,"Just updated the last commit to fix `mintshelper_` copying. For the shallow copy, the copy and the original use the same `mintshelper_`, so all the `set_basisset` I was doing was wasted lines. For the deep copy, I just needed to copy from the original `mintshelper_`, not the new one. Follow-up PR should have a test for this, as I need some other infrastructure in place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1970#issuecomment-664461196:5,update,updated,5,https://psicode.org,https://github.com/psi4/psi4/pull/1970#issuecomment-664461196,1,['update'],['updated']
Deployability,"Kinda surprised they went with PyPy over C IR support since the latter is much more useful for JITs in general. This could break a few Python-side GC things, but we can patch those up if they occur. Still, will be great to have a stable PyBind11 version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/557#issuecomment-271014184:169,patch,patch,169,https://psicode.org,https://github.com/psi4/psi4/pull/557#issuecomment-271014184,1,['patch'],['patch']
Deployability,"L Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - FNO-DF-CCSD(T)/cc-pVDZ: **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; set_cholesky_from('CC_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: FNOCC requires SCF_TYPE = DISK_DF; ```; 7. DFOCC (OMP2/cc-pVDZ): **memDF FAILED** (diskDF passed all); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:7239,install,install,7239,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['install'],['install']
Deployability,LGTM. Did you want to update OEProp Python side or wait for another update?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259024437:22,update,update,22,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259024437,2,['update'],['update']
Deployability,"L_PREFIX} by makefiles written by cmake.; You don't need to use it in your code, it always works. > You need to build psi4 with the env variable DESTDIR=/tmp/path-to-onstall-psi4-to.; /tmp/path-to-onstall-psi4-to should end up with usr and under it there should be the usual bin, share, etc. Got it, `CMAKE_INSTALL_PREFIX` and envvar `DESTDIR` can work together to produce a working installation (and ugly extra files).; ```; > cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr; > cd objdir && cmake --build .; > make DESTDIR=/psi/gits/testinstall4 install; -- Installing: /psi/gits/testinstall4/usr//bin/psi4; ...; > /psi/gits/testinstall4/usr/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; SCF energy............................................................................PASSED; ```. > DESTDIR is a GNU standard. It is totally separate from CMAKE_INSTALL_PREFIX. Yes, I see [here](https://www.gnu.org/prep/standards/html_node/DESTDIR.html) how it's a GNU recommendation that we're only half complying with (full installation plus aforementioned ugly extra files). > Can you just remove the internal stage directory and make it install like all other cmake based projects?. Not really. The internal stage directory was a compromise so that developers could continue to never have to type `make install` and was a prerequisite to them approving the transition from GNUMake to CMake at all. Since then, the stage/ has proven convenient and robust to support fairly transparent mixing of externally detected and internally build dependencies that makes having lots of dependencies (as opposed to monolithic software) tolerable to the users and developers. I'd be glad to seek or try any tweaks to the build system that remedy this install issue, but on the whole, the internal stage solves a lot and breaks a little. What I'm not quite following is how this issue is blocking you. I'm glad to have finally understood and reproduced the issue, but it sounds like an extra `rm -rf` or two gets the desired",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604:1075,install,installation,1075,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604,1,['install'],['installation']
Deployability,Let's make 1.2 the last release w/o IR intensities.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/972#issuecomment-384791688:24,release,release,24,https://psicode.org,https://github.com/psi4/psi4/issues/972#issuecomment-384791688,1,['release'],['release']
Deployability,Let's postpone the tighter conv checking and merge this to get it into the upcoming 1.7 release ☺️ Are you ok with this @mfherbst @loriab?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1337328184:88,release,release,88,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1337328184,1,['release'],['release']
Deployability,"Little update: looking at formulas, I think we should just set a bunch of exchange terms involving the absent spin to 0. Probably check number of alpha and beta electrons of each monomer at the beginning of the code and then select which terms to compute based on that. I'm set up with debugging (thanks Lori!) so I'll try that soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830#issuecomment-601308620:7,update,update,7,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-601308620,1,['update'],['update']
Deployability,"Look at some of the other issues on this wiki. Numerous people are; compiling Psi4 with almost 10 year old compilers. I get it though, once you; have a cluster running you don't want to touch anything in case you break; it. In my experience your average super computer on the otherhand is a year; or two out of date. Compilers like Intel, that I swear by, only are fully; C++11 compliant with the most recent releases. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 11:19 AM, ""Ryan Richard"" ryanmrichard1@gmail.com wrote:. > Default off seems silly if we report times. The user has a right to know; > how accurate those times are. If 5 seconds really bothers everyone I vote; > for a timing flag that enables/disables all timings. I think that's the; > wrong approach though and it makes more sense to examine the sampling; > parameters of the timer.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 11:10 AM, ""Rob Parrish"" notifications@github.com wrote:; > ; > > Yeah, it just needs to be turned into a user-option (defaulted off).; > > ; > > -Rob; > > ; > > On Sun, May 3, 2015 at 11:07 AM, Ryan Richard notifications@github.com; > > wrote:; > > ; > > > I'm learnimg the world isn't ready for C++11 yet, and I'm in the; > > > process of; > > > phasing it out of my codes. Anyways, my timer relies on Boost. What I do; > > > is ripped right out of the Boost example for how to determine the; > > > uncertainty in their timers, the sampling rate may be a bit high if; > > > there; > > > ends up being 5000000 calls though. I'm not sure what you mean exactly; > > > by; > > > separate thread. The uncertainty in each timer is a hardware feature so; > > > on; > > > a heterogeneous cluster each mpi process needs to sample. This is only; > > > done once at startup.; > > > ; > > > Sent from my Android (without spellcheck). Please forgive the brevity.; > > > On May 3, 2015 10:53 AM, ""wpoely86"" notifications@github",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89#issuecomment-98495103:409,release,releases,409,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98495103,1,['release'],['releases']
Deployability,"Looking at your GitHub account, I suspect that you have a background in machine learning rather than quantum chemistry, so I'll try to keep this simple. DFT methods (like WB97X-D) rely on an expensive numerical integration procedure, and different codes use different integration grids with different schemes to remove points to reduce computational time. Chemists are usually interested in _differences_ of energies and will prune points if doing so means energy _differences_ are unchanged, even if individual energies changes. Fair comparisons of DFT energies across different programs, like Psi4 and ORCA, are thus very difficult and can only be reliably accomplished by an expert. Your data for 1.3.2 vs 1.4 does not convince me that anything is wrong. Maybe you're just observing noise because you haven't converged the equations fully tightly. Report the largest differences between the 1.4.1 energy and the 1.4 energies. Since you have the full dataset, that should be a simple Python script to write. If we're seeing differences much above the convergence thresholds, then we should look deeper into this. There was a [bugfix](https://github.com/psi4/psi4/pull/2283) between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems. @andysim would know more, but the 1.4.1 numbers should be more reliable than the 1.3.2 or 1.4 numbers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475:211,integrat,integration,211,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-966269475,2,['integrat'],['integration']
Deployability,"Looking into your first point more it appears you are correct and TMPDIR is; a Linux standard so I agree we should honor that within Psi4. You don't have to convince me of the merits of C++11 I'm fully on board; with it; however its use needs to be weighed against what our users are; willing to do because we dont want to alienate them nor do we want to have; to write each code twice, once for C98 and once for C++11. In particular,; those compilers you listed are all fairly new, less than 1 year old to a; couple years. I don't think we can force all our users to upgrade to stuff; that new. If you are not a Linux sys admin type, upgrading can be quite; the feat. Furthermore, I've actually run across HPC clusters that are not; supporting C++11 at the moment, usually because they dont want to shell out; for Intel15. So this isn't just limited to personal clusters. In 10 years; I suspect this will all be a moot point, but now it's quite pressing. In another thread I had asked for other developer feedback on the C++11; issue and so far have received no on record feedback (posts to github).; Off record, I've been told similar sentiments to what I posted above, C++11; is nice, but don't want to push away users. It would be nice if other; developers would comment so we can have a discussion on the issue as I do; think it is important to have all developers on the same page for this. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 1:22 PM, ""wpoely86"" notifications@github.com wrote:. > The question is not whether Psi4's current machinery adequate or not. It's; > about the sensible default. If I put out a $TMPDIR variable, I expect; > programs to obey it. Most Unix/Linux programs will do so, it's even part of; > the Unix specification. There is no reason why Psi4 should do something; > different.; > Heck, with all the recent evolutions in the Linux world (systemd), it's; > even mandatory. Per user containers and ditto /tmp are coming to th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105055171:568,upgrade,upgrade,568,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105055171,1,['upgrade'],['upgrade']
Deployability,"Looks fine to me. Thanks Lori!. -Rob. On Thu, Sep 22, 2016 at 8:32 PM, Lori A. Burns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:269,install,install,269,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['install'],['install']
Deployability,"Looks good! Defaulting to semicanonical MO's is probably a good idea. Can you think of a reason that we wouldnt want to do this?. We may want to add some sort of test to this just to ensure that we are not actually changing the energy. One idea would to be in a test to do:. ```; # Solve and leave the Wavefunction active; set MCSCF_CI_CLEANUP False; set MCSCF_DPD_CLEANUP False; cas_e, cas_wfn = energy(""CASSCF"", return_wfn=True). # Update energy; cas_wfn.transform_mcscf_integrals(approx_integrals_only); nci_iter = cas_wfn.diag_h(1.e-10, 1.e-10); current_energy = core.get_variable(""MCSCF TOTAL ENERGY""). # Compare the energy; compare_values(cas_e, cas_wfn, 8, ""Rotated Orbital Energy Invariance""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304474246:434,Update,Update,434,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304474246,1,['Update'],['Update']
Deployability,"Looks like I didn't ask you a fundamental enough question at the start of this diagnosis. Are you trying to install the last stable release (July 2016; 1.0; `conda install psi4 --channel psi4`) or the current development head (April 2017; ~1.1rc1; `conda install psi4 --channel psi4/label/devel --channel psi4`)? The former doesn't need a conda gcc and automatically installs the libgcc 4.8.5 package. The latter needs, and so comes with a gcc 5.2 package from the psi4 channel (borrowed from msarahan). So when psi4 ~1.1 is properly installed, `which psi4 python gcc` should all be pointing to side-by-side executables in your conda environment. The error you just reported is what happens when you mix libraries built against pre- and post-gcc-5.1 `std::string`. I'd abandon your psi4-env environment and start the installation again with something like the below (assuming psi4 ~1.1 is what you're after). ```; conda create -n p4env python=x.x psi4 psi4-deps -c psi4/label/devel -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-297062748:108,install,install,108,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297062748,7,"['install', 'release']","['install', 'installation', 'installed', 'installs', 'release']"
Deployability,"Looks like Travis is still feeling ill: the failure is caused by; ```; > raise ResourceError(f""MP2D version '{self.get_version()}' too old. Please update to at least '1.1'.""); E qcengine.exceptions.ResourceError: MP2D version '' too old. Please update to at least '1.1'.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1665#issuecomment-503905741:147,update,update,147,https://psicode.org,https://github.com/psi4/psi4/pull/1665#issuecomment-503905741,2,['update'],['update']
Deployability,Looks like a logic breakdown around `/psi4/driver/procedures/proc.py:1140`. For now if you simply comment out `/psi4/driver/procedures/proc.py:1164-1165` everything should work as expected. Ill fix this up in a patch and switch one of our `basis_guess` test cases to an explicit basis so we can catch this in the future.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/484#issuecomment-256802735:211,patch,patch,211,https://psicode.org,https://github.com/psi4/psi4/issues/484#issuecomment-256802735,1,['patch'],['patch']
Deployability,"Looks like adcc and I have gotten out of sync, conda-wise. try commenting out https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L102 and OFFing https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L125",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1990#issuecomment-681047414:126,pipeline,pipelines,126,https://psicode.org,https://github.com/psi4/psi4/pull/1990#issuecomment-681047414,4,['pipeline'],"['pipelines', 'pipelines-linux']"
Deployability,Looks like an old library in there somewhere. (1) report `conda list` and (2) install into its own environment.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1036#issuecomment-395777503:78,install,install,78,https://psicode.org,https://github.com/psi4/psi4/issues/1036#issuecomment-395777503,1,['install'],['install']
Deployability,"Looks like the includes in the makefile still reference the source directory, and some of the necessary includes, e.g. https://github.com/psi4/psi4public/tree/master/include, aren't copied into the install directory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162#issuecomment-135855397:198,install,install,198,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-135855397,1,['install'],['install']
Deployability,"Looks like the plugin didn't get the infrastructure changes update. If you change the signature and return according to http://forum.psicode.org/t/wavefunction-passing-update/139 , does that fix it? @SebWouters, did your latest changes cover the plugin signature change?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185841947:60,update,update,60,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185841947,2,['update'],['update']
Deployability,"Looks like this still doesn't quite work. We did not copy the point group originally because a molecule does not have a PG until `update_geometry` is called. This can cause a seg fault as is. Also, it appears we are missing some symmetry information. I think we are going to have to unlock the frame and allow for a full update to get this to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-196887129:321,update,update,321,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-196887129,1,['update'],['update']
Deployability,"Looks like we missed a `os.path.abspath` somewhere. This should be able to be patched up, ill dig through the code when I get a chance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/669#issuecomment-290459005:78,patch,patched,78,https://psicode.org,https://github.com/psi4/psi4/issues/669#issuecomment-290459005,1,['patch'],['patched']
Deployability,Looks like your native gcc is too old. Activate the conda environment (something like `source activate p4env`) to use the newer gcc that is installed alongside the psi4 binary. Or `export LD_LIBRARY_PATH=/path/to/miniconda/envs/p4env/bin/../lib:$LD_LIBRARY_PATH` .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-291261254:140,install,installed,140,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291261254,1,['install'],['installed']
Deployability,"Lori's right (as usual); it's the auto-generated samples that changed. I thought about removing them from this PR to make the review easier but figured that the samples will need to be updated eventually anyway. The samples can be completely ignored for review purposes, but I'm happy to roll back the changes if anybody would prefer a more minimal PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1274#issuecomment-426117811:185,update,updated,185,https://psicode.org,https://github.com/psi4/psi4/pull/1274#issuecomment-426117811,1,['update'],['updated']
Deployability,"M=) | `83.80% <0.00%> (-10.63%)` | :arrow_down: |; | [psi4/src/psi4/libfock/sap.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJmb2NrL3NhcC5jYw==) | `80.00% <0.00%> (-9.29%)` | :arrow_down: |; | [psi4/src/psi4/scfgrad/scf\_grad.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9zY2ZncmFkL3NjZl9ncmFkLmNj) | `95.09% <0.00%> (-1.19%)` | :arrow_down: |; | [psi4/src/psi4/liboptions/liboptions.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJvcHRpb25zL2xpYm9wdGlvbnMuY2M=) | `56.26% <0.00%> (-0.91%)` | :arrow_down: |; | [psi4/src/psi4/libmints/vector.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJtaW50cy92ZWN0b3IuY2M=) | `62.27% <0.00%> (-0.60%)` | :arrow_down: |; | [psi4/src/psi4/libfock/points.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvcHNpNC9saWJmb2NrL3BvaW50cy5jYw==) | `72.24% <0.00%> (-0.27%)` | :arrow_down: |; | [psi4/src/core.cc](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9zcmMvY29yZS5jYw==) | `82.19% <0.00%> (-0.25%)` | :arrow_down: |; | [psi4/driver/driver.py](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree#diff-cHNpNC9kcml2ZXIvZHJpdmVyLnB5) | `79.10% <0.00%> (-0.22%)` | :arrow_down: |; | ... and [106 more](https://codecov.io/gh/psi4/psi4/pull/1351/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/psi4/psi4/pull/1351?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/psi4/psi4/pull/1351?src=pr&el=footer). Last update [7d35d14...6e36f6b](https://codecov.io/gh/psi4/psi4/pull/1351?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-505723097:3315,update,update,3315,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-505723097,1,['update'],['update']
Deployability,"MBIS is Georgia Tech's department, so obligatory @loriab ping - I'm not sure who has taken over MBIS now that Jeff has left. Is there a legitimate reason for us not to support MBIS for iodine? It looks to me like we just need to extend the `get_mbis_params` table one more row of the periodic table and then update the `mA` setting. If so, this is an easy project for one of your developers who is still learning Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728#issuecomment-1262298053:308,update,update,308,https://psicode.org,https://github.com/psi4/psi4/issues/2728#issuecomment-1262298053,1,['update'],['update']
Deployability,"Made all the necessary code changes. Have not had time to update docs yet (classes). Feel free to review the code, and I will update the docs tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543#issuecomment-1095549080:58,update,update,58,https://psicode.org,https://github.com/psi4/psi4/pull/2543#issuecomment-1095549080,2,['update'],['update']
Deployability,"Make sure you install. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 25, 2016 7:40 PM, ""Andy Simmonett"" notifications@github.com wrote:. > The patch I just pushed allows it to compile. The tests all fail instantly; > on my laptop, so I still have some more work to do, but that's almost; > certainly user error.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-235119557, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi08tfysGPjLLYYwmAXVcqfjyQ7CVks5qZUlygaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235119690:14,install,install,14,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235119690,2,"['install', 'patch']","['install', 'patch']"
Deployability,"Many thanks for your answers and support. We basically want to export the two-electron integrals, and use them with other programs. So the integrals will be written to a binary file together with other 1el matrices. The code snippet that is working at the moment:. ``` c++; MintsHelper mints(ref_wfn->basisset(), options, 0);; auto intFactory = mints.integral();; auto basis = mints.basisset();; auto tBO = intFactory->eri();; AOShellCombinationsIterator shellIter = intFactory->shells_iterator();. std::vector<double> intval;; std::vector<int> intnums;. for (shellIter.first(); shellIter.is_done() == false; shellIter.next()) {; tBO->compute_shell(shellIter.p(),shellIter.q(),shellIter.r(),shellIter.s());; double cutOff = 1E-12;; auto aoIter = intFactory->integrals_iterator(shellIter.p(),shellIter.q(),shellIter.r(),shellIter.s());; for (aoIter.first(); aoIter.is_done() == false; aoIter.next()) {; int i = aoIter.i();; int j = aoIter.j();; int k = aoIter.k();; int l = aoIter.l();. if (fabs(tBO->buffer()[aoIter.index()])>cutOff){; intval.push_back(tBO->buffer()[aoIter.index()]);; intnums.push_back(i); ; intnums.push_back(j);; intnums.push_back(k);; intnums.push_back(l);. }. }; // Continue Sorting + Exporting; ````. If we use the conda install, we get an error that the symbol cannot be found. Compiling with modified integral.h works as expected. Thanks again!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239#issuecomment-876632135:1244,install,install,1244,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876632135,1,['install'],['install']
Deployability,"Many thanks for your help! Your comment is very useful to me. Now, I have installed PSI4 successfully.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56#issuecomment-40277811:74,install,installed,74,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40277811,1,['install'],['installed']
Deployability,"Many thanks! I do not remember any announcement. Perhaps, I missed it. I have install numpy and psi4 works now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/407#issuecomment-225173266:78,install,install,78,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225173266,1,['install'],['install']
Deployability,"Matt,. You accidentally typed. scf(‘energy’). instead of. energy(‘scf’). Normally you’d get a more useful python error related to calling an undefined function but, unfortunately, the scf function does exist in this case so you got a more obscure error message. Andy. > On Apr 19, 2015, at 9:53 PM, Matt Ernst notifications@github.com wrote:; > ; > Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message; > ; > Traceback (most recent call last):; > File ""<string>"", line 59, in <module>; > Boost.Python.ArgumentError: Python argument types in; > psi4.scf(str); > did not match C++ signature:; > scf(void); > scf(P7_object, P7_object); > Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange.; > ; > #methane test; > ; > molecule {; > #charge multiplicity; > 0 1; > C0 0.000000 0.000000 0.000000; > H0 1.092199 0.000000 -0.000001; > H0 -0.364063 0.138497 1.020380; > H0 -0.364067 -0.952923 -0.390247; > H0 -0.364068 0.814425 -0.630132; > }; > ; > set globals {; > reference RHF; > maxiter 999; > }; > ; > basis {; > assign C0 C0bas; > assign H0 H0bas; > #C 3-21G; > [ C0bas ]; > cartesian; > ; > ---; > ; > C 0 ; > S 3 1.00; > 172.2560000 0.0617669 ; > 25.9109000 0.3587940 ; > 5.5333500 0.7007130 ; > SP 2 1.00; > 3.6649800 -0.3958970 0.2364600 ; > 0.7705450 1.2158400 0.8606190 ; > SP 1 1.00; > 0.1958570 1.0000000 1.0000000 ; > ; > ---; > ; > #H 3-21G; > [ H0bas ]; > cartesian; > ; > ---; > ; > H 0 ; > S 2 1.00; > 5.4471780 0.1562850 ; > 0.8245470 0.9046910 ; > S 1 1.00; > 0.1831920 1.0000000 ; > ; > ---; > ; > }; > ; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/79#issuecomment-94352477:663,install,installed,663,https://psicode.org,https://github.com/psi4/psi4/issues/79#issuecomment-94352477,1,['install'],['installed']
Deployability,Maybe we could set `-DENABLE_simint=OFF` automatically in cmake when AM>7 is requested?; Is that a reasonable cmake configuration goal @loriab ?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-869457099:116,configurat,configuration,116,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-869457099,1,['configurat'],['configuration']
Deployability,"Me neither. Oh well, easier for me to patch up than outsider anyway. Plus, I finally figured out why `@using_snsmp2`, `@using_cppe`, etc. weren't enabling/skipping tests as they ought -- will be fixed in next qcel.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1929#issuecomment-643563633:38,patch,patch,38,https://psicode.org,https://github.com/psi4/psi4/pull/1929#issuecomment-643563633,1,['patch'],['patch']
Deployability,"Most errors appear to be related to formatting, which is likely caused by a mismatch of formatters used by Psi4 upstream and FreeBSD. The latter could have an older version, for example. There are errors related to missing functionals in Libxc. Looks like FreeBSD only has Libxc 6.0.0 released over a year ago. E.g. HYB_GGA_XC_R2SCAN0 was only added in Libxc 6.1.0. Is the version check in Psi4 not stringent enough or was it disabled in the FreeBSD build?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3099#issuecomment-1848328400:285,release,released,285,https://psicode.org,https://github.com/psi4/psi4/issues/3099#issuecomment-1848328400,1,['release'],['released']
Deployability,"Moved to 1.5 per discussion on conference call. It's not worth the further delay to the 1.4 release, given that most users will get Psi from conda.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-815133710:92,release,release,92,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-815133710,1,['release'],['release']
Deployability,"My build is broken again, but, if it's any use, the below was working last week for building this branch from anaconda python. Would an internal boost build be worth trying?. ```; source /theoryfs2/common/software/intel2016/bin/compilervars.sh intel64. cmake -H. -Bobjdir5 \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_INSTALL_PREFIX=/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr/install \; -DCMAKE_BUILD_TYPE=release \; -DPYTHON_EXECUTABLE=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/bin/python2.7 \; -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/lib/libpython2.7.so \; -DPYTHON_INCLUDE_DIR=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/include/python2.7 \; -DSPHINX_ROOT=/theoryfs2/ds/cdsgroup/miniconda/envs/sphinxenv; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235113769:432,install,install,432,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235113769,2,"['install', 'release']","['install', 'release']"
Deployability,"My guess is that pybind11 didn't update in your build directory. Were you reusing a build directory from pre ```git pull```? If so, that's the issue, create a new build directory, configure, and make and it should work. I just built psi4 in a clean build directory with gcc 5.4. If not, then we'll look into it more.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273460491:33,update,update,33,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273460491,1,['update'],['update']
Deployability,"My impression is that raw pointers are still fine (and widespread) for single module and single class usage, especially for picking data out of a larger structure to send to BLAS, so I wouldn't feel obliged to modernize those. But yeah, if today you'd type `std::vector` for a usage without a second thought, it'd be nice to update.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1877#issuecomment-632771603:325,update,update,325,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-632771603,1,['update'],['update']
Deployability,"My issue here seems specific to our cluster. I have no problems on my workstation or our second cluster. Maybe the old (gcc 4.7.2) on the cluster makes troubles together with the local installation of gcc 4.9.4. But I have no real desire to dig into this... Btw, uncommenting these cmake debug messages did produce no output at all (or I did something wrong)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/657#issuecomment-289040592:185,install,installation,185,https://psicode.org,https://github.com/psi4/psi4/issues/657#issuecomment-289040592,1,['install'],['installation']
Deployability,"My laptops finds accelerate on Yosemite without any options set as well. Could this be a Xcode issue?. -Daniel Smith; Sent from my iPhone. . > On Jul 16, 2015, at 18:37, Justin Turney notifications@github.com wrote:; > ; > We should not have to explicitly state the usage of the Accelerate; > framework. The test for the system BLAS is sufficient as libblas.\* and; > liblapack.\* both reference Accelerate. This has been the case for the last; > several versions of Mac OS X. Is this not the case of other people's Macs?; > ; > -Jet; > ; > ls -l /usr/lib/libblas\* /usr/lib/liblapack*; > /usr/lib/libblas.dylib ->; > ../../System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib; > /usr/lib/liblapack.dylib ->; > ../../System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib; > ; > Justin Turney, Ph.D.; > Senior Research Scientist; > CCQC/UGA; > ; > On Thu, Jul 16, 2015 at 6:18 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Actually, you still do have to pass --accelerate to setup, as it's not on; > > by default. @robertodr https://github.com/robertodr , is there a reason; > > accelerate shouldn't be on by default for release builds?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/36#issuecomment-122120131.; > > ; > > —; > > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-122124114:1253,release,release,1253,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122124114,1,['release'],['release']
Deployability,"My thoughts are; * I'm jealous you were able to pull this off, I gave up in a fit of rage the last time I tried to do this migration; * Having 1.9 drop with `pydantic =2` constrained everywhere would be a small problem (I think that's what the contents of this PR would require?). We'd be stuck on 1.8.something, which isn't the end of the world but also not preferred.; * Waiting until the QCArchive stack works with v1/v2 at installation time and then having the next-ish Psi4 release be `pydantic =2` sounds like a great idea (I think this is what you're suggesting?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3034#issuecomment-1809334518:427,install,installation,427,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809334518,2,"['install', 'release']","['installation', 'release']"
Deployability,"New LinK PR opened, comments on this are certainly welcome, but I still need to make my tests and update the docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-974334935:98,update,update,98,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-974334935,1,['update'],['update']
Deployability,New release of PCMSolver is up: https://github.com/PCMSolver/pcmsolver/releases/tag/v1.3.0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2037#issuecomment-736024760:4,release,release,4,https://psicode.org,https://github.com/psi4/psi4/pull/2037#issuecomment-736024760,2,['release'],"['release', 'releases']"
Deployability,"Nice! If you're allowing general use, that might even cross off the lingering 'add RESP to psi4' ticket (https://github.com/psi4/psi4/issues/20). I've added a `bin/psi4-config` script to the installation, final contents (for the binary) below. Binary nightly build is off for the moment, because I'm working on it for other reasons, but you can see if something like the below is what you'd like. I'm concerned that it's got a lot of full paths and binary-specific (static) flags and libraries, but perhaps it can be made useful with some modifications. ``` py; #!/usr/bin/env python; # vim:ft=python. import sys; from collections import OrderedDict. def main(argv):; info = OrderedDict(); info['--cc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icc'; info['--cxx'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icpc' # aka PLUGIN_CXX; info['--fc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/ifort'; info['--version'] = psiver; info['--githash'] = githash; if 'ON' == 'ON':; info['--prefix'] = '/opt/anaconda1anaconda2anaconda3'; else:; info['--prefix'] = '/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl'; info['--top-level-psi4-dir'] = '/scratch/cdsgroup/conda-builds/work'; info['--max-am-eri'] = '4'; info['--python-version'] = '2.7'; info['--has-pcmsolver'] = 'ON'; info['--has-chemps2'] = 'ON'; info['--includes'] = '-I/scratch/cdsgroup/conda-builds/work/build/interfaces/include -I/scratch/cdsgroup/conda-builds/work/build/src/lib -I/scratch/cdsgroup/conda-builds/work/src/lib -I/scratch/cdsgroup/conda-builds/work/include -I/scratch/cdsgroup/conda-builds/work/build/include -I/scratch/cdsgroup/conda-builds/work/build/boost/include -I/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include' # aka PLUGIN_INCLUDES; info['--defines'] = '-DHAVE_PCMSOLVER -DHAVE_DKH -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172395303:191,install,installation,191,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172395303,1,['install'],['installation']
Deployability,"No errors building with ambit enabled when I add those two lines to external/upstream/ambit/CMakeLists.txt (with just ambit added as an extra option). Adding gpu_dfcc into the build (and restarting from scratch with CMAKE_CUDA_COMPILER, CUDA_TOOLKIT_ROOT_DIR, and c and c++ compilers set to gcc-4.9) fails when building with:; ```; [ 82%] Performing configure step for 'gpu_dfcc_external'; loading initial cache file /home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/tmp/gpu_dfcc_external-cache-Release.cmake; -- Psi4 script: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/bin/psi4; -- Psi4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/down",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:532,Release,Release,532,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,1,['Release'],['Release']
Deployability,No need for this patch with psi4public.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/11#issuecomment-34667483:17,patch,patch,17,https://psicode.org,https://github.com/psi4/psi4/issues/11#issuecomment-34667483,1,['patch'],['patch']
Deployability,"No problem @andysim It was just, as you say, confusing! The updated `input.dat` is basically [`tests/props1/input.dat`](https://github.com/psi4/psi4/blob/master/tests/props1/input.dat) with CPCM for HF and KS-B3LYP. I will just update the `output.ref` and this one in ready to go :wink:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/665#issuecomment-291544765:60,update,updated,60,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291544765,2,['update'],"['update', 'updated']"
Deployability,"No reason you should know this, but `gcc-5-mp` is sign that the solver can't install a recent psi4 into the existing environment and so is instead going back 5+ years to a time when packages were less defensively pinned and conda only had gcc v4 available on defaults channel. I'd suggest creating a new env and specifying the python. If needed, you can specify the psi4 version. And if you've got your setup pulling from conda-forge at higher priority than defaults, you can clobber that, too. So something along the lines of the below, to be over-explicit. Also see https://psicode.org/installs/v17/ if you haven't already. If that works, but you really don't want a separate environment, then try the more explicit install into your working env and/or post back here with your `conda list`, and I'll try to see if there's any red flags. ```; conda create -n p4env python=3.9 psi4=1.7 -c defaults -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468521746:77,install,install,77,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468521746,3,['install'],"['install', 'installs']"
Deployability,"No worries, this was easy compared to the actual libint2 interface that you all had to write and test. I've updated the post to clarify that this PR closes #2114. I found and updated only one test with an unnecessary `ints_tolerance 0`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2139#issuecomment-804380750:108,update,updated,108,https://psicode.org,https://github.com/psi4/psi4/pull/2139#issuecomment-804380750,2,['update'],['updated']
Deployability,"No, Easybuild has support for Psi4. Maybe mentioning it in the documentation would be nice? Next to the manual install?. The point I'm trying to make here is that users should use (or tell their sysadmins to) a module system. It's no problem than to use old and new compilers and to support C++11/14/17.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105252795:111,install,install,111,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105252795,1,['install'],['install']
Deployability,"No, I have to refactor the code such that the PE stuff is Python-side only (see ToDo list above).; In the meantime, I'll hopefully a) have a first ""release"" of `cppe` ready that can be pinned in the `ExternalProject` and b) have the PR with performance improvements for electric field integrals done. Is there a deadline for the Psi4 1.4 release?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-504107769:148,release,release,148,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-504107769,2,['release'],['release']
Deployability,"No, that wasn’t intentional. If it’s new since ~12 days ago, it probably has to do with removal of the Makefile system. In any case, should integrate the plugins better with cmake and make them test cases again so that we know when they break. Thanks for the notice. Lori. > On Mar 18, 2015, at 10:42 AM, Sebastian Wouters notifications@github.com wrote:; > ; > Dear all,; > ; > I have built the latest version of psi4 with plugins:; > ; > BLA_VENDOR=Intel10_64lp CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_DUMMY_PLUGIN=ON; > and can create new plugins and compile them. However, the old examples, typically in the folder; > ; > /path/to/source/psi4/objects/plugins/; > are not generated anymore. I don't know if this was intentional?; > ; > Best regards,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/78.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/78#issuecomment-83015983:140,integrat,integrate,140,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-83015983,1,['integrat'],['integrate']
Deployability,"No, the build is clean on cerebro. This is on blueridge, but perhaps it's; the same issue? This change was just made on January 8th, which was after; we discussed the GCC header thing. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Wed, Jan 20, 2016 at 9:37 AM, Roberto Di Remigio <; notifications@github.com> wrote:. > Is this on cerebro? We discussed this issue some time ago, since it's the; > same hiccup that hinders compilation of PCMSolver on cerebro. Intel relies; > on the standard headers from some installation of GCC. The only; > non-conflicting GCC on cerebro is 4.4.6 which implemented just those 3; > overloads for std::to_string.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/220#issuecomment-173222692.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/220#issuecomment-173224110:512,install,installation,512,https://psicode.org,https://github.com/psi4/psi4/issues/220#issuecomment-173224110,1,['install'],['installation']
Deployability,"No, the content of my CMakeLists.txt is identical to the given tag. I further add that i can compile the code with gcc_4.9.2 without any problems on my lap top,; but i need to compile it on the cluster, and there we have the older version of gcc, therefore; the compilation with intel 2017. find_package(pybind11 CONFIG QUIET). if(${pybind11_FOUND}); message(STATUS ""Found pybind11: ${pybind11_INCLUDE_DIR} (found version ${pybind11_VERSION})""); add_library(pybind11_external INTERFACE) # dummy; else(); include(ExternalProject); message(STATUS ""Suitable pybind11 could not be located, building one instead.""); ExternalProject_Add(pybind11_external; GIT_REPOSITORY https://github.com/psi4/pybind11; GIT_TAG oct18ud; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}/external; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYBIND11_CPP_STANDARD=-std=c++${PSI4_CXX_STANDARD}; -DPYBIND11_TEST=OFF; -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; INSTALL_COMMAND ${CMAKE_MAKE_PROGRAM} install; DESTDIR=${CMAKE_BINARY_DIR}/stage); endif()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261729566:1241,install,install,1241,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261729566,1,['install'],['install']
Deployability,"No, we haven't taken over maintainership of libint-1 from Valeev. There's a bit of history at the README of https://github.com/psi4/libint . We'll probably mirror any bugfixes that Valeev implements. The new external repo is based on libint as extracted from Psi4, not on https://github.com/evaleev/libint/releases/tag/release-1-1-6 . I did a grand diff at one point, and there were very many little changes; so many that I did not examine them further, yet they were mostly line tweaks, not insertions/deletions. That's actually interesting that you've been using Valeev's libint-1 with Psi4, and it's presumably been working just fine. I don't think any of the Psi4 development people have tried that in years. The main purpose of the psi4/libint repo has been to get libint built with CMake and to get it switched over to exporting CMake targets through `libintConfig.cmake` rather than detecting the installation through `Findlibint.cmake`. In that, we may have broken your ability to use your upstream libint-1.1.5 package, as the Psi4 build system expects to link to a `libint::int` target. If there are things we can do to make your life easier in not dealing with two libint-1's, let us know. Our external repo does respect `GNUInstallDirs`. . Psi4 will probably switch over to libint-2 when we get the time. But once again, we'll want a CMake build and exported targets. Hopefully, we'll be able to contribute those changes upstream to evaleev/libint, as we have with other projects (e.g., CheMPS2).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474#issuecomment-249616760:306,release,releases,306,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249616760,3,"['install', 'release']","['installation', 'release-', 'releases']"
Deployability,"Nope, just an oversight on my part. Good catch. Most of the changes to the tests that I made were a result of high precision checks failing (3 point f.d. vs. analytic can be a little noisy), so I was just doing trial and error to figure out where things needed to be updated. I must have missed this one, because I just saw that it timed out on my machine. Sorry about that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-235365542:267,update,updated,267,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235365542,1,['update'],['updated']
Deployability,"Nope, they're fine! I did break the install by adding an install rule to the optional psi4so target, but that's unrelated, and I've got a fix in the works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/272#issuecomment-187809940:36,install,install,36,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187809940,2,['install'],['install']
Deployability,"Normally, they are installed into /usr/local (under the stage directory). But these files go into /usr/ports under the same stage directory. It must have ran ```pwd``` or something like that during build/install.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/855#issuecomment-343778979:19,install,installed,19,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343778979,2,['install'],"['install', 'installed']"
Deployability,"Not a fluke, but not your fault either. Ask again when [Lori's patch](https://github.com/psi4/psi4/pull/2815) is merged in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1332748782:63,patch,patch,63,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1332748782,1,['patch'],['patch']
Deployability,"Not according to [this](https://www.gnu.org/licenses/gpl-howto.en.html); ""You should also include a copy of the license itself somewhere in the distribution of your program. All programs, whether they are released under the GPL or LGPL, should include the text version of the GPL. In GNU programs the license is usually in a file called COPYING. If you are releasing your program under the LGPL, you should also include the text version of the LGPL, usually in a file called COPYING.LESSER. Please note that, since the LGPL is a set of additional permissions on top of the GPL, it's important to include both licenses so users have all the materials they need to understand their rights.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-301915147:205,release,released,205,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-301915147,1,['release'],['released']
Deployability,"Not looking good for a compatible patch at [GL 61](https://gitlab.com/libxc/libxc/issues/61). Sounds like best hope would be static library as discussed around https://gitlab.com/libxc/libxc/issues/59#note_84144469 . If by ""libxc included in tarball"" you mean any copying of libxc code into psi4 repo as code or tarball such that the source download produced by github has libxc, @mbanck, then that's not likely. But if you mean a special hand-constructed psi4 release tarball that includes req'd deps, then that's possible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451262059:34,patch,patch,34,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451262059,2,"['patch', 'release']","['patch', 'release']"
Deployability,"Not quite so great as it looks on the testing front, as I'm copying tests from one repo to another. Properly, I wanted to shift psi's testing so that each native ctest dir has a one-line mirror run through pytest. Then pytest can automatically pick up other projects' (also pytest) tests from their install locations. Thus no test duplication, tests stay synched, and all testing available for _installed_ software, too. But that seemed like a deep rabbit hole, so just copied the tests :-) Maybe at least I can keep v2rdm in working order now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/866#issuecomment-350503264:299,install,install,299,https://psicode.org,https://github.com/psi4/psi4/pull/866#issuecomment-350503264,1,['install'],['install']
Deployability,"Not really related, but I think it makes sense to roll a release candidate once the code is frozen, so people not using git master can try building and running on various platforms. That might make an immediate brown-paperbag 1.0.1 release unnecessary or less likely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-178106520:57,release,release,57,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178106520,2,['release'],['release']
Deployability,Not really. Libxc4 doesn't have anything that crashes. I've backported the SCAN implementation to libxc 3 at; https://gitlab.com/libxc/libxc/commit/96568b1dd36130df57d19f7037fab7afecde48a4; as it appears there's going to be a new release in that series soon.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345267250:230,release,release,230,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345267250,1,['release'],['release']
Deployability,"Not sure what you exactly mean. Setting vv10_b in the superfunctional is straightforward. I followed what was done for the LRC omega. . Ideally the user has not do anything for the pre-defined functionals once I get the -nl dashparam to work. The manual setting is more for developers who want to fit the vv10_b for a new functional. Using DFT-NL should be like using DFT-D. Having the vv10 integrator exposed to python and supplying a user-defined density would be nice. And for a post-scf VV10 correction that is probably the way to go for the scfitertopy implementation. Though this pybind is currently a level too much for me, i dont even understand the errors i get. Small steps for me ;-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-364091920:391,integrat,integrator,391,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-364091920,1,['integrat'],['integrator']
Deployability,"Note that some projects distribute conda packages for general use, then tell users that if the packages don't work or if they want hardware-tuned builds, distribute conda recipes to build locally. Without some of the oddities I use, this is pretty much like distributing a do-configure that's guaranteed to work and the resulting install is relocatable. Miniconda would be required but only python and conda-build used from it. I considered this overkill for psi4's cli-friendly developer community, but such a relocation solution is worth considering rather than doing lots of `install_name_tool`, `patchelf`, `rpath`, `@loader_path` mechanics on our own.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235927654:330,install,install,330,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235927654,2,"['install', 'patch']","['install', 'patchelf']"
Deployability,"Noted. In the current system, on the first point, you may have to use ""extra"" or ""custom"" prefixes to c_flags to get them noticed. The new cmake system will require installation, so the second point should be fixed. It was partially fixed in #410 , but you're probably wanting the add-on headers, too, that weren't addressed in that ticket.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230783892:165,install,installation,165,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783892,1,['install'],['installation']
Deployability,"Now *Azure* can build an optimized *Psi4*, run all the tests, and make a conda package: https://dev.azure.com/raimisg/psi4/_build/results?buildId=569. Queue time variables:; ```; cmake.build_type= Release; conda.build=true; ctest.type=full; pytest.type=full; python.version=3.6; ```. The built package is on *Anaconda*: https://anaconda.org/raimis/psi4/files. You can install and try:; ```; conda install -c raimis -c conda-forge psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000:197,Release,Release,197,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000,3,"['Release', 'install']","['Release', 'install']"
Deployability,"Now I get; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; Could not find executable ; Looked in the following places:; Release/; Release/; Debug/; Debug/; MinSizeRel/; MinSizeRel/; RelWithDebInfo/; RelWithDebInfo/; Deployment/; Deployment/; Development/; Development/; 1/12 Test #7: casscf-sp ........................***Not Run 0.00 sec; ```; It did seem to install the executable, though.; https://koji.fedoraproject.org/koji/watchlogs?taskID=104800455",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482:192,Release,Release,192,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482,5,"['Deploy', 'Release', 'install']","['Deployment', 'Release', 'install']"
Deployability,"Now I have install a fresh binary version (Psi4 0.4.16) and run the same input and get:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914770; REF Energy (a.u.) : -25.94513055914770; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150033; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408834; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973583; CD-MP2 Correlation Energy (a.u.) : -0.02151506744300; CD-MP2 Total Energy (a.u.) : -25.96664562659070; =======================================================================; ```. I also tried with another older version (Psi4 0.3.137) I still get the correct result. Hence, the new version yields wrong result while older versions give the correct result. Therefore, it should be related to the recent changes were made. I do not know how to fix it. ; @loriab @CDSherrill @andysim @jturney",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183535595:11,install,install,11,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183535595,1,['install'],['install']
Deployability,"Now nothings works anymore. I update psi4 using conda update psi4 libefp libint erd simint pcmsolver chemps2 gdma dkh libxc -c psi4/label/dev it finish ok, but when I try to run psi4 I got the following error:. File ""/opt/psi4/bin/psi4"", line 158, in <module>; import psi4; File ""/opt/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 32, in <module>; import v2rdm_casscf; File ""/opt/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 39, in <module>; psi4.core.plugin_load(sofile); RuntimeError: ; Fatal Error: load_plugin: Cannot open library: /opt/psi4/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: _ZNK3psi12Wavefunction26tpdm_gradient_contributionEv; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1514132855674/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 51; The most recent 5 function calls were:. psi::plugin_load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&); py_psi_plugin_load(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >); pybind11::cpp_function::dispatcher(_object*, _object*, _object*). forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00002AC3069B82CD Unknown Unknown Unknown; libpthread.so.0 00002AC301BBD1F0 Unknown Unknown Unknown; ld-linux-x86-64.s 00002AC30148A0D1 Unknown Unknown Unknown; ld-linux-x86-64.s 00002AC3014847A6 Unknown Unknown Unknown; libdl.so.2 00002AC301DCB5EC Unknown Unknown Unknown; libdl.so.2 00002AC301DCB10F Unknown Unknown Unknown; core.so 00002AC303C6DC02 Unknown Unknown Unknown; core.so 00002AC303DC58E2 Unknown Unknown Unknown; core.so 00002AC303DE4A13 Unknown Unknown Unknown; core.so 00002AC303955DEC Unknown Unknown Unknown; libpython3.6m.so. 00002AC30175D1C9 Unknown Unknown Unknown; libpython3.6m.so. 0000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373052900:30,update,update,30,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373052900,2,['update'],['update']
Deployability,"Now that #641 has been merged in, I'll go back in and update the memory setting section. @loriab, should I do that in my repo, or somewhere else since it needed some massaging for nbsphinx to take it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/637#issuecomment-285992716:54,update,update,54,https://psicode.org,https://github.com/psi4/psi4/pull/637#issuecomment-285992716,1,['update'],['update']
Deployability,Now uses ```core.get_num_threads()``` to determine the number of threads to use with MRCC; this can be overridden by ```MRCC_OMP_NUM_THREADS```. Updates documentation with reference to Kallay's CCSDT(Q)/A and CCSDT(Q)/B paper and makes note about CCSDT(Q)/B being used by default and cites Martin's paper. I couldn't compile the documentation so please let me know if the formatting is off.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/634#issuecomment-287899667:145,Update,Updates,145,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-287899667,1,['Update'],['Updates']
Deployability,"Numpy `.so` that links BLAS can be found at `python -c ""import os; import numpy as np; print(os.path.dirname(np.__file__))""` + `/numpy/core/multiarray.*.so`. Where the star depends on your python installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1007#issuecomment-387923462:196,install,installation,196,https://psicode.org,https://github.com/psi4/psi4/issues/1007#issuecomment-387923462,1,['install'],['installation']
Deployability,"O install it last week, so I should be using de last version. I download the script version py3.6.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373016592:2,install,install,2,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373016592,1,['install'],['install']
Deployability,"OK, I think I've got it working on my local machine. Using the Psi4 input file you provided I obtain the following Mulliken charges:. ```; Mulliken Charges; ================; N 0.0380; H -0.2743; H 0.0121; H 0.2242. Sum of Mulliken Charges: 0.0000; ```. I'll get the patch pushed in shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-54483620:267,patch,patch,267,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-54483620,1,['patch'],['patch']
Deployability,"OK, I've reverted that change and updated gpu_dfcc to have find_package(CUDA REQUIRED). Aside from the large memory requirement @loriab mentioned, I think everything is good on the psi4 and gpu_dfcc sides.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-397381557:34,update,updated,34,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-397381557,1,['update'],['updated']
Deployability,"OK, installed 1.3 and the littering is gone, thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1584#issuecomment-475862946:4,install,installed,4,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475862946,1,['install'],['installed']
Deployability,"OK, my bad. I checked in this fix for this problem in the library own repository PCMSolver/pcmsolver@affeac5528b4e31d76c2c5a7b2777afe39e57c5d but forgot to update the version in Psi4... I'll do it in a minute.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171085200:156,update,update,156,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171085200,1,['update'],['update']
Deployability,"OK, switched to python 2.7 and all is fine.; -Rollin. On Mon, Mar 14, 2016 at 9:48 AM, Lori A. Burns notifications@github.com; wrote:. > Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated; > qcdb within the last couple weeks with accumulated improvements and python; > 3.5 prep.; > ; > It doesn't look like I use dictionary comprehensions all that much, so you; > can try the following, then report any subsequent errors.; > ; > ```; > return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; > return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; > ```; > ; > Or, would you like to give python 2.7 a try? Do the binary instructions (; > http://psicode.org/psi4manual/master/conda.html#quick-installation); > through the conda update step (replace ""Linux"" with ""MacOSX"" in installer; > file name, if on Mac), be sure your which python points to 2.7, then; > compile psi4 with --python $MINICONDA/bin/python. When we get around to; > supporting python3.5, python2.6 support may go.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196346044.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196569625:201,update,updated,201,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196569625,4,"['install', 'update']","['installation', 'installer', 'update', 'updated']"
Deployability,"OK, this should be working 100% now. The output looks correct on all the systems I've run so far, and I've added tests. I initially tried to use H2O, but it seems there's something weird going on with the CI wave functions there. Namely, when the CI wave function appears to flip its overall sign between the computed and the reference wave function, there are some configurations that *do not* flip their sign. I guess this must be some weird thing to do with symmetry, in that the wave function can individually flip signs within symmetry subblocks...?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301282245:366,configurat,configurations,366,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301282245,1,['configurat'],['configurations']
Deployability,"OK, this sounds like a possible plan. I'm going to try to update dfocc.h and replace orbital related ints with long long ints... fingers crossed it'll work :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1679#issuecomment-511959405:58,update,update,58,https://psicode.org,https://github.com/psi4/psi4/issues/1679#issuecomment-511959405,1,['update'],['update']
Deployability,"OK, with Clang built in release mode I get:; - For `-G""Ninja""`; ```; real	7m35.581s; user	31m11.930s; sys	2m7.600s; ```; - For `-G""Unix Makefiles""`; ```; real	8m9.513s; user	31m30.395s; sys	3m24.407s; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/794#issuecomment-336326567:24,release,release,24,https://psicode.org,https://github.com/psi4/psi4/pull/794#issuecomment-336326567,1,['release'],['release']
Deployability,"OK. About the brown-paperbag, I've now looked it up in the hacker dictionary, and I didn't mean it in that sense, sorry. I use it in the sense of ""maintainer successfully built and tested on their machine, but it's obviously broken on a different configuration they did not test"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-178169351:247,configurat,configuration,247,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178169351,1,['configurat'],['configuration']
Deployability,"OK. I added a test that also servers as an example on some details. Combinations of empty, X-only, C-only and multiple X,C kernels are being tested. Also check out the updated OP.; I am happy with the functionality. This would be ready for review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-612518067:168,update,updated,168,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-612518067,1,['update'],['updated']
Deployability,"OK... I managed to get gpu_dfcc built as a separate tree using gcc/g++ 5.5.0 by adding; `-DCMAKE_PREFIX_PATH` (pointing at `psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK`); and; `-DOpenMP_LIBRARY_DIRS=/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin` ; to the do-configure script. (I'm not sure how that would translate into building it within the psi4 build.). gcc/g++-4.9 gave me compile errors about missing symbols and gcc/g++-6 triggers a known bug with the version of CUDA I have on Debian (9.1.85). (If I had gcc/g++-6 installed and told it to use 4.9, cmake still tried to pull in a load of headers from V6!). It's built, installed into my installed psi4 tree and the gpu_dfcc test jobs run happily with reasonable looking bits about the GPU in the output file. I suspect I'll need to try a bigger job to see what it's really doing, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400462333:566,install,installed,566,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400462333,3,['install'],['installed']
Deployability,"Observations:; * RMcG found that psi4 Mac conda pkg (linked to native Accelerate) and numpy conda pkg (linked to in-env MKL) was fragile wrt psi4/numpy import ordering; * DGAS found that psi4 built from source (linked to native Accelerate but managing its own RPATH) and numpy conda pkg (linked to in-env MKL) was steady wrt psi4/numpy import ordering; * LAB found that psi4 built from source on Linux (linked to in-env OpenBlas) and numpy conda pkg (linked to in-env MKL) was fragile wrt numpy operation w/i psi4. Conclusions:; * Linking to multiple math libs in the same conda env is risky (perhaps more so on Mac than Linux); * Best solution for Mac is to just link Psi4 to MKL, not Accelerate if installing psi4 into same env as numpy (which, for ease of use and distribution, we want to do); * Requires mix and match of default-channel MKL and intel-channel mkl-include (for `mkl.h`) to get full py27/py35/py36 stack; * In practice, rolling this out along with `sse4.1` ""Illegal Instruction 4"" fix for old Mac hardware, so expect solutions in the coming week, rather than the coming day.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-312305798:700,install,installing,700,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-312305798,2,"['install', 'rolling']","['installing', 'rolling']"
Deployability,"Oh bother, python 2.6 doesn't have dictionary comprehensions. I updated qcdb within the last couple weeks with accumulated improvements and python 3.5 prep. It doesn't look like I use dictionary comprehensions all that much, so you can try the following, then report any subsequent errors. ```; return {db: odb.integer_reactions() for db, odb in self.dbdict.items()} # replace this; return dict((db, odb.integer_reactions()) for db, odb in self.dbdict.items()) # with this; ```. Or, would you like to give python 2.7 a try? Do the binary instructions (http://psicode.org/psi4manual/master/conda.html#quick-installation) through the `conda update` step (replace ""Linux"" with ""MacOSX"" in installer file name, if on Mac), be sure your `which python` points to 2.7, then compile psi4 with `--python $MINICONDA/bin/python`. When we get around to supporting python3.5, python2.6 support may go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196346044:64,update,updated,64,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196346044,4,"['install', 'update']","['installation', 'installer', 'update', 'updated']"
Deployability,"Oh dear, I see your PR has become contaminated by non-you commits. This probably happened because you rebased to pull in changes from upstream, tried to push, GH told you that's not a fast-forward so you probably want to pull, you pulled, then pushed. Hence current state. In this instance, that was bad advice from git. From step 9 or the `git push -f origin fastci` text of http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow, what you really want to do in this case is *force push without pulling*. Because you're the only one using that branch on your fork, this is quite safe, and no one will chase you with pitchforks :-). Don't feel bad about about doing this wrong. Most everyone in the psi connection has done this (I did it three times in succession). Next step is to heal your branch. Don't do anything more on that branch locally. Check out master and update it to upstream. Check out a new branch, then apply the commits that are yours. Test and then force push back to GH to the branch that GH knows to be associated with this PR. ```; git checkout master; git pull --rebase upstream master; git checkout -b new_sinf; git cherry-pick b2b49f6; git cherry-pick 147f5b2; ...; # I'm applying the commits you authored in order, just reading the hashes from this webpage above; # it's possible but unlikely that you'll have to resolve conflicts; ...; git cherry-pick 502d234; # build and test; git push origin new_sinf:e2_exch_disp_sinf -f # force added in edit 15 May 2019; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-457765390:889,update,update,889,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-457765390,1,['update'],['update']
Deployability,"Oh yeah, on linux you can try out `conda install psi4 -c psi4/label/agg` . It's a basic compile and low AM integrals, and only py36, but it is using the new 7.2 conda compilers and full-length prefix padding. (Still segfaults linux jupyter `import psi4`, though.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-347016842:41,install,install,41,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347016842,1,['install'],['install']
Deployability,"Oh, I meant that it looks like your installer was from this page (https://psicode.netlify.app/installs/v14rc1/) rather than this page (https://psicode.netlify.app/installs/v14rc2/). May as well try the most recent.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-874976689:36,install,installer,36,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-874976689,3,['install'],"['installer', 'installs']"
Deployability,"Oh, I see you suggested some code changes. I guess that would do the trick; however, the point of `set maxiter 0` is exactly that one would not need to `set fail_on_maxiter false` since taking 0 SCF iterations means that the orbitals aren't updated. `fail_on_maxiter` should only be checked if `maxiter > 0`!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-784464192:241,update,updated,241,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-784464192,1,['update'],['updated']
Deployability,"Oh, sorry I missed the message about the TOCLEN. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Apr 4, 2016 at 10:21 AM, Daniel Smith notifications@github.com; wrote:. > The job did not have enough memory and failed due to a TOCLEN error. I; > shot you a gchat about this awhile back, but did not receive a response and; > consequently forgot about it.; > ; > > On Apr 4, 2016, at 10:03 AM, T. Daniel Crawford <; > > notifications@github.com> wrote:; > > ; > > What was the bug in cc5?; > > ; > > ## ; > > ; > > Prof. T. Daniel Crawford; > > crawdad@vt.edu; > > ; > > On Mon, Apr 4, 2016 at 9:32 AM, Daniel Smith notifications@github.com; > > wrote:; > > ; > > > @lothian https://github.com/lothian I fixed cc5 in this branch. cc5; > > > now; > > > runs, passes, and the output.ref is updated.; > > > ; > > > —; > > > You are receiving this because you were mentioned.; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205297042; > > > ; > > > —; > > > You are receiving this because you authored the thread.; > > > Reply to this email directly or view it on GitHub <; > > > https://github.com/psi4/psi4/pull/315#issuecomment-205307609>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205318258",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205319180:793,update,updated,793,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205319180,1,['update'],['updated']
Deployability,"Oh, this should have been changed at some point to correctly drop these to PSI_SCRATCH. However, it doesn't look like this is present in master. I wonder if this was overwritten at some point... ill make a patch for this sometime today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/646#issuecomment-285708645:206,patch,patch,206,https://psicode.org,https://github.com/psi4/psi4/issues/646#issuecomment-285708645,1,['patch'],['patch']
Deployability,"Ok starting to see the problem, although I don't know how it happened. v0.7 that is posted doesn't have this commit, which fixed it just prior to release: https://github.com/simint-chem/simint-generator/commit/7ea0109da8fe756903eed48b79f772ec2646b69a#diff-5a855f00d19271887654b21b58214a87. I have a feeling this was due to a change in the way I build my website... @loriab you wouldn't happen to have a simint-v.0.7 tarball from your conda builds, do you?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-357044640:146,release,release,146,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-357044640,1,['release'],['release']
Deployability,"Ok thanks for the summary. I agree the current behavior is logical, and; also that there is an inconsistency between Zmat and Cartesians that could; confuse a user. I am very happy there is a little warning printed by the; code if the user is updating the Cartesian coordinates. Perhaps that; warning could be updated to say something like ""(multipole moments of; charged molecules may be affected)"" or something? And/or a sentence or two; in whatever section of the manual might cover something like this?. I also recommend expanding the comment in the props2/input.dat from ""#; Force COM for pole computation"" to the more detailed ""# Force COM; translation so multipoles of charged molecule will match reference values"". On Tue, Sep 26, 2017 at 2:50 PM, Daniel Smith <notifications@github.com>; wrote:. > Im still not completely sure that there is a way to bridge the two.; > Ultimately the modification in-place leads to quite a few errors; however,; > the Psithon API make the in-place a logical operation.; >; > It would be better to do something like:; >; > new_mol = molecule.update({""var1"": 5, ""var2"": 6}); >; > or something similar. Getting that across in something like Psithon would; > be difficult I think.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/782#issuecomment-332298418>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdlu-db-VElBfiw-oAMiX7_n0LAOsks5smUeIgaJpZM4O79qb>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332340271:310,update,updated,310,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332340271,2,['update'],"['update', 'updated']"
Deployability,"Ok then no point of trying the ```psi-dev``` as I'm on a Mac but want to use ```gcc``` (right?). @loriab I just reinstalled python few days ago with homebrew. Before it was installed with the psi4conda package but I decided to get rid of it for now, as I want the source version of the code. But then I reainstalled numpy using pip, as follows, so I guess it's ok?:. ```; >>> pip3 install numpy; Requirement already satisfied: numpy in /usr/local/lib/python3.7/site-packages (1.18.2)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614793642:173,install,installed,173,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614793642,2,['install'],"['install', 'installed']"
Deployability,"Ok, 3 min to inspect and fix code, 1 hr to access it in an actual job to check it's doing the right thing. That `_AM` bit is only in local, which isn't hit by any test case. If you turn on local, it complains about no Weak Pairs TOC entry. Fair enough. Transplant code to main ccsort for better observation, but ccsort is turned off in favor of cctranssort. Force ccsort. Possible helpful note: from objdir, it's not ../psi4/share that's running _unless_ it's been through an install. Rather, stage/... is running. Anyway, change made and it should work, not that anyone could know :-) CC codes free of libint deps. Thanks Andy and Jet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240466044:476,install,install,476,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240466044,1,['install'],['install']
Deployability,"Ok, @andysim and @rmcgibbo, try out a mkl-built psi4 for Mac and see if it fixes both, either, or none of your problems. This is a minimal build with libint (am4) and libxc as internal dylibs. Install into a new env with. ```; >>> conda create -n idp35 psi4test python=3 -c intel -c psi4; >>> source activate idp35; ```. ```; >>> otool -L lib/python3.5/site-packages/psi4/core.so ; lib/python3.5/site-packages/psi4/core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libxc.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```. The env should look like this. Note that py36 is _not_ avail. Also, do _not_ install this into the main env of an anaconda or miniconda – subenvs only.; ```; >>> conda list; # packages in environment at /Users/loriab/linux/miniconda3/envs/idp35:; #; icc_rt 16.0.3 intel_6 [intel] intel; intelpython 2017.0.3 4 intel; mkl 2017.0.3 intel_6 [intel] intel; numpy 1.12.1 py35_intel_8 [intel] intel; openmp 2017.0.3 intel_8 intel; openssl 1.0.2k intel_3 [intel] intel; pip 9.0.1 py35_intel_0 [intel] intel; psi4test 1.2a1.dev370+d9c89ae py35_6 psi4; py 1.4.34 py35_0 defaults; pytest 3.1.2 py35_0 defaults; python 3.5.3 intel_1 [intel] intel; setuptools 27.2.0 py35_intel_0 [intel] intel; sqlite 3.13.0 intel_14 [intel] intel; tcl 8.6.4 intel_16 [intel] intel; tk 8.6.4 intel_26 [intel] intel; wheel 0.29.0 py35_intel_5 [intel] intel; xz 5.2.2 intel_15 [intel] intel; zlib 1.2.11 intel_2 [intel] intel; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311866695:193,Install,Install,193,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311866695,2,"['Install', 'install']","['Install', 'install']"
Deployability,"Ok, @bennybp and @ryanmrichard, take a look at https://github.com/loriab/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:579,install,installation,579,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['install'],['installation']
Deployability,"Ok, @psi4/maintainers and @psi-rking, this mammoth is ready to review. I've updated the RN at the top, and I recommend reading them over before meeting the code. Nitpick away (esp. at numpy stuff that I was still learning at the start), and feel free to question the broader (esp. vibanal) logic flow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834#issuecomment-362098903:76,update,updated,76,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-362098903,1,['update'],['updated']
Deployability,"Ok, I just pushed a (still slightly broken) version that changes the libint2 interface very significantly, and almost has gradients working. The problematic derivatives are those where the angular momentum is greater in the bra than the ket, so perhaps that's a limitation that I need to resolve by ensuring loops satisfy ang mom constraints. Here's how I built the code in case anybody wants to replicate... 1. Clone the libint2 repo and checkout the v2.6 branch. 2. `LIBS=-L/u/andysim/anaconda3/lib CXXFLAGS=""-std=c++14 -I/u/andysim/anaconda3/include"" ../configure --enable-eri=2 --enable-eri3=2 --enable-eri2=2 --with-eri-max-am=5 --with-eri2-max-am=6 --with-eri3-max-am=6 --with-shgauss-ordering=gaussian --prefix=/u/andysim/programming/libint/installdir3 --enable-eri2-pure-sh --enable-eri3-pure-sh`. 3. `make install` (this will take a *very* long time). 4. `make export` - this will generate a tarball that can be used to build a version for Psi4 called `libint-2.7.0-beta.1.tgz`. 5. Untar that tarball somewhere else and modify the file `include/libint2_params.h` to read; ```; #ifndef LIBINT2_MAX_AM_default; # define LIBINT2_MAX_AM_default 4; #endif. #ifndef LIBINT2_MAX_AM_default1; # define LIBINT2_MAX_AM_default1 LIBINT2_MAX_AM_default; #endif. #ifndef LIBINT2_MAX_AM_default2; # define LIBINT2_MAX_AM_default2 LIBINT2_MAX_AM_default; #endif; ```; from line 81 onwards. 6. Make a `build` subdir and from there `cmake .. -DCMAKE_INSTALL_PREFIX=/u/andysim/programming/libint/installdir_2.6 -DLIBINT2_SHGAUSS_ORDERING=gaussian -DCMAKE_CXX_FLAGS=""-fPIC""` The fPIC flag is needed, or you'll get some nasty link errors. 7. Now you can build Psi4. Yay! `cmake .. -DCMAKE_BUILD_TYPE=Debug -DLibint2_DIR=/u/andysim/programming/libint/installdir_2.6/lib/cmake/libint2 -DLibint_DIR=/u/andysim/programming/libint1/installdir/share/cmake/Libint -DCMAKE_CXX_FLAGS=""-g -O0 -gxx-name=/v/apps/gcc/5.4.0/bin/g++ $CXXFLAGS""` The libint1 should be the hacked version with the `Libint_t` changed to `Libint1_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417:815,install,install,815,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417,1,['install'],['install']
Deployability,"Ok, I think this all goes back to the physconst update that introduced a discontinuity in the reference for two points: (wait for full load and jump) https://github.com/psi4/psi4/commit/64ea27fc1afc8fbcaf87eb03304eb8b40e99bf23#diff-4fd9a0a7922adf8bb30dbcc1278ab5d0R12 and following line (6.2 and 6.3 occ). Going to reset the reference unless @robparrish says nay. Also going to set non-zero for 6.5 occ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/129#issuecomment-123487770:48,update,update,48,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-123487770,1,['update'],['update']
Deployability,"Ok, I understand what's going on now. Background is that the windows package goes through a different build process than linux and mac, so it doesn't get pinned as well as it ought (particularly, in this case, for qcelemental and qcengine). And the psi4 channel used to have to host some non-qc packages (like pydantic and pint) before the big base channels (defaults, conda-forge) had the needed versions. Anyway, the env you show has very old (10 releases behind) qcel and qcengine packages, and those use pre-1.8.2 pydantic. The solution is to switch the channel order `-c conda-forge -c psi4` so that only the few packages needed from the psi4 channel (psi4 itself, libint2) get pulled from it. Thanks for alerting us to this issue. For future reference, I'll post this handy command that lets one solve windows environments from non-win platforms: `CONDA_SUBDIR=win-64 conda create -n winprob python=3.8 psi4 -c psi4 -c conda-forge`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1161833721:449,release,releases,449,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1161833721,1,['release'],['releases']
Deployability,"Ok, I'll pull in that test case in the chemps2 follow-up PR. So, [1] I'll accept this after travis re-certifies it, [2] I'll re-rebase #383 , [3] anytime after that one re-certifies, I think it's ready for merging. For anyone following this thread for binary updates, there are now mac versions of 1.7 chemps (libs and bin) and pychemps (py interface) at https://anaconda.org/psi4 . They're untested until either (a) this PR merges into psi4 or (b) I find a small enough test case w/i the chemps2 repo. @SebWouters , I'd like to find a < 30 s test case, but the compiled or py tests churn away for several minutes on my laptop before I kill them. Does this sound like incorrect behavior? Or, if correct, is a shorter test case manageable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388#issuecomment-223826600:259,update,updates,259,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223826600,1,['update'],['updates']
Deployability,"Ok, I've secured `psi4` login at sylabs. I'm for storing them where they can be found. The ""install apptainer"" GHA only had two stars, so I bet there isn't a ready-made ""upload to sylabs GHA"". I'm not sure if it's doing no root or writeable filesys or anything. Do you want repo access to play with it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2951#issuecomment-1536705064:92,install,install,92,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536705064,1,['install'],['install']
Deployability,"Ok, as promised, the QC deps for Psi4 are now available on conda-forge natively for `osx-arm64`. Note that these are cross-compiled on regular `osx-64`, so don't get tested. I'd be glad to hear if/how they're working. You can either build psi4 master and still provide your own libint or use the libint package and build a special branch of psi4. There's a c-f tracker for osx-arm64 packages at https://github.com/orgs/psi4/projects/2/views/5. #### psi4 master; `conda install gau2grid libxc-c optking qcengine -c conda-forge`; #### psi4 with #2861 ; * `conda install gau2grid libxc-c optking qcengine conda-forge/label/libint_dev::libint -c conda-forge`; * or `conda install gau2grid libxc-c optking qcengine libint -c conda-forge/label/libint_dev -c conda-forge` (channel order matters)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603:469,install,install,469,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-1474685603,3,['install'],['install']
Deployability,"Ok, good, I was still trying to untangle what were your srcdirs, objdirs, installdirs, etc. Yes, in ~1.1 and beyond you really shouldn't ever have to set PSIDATADIR. But having it set can definitely confuse everything, which you've found.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271978963:74,install,installdirs,74,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271978963,1,['install'],['installdirs']
Deployability,"Ok, good. Now that psi4 is up-to-date with cb3 and defaults libraries, it's possible to install it into the base env (that was a bad idea when psi4 was distributing gcc52 alongside), but there's still enough turbulence among the big channels that own env is a safer bet. Btw, if your base env is longstanding and contains `gcc-5-mp`, that's a non-modern-psi artifact that can be gotten rid of.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1036#issuecomment-395781344:88,install,install,88,https://psicode.org,https://github.com/psi4/psi4/issues/1036#issuecomment-395781344,1,['install'],['install']
Deployability,"Ok, if one installs into a conda env the packages `psi4` (from us), `gcc`, and `openblas` (from default/anaconda channel), check out a new plugin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172256746:11,install,installs,11,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746,2,['install'],"['install', 'installs']"
Deployability,"Ok, it sounds like we're all in agreement on this. The situation is a bit tricky because of the many spaces needed in a general CAS-like calculation, but that doesn't matter if DETCI just handles the Fock build itself, which is the current situation. Thanks for the quick feedback, everybody. I'll approve this even though I wrote the patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-454778525:335,patch,patch,335,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-454778525,1,['patch'],['patch']
Deployability,"Ok, new pkgs at https://anaconda.org/psi4/dkh/files (and gdma and erd) that should have a sane linkage listing. I get the following. Should be obtainable through `conda update dkh erd gdma -c psi4`. Those are the only ones I could see, and that's reasonable since I usually build the three pure fortran ones together. ```; /Users/github/builds/conda-builds/dkh_1498680189814/_t_env/lib/libdkh.dylib:; 	@rpath/libdkh.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libgfortran.3.dylib (compatibility version 4.0.0, current version 4.0.0); 	@rpath/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	@rpath/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); 	@rpath/libquadmath.0.dylib (compatibility version 1.0.0, current version 1.0.0); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/749#issuecomment-311781954:169,update,update,169,https://psicode.org,https://github.com/psi4/psi4/issues/749#issuecomment-311781954,1,['update'],['update']
Deployability,"Ok, since last review round, this adds tests for CCSD gradients and CCSD(T) energies. As there's more items stored and printed from the cc* modules (i.e., mp2 & ccsd singles), @lothian should have a chance to review. All conventional values actively compared against cfour downstream. All matchable except for _CCSD_ energy in the course of _CCSD(T)_ energy for ROHF FC (see below), though this is the realm where differences expected. I haven't experimented much, but if these differences surprise anyone or if more toggles besides canonicalize come to mind, I'd be glad to hear of them. ```; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-dz-ene0] CCSD CORRELATION ENERGY: computed value (-0.08256310) does not match (-0.08256719) to atol=1e-06 by difference (0.00000409).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-adz-ene0] CCSD CORRELATION ENERGY: computed value (-0.17599322) does not match (-0.17598849) to atol=1e-06 by difference (-0.00000473).; AssertionError: 	test_ccsd_prt_pr_energy_module[ccsd_t_ rohf conv fc: * ccenergy-qz2p-ene0] CCSD CORRELATION ENERGY: computed value (-0.19283228) does not match (-0.19282621) to atol=1e-06 by difference (-0.00000607).; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447:517,toggle,toggles,517,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-627499447,1,['toggle'],['toggles']
Deployability,"Ok, so you've got two branches, ""devdevel_bugs"" and ""cepa_test"" and they both have the same commits. Make note of which commit hashes ought to be in each PR. Then go back to your master branch and update it wrt upstream master (`git checkout master`, `git pull --rebase upstream master`). Make a _new_ branch and apply only the appropriate commits (`git checkout -b cepa_new`, `git cherry-pick aaaa`, `git cherry-pick dddd`). Then push the new branch onto github using the name of the old branch so that the new set of fewer commits show up under the existing PR. It'll have to be a force push because you're rewriting the history of the github branch (`git push -f cepa_new:cepa_test`). Then go back to master (`git checkout master`) and repeat with the t1/d1 commits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/712#issuecomment-302948800:197,update,update,197,https://psicode.org,https://github.com/psi4/psi4/pull/712#issuecomment-302948800,1,['update'],['update']
Deployability,"Ok, sounds safe to leave the `boost::python` out for the time being and go ahead and merge this PR to get the python so `psi4.so` working again. @bennybp, you'll have noticed that I didn't do the initialize and finalize changes possibly necessary for your linux so `libpsi4.so` since I couldn't test the built product. Whenever you like, add a `libpsi4so` target to build your version. Even if the python so and the linux so are identical, I think they'll have different names and install locations (site-packages and lib, respectively), so they'll need different targets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/268#issuecomment-187021220:481,install,install,481,https://psicode.org,https://github.com/psi4/psi4/pull/268#issuecomment-187021220,1,['install'],['install']
Deployability,"Ok, thanks to your very detailed examples, I was able to track down the problem(s). If you pull the latest version of the code, it should be fixed. There's a new test case, extern1, that confirms the correctness of the gradients by finite differences. The PBE results don't seem to match the Gaussian results that you posted; I don't have access to Gaussian so I can't investigate that any further, I'm afraid. A good place to start would be an SCF calculation, because DFT grids are not uniform between packages. It's also a good idea to manually specify the basis set (Psi4 uses the G94 standard) to ensure that both packages are using the exact same functions. With these changes, the energies and gradients should match exactly; if not it's probably confusion between A/Bohr in the Gaussian input for the TIP3P fragment. Until these fixes, Psi4 assumed that the external potential was always in Bohr, but now the code will assume the same units as those used to specify the QM molecule. Good luck!. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184#issuecomment-156220388:772,A/B,A/Bohr,772,https://psicode.org,https://github.com/psi4/psi4/issues/184#issuecomment-156220388,1,['A/B'],['A/Bohr']
Deployability,"Ok, that looks fine for psi4 in its own right. Jupyter must be in a separate environment. That can also work, but it'll need a little configuration -- I'm not surprised the initial jupy couldn't find it. Pretty much `export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/` or `sys.path.append(<same>)` from the jupy env should make the connection. `psi4 --psiapi` gives the exact values. https://psicode.org/psi4manual/master/build_planning.html#how-to-run-psi4-as-executable-or-python-module-from-conda-installation may also be helpful (do set scratch if running anything non-trivial).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195262024:134,configurat,configuration,134,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195262024,2,"['configurat', 'install']","['configuration', 'installation']"
Deployability,"Ok, that makes sense. I got Psi4 by cloning the repo as usual, and it seems like I'm pulling CheMPS2 from the Miniconda p4dev (Psi4 development) environment. Using `conda update chemps2` doesn't show any available updates; the button on the CheMPS2 page says the most recent version is 1.8.4, but the Conda site says it's 1.8.3. I'll try pulling from GitHub and see if that fixes anything. Thanks for the help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347979916:171,update,update,171,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347979916,2,['update'],"['update', 'updates']"
Deployability,"Ok, the 6311g_2d* fluorine was patched in psi4/psi4#1066. The Iodine 6311g_d, I looked up the paper and confirmed it's all-electron, not ecp. However, the paper also lists a _f_ exp for 6-311G(df) for iodine that doesn't match the existing pattern (other elements are _2df_). Since I hope to abandon this for Ben's project, I'm skipping the complication. . The Ga-Kr in Psi4 but not in EMSL a byproduct of EMSL's inconsistency is storing basis set precursors. They only define these elements in the full ""6-31G*"" basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1058#issuecomment-401920388:31,patch,patched,31,https://psicode.org,https://github.com/psi4/psi4/issues/1058#issuecomment-401920388,1,['patch'],['patched']
Deployability,"Ok, the error is a combination of utc & snowflake. Nothing to worry about, I think. Python 3.12 changed some things and Ben replaced some utc commands in the last couple of days. _But_ there was a snowflake bug that he also fixed, and we're grabbing inconsistent qcportal and fractal pieces: https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml#L234 @bennybp's doing a v0.52 release in the next couple days that should fix all this. Fine to merge with these errors until then. ```; E --> snowflake = FractalSnowflake(); E client = snowflake.client(); E h2o = geometry(""""""; E O; E H 1 1.0; E H 1 1.0 2 104.5; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! cannot import name 'now_at_utc' from 'qcportal.utils' !; E ! (/usr/share/miniconda3/envs/p4build/lib/python3.12/site- !; E ! packages/qcportal/utils.py) !; E ! !; E !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563:395,release,release,395,https://psicode.org,https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563,1,['release'],['release']
Deployability,"Ok, the mac conda package is rebuilt (https://anaconda.org/psi4/pcmsolver/files). Having some filesystem problems with the linux one. I'm not re-packaging up the installer (the large psi4conda bash file), so one would need to `conda update pcmsolver` after that installation. Haven't formulated guidelines for when installer gets updated or which `conda update`s to recommend after that installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/440#issuecomment-230793056:162,install,installer,162,https://psicode.org,https://github.com/psi4/psi4/pull/440#issuecomment-230793056,7,"['install', 'update']","['installation', 'installer', 'update', 'updated']"
Deployability,"Ok, the task of this ticket shall be:. Install changes:; - `prefix/include/*` --> `prefix/include/psi4/*`; - `share/psi/*` --> `share/psi4/*`. Source changes:; - `top-source-dir/lib/*` --> `top-source-dir/share/*`. with reference to https://github.com/SebWouters/CheMPS2/blob/master/CMakeLists.txt as needed, since CheMPS2 has already been through packaging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/215#issuecomment-173979302:39,Install,Install,39,https://psicode.org,https://github.com/psi4/psi4/issues/215#issuecomment-173979302,1,['Install'],['Install']
Deployability,"Ok, this has been rebased and a lot of the internal CI commits have been squashed. It's now in pretty good working order. Remaining reservations:. * `qcel.constants` interface may still change; * snsmp2 only works if you pull from my branch (which CM is set up to do; but snsmp2 conda pkg won't work) b/c they use psifiles and physconst. I patched those up, of course, but I don't want to send that PR to RMcG until we're sure about the interface.; * ionization tests still seem fragile. the dftd3-dft-bench-ionization works with CI but not for me locally. Even with these, I think it's pretty much RTG. Glad to hear arguments against or arguments about want qcelemental conda pkg first. #### Note that this _does_ add qcelemental dependence, whereas the previous codata 2014 one didn't (that just used qcelemental-generated data added to _this_ repo).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1234#issuecomment-426084025:340,patch,patched,340,https://psicode.org,https://github.com/psi4/psi4/pull/1234#issuecomment-426084025,1,['patch'],['patched']
Deployability,"Ok, this one's been rebased and is ready for review. Many thanks to @loriab for the help integrating the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1382#issuecomment-445559926:89,integrat,integrating,89,https://psicode.org,https://github.com/psi4/psi4/pull/1382#issuecomment-445559926,1,['integrat'],['integrating']
Deployability,"Ok, tracked down the whole DFHelper metric error in cartesian basis sets. Turns out that this was not an error after all in DFHelper and had to do with the fact that DiskDFJK never passed in it's metric condition tolerance to the FittingHelper. This *was* a bug. This lead to quite a few other changes in the past 5 commits and quite a bit of time to track down. This does mean we have a decision to make DFJK has been using a `1.e-10` tolerance for about two years now rather than a `1.e-12` tolerance. Should we consider changing these tolerances at all?. @loriab Yup, patched up opt13.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446#issuecomment-449669501:571,patch,patched,571,https://psicode.org,https://github.com/psi4/psi4/pull/1446#issuecomment-449669501,1,['patch'],['patched']
Deployability,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:1142,Upgrade,UpgradeHelper,1142,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259,1,['Upgrade'],['UpgradeHelper']
Deployability,"Ok, we're up on c-f at https://anaconda.org/conda-forge/psi4/files . For now, you'll need `conda install psi4 -c conda-forge -c conda-forge/label/libint_dev -c conda-forge/label/psi4_dev`. After the v1.8 release, you can drop the `psi4_dev` but not the `libint_dev`. It'll be changing often as I need to add osx_arm64 and py311. And there's stuff in master it doesn't have, and stuff in it that master doesn't have. But all the main functionality should be fine. ### Please report *any* problems or oddities. None of the docs reflect new build/install procedures yet. I'll be making a list of where folks go awry. First one (that's bitten me and Jonathon):; * To start an environment with conda compilers from c-f, don't use `conda create -n mydev gxx_linux-64 ... -c conda-forge` as the c-f analog to the usual procedure. That will work to form the env, but if you look in `conda list`, there's some deep pieces like the sysroot still present from `defaults`. When you start compiling, it will give you obscure C++ errors outside your code. Instead, use `conda create -n mydev cxx-compiler ... -c conda-forge` (same for all platforms) which will give a cohesive compiler stack.; * (Added 28 Apr) If you use the c-f dep packages to _compile_ psi4, remember to mind libints: `master` + `psi4/label/dev::libint2` or `cf_iterations` + `conda_forge/label/libint_dev::libint` (also note `libint2` vs `libint`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1523559384:97,install,install,97,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1523559384,3,"['install', 'release']","['install', 'release']"
Deployability,"Okay thanks! I will close :). On Fri, Jan 29, 2021 at 10:54 AM Lori A. Burns <notifications@github.com>; wrote:. > Those comments aren't always 1:1 with the contents.; >; > But what's happening for 6-311+G* in particular is that 3 partial basis; > sets are getting merged: the 6-311 defined through Kr, the polarization; > defined through Kr, and the diffuse only defined through Ca. Only elements; > with partial basis sets available for all three pieces show up in the full; > basis file, so Kr, etc. are missing. Looking at 6-311+G* at; > https://www.basissetexchange.org/, that ends at Ca, too, so nothing to; > update. Does this clear up what's going on?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2097#issuecomment-769922422>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AKNB26P7KNIQBAOTKDLTCETS4LR4DANCNFSM4WZDDXEA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2097#issuecomment-769932213:616,update,update,616,https://psicode.org,https://github.com/psi4/psi4/issues/2097#issuecomment-769932213,1,['update'],['update']
Deployability,"Okay, I see. I tried again, installing the proper chemps2 from the conda environment, and using gcc/g++ instead of Intel.; Believe it or not, it did work. And the first few tests are ok. Side note: while testing I noticed that HDF5 detection in CMake fails if 1) HDF5 is installed on the system AND 2) I use conda to install chemps2, which installs hdf5 in conda as well. Should I open a new issue about that ? Or is it too specific a case for being worth the time ?. Thanks for all your input, @loriab and @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288573307:28,install,installing,28,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288573307,4,['install'],"['install', 'installed', 'installing', 'installs']"
Deployability,"Okay, I was able to build after I updated to the latest Psi4 master and changed the git tag in `external/downstream/v2rdm_casscf/CMakeLists.txt`. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426#issuecomment-451784852:34,update,updated,34,https://psicode.org,https://github.com/psi4/psi4/issues/1426#issuecomment-451784852,1,['update'],['updated']
Deployability,"Okay, I'm not a fan of that. I do not install anything, psi4 or anything else, until I know that the tests pass, irregardless of what Travis CI says. Plus, I spend most of my time C-side or work in plugins that also require changes to C-side. I'll give it some thought and see what I can do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235910224:38,install,install,38,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235910224,1,['install'],['install']
Deployability,"Okay, I've updated the body of this issue with five SCF outputs that fail to converge with the default `INTS_TOLERANCE` (1e-12), but do converge when `INTS_TOLERANCE` is explicitly set to 0.0. All calculations were done with a clean version of psi4 master (the previous outputs were with a psi4 branch containing commits from an unrelated project). @susilehtola yes, that is the relevant commit in which the default `INTS_TOLERANCE` changed. I agree that the new default appears conservative enough, and I'm surprised such a small threshold has this kind of effect, even for a large, diffuse basis set. Do you know of any integral screening protocols specific to diffuse functions?. @hokru your observation that some virtual orbitals have negative energies is true for all zero-screening outputs. Would this imply that the SCF solution is not the global minimum? I don't have any specifics about these structures, they're part of a large dataset for a ML project. However, they all look relatively ordinary. @JonathonMisiewicz Your observation that `INTS_TOLERANCE` has a large effect on the very first SCF iteration also is true of all five outputs. In the second example, the first SCF iteration differs between the two outputs by almost four(!) hartree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-779545622:11,update,updated,11,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-779545622,1,['update'],['updated']
Deployability,"Okay, so I think the problem is that i did not have ```gcc``` in the ```/home/artfin/miniconda/envs/psi4-env/bin```. So I installed it with ```conda install -c anaconda gcc=4.8.5``` in the ```psi4-env``` environment. ; After rerunning ```psi4``` I still get:. ```psi4: symbol lookup error: psi4: undefined symbol:```; ```_ZTTSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE```. ```export LD_LIBRARY_PATH=/home/artfin/miniconda/envs/psi4-env/lib:$LD_LIBRARY_PATH``` does not change anything.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-297042835:122,install,installed,122,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-297042835,2,['install'],"['install', 'installed']"
Deployability,Okay. Please rename `cc5a` to `cc5` and update `tests/cc_index`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2655#issuecomment-1203201750:40,update,update,40,https://psicode.org,https://github.com/psi4/psi4/pull/2655#issuecomment-1203201750,1,['update'],['update']
Deployability,"On RDR's point 2,. * Looks like CMake has the following hash algorithms available `file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> filename variable)`; * And ExternalProject has `URL_HASH ALGO=value` to specify them; * `conda install openssl -c conda-forge` followed by `openssl sha256 your_sdist.tar.gz` to compute them. Only problem is that I suspect that's a tarball (single file) procedure, not the GH hash we usually do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/856#issuecomment-344288297:222,install,install,222,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-344288297,1,['install'],['install']
Deployability,"On another issue, the buildtime configuration now seems to ask for LIBINT_OPT_AM, which AFAIK is the maximum angular momentum for which specially optimized code is generated. It doesn't ask a value for LIBINT_MAX_AM at all, which determines the maximum angular momentum for which evaluation routines are generated. In Ed's upstream release of libint, LIBINT_OPT_AM defaults to (LIBINT_MAX_AM/2 + 1). I believe the scripts should be adjusted to make it possible to set OPT_AM and MAX_AM separately, since a large value of OPT_AM generates huge code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180#issuecomment-139102907:32,configurat,configuration,32,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139102907,2,"['configurat', 'release']","['configuration', 'release']"
Deployability,"On second thought, this works as a test, it's just... not a usual test where the value is ""correct"" but a test where the value is ""current"" and sometimes does need to be updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2323#issuecomment-943298421:170,update,updated,170,https://psicode.org,https://github.com/psi4/psi4/pull/2323#issuecomment-943298421,1,['update'],['updated']
Deployability,"On tests: Wonderful! Our standard way to test `oeprop` can be found [here](https://github.com/psi4/psi4/blob/master/tests/pytests/test_dipoles.py). You'll want a new entry for OREMP with both RHF/UHF and Conv/DF integrals. On merging: We've started talking with Ugur Bozkaya on merging his branch in, and we want that merged in before we merge in your contributions. If you want, you can split the `occ` part of this into its own PR, and we can merge that in without complications. If you have no interest in that, it's no problem for us. I'll keep you updated on how the `dfocc` update goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354#issuecomment-988756347:553,update,updated,553,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-988756347,2,['update'],"['update', 'updated']"
Deployability,"On the first, update v2rdm_casscf for fix (`conda update v2rdm_casscf -c psi4`). On the second, so long as you have activated the environment or added the installer to path, you should be good to go. http://psicode.org/psi4manual/master/build_planning.html#how-to-run-psi4-as-executable-or-python-module-from-conda-installation Otherwise, `psi4 --psiapi-path` will give you the commands to make it importable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710#issuecomment-302114845:14,update,update,14,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-302114845,4,"['install', 'update']","['installation', 'installer', 'update']"
Deployability,"On the one hand, for cases like SAPT/auto-CP/etc, I'd be fine with just disabling `num_frozen_docc` -- it's clearly inappropriate in any supersystem calculation where the user knows at the `energy` call that it's going to run sub-systems. But going upthread back to the original issue, there's use-cases like `MBIS_VOLUME_RATIOS` that are an add-on to what would otherwise be a valid standalone calculation to use `num_frozen_docc` with (a monomer calc), and there's still the question of what should happen there. You can't just guess based on calc name, because you don't know if the user is going to call `oeprop` down-stream. Disabling `num_frozen_docc` for any calculation where this *could* happen would effectively ban the keyword. . A reasonableness check, or a good guess, could be inserted before any calculation done on a new mol if `num_frozen_docc` is set in the global scope -- with a warning. Or simply error out if a new mol is calculated without `num_frozen_docc` having been updated (not sure how reasonable that is?). . This is but one user's thoughts, of course.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1212141916:993,update,updated,993,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1212141916,1,['update'],['updated']
Deployability,"On the test failures, can you find out why through http://psicode.org/psi4manual/master/build_planning.html#faq-testsoutput? Especially the ""align"" ones, it might just be something not installed. The ""cubeprop"" ones have a history of being compiler sensitive, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402524125:185,install,installed,185,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402524125,1,['install'],['installed']
Deployability,"One could try to incorporate the debugging ""Printf"" statements from the attached file to mp3_W_intr.cc in your patched-up system to see how far the MP3 calculation progresses. The lines with anavirAnQ1, anavirAnQ2, anavirAnQ3 are probably not relevant after your patches but printing the value of the product (a navirA nQ) out in this main loop would be still helpful. [mp3_W_intr.cc.gz](https://github.com/psi4/psi4/files/3928773/mp3_W_intr.cc.gz)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562292735:111,patch,patched-up,111,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562292735,2,['patch'],"['patched-up', 'patches']"
Deployability,"One more thing, should [these names](https://github.com/andysim/psi4/blob/basisset/psi4/src/export_mints.cc#L890-L891) be updated now that BasisSet is unified? And is it clear where to get QC-frozen core vs. ECP-frozen core?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/734#issuecomment-307963177:122,update,updated,122,https://psicode.org,https://github.com/psi4/psi4/pull/734#issuecomment-307963177,1,['update'],['updated']
Deployability,"One smart feature would be to check whether the energy decreases when changing configurations. This could be a configurable setting in the solver. That is, when the Aufbau principle would lead to changing the configuration, the program should check whether the new occupations lead to a lower energy with the current orbitals than the old occupations with the same orbitals. Although this requires one additional energy evaluation, it probably saves quite a bit of iterations by preventing switches to less-good occupations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-879347426:79,configurat,configurations,79,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-879347426,2,['configurat'],"['configuration', 'configurations']"
Deployability,One thing that needs to be added: update `tests/CMakeLists.txt` with the name of your new test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2344#issuecomment-961182029:34,update,update,34,https://psicode.org,https://github.com/psi4/psi4/pull/2344#issuecomment-961182029,1,['update'],['update']
Deployability,One thing to note about the c++ standard is that it is showing up on the command line twice. I'm almost certain that one is coming from pybind11 interface definitions (which might not be a good idea). . cd /home/ben/programming/psi4/build.reference/psi4-core-prefix/src/psi4-core-build/src/psi4/liboptions && /opt/intel2017/compilers_and_libraries_2017.1.132/linux/bin/intel64/icpc; -I/home/ben/programming/psi4/psi4.reference/psi4/include; -I/home/ben/programming/psi4/psi4.reference/psi4/src; -isystem /home/ben/programming/psi4/build.reference/stage/home/ben/programming/psi4/install.reference/include; -isystem /usr/include/python2.7 -xHost -qopenmp; -std=c++11 -O3 -DNDEBUG -fPIC -std=c++11; -o CMakeFiles/options.dir/print.cc.o; -c /home/ben/programming/psi4/psi4.reference/psi4/src/psi4/liboptions/print.cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281389274:579,install,install,579,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281389274,1,['install'],['install']
Deployability,"Ooh, I like option 2. Thanks for the suggestion! I guess most other packages don't have this problem because they don't generate Makefiles for you. Another solution could be using a relative path so that it always finds the include files relative to the binary, regardless of whether or not they are installed. I guess it depends on how you guys want users to run things. But I think in general, most users will be confused by the current behavior.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410#issuecomment-226007667:300,install,installed,300,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226007667,1,['install'],['installed']
Deployability,"Oops, thanks for the reminder! I'd love to add the things that @loriab suggested so Psi4FockCI can be built with Psi4. It should be a relatively quick fix, so I can try and get that done before tomorrow if that's okay for the 1.4 release timeline. After that's complete, I think everything should be good to go, assuming there aren't any additional issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855#issuecomment-644216732:230,release,release,230,https://psicode.org,https://github.com/psi4/psi4/pull/1855#issuecomment-644216732,1,['release'],['release']
Deployability,"Ouch, sorry @dgasmith. It looks like I used VERSION_GREATER_EQUAL which was added in https://cmake.org/cmake/help/v3.7/release/3.7.html",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-369958097:119,release,release,119,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-369958097,1,['release'],['release']
Deployability,"Ouch, the ""latest"" in http://www.psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-command-line suggests the python-3.5 version, which is `psi4-1.1rc1+6db9b1f-py35_0`. The latest folder really is not latest at all ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1584#issuecomment-475856396:81,install,install-a-,81,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475856396,2,['install'],"['install-a-', 'installer-command-line']"
Deployability,"Ouch, the problem cannot be reproduced with the current 1.5 release as the release version will die even much earlier with ``MemoryError: std::bad_array_new_length``. When calculating array lengths for ampiitudes, residua and density fitting b factors, simple int32 arithmethic is used, which overflows at some point. `new` is then called with a negative size. i fixed this already in my development branch... Input for reproducing the problem:; ```; memory 160 GB; molecule PR20 {; 0 1; Ir -0.0036453 -0.0067418 0.0546240; P 2.3412316 0.2633260 -0.0827666; C 2.8322725 1.6499560 -1.1514034; C 3.1508965 0.5810022 1.5225953; H 2.7397226 1.4975243 1.9544020; H 3.0796627 -2.0414912 -0.0970847; H 4.2325349 0.6920499 1.3971415; H 2.8126116 -1.4065392 -1.7435421; H 3.9236645 1.7279364 -1.1921940; H 2.9451701 -0.2527656 2.1998134; C 3.2265215 -1.1827248 -0.7571267; H 2.4227823 1.4722103 -2.1484758; H 4.2962318 -0.9681045 -0.8457994; H 2.3889675 2.5675955 -0.7590075; P -2.3731653 -0.0356822 -0.0699620; C -3.1396700 1.0016926 1.2209589; C -3.0094090 0.6380218 -1.6352816; H -2.9455753 -2.3068093 -0.7136733; H -4.2946110 -1.5213106 0.1442505; H -2.8800339 -2.1267692 1.0512420; C -3.2080716 -1.6536880 0.1215551; H -4.1029305 0.6851097 -1.6068349; H -2.5824278 1.6361161 -1.7615996; H -4.2216153 1.0653282 1.0682275; H -2.6891213 1.9959193 1.1600952; H -2.6744520 0.0098950 -2.4628143; H -2.9377790 0.5752071 2.2074361; C -0.0445914 0.2683835 1.8872601; O -0.0651117 0.4624335 3.0248963; Cl -0.3329573 2.5059651 -0.2539036; C 0.2355846 -2.0382203 0.3696479; O 0.5870862 -2.4771706 1.4540805; Cl 0.1349587 -0.2718086 -2.3358022; C 0.0008664 -3.0153971 -0.7782268; H -0.1231146 -4.0205893 -0.3660997; H 0.8774694 -2.9930708 -1.4340628; H -0.8449842 -2.7261204 -1.4026378; }. set reference rhf; set basis def2-TZVPP; set{; freeze_core false; cc_type df; mp2_type df; } . set{; e_convergence 1.0E-9; r_convergence 1.0E-8; max_mograd_convergence 1.0E-7; rms_mograd_convergence 1.0E-8; TPDM_ABCD_TYPE direct",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2591#issuecomment-1141902495:60,release,release,60,https://psicode.org,https://github.com/psi4/psi4/issues/2591#issuecomment-1141902495,2,['release'],['release']
Deployability,PACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2886,patch,patch,2886,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['patch'],['patch']
Deployability,"PR #922 should address the `DSD-xxx`-class of functionals. I have also modified the `dashparams.py` in that PR, however I plan to expand the dashparams even further (to include references as well and to automatically generate the functionals listed). . It would be really good to get these tests merged. My wish would be to have reference values from Psi4 1.1 (or even 1.2a1.dev781 - which is the latest conda release, if we trust them) in addition to Q-Chem, to make the comparison with PR #922 easier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/880#issuecomment-369512570:410,release,release,410,https://psicode.org,https://github.com/psi4/psi4/pull/880#issuecomment-369512570,1,['release'],['release']
Deployability,PR intro updated. Is a rebase going to be required before merge?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1069389171:9,update,updated,9,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1069389171,1,['update'],['updated']
Deployability,"Partially, I'm running these tests with `python psi4 --test`:; ```; 2018-12-05T15:54:19.2192346Z ============================= test session starts =============================; 2018-12-05T15:54:19.2192531Z platform win32 -- Python 3.6.6, pytest-4.0.1, py-1.7.0, pluggy-0.8.0 -- C:\tools\miniconda3\python.exe; 2018-12-05T15:54:19.2193957Z cachedir: .pytest_cache; 2018-12-05T15:54:19.2194153Z rootdir: D:\a\1\b\install, inifile:; 2018-12-05T15:54:19.5028575Z collecting ... collected 43 items / 21 deselected; 2018-12-05T15:54:19.5042204Z ; 2018-12-05T15:54:19.5056742Z ..\lib\psi4\tests\test_addons.py::test_gdma SKIPPED [ 4%]; 2018-12-05T15:54:19.5070445Z ..\lib\psi4\tests\test_addons.py::test_mrcc SKIPPED [ 9%]; 2018-12-05T15:54:19.5085682Z ..\lib\psi4\tests\test_addons.py::test_chemps2 SKIPPED [ 13%]; 2018-12-05T15:54:19.5098425Z ..\lib\psi4\tests\test_addons.py::test_dftd3 SKIPPED [ 18%]; 2018-12-05T15:54:19.5111431Z ..\lib\psi4\tests\test_addons.py::test_libefp SKIPPED [ 22%]; 2018-12-05T15:54:19.5124637Z ..\lib\psi4\tests\test_addons.py::test_pcmsolver SKIPPED [ 27%]; 2018-12-05T15:54:19.5137383Z ..\lib\psi4\tests\test_addons.py::test_erd SKIPPED [ 31%]; 2018-12-05T15:54:19.5159968Z ..\lib\psi4\tests\test_addons.py::test_simint SKIPPED [ 36%]; 2018-12-05T15:54:21.2422176Z ..\lib\psi4\tests\test_addons.py::test_json PASSED [ 40%]; 2018-12-05T15:54:21.2458012Z ..\lib\psi4\tests\test_addons.py::test_cfour SKIPPED [ 45%]; 2018-12-05T15:54:21.2473322Z ..\lib\psi4\tests\test_addons.py::test_v2rdm_casscf SKIPPED [ 50%]; 2018-12-05T15:54:21.2488441Z ..\lib\psi4\tests\test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; 2018-12-05T15:54:21.2503496Z ..\lib\psi4\tests\test_addons.py::test_grimme_3c SKIPPED [ 59%]; 2018-12-05T15:54:21.2517677Z ..\lib\psi4\tests\test_addons.py::test_dkh SKIPPED [ 63%]; 2018-12-05T15:54:21.2531717Z ..\lib\psi4\tests\test_addons.py::test_snsmp2 SKIPPED [ 68%]; 2018-12-05T15:54:21.2547307Z ..\lib\psi4\tests\test_addons.py::test_resp SKIPPED [ 72%]; 2018-12",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:412,install,install,412,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['install'],['install']
Deployability,"Patched up, thanks for the comments.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1027#issuecomment-394474834:0,Patch,Patched,0,https://psicode.org,https://github.com/psi4/psi4/pull/1027#issuecomment-394474834,1,['Patch'],['Patched']
Deployability,"Per discussion on conference call, moved to 1.5. Trying to get this in will delay 1.4, and it's not the wisest to do an API reorganization after we already have a release candidate out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2166#issuecomment-832912260:163,release,release,163,https://psicode.org,https://github.com/psi4/psi4/pull/2166#issuecomment-832912260,1,['release'],['release']
Deployability,"Perhaps I am just an idiot, but I can't seem to import the Python bindings; into a Python script unless the library that contains them (in this case; psi4_main.so or libpsi4.so) has the same name as the boost python module; (psi4). This is why I was insisting on a a psi4.so library. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 23, 2016 1:58 PM, ""Lori A. Burns"" notifications@github.com wrote:. > To avoid the complications forecasted by my last comment, we're going to; > update this repo to the current development head. This probably still; > breaks the items mentioned in #442 (comment); > https://github.com/psi4/psi4/pull/442#issuecomment-241027531, but I; > know Ryan's already shifted to some of my commits, so I think the trouble; > of Pulsar maybe having to tie their externalproject psi4 to e705b88; > https://github.com/psi4/psi4/commit/e705b88b562a303e1b789417ad9cfe1648251d63; > is less than the trouble if the development head gets lost or nonlinear. So; > FYI, particularly @bennybp https://github.com/bennybp .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-241819043, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi5xifLl8M1ZtI7tKuEapnaMgrB0Qks5qizSugaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241853765:507,update,update,507,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241853765,1,['update'],['update']
Deployability,"Perhaps a starting point can be porting a few packages in https://github.com/psi4/psi4meta/tree/master/conda-recipes? It'll need to happen for this to succeed, it doesn't require agreeing on a concrete strategy for the full path, and even if for some reason the larger effort fails, it's still a small value add. I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-942624994:340,rolling,rolling,340,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-942624994,1,['rolling'],['rolling']
Deployability,"Pipeline variables now configured. With respect to your other questions, yes, max_am_eri=8 will be plenty high enough. That matches what we distribute for linux now (Mac is 6). And don't worry about py3.5 -- there were enough oddities that we dropped it, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539#issuecomment-467076328:0,Pipeline,Pipeline,0,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467076328,1,['Pipeline'],['Pipeline']
Deployability,"Playing around with absolute errors between finite difference and analytical for a UKS water cation (mean/max):; ```; # Cation Water; B3LYP - 0.000005 / 0.000019; TPSS - 0.000259 / 0.001291; TPSS - 0.000264 / 0.001321 # (150, 434) ; M05 - 0.001182 / 0.006572; ```. Big kick from GGA -> MGGA as commented. Now what if we run UKS and RKS gradients on a neutral molecule:; ```; # Neutral Water; RKS TPSS - 0.000007 / 0.000024; UKS TPSS - 0.000007 / 0.000024; RKS M05 - 0.000020 / 0.000091; UKS M05 - 0.000012 / 0.000091; ```. So now we know pretty much that the XC input and output is correct, the integration of the XC data to gradient is correct, and that the normal XC data to AO gradient integration is correct. With this knowledge we are left with a single piece of code that could be [wrong](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/v.cc#L2477-L2496). We therefore spot the error (a good exercise before looking at the answer) and we now get the following:. ```; # Cation Water - fixed; RKS TPSS - 0.000007 / 0.000024; UKS TPSS - 0.000007 / 0.000028; RKS M05 - 0.000020 / 0.000091; UKS M05 - 0.000012 / 0.000050; ```. This makes me happy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-384487129:595,integrat,integration,595,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-384487129,2,['integrat'],['integration']
Deployability,"Please let us know how you installed Psi4. In particular, we need to know the version number that should appear in the header of your input file. @loriab, I hate to keep pinging you on things, but I feel that the CFOUR interface is your department.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155129126:27,install,installed,27,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155129126,1,['install'],['installed']
Deployability,"Please try the latest 1.4 release. 61K is the size of the aux basis, 12k basis functions in the orbital basis.; It is still a huge(!) calculation and PSI4 is not optimised to deal with that.; Usually negligible matrices can become large enough that our memory estimates are off.; Maybe the memory of your machine ran out. The aux basis can probably be reduced by 20K functions without loss in accuracy with some smart manipulations of the aux basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2288#issuecomment-911433216:26,release,release,26,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-911433216,1,['release'],['release']
Deployability,"Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906#issuecomment-1497949553:7,update,update,7,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497949553,1,['update'],['update']
Deployability,"Please use `PYMOD_INSTALL_LIBDIR` https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L94-L95 to adjust the path. Since Linux build conventions and Python build conventions can't both be fully adhered to, Psi4 prefers the former, especially as one doesn't always want an install into Python's site-packages. I suspect the `__init__` logic will heal if this cmake var is used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2800#issuecomment-1328095947:275,install,install,275,https://psicode.org,https://github.com/psi4/psi4/issues/2800#issuecomment-1328095947,1,['install'],['install']
Deployability,"Possible, but I really doubt it, as glibc mismatches aren't usually healable. Usually this is a symptom of packages depending on different versions of a library and symbols getting sometimes loaded one way and sometimes another depending on import order. Often fixable by swapping import order, but in the psi-in-jupyter case, there's simply nothing to swap. I thoroughly expected this to be fixed when I built with the newer compilers and was alarmed when it wasn't. @sergsb, would you want to try the conda env line in https://github.com/psi4/psi4/issues/862#issuecomment-347074303 ? Possibly more defaults packages have been updated to the new compilers since November and healed the problem. Only thing else I can think of is that I'm still linking libc++ statically (which it should be entirely safe to do, being the least-fundamental of the `glibc`, `libgcc_s`, `libstdc++` trio) and that's running into a symbol error with the jupyter stack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369640226:628,update,updated,628,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369640226,1,['update'],['updated']
Deployability,"Possibly you're looking in `stage/lib/pythonx.x/site-packages/psi4/` for the `core.*so`. Note that without this var https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L94-L95, psi4 installs to generic `stage/lib/psi4`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2690#issuecomment-1215857373:186,install,installs,186,https://psicode.org,https://github.com/psi4/psi4/issues/2690#issuecomment-1215857373,1,['install'],['installs']
Deployability,"Posting Dom's very nice summary for easier perusal and searchability. Effective `scf_type df` Testing: `mem_df` & `disk_df`; =====================================================. All tests listed below examine calls to both `energy()` and `gradient()` when; employing the `scf_type mem_df` and `scf_type disk_df` settings. Each test; employs a different model chemistry (indicated in the test description) and the; Physicists' water molecule, unless otherwise indicated. 1. Physicists' water, HF/6-31G; - **TEST FAILED**; - Error message:; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(); ; RuntimeError:; Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; The most recent 5 function calls were:; ```; 2. HF/cc-pVDZ: Passed; 3. AO DF",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:646,install,install,646,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,3,['install'],['install']
Deployability,"Pretty easy answer, if you look at the results you see pure nonsense in the molecule geometry. Each time you update a variable the molecule geometry is updated, since you do not have `no_com` set the molecule is moving around on you quite a bit and you're not building the geometry you think you are building. If you set `no_com`, everything works fine. This kind of variable setting really only should be used with a z-matrix. I wonder if we should enforce this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/759#issuecomment-313982153:109,update,update,109,https://psicode.org,https://github.com/psi4/psi4/issues/759#issuecomment-313982153,2,['update'],"['update', 'updated']"
Deployability,"Pretty sure I'm using the homebrew boost, but that could still be the; problem. I upgraded homebrew a few days ago, but I didn't recompile PSI; since. The current homebrew boost is 1.60.0, and cmake sees it when it; configures. Everything compiles smoothly, but I get the following error; immediately on any attempt to execute with any input file:. Traceback (most recent call last):. File ""<string>"", line 6, in <module>. File ""/Users/crawdad/psi4/share/psi4/python/aliases.py"", line 39, in; <module>. ```; from wrappers import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/wrappers.py"", line 39, in; <module>. ```; from driver import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/driver.py"", line 265, in; <module>. ```; for ssuper in superfunctional_list():; ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 3365, in; superfunctional_list. ```; sup = superfunctionals[key](key, 1, 1); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1910, in; build_b3lypd1_superfunctional. ```; sup = build_b3lyp_superfunctional(name, npoints, deriv); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1224, in; build_b3lyp_superfunctional. ```; sup = psi4.SuperFunctional.blank(); ```. TypeError: No to_python (by-value) converter found for C++ type:; boost::shared_ptrpsi::SuperFunctional. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:39 PM, Andy Simmonett notifications@github.com; wrote:. > Messaging from 30000 feet, @lothian https://github.com/lothian . Fancy!; > I bet the problem you're seeing is due to some incompatibility between the; > way boost and psi4 are compiled. On the Mac I had a hard time getting a GCC; > version to compile. I had to compile boost with some modified settings to; > get the code to link, but it failed in the way that you described when it; > did link. I had no problems using the Homebrew (or the Psi4 bundled) Boost; > if I used clang.; > ; > —; > Reply to this emai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178853828:82,upgrade,upgraded,82,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178853828,1,['upgrade'],['upgraded']
Deployability,"Printing through SAPT modules updated with a24c32fefdc47feebc8c2bbdbfbc737e17dfc75d, SAPT section in Psi4 manual updated as well with b96745b43112f629146394e9fd57fdbf2aece8fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/37#issuecomment-176528304:30,update,updated,30,https://psicode.org,https://github.com/psi4/psi4/issues/37#issuecomment-176528304,2,['update'],['updated']
Deployability,Probably a patch or two needed to the plugin templates to satisfy Travis.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/844#issuecomment-343331298:11,patch,patch,11,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-343331298,1,['patch'],['patch']
Deployability,"Probably what's happening is that psi4 is packaged only with MKL (except for Apple Silicon) and OpenFF is flexible in BLAS, but conda-forge defaults to OpenBLAS. So one needs to install both together or install psi4 and then openff, as you worked out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3046#issuecomment-1706634544:178,install,install,178,https://psicode.org,https://github.com/psi4/psi4/issues/3046#issuecomment-1706634544,2,['install'],['install']
Deployability,"Psi4 1.0 and its successors in the 1.0 release series have the new SAPT code _and_ build with GCC 4.8. But for all the aforementioned reasons I advise building a 1.1a1 series Psi4 (and the fact that I tested the sapt2+3dmp2 forum post on a 1.1a1 series). We can get around your problem 4.8.2 problem. You don't have to compile _everything_ with >=4.9 GCC, just Psi4. (HDF5 isn't a dependency unless you `ENABLE_CheMPS2=ON`; GSL no longer a dependency at all; Python only an interpreter and header dependency, not library). You can get a gcc 5.2 from conda vis [these instructions](https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/build_planning.rst#how-to-satisfy-the-gcc--49-requirement-on-linux-without-updating-the-os) and use that to compile Psi4, without ever interfering with your system gcc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274087513:39,release,release,39,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274087513,1,['release'],['release']
Deployability,"Psi4 1.5 is quite old at this point.; Ordinarily, I would ask you to try 1.7, but I have no idea why `conda install -c psi4 psi4` is giving you 1.5 instead of the latest release. Maybe you could try `conda install psi4 python=3.9 -c psi4` ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930#issuecomment-1520147773:108,install,install,108,https://psicode.org,https://github.com/psi4/psi4/issues/2930#issuecomment-1520147773,3,"['install', 'release']","['install', 'release']"
Deployability,"Psi4 does not have X2C analytic gradients. If a previous version of Psi4 let you calculate them, that was probably a bug, and they would not have agreed with the numerical gradients. ...It's _probably_ possible to add X2C analytic gradients to Psi4, with updates in Libint.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3151#issuecomment-2029758825:255,update,updates,255,https://psicode.org,https://github.com/psi4/psi4/issues/3151#issuecomment-2029758825,1,['update'],['updates']
Deployability,"Psi4 is really only safe to install with a defaults base, not a c-f base, on Linux. If you added `defaults` to the channel list or `anaconda::intel-openmp`, it'd likely solve, but I think you'd get a runtime error related to symbols and/or mkl- vs openblas-based environment. It's possible to get it working through a careful install order (iirc) or to run two conda envs at once (one defaults-based with psi4 and one c-f based with others) as the ecosystem GHA does. But on the whole, Linux psi4 in c-f env is not suggested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1164880108:28,install,install,28,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1164880108,2,['install'],['install']
Deployability,"Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4public/pull/97; > Commit Summary; > - Use $TMPDIR for default of PSI_SCRATCH when set; > ; > File Changes; > - _M_ src/bin/psi4/psi_start.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-0 (3); > - _M_ src/lib/libpsio/filemanager.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-1 (16); > - _M_ src/lib/libpsio/psio.hpp; > https://github.com/psi4/psi4public/pull/97/files#diff-2 (4); > ; > Patch Links:; > - https://github.com/psi4/psi4public/pull/97.patch; > - https://github.com/psi4/psi4public/pull/97.diff; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105036059:1750,patch,patch,1750,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059,3,"['Patch', 'patch']","['Patch', 'patch']"
Deployability,"Psi4 uses an branch of L2 that hasn't been merged to master and uses CMake detection, not pkgconfig detection. While the detection scheme can be overcome, several build options need to be set for Psi4 such that if you have a L2 install that works with any other QC package, it probably doesn't work with Psi4. See https://github.com/evaleev/libint/issues/190. > Could NOT find Libint2 (missing: Libint2_DIR). I'd guess this is a red herring. Unless you've built from https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 tarball, the Psi4 buildsys as-is won't succeed for L2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2675#issuecomment-1212521732:228,install,install,228,https://psicode.org,https://github.com/psi4/psi4/issues/2675#issuecomment-1212521732,1,['install'],['install']
Deployability,"Psi4 v1.2 has been released, closing this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-404502624:19,release,released,19,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-404502624,2,['release'],['released']
Deployability,"Psi4 version 0.4.186 was installed using miniconda on Linux 4.4.5-200.fc22.x86_64 #1 SMP Thu Mar 10 17:54:17 UTC 2016 x86_64 x86_64. Parenthetical polarization qualifiers in Pople basis set names do not parse reliably. While 6-31G(d), 6-31G(d,p) names are accepted, more elaborately polarized basis set names fail unless [+,()] conversion to _underscore_ is already done. ""set basis **6-311G(2d,2p)**"" is in the attached example. ; Instead of seeking file **6- 311g_2d_2p_.gbs**, it aborts from the boost-python module (instead of from ./share/psi4/python/inputparser.py or similar):. > _An error has occurred. Traceback:; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > psi4.set_global_option(str, str, str); > did not match C++ signature:; > set_global_option(Ss, N5boost6python4listE); > set_global_option(Ss, N5boost6python4listE, PN3psi8DataTypeE); > set_global_option(Ss, i); > set_global_option(Ss, d); > set_global_option(Ss, Ss): File ""<string>"", line 28, in <module>_. [h2o.zip](https://github.com/psi4/psi4/files/190703/h2o.zip)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-201953614:25,install,installed,25,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-201953614,1,['install'],['installed']
Deployability,"Psi5 only exists in arguments about version naming :-) . I agree that `1.0.0` is out-of-sync with the released beta versions like 4.0b5. But it is in sync with the past 11 months (https://anaconda.org/psi4/psi4/files), ever since we started identifying commits by actual version numbers rather than just git hashes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-182956745:102,release,released,102,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182956745,1,['release'],['released']
Deployability,Pushed out a new round of updates mostly removing more pybind11 from the core `size_t`ifying the code base. Also merged through @andysim ECP Basis changes without too much issue.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736#issuecomment-308591444:26,update,updates,26,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-308591444,1,['update'],['updates']
Deployability,"Question 2, I think answer 1 is the accepted one by the C++ community; so I'd strongly recommend that one. Question 1 is a toughie. I don't know if I feel strongly about it, but I do think namespace protecting all header files is good practice and should be done for any library regardless of the number and complexity of headers. This also seems to be the norm for C++ projects, which in turn makes it somewhat of a null issue. If you really don't like installing `efp.h` to `efp/efp.h` I'd say go ahead and remove the extra `efp`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239220614:454,install,installing,454,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239220614,1,['install'],['installing']
Deployability,"Quick notes on timer.dat; * the file is cummulative so run each calc in separate directory so you can match an input file with a timer.dat entry; * timer.dat is mostly for developers so it has just enough info to identify things but not much description; * if you're willing to compile the code (for c-side entries) or edit the installation (for py-side entries), adding more subdivisions to timer.dat is easy; * py-side, have matching labels like https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L196-L198; * c-side, have matching entries like https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L219-L221; * for a single run, timer.dat shows the same info two ways -- ; * one is sorted cummulative time spent w/i each label marker; * other is nested so you can see what label markers contain others; * so the hardest part is finding/adding appropriate marks that you want to measure the time over; * you can get the number of scf iterations from `psi4.variable(""SCF ITERATIONS"")` at the end of a calc. Hope this is broadly helpful. Feel free to ask questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2601#issuecomment-1152763335:328,install,installation,328,https://psicode.org,https://github.com/psi4/psi4/issues/2601#issuecomment-1152763335,1,['install'],['installation']
Deployability,"Quite right on the chicken/egg problem. One approach I considered was to get normal 3-round approval of this PR with the current scf-only changes. The re-rebase it, `c-f` it, and post it to psi4/psi4 as a branch. _Then_ ppl can make additional EFP/PCM/etc. PRs to that branch rather than master, so all the discussion will stay on psi4/psi4 but we won't have an enormous final PR that no one wants to review. For longer term, though, yes, if we had a stable, vetted, low-key release every couple months, there wouldn't be this considerable pressure to maintain master in top-notch working order. And if we wanted to deprecate something, wouldn't take 2 years to get through warning release, then error release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/847#issuecomment-347013624:475,release,release,475,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-347013624,3,['release'],['release']
Deployability,"Quite true. Among the developers, the usual practice has been to run and develop from source (for python) and objdir (for compiled), so there was no assurance of an installation directory. In fact, the psi4 headers weren't installed until recently (and if you build the internal boost, those headers _still_ aren't installed). I fixed recently the generation of plugins from an installed copy, but only for the special case of a conda binary. As an interim solution, you can (1) check out source to permanent storage and keep it around, while still building in objdir in scratch or (2) hardcoding PLUGIN_ values `$PREFIX/share/psi4/plugin/Makefile.template` into (can copy from the sample Makefile you created, then just patch up the header paths). I'll see about having the plugin Makefiles search source _and_ install directories for headers so that all can use plugins the way they want. Thanks for alerting us to this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410#issuecomment-226000498:165,install,installation,165,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226000498,6,"['install', 'patch']","['install', 'installation', 'installed', 'patch']"
Deployability,"RSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; ======================== gdma::gdma ========================; tgt='gdma::gdma' prop='IMPORTED'; value='TRUE'; defined='0'; set='1'; gt='gdma::gdma' prop='INTERFACE_COMPILE_DEFINITIONS'; value='USING_gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; ```; - Yes, you could make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:2489,install,install-,2489,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,2,['install'],['install-']
Deployability,"R`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect superbuild |; | F | | | | no add-on |. **Questions**; - Since it's tricky to detangle plan from implementation, have I violated any of your superbuild principles?; - What to do about installation layout and Config.cmake detection for normal/conda and staged/pre-built?. In the conda build, I don't want ppl confronted with. ```; - bin/; - psi4; - psi4-config; - lib/; - libpython.so; - share/; - psi4/; - python/; - psi4Config.cmake; - externals/; - CheMPS2/; - CheMPS2Config.cmake; - gdma/; - gdmaConfig.cmake; - libint/; - libintConfig.cmake; - dkh/; - dkhConfig.cmake; ```. That's not quite right, but my example install has been turned off. I'll need something like the below, so I shoved all the cmake stuff off into `share/` (https://github.com/loriab/gdma/blob/master/CMakeLists.txt#L67) according to line 5 of the `(WUA)` list above. ```; - bin/; - psi4; - psi4-config; - dftd3; - lib/; - libpython.so; - share/; - cmake/; - psi4/; - psi4Config.cmake; - psi4ConfigVersion.cmake; - psi4Targets.cmake; - gdma/; - gdmaConfig.cmake; ...; ```. Unfortunately, this complicates searches within `stage/` b/c `CMAKE_PREFIX_PATH` has to be hinted (`find_package(gdma CONFIG REQUIRED HINTS ${CMAKE_PREFIX_PATH}/gdma)`) and the current way I've done can't be robust (think ;-lists). I can understand your wanting to separate out extproj() installations as not-quite-up-to-snuff, but the extra hinting level is annoying, so how about keeping `externals/` (controlled by a keyword maybe; `INSTALL_EXTPROJ_SEPARATE`) and dropping the extra namespacing level. So a default installation looks like below. ```; - bin/; -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:4776,install,install,4776,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['install'],['install']
Deployability,"Ran into this issue myself a week ago. It turns out that you need to patch a few file in the MRCC tarball and recompile to make it work (and this has to be done independently of the Psi4 interface) I couldn't see this info advertised on the MRCC website, I happened to browse the ""Patches"" section in their download page and noticed that there were few patches more recent than the tarball I had just downloaded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1866#issuecomment-613267151:69,patch,patch,69,https://psicode.org,https://github.com/psi4/psi4/issues/1866#issuecomment-613267151,3,"['Patch', 'patch']","['Patches', 'patch', 'patches']"
Deployability,"Rebase is done!. > Right, internal build, by adding `ENABLE_gauxc=ON` about here: https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L135 . And please check there's a gauxc test somewhere in ctests or pytests that runs with smoke or quick -- the ones I noticed were marked long. Thanks for the heads-up! There were no smoke/quick tests for the GauXC interface, so I tagged a couple of the tests in `test\_compositejk.py` as such. The Azure file was updated, as well. . Let's see how the CI responds.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2278146048:130,pipeline,pipelines,130,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2278146048,3,"['pipeline', 'update']","['pipelines', 'pipelines-linux', 'updated']"
Deployability,"Rebasing is not trivial for some reason, I am getting this error on force-push. > refusing to allow an OAuth App to create or update workflow `.github/workflows/ecosystem.yml` without `workflow` scope. Tried a few things to get a new token, etc. with no avail. I can work around this, but only a bit later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2813#issuecomment-1333565864:126,update,update,126,https://psicode.org,https://github.com/psi4/psi4/pull/2813#issuecomment-1333565864,1,['update'],['update']
Deployability,"Regarding the debian detection: since CMake decides the folder location,; CMake should also detect it:. The headers are always in /usr/include/chemps2/, but since in; https://github.com/psi4/psi4public/blob/f81842d2e9c255490d450681bc6bdeca551b81e1/src/bin/dmrg/dmrgscf.cc; they are included as ""chemps2/DMRG.h"" etc, it will always need. ```; /usr/include; ```. I suppose CMake will always look there, but it cannot hurt to append this; folder again :-). The library is in the folder. ```; /usr/${CMAKE_INSTALL_LIBDIR}; ```. where the latter part is automatically set by calling. ```; include(GNUInstallDirs); ```. in the CMakeLists.txt. Check; https://github.com/SebWouters/CheMPS2/blob/master/CMakeLists.txt#L10 and; https://github.com/SebWouters/CheMPS2/blob/master/CheMPS2/CMakeLists.txt#L21; for an example. Best wishes,; Sebastian. 2015-07-19 16:23 GMT-04:00 Lori A. Burns notifications@github.com:. > Lingering issues for finalizing CheMPS2:; > ; > -; > ; > Make sure can detect Debian installation of CheMPS2 in ""list of files""; > https://packages.debian.org/sid/libchemps2-dev; > -; > ; > make up new conda package; > -; > ; > add conda package to metapackage; > -; > ; > add chemps2.rst to interfaces in docs; > -; > ; > add chemps2 to binary; > -; > ; > review keywords; > -; > ; > add acceptance for Intel redistributable for chemps2.so; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/150. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-123019591:992,install,installation,992,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-123019591,1,['install'],['installation']
Deployability,Release v1.3 has been feature complete for a bit now and rc1/2 are now out. See #1406 for patch notes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/972#issuecomment-466437484:0,Release,Release,0,https://psicode.org,https://github.com/psi4/psi4/issues/972#issuecomment-466437484,2,"['Release', 'patch']","['Release', 'patch']"
Deployability,"Reminder: Feature freeze is in 4 days (May 1st)! At this point this means that currently open PR's are the only ones that can likely get in. If you have a new feature wanting to get into the Psi4 1.2 release, please contact us today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/960#issuecomment-384961023:200,release,release,200,https://psicode.org,https://github.com/psi4/psi4/issues/960#issuecomment-384961023,1,['release'],['release']
Deployability,"Removed the DETCI refs from the docs table, and in select ccsd. . I also updated occ psivars. It was setting `CURRENT CORRELATION ENERGY` for `{df/cd}-ccsd(t)` but it was not setting `CCSD(T) CORRELATION ENERGY`. The test now runs through a more complete set of cross checking. Testing conv (fnocc, ccenergy) and df/cd (fnocc, occ) both with and without frozen core. . Note: The changes to occ required a rebuild, and I am noticing when doing df/cd (either occ or fnocc module) I get a message printed to `stdout`""No atoms detected, returning"". Are we aware of this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-381827387:73,update,updated,73,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-381827387,1,['update'],['updated']
Deployability,Replace the file in your installed `share/psi4/basis` with the one I linked.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/917#issuecomment-364864174:25,install,installed,25,https://psicode.org,https://github.com/psi4/psi4/issues/917#issuecomment-364864174,1,['install'],['installed']
Deployability,"Reproach well deserved, @jgonthier. Info has been in [CMakeLists.txt](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L71), but that admittedly is an awful error message. I've figured out how to hit it locally (conda directory structure bypasses it all), and a fix will appear soon to a PR near you. Thanks for the report. @edeustua, `-DOpenMP_LIBRARY-DIRS` probably _is_ the intended solution. The usual case where this issue appears is you're building Psi with GCC compilers and MKL LAPACK. For a usual from-intel (as opposed to from-conda) MKL installation, libraries mkl_rt and iomp5 are in different locations. With GCC+MKL, Psi needs to explicitly use iomp5 to suppress the tenacious gomp. But unless the location of iomp5 is already known to CMake through another detection sequence, it can't find the library, hence the (poor) error message you got. `OpenMP_LIBRARY_DIRS` is the intended solution. If I'm misunderstanding your circumstance, please let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118#issuecomment-410467976:555,install,installation,555,https://psicode.org,https://github.com/psi4/psi4/issues/1118#issuecomment-410467976,1,['install'],['installation']
Deployability,"Resolution: for the conda installation environment, so long as not overwriting distributed file (e.g., no renaming S22 database or cc-pvdz basis set), install into normal location on install tree. Reopen if further questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229#issuecomment-182542054:26,install,installation,26,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-182542054,3,['install'],"['install', 'installation']"
Deployability,"Right @andysim, the 3c test was shuffled btwn PRs. The other had 3c but no pytest. This has pytest but no 3c. Either order would have been fine, as nothing's counting on the pytest to pass at this point (and it wouldn't even have run if you didn't have gcp installed), which is good b/c the threading test fails in the multi-pytest mode. So moot, but that's what was going on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627#issuecomment-283435151:257,install,installed,257,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-283435151,1,['install'],['installed']
Deployability,Right now psi is still pulling libxc from our repo (from a 3 series tarball). Any dev/unstable warnings against pulling from gitlab branch to try this out? Timeframe of next release from GL?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-330903372:174,release,release,174,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-330903372,1,['release'],['release']
Deployability,"Right, without more information, the most I'm expecting is to update the error message with something that makes clear whether this is something the user can fix by changing settings as well as what the problem is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682#issuecomment-515464684:62,update,update,62,https://psicode.org,https://github.com/psi4/psi4/issues/1682#issuecomment-515464684,1,['update'],['update']
Deployability,"Same situation, sadly. GCC builds are much slower than Clang builds, and uploading the cache (unrelated to Ninja or Makefiles) really hurts. We might want to move one Linux pipeline to Azure or Circle CI, at some point...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1748#issuecomment-549383231:173,pipeline,pipeline,173,https://psicode.org,https://github.com/psi4/psi4/pull/1748#issuecomment-549383231,1,['pipeline'],['pipeline']
Deployability,"See https://gitlab.com/libxc/libxc/issues/61 for background. This PR updates psi to use the !67 API that will be released in Libxc5. When that happens, revive this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-454926339:69,update,updates,69,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-454926339,2,"['release', 'update']","['released', 'updates']"
Deployability,See the tracker at http://sirius.chem.vt.edu/trac/ticket/270 for the proposed patch.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3#issuecomment-17311560:78,patch,patch,78,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-17311560,1,['patch'],['patch']
Deployability,"Setting TargetLAPACK_DIR (as you suggested) didn't seem to help: it still couldn't find MathOpenMP. However, adding; `-DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}` to external/downstream/gpu_dfcc seems to do the trick and gpu_dfcc builds OK (within the psi4 tree). It does also need CMAKE_CUDA_COMPILER and CUDA_TOOLKIT_ROOT_DIR defining before it's happy (rather than having defaults). I added them to CMakeCache.txt but presumably they'd work if added to the original cmake command. Once built, it fails when trying to install gpu_dfcc within the tree:; ```; [ 64%] Performing build step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; [ 70%] Performing install step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; Install the project...; -- Install configuration: ""Release""; -- Up-to-date: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/gpu_dfcc/gpu_dfcc.so; CMake Error at cmake_install.cmake:61 (file):; file INSTALL cannot find; ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external/__init__.py"". Makefile:84: recipe for target 'install' failed; make[3]: *** [install] Error 1; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:73: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install] Error 2; CMakeFiles/Makefile2:1419: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; It looks like __init__.py isn't being generated from __init__.py.in for some reason. It _could_ be because I've been hacking stuff about: I'll try with a fresh tree (modified with your additions) tomorrow",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634:521,install,install,521,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634,7,"['INSTALL', 'Install', 'Release', 'configurat', 'install']","['INSTALL', 'Install', 'Release', 'configuration', 'install']"
Deployability,"Setup line:; ```; cmake -H. -Bbuild ; -DCMAKE_CXX_COMPILER=clang++ ; -DCMAKE_CXX_FLAGS=""--gcc-toolchain=/global/hds/software/cpu/eb3/GCCcore/5.4.0""; -DCMAKE_Fortran_COMPILER=gfortran; -DCMAKE_C_COMPILER=clang; -DCMAKE_C_FLAGS=""--gcc-toolchain=/global/hds/software/cpu/eb3/GCCcore/5.4.0""; -DPYTHON_EXECUTABLE=`type -P python`; -DENABLE_dkh=ON; ```; Compiling with:; ```; cmake --build . -- -j20; ```; Results for `-GNinja`:; ```; real	41m37.081s; user	458m12.064s; sys	2m24.967s; ```; Results for `-G""Unix Makefiles""`:; ```; real	45m45.169s; user	458m39.363s; sys	2m28.485s; ```; I build Clang in debug mode, I guess that's why the builds are overall slower than with the Intel compilers. I am recompiling Clang in release mode to check that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/794#issuecomment-336314324:714,release,release,714,https://psicode.org,https://github.com/psi4/psi4/pull/794#issuecomment-336314324,1,['release'],['release']
Deployability,"Shameless self-promotion: https://github.com/dev-cafe/cmake-cookbook/tree/master/chapter-10/recipe-04/cxx-example; This is how I went about installing the superbuild, while keeping the staging. I basically do (I guess) what conda does and touch up the `RPATH` upon installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411823579:140,install,installing,140,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411823579,2,['install'],"['installation', 'installing']"
Deployability,Shifting this to 1.4 release. @tomspur any thoughts on the current status here?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-449586775:21,release,release,21,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-449586775,1,['release'],['release']
Deployability,Shifting this to the 1.4 release at earliest. @tomspur @amjames @robertodr Should this remain open or is it superseded by other PR's?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-449586814:25,release,release,25,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-449586814,1,['release'],['release']
Deployability,"Since 1.4 is released, I intend to close this after two days if there isn't an actionable item here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211#issuecomment-900548333:13,release,released,13,https://psicode.org,https://github.com/psi4/psi4/issues/2211#issuecomment-900548333,1,['release'],['released']
Deployability,"Since `check_<lang>_compiler_flag` calls `check_<lang>_source_compiles` defining `CMAKE_REQUIRED_FLAGS` right before the former is called does the trick. I don't know why this isn't done automatically or why it isn't clearly documented, but it works. This is the full patch:; ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index ca7e20054..6cc4ee09e 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -77,10 +77,6 @@ option(ENABLE_erd ""Enables use of ERD instead of Libint (requires Fortran)"" OFF); option(ENABLE_simint ""Enables use of SIMINT two-electron integral library"" OFF); option(ENABLE_gdma ""Enables Stone's GDMA multipole code (requires Fortran)"" OFF); option(ENABLE_PCMSolver ""Enables PCMSolver library (requires Fortran)"" OFF); -option(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_UBSAN"" Enables undefined behavior sanitizer (requires similarly compiled Python and Numpy)"" OFF); -option(ENABLE_MSAN"" Enables memory sanitizer (requires similarly compiled Python and Numpy)"" OFF); # These options are relevant to pasture; option(ENABLE_ccsort ""Enables ccsort plugin installed from psi4pasture"" OFF); option(ENABLE_transqt2 ""Enables transqt2 plugin installed from psi4pasture"" OFF); @@ -114,6 +110,14 @@ option_with_flags(ENABLE_CODE_COVERAGE ""Enables details on code coverage"" OFF; ""-ftest-coverage""); option_with_flags(ENABLE_BOUNDS_CHECK ""Enables bounds check in Fortran"" OFF; ""-ftrapuv -check all -fpstkchk"" ""-fcheck=all"" ""-fbounds-check -fcheck-array-temporaries""); +option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=address -fno-omit-frame-pointer""); +option_with_flags(ENABLE_TSAN ""Enables thread sanitizer (requires similarly compiled Python and Numpy)"" OFF; + ""-fsanitize=thread -fPIE -pie -fno-omit-frame-pointer""); +option_with_flags(ENA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343290538:268,patch,patch,268,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538,1,['patch'],['patch']
Deployability,"Since it is a gradient job I do not simply grab integrals from SCF, but I compute both JKFIT and RI basis DF integrals. Hence, it does not matter to start with the conventional integrals the df-mp2 code proceeds. However, the gradient is not correct because the MO coefficients are from conventional SCF, but it should be from DF-SCF. I think in the case df-mp2 gradients, if user set the conventional SCF, then we should throw an error. Alternatively we may change the reference to DF-SCF and throw a warning for user to explain what we did. Both solutions are okay for me. DFOCC uses frozen cores properly in energy and gradients. I did not add the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients. However, OCC does not use frozen cores in the energy and gradients. In case of OCC the problem is that you need to define different MO class with libtrans, which is not obvious how to do it. I know it is possible now. Andy explained it for me. As a result, there is no plan for OCC module. However, frozen virtuals will be added to DFOCC. In fact, I am waiting for RC1 release, then I will implement add it to Psi4. For the final question, your reference gradient is wrong (mp2tot_vals). This is a very good example how 3-point numeric gradients are unreliable for challenging systems. I reproduce problem with your input. However, if I use ""points 5"", all numeric gradient computations give the same result with the analytic gradients. I also run the same job with gausssian 09 with analytic gradients, which gives the same result with our analytic gradient. Here is the G09 result:. ---. Center Atomic Forces (Hartrees/Bohr); Number Number X Y Z. ---. ```; 1 1 0.000000000 0.000000000 -0.002819339; 2 9 0.000000000 0.000000000 0.002819339; ```. ---. and our analytic gradients:. -Total gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 0.000000000000 0.000000000000 0.002819338251; 2 0.000000000000 0.000000000000 -0.002819338251. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192875912:1207,release,release,1207,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192875912,1,['release'],['release']
Deployability,"Since the energy usually goes up from the SAD value in the first iteration, I would take the first update step from GDM; otherwise I'd use ADIIS/EDIIS+DIIS by default (see discussion in #2235). However, there should be also a setting that if the energy hasn't going down in N consecutive iterations (N=2 or N=3 are reasonable values) that the program should automatically switch to GDM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-874494530:99,update,update,99,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-874494530,1,['update'],['update']
Deployability,Since there has been no action on this I'm going to take care of 1/2 above so that it makes the 1.2 release.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/973#issuecomment-386380973:100,release,release,100,https://psicode.org,https://github.com/psi4/psi4/issues/973#issuecomment-386380973,1,['release'],['release']
Deployability,"Since this has not been updated I added the clarification to the comments and opened a new PR #573 , this will be closed. . Thanks for bringing this up @matt-chan. If you have any questions about libdpd or the rest of psi4, I'm always watching our [forums](http://forum.psicode.org/) and would be happy to help!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-272717731:24,update,updated,24,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-272717731,1,['update'],['updated']
Deployability,"Sir, I just noticed that my psi4 does not reflect the methods that comes with it. Because of this, I can't calculate the potential energy data for the first excited states of the CF molecule. How can I add different methods to the Psi4 I already have compiled and installed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2191716280:264,install,installed,264,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2191716280,1,['install'],['installed']
Deployability,Small update on this. Also moved `==> Pre-Iterations <==` to before the SCF guess:. ```; Minimum eigenvalue in the overlap matrix is 3.2955701764E-02.; Using Symmetric Orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. Note: current guess does not provide; initial orbital occupations. -------------------------; Irrep Nso Nmo ; -------------------------; A 48 48 ; -------------------------; Total 48 48; -------------------------. ==> Iterations <==; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1713#issuecomment-528858486:6,update,update,6,https://psicode.org,https://github.com/psi4/psi4/pull/1713#issuecomment-528858486,1,['update'],['update']
Deployability,"So I've been working on a mostly MPI things in my fork (Distributed CASSCF, Distributed DFJK). I have no idea how this workflow is going to be implemented in the future, so I am not not ready to merge this into the main branch before late October. Unfortunately, I also used quite a bit of the now defunct (I think) libparallel2, so I am not sure where this will go. If I have a fork of PSI4, will this fork be deleted in October? . I also am not ready to merge any of this into a steady branch as it requires quite a bit of finesse (and various libraries) to run, so I would not want to release this yet. . I realize that I will probably have to work with you all in order to merge these changes at some point in the later future. As long as my fork will not get deleted, I am perfectly fine waiting for this time to occur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-248191155:588,release,release,588,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248191155,1,['release'],['release']
Deployability,"So I've installed the intel distribution of Python, and now the numpy seems ok (no more openblas):. ```; bsenjean@MBP-de-Bruno:~/Documents/intelpython3/pkgs/numpy-base-1.17.5-py37_1/lib/python3.7/site-packages/numpy/linalg]$ otool -L lapack_lite.cpython-37m-darwin.so; lapack_lite.cpython-37m-darwin.so:; 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1281.0.0); 	@rpath/libimf.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libsvml.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libirng.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 800.7.0); 	@rpath/libintlc.dylib (compatibility version 1.0.0, current version 1.13.0); ```. However, after reinstalling psi4, it still has gomp:; ```; bsenjean@MBP-de-Bruno:~/Documents/Git_repositories/psi4/objdir]$ otool -L /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so:; 	@rpath/core.cpython-37m-darwin.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. As you said, it seems ```gcc``` tries to impose ```gomp```. How can I bypass it ?; Because I still have the error:; ```; E ImportError: dlopen(/Users/bsenjean/Documents/Git_rep",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:8,install,installed,8,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['install'],['installed']
Deployability,So lack of compatibility with windows is the problem. Installing torsiondrive into my conda env on Linux lets me run the code shared above directly in python. closing this thread for now,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1487515986:54,Install,Installing,54,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1487515986,1,['Install'],['Installing']
Deployability,"So the dump file just contains the CI vector coefficients and bitstrings. The problem is that due to finite numerical precision the ordering of the vectors may change, as several configurations may have the same coefficient. I can probably write a check for that but it'll easily be O(N^2) so I'll have to restrict to rather small calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301224703:179,configurat,configurations,179,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301224703,1,['configurat'],['configurations']
Deployability,"So the fundamental basis sets cc-pvXz need updating for those elements b/c the definitions changed (for some AM) in a later paper? So long as the `cc-pwCVXZ = cc-pVXZ + w-core` and others arithmetic in the NOTES still holds, sounds good to me to update both sets of files. And thanks for checking consistency.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/727#issuecomment-305864188:246,update,update,246,https://psicode.org,https://github.com/psi4/psi4/issues/727#issuecomment-305864188,1,['update'],['update']
Deployability,So the patch I use in Fedora is; http://pkgs.fedoraproject.org/cgit/rpms/libint.git/tree/libint-1.1.5-maxnode.patch. which makes building with options; --with-libint-max-am=10 --with-libint-opt-am=6 \; --with-libderiv-max-am1=6 --with-libderiv-max-am2=5 \; --with-libr12-max-am=5 --with-libr12-opt-am=4; work. I guess I haven't tried playing with the libderiv max am's too much...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/695#issuecomment-300338800:7,patch,patch,7,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300338800,2,['patch'],['patch']
Deployability,"Some good news for building numpy using the Accelerate framework! From the numpy 1.21.0 release notes at https://numpy.org/doc/stable/release/1.21.0-notes.html :. ""With the release of macOS 11.3, several different issues that numpy was encountering when using Accelerate Framework’s implementation of BLAS and LAPACK should be resolved. This change enables the Accelerate Framework as an option on macOS. If additional issues are found, please file a bug report against Accelerate using the developer feedback assistant tool (https://developer.apple.com/bug-reporting/). We intend to address issues promptly and plan to continue supporting and updating our BLAS and LAPACK libraries."". It might very well be that this is what the conda-forge numpy builds are already using. It is difficult to say. If anyone knows how to build numpy from source explicitly using Accelerate, that would be very much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961472062:88,release,release,88,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961472062,3,['release'],['release']
Deployability,"Some things to add to the wishlist from my end:. - [ ] Update COSX to support arbitrary grids via modification of X-matrix handling (see https://github.com/psi4/psi4/issues/2890 for further details).; * Susi notes: I don’t think one needs a separate formulation, just propagating the sign to the A tensor would suffice since it carries a grid index; * Further update: this wish is now addressed in https://github.com/psi4/psi4/pull/2931.; - [ ] Add CFMM and/or DF-CFMM to Psi4 officially. These already exist in Psi4 development branches, but need to be updated to match modern Psi4 developments (e.g., current formulations of CompositeJK) and actually put into Psi4. The first PR for these methods already exists (https://github.com/psi4/psi4/pull/2665).; - [ ] Support for [J-Engine](https://doi.org/10.1063/1.470986). J-Engine is a nice algorithm by the Head-Gordon group to help reduce the prefactor of J-build calculations via reformulation of how integral intermediates are formed and contracted with the density matrix to form Coulomb matrix elements. As it deals with shuffling around how integral intermediates are formed and combined with the density, any J-Engine effort will likely require coordination with the Valeev group and development within Libint2 itself (although the Valeev group did seem interested in J-Engine from what discussions I had with their researchers). ; - [ ] Support for mixed basis sets in TwoBodyAOInt sieving.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763:55,Update,Update,55,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-1509131763,3,"['Update', 'update']","['Update', 'update', 'updated']"
Deployability,"Something that has been brought to my attention that I should clarify and haven't - the bells and whistles that DFJLinK used to have with its IncFock formalism are still there; this PR does not remove those. Rather, this PR updates DFJLinK's IncFock to be as close to DFJCOSK's IncFock as possible while keeping the bells and whistles. This is also where my first question comes from - would it be good to fully standardize the two by changing DFJCOSK's IncFock in this PR, as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792#issuecomment-1325322458:224,update,updates,224,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1325322458,1,['update'],['updates']
Deployability,"Something's very peculiar with the setup if you're getting windows conflicts on a linux install. If it's windows you're targeting, the c-f channel is needed (Win;conda;3.8;stable from https://psicode.org/installs/v17/).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2894#issuecomment-1465255536:88,install,install,88,https://psicode.org,https://github.com/psi4/psi4/issues/2894#issuecomment-1465255536,2,['install'],"['install', 'installs']"
Deployability,"Somewhere I saw a question about whether psi4 in psi4conda could update. . tl;dr no, create a new environment instead, as you'll get the latest, and it's far more predictable. Technically, yes, `conda update psi4 -c psi4` should get you the latest stable release, v1.3.2 from mid-2019, or `conda update psi4 -c psi4/label/dev` should get you the latest nightly build from this week. However, practical advice is that whenever your psi4 is more than a few months old, don't update, just create a new environment, `conda create -n <env-name-of-your-choice> python=3.<python-version-of-your-choice> psi4 -c psi4/label/dev`, activate that env, and use that new psi4 instead of the (remaining, still functional) psi4 in the main environment of psi4conda. The reasons that a freshly solved environment is better is that: (1) Far upstream packages like mkl or numpy or hdf5 update over time and new psi4 may not be built against the older ones in the psi4conda env, so you don't get the newest psi. (2) To make psi4-served conda packages easy to use for both compiling and installing binary psi4, I don't pin dependencies very tightly, so the constraints of the env may not allow all the latest packages to be pulled or even a consistent set of packages. Same advice for any psi4 install, not just psi4conda.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2071#issuecomment-750716944:65,update,update,65,https://psicode.org,https://github.com/psi4/psi4/issues/2071#issuecomment-750716944,8,"['install', 'release', 'update']","['install', 'installing', 'release', 'update']"
Deployability,Sorry I could not make it for 1.9 release :-D,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3097#issuecomment-1845027994:34,release,release,34,https://psicode.org,https://github.com/psi4/psi4/pull/3097#issuecomment-1845027994,1,['release'],['release']
Deployability,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-225993854:452,release,release,452,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854,3,"['install', 'release']","['installs', 'release']"
Deployability,"Sorry for the feature creep, but due to the reorganization and the new default, I thought it'd be best to fix #1473 here as well. I think the last patch should make the C++ side correct also for ECPs, but it appears that the atomic basis sets passed to the code still lack the ECP information. Does anyone know why?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-453435994:147,patch,patch,147,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-453435994,1,['patch'],['patch']
Deployability,"Sorry, I missed your last question, @JonathonMisiewicz. Correct, there [is a bug in MKL](https://community.intel.com/t5/Intel-oneAPI-Math-Kernel-Library/Memory-data-race-problems-in-DGETRI/m-p/1313691) that is being fixed, so all `general_invert` calls are potentially vulnerable. I will note that many of the `general_invert` calls in the code give the correct answer still (including the one fixed in this PR, for many system sizes), as does the standalone code I used to report the issue. It looks like some kind of an uninitialized variable somewhere in Intel's kernels so it's likely to be context-dependent whether the right answer is returned. I'm pretty sure it's been present for at least the last few versions and we only just noticed it, so I suspect it's not that pervasive. Regardless, we need to update our MKL dependency as soon as the fix is published.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-926710761:810,update,update,810,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-926710761,1,['update'],['update']
Deployability,"Sorry, I only just saw this thread. I don't know if this is useful, but here's some code that computes a DFT wavefunction as a simple way to set up a DFT integration grid. It then uses that integration grid to integrate the electron density at the HF level in this example. Most of this was stolen from @dgasmith ; ``` python; import psi4; import numpy as np; np.set_printoptions(suppress=True, precision=4, linewidth=150). mol = psi4.geometry(""""""; O 0.000000000000 0.000000000000 -0.071143036192; H 0.000000000000 -0.758215806856 0.564545805801; H 0.000000000000 0.758215806856 0.564545805801; symmetry c1; """"""). psi4.set_options({""BASIS"": ""sto-3g"",; ""DFT_BLOCK_MAX_POINTS"": 2048,; ""DFT_BASIS_TOLERANCE"": 1.e-10}). method = ""HF""; e, wfn = psi4.energy(method, return_wfn=True); Da = np.array(wfn.Da()). # Vpot builder; _, wfn_V = psi4.energy(""SVWN"", return_wfn=True, molecule=mol); Vpot = wfn_V.V_potential(). points_func = Vpot.properties()[0]. # Loop over the blocks; nelectrons = 0.0; for b in range(Vpot.nblocks()):. # Metadata; block = Vpot.get_block(b); npoints = block.npoints(); lpos = np.array(block.functions_local_to_global()). # Obtain the grid weight; w = np.array(block.w()). # Compute phi!; points_func.compute_points(block); phi = np.array(points_func.basis_values()[""PHI""])[:npoints, :lpos.shape[0]]. # Build a local density; localDa = wfn.Da().np[(lpos[:, None], lpos)]. # Copmute rho; rho = 2.0 * np.einsum('pm,mn,pn->p', phi, localDa, phi, optimize=True); nelectrons += np.dot(w, rho); print(nelectrons); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428:154,integrat,integration,154,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-435946428,3,['integrat'],"['integrate', 'integration']"
Deployability,"Sorry, I should have read your post more carefully. I didn't notice the 3.27.7 bit. I still don't actually understand it b/c [CMP0144](https://cmake.org/cmake/help/v3.27/policy/CMP0144.html) was introduced in 3.27.0 . Maybe Fedora patched it out b/c it could be disruptive? Anyway, I guess FAE's is the safer approach in #3089",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3092#issuecomment-1836312308:231,patch,patched,231,https://psicode.org,https://github.com/psi4/psi4/issues/3092#issuecomment-1836312308,1,['patch'],['patched']
Deployability,"Sorry, I wasn't paying attention; the error is earlier in the traceback. The compilation was picking my Psi4-installed non-conda copy, which is 2.0.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1013#issuecomment-388478956:109,install,installed,109,https://psicode.org,https://github.com/psi4/psi4/issues/1013#issuecomment-388478956,1,['install'],['installed']
Deployability,"Sorry, I'll fix it in a couple days. For the moment, install an older version from before lastfriday. You can get a list of available versions on the anaconda.org/psi4 and directions for installing a particular version at the docs page.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-125036757:53,install,install,53,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-125036757,2,['install'],"['install', 'installing']"
Deployability,"Sorry, I’m out of action due to serious illness so probably can’t be much help. I was working on derivatives but they were buggy. They should in theory be simple, but I don’t know when I’ll be in a position to get back to them. Sorry again :/. > On 7 Nov 2018, at 21:23, Andy Simmonett <notifications@github.com> wrote:; > ; > Description; > ; > This PR builds on the start that @PeterKraus made to get the libecpint library from @robashaw up and running as Psi4's ECP engine.; > ; > Todos; > ; > Notable points (developer or user-interest) that this PR has or will accomplish.; > ; > Improve the speed and stability of the ECP integrals.; > Questions; > ; > @robashaw are the derivative integrals ready to go in Libecpint yet? If not, do you have any idea how much work it will be to implement them?; > Checklist; > ; > Make libecpint play nicely with our CMake infrastructure; > Write wrappers for ECP integral code, making the new code path optional for now; > Tests added for any new features; > Status; > ; > Ready for review; > Ready for merge; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/1340; > ; > Commit Summary; > ; > Import libecpint via CMake; > File Changes; > ; > M CMakeLists.txt (3); > M external/upstream/CMakeLists.txt (1); > A external/upstream/libecpint/CMakeLists.txt (57); > M psi4/CMakeLists.txt (9); > M psi4/psi4Config.cmake.in (2) ; > Patch Links:; > ; > https://github.com/psi4/psi4/pull/1340.patch; > https://github.com/psi4/psi4/pull/1340.diff; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-439512371:1425,Patch,Patch,1425,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-439512371,2,"['Patch', 'patch']","['Patch', 'patch']"
Deployability,"Sorry, I’m still not used to pulling updates to my fork. You are added. On Jun 9, 2016, at 5:21 PM, Lori A. Burns notifications@github.com wrote:. > Hi Eugene, you may have noticed the commit history for this PR has gone mad. I believe what's happened is that (1) this PR is coming from master of your fork rather than a branch of your fork and (2) you merged upstream into master of your fork but because there were the commits from this PR interleaved, the histories of upstream master and your fork master don't perfectly overlap so as to identify just your few commits as the entirely of this PR. Instead the PR includes most of the recent history of psi4.; > ; > It could be that you could just rebase wrt upstream master and this would all resolve. But I'm not a git expert so I just don't know. Could you make me a collaborator on your psi4 fork, and I'll experiment?; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/386#issuecomment-225031319:37,update,updates,37,https://psicode.org,https://github.com/psi4/psi4/pull/386#issuecomment-225031319,1,['update'],['updates']
Deployability,"Sorry, written hastily. Units in [molden format](http://www.cmbi.ru.nl/molden/molden_format.html) `The atomic coordinates x,y,z and atomic displacements dx,dy,dz are all in Bohr (Atomic Unit of length)` seem to indicate non-mass-weighted. And I thought we got this standardized in 64dc61a2bb4 to solve psi4/psi4#225. I'm not sure that analytic freq are adhering to the nmw print standard, but the freq by E and by G should be, for what's written to output. And there was a misspelling of ""frequencies"" introduced in last commit (though I can patch that up later). If you feel comfortable with it, please rebase.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286525423:542,patch,patch,542,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286525423,1,['patch'],['patch']
Deployability,Sounds good. I think we had to patch 1.55 a few times.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236274927:31,patch,patch,31,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236274927,1,['patch'],['patch']
Deployability,"Sounds good. You've noticed that there _is_ as py3 conda package for Mac and Linux (https://github.com/psi4/psi4/issues/466#issuecomment-272589229)? It's stable, just not on the main channel until the 1.1 release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/608#issuecomment-278482121:205,release,release,205,https://psicode.org,https://github.com/psi4/psi4/issues/608#issuecomment-278482121,1,['release'],['release']
Deployability,Sounds great. Update the branch and I'll pull this in.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/432#issuecomment-230635317:14,Update,Update,14,https://psicode.org,https://github.com/psi4/psi4/pull/432#issuecomment-230635317,1,['Update'],['Update']
Deployability,"Sounds like some of these problems are hard to detect at compile time, but; perhaps they could be diagnosed by some simple little program that's; designed to look for these kinds of problems and prints out verbose output?. On Tue, Oct 11, 2016 at 10:24 AM, Lori A. Burns notifications@github.com; wrote:. > There's temporary build docs linked off README: ""Downloading and; > Installing"" on the main GH page.; > ; > It's not the specification of Python that's the problem– CMake detection; > and build are going just fine in these cases. CMake knows the exact,; > absolute path location to everything Psi4 or its build needs. The problem; > is conveying that info to the runtime environment. This is done by baking; > in all those absolute paths into the executable/library rpath. _But_,; > when a path (e.g., /usr/lib) has both a useful thing like libpython.so; > and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of; > knowing that it needs to place /usr/lib into rpath _behind_ the path to; > new gcc or new hdf5. Thus, we end up with runtime path problems, solvable; > only by LD_LIBRARY_PATH or rpath adjustment and relinking.; > ; > This problem is controllable with conda, because it isolates just what; > Psi4 needs into its own namespaced path and stuffs that into rpath. For the; > general developers CMake build, there's no robust solution that I can see.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252931820, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdh_-XGbfJiWX_fQ9cwjC-YYTBSTtks5qy5wGgaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252934079:375,Install,Installing,375,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252934079,1,['Install'],['Installing']
Deployability,Sounds promising! We'd be glad of a status update by Monday morning.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1081#issuecomment-586638524:43,update,update,43,https://psicode.org,https://github.com/psi4/psi4/pull/1081#issuecomment-586638524,1,['update'],['update']
Deployability,"Status update for those who are watching this: my original attempt at the four-index TPDM elements using pre-existing `libdpd` capabilities proved slower than the existing `libiwl` algorithm, so I've had to write new `libdpd` algorithms. The new algorithm working on just the `VVVV` block is beating the `libiwl` algorithm for speed. I'll need to modify the algorithm to handle more general blocks, make sure the speed is still good, and then I can commit the next step. The current plan is to replace the libiwl and presorting steps, but leave the rest of the TPDM logic as-is. This may change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745#issuecomment-561305402:7,update,update,7,https://psicode.org,https://github.com/psi4/psi4/pull/1745#issuecomment-561305402,1,['update'],['update']
Deployability,"Status update on this, including developments from half an hour ago. Numerical tests indicate the difference in reaction energies between the current DF scheme and the new one are negligible. The Excel file is attached if anybody wants to look over the numbers themselves. @ssh2 and I are agreed that between that and some additional theoretical points, we'll just switch the density fitting scheme to fix Point 2. In the new scheme, the cumulant gets contracted against RIFIT integrals as before, and the _entire_ rest of the 2RDM gets contracted against JKFIT integrals. [df_dcft_comparison.xlsx](https://github.com/psi4/psi4/files/3023032/df_dcft_comparison.xlsx). Point 1 is trickier. I've spoken with @jturney about DF gradients in Psi. Although `deriv.cc` does a check to see if the wavefunction is density fitted in the gradient code, it isn't for density fitted gradients but to check whether necessary tensors exist on disk or as member variables. As far as I know, every DF gradient in Psi runs through its own module. DF-MP2 gradients have `dfmp2`, DF-SCF has `scfgrad`, and Bozkaya has `dfocc`. This will require some attention, but likely won't get it until after ACS Orlando.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331:7,update,update,7,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331,1,['update'],['update']
Deployability,"Status update: I have coupled DIIS working for OCEPA. The OMP family should follow without _much_ additional effort. For `ocepa-grad2`, I'm seeing in 13 iterations what took 33 [before my meddling](https://github.com/psi4/psi4/blob/master/tests/ocepa-grad2/output.ref). I'm going to take some extra time before pushing anything to do a thorough convergence study.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1777#issuecomment-582943452:7,update,update,7,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-582943452,1,['update'],['update']
Deployability,Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-611009420:82,update,updated,82,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-611009420,1,['update'],['updated']
Deployability,"Still in the draft stage, but next round of edits is in. I need to give the tests another pass to make sure we have proper coverage. The other major issue is the docs. I'll need to update the section describing excite state psivars, but @loriab, how do you feel about grouping psivars together? See discussion [here](https://github.com/psi4/psi4/pull/2462#discussion_r822344906).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569#issuecomment-1129504422:181,update,update,181,https://psicode.org,https://github.com/psi4/psi4/pull/2569#issuecomment-1129504422,1,['update'],['update']
Deployability,"Sure thing, the link on this page [http://www.psicode.org/psi4manual/master/conda.html](url) points to 1.2, and the link here [http://www.psicode.org/psi4manual/master/build_obtaining.html#binary-installer](url) is also pointed at 1.2. (via a redirect from http://www.psicode.org/downloads.html)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1584#issuecomment-475855914:196,install,installer,196,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475855914,1,['install'],['installer']
Deployability,"Sure, we get a NaN because an occupied and a virtual eigenvalue have the exact same energy. Its an unphysical reference that we didn't anticipate. We probably wont patch this as its an extreme edge case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/561#issuecomment-271457794:164,patch,patch,164,https://psicode.org,https://github.com/psi4/psi4/issues/561#issuecomment-271457794,1,['patch'],['patch']
Deployability,"Switched over Psi4 grid generation to `libgg`. Looks like about a 4x speedup in general for collocation generation. However, it spends ~65% of the time transposing the collocation matrices back to Psi4 order otherwise this would be killer (~12x faster). I can look at a few other transpose options in `libgg`, but it would be tough to spit them out correctly. Still helps dramatically for small molecules/bases and large grids. As a note I pinged TBLIS [here](https://github.com/devinamatthews/tblis/issues/13) seeing if they would implement the common grid operation `A_ij \epsilon_j B_jk -> C_ik`. Looks like they have thought about it, but not yet in. Could be a great use case to pull TBLIS in. I know @amjames or @schiebermc might need it soon. Updated the TODO.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/869#issuecomment-349436402:750,Update,Updated,750,https://psicode.org,https://github.com/psi4/psi4/pull/869#issuecomment-349436402,1,['Update'],['Updated']
Deployability,"Taking another look at this PR, the IncFock used here, uses a large number of matrix variables - separate matrices for the previous, current, and difference matrices for all of D, J, K, and wK. This particular IncFock formalism was replaced in the PR line of https://github.com/psi4/psi4/pull/2792, https://github.com/psi4/psi4/pull/2808, and https://github.com/psi4/psi4/pull/2816. So before this PR gets merged in, the IncFock formalism moved into the JK class in this PR needs to be updated to match.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1503230492:486,update,updated,486,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1503230492,1,['update'],['updated']
Deployability,"Tests are passing, excellent!. Please update `output.ref` for `tdscf-7` and any of the other `tdscf` tests, so we can see how this PR changes the output printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2605#issuecomment-1154396287:38,update,update,38,https://psicode.org,https://github.com/psi4/psi4/pull/2605#issuecomment-1154396287,1,['update'],['update']
Deployability,"Thank you for your help. I was using intel compiler but its license expired, hence I tried GCC. Now, I see that Intel provides free compilers for open-source developers. I will update my system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/404#issuecomment-224869764:177,update,update,177,https://psicode.org,https://github.com/psi4/psi4/issues/404#issuecomment-224869764,1,['update'],['update']
Deployability,Thank you for your update.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1587#issuecomment-482311425:19,update,update,19,https://psicode.org,https://github.com/psi4/psi4/issues/1587#issuecomment-482311425,1,['update'],['update']
Deployability,Thank you loriab! I am mainly looking to install ambit so that I can compile forte. On the way I found CheMSP2 to be potentially useful. Is there a way I could independently install CheMSP2 in the same conda environment as Psi4?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1837045236:41,install,install,41,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837045236,2,['install'],['install']
Deployability,"Thank you! I see the confusion. In plane wave methods and DFT textbooks, the DIIS (also known as density mixing) is performed on electron density for faster convergence. But it seems that in quantum chemistry the DIIS is performed on the Hamiltonian, and thus the density mixing (or update damping you mentioned) becomes optional?. In this case, my definition makes little sense, and I might need some reconsideration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065#issuecomment-1783287520:283,update,update,283,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1783287520,1,['update'],['update']
Deployability,Thank you!! That fixed it. The `<iterator>` modification was already patched in in June.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1300242009:69,patch,patched,69,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1300242009,1,['patch'],['patched']
Deployability,"Thank you, I am glad to hear that the issue is known and fixed. For the future, though, I am troubled that this issue exists without warning in a build that looks safe (marked ""Stable Release""). How can I be more confident in Psi4 results? Is there a test suite including issues like SCF instability (more exhaustive than `psi4 --test`), that I could use to verify a Psi4 build before running large workflows?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211#issuecomment-869272035:184,Release,Release,184,https://psicode.org,https://github.com/psi4/psi4/issues/2211#issuecomment-869272035,1,['Release'],['Release']
Deployability,Thanks @andysim! The caching of conda is currently a bit idiotic: I am nuking `p4env` every time after a build succeeds. Probably we want to keep the conda environment in cache and just activate and update it. @loriab does that sound like a reasonable proposition? I'll tackle it in a subsequent PR.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444493550:199,update,update,199,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444493550,1,['update'],['update']
Deployability,"Thanks @loriab , I'll make a note to schedule that against our March release. We're using psi4 as part of a force-field parameteristion tool (see https://github.com/Acellera/htmd ). It's Python 3 only and distributed via conda so we have to do some nastry tricks to ship the py2 psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/608#issuecomment-278480471:69,release,release,69,https://psicode.org,https://github.com/psi4/psi4/issues/608#issuecomment-278480471,1,['release'],['release']
Deployability,Thanks @loriab. I have updated both PSI4 and Chemps2. Everything is working well.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-230110866:23,update,updated,23,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-230110866,1,['update'],['updated']
Deployability,"Thanks Lori, will check your PR ASAP and try to get a new release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2037#issuecomment-734703041:58,release,release,58,https://psicode.org,https://github.com/psi4/psi4/pull/2037#issuecomment-734703041,1,['release'],['release']
Deployability,"Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together,. cheers,. Andy. On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote:. > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:; > ; > molecule f { ; > f 0.00 0.00 0.00; > }; > set basis cc-pVTZ; > set scf reference uhf ; > energy('ccsd'); > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault).; > ; > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem.; > ; > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc.; > ; > Full backtrace from gdb:; > ; > (gdb) where; > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; > #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; > #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; > #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; > #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22188141:119,patch,patch,119,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22188141,1,['patch'],['patch']
Deployability,Thanks for all the help. I will see if I can push the maintenance to install SL7.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792#issuecomment-607347442:69,install,install,69,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607347442,1,['install'],['install']
Deployability,"Thanks for clarifying, updated my comment above 👍",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2414#issuecomment-1065111417:23,update,updated,23,https://psicode.org,https://github.com/psi4/psi4/issues/2414#issuecomment-1065111417,1,['update'],['updated']
Deployability,Thanks for finding this. I'll push a patch in shortly for it by removing the offending files.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/19#issuecomment-25369147:37,patch,patch,37,https://psicode.org,https://github.com/psi4/psi4/issues/19#issuecomment-25369147,1,['patch'],['patch']
Deployability,"Thanks for helping with that, Lori. I think the CMake and libmints integration tasks are pretty well separated at this point. The stuff I added to external was mostly placeholder so please overwrite at will - you have write access to my branch. It looks like some upstream changes to the CMake config file naming scheme might be needed, so I just decided to build a standalone lib and worry about integration later - therefore you won't be interfering with anything if you feel like changing the CMake stuff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802947421:67,integrat,integration,67,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802947421,2,['integrat'],['integration']
Deployability,"Thanks for making this PR, everything looks great so far to me. I think the last two items are:; - Ensure a full install of Psi4 includes this plugin.; - Manage the tests issue. It looks like SNS-MP2 does not contain tests within the project directory so they cannot be run after installed. I think we can either add a few tests to psi4 with `@requires_sns_mp2` decorators and pytest or have the tests moved within the project folder so they can be run after installation. Any thoughts @rmcgibbo @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-345242566:113,install,install,113,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345242566,3,['install'],"['install', 'installation', 'installed']"
Deployability,"Thanks for making this into a written issue. This was discussed on Slack over a week ago, but not everyone may have seen it. All those test failures trace back to a ""delicate"" part of the OCC module. It has very slow orbital convergence. I [updated the default orbital convergence criteria in OCC to be the same as in DFOCC](https://github.com/psi4/psi4/pull/1772/commits/896a7c22be5c72542b8773ca2a1b9164dee1fc2a), and for all the failing test cases, OCC simply can't converge the orbitals that tightly. You can see the issue about the OCC problem [here](https://github.com/psi4/psi4/issues/1777). It traces back to OCC not coupling orbital and T2 amplitude DIIS, when in my experience, coupling them is crucial for good convergence. I'm in the process of fixing that, but it's slow. A lot of junk in the OCC module needed to be cleaned out to make the code less confusing before I can start making the actual fix. If you want to move that along, you can help by reviewing [the current cleanup PR](https://github.com/psi4/psi4/pull/1789). I wanted to wait to write the next and final PR in the series until that one was accepted, but I may need to start on that now. Until that final PR gets in, we don't have conda builds and certainly can't have the next release. As you're probably wondering about this, these changes are also necessary for a paper I want submitted before I leave CCQC. While I'm quite unhappy these changes needed to be done, that they are made is useful for me personally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462:241,update,updated,241,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462,2,"['release', 'update']","['release', 'updated']"
Deployability,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:142,integrat,integration,142,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,7,['integrat'],"['integrate', 'integration']"
Deployability,Thanks for reminding me.; Now freshly rebased and with a python-patch for DCT. UHF-CCSD re-enabled in pytest as well. ; Ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-658779083:64,patch,patch,64,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-658779083,1,['patch'],['patch']
Deployability,"Thanks for subscribing me to the thread -- I would have missed it otherwise. > I suggest a minimal patch-up rather than thorough update. Is your sense that this is something we could fix on the sns-mp2 side with a minimal patch up? Perhaps by adding the fields we need to `arrays()` or something? I confess that I haven't been following psi4 development closely enough recently to have much of a context here about what the relevant psi4 API changes are or what the simplest way forward is. Is there a ticket you can direct me towards describing the change in the API related to the npz format for file 180?. > In the meantime, snsmp2 is getting dropped from psi4-rt. Is this the plan only if we don't fix the incompatibility in the sns-plugin, or are you planning to drop snsmp2 from psi4-rt regardless of whether or not this gets fixed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1514#issuecomment-459591071:99,patch,patch-up,99,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459591071,3,"['patch', 'update']","['patch', 'patch-up', 'update']"
Deployability,"Thanks for tackling these Python 2 vs. 3 issues. The python driver is the least computationally expensive portion of a given psi4 calculation, so I think we're ok with conversion to items and values and a uniform interface to 2 and 3. On your earlier question of patch format, the psi4/psi4release repo isn't so much a repo as a history-less presentation of the code. We can merge in your pull request, but the more important merge will be to the private psi4/psi4 repository. So, the answer is e-mail or pull request will do very well, especially for simple patches. If you should be interested in doing more, see http://psicode.org/developers.php .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20536164:263,patch,patch,263,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20536164,2,['patch'],"['patch', 'patches']"
Deployability,"Thanks for that; I saw the comments at the end of the build that staged the install and mistook them for an actual install. I sorted that out, and now it can't find numpy, for some strange reason. Will adjust my python path and all should be well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235121191:76,install,install,76,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235121191,2,['install'],['install']
Deployability,"Thanks for the detailed report. I can reproduce the segfault, though for the benefit of other developers, I'll point out that this can be reproduced with `scf` instead of `wb97m-d3bj`. Sophisticated DFT functionality is not the issue here. This looks like a missing option validation at runtime. I'll add that my advisor is _also_ unhappy with the way Psi4 assumes options for precisely situations like these, but I have a few other things to patch before I touch options passing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1182482578:443,patch,patch,443,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1182482578,1,['patch'],['patch']
Deployability,"Thanks for the feedback, @CDSherrill, I'll fix it tomorrow. One quick point:. There are two ways to fix the geometry optimization issue:; - we can toggle `return_total_data=True` if `ptype != 'energy'` (meaning total G/H are calculated and returned); - or we can add the monomers-in-monomers if `ptype != 'energy'` (meaning E/G/H are available, but interaction energies are returned).; I don't think either of those is consistent with 1.3.2's behaviour, though!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520:147,toggle,toggle,147,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869894520,1,['toggle'],['toggle']
Deployability,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:140,install,install,140,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,2,['install'],['install']
Deployability,"Thanks for the input, @hokru. It sounds like you're just the kind of user that we're trying to avoid tripping up. Which `dftd3` gets executed always depends on the contents of your environment variables, i.e., `$PSIPATH:$PATH`. So a hand-compiled one can always take precedence by manipulating those. Or for the miniconda binary case where `conda install psi4` installs `dftd3` alongside, you can always promptly `conda remove dftd3` to eliminate any potential interference from the generic exe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/383#issuecomment-220698751:347,install,install,347,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220698751,2,['install'],"['install', 'installs']"
Deployability,"Thanks for the inquiry. My impression has been that distributing a Py/C++ package through pypi was a bad idea b/c (1) if pip decided to compile rather than download, it'd take hours to build all the deps; (2) unless we vendor 1GB libraries, we'd have to maintain Libint2, gau2grid, Libxc all on pypi, all of which are C/C++; (3) no control of LAPACK implementations and no MKL, so unreliable performance. That said, I really haven't reassessed since the advent of wheels. Would your environment enable you to download the installer (an executable bash script like the Miniconda one)? Download, bash it, and psi4 is preinstalled. Or are docker or singularity images workable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035:522,install,installer,522,https://psicode.org,https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035,1,['install'],['installer']
Deployability,"Thanks for the patch. The [Linux man page](https://man7.org/linux/man-pages/man2/gethostname.2.html) states that; > SUSv2 guarantees that ""Host names are limited to 255 bytes"". [On Windows the maximum length is 256 bytes](https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-gethostname). Also one can remove some of the hard-coding. I will file a PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3043#issuecomment-1704340967:15,patch,patch,15,https://psicode.org,https://github.com/psi4/psi4/pull/3043#issuecomment-1704340967,1,['patch'],['patch']
Deployability,"Thanks for the ping. The install page cmdline is actually correct. Since late December Psi4 has been able to use upstream `-c conda-forge` libint, and there's no longer any need for `-c conda-forge/label/libint_dev`. The latest Psi4 v1.9.1 from February on c-f uses the main-channel libint and updated the install page cmdlines. You're quite right that the psi4 conda package is segfaulting at present. The new L2 main release is built with higher AM, and I forgot that those weren't hot-swappable. The new L2-v2.9.0-linked Psi4 v1.9.1 c-f packages are building now, and will be available w/i a couple hours. _Or_ you can `conda install psi4 libint=2.8.2 python=3.11 -c conda-forge` now, and that should run fine. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3144#issuecomment-1984272079:25,install,install,25,https://psicode.org,https://github.com/psi4/psi4/issues/3144#issuecomment-1984272079,5,"['install', 'release', 'update']","['install', 'release', 'updated']"
Deployability,"Thanks for the quick answer that is helpful. We recently switched all our internal codebase to conda-forge only since mixing default/anaconda and conda-forge were creating an infinite list of either dep solving issues or symbol errors. I still tried to add `anaconda::intel-openmp` or simply the `anaconda` channel to see if I could get it to work for this simple env at least but I got another dep issue: `package psi4-1.6+77475b5-py39hceaf722_0 requires libxc 5.1.5 h84b9e52_1, but none of the providers can be installed`. If you haven't built psi4 from conda-forge but with defaults I am not surprised I am having this kind of issues. Hopefully psi4 will hit conda forge soon xD. Thanks again (feel free to close)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1164884983:513,install,installed,513,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1164884983,1,['install'],['installed']
Deployability,"Thanks for the quick replies/bug fixes!. @susilehtola - we have indeed had our eye on integrating libxc, but it's coming down to manpower/tech debt issues right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2206#issuecomment-870877291:86,integrat,integrating,86,https://psicode.org,https://github.com/psi4/psi4/issues/2206#issuecomment-870877291,1,['integrat'],['integrating']
Deployability,"Thanks for the quick update! I did try a new conda environment and ran into the same problem, but I had a hunch conda might be using cached packages and I couldn't remember the command to clear them, so I tried using `python=3.7` and that works fine!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1984#issuecomment-678794270:21,update,update,21,https://psicode.org,https://github.com/psi4/psi4/issues/1984#issuecomment-678794270,1,['update'],['update']
Deployability,"Thanks for the reminder. I'll patch up the `cookbook`. I'm going to push to get this weekend's PRs in soon so that my other non-separable changes can get posted. All I really wanted to do was add in MP2-D, but there turned out to be a lot of opportunities to either work toward future plans or work to put in hacks to maintain existing plans, and I chose the former. Go ahead and post your PR as-is (or copy over formatting changes). I don't care how much I have to rebase, and if the two PRs merges are going to be close in time, I'll see that yours goes in first. Yeah, I `yapf`ed it, then made the minimal changes toward readability.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1394#issuecomment-443571406:30,patch,patch,30,https://psicode.org,https://github.com/psi4/psi4/pull/1394#issuecomment-443571406,1,['patch'],['patch']
Deployability,"Thanks for the report! We'll change it to `python3` since Psi is 3.6+ anyways. (Or feel free to submit a PR.). Longer term, we've gotten vexed that `ctest` requires the source and build directories and so one can't test an installed Psi4. Because of this, we're moving to `pytest` (currently, the other half of the test suite callable by `psi4 --test`) and will eventually drop that `ctest` machinery. I'll look around for other `bin/python` or `bin/env python` that might be vulnerable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1708#issuecomment-525852062:223,install,installed,223,https://psicode.org,https://github.com/psi4/psi4/issues/1708#issuecomment-525852062,1,['install'],['installed']
Deployability,"Thanks for the report!. I suspect you've been caught out by our rapidly changing DFT code. If you're using psi4conda, that's the last published release, so 1.1, which uses our home-grown DFT functionals before we switched out to Libxc (and added nifty things like `energy(..., dft_functional='b3lyp')`). You can check to confirm with `psi4 --version`. The 1.1 manual is at http://www.psicode.org/psi4manual/1.1/dft.html#advanced-functional-use-and-manipulation. See [here](http://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-into-an-ana-miniconda-distribution) for updating (still with conda) to the pre-1.2 development branch, for which your two commands should behave differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/927#issuecomment-370153860:144,release,release,144,https://psicode.org,https://github.com/psi4/psi4/issues/927#issuecomment-370153860,2,"['install', 'release']","['install-a-', 'release']"
Deployability,"Thanks for the report, @GregorySchwing. Is there any chance you've got qcportal or qcfractal installed? I ask because psi4 itself should be pydantic v2-tolerant (that is, psi4 imports the v1 API from v2), while qcfractal won't be until the v0.52 release. But that's in theory. In practice, I haven't tested lately with v2, and pydantic is moving quickly and is widely used, so it might be safer to pin it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338:93,install,installed,93,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826998338,2,"['install', 'release']","['installed', 'release']"
Deployability,"Thanks for the report. I have been warned about a numpy version issue on Mac. If you haven't already, do try a `conda install numpy=1.22` in your environment and try Psi4 again. I'd have to rebuild the Psiv 1.6.1 packages or rewrite their metadata to fix this at `conda create -n p4env psi4 -c psi4` -time. Hopefully, SciPy and Numpy will have reconciled before I get around to that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2661#issuecomment-1207143526:118,install,install,118,https://psicode.org,https://github.com/psi4/psi4/issues/2661#issuecomment-1207143526,1,['install'],['install']
Deployability,"Thanks for the report. Just to be clear, the stable release psi v1.3.2 (`-c psi4`) isn't expected to be compatible with the latest v2rdm from `-c psi4/label/dev` which has build version (can see in `conda list`) that ends in `_11`. Instead, it should be compatible with the latest v2rdm installable from `-c psi4` which ends in `_6`. Could you be trying to mix conda channel labels?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1775#issuecomment-570012416:52,release,release,52,https://psicode.org,https://github.com/psi4/psi4/issues/1775#issuecomment-570012416,2,"['install', 'release']","['installable', 'release']"
Deployability,"Thanks for the report. We did some considerable infrastructure changes that show up in `0.4` (hence the tag, so it'd be easy to let people know how to avoid them if they went wrong). The nature of the errors you're getting indicates they're definitely infrastructure-related. Could you post the input file for the oeprop error?. In trying to revert, even the architecture independent files (the python driver) will be inconsistent between pre and post `0.4`. So maybe try installing a `0.3` afresh into a new conda environment. And make sure you don't have `PSIDATADIR` envvar defined anywhere, just in case you occasionally work from cloned/compiled copies.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182649776:472,install,installing,472,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182649776,1,['install'],['installing']
Deployability,"Thanks for the response. I will try out conda install again. . In the meantime, I want to explain why I turned to #2024. ; I encounter this issue while installing just normal psi4: (this is from mamba install); ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```. How I get to this point: ; First I used `conda install psi4 -c psi4`, but it will throw me this errors. (nothing is conflicting?) So I turned to `mamba` to help me with the conflicts. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions; ```. This is what mamba got back to me if I installed the normal build. `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires chemps2 >=1.8.10,<1.8.11.0a0, but none of the providers can be installed; ```. So then I tried to install `chemps2`, this can be installed normally. . Then I tried mamba to install psi4 again. . `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires libgfortran >=3.0.1,<4.0.0.a0, but none of the providers can be installed; ```. Lastly, I tried to install libgfortran, but resulted in the above message. ; ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496:46,install,install,46,https://psicode.org,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496,13,['install'],"['install', 'installed', 'installing']"
Deployability,"Thanks for the reviews! @zachglick and I tested this fix on water with the custom basis set reported in the [forum post.](http://forum.psicode.org/t/calculations-with-custom-basis-sets-run-slower-with-multiple-threads/2461). Input file:; ```; memory 50 GB. molecule h2o {; 0 1 ; O; H 1 1.0 ; H 1 1.0 2 109.5; }. set basis custombasis. gradient(""pbe0""); ```; Wall time results:. | | 1 core | 18 cores |; |-- | ---------- | ----------|; | original code | 28.00 s | 2:45.96 s |; | updated code | 28.01 s | 25.96 s |. Let me know if more testing is needed!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2581#issuecomment-1129039670:478,update,updated,478,https://psicode.org,https://github.com/psi4/psi4/pull/2581#issuecomment-1129039670,1,['update'],['updated']
Deployability,"Thanks for the tip. But does it matter if it claims to already be in the; testing stage? I presumed that the test calculations might already be; running and that's why I closed it. On Wed, Jan 27, 2016 at 3:28 PM, Andy Simmonett notifications@github.com; wrote:. > Just a heads-up: you don't need to close the PR and reopen it to apply; > fixes. The request is automatically updated as you add features / fixes,; > until it gets merged.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/224#issuecomment-175864194.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/224#issuecomment-175866345:375,update,updated,375,https://psicode.org,https://github.com/psi4/psi4/pull/224#issuecomment-175866345,1,['update'],['updated']
Deployability,Thanks for the update! It sounds to me like the `mrcc` module should move away from determining RHF/UHF/ROHF from the value of the global and read it off the wavefunction. The ROHF-B-CC wavefunction should have `same_a_b_orbs_ = False`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308#issuecomment-1041551283:15,update,update,15,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1041551283,1,['update'],['update']
Deployability,Thanks for the update! Looks good. @psi4/admins Can we get one more review here?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1713#issuecomment-594742595:15,update,update,15,https://psicode.org,https://github.com/psi4/psi4/pull/1713#issuecomment-594742595,1,['update'],['update']
Deployability,"Thanks for the update!. I still can't reproduce this on either `6e67529` or the 1.3.2 release. What version are you using? I doubt the problem is a version issue, but we might as well check. Second, is the input file you posted actually the input file you ran and found a bug with? In the screenshot Lori posted, the problem is on line 56 of the Python file. The sample you gave doesn't even have that many lines.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524631541:15,update,update,15,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524631541,2,"['release', 'update']","['release', 'update']"
Deployability,"Thanks for the update, @loriab, I appreciate it. At the moment, I'm running outside of `jupyter` and that is fine for now (I didn't have a chance to try installing `psi4` and `jupyter` into separate environments and then adjusting the latter's path to include `psi4` modules). . At the risk of going off topic, I have a tangentially related question. I'm trying to do a torsion scan to derive a potential energy surface and I believe that `psi4` is running really slowly, although since I don't have experience running `psi4`, I don't have a good baseline. I externally created the structures, so `psi4` is really just doing a geometry optimization with `set optking fixed_dihedral = ...` and single point energy for each file, one at a time. Without going into all the details, I'm running at a pretty low level of theory (in my opinion) of B3LYP/3-21G, and for the structures that converge, I'm seeing ~8 hours per file, after allocating 12 cores and 8 GB of memory to `psi4`. So my question is whether there is any speed or efficiency difference of calling the `psi4` executable directly from bash versus through Python / Psithon. . (As a comparative data point, I did the ""same"" calculation with Gaussian 09 on 16 cores and it completed the scan overnight. I say ""same"" because I let Gaussian do the hard work of scanning the dihedral itself, beginning from the initial coordinates instead of using separate files, and I used HF/6-31G.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-347710296:15,update,update,15,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-347710296,2,"['install', 'update']","['installing', 'update']"
Deployability,"Thanks for the update. Feel free to reopen, but until then, PR closed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821#issuecomment-951158154:15,update,update,15,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-951158154,1,['update'],['update']
Deployability,"Thanks for the update. I second what Susi said. In certain cases it is necessary to decontract the primary basis. Then the DF basis needs to be decontracted as well. We have not done extensive tests on this procedure and there is always the risk that linear dependency problems may arise, for which we do not yet have a good solution. On Oct 10, 2016, at 4:18 PM, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. @WDerricottehttps://github.com/WDerricotte , @fevangelistahttps://github.com/fevangelista. I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, BASIS_X2C (formerly REL_BASIS) will always default to the decontracted orbital basis, if not set outright (set basis_x2c my_gigantic_uncontracted_basis). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (set basis cc-pvdz-decon)? If so, what fitting basis should a cc-pvdz-decon use: cc-pvdz-jkfit, cc-pvdz-jkfit-decon, unknown so give up? All the X2C test cases are with scf_type pk, none with DF. Thanks for any hints. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHubhttps://github.com/psi4/psi4/issues/43#issuecomment-252771310, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADgtWdzkkeobqEpzo11t0Vgbt5eRhvl-ks5qysfDgaJpZM4BpdBt. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-252802760:15,update,update,15,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252802760,1,['update'],['update']
Deployability,"Thanks for the update. Since this isn't a bug with ECPs so much as _the code not expecting ECPs at all, and we need to decide whether to adopt a Python library for this_, re-tagged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1497#issuecomment-869222419:15,update,update,15,https://psicode.org,https://github.com/psi4/psi4/issues/1497#issuecomment-869222419,1,['update'],['update']
Deployability,"Thanks for this, this is a nice documentation update! I added a couple of comments for things that could be changed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2302073336:46,update,update,46,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2302073336,1,['update'],['update']
Deployability,Thanks for those extra points - really good to know. On the second point there I was referring to the installer release - does that not create a new installation (hence the lines to alter the bashrc etc in the installation commands)? [I understand my original post was ambiguous/as clear as mud],MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468624824:102,install,installer,102,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468624824,4,"['install', 'release']","['installation', 'installer', 'release']"
Deployability,"Thanks for tip hokru, added the basis from ccrepo and now it is running. ; Are there any plans to update or should I just drop in a pull request?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467166457:98,update,update,98,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467166457,1,['update'],['update']
Deployability,"Thanks for trying out Psi4 and the Psi4/Cfour interface, @tobirolinew. I can probably fix your immediate problem, but please read on. :-). There's three ways of running a Cfour calc through a more flexible front-end right now:; * QCEngine (already present in a Psi4 installation. takes a dictionary as input. geometry must be in Cartesians.); * QCDB (extra install. depends on QCEngine. inputs look much like Psi4/Cfour only `psi4.` becomes `qcdb.`. can use Z-Matrices.); * Psi4/Cfour (the first in time of these three. what you're trying now.). I'm trying to deprecate this last one in favor of the better maintained first ones. Your job would look something like the below through QCEngine (code below not tested). ```; import psi4; import qcengine as qcng. h2o = psi4.geometry(""""""; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; """"""). atomicinput = {; ""driver"": ""energy"",; ""molecule"": h2o.to_schema(dtype=2),; ""model"": {; ""method"": ""ccsd(t)"",; ""basis"": ""aug-pvqz"",; },; ""keywords"": {; ""SCF_CONV"": 12,; ""CC_CONV"": 12,; },; }. atomicresult = qcng.compute(atomicinput, ""cfour""). import pprint; pprint.pprint(atomic_result.dict()); ```. What types of calcs are you ultimately looking to run? How would you like to proceed: the QCEngine or Psi4/Cfour route? Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155480883:266,install,installation,266,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155480883,2,['install'],"['install', 'installation']"
Deployability,"Thanks for trying out psi4! If you're on windows, your conda install line is just right. If you're on linux or mac, you don't actually need the `-c conda-forge`, though it's harmless. Since you're installing from conda, the `psi4 --psiapi` is unnecessary --- activating the environment suffices. I don't have much personal experience with tab help in jupyter, but `help(psi4.set_memory)` returns a sensible docstring for me in interactive python. What you describe does sound with `AttributeError` does sound wrong. If the in-jupyter help is giving you trouble, searching the generated API (https://psicode.org/psi4manual/master/psi4api.html) may work better. If you're new, perhaps check out the tutorials at https://psicode.org/psi4manual/master/index_tutorials.html .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329#issuecomment-947224243:61,install,install,61,https://psicode.org,https://github.com/psi4/psi4/issues/2329#issuecomment-947224243,2,['install'],"['install', 'installing']"
Deployability,"Thanks for warning. Some updates:; * there _are_ conda packages now for `next` off `-c qcarchive` channel; * I still need to look into next+dask+queuing, so leaving psi4 as qcf-master-based for now still good. that is, no rush to polish up and merge this PR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2645#issuecomment-1230387732:25,update,updates,25,https://psicode.org,https://github.com/psi4/psi4/pull/2645#issuecomment-1230387732,1,['update'],['updates']
Deployability,"Thanks for your interest and the offer, @aizvorski. Looking back over this, the necessary QCEngine has now been released, so it looks like my first steps are updating that CI and limiting Libxc to v6 so the functional definitions can be simplified. Certainly intermolecular tests are desirable. There's some ref values here http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/functional/r2SCAN-3c.html but largely they need hunting down in either papers or an independent implementation. I like S22 but anything independent will do. Then Susi had some basis set comments that I haven't looked into yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854:112,release,released,112,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854,1,['release'],['released']
Deployability,"Thanks for your interest in Psi4+BrianQC. The second forum post you linked was a little too optimistic, so there isn't a way I know to use a binary download of Psi4 with BrianQC, even with a license. I don't know for sure, but I think BrianQC is Linux only. At one point the BrianQC ppl had an cloud instance of Psi4+BrianQC, but that doesn't look active now. From their website, their Dec 2023 release works with Psi4 v1.6. If you're not accustomed to compiling code, you might ask the BrianQC people about a cloud setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3132#issuecomment-1936872813:395,release,release,395,https://psicode.org,https://github.com/psi4/psi4/issues/3132#issuecomment-1936872813,1,['release'],['release']
Deployability,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:49,integrat,integration,49,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759,3,['integrat'],"['integrate', 'integrated', 'integration']"
Deployability,Thanks so much @loriab - I think the conda-forge over defaults must have been the root cause of the issues (I have tried the conda command from the link you sent and was reluctant to have a separate conda installation),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468531129:205,install,installation,205,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468531129,1,['install'],['installation']
Deployability,"Thanks so much for the quick response, @philipmnel! This does indeed make the install work; however, `psi4` does not work, appearantly due to issues with pydantic v1 vs v2. Is there a fix for this? Does psi4 v1.8 support pydantic v2?. ```sh; ~ ❯ conda activate psi4-2  base; ~ ❯ psi4 --version  psi4-2; Valid config keys have changed in V2:; * 'allow_mutation' has been removed; Traceback (most recent call last):; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; ^^^^^^^^^^^; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/__init__.py"", line 90, in <module>; from .driver import endorsed_plugins; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/driver/__init__.py"", line 42, in <module>; from qcelemental import constants; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/__init__.py"", line 6, in <module>; from . import covalent_radii, models, molparse, molutil, periodic_table, physical_constants, util, vanderwaals_radii; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/__init__.py"", line 10, in <module>; from .align import AlignmentMill; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/align.py"", line 6, in <module>; from ..util import blockwise_contract, blockwise_expand; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/__init__.py"", line 1, in <module>; from .autodocs import auto_gen_docs_on_demand, get_base_docs; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/autodocs.py"", line 6, in <module>; from pydantic import BaseModel, BaseSettings; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880:78,install,install,78,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880,1,['install'],['install']
Deployability,Thanks to everyone for their feedback. I put all this on the 1.0 Release Notes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-232776501:65,Release,Release,65,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232776501,1,['Release'],['Release']
Deployability,"Thanks very much for the OpenBLAS patch. Do you want to submit it as a Pull Request so you show up as a contributor, or would you rather I just added it to the code?. That install error is bizarre. Make double sure of your permissions and disk space perhaps? We regularly build in parallel (up to `-j12`), so that shouldn't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274822045:34,patch,patch,34,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274822045,2,"['install', 'patch']","['install', 'patch']"
Deployability,"Thanks very much for the report and problem localization. Were you able to test that editing those two lines led to a running psi4 (as opposed to revealing the next problem :-) )? I can understand if permissions on the hpc system don't allow editing. If those two lines are it, I can work on a v1.9.1 release. @coltonbh, I wonder if this is related to the psi4-in-docker error you were getting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126#issuecomment-1911023377:301,release,release,301,https://psicode.org,https://github.com/psi4/psi4/issues/3126#issuecomment-1911023377,1,['release'],['release']
Deployability,"Thanks very much, @amjames! @loriab did a ton of heavy lifting to get them able to be integrated into the docs, so many thanks to her as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/637#issuecomment-284583309:86,integrat,integrated,86,https://psicode.org,https://github.com/psi4/psi4/pull/637#issuecomment-284583309,1,['integrat'],['integrated']
Deployability,"Thanks! Could you instead just update the files tight-cc-pwcvXz.gbs and tight-cc-pwcvXz-ri.gbs that live [here](https://github.com/psi4/psi4/tree/master/psi4/share/psi4/basis/primitives)? Those are the ""w-core"" and ""w-core-ri"" that get composed (e.g., [here](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/NOTES#L336-L337) and [here](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/NOTES#L456-L457)) into the actual basis set files to keep everything consistent. I'll run the scripts afterward to do the composing, so don't feel you need to follow the README in primitives/ . Let me know if you've any questions – I wasn't an experienced scripter when I put this together. On Andy's comments, any comment that you add about the origin to the top of the primitives/*.gbs files will get carried through to the final basis set file. And you're not (I think) creating new basis sets, just adding elements to existing basis sets, so there shouldn't be any need to set fitting defaults for orbital bases. @susilehtola, I am exceedingly grateful for EMSL. But if I trusted their internal consistency on basis sets that should contain the same info, I wouldn't have the crazy basis file summing scheme in Psi4. Admittedly, I haven't reexamined EMSL in a few years.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/727#issuecomment-305643837:31,update,update,31,https://psicode.org,https://github.com/psi4/psi4/issues/727#issuecomment-305643837,1,['update'],['update']
Deployability,"Thanks! It all looks good at first look-through. I'll integrate it with Psi4's build system tonight and report back any issues. * By the way, I think if you remove the LICENSE file (naming it something else or putting the info elsewhere), GitHub will auto-detect the LGPL-3.0 license, as in [this skeleton repo](https://github.com/loriab/licensetestrepo); * Is `Libint` the official upper/lowercasing from the project? Or just the branding casing? I'm not particular, but CMake only allows one casing, so I have to ask when I notice it changing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/693#issuecomment-298452280:54,integrat,integrate,54,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298452280,1,['integrat'],['integrate']
Deployability,"Thanks! Updated the quadrupole, and I'll refer back here if I see other tensors in needs of a.u. labels.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2508#issuecomment-1080012512:8,Update,Updated,8,https://psicode.org,https://github.com/psi4/psi4/pull/2508#issuecomment-1080012512,1,['Update'],['Updated']
Deployability,"Thanks, @andysim, I hadn't noticed the adcc bit. I've copied over adcc 0.15.6 to psi4/label/dev, so it's all installable with one channel. And the pb11 was getting 2.6.0, not 2.6.1. But otherwise, I'm not sure why it worked three days ago, but not more recently. Ready for review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2074#issuecomment-754230142:109,install,installable,109,https://psicode.org,https://github.com/psi4/psi4/pull/2074#issuecomment-754230142,1,['install'],['installable']
Deployability,"Thanks, @hadim, great to hear, and thanks for testing!. General update:; * I've downloaded one of the Linux packages and run full tests, and they all passed. Not much ecosystem activated, though.; * py311 packages are ready, but `osx_arm64` are not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1528019765:64,update,update,64,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1528019765,1,['update'],['update']
Deployability,"Thanks, @j3mdamas, I had meant to cc mj-harvey and @susilehtola and forgot. Target release is probably our regional QC conference ~May 18. We're currently sending back responses to reviewers of the accompanying paper. Todo items are: building Mac plugins from conda distribution, updating some add-on integrations we promised in the paper, paper, relicensing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297866382:83,release,release,83,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297866382,2,"['integrat', 'release']","['integrations', 'release']"
Deployability,"Thanks, @jturney . So add `lib` and `bin` under installed `include` rather than add `${PROJECT_SOURCE_DIR}/src/bin` & `${PROJECT_BINARY_DIR}/src/bin` to cmake includes_directories? If so, I'll patch that up tonight.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/376#issuecomment-218550316:48,install,installed,48,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218550316,2,"['install', 'patch']","['installed', 'patch']"
Deployability,"Thanks, @loriab. I have tried a number of things, including ensuring that MKL and libiomp5 from the native compilers are used instead of conda versions of those libs, and nothing seems to change the outcome of the unpatched code with multiple threads. It's worth noting that running on an non-AVX platform removes the Valgrind errors, but doesn't change the answer so I think they're probably just coming from AVX memmove somehow confusing Valgrind. At this point, my only guess is that perhaps some weird nested thread issue is maybe causing diagonalization issues, but I have no idea why that would be a problem for the unpatched code and not for the patched code. In case anybody wants to check the results, [here's a standalone code](https://github.com/andysim/DiagonalizationTest) that diagonalizes the exact same matrix, using the exact same LAPACK calls as the unpatched code. So far it looks like things are working in Psi4 after the fix, but I just wanted to document all of the suspicious behavior on this PR, in case we see similar problems in future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-905701855:653,patch,patched,653,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-905701855,1,['patch'],['patched']
Deployability,"Thanks, @maxscheurer, centralized L2 initialize/finalize seems to work just fine. Now the orderings toggles only effect core.cc (L2 init), solidharmonics.cc (sh ordering), and points.cc (g2g ordering).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2861#issuecomment-1445475438:100,toggle,toggles,100,https://psicode.org,https://github.com/psi4/psi4/pull/2861#issuecomment-1445475438,1,['toggle'],['toggles']
Deployability,"Thanks, @susilehtola, but I patched up master earlier in the week to get things working, as the retweaking and py interface stuff were wrt master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-386621898:28,patch,patched,28,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-386621898,1,['patch'],['patched']
Deployability,"Thanks, I will update my input file writer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182670019:15,update,update,15,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182670019,1,['update'],['update']
Deployability,"Thanks, I'll add that as it can ease detection. In this case it's not important as Libint2 only uses Python to process files for the Fortran interface and for some testing -- any Python will do there. https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805:281,INSTALL,INSTALL,281,https://psicode.org,https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805,1,['INSTALL'],['INSTALL']
Deployability,"Thanks, just wanted to confirm! I switched to libint==2.8.2 in the meantime but look forward to a new release 👍 Feel free to close when you see fit. I'll update the title.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3144#issuecomment-1984275496:102,release,release,102,https://psicode.org,https://github.com/psi4/psi4/issues/3144#issuecomment-1984275496,2,"['release', 'update']","['release', 'update']"
Deployability,"Thanks, this would probably fix most of it (most important psi4 headers actually installed). I just worry that once psi4, add-ons, perhaps openbabel, etc. are all getting installed into one conda env that eventually there will be `molecule.h` collisions. Or `physconst.h`. Will accept PR but not syncing with private immediately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/218#issuecomment-172794407:81,install,installed,81,https://psicode.org,https://github.com/psi4/psi4/pull/218#issuecomment-172794407,2,['install'],['installed']
Deployability,"Thanks. I mainly wanted to get the discussion going. Slack can be used also in the browser. psi4 is very modular and having `adcc` as a fully optional dependency, c-layer or python-layer, is fine. The `psi4 plugins` (see http://psicode.org/psi4manual/master/prog_newcode.html) are independent of the psi4 code base, though can still use psi4's libraries. Examples would be `sns-mp2` or `v2rdm_casscf`. There you can basically do whatever you want. With python-layer integrations I mean that you add to the proper psi4 python code base. This is what you already did. http://psicode.org/psi4manual/master/proc_py.html; Check the managed method section for how multiple implementations of the same method are usually handled. You only need the `wfn` object?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547399286:466,integrat,integrations,466,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547399286,1,['integrat'],['integrations']
Deployability,"Thanks. We're planning to work on synchronizing `dfocc` back with the rest of Psi after the 1.6 release later this month, so I'm hopeful we can get this moving again. Depending on what my schedule looks like, I may be able to split this PR up so that we can get the `occ` part in, while we're waiting on `dfocc`. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077:96,release,release,96,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-1118547077,1,['release'],['release']
Deployability,"That DFT interface hasn't changed in years, so I'm inclined to think it's a Boost version thing. A temporary workaround (if you don't need DFT) is to comment out in `driver.py`. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178857878:192,Integrat,Integrate,192,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178857878,1,['Integrat'],['Integrate']
Deployability,"That does make some sense. And by this, I don't mean that it's ideal, just that it appears consistent about what we know about the chips. The main differences in M1 Pro and Max are not the CPU itself (unless you count the 8-core binned M1 Pro), but other things like the GPU core count and media encoders. The CPU itself is the same for the two chips. It seems like the extra memory bandwidth advertised for the M1 Max is somehow reserved for other parts of the chip, with the CPU memory bandwidth being about the same as that of the Pro. I don't see whether the author of the linked article used the 24 or 32 core GPU M1 Max model. I wonder how the CPU memory bandwidth would differ between the two models. i.e. whether getting the 24 core model ""frees up"" more bandwidth for the CPU or whether the total shared bandwidth is just decreased. Who knows. That seems like it would be a very expensive experiment at the very least. Another interesting question would be whether the M1 Pro CPU can fully utilize all 200 GB/s, or whether that's slashed in half as well. It seems like the 400 GB/s marketing claim has to come with this asterisk. It's a real shame that executives and marketing teams at large companies sometimes get in the way of the innovations their engineering teams produce, to the detriment of consumers and developers. EDIT: I also wonder if the memory bandwidth bottleneck is something that is built into in the silicon, or if somehow the operating system is making decisions as how to allocate memory to different parts of the chip. I think it's now possible to install Linux on M1:https://asahilinux.org/2021/10/progress-report-september-2021/, so I wonder if that would result in memory being allocated to the CPU differently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956470448:1580,install,install,1580,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956470448,1,['install'],['install']
Deployability,"That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?. > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > ; > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > Traceback (most recent call last):; > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > raise KeyError(""The file %s does not exist."" % args[""input""]); > KeyError: 'The file input.dat does not exist.'; > ; > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503#issuecomment-258681166:577,install,install,577,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681166,1,['install'],['install']
Deployability,"That is a much better idea, I am re-working the regex the script uses to get the list of intermediate input files script right now and I will update the branch when I have this in place. . The new script would only require that you add the label in the CMakeLists.txt file to a test and reap.py would live in tests, does that sound good?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/192#issuecomment-157603667:142,update,update,142,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157603667,1,['update'],['update']
Deployability,"That looks like a problem in OpenFF Recharge (unlike most of our other packages, that one is used a little bit less externally so it hasn't been updated for the Pydantic v1/v2 import guards). I'll fix it there",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1828415561:145,update,updated,145,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1828415561,1,['update'],['updated']
Deployability,"That sounds nice if I'm a sys admin of my own cluster (and hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:883,install,installed,883,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['install'],['installed']
Deployability,That timeline will work for us - hopefully we're properly on v2 but at very least I'd expect us to be in the v1/v2 compatible state. (I hope this doesn't take much more than a QCFractal release and us putting the import guards in a couple of our packages.) Thanks for the heads-up!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3034#issuecomment-1810454801:186,release,release,186,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1810454801,1,['release'],['release']
Deployability,"That was me playing around, trying to figure out when to use the different dertypes. The level of theory I will be using is w97X-D DFT perhaps in the future but with Hartree-Fock I wanted to test the code that I obtain something back. . I've always used the default before when calculating single point energy scans so when to apply to which different level of theory is a little lost on me. . ```python. dertype='energy'; dertype'gradient'. ```. How would I get around this issue? In my mind. **Option 1**. Give it more juice (like CPU). If i have nodes on a cluster how do I distribute the job between the nodes perhaps. . **Option 2**. Play around with option parameters and maybe obtain orbitals from previous geometry? Is that faster?. https://psicode.org/psi4manual/master/autodir_options_c/scf__guess.html. Should I be changing into the `guess` parameter?. **Update 1** . I was playing around a bit more:. ```; Module time:; 	user time = 221.38 seconds = 3.69 minutes; 	system time = 8.88 seconds = 0.15 minutes; 	total time = 38 seconds = 0.63 minutes; ```. The time decreased when I set the configurations to ` 'g_convergence': 'gau_loose'` I think from `gau_tight`? `dertype` is still `gradient`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936:866,Update,Update,866,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936,2,"['Update', 'configurat']","['Update', 'configurations']"
Deployability,That would be really great. Let us know when `libxc4` is released and we will switch over!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-330936414:57,release,released,57,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-330936414,1,['release'],['released']
Deployability,"That would do it too :). -Daniel Smith; Sent from my iPhone. . > On Jun 6, 2018, at 10:43, Lori A. Burns <notifications@github.com> wrote:; > ; > @dgasmith, rolling back to 1.1 is fairly involved. Can commenting out the three pragma omps in superfunctional.cc test the same effect?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-395100179:157,rolling,rolling,157,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-395100179,1,['rolling'],['rolling']
Deployability,"That's a good point. I would really like to make it so that one can build a plugin off a conda installation (it's on one of my todo lists). We used to install all the libraries to `$PREFIX/lib`, but I stopped doing that because they weren't doing anything useful. If the mixed gnu-make (of plugins) and cmake and all the compiler/linker flags that must be in sync could be made to work with plugins, we can definitely make appropriate changes to install.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162#issuecomment-130121457:95,install,installation,95,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130121457,3,['install'],"['install', 'installation']"
Deployability,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:530,install,install,530,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814,5,['install'],"['install', 'installer', 'installing', 'installs']"
Deployability,"That's because there's no longer a py35 among the ""latest"" release. I'm retiring those docs. Please follow the commands at https://admiring-tesla-08529a.netlify.com/installs/v13/ (linked off ""Downloads"" from psicode.org). You'll want to select Linux/Installer/""Stable Release"". Thanks for pointing out ways we're leading people astray.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478010534:59,release,release,59,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478010534,4,"['Install', 'Release', 'install', 'release']","['Installer', 'Release', 'installs', 'release']"
Deployability,"That's curious. Both the source and final files show up as executable to me on Linux (see below), and Mac hasn't had a problem. Are they not showing up as executable to you?. Also note that the CMake-detected python gets baked in to the psi4 shell script as a shebang (see below). This is very handy for development environments where one generally wants to avoid the system python, but maybe you need that patched?. (from builddir); ```; > ls -l stage/bin/psi4 ; -rwxr-xr-x. 1 user user 14865 Jul 30 21:21 stage/bin/psi4; > ls -l ../psi4/run_psi4.py ; -rwxrwxr-x. 1 user user 14861 Jul 30 21:14 ../psi4/run_psi4.py; > head -1 stage/bin/psi4 ; #!/psi/toolchainconda/envs/py310/bin/python; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2685#issuecomment-1215181077:407,patch,patched,407,https://psicode.org,https://github.com/psi4/psi4/issues/2685#issuecomment-1215181077,1,['patch'],['patched']
Deployability,"That's great! I can see the log now, at least for the continuous-integration/Distelli link. Not the Disteli-CI link; that could just be the malformed URL causing a problem though. What's the difference between those hooks?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235419018:54,continuous,continuous-integration,54,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235419018,1,['continuous'],['continuous-integration']
Deployability,"That's impressive. If you're aiming for a working installation, maybe install ambit on its own and pass `-DAMBIT_DIR` to the psi4 build so psi4 detects it. Psi4 build development has moved over to #442, so I won't try to diagnose this eternal loop unless it appears in the new build scheme. Thanks for the report– I'll be on the lookout for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/460#issuecomment-238566031:50,install,installation,50,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-238566031,2,['install'],"['install', 'installation']"
Deployability,"That's right. I made three different mistakes in the units (missed the section you pointed out, didn't realize you were converting _to_ not _from_ SI at the end, and mixed up the probability-from-mean-intensity definition vs. the probability-from-energy-density definition of the Einstein B.). Documentation updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2525#issuecomment-1084589177:308,update,updated,308,https://psicode.org,https://github.com/psi4/psi4/pull/2525#issuecomment-1084589177,1,['update'],['updated']
Deployability,"The ""nightly"" build `conda install psi4 -c psi4/label/dev` for Linux/WSL is published and should be compatible with numpy `1.16.3`. I looked in sns-mp2 and didn't see the `np.load` culprit, so should be fine, but please let me know if not. Yeah, the ""nightly"" build _is_ nightly (unless I forget to toggle it on), but it's also an extension of our CI system, so it's catching extra things (in this most recent halt -- the Hessian CPHF threshold) from more tests and ecosystem integration. So appears sporadic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610:27,install,install,27,https://psicode.org,https://github.com/psi4/psi4/issues/1611#issuecomment-487403610,3,"['install', 'integrat', 'toggle']","['install', 'integration', 'toggle']"
Deployability,"The ""stage"" directory looks reasonable. It doesn't have this problem.; But when it is installed into the real stage directory ```${DESTDIR}${PREFIX}``` the offending files appear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325533017:86,install,installed,86,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325533017,1,['install'],['installed']
Deployability,"The DGEMM-killing Boost is a Continuum/default channel conda package 1.57 that had been serving me well for months. It can be found in the lib subdir of the metapackage-dir in the setup line below. (metapackage-dir specifies location of python, boost, chemps2, pcmsolver, zlib, hdf5, gsl.). ```; ../setup --cc icc --cxx icpc --fc ifort --type release --plugins on --prefix $INSTALL --max-am-eri 5 --metapackage-dir /theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv --cmake /theoryfs2/ds/cdsgroup/miniconda/bin/cmake -DSPHINX_ROOT=/theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv #-DENABLE_XHOST=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-199547946:343,release,release,343,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-199547946,2,"['INSTALL', 'release']","['INSTALL', 'release']"
Deployability,"The Mac Eco error is probably a fluke -- I don't see any recent changes to dftd4-python. What do you think of defaulting this to OFF for the protection of plugins? I don't quite understand how they're behaving now with this. See below that it's warning but not erroring. I do think the cmake is slightly in error in that i'm not setting CXX_EXTENSIONS=OFF in the inner psi4/CMakeLists.txt. ```; 2024-03-25T14:45:09.8381208Z [67/68] Building Fortran object CMakeFiles/v2rdm_casscf.dir/focas_interface.F90.o; 2024-03-25T14:45:09.8382362Z /home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/focas_interface.F90:274:53:; 2024-03-25T14:45:09.8383299Z ; 2024-03-25T14:45:09.8383512Z 274 | max_dim = max(size(integrals_1,dim=1),nnz_d1,maxval(nnz_int)); 2024-03-25T14:45:09.8383966Z | 1; 2024-03-25T14:45:09.8384366Z Warning: GNU Extension: Different type kinds at (1); 2024-03-25T14:45:09.8385389Z /home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/focas_interface.F90:161:46:; 2024-03-25T14:45:09.8386144Z ; 2024-03-25T14:45:09.8386330Z 161 | max_dim = max(size(integrals_1,dim=1),maxval(nnz_int)); 2024-03-25T14:45:09.8386747Z | 1; 2024-03-25T14:45:09.8387135Z Warning: GNU Extension: Different type kinds at (1); 2024-03-25T14:45:09.8387546Z [68/68] Linking CXX shared module v2rdm_casscf.so; 2024-03-25T14:45:09.8404861Z [17/19] Performing install step for 'v2rdm_casscf_external'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018339447:1480,install,install,1480,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018339447,1,['install'],['install']
Deployability,"The OpenMP configuration for Linux looks convoluted and fragile. So for Windows, I just made conditional branch, not to break something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1348#issuecomment-437586788:11,configurat,configuration,11,https://psicode.org,https://github.com/psi4/psi4/pull/1348#issuecomment-437586788,1,['configurat'],['configuration']
Deployability,"The `/usr/lib/libSystem.B.dylib` is ok because we indeed want to link to the Sys lib on each computer, not anything installed by conda. Similarly `/usr/lib/libblas` or lapack if they ocurred b/c after much link following, they end up at Accelerate. The `libgcc_s.1.dylib` is bizarre – will investigate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/749#issuecomment-311747130:116,install,installed,116,https://psicode.org,https://github.com/psi4/psi4/issues/749#issuecomment-311747130,1,['install'],['installed']
Deployability,"The `809f363` is the commit hash, which is the latest commit ""Merge pull request 743"" on the main GH page. The `dev419` just means 419 commits beyond the latest tag, which you probably saw is ""v1.1"". The conda dev package version is computed from a [git describe](https://github.com/psi4/psi4/blob/master/psi4/versioner.py#L105) command so that there's always a sortable version for every commit but it can also be linked back to the git record via the hash. Last set of release notes will be for 1.1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/763#issuecomment-314960521:471,release,release,471,https://psicode.org,https://github.com/psi4/psi4/issues/763#issuecomment-314960521,1,['release'],['release']
Deployability,"The `core` file is compiled, so the extension is likely ok. . A few background questions-- ; * do other conda packages like NumPy work for you? ; * can/did you do the Windows equivalent of log out then log back in? ; * what exactly was your ""added the directory to my path"" command? ; * what does `psi4 --version` say?. I know these seem basic, but no one here actually uses Windows (the installers are built on CI), so we have to feel around on debugging Windows installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875025483:388,install,installers,388,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875025483,2,['install'],"['installation', 'installers']"
Deployability,"The `documents_tests` script prints out a list of missing tests. So when I actually look at the output annually (since docs are built by CI), it's not hard to patch up the strays.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1022#issuecomment-388986690:159,patch,patch,159,https://psicode.org,https://github.com/psi4/psi4/pull/1022#issuecomment-388986690,1,['patch'],['patch']
Deployability,"The `psi4-dev` pkg is generally preferred (though probably need to update qcel and qcng separately these days), but `--clang` is valid for Mac only and `--gcc` for Linux only. For single-core, I wouldn't be surprised if you're pretty close, since the psithon tests overwhelmingly worked. I'd try Andy's library manip, but I'm also a little suspicious of `/usr/local/bin/python` unless that's truly your everyday python and you install (or build) numpy w/MKL to that installation's site-packages.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614786340:67,update,update,67,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614786340,3,"['install', 'update']","['install', 'installation', 'update']"
Deployability,"The `psi::PsiOutStream` class provides high-level logic that cannot be enforced via/imposed on a `std::streambuf` object and hence `std::cout` can not be redirected to it. The point of `psi::PsiOutStream` is to micro-manage Psi4's output file in all environments. This simply cannot be done if we allow access to the `std::streambuf` instance within `psi::outfile`, doing so would circumvent the entire point of the `psi::PsiOutStream` class and pave the way for very hard to detect bugs. If you want to print continuously you will have to redirect your printing via a wrapper or simply pass your printing to `psi::outfile`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83124188:510,continuous,continuously,510,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83124188,1,['continuous'],['continuously']
Deployability,"The `wfn.Da()` will not hold the ccsd density and in fact in this calculation it will not be computed. . To get the density would require a property calculation, and then to request the natural orbitals be printed to file. . ```; set { ; uhf_noons all; write_nos true ; } . property(""ccsd"", properties=['dipole']); ```. The `ccdensity` module does not update the wavefunction after it has computed the density. The `wfn.Da()` method will get you the AO/SO basis SCF density even after the coupled cluster density has been constructed. . I hope this is helpful",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-258840834:352,update,update,352,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258840834,1,['update'],['update']
Deployability,The backtrace was wrong; the conda installation was corrupt and even `xc-info` failed to run. The real issue turned out to be fixed by #3194.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3214#issuecomment-2326478048:35,install,installation,35,https://psicode.org,https://github.com/psi4/psi4/issues/3214#issuecomment-2326478048,1,['install'],['installation']
Deployability,"The big difference between AO and plane wave methods is that plane-wave bases are **verbose**. The reason why plane-wave methods don't accelerate convergence using the Fock matrix is that **it is typically never built** since it could not be stored. Instead, it is always contracted right away with trial vectors, as in traditional configuration interaction approaches, for example. The acceleration based on Fock matrix extrapolation is much more efficient than one based on the electron density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073:332,configurat,configuration,332,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073,1,['configurat'],['configuration']
Deployability,The biggest complication is that dfocc is at code freeze while we absorb some upstream changes. So the upgrade warning will have to do for now. Thanks for opening the issue so we don't lose track of deleting that code.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2256#issuecomment-883860694:103,upgrade,upgrade,103,https://psicode.org,https://github.com/psi4/psi4/issues/2256#issuecomment-883860694,1,['upgrade'],['upgrade']
Deployability,"The bug was introduced in #2839, which parallelized UKS gradients. I _assumed_ the feature was ready to go, somebody had just forgotten to enable it, but apparently not. I'll fix this before the release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2941#issuecomment-1529849644:195,release,release,195,https://psicode.org,https://github.com/psi4/psi4/issues/2941#issuecomment-1529849644,1,['release'],['release']
Deployability,"The code has been merged in, QCElemental-side. It won't be included until we have Psi use a version of QCElemental including that code, but we don't need any reminders to update Psi's QCElemental when they mint a new release, and there is nothing else we can do. Do you have any objections to closing the issue now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-912474194:171,update,update,171,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-912474194,2,"['release', 'update']","['release', 'update']"
Deployability,The does-your-PR-break-the-docs and archive-a-tarball-of-your-PRs-docs-for-you-to-check-offline aspects of this PR are long fulfilled. The let-netlify-build-you-a-website-preview-of-your-PRs-docs and have-bot-push-updates-of-samples-to-your-PR aspects are complicated by security and by people having to understand why they can't simple (not force) push to their own PR branches. I don't think these latter aspects are worth the hassle.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-1809178568:214,update,updates-of-samples-to-your-PR,214,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-1809178568,1,['update'],['updates-of-samples-to-your-PR']
Deployability,"The environment that I am working on had `mpmath`, and installing `mpmath` is successful. When running `conda list`, `mpmath` shows up. How would I be able to make sure cmake is properly detecting? I have created a new environment for this installation, and only used this environment during the duration of the build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382185804:55,install,installing,55,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382185804,2,['install'],"['installation', 'installing']"
Deployability,"The error I get is; ```; ==> Starting MCSCF iterations <==. Iter Total Energy Delta E Orb RMS CI RMS NCI NORB. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procedures/proc.py"", line 4025, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procedures/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read_entry(unsigned int, char const*, char*, unsigned long); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/588#issuecomment-275790678:169,install,install,169,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275790678,4,['install'],['install']
Deployability,"The following example taking from @blazerygy data set indicates the `wcombine` algorithm is responsible, hence the recommendation to disable it.; Plans are to disable the options in the next release. This option affects the efficiency of the range-separated DFT calculations to a moderate degree. ```; molecule mol {; S -1.843692634757 0.011818668014 -1.930850360417 ; N -0.090392634757 0.011818668014 -1.930850360417 ; C 0.380407365243 0.011818668014 -0.711250360417 ; N -0.598892634757 0.005218668014 0.343749639583 ; C -1.918692634757 0.001718668014 -0.128850360417 ; N -2.920292634757 -0.021381331986 0.692349639583 ; C -4.267092634757 -0.022581331986 0.274749639583 ; O -4.572492634757 -0.014581331986 -0.897450360417 ; C -5.238992634757 -0.031881331986 1.408749639583 ; C -0.276592634757 0.147418668014 1.729149639583 ; C 0.475607365243 1.248918668014 2.154149639583 ; C 0.801207365243 1.363418668014 3.501949639583 ; C 0.368607365243 0.401118668014 4.413949639583 ; C -0.397892634757 -0.680381331986 3.982449639583 ; C -0.725892634757 -0.816981331986 2.636249639583 ; N 1.714507365243 0.032718668014 -0.333650360417 ; C 2.783407365243 -0.139581331986 -1.254650360417 ; C 2.720707365243 0.307318668014 -2.578350360417 ; C 3.838007365243 0.163518668014 -3.395850360417 ; C 5.008507365243 -0.412181331986 -2.905450360417 ; C 5.065807365243 -0.847981331986 -1.582450360417 ; C 3.960507365243 -0.717181331986 -0.749250360417 ; H -5.042492634757 -0.867781331986 2.098449639583 ; H -6.272792634757 -0.114281331986 1.044849639583 ; H -5.154492634757 0.890718668014 2.005349639583 ; H 0.788407365243 2.013318668014 1.442549639583 ; H 1.389307365243 2.214918668014 3.843749639583 ; H 0.623207365243 0.499418668014 5.467849639583 ; H -0.748492634757 -1.422181331986 4.699449639583 ; H -1.343692634757 -1.647681331986 2.292449639583 ; H 1.920307365243 -0.204681331986 0.639249639583 ; H 1.809107365243 0.759418668014 -2.978250360417 ; H 3.792107365243 0.505518668014 -4.429450360417 ; H 5.874807365243 -0.5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-975326494:191,release,release,191,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-975326494,1,['release'],['release']
Deployability,"The following input file demonstrates errors in the second decimal place:; ```; molecule {; La 1 -0.5 0; La 1 0.5 0; O 0 -1 0; O 0 0 0; O 0 1 0; }. set {; basis def2-svp; scf_type df; df_basis_sad def2-universal-jkfit; df_basis_scf def2-universal-jkfit; points 5; }. func = 'hf'; anal = gradient('scf', dft_functional=func, dertype=1); fndf = gradient('scf', dft_functional=func, dertype=0); anal.print_out(); fndf.print_out(); ```. The counterpart where La is replaced with B agrees to six decimal places. This is _strongly_ suggestive of an error in ECPs. Let's keep all discussion on this issue focused on this error. DFT integration is irrelevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672:625,integrat,integration,625,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672,1,['integrat'],['integration']
Deployability,"The following should do the trick already, no?; ```; set(CMAKE_CXX_STANDARD 11); set(CMAKE_CXX_STANDARD_REQUIRED TRUE); set(CMAKE_CXX_EXTENSIONS FALSE); ```; You basically require C++11 _without_ GNU extensions from the compiler. Configuration should abort if the compiler doesn't have the relevant flag. These three lines would possibly eliminate the need for checking for compiler versions in [cmake_cxxstandard.cmake#L3-L11](https://github.com/psi4/psi4/blob/master/cmake/custom_cxxstandard.cmake#L3-L11). But, yes, I agree, is too large of a leap right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281118096:230,Configurat,Configuration,230,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281118096,1,['Configurat'],['Configuration']
Deployability,The gmda interface seems pretty straightforward. I could look into this since I'm using it daily. . Is there any documentation on how to keep an isolated installation of psi4 for development? Any tips would be appreciated!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2706#issuecomment-1228698239:154,install,installation,154,https://psicode.org,https://github.com/psi4/psi4/issues/2706#issuecomment-1228698239,1,['install'],['installation']
Deployability,"The job did not have enough memory and failed due to a TOCLEN error. I shot you a gchat about this awhile back, but did not receive a response and consequently forgot about it. > On Apr 4, 2016, at 10:03 AM, T. Daniel Crawford notifications@github.com wrote:; > ; > What was the bug in cc5?; > ; > ## ; > ; > Prof. T. Daniel Crawford; > crawdad@vt.edu; > ; > On Mon, Apr 4, 2016 at 9:32 AM, Daniel Smith notifications@github.com; > wrote:; > ; > > @lothian https://github.com/lothian I fixed cc5 in this branch. cc5 now; > > runs, passes, and the output.ref is updated.; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/pull/315#issuecomment-205297042; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205307609",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205318258:561,update,updated,561,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205318258,1,['update'],['updated']
Deployability,"The large number of digits was introduced to eliminate round-off errors completely. There are a few reasons:. - When testing software that post-processes the wavefunction, it is desirable to be able to validate the numerical algorithms in such codes. For example, this can be done by checking the total number of electrons on very fine integration grids in such post-processing codes. When doing so, all other sources of errors should be eliminated to avoid confusion. We noticed that this was especially problematic before #1510 with fractionally occupied natural orbitals.; - When deriving approximate electrostatic models from a wavefunction, satisfying charge neutrality is quite important for long-range interactions. I know you can always ""fix"" this *a posteriori* (e.g. by shifting partial charges to match the net charge), but avoiding the need for a fix is still preferable, just to rule out sources of error. So why 17? The number of significant digits from a double precision number varies between 15 and 17. See https://en.wikipedia.org/wiki/Double-precision_floating-point_format (For some numbers, digits 16 and/or 17 may be insignificant, but not always.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817:336,integrat,integration,336,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-747650817,1,['integrat'],['integration']
Deployability,"The libecpint results have been very thoroughly tested against near-exact numerical integration routines, so I would be surprised if they are wrong. I will have to take a closer look at what you've done so far to know whether the problem is bugs in the original code or a change in the way certain things are handled. I can clarify though that libecpint does _no_ normalization of the basis functions. I do know the reason there are now some non-zero quantities though - I was screening them assuming everything would eventually be transformed to spherical gaussians! So it won't have affected results as long as cartesians weren't being used. . @PeterKraus has also noted a problem with linking against pugixml, and I'm not sure what the problem is, but hopefully we'll work out how to fix it soon. . That said, it is worth noting that I have almost finished wrapping a python package of libecpint, so that might prove an easier root to install the library?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802951976:84,integrat,integration,84,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802951976,2,"['install', 'integrat']","['install', 'integration']"
Deployability,The libint package needed is in a dev label of conda-forge. You can install psi4 1.8 with; ```; conda install psi4 -c conda-forge/label/libint_dev -c conda-forge ; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1606566187:68,install,install,68,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1606566187,2,['install'],['install']
Deployability,"The loop limits are the same in the basic recursion for the nuclear attraction integrals. The call to the Obara-Saika recursion in the 0th order integrals is (from potential.cc): . ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1, am2);; ```. whereas the call in the derivative code is:. ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1+1, am2+1);; ```. The code was adapted from PSI3's cints package and we know that code works. We also know the code as it is in PSI4 works as we have working derivative codes. The patch certainly looks like it cleans up the recursion. I'll commit it if the tests pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3#issuecomment-17312112:534,patch,patch,534,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-17312112,1,['patch'],['patch']
Deployability,"The manuals for older versions are online:-; http://sirius.chem.vt.edu/psi4manual/4.0b4/index.html; http://sirius.chem.vt.edu/psi4manual/4.0b3/index.html; etc…. http://sirius.chem.vt.edu/psi4manual/latest/index.html; will always point to the latest release. On Aug 20, 2013, at 7:19 PM, Lori Burns notifications@github.com wrote:. > I do think that the dcft/pywrap-alias changed sample files are just due to my sloppiness in changing the tests before packing up the tarball. SUMMARY should not be changing its contents for a given set of psi4/tests. It may, though, change its ordering of the contents and trigger your changed-source-alert. Thus, I think it's best to drop tracking it and see that it gets cleaned up when distclean runs. That directory doesn't need an ascii index when a formatted html index exists.; > ; > Our original plan was to web-host docs for each public release of the code, but admittedly, even I can't find the address of the older versions just now. If you want to package up a thousand html files, we'll try to remove the minor obstacles.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14#issuecomment-22985486:249,release,release,249,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22985486,2,['release'],['release']
Deployability,"The new basis sets are fine. Updates of the old basis sets are causing test failures associated with changing basis set parameters. For example, STO-3G hydrogen basis sets are changing in the ninth decimal place because we only _had_ eight decimal places previously, causing some ""check numbers to the ninth decimal place"" tests to fail. While I trust the numbers from the newer EMSL, we need to make sure full tests passes before merging this in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2230#issuecomment-872519016:29,Update,Updates,29,https://psicode.org,https://github.com/psi4/psi4/pull/2230#issuecomment-872519016,1,['Update'],['Updates']
Deployability,"The newest release of ADF implements something called ""MESA"", which has been developed in http://dx.doi.org/10.14288/1.0372885 (pdf available at https://www.scm.com/wp-content/uploads/Thesis-MiguelGarciaChavez.pdf). It's basically a combination of several individual acceleration methods (in ADF: ADIIS, fDIIS, LISTb, LISTf, LISTi, and SDIIS), and the way it works is simply by forming trials of all the methods, and picking the one for which the extrapolated Fock matrix results in the least change of the density from the input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-565805641:11,release,release,11,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-565805641,1,['release'],['release']
Deployability,The old citation for PBE0 was the same as the one given for PBE. I have updated it and submitted a pull request.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/713#issuecomment-309066051:72,update,updated,72,https://psicode.org,https://github.com/psi4/psi4/issues/713#issuecomment-309066051,1,['update'],['updated']
Deployability,"The only question I have is about the use of DIIS in e.g. coupled-cluster. There, one typically does bare updates combined with some DIIS iterations in-between. Is this completely unrelated to `DIIS_MIN_VECS`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2401#issuecomment-1010202395:106,update,updates,106,https://psicode.org,https://github.com/psi4/psi4/issues/2401#issuecomment-1010202395,1,['update'],['updates']
Deployability,"The patch I just pushed allows it to compile. The tests all fail instantly on my laptop, so I still have some more work to do, but that's almost certainly user error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235119557:4,patch,patch,4,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235119557,1,['patch'],['patch']
Deployability,"The primary problem with PCMSolver is that I was only partially through its CMake refresh. I went ahead and [opened a PR](https://github.com/PCMSolver/pcmsolver/pull/31) with the changes thus far. The two primary items are (1) pcm_placeholder lost its configuration step, so you have to manage the PATHs yourself and (2) I'd like to do an inversion of the PCMSolver install so that it becomes a more natural python module to import (installed to site-packages) rather than the involved bin/configure/write-to-source-dir business. It is runable at the moment, though, if you're determined (I included an outline of steps at the PR).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249122702:252,configurat,configuration,252,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249122702,3,"['configurat', 'install']","['configuration', 'install', 'installed']"
Deployability,"The problem arises when build directory is not under $PREFIX (=/usr/local). Did you try building in some directory not under ```$PREFIX``` (for example in /tmp), and then installing into an external stage directory?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214426101:171,install,installing,171,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214426101,1,['install'],['installing']
Deployability,"The problem is that the reference (UHF) is set only for the SCF reference wave function and not the CCSD wave function. If you change the input to use. set reference uhf. the code runs fine. . ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Aug 6, 2013, at 11:34 AM, andysim notifications@github.com wrote:. > Thanks a lot for the detailed feedback, and input file to reproduce the problem. I'll look into this, and try to get a patch together, ; > ; > cheers, ; > ; > Andy. ; > ; > On Aug 6, 2013, at 10:21 AM, James Spencer notifications@github.com wrote: ; > ; > > CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file: ; > > ; > > molecule f { ; > > f 0.00 0.00 0.00 ; > > } ; > > set basis cc-pVTZ ; > > set scf reference uhf ; > > energy('ccsd') ; > > (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). ; > > ; > > Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. ; > > ; > > Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. ; > > ; > > Full backtrace from gdb: ; > > ; > > (gdb) where ; > > #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6 ; > > #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134 ; > > #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630) ; > > at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50 ; > > #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0) ; > > at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99 ; > > #4 0x000000000086b797 in psi::ccenergy::c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12#issuecomment-22192736:449,patch,patch,449,https://psicode.org,https://github.com/psi4/psi4/issues/12#issuecomment-22192736,1,['patch'],['patch']
Deployability,"The problems are unrelated to this PR. Rebase and push, and the problems will be fixed. (Psi's ""grab the latest pydantic"" will use an updated pydantic, which won't raise the error.). I'll review this PR later today, since I know the TDSCF code the best, nowadays.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2967#issuecomment-1560976633:134,update,updated,134,https://psicode.org,https://github.com/psi4/psi4/pull/2967#issuecomment-1560976633,1,['update'],['updated']
Deployability,"The quality of OpenBLAS (https://github.com/xianyi/OpenBLAS) should be fine. It is based on GotoBLAS that used to outperform ATLAS and in some cases even MKL. Kazushige Goto, the developer of GotoBLAS was then hired by Intel. . Thank you for the hint about MathLibs.cmake. Based on https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake (lines 127-141) I have added support for detecting OpenBLAS (with the changes it is detected even without setting MATH_ROOT). ```; [sfux@develop01 psi4]$ cat CMakeAddOpenBLAS.patch ; diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; *** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; ***************; *** 14,20 ****; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); --- 14,20 ----; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL OPENBLAS ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:535,patch,patch,535,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['patch'],['patch']
Deployability,"The relevant computer is switched on again, so installers downloadable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3199#issuecomment-2315403898:47,install,installers,47,https://psicode.org,https://github.com/psi4/psi4/issues/3199#issuecomment-2315403898,1,['install'],['installers']
Deployability,"The some-subtype-values-not-applicable-to-some-scftype-values doesn't bother me too much -- after all, direct, cd, etc. can't take any subtype value besides auto. So long as the read_options docstring is clear and the code rejects non-meaningful subtype choices, I don't think users are led astray. All the same, I'm not hearty on my suggestion because it seems a little indistinct between algorithm choice (usually scftype) and memory transition choice (usually subtype). Maybe, if designed from scratch, there'd be `YOSHIMINE_PK`, `REORDERED_PK`, and `PK` as `scftype`s and then PK `subtype`s `OUT_OF_CORE` and `INCORE` would fit the DF pattern nicely. That might well be considered too much reengineering at this point in the release cycle. So minimum change, unless others chime in, is leave as-is and add the `PK_NO_INCORE` to the deprecation messages here https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L553",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1520592511:729,release,release,729,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1520592511,1,['release'],['release']
Deployability,"The switch to 2022 CMake fork of Libint2 in #2413 should have healed this issue, as it has better dependency handling and demands fewer dependencies. Try it out when you get a chance, please. You may find this dependency table helpful: https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md#prerequisites",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-1077930064:316,INSTALL,INSTALL,316,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-1077930064,1,['INSTALL'],['INSTALL']
Deployability,"The test that is currently failing is a test in `gcp/pbeh3c/`. This is due to an optking side issue where the `CustomHelper` class being used by optking is not accepting a `psi4.core.Molecule` the type checking was looking for `qcdb.Molecule`. As a backup optking defaulted to psi4's active molecule. This is the call.; `E = optimize('pbeh3c/def2-msvp', molecule=unopethene)`. optking takes the molecule here in the driver and uses a default fallback instead: ; ` opt_object = optking.opt_helper.CustomHelper(molecule, params=optimizer_params)`. The type check will get changed in optking to include `core.Molecule`. An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1259849511:702,update,updated,702,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1259849511,2,"['patch', 'update']","['patches', 'updated']"
Deployability,"The two installs are https://github.com/psi4/psi4/blob/master/psi4/CMakeLists.txt#L354-L355 and https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L315-L316 . The former copies the quadrature files into `<objdir>/stage/share/` and the latter copies the whole `<objdir>/stage/` into `CMAKE_INSTALL_PREFIX`. From the `find` output you posted and an earlier issue, I think your CMake build setup or the FreeBSD layout is doing something unexpected at the install. Short of understanding where that's happening, adapting your recipe to remove the extra dirs may be your best bet. ```; >>> objdir_py310_gcc: (sdftd3) find . -name ""1_xk01_1E1""; ./stage/share/psi4/quadratures/1_x/1_xk01_1E1; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325502085:8,install,installs,8,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325502085,2,['install'],"['install', 'installs']"
Deployability,"The unfortunate answer is Psi4's support for atoms past krypton (perhaps a bit optimistic) is very limited. In short this stems from our inability to handle effective core potentials. We are currently discussing how to better address this for the next major release of Psi4, which is likely a long ways away; however, in the meantime I think what you want to do is not possible with Psi4. My recommendation is to consider the Q-Chem package, which is also capable of performing SAPT (energy decomposition) and does have support for atoms past krypton.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/76#issuecomment-78986839:258,release,release,258,https://psicode.org,https://github.com/psi4/psi4/issues/76#issuecomment-78986839,1,['release'],['release']
Deployability,"The value should be a float `1e-3` or an int `3` not a string, `'1e-3'`. It's fine to just set the option globally as well,; ```; psi4.set_options({'e_convergence': 1e-3}); ```; unless you need different modules to have different options set. This part of the tutorial should be updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2990#issuecomment-1606556298:279,update,updated,279,https://psicode.org,https://github.com/psi4/psi4/issues/2990#issuecomment-1606556298,1,['update'],['updated']
Deployability,"The warning is fine -- http://forum.psicode.org/t/numpy-ufunc-size-change-warning/1305?u=loriab . The dftd3 error is curious. May be related to https://github.com/MolSSI/QCEngine/issues/45 . Can probe later (most everyone Psi4 is away at a conference next week). Unless DFT-D3 was your target, you're installed, passing, and ready to run.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478034387:301,install,installed,301,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478034387,1,['install'],['installed']
Deployability,"There are multiple issues here, and the first one is to make sure that we're using the same definitions. Your vocabulary makes me suspect that you're more used to plane wave methods. In Psi4, SCF works by having an initial density matrix, constructing a Fock matrix, modifying the Fock matrix using optional DIIS (default, and we also blend this with ADIIS and EDIIS methods) and level shift (not default), solving the generalized eigenvalue problem to get new orbitals, constructing a new density matrix from those orbitals (normally aufbau), and then mixing that with the previous density (optional, called update damping). None of this applies to our second-order algorithms, which I assume are irrelevant in your context. How _exactly_ do you want to define `D_in` and `D_out`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065#issuecomment-1782890955:609,update,update,609,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1782890955,1,['update'],['update']
Deployability,"There have been many buildsystem updates to Libint1 since 1.2.0, and it's always an option to build it through libtool _or_ cmake. Psi4 will only detect a CMake build. Libint takes a while to compile, and I definitely agree one would wish to detect a pre-built. I've added the `.pc` file to Libint1 here (https://github.com/evaleev/libint/pull/120) so that a CMake build of Libint is detectable by both downstream CMake or libtool. Normally what packagers do when they've got a libtool-built Libint already packaged and want Psi to detect it is to patch the build so CMake sees it https://src.fedoraproject.org/rpms/psi4/blob/master/f/psi4-b167f473-fedora.patch . Yes, Libint2 is known to us. As it requires extra dependencies and isn't expected to to be faster, we won't be updating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202:33,update,updates,33,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-480458202,3,"['patch', 'update']","['patch', 'updates']"
Deployability,"There needs to be a way to avoid pushing certain parts though, otherwise it; undermines the scooping philosophy and we might as well not even have the; private repo. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 3, 2015 10:59 AM, ""Lori A. Burns"" notifications@github.com wrote:. > Well, the branches of the hidden repo are so developers can store code; > that's vulnerable to scientific scooping. And the master of the hidden repo; > is so we can integrate without being overly concerned about breaking things; > for people outside email's reach.; > ; > That said, you're right that we don't have the synching procedure; > automated so that public is often a couple weeks behind. After the May; > round of conferences, we're going to set up a continuous integration box so; > that we can do a nightly or weekly push to public if safe.; > ; > Sent from my iPhone; > ; > > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > > ; > > @loriab why do you actually work with a hidden repo? It's quite annoying; > > that all kinds of stuff is fixed/changed but not visible to us.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/88#issuecomment-98490617.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98491250:480,integrat,integrate,480,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98491250,3,"['continuous', 'integrat']","['continuous', 'integrate', 'integration']"
Deployability,There should not be any issue with this. We can just tar up an install and make sure to tell people to set PSIDATADIR/PSI4DATADIR to the correct location. Macs in the wild have a standard set of libraries. At one point I was working on getting Psi4 to automatically determine the value of PSIDATADIR based on the location of the psi4 binary but I can't seem to find it in the code. Maybe we should get someone to work on it and then we don't need to require end users to set this variable if we just distribute binaries.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/49#issuecomment-37945473:63,install,install,63,https://psicode.org,https://github.com/psi4/psi4/issues/49#issuecomment-37945473,1,['install'],['install']
Deployability,There will be an update to beta 4 next week that will contain the GPL2 license text where needed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2#issuecomment-17312261:17,update,update,17,https://psicode.org,https://github.com/psi4/psi4/issues/2#issuecomment-17312261,1,['update'],['update']
Deployability,"There's currently a build documentation rewrite underway (to reflect the; cmake build system). I suspect that a section on using Psi4 with Easybuild; could be added as well, particularly since it sounds like no code work on; our end. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 11:34 AM, ""wpoely86"" notifications@github.com wrote:. > No, Easybuild has support for Psi4. Maybe mentioning it in the; > documentation would be nice? Next to the manual install?; > ; > The point I'm trying to make here is that users should use (or tell their; > sysadmins to) a module system. It's no problem than to use old and new; > compilers and to support C++11/14/17.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105252795.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105262783:492,install,install,492,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105262783,1,['install'],['install']
Deployability,"There's no particular reason your environment shouldn't work. I think I'd fire up a fresh colab and then add packages one-by-one, checking with `conda list` (or `mamba list`) that they installed as expected. that is, something like:. ```; conda install psi4 -c conda-forge/label/libint_dev -c conda-forge; conda list; import psi4; conda install ase nglview -c conda-forge; conda list; conda install psi4::resp; conda list; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3109#issuecomment-1856857465:185,install,installed,185,https://psicode.org,https://github.com/psi4/psi4/issues/3109#issuecomment-1856857465,4,['install'],"['install', 'installed']"
Deployability,"There's some `xrange` that py3 wants converted to `range`. They don't look to be over big lists, so shouldn't hurt py2 performance. Py2 problem is . ```. Transforming MOs to the semicanonical basis; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/proc.py"", line 4340, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 409, in mcscf_solver; build_semicanonical_mos(ciwfn); File ""/home/travis/build/psi4/psi4/build/stage/home/travis/build/psi4/psi4/Install/lib//psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 91, in build_semicanonical_mos; Cnew = core.Matrix.doublet(ciwfn.Ca(), U, False, False); RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304462078:310,Install,Install,310,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304462078,5,['Install'],['Install']
Deployability,"There's temporary build docs linked off README: ""Downloading and Installing"" on the main GH page. It's not the specification of Python that's the problem– CMake detection and build are going just fine in these cases. CMake knows the exact, absolute path location to everything Psi4 or its build needs. The problem is conveying that info to the runtime environment. This is done by baking in all those absolute paths into the executable/library rpath. _But_, when a path (e.g., `/usr/lib`) has both a useful thing like `libpython.so` and a bad thing (for Psi4) like old gcc or hdf5, then CMake has no way of knowing that it needs to place /usr/lib into rpath _behind_ the path to new gcc or new hdf5. Thus, we end up with runtime path problems, solvable only by `LD_LIBRARY_PATH` or rpath adjustment and relinking. This problem is controllable with conda, because it isolates just what Psi4 needs into its own namespaced path and stuffs that into rpath. For the general developers CMake build, there's no robust solution that I can see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252931820:65,Install,Installing,65,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252931820,1,['Install'],['Installing']
Deployability,These are not in the core Hamiltonian as they are updated at each SCF iteration. Maybe the name of the data member is misleading.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1430#issuecomment-447682538:50,update,updated,50,https://psicode.org,https://github.com/psi4/psi4/issues/1430#issuecomment-447682538,1,['update'],['updated']
Deployability,These are the lowest eigenvalues of the electronic Hessian showing you that you are not in a minimum. ; You can either search for a SCF guess that works or run it as a UHF calculation and use the `follow` keyword. Compiling on mac is fine but multi-threading might not work well. I also use a mac. You might want do this: http://psicode.org/psi4manual/master/conda.html?highlight=advisor#how-to-use-conda-to-compile-psi4-faster-and-easier; The `psi4-dev` package can be installed to your existing psi4 dev version from psi4/label/dev. It installs compilers and needed libraries.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1878#issuecomment-623964793:470,install,installed,470,https://psicode.org,https://github.com/psi4/psi4/issues/1878#issuecomment-623964793,2,['install'],"['installed', 'installs']"
Deployability,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20545979:848,patch,patch,848,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979,1,['patch'],['patch']
Deployability,"This PR continued and updated in #1335, so closing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1120#issuecomment-444908342:22,update,updated,22,https://psicode.org,https://github.com/psi4/psi4/pull/1120#issuecomment-444908342,1,['update'],['updated']
Deployability,"This PR has largely become obsolete, sq_rsp and rsp has been deprecated, and should end up deleted **after** 1.7 is released.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2637#issuecomment-1332534709:116,release,released,116,https://psicode.org,https://github.com/psi4/psi4/pull/2637#issuecomment-1332534709,1,['release'],['released']
Deployability,"This PR is a good idea, but we just use python in so many different ways that it's risky w/o having OSes to test it on. OS packagers may just need to patch in python3. Leaving PR open for guidance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1709#issuecomment-758434711:150,patch,patch,150,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-758434711,1,['patch'],['patch']
Deployability,"This PR is absolutely not getting merged in until _after_ the Psi4 1.4 release, and I would much prefer that exposing anything non-essential to the Python layer be relegated to a separate PR. This one will need a very careful review as it is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-863473343:71,release,release,71,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-863473343,1,['release'],['release']
Deployability,"This PR is good to go, in my opinion. I rolled back the removal of libpython linking because that got tangled up in a pybind11 update, which broke us sometime between nov 15 & 16. Working on that. But the PR that's remaining is uncontroversial.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/519#issuecomment-261632977:127,update,update,127,https://psicode.org,https://github.com/psi4/psi4/pull/519#issuecomment-261632977,1,['update'],['update']
Deployability,"This could be tidied up and merged for v1.9, but that would constrict pydantic to only v2. From https://github.com/MolSSI/QCElemental/issues/323, releases of qcfractal are only imminently even v2-tolerant. So I think it'd be safer to postpone and update the whole qca stack together. So not targeting v1.9. Any thoughts? @mattwthompson",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602:146,release,releases,146,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602,2,"['release', 'update']","['releases', 'update']"
Deployability,"This diff should do the trick for that database-making script. You're right about failing to update for py3. I'm guilty on from_string docs, too. They exist [here](https://qcelemental.readthedocs.io/en/latest/api/qcelemental.molparse.from_string.html#qcelemental.molparse.from_string). Please note that the database tech is quite old and the distributed (sow/reap) parallelism only works for py2. Replacement is underway. ```; (p4dev37) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-release/objdir37/asdf: (mp2d) git diff ../../psi4/share/psi4/scripts/ixyz2database.py; diff --git a/psi4/share/psi4/scripts/ixyz2database.py b/psi4/share/psi4/scripts/ixyz2database.py; index 15f5f41..d31a387 100755; --- a/psi4/share/psi4/scripts/ixyz2database.py; +++ b/psi4/share/psi4/scripts/ixyz2database.py; @@ -33,8 +33,8 @@ import re; import os; import glob; ; -sys.path.append(os.path.dirname(__file__) + '/../python'); -sys.path.append(os.environ.get('PSIDATADIR')+'/python'); +sys.path.append(os.path.dirname(__file__) + '/../../../driver'); +#sys.path.append(os.environ.get('PSIDATADIR')+'/driver'); try:; import qcdb; except ImportError:; @@ -72,7 +72,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - dbse = raw_input(' dbse = ').strip(); + dbse = input(' dbse = ').strip(); if dbse.isalnum():; user_obedient = True; ; @@ -82,7 +82,7 @@ print(""""""; All files with this extension in the current directory will be processed; Additionally, all files with extension p4m in the current dir will be processed as psi4 mol format; """"""); -fext = raw_input(' fext = [xyz] ').strip(); +fext = input(' fext = [xyz] ').strip(); if fext == """":; fext = 'xyz'; ; @@ -95,7 +95,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - line2 = raw_input(' line2 = [cgmp] ').strip().lower(); + line2 = input(' line2 = [cgmp] ').strip().lower(); if line2 == """":; line2 = 'cgmp'; if line2 == 'comment' or line2 == 'cgmp' or line2 == 'trash':; @@ -121,7 +121,7 @@ print(""""""; """"""); use",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772:93,update,update,93,https://psicode.org,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772,2,"['release', 'update']","['release', 'update']"
Deployability,"This has a record number of approvals, so just need to get over the Windows block. May be time to add it as a Spot test again to see output (`-o stdout` like below is my latest refinement to Windows debugging). ```; # Spot Test; - script: |; set PATH=$(Build.BinariesDirectory)\install\bin;%PATH%; psi4 -o stdout $(Build.SourcesDirectory)\tests\pywrap-cbs1\input.dat; displayName: 'MP5 Spot Test'; workingDirectory: $(Build.BinariesDirectory)/build; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-568071614:278,install,install,278,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-568071614,1,['install'],['install']
Deployability,"This has been force updated, and includes #1257",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1206#issuecomment-424371674:20,update,updated,20,https://psicode.org,https://github.com/psi4/psi4/pull/1206#issuecomment-424371674,1,['update'],['updated']
Deployability,This has been identified and will be fixed in the Psi4 1.2 release. This happens in custom build scripts and no changes are required on GitHub.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-381024713:59,release,release,59,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-381024713,1,['release'],['release']
Deployability,"This has been rebased and updated for qcschema compatibility. It goes with https://github.com/MolSSI/QCElemental/pull/12 (and won't work without it). All quicktests pass, but I wouldn't say it's been closely looked at. Particularly uncertain of how to deepcopy these structures in c++. @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1316#issuecomment-446075393:26,update,updated,26,https://psicode.org,https://github.com/psi4/psi4/pull/1316#issuecomment-446075393,1,['update'],['updated']
Deployability,"This has had favorable reports and no problems. And I just tried it with gcc/g++/gfortran+MKL and it gave the below, no problems. So I'm offering this as ready-to-go. Will rebase when its turn comes. ```; >>> ldd -v stage/path/to/hrw-temp/install-psi4/lib/psi4/core.so ; 	linux-vdso.so.1 => (0x00007ffd40bdd000); 	libpcm.so.1 => /path/to/hrw-temp/objdir29/stage//path/to/hrw-temp/install-psi4/lib/libpcm.so.1 (0x00007f84bb67f000); 	libgdma.so => /path/to/miniconda/envs/texternals/lib/libgdma.so (0x00007f84bb2c1000); 	libderiv.so => /path/to/miniconda/envs/texternals/lib/libderiv.so (0x00007f84b4f3a000); 	libint.so => /path/to/miniconda/envs/texternals/lib/libint.so (0x00007f84b35b4000); 	libdkh.so => /path/to/hrw-temp/objdir29/stage//path/to/hrw-temp/install-psi4/lib/libdkh.so (0x00007f84b33a2000); 	libefp.so => /path/to/miniconda/envs/texternals/lib/libefp.so (0x00007f84b2847000); 	libmkl_rt.so => /path/to/miniconda/envs/texternals/lib/libmkl_rt.so (0x00007f84b221f000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f84b1fdd000); 	libm.so.6 => /path/to/miniconda/lib/libm.so.6 (0x00007f84b1d59000); 	libdl.so.2 => /lib64/libdl.so.2 (0x00007f84b1b55000); 	libstdc++.so.6 => /path/to/miniconda/envs/texternals/lib/libstdc++.so.6 (0x00007f84b17c8000); 	libgomp.so.1 => /path/to/miniconda/envs/texternals/lib/libgomp.so.1 (0x00007f84b15a6000); 	libgcc_s.so.1 => /path/to/miniconda/envs/texternals/lib/libgcc_s.so.1 (0x00007f84b1390000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f84b0fcf000); 	libz.so.1 => /path/to/miniconda/envs/texternals/lib/libz.so.1 (0x00007f84b0db8000); 	libgfortran.so.3 => /path/to/miniconda/envs/texternals/lib/libgfortran.so.3 (0x00007f84b0a98000); 	libquadmath.so.0 => /path/to/miniconda/envs/texternals/lib/libquadmath.so.0 (0x00007f84b085a000); 	/lib64/ld-linux-x86-64.so.2 (0x00007f84c3771000); 	librt.so.1 => /lib64/librt.so.1 (0x00007f84b0651000); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276864921:239,install,install-,239,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276864921,3,['install'],['install-']
Deployability,"This is a different error @ataube59. This is not a coded exception (planned fail) but a segmentation fault because of a bug. Those cannot be caught. The `optking` module responsible will be replaced with a python-based version ""soon"" (https://github.com/psi-rking/optking, already usable if you install it manually) where I think dimer optimisation should work better. Obligatory ping to @AlexHeide @psi-rking for a test case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080#issuecomment-764476988:295,install,install,295,https://psicode.org,https://github.com/psi4/psi4/issues/2080#issuecomment-764476988,1,['install'],['install']
Deployability,"This is a great upgrade in current and future use and robustness! My only suggestion is to moderate the requirement of an initial gradient before a frequency computation. I grant that the additional cost of a gradient is likely to be moderate-to-negligible (though if one were computing, e.g., only one irrep of displacements it could be significant). However, the workflow of ""opt + freq"" is so very common, that it's worth it to at least provide an easy way to avoid this extra computation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834#issuecomment-380206803:16,upgrade,upgrade,16,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-380206803,1,['upgrade'],['upgrade']
Deployability,"This is a quick script exported from Jupyter to animate vibrational modes from Psi4. It uses py3Dmol and takes in dressed xyz files. The script shows how to turn psi4's exported results into the dressed xyz files. I should write something so the format is available directly. Or this’d be a nice opportunity for a jupyter widget, which @armcdona might try. And @fevangelista has a widget for vib vector arrows that could probably be animated. ```; #!/usr/bin/env python; # coding: utf-8; ​; # In[ ]:; ​; ​; # note the capital ""D"". obtain by `conda install py3dmol -c conda-forge`; import py3Dmol; print(py3Dmol.__version__); ​; ​; # In[ ]:; ​; ​; # run an optfreq calc and write the vibrational analysis to disk in a "".vibrec"" file; ​; # molecule h2odim {; # O -1.551007 -0.114520 0.000000; # H -1.934259 0.762503 0.000000; # H -0.599677 0.040712 0.000000; # --; # 0 1; # O 1.350625 0.111469 0.000000; # H 1.680398 -0.373741 -0.758561; # H 1.680398 -0.373741 0.758561; # units angstrom; # }; ​; # set basis sto-3g; # set e_convergence 9; # set g_convergence gau_verytight; ​; # optimize('mp2', molecule=h2odim); ​; ​; # e, wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; v",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:548,install,install,548,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131,1,['install'],['install']
Deployability,"This is diatomic subroutine is a neat feature to have, especially for; pedagogical purposes. On Fri, Nov 11, 2016 at 5:54 PM, Andy Simmonett notifications@github.com; wrote:. > Description; > ; > Completely changes the algorithm used for fitting diatomic potentials from; > Lagrange interpolations (was tens of thousands of lines of Python) to using weighted; > least squares http://dx.doi.org/10.1063/1.4862157, which can be; > implemented with a couple of lines of Python.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Remove the old interpolation code.; > - Add weighted least squares routine.; > - Add exception to handle non-convergent cases.; > - Document changes.; > - New function to plot the fit to screen/file using matplotlib.; > ; > Status; > - Ready to go; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/515; > Commit Summary; > - Completely overhauls the diatomic code to use weighted least squares; > fitting, instead of Lagrange interpolation. Optionally generates plots of; > the results.; > ; > File Changes; > - _M_ doc/sphinxman/source/diatomic.rst; > https://github.com/psi4/psi4/pull/515/files#diff-0 (2); > - _M_ psi4/driver/diatomic.py; > https://github.com/psi4/psi4/pull/515/files#diff-1 (170); > - _D_ psi4/driver/diatomic_fits.py; > https://github.com/psi4/psi4/pull/515/files#diff-2 (49060); > - _M_ psi4/driver/p4util/exceptions.py; > https://github.com/psi4/psi4/pull/515/files#diff-3 (12); > ; > Patch Links:; > - https://github.com/psi4/psi4/pull/515.patch; > - https://github.com/psi4/psi4/pull/515.diff; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/515, or mute the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdkAhbXRujKqYMI0ebQRkBB4FdOHOks5q9PILgaJpZM4KwN-5; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/515#issuecomment-260078097:1550,Patch,Patch,1550,https://psicode.org,https://github.com/psi4/psi4/pull/515#issuecomment-260078097,2,"['Patch', 'patch']","['Patch', 'patch']"
Deployability,"This is fantastic, Ashutosh. I think you may have forgotten to activate the test, which can be done by adding cc13d to [this line](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L40) in CMakeLists.txt of the tests. Apart from that, I think removing the 3pt finite difference test would be a good idea (there's nothing the 3pt test would catch that the 5pt finite difference test below wouldn't, unless I'm missing something). After that, if you could follow [these directions](http://www.psicode.org/psi4manual/master/build_obtaining.html#what-is-the-suggested-github-workflow) to update your branch, I suggest to @loriab , @jturney and @dgasmith that we pull this one in next (sorry for leapfrogging the Simint PR, Lori).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/670#issuecomment-290936022:596,update,update,596,https://psicode.org,https://github.com/psi4/psi4/pull/670#issuecomment-290936022,1,['update'],['update']
Deployability,"This is great. All of my plugin compilation stuff is working now with the latest conda release, so I'm going to close this. Thanks for all the hard work!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-176947331:87,release,release,87,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-176947331,1,['release'],['release']
Deployability,"This is just about as far as this PR is going to go. Fully removing memory_manager would require a way to store how much memory has been ""spent."" Keeping track of that without globals requires a wavefunction. Once the wavefunction is in place to track memory, the MemoryManager can be removed from psimrcc without much hassle. Two issues before potentially merging this:; 1. I want to do some profiling to make sure that none of my pointer -> std::vector replacements hit performance. `.data()` and passing const refs is enough, according to my very preliminary tests, but I'll do some more in-depth ones once I figure out how to use VTune.; 2. Do we want this as a 1.4 target? We really don't need more PR dependencies before 1.4, given that the 1.4 paper is already published, but 1.4 is still not release-ready. If we don't, then let's hold off on the merge until after 1.4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-634141409:800,release,release-ready,800,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-634141409,1,['release'],['release-ready']
Deployability,"This is not ok. The SCF class header `hf.h` states; ```; /// List of external potentials to add to Fock matrix and updated at every iteration; /// e.g. PCM potential; std::vector<SharedMatrix> external_potentials_;; ```. Indeed, if you look at the SCF driver, this array gets populated at every iteration; ```; if core.get_option('SCF', 'PCM'):; calc_type = core.PCM.CalcType.Total; if core.get_option(""PCM"", ""PCM_SCF_TYPE"") == ""SEPARATE"":; calc_type = core.PCM.CalcType.NucAndEle; Dt = self.Da().clone(); Dt.add(self.Db()); upcm, Vpcm = self.get_PCM().compute_PCM_terms(Dt, calc_type); SCFE += upcm; self.push_back_external_potential(Vpcm); ```; which is why it is cleared at every iteration. The right way to do this is to add a definition of a persistent external potential, which gets summed in at every iteration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3228#issuecomment-2391567558:115,update,updated,115,https://psicode.org,https://github.com/psi4/psi4/pull/3228#issuecomment-2391567558,1,['update'],['updated']
Deployability,This is now implemented with the wavefunction_pass update. Please post any issues that you may have with SOSCF in a new issue.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/155#issuecomment-184815478:51,update,update,51,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-184815478,1,['update'],['update']
Deployability,"This is pretty early days on this PR. The short is that a `Computer` can be `CBS/FindIf/N-Body/Single/etc` (?) so that you can nest them and where a `Single` is the only object that calls quantum chemistry. For example, a `N-Body` can be made up of `Single` computations or `CBS` computations where a CBS computation will be made up for two or more `Single` computations. In this case, calling `compute` on `N-Body` will call `compute` on all of its children which if is a `Single` will call a quantum chemistry computation or if `CBS` will call 2 or more single computations (or FindIf!) and then construct that data into an extrapolated energy which will be given to `N-Body`. The key here is that the `Single` can have three modes 1) a continuous computation on a single node 2) a sow/reap mode using files and 3) a sow/reap mode using [QCFractal](https://qcfractal.readthedocs.io/en/latest/). There will assuredly be many more docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-437624744:739,continuous,continuous,739,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-437624744,1,['continuous'],['continuous']
Deployability,"This is quite important to have before the next release. If you will not have a chance to work on this, please let us know and we can open a general issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/880#issuecomment-359270820:48,release,release,48,https://psicode.org,https://github.com/psi4/psi4/pull/880#issuecomment-359270820,1,['release'],['release']
Deployability,"This is ready for consideration again. See ""April 2018 updates"" at top for status.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-382988041:55,update,updates,55,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-382988041,1,['update'],['updates']
Deployability,"This is ready for final consideration. It's not very urgent but MolSSI/QCEngine#46 is waiting on it. Read the new notes at the top. Windows looks like it's failing but it just needs an missing `@using_mp2d`. I'll patch that up as comments come in. Nominally this is Dom's, but later parts are all mine, so I won't self-review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1491#issuecomment-471375420:213,patch,patch,213,https://psicode.org,https://github.com/psi4/psi4/pull/1491#issuecomment-471375420,1,['patch'],['patch']
Deployability,This is ready for review. Mind the updated OP. I want to wait with the merge until I get a DOI for the paper describing the revTPSS-NL parameters.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1320#issuecomment-441206579:35,update,updated,35,https://psicode.org,https://github.com/psi4/psi4/pull/1320#issuecomment-441206579,1,['update'],['updated']
Deployability,This is ready to be merged and after the pipeline has to be configured: https://dev.azure.com/psi4/psi4/_build,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1368#issuecomment-441602062:41,pipeline,pipeline,41,https://psicode.org,https://github.com/psi4/psi4/pull/1368#issuecomment-441602062,1,['pipeline'],['pipeline']
Deployability,"This is the first DFJKGrad after the first SCF. I just updated my branch to master, and still see the same error arising from line 461 in `jk_grad.cc`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010#issuecomment-697269086:55,update,updated,55,https://psicode.org,https://github.com/psi4/psi4/issues/2010#issuecomment-697269086,1,['update'],['updated']
Deployability,"This is the output and pydantic has version 1.3. How can it be that ""conda update --all"", or a fresh install for that matter, would not give me the up-to-date version?; ```; # Name Version Build Channel; atomicwrites 1.4.0 pyh9f0ad1d_0 conda-forge; attrs 21.4.0 pyhd8ed1ab_0 conda-forge; bzip2 1.0.8 h8ffe710_4 conda-forge; ca-certificates 2022.6.15 h5b45459_0 conda-forge; certifi 2022.6.15 py38haa244fe_0 conda-forge; colorama 0.4.4 pyh9f0ad1d_0 conda-forge; dftd3 3.2.1 1 psi4; gau2grid 2.0.7 hcb41399_1 conda-forge; gcp 2.0.2 0 psi4; importlib-metadata 4.11.4 py38haa244fe_0 conda-forge; importlib_metadata 4.11.4 hd8ed1ab_0 conda-forge; importlib_resources 5.8.0 pyhd8ed1ab_0 conda-forge; iniconfig 1.1.1 pyh9f0ad1d_0 conda-forge; intel-openmp 2019.1 144; libblas 3.8.0 8_mkl conda-forge; libcblas 3.8.0 8_mkl conda-forge; libffi 3.4.2 h8ffe710_5 conda-forge; libint2 2.6.0 h2e52968_4 psi4; liblapack 3.8.0 8_mkl conda-forge; libxc 5.2.3 py38h294d835_1 conda-forge; libzlib 1.2.12 h8ffe710_1 conda-forge; m2w64-gcc-libgfortran 5.3.0 6 conda-forge; m2w64-gcc-libs 5.3.0 7 conda-forge; m2w64-gcc-libs-core 5.3.0 7 conda-forge; m2w64-gmp 6.1.0 2 conda-forge; m2w64-libwinpthread-git 5.0.0.4634.697f757 2 conda-forge; mkl 2019.1 144; msgpack-python 1.0.4 py38hbd9d945_0 conda-forge; msys2-conda-epoch 20160418 1 conda-forge; networkx 2.8.4 pyhd8ed1ab_0 conda-forge; numpy 1.22.4 py38h1d2777f_0 conda-forge; openssl 3.0.3 h8ffe710_0 conda-forge; packaging 21.3 pyhd8ed1ab_0 conda-forge; pint 0.17 pyhd8ed1ab_0 psi4; pip 21.2.2 py38haa95532_0; pluggy 1.0.0 py38haa244fe_3 conda-forge; psi4 1.6+77475b5 py38_0 psi4; psutil 5.9.1 py38h294d835_0 conda-forge; py 1.11.0 pyh6c4a22f_0 conda-forge; py-cpuinfo 8.0.0 pyhd8ed1ab_0 conda-forge; pydantic 1.3 py38hfa6e2cd_0 psi4; pyparsing 3.0.9 pyhd8ed1ab_0 conda-forge; pytest 7.1.2 py38haa244fe_0 conda-forge; python 3.8.13 hcf16a7b_0_cpython conda-forge; python_abi 3.8 2_cp38 conda-forge; pyyaml 6.0 py38h294d835_4 conda-forge; qcelemental 0.17.0 py_0 psi4; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:75,update,update,75,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,2,"['install', 'update']","['install', 'update']"
Deployability,"This is valuable, thank you. As you might suppose, we did one Python 3 compatibility pass some time ago, but none of the core developers regularly works in 3, to my knowledge.; - The fd-freq-energy segfault is because there was an exit() command in the input file. It's clean for me when I comment it out, and I've referred the test case to the appropriate developer.; - Thanks for the reckoning on what remains to be tested. The plugins don't have much exotic python, though I should probably check them for print(...), and for dftd3 and mrcc, one should work if the other does. Perhaps you were using the developers' documentation (http://sirius.chem.vt.edu/psi4manual/master/index.html) instead of users' (http://sirius.chem.vt.edu/psi4manual/latest/index.html)? The former links to the private repo and the latter to the public one. The patch is here (https://raw.github.com/psi4/psi4release/master/lib/scripts/patch_grimme_dftd3) and should be universally readable, if you ever want it.; - Those pywrap test cases fall within my purview. I've been considering re-doing the sow/reap routines that use format_*_for_input functions for a while. Python 3 compatibility will provide another impetus/constraint for that. I don't see a clean solution to it either.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20548249:841,patch,patch,841,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20548249,1,['patch'],['patch']
Deployability,"This is what I do for my Catalina build with gcc9/mkl against conda python+libraries. . a) get `psi4-dev psi4-rt psi4 -c psi4/label/dev` from conda (conda psi4 binaries plus dependencies to build from source); (`conda remove -f v2rdm_casscf` because it gives symbol errors); b) `export PATH=/Users/kruse/homebrew/bin:$PATH` for my homebrew gcc-9; c) run the below script (This is what `psi4-path-advisor` gave me plus making sure the correct compilers are used, plus a custom installation dir. Since recently I also have to turn of 2 default plugins because of symbol problems `-DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF`, might not be necessary for everyone). ```; #!/bin/bash; export MKLROOT=/Users/kruse/qc/miniconda3; rm -rif objdir; /Users/kruse/qc/miniconda3/bin/cmake -H. -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsCache.cmake -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsMKLCache.cmake -DCMAKE_C_COMPILER=gcc-9 -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_Fortran_COMPILER=gfortran-9 -Bobjdir -DCMAKE_INSTALL_PREFIX=/Users/kruse/qc/psi4.bin -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317:476,install,installation,476,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317,1,['install'],['installation']
Deployability,"This is with release 2, mkl 11.3 update 2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198597715:13,release,release,13,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198597715,2,"['release', 'update']","['release', 'update']"
Deployability,"This looks good to me - great work figuring this stuff out. I think the long-term plan will be to get all of the external perturbations into `MintsHelper` to avoid this kind of problem. However that's beyond the scope of this pull request. It would be nice to have a test case to prevent any regressions of this behavior: could you add a small molecule test (like the details you put on the forum post), by doing the following, please?. 1) Make a copy of an existing test folder, such as [this](https://github.com/psi4/psi4/tree/master/tests/fsapt1) and call it something like `fisapt-ext`. 2) In the CMakeLists.txt in the newly created `fisapt-ext`, edit the name `fsapt1` to read `fsapt-ext` in the two locations where it is present. 3) Modify the `input.dat` to represent a small system with a small basis set and populate the `Eref` dictionary with values from running that system with your updated, working psi4 version: these will be checked against the computed values when the test is run. 4) If the test takes less that about 30 seconds (I doubt it will, but that depends on the size of system) then please add `quicktests` to the list of labels on the third line of `CMakeLists.txt` and remove the `PROPERTIES COST 400` from the following line: this will allow the test to be run every pull request. If not, it's too expensive to run every time so it'll just be run during our nightly tests instead. 5) When you have a working test case, please run it and generate the output file as `output.ref`, so that we have something to look at if any changes break this feature in the future. 6) Add the new `fsapt-ext` test name [here](https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L60) so that our testing framework knows about it. I don't think you need the README or the `fsapt-ref` folder that are in that test directory, but I'm happy to be correct by other devs who know more about SAPT than I do. Thanks again for this change - it's a very important addition.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576:895,update,updated,895,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-489109576,1,['update'],['updated']
Deployability,"This might be something dumb on my part, but I cannot get this build to run on our Linux system:; ```; >>> import psi4; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/mmfs1/home/kjp0013/psi4_erika/psi4/objdir_p4d19/stage/lib/psi4/__init__.py"", line 71, in <module>; from . import core; ImportError: /mmfs1/home/kjp0013/psi4_erika/psi4/objdir_p4d19/stage/lib/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: _ZN3psi6mp2f126mp2f12ESt10shared_ptrINS_12WavefunctionEERNS_7OptionsE; ```. I installed einsums from conda-forge. What else do I need to do?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-1865207636:530,install,installed,530,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-1865207636,1,['install'],['installed']
Deployability,This pull request **fixes 24 alerts** when merging e5a14899eabffc69e4d5d6936e899c47d3481815 into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-45f5575234c16e273f606813c2184f52d81cfdff). **fixed alerts:**. * 24 for Resource not released in destructor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1755#issuecomment-557313549:288,release,released,288,https://psicode.org,https://github.com/psi4/psi4/pull/1755#issuecomment-557313549,1,['release'],['released']
Deployability,This pull request **fixes 3 alerts** when merging 243f0e3764fcb774adf59ebcf663c642091b9de9 into c871e6cc2bff3e4252a19a82c5b49b6e6c6e05de - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-05ff4a152e1bbfc4cc4f76756181321b72126d42). **fixed alerts:**. * 3 for Resource not released in destructor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783#issuecomment-575663398:286,release,released,286,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575663398,1,['release'],['released']
Deployability,This pull request **introduces 1 alert** and **fixes 3** when merging d09ba6e426967fec0428f906a12765be177024b2 into c871e6cc2bff3e4252a19a82c5b49b6e6c6e05de - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6d50e515572122ac6209caa6ed7ad750b20ebbb7). **new alerts:**. * 1 for Resource not released in destructor. **fixed alerts:**. * 3 for Resource not released in destructor,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783#issuecomment-575460073:304,release,released,304,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575460073,2,['release'],['released']
Deployability,This pull request **introduces 4 alerts** when merging 2c4ec5b6cb0c617c8130b03e375d8525c4134eb0 into 766c1e760db0de3b1e685fa0313cb2f2d6d9b146 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d46382fbc2f5d7f6061716623d9462a311d08688). **new alerts:**. * 2 for Resource not released in destructor; * 1 for Unused local variable; * 1 for Multiplication result converted to larger type,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2039#issuecomment-731606599:289,release,released,289,https://psicode.org,https://github.com/psi4/psi4/pull/2039#issuecomment-731606599,1,['release'],['released']
Deployability,"This sounds very strange. When an internal build of a dep is triggered, it installs into a dirtree in objdir/stage/ . I know this is working in general because libxc and qcelemental have build internally for me lately. Admittedly I don’t think I’ve done an internal pb11 build since a couple minor versions ago, so maybe something has changed for them (header only libs are great for consumers but a pain to get serving correctly for all the software arrangements). I’ll look into that. In the meantime you can install pb11 via “conda install pybind11 -c psi4” (or -c conda-forge). If unaware, can also get all does from conda. See tweet for link and select “source” (sorry, we’re migrating websites at present).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-465575204:75,install,installs,75,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-465575204,3,['install'],"['install', 'installs']"
Deployability,"This typically indicates that either (A) the scratch file directory does; not exist or (B) the user does not have permissions to write to the scratch; file directory. To diagnose (A), echo the PSI_SCRATCH environment variable,; and make sure it points to a reasonable (non-NFS) path. To diagnose (B) ls; -l the base scratch directory and check that write permissions are enables; for the user. See the following notes from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56#issuecomment-40206429:427,INSTALL,INSTALL,427,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429,5,"['Configurat', 'INSTALL', 'install']","['Configuration', 'INSTALL', 'installation', 'installed']"
Deployability,"This was on a i7-4790 Haswell-DT. And it's an architecture we've seen some anomalies on. I'll try a 3930 and toggling xHost next. Good to know you've been building psi4 w/2016 compilers w/o disaster, @bennybp. release 1 or 2? This is with 16.0.2 20160204 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198596617:210,release,release,210,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198596617,1,['release'],['release']
Deployability,"This whole thread was very useful. I was able to create a conda environment with the latest psi4, openff-toolkit, and openff-recharge using this yml. The only thing not really mentioned in this thread, or the psicode latest installation is pinning pydantic version 1.x. I was getting this error ; ```; `; __pydantic_self__.__pydantic_validator__.validate_python(data, self_instance=__pydantic_self__) TypeError: Array.validate_type() takes 2 positional arguments but 3 were given`; ```. from this line of code in my example ( i believe it, recharge may need to pin pydantic 1.x). ```; from openff.recharge.esp.storage import MoleculeESPRecord; qc_data_record = MoleculeESPRecord.from_molecule(; openff_mol_3D, conformer=conformer, grid_coordinates=grid, esp=esp, electric_field=None, esp_settings=qc_data_settings; ); ```. ```. name: psi4; channels:; - conda-forge; - conda-forge/label/libint_dev; dependencies:; - conda-forge::psi4>=1.8.2; - conda-forge::openff-toolkit; - conda-forge::openff-recharge; - conda-forge::pydantic<2. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1826950752:224,install,installation,224,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1826950752,1,['install'],['installation']
Deployability,"This will be imminently unblocked by https://github.com/evaleev/libint/pull/279 (thanks, @JonathonMisiewicz)! But I don't think we want to rush that merge and this merge in time for v1.9, so I'm moving to v1.10. Hopefully 279 will be in the next official L2 release which we _will_ require for v1.9, so the ints will be ready for pseudospectral w/o another L2 shift.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2473#issuecomment-1809232656:258,release,release,258,https://psicode.org,https://github.com/psi4/psi4/pull/2473#issuecomment-1809232656,1,['release'],['release']
Deployability,"This won't be a comprehensive reply, just a getting-started one. In the beginning, there were lots o' blockers:; * no mkl; * no c++11; * no intel compiler capability for multiarch packages; * psi4 has dependencies that aren't quite vanilla upstream; * psi4 likes to provide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:307,release,released,307,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,1,['release'],['released']
Deployability,"This would be wonderful addition! Make sure to join also the slack channel (see README for link) for more immediate help and questions. There are different levels of integration. An independent plugin, a deep C-layer integration and a python-level integration. Some of the questions depends on what you want to aim for (or need). . Should `adcc` be distributed/build with psi4 in the end? (conda, cmake, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492:166,integrat,integration,166,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492,3,['integrat'],['integration']
Deployability,"Those comments aren't always 1:1 with the contents. But what's happening for 6-311+G* in particular is that 3 partial basis sets are getting merged: the 6-311 defined through Kr, the polarization defined through Kr, and the diffuse only defined through Ca. Only elements with partial basis sets available for all three pieces show up in the full basis file, so Kr, etc. are missing. Looking at 6-311+G* at https://www.basissetexchange.org/, that ends at Ca, too, so nothing to update. Does this clear up what's going on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2097#issuecomment-769922422:477,update,update,477,https://psicode.org,https://github.com/psi4/psi4/issues/2097#issuecomment-769922422,1,['update'],['update']
Deployability,"Thought I had, as this was the compilation including chemps2 and pcmsolver that I had working on Friday, but you're right, `git submodule update --init --recursive` changed the compilation. Now have the below:. ``` bash; [100%] Built target pcm-base; Scanning dependencies of target pcm-shared; Scanning dependencies of target pcm-static; Linking CXX static library ../lib/libpcm.a; Linking CXX shared library ../lib/libpcm.so; [100%] Built target pcm-static; ld: cannot find -lstdc++; make[5]: *** [lib/libpcm.so.1] Error 1; make[4]: *** [src/CMakeFiles/pcm-shared.dir/all] Error 2; make[3]: *** [all] Error 2; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-build] Error 2; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I know @robertodr has been working on building both `.a`/`.so` so the missing library is probably a result of those changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-170794065:138,update,update,138,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170794065,1,['update'],['update']
Deployability,"Three hours and nine minutes, according to the timestamps I have for relevant events. I _believe_ the build ran on a 32-thread (16-core) intel broadwell (with ample memory to avoid paging, for however much that helps), and the build was the only event happening on the machine at that time. (I am a little unsure, though, as it's a build-server, and I don't have any way of telling who else might've submitted a build job to the machine at that time. It was ~1AM on a Saturday, though, so probably just me). Also, the .so file generated was 925MB, if that's of any interest. Should I worry at all that the tarball represents a WIP in terms of the actual integral files? Or does the trial status only regard the configuration?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586#issuecomment-1133800433:711,configurat,configuration,711,https://psicode.org,https://github.com/psi4/psi4/issues/2586#issuecomment-1133800433,1,['configurat'],['configuration']
Deployability,"To avoid the complications forecasted by my last comment, we're going to update this repo to the current development head. This probably still breaks the items mentioned in https://github.com/psi4/psi4/pull/442#issuecomment-241027531, but I know Ryan's already shifted to some of my commits, so I think the trouble of Pulsar maybe having to tie their externalproject psi4 to e705b88 is less than the trouble if the development head gets lost or nonlinear. So FYI, particularly @bennybp .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241819043:73,update,update,73,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241819043,1,['update'],['update']
Deployability,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:98,update,updated,98,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412,2,['update'],['updated']
Deployability,To do the above you just need to copy [these lines.](https://github.com/fevangelista/psi4/blob/aac087f1c604787c1dd85d42bf2fcdc366ae858e/psi4/driver/procrouting/mcscf/mcscf_solver.py#L201-L210). Looking at the loops im not entirely sure that we can avoid another CI iteration/density build. . For better or worse the `SOSCF` module by and large does not handle frozen spaces. When you call `update` you can probably just set the `Cocc` and `Cvir` spaces to span the full space. The only catch is that you would need to turn off the tech that tries to save the frozen Fock and inactive Fock matrix when it is formed in other places. This would be the functions `set_AO_IFock` and `set_frozen_orbitals` and the booleans that they set. Maybe you want an option like `clean_focks` or some-such that will reset these booleans. The code will compute these quantities itself and the `Cocc` expansion to also include frozen orbitals should just work.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304539496:390,update,update,390,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304539496,1,['update'],['update']
Deployability,"To make sure we're clear, an Ana/Mini/Psi4conda installation are all independent. That is, `where conda`, `where python`, and `where psi4` should all start the same. If you've already got an Ana/Miniconda installation, maybe try skipping the Psi4conda installer, and try installing the psi4 package directly: `conda create -n <p4env> psi4 -c psi4/label/dev`, where `<p4env>` is your choice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875216998:48,install,installation,48,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875216998,4,['install'],"['installation', 'installer', 'installing']"
Deployability,"To my surprise, consensus at the psi conf call was to release 1.3 sooner rather than later. This is part of an effort to make releases not a 2 month production but a more frequent and non-intensive and non-manic-sprint-to-get-your-feature-in-this-year occurrence. **To that end, we're planning on Feature Freeze on Monday, 10 December 2018. Considerable apologies for the short notice.**. * Naturally, bug fixes allowed after FF; * We're not averse to 1.3.1, etc.; * v1.4 anticipated May–July 2019",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/972#issuecomment-444682893:54,release,release,54,https://psicode.org,https://github.com/psi4/psi4/issues/972#issuecomment-444682893,2,['release'],"['release', 'releases']"
Deployability,Totally makes sense to me and works well. Thank you for your helpful comments! I'll make a PR with a docu update.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1638#issuecomment-489100885:106,update,update,106,https://psicode.org,https://github.com/psi4/psi4/issues/1638#issuecomment-489100885,1,['update'],['update']
Deployability,"Tracked this down: `IMPORT` keyword is very specific to an export CI vector in an old format that is no longer supported, what you wanted was `DFILE` here so that it will read in the old D (or ""the"" current) CIVector. The `IMPORT` option and all associated content has been removed in an upcoming patch. The `DFILE` and `OPDM` options will now work as RSP will now write out CIVectors. Not entirely what was being read in, but it wasn't a real CIVector. Now, running this conventionally we still get an energy thats reasonable, but too high by about 5mH. This is apparently caused caused by the `EVANGELISTI` Hamiltonian diagonal approximation for some reason. We usually use this over the exact diagonal to avoid spin contamination, will try to look into this some. For now simply setting `HD_AVG HD_EXACT` will solve the above problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/175#issuecomment-217275131:297,patch,patch,297,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-217275131,1,['patch'],['patch']
Deployability,"True, due to a recently noticed oddity of the cmake build system, I can't build dkh w/o also building pcmsolver and that's not quite ready for public use. If you'd like dkh, I can see about including it. . Lori. Sent from my iPhone. > On Jul 26, 2015, at 2:40 AM, Hassenky notifications@github.com wrote:; > ; > I installed psi4 from miniconda.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-124981398:314,install,installed,314,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-124981398,1,['install'],['installed']
Deployability,"Trying @pavankum's code. File ""C:/Users/vike/PycharmProjects/pythonProject/test.py"", line 28, in return_td_result; energies = list(result.final_energies.values()); AttributeError: 'FailedOperation' object has no attribute 'final_energies'. printing result ... FailedOperation(error=ComputeError(error_type='resource_error', error_message='QCEngine Resource Error: Procedure torsiondrive is registered with QCEngine, but cannot be found.')). do I need to do a special install to use this properly?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486045729:467,install,install,467,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486045729,1,['install'],['install']
Deployability,"Turns out this is also required on some Linux platforms, at least Psi4 1.2.1 on Debian unstable (g++-8.2.0) also crashes in DFHelper::identify_order, see #1457 . So this should also be cherry-picked to the 1.2 branch for a possible 1.2.2 point release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-451647177:244,release,release,244,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-451647177,1,['release'],['release']
Deployability,"Two comments:; - `dlDF` is based off M05, you might want to try TPSS or SCAN.; - I am not really sure this clears our derivative code from problems. All meta functionals use the same integration code and could still be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/962#issuecomment-382383114:183,integrat,integration,183,https://psicode.org,https://github.com/psi4/psi4/issues/962#issuecomment-382383114,1,['integrat'],['integration']
Deployability,"Two of the versions of Psi4 dependencies on your machine are incompatible with each other. For us to have any idea _why_ they are incompatible, we need to know how you got these dependencies in the first place. Did you try to build Psi from source? Did you try to install Psi4 with conda?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1080979081:264,install,install,264,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1080979081,1,['install'],['install']
Deployability,"UPDATE: Above holds that Psi4 can be built against NumPy v1 _or_ v2, just be sure your runtime np is the same major version as your build-time numpy, or you'll get the ""atoms are too close"" error. _But_ I've learned a few more constraints and pitfalls since then:. * to use np v2, you must have `pybind11>=2.12` (right now the codedeps/psi4-path-advisor setup is constraining to 2.10 or 2.11 to avoid a docs issue; working on a resolution) (signature is ""atoms are too close""); * to use np v2, you must have `pint>=0.24.1` (v0.24.0 works for >=py310; v0.24.1 works for >=py39) (signature is something like sumprod not available in numpy); * to use np v2, you must have `qcelemental>=0.28.0` (fixed since last week; qcengine doesn't need changes); * on c-f, packages have ways or declaring what they're compatible with so that an env solves into a workable state. Those aren't in place at present for the numpy+pint and numpy+pybind11 combinations, so you need to check them yourself.; * even if your build env is np v2, beware of any pip installs that can surreptitiously sneak in a np v1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3184#issuecomment-2204639750:0,UPDATE,UPDATE,0,https://psicode.org,https://github.com/psi4/psi4/issues/3184#issuecomment-2204639750,2,"['UPDATE', 'install']","['UPDATE', 'installs']"
Deployability,"Uff, I don't think I will manage to patch up the writer to treat the symptoms from how various modules set the wavefunction data when running `gradient`. One way forward would be to disallow certain module/method combinations or print warnings, which is tricky as `QC_MODULE` is not rigorously set either.; Currently I went with some warnings since users will want DF-MP2 densities from `dfmp2`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-626378160:36,patch,patch,36,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-626378160,1,['patch'],['patch']
Deployability,"Unfortunately for diagnosis, everything looks pretty much as it ought. I might need to bump min glibc from 2.7-->2.11, but you should still be ok with 2.12. I just tried out the installer on a RHEL 6.7 system (6.6 == rocks 6.2 on my chart) with glibc 2.12, and it worked fine. Not sure how to go about debugging this remotely. Psi4 folks, if any of you have a Rocks sys I can log into, please let me know. I'll be back in Atlanta Monday. In the meantime, please (1) try `conda remove v2rdm_casscf` and (2) (from your miniconda3 dir). ```; >>> which conda python psi4; >>> gdb --args python psi4 share/psi4/samples/tu1-h2o-energy/test.in; (gdb) run; ...; SegFault; (gdb) bt; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404386592:178,install,installer,178,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404386592,1,['install'],['installer']
Deployability,"Update from @psi-rking:; > When the dynamic level gets changed, the binary (file 1) file is; > supposed to be deleted. I guess that it is not. The function that; > removes it does check:; > `if (! psi::_default_psio_manager_->get_specific_retention(1))`; > In your .psi4rc, are you perhaps setting retention of file 1? This; > could be happening in the psi4 driver somewhere too.; > If this is the problem, and you need to set the specific retention for; > some reason, then we will have to add another check to indicate; > deletion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/789#issuecomment-327607047:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/issues/789#issuecomment-327607047,1,['Update'],['Update']
Deployability,"Update that I've got the interface modernized to named tweaks, and I'm working on the tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-763229656:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-763229656,1,['Update'],['Update']
Deployability,"Update that facilities issues are improving, but the relevant computer is still switched off, so installers not available. I'll post here when the situation is normal again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3199#issuecomment-2265348987:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/issues/3199#issuecomment-2265348987,2,"['Update', 'install']","['Update', 'installers']"
Deployability,Update to libxc-6.2.2 is pending maintainer's approval in FreeBSD. As for formatting - should formatting tests really be part of the test suite?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3099#issuecomment-1848505594:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/issues/3099#issuecomment-1848505594,1,['Update'],['Update']
Deployability,"Update your PR description. Behavior changes are not ""minor cleanup"", even if that behavior is as simple as raising an error where there wasn't one before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488#issuecomment-1073393998:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/pull/2488#issuecomment-1073393998,1,['Update'],['Update']
Deployability,"Update, MVS error is coming from occupation guess. Ref on the left. ```; -------------------------------------------------------				 -------------------------------------------------------. ==> Integral Setup <==								 ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==						 ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes							 J tasked: Yes; K tasked: No							 K tasked: No; wK tasked: No							 wK tasked: No; OpenMP threads: 1							 OpenMP threads: 1; Integrals threads: 1							 Integrals threads: 1; Memory (MB): 375							 Memory (MB): 375; Algorithm: Core							 Algorithm: Core; Integral Cache: NONE							 Integral Cache: NONE; Schwarz Cutoff: 1E-12							 Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12							 Fitting Condition: 1E-12. => Auxiliary Basis Set <=								 => Auxiliary Basis Set <=. Basis Set: (6-31G AUX)								 Basis Set: (6-31G AUX); Blend: CC-PVDZ-JKFIT								 Blend: CC-PVDZ-JKFIT; Number of shells: 42								 Number of shells: 42; Number of basis function: 131							 Number of basis function: 131; Number of Cartesian functions: 131							 Number of Cartesian functions: 131; Spherical Harmonics?: false								 Spherical Harmonics?: false; Max angular momentum: 3								 Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.				 Minimum eigenvalue in the overlap matrix is 6.8158211762E-02.; Using Symmetric Orthogonalization.							 Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.		 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==									 ==> Iterations <==. Total Energy Delta E RMS |[F,P]|			 Total Energy Delta E RMS |[F,P]|. @DF-UKS iter 0: -71.60680989524471 -7.16068e+01 1.41427e-01 		 |	 @DF-UKS iter 0: -71.93847658446015 -7.19385e+01 1.43012e-01 ; @DF-UKS iter 1: -75.52774517284402 -3.92094e+00 8.33781e-02 		 |	 Occupation by irrep:; @DF-UKS iter 2: -75.47183403287708 5.59111e-02 8.91",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383210085:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383210085,1,['Update'],['Update']
Deployability,"Update: I have also tried; - downgrading to the latest stable psi4 release, following the instructions [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-update-a-psi4-binary) (just `conda update psi4 -c psi4`), which pulled `1.1+add49b9-py35_0 psi4`, and the issue persists.; - switching to conda Python 2.7 (mkl: 2017.0.1-0, numpy: 1.13.0-py27_0, psi4: 1.1+add49b9-py27_0 psi4). Same issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311448519:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311448519,4,"['Update', 'release', 'update']","['Update', 'release', 'update', 'update-a-']"
Deployability,"Update: Installing a version of numpy that doesn't link against MKL ""fixes"" the problem in the short term, but there's still something deeply fishy going on. (`1.13.0 py27_nomkl_0 [nomkl]`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311487436:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311487436,2,"['Install', 'Update']","['Installing', 'Update']"
Deployability,Update: The calculation crashed in the same way when using Psi4 1.4 (Git: Rev {master} 9485035). . Thanks for the suggestions! Is it possible to request RI-J plus exact exchange in Psi4? I was not able to find it in the manual.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2288#issuecomment-912333542:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-912333542,1,['Update'],['Update']
Deployability,"Update: This performance issue was fixed by #2413, which upgraded libint2 from 2.6.0 to 2.7.1. For completeness, here are the timings on the above test case:. | Cores | Psi4 OS<br/>Wall Time (s) | Psi4 OS<br/>Parallel Speedup | Libint 2.6.0<br/>Wall Time (s) | Libint 2.6.0<br/>Parallel Speedup | Libint 2.7.1<br/>Wall Time (s) | Libint 2.7.1<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- | 99.4 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 | 49.9 | x1.99 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 | 25.2 | x3.94 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 | 13.0 | x7.66 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 | 6.4 | x15.45 |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491#issuecomment-1077047578:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/issues/2491#issuecomment-1077047578,2,"['Update', 'upgrade']","['Update', 'upgraded']"
Deployability,Update: `-fvisibility=hidden` is indeed active in 2.2.1 and quite breaking plugins. Shelving this PR and recommending that symbols/c-layer-/py-layer-plugin-interfacing be a topic at WWDC.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-333604954:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-333604954,1,['Update'],['Update']
Deployability,"Update: fixed some of the py Molecule class issues (no more infinite recursion, yay!). Also gave the sow/reap pickles a serious stab, but was bested by unicode. So this issue will persist.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/833#issuecomment-356769175:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/issues/833#issuecomment-356769175,1,['Update'],['Update']
Deployability,"Update: testing is currently made very difficult by an issue with exception messages not propagating out of the threaded neighborhood of https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/aio_handler.cc ; But it was a good idea to actually try it, because I have found another corner case _even beyond this issue_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304827495:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304827495,1,['Update'],['Update']
Deployability,"Update: this is rebased and fit to review. @behnle, thanks for the comments on eqn numbers. I've added doi to the lines locally, but now they're all entangled with separate WIP.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2670#issuecomment-1220869733:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/pull/2670#issuecomment-1220869733,1,['Update'],['Update']
Deployability,"Update:; * There'll be another commit to this to fix some docs. Today, there's 1.2 libint in the conda channels, so we'll be able to look at travis/distelli built on that rather than the internal builds that the above reflects.; * Thanks for the config params, @susilehtola. The CMake ties libderiv AM to libint AM, so you may not have hit some of the problems. What I'm seeing now is that psi4/libint allows an AM=8 build (libderiv AM = libint AM - 1), but evaleev/libint/v1 segfaults in the libderiv generator execution. So I'm investigating the differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/695#issuecomment-300573061:0,Update,Update,0,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300573061,1,['Update'],['Update']
Deployability,"Updated according to suggestions. ; ```; => Pre-Iterations <==. Minimum eigenvalue in the overlap matrix is 3.9724095377E-02.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation info). -------------------------; Irrep Nso Nmo; -------------------------; A' 18 18; A"" 6 6; -------------------------; Total 24 24; -------------------------. ==> 2e-Integral Setup <==. DFHelper Memory: AOs need 0.001 GiB; user supplied 0.321 GiB. Using in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1713#issuecomment-533802390:0,Update,Updated,0,https://psicode.org,https://github.com/psi4/psi4/pull/1713#issuecomment-533802390,1,['Update'],['Updated']
Deployability,Updated list of other contributors,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-199429851:0,Update,Updated,0,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-199429851,1,['Update'],['Updated']
Deployability,"Updated log after applying the fix in #2245. Fixes the observed print discrepancy, but the bug persists. I suspect the culprit is line 619: on Susi's file, the C residual is ever so slightly not-zero. Not so in mine.; [output_post_2245.log](https://github.com/psi4/psi4/files/6811503/output_post_2245.log)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2243#issuecomment-879351036:0,Update,Updated,0,https://psicode.org,https://github.com/psi4/psi4/issues/2243#issuecomment-879351036,1,['Update'],['Updated']
Deployability,Updated manual and keyword section in private repo.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/143#issuecomment-121821246:0,Update,Updated,0,https://psicode.org,https://github.com/psi4/psi4/issues/143#issuecomment-121821246,1,['Update'],['Updated']
Deployability,"Updated the docs, please proceed with review @loriab @zachglick @davpoolechem",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543#issuecomment-1096292699:0,Update,Updated,0,https://psicode.org,https://github.com/psi4/psi4/pull/2543#issuecomment-1096292699,1,['Update'],['Updated']
Deployability,"Updated this a bit after talking with @bennybp. I think he's going to do the following, then it'll be about ready:; * tarball with higher (h) AM; * also, could you throw an error in libmints if try to access out of bounds AM through simint? or switch to libint?; * absorb the config6 branch into upstream.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281710846:0,Update,Updated,0,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281710846,1,['Update'],['Updated']
Deployability,"Updated!. Tbh, for large elements the use starts to get real clunky, but I don't understand the codebase well enough to instead provide a dict vs an array. Someone savvier than me should probably eventually update that (so that a user doesn't need to set 0's for a bunch of elements they Just Don't Care About), but I didn't see a mapping type available in the relevant context (just an int vector) so I went with what was there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2667#issuecomment-1209560924:0,Update,Updated,0,https://psicode.org,https://github.com/psi4/psi4/pull/2667#issuecomment-1209560924,2,"['Update', 'update']","['Updated', 'update']"
Deployability,"Updated. Had some rebase issues to solve. A vimdiff of the old and new output below. ---; vimdiff of the output between 1.4a2.dev215 (left) and this PR (right); <img width=""1606"" alt=""Screenshot 2020-03-03 at 23 18 02"" src=""https://user-images.githubusercontent.com/1648640/75825522-d69fb800-5da5-11ea-8c2d-8db2b8a723d5.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1713#issuecomment-594204058:0,Update,Updated,0,https://psicode.org,https://github.com/psi4/psi4/pull/1713#issuecomment-594204058,1,['Update'],['Updated']
Deployability,"Upgrade your version of Psi4. If you want TD-DFT, I suggest you use the [nightly build here](https://psicode.org/installs/v132/). TD-DFT calculations are being added in version 1.4. You can see a guide on how to perform TD-DFT [here](https://www.youtube.com/watch?v=MmG-g3SEFbk).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2071#issuecomment-748970773:0,Upgrade,Upgrade,0,https://psicode.org,https://github.com/psi4/psi4/issues/2071#issuecomment-748970773,2,"['Upgrade', 'install']","['Upgrade', 'installs']"
Deployability,"Used the builtin 'Update branch' button just now, thinking it'd rebase automagically, but that doesn't appear to be the case. Anyways, I just added a first pass at what we were discussing above. The reference values came from this Molpro input:. ```; ***,h2o properties; noorient; geometry = {; ang; O ,, 0.250254404867, 0.126248114412, 0.000000000000; H ,, 0.428893090449, 1.055731838795, 0.000000000000; H ,, 1.104987458381, -0.280303532167, 0.000000000000; }. basis=cc-pvdz; df-hf;; property; density,2100.2; pot,, -3.779451977, -3.779451977, 1.889725989; pot,, -3.779451977, 0.000000000, 1.889725989; pot,, -3.779451977, 3.779451977, 1.889725989; pot,, 0.000000000, -3.779451977, 1.889725989; pot,, 0.000000000, 0.000000000, 1.889725989; pot,, 0.000000000, 3.779451977, 1.889725989; pot,, 3.779451977, -3.779451977, 1.889725989; pot,, 3.779451977, 0.000000000, 1.889725989; pot,, 3.779451977, 3.779451977, 1.889725989; ef,, -3.779451977, -3.779451977, 1.889725989; ef,, -3.779451977, 0.000000000, 1.889725989; ef,, -3.779451977, 3.779451977, 1.889725989; ef,, 0.000000000, -3.779451977, 1.889725989; ef,, 0.000000000, 0.000000000, 1.889725989; ef,, 0.000000000, 3.779451977, 1.889725989; ef,, 3.779451977, -3.779451977, 1.889725989; ef,, 3.779451977, 0.000000000, 1.889725989; ef,, 3.779451977, 3.779451977, 1.889725989; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234683850:18,Update,Update,18,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234683850,1,['Update'],['Update']
Deployability,"Using `psrecord` with `psrecord ${PID} --interval 1 --plot plot1.png`. Can install via pip. There are better ones out there, but that one is simple. It might be good to use the `--log` feature as well so we can see some actual numbers as those charts are getting a bit jumbled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481747147:75,install,install,75,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481747147,1,['install'],['install']
Deployability,"Very sorry, I hit submit before I finished typing the issue. I will update this issue with details about the problem. Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916#issuecomment-1495233931:68,update,update,68,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1495233931,1,['update'],['update']
Deployability,"Warning that orbital energies then become ambiguous as well. Do you want the ""orbital energies"" at the correlated level of theory or the reference?. If there's no standard either way, then it may be best to let the user toggle which one they want in this corner case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-670534363:220,toggle,toggle,220,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-670534363,1,['toggle'],['toggle']
Deployability,"Was able to build locally, pipeline (up to `ctest`) ran successfully. There were issues on `pytest`, but it seems like these issues have to do with missing packages, so I'm not sure how to address them. See https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=4577f1f3-bc89-5040-5cf1-0f1c10ea6889&l=4843 for more details. Any advice would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583040315:27,pipeline,pipeline,27,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583040315,1,['pipeline'],['pipeline']
Deployability,We are currently doing an upgrade to how information is passed around in Psi4. This may make it easier in the future if we decide to add restart capabilities to SAPT.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/226#issuecomment-175175264:26,upgrade,upgrade,26,https://psicode.org,https://github.com/psi4/psi4/issues/226#issuecomment-175175264,1,['upgrade'],['upgrade']
Deployability,"We are one step closer: *Psi4* compiles and runs on Appveyor (https://ci.appveyor.com/project/loriab/psi4/build/1.0.15). Remaining tasks/issues:; - Fix threading; - MSVC supports only OpenMP 2.0, but *Psi4* needs higher at some parts. So some conditional compilation needed.; - `cctriples` and `libdpd` use `pthread` directly, but its port to Windows (`pthread-win32`) is a bit questionable quality. So need to change to use OpenMP.; - Debug 30+ failing tests; - Build `conda` packages; - Start initial deployment on *GPUGrid* (@tonigi, @stefdoerr)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-417611281:503,deploy,deployment,503,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-417611281,1,['deploy'],['deployment']
Deployability,"We can argue about whether the `dfmp2-ecp` test was or wasn't broken before PR #1350 was made, but the following point remains:. - the original part of the test is not touched by this PR, and by looking at `git blame` for the `input.dat` file, hasn't been touched in quite some time.; - as part of this PR, i have added a completely new section of tests, that are Kr--Kr interaction energies with DF-MP2/3-21G (no ECP's).; - a previous version of this PR, from around 2019-01-04, passed both the new and the old test.; - a later version of this PR, from until and excluding 2019-01-09, did not pass the new part of the test, but still passed the old test; - the current version of this PR has modified the new part of the test, after rebasing from master; it passes both the old test and the new test to 7 DP (I need to tighten convergence on the energy to pass it to 8 DP). A good diff to look at the issue is here:; https://github.com/psi4/psi4/pull/1350/commits/9e6329abb493ed79dbb6913ac4c1df957e9839ae#diff-32d6050d16bb770a64f7f94a67f26101; which compares the `output.ref` of the test for the version that passed on 2019-01-04 when the test was originally written, and passes the test now (locally) on 2019-01-09 with updated values. The puzzling thing is: what caused the change of the Kr--Kr interaction energies (and Kr MP2/3-21G energies converged to 1e-9)? What change would cause that, but not affect the first part of the test?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-452682935:1222,update,updated,1222,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-452682935,1,['update'],['updated']
Deployability,"We could, perhaps, give it as a _candidate_ for deprecation and deprecate it two releases from now, if nobody objects?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2834#issuecomment-1353502599:81,release,releases,81,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1353502599,1,['release'],['releases']
Deployability,We don't mean `0.4.0` as the new stable release. That will be `1.0.0`. The `0.4` tag (only on private at the moment) indicates some considerable data-passing changes. The sole public face of `0.4` at the moment is at https://anaconda.org/psi4/psi4/files .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182759327:40,release,release,40,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182759327,1,['release'],['release']
Deployability,We have a bit of a chicken and egg problem here with regard to getting this. This is likely waiting on EFP/PCM Python side stuff which is waiting on getting this in as some of the issues overlap. We can either merge the EFP/PCM/Python SCF iterations into this single PR or merge in the SCF iterations in *now* and patch up EFP/PCM later. Waiting on this however is likely a bad idea however as SCF is so fundamental to Psi and frequently is changed. While we have stated that psi4/psi4:master is only required to pass quick tests and only full releases require the full test suite to pass we have often stayed in the realm of having the full test suite pass all of the time. This has led users to pick up the current HEAD and using that as their main to get up to date features. This goes a bit into a larger discussion that we likely should mint more frequent minor updates so that we can feel free to break psi4/psi4:master as needed. That being said as long as we properly fence PCM/EFP being broken with large flashing warning lights a temporary break should be fine as long as its resolved in a timely manner. @robertodr @loriab @psi4/admins,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/847#issuecomment-347012315:314,patch,patch,314,https://psicode.org,https://github.com/psi4/psi4/pull/847#issuecomment-347012315,3,"['patch', 'release', 'update']","['patch', 'releases', 'updates']"
Deployability,"We may add RHF DF-CCSD(T) analytic gradients to the list of New Methods. Further, we may also include that FNOCC energies for the DFOCC module if pull request #824 is merged before the new release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-381039200:189,release,release,189,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-381039200,1,['release'],['release']
Deployability,"We need a hardcoded list for documentation purposes. In addition, we use those mechanics under the hood. I suppose we could allow a pass through to check if a give functional/primitives exists from a libxc call, but this is not too much a priority since its pretty easy to copy over the header when libxc is updated. Feel free to make a PR if you want this feature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-325682360:308,update,updated,308,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-325682360,1,['update'],['updated']
Deployability,"We recently overhauled large tracks of Psi4, this test should fail at the moment as we have not yet updated it to align with the new changes. Glad everything compiles now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312#issuecomment-196388183:100,update,updated,100,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196388183,1,['update'],['updated']
Deployability,"We should not have to explicitly state the usage of the Accelerate; framework. The test for the system BLAS is sufficient as libblas.\* and; liblapack.\* both reference Accelerate. This has been the case for the last; several versions of Mac OS X. Is this not the case of other people's Macs?. ls -l /usr/lib/libblas\* /usr/lib/liblapack*; /usr/lib/libblas.dylib ->; ../../System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib; /usr/lib/liblapack.dylib ->; ../../System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib. -Jet. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Thu, Jul 16, 2015 at 6:18 PM, Lori A. Burns notifications@github.com; wrote:. > Actually, you still do have to pass --accelerate to setup, as it's not on; > by default. @robertodr https://github.com/robertodr , is there a reason; > accelerate shouldn't be on by default for release builds?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/36#issuecomment-122120131.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-122123072:976,release,release,976,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-122123072,1,['release'],['release']
Deployability,We strongly recommend that you follow the [official download instructions](https://psicode.org/installs/v15/).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1004154539:95,install,installs,95,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004154539,1,['install'],['installs']
Deployability,"We updated to a new nuclear signature so the two are getting out of sync. Not completely sure this is fixable as you are pulling addons and Psi4 from different locations. . -Daniel Smith; Sent from my iPhone. . > On Nov 29, 2017, at 11:17, shannonhouck <notifications@github.com> wrote:; > ; > When trying to compile Psi4 with Miniconda3 using the keywords generated by psi4-path-advisor in the development environment, the following error is produced:; > ; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc: In function ‘void psi::dmrg::buildHamDMRG(std::shared_ptr<psi::IntegralTransform>, std::shared_ptr<psi::MOSpace>, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFmatrix*, CheMPS2::DMRGSCFindices*, CheMPS2::Hamiltonian*, std::shared_ptr<psi::PSIO>, std::shared_ptr<psi::Wavefunction>)’:; > /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:268:66: error: no matching function for call to ‘psi::Molecule::nuclear_repulsion_energy()’; > double Econstant = wfn->molecule()->nuclear_repulsion_energy();; > ^; > In file included from /home/shouck/psi4/psi4/src/psi4/dmrg/dmrgscf.cc:34:0:; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate: double psi::Molecule::nuclear_repulsion_energy(const std::array<double, 3ul>&) const; > double nuclear_repulsion_energy(const std::array<double,3> &dipole_field) const;; > ^; > /home/shouck/psi4/psi4/src/psi4/libmints/molecule.h:368:12: note: candidate expects 1 argument, 0 provided; > make[5]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/dmrgscf.cc.o] Error 1; > make[4]: *** [src/psi4/dmrg/CMakeFiles/dmrg.dir/all] Error 2; > make[3]: *** [all] Error 2; > make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-build] Error 2; > make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; > make: *** [all] Error 2; > The output generated by psi4-path-advisor --gcc is; > ; > /home/shouck/miniconda3/envs/p4dev/bin/cmake \; > -H. \; > -C/home/shouck/miniconda3/envs/p4dev/share/cmake/psi4/psi4DepsCache.cmake \; > -Bobjdir; > @ashutoshvt and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347970165:3,update,updated,3,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347970165,1,['update'],['updated']
Deployability,"We're being a little more explicit about information-passing, and that influences oeprop. Change your ending lines to the below and all should be well. I'd say look at the installed samples, but I just remembered those didn't get updated until `0.4.3` or so, and our conda build machine is kaput so I can't update them for you. Sorry about that. I'll look into that SAPT install problem. ```; Eqm, wfn = energy('PBE0', return_wfn=True); print('Energy: '+`Eqm`); oeprop(wfn, 'MULLIKEN_CHARGES'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182667180:172,install,installed,172,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182667180,4,"['install', 'update']","['install', 'installed', 'update', 'updated']"
Deployability,"Well since the argument came up again: I'm all for removal, because with `adcc`, we can guarantee a) correct results (several test cases!) b) all sorts of properties and c) up-to-date documentation. The step to go from requesting a psi-internal ADC calc to having the same job running with `adcc` is a simple `conda install`. IMHO there should not be a ""deprecation phase"" for a feature which is obviously broken and a full replacement is already there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1029233827:316,install,install,316,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1029233827,1,['install'],['install']
Deployability,"Well, I updated to the newest git which includes the patch that switches from -std=gnu++11 to -std=c++11 but the build still fails with the same error about `std::bind`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631#issuecomment-283681875:8,update,updated,8,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-283681875,2,"['patch', 'update']","['patch', 'updated']"
Deployability,"Well, I was really hoping to keep the build matrix fairly simple to prevent build # explosions. What if we do the following:; - clang 3.5, 3.7 (release); - gcc 4.8, 5.2 (release); - gcc 5.2 (debug). I don think building intermediate compiler releases is as important and we manage to stay at the 5 concurrent build number.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182887045:144,release,release,144,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182887045,3,['release'],"['release', 'releases']"
Deployability,"Well, an easy way is to download the patch; https://github.com/psi4/psi4/pull/1475.patch; and apply it on top of master. The alternative would be to git pull from my branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1501#issuecomment-458647273:37,patch,patch,37,https://psicode.org,https://github.com/psi4/psi4/issues/1501#issuecomment-458647273,2,['patch'],['patch']
Deployability,"Well, as we already have 4.0b5 installed on our systems, we stuck to this version scheme (we suffixed with a date for git builds). So, suddenly going to 1.0 will not work with our version ordering schemes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-182959247:31,install,installed,31,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182959247,1,['install'],['installed']
Deployability,"Well, good news is that the functional and the psi version are irrelevant. It's purely a particular geometry that you hit that's confusing the symmetry detection. And only when not shifted to center-of-mass. Never seen that error before, so will definitely investigate. Below is minimal example. BTW, `1.2a1.dev600` is still 300-400 commits behind master, due to my conda negligence. If I can get #946 in, I'll have a minimal _new_ conda build on the `-c psi4/label/agg` subchannel that actually uses the `-ng`/gcc72 compilers. ```; molecule MOL {; 1 1; nocom # toggle for disaster; C 0.000000000445 -0.000000002634 -0.176009819382; C 0.017055492504 1.213674219316 0.519005187104; C 0.010905297833 1.207533611621 1.904879649273; C 0.000000001371 -0.000000001015 2.595491320593; C -0.010905296809 -1.207533610178 1.904879653967; C -0.017055492743 -1.213674218642 0.519005186244; C 0.000000000685 -0.000000001418 -1.643506768663; H -0.011074063554 2.157895826255 -0.014254560550; H 0.006037200834 2.144998257605 2.447030976059; H 0.000000002397 0.000000004130 3.679031777447; H -0.006037200687 -2.144998259786 2.447030974663; H 0.011074059226 -2.157895829902 -0.014254553860; N -0.738518375832 -0.879256115198 -2.298061241871; N 0.738518376065 0.879256115454 -2.298061238276; H 0.714314308196 0.973365270982 -3.302615035270; H 1.398512102453 1.450008704958 -1.792988230964; H -1.398512105220 -1.450008704099 -1.792988237236; H -0.714314307164 -0.973365267449 -3.302615039280. }. energy = energy('B3lyp/cc-pvdz'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-379332937:562,toggle,toggle,562,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-379332937,1,['toggle'],['toggle']
Deployability,"Well, that sounds really like an overkill, since you end up doing more work than necessary to get the target integrals. Using my patch computing up to (am1,am2) is enough. A similar fix would then also be necessary for the second derivatives.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3#issuecomment-17313687:129,patch,patch,129,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-17313687,1,['patch'],['patch']
Deployability,"Well, the branches of the hidden repo are so developers can store code that's vulnerable to scientific scooping. And the master of the hidden repo is so we can integrate without being overly concerned about breaking things for people outside email's reach. . That said, you're right that we don't have the synching procedure automated so that public is often a couple weeks behind. After the May round of conferences, we're going to set up a continuous integration box so that we can do a nightly or weekly push to public if safe. . Sent from my iPhone. > On May 3, 2015, at 10:34 AM, wpoely86 notifications@github.com wrote:; > ; > @loriab why do you actually work with a hidden repo? It's quite annoying that all kinds of stuff is fixed/changed but not visible to us.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98490617:160,integrat,integrate,160,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98490617,3,"['continuous', 'integrat']","['continuous', 'integrate', 'integration']"
Deployability,"Well, this is a boost issue. I don't think anyone is actually going to hunt down why this particular pre-compiled boost is killing DGEMM. Probably something very strange. Anyhow, we can change our build strategy for now and link to an updated boost in the future. Let this be a warning when using pre-compiled boost.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-202602008:235,update,updated,235,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-202602008,1,['update'],['updated']
Deployability,"Wfn irrep logic for socc not correct... (Around line 91). Need to take; direct product of each socc orbital irrep. Can do this by XOR of each; irrep in the socc list. On Wed, Jan 2, 2019, 6:18 PM zachglick <notifications@github.com wrote:. > Description; >; > Addresses #1431 <https://github.com/psi4/psi4/issues/1431>; > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - Changes ORBSYM (the symmetry of each orbital) from Psi4's internal; > convention of ordering irreps to the traditional FCIDUMP ordering; > - Adds ISYM (the symmetry of the overall wavefunction); > - Updates the fcidump test to match new ordering; >; > Questions; >; > - Does this change in convention break anything in Psi4? (Or anything; > that uses Psi4?); > - Since I altered the tests to match the output, how to verify; > correctness of this change?; >; > Checklist; >; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1453; > Commit Summary; >; > - added helper function, correct ORBSYM output; > - added isym to fcidump, updated tests; >; > File Changes; >; > - *M* psi4/driver/p4util/fcidump.py; > <https://github.com/psi4/psi4/pull/1453/files#diff-0> (29); > - *M* tests/fcidump/Ne.6311G.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-1> (3); > - *M* tests/fcidump/Ne.C1.6311G.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-2> (1); > - *M* tests/fcidump/Ne.C1.cc-pVDZ.UHF.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-3> (1); > - *M* tests/fcidump/Ne.cc-pVDZ.UHF.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-4> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1453.patch; > - htt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1453#issuecomment-451294754:625,Update,Updates,625,https://psicode.org,https://github.com/psi4/psi4/pull/1453#issuecomment-451294754,1,['Update'],['Updates']
Deployability,What exactly did you install?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961475439:21,install,install,21,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961475439,1,['install'],['install']
Deployability,"What happens if a user runs a computation, toggles whether X2C is on, and then calls the wavefunction's `compute_gradient` method?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2200#issuecomment-867773626:43,toggle,toggles,43,https://psicode.org,https://github.com/psi4/psi4/pull/2200#issuecomment-867773626,1,['toggle'],['toggles']
Deployability,What happens if you use a tighter integration grid?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161#issuecomment-2075911725:34,integrat,integration,34,https://psicode.org,https://github.com/psi4/psi4/issues/3161#issuecomment-2075911725,1,['integrat'],['integration']
Deployability,What is left for this PR and what level of integration are you shooting for in this first pass?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552262003:43,integrat,integration,43,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552262003,1,['integrat'],['integration']
Deployability,"What is the difference between building from source or using the conda installer, but choosing the nightly build ? Because the conda installation seems to work on my laptop compare to the source one. As I just need the developer version, i.e. the last one on the master branch of Github, I wonder if the conda installation is sufficient or not ?. ```; conda install psi4 psi4-rt python=3.7 -c psi4/label/dev; conda activate p4dev; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615225584:71,install,installer,71,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615225584,4,['install'],"['install', 'installation', 'installer']"
Deployability,"What is the option even meant to do? Only do DIIS if you have `N` vectors? This sounds like an idiotic strategy IMNSHO, since doing a bare Roothaan update will be way worse... I guess the only reasonable option is to mark it as deprecated for the next release and remove it in the subsequent one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2401#issuecomment-1010171000:148,update,update,148,https://psicode.org,https://github.com/psi4/psi4/issues/2401#issuecomment-1010171000,2,"['release', 'update']","['release', 'update']"
Deployability,"What version are you using? I'm running on commit dd6b45b (updated May 7), and I can't reproduce this. Two geometry iterations finish successfully before SCF convergence fails. The SCF convergence failure appears to the fault of my old ""friend"", orbital guesses not correcting for changes in the overlap matrix when reading in orbitals for the initial guess... The initial guess from orbital read is terrible, and I see a large change in geometry for the update where the failure happened. The previous geometry, which also reads orbitals but from a much more similar geometry, seems to work fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1704#issuecomment-523874957:59,update,updated,59,https://psicode.org,https://github.com/psi4/psi4/issues/1704#issuecomment-523874957,2,['update'],"['update', 'updated']"
Deployability,What version of Psi4 are you using? I _suspect_ this was fixed in [a previous PR of mine](https://github.com/psi4/psi4/pull/2857) that hasn't yet been included in any conda releases. I'll confirm when I get to the office.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916#issuecomment-1495847906:173,release,releases,173,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1495847906,1,['release'],['releases']
Deployability,"What was the bug in cc5?. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Apr 4, 2016 at 9:32 AM, Daniel Smith notifications@github.com; wrote:. > @lothian https://github.com/lothian I fixed cc5 in this branch. cc5 now; > runs, passes, and the output.ref is updated.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205297042",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205307609:265,update,updated,265,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205307609,1,['update'],['updated']
Deployability,What's the output of `conda list`? You probably need to update your version of libint2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121151090:56,update,update,56,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121151090,1,['update'],['update']
Deployability,"What's your `conda info` and `~/.condarc`? I suspect strict channel priority and/or picking from conda-forge are causing the trouble. In particular, c-f has a 5.1.7 libxc while psi4 has a 5.1.5 . If this lead is correct, you can either temporarily remove c-f from your channels list or add `psi4::libxc` to your `conda create`/`conda install` command. By the way, it's much cleaner for solving if you create a new conda env with psi rather than installing into an existing env with unknown history.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1004870655:334,install,install,334,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004870655,2,['install'],"['install', 'installing']"
Deployability,"When I preview it wants a new line after each indent:. ```; * Edit recipe https://github.com/psi4/psi4meta/blob/master/installers/construct.yaml. - Edit the top matter for Configuration. See snapshots in directory for examples.; ; - Edit ``release`` fields. (Windows is often ``dev1`` unless separate steps.); - Edit ``ltrtver`` field. This matches the current setting in ``conda_build_config.yaml``; - For prereleases, ``""channel_tag"": ""/label/dev""``, while for (post)releases, it should be the empty string; - Edit the packages and channels info if necessary. Probably long-term stable. ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2274#issuecomment-897712139:119,install,installers,119,https://psicode.org,https://github.com/psi4/psi4/pull/2274#issuecomment-897712139,4,"['Configurat', 'install', 'release']","['Configuration', 'installers', 'release', 'releases']"
Deployability,"Where did you get your current Psi4 / dftd3 from? Is it from the installer, via conda, or compiled from source?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1724#issuecomment-534710889:65,install,installer,65,https://psicode.org,https://github.com/psi4/psi4/issues/1724#issuecomment-534710889,1,['install'],['installer']
Deployability,"Whew, I'd be alarmed if the hint variable wasn't doing its job. The cmake isn't set up to use $MKLROOT (I might have tried but that mkl and iomp5 aren't in the same place in a typical intel installation, as you noted). The complication is that this has to work even for `ExternalProject`s or across different computers and the purpose of TargetLAPACK is to provide a single entity to hand to subprojects without duplicating all the math detection machinery and all the cmake and envvars that influence it. I'm not sure current reworking is optimized, but I can live with one cmake hint var. The iomp5 detection works with GNU in conda b/c all the libs are gathered together so the second `find_library()` w/o `NO_DEFAULT_PATH` catches it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396753319:190,install,installation,190,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396753319,1,['install'],['installation']
Deployability,"While I appreciate that tests are now passing, I still request changes.; * Comments that refer to methods that no longer exist need to be removed.; * The comment on dfhelper's release_AO is vague. What does it mean to ""release AO""? Are you clearing memory used to store some AO-basis quantity?; * Naming a method ""release_AO"" that does not actually release AO is confusing. You need to change this.; * The title of this PR is misleading. This PR is not just optimizing I/O. This PR is _changing the values that Psi gives for SAPT(DFT)_ due to the options edits. Are these edits supposed to be part of the PR or not? That's going to determine how the rest of this review process goes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269:219,release,release,219,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1106499269,2,['release'],['release']
Deployability,"While trying to optimize the geometry for conformers of the ligand in the 2vx0 pdb structure I am also running into memory issues. Our cluster is running with cgroups and I ask for 10GB, but tell psi4 to use only 8gb. In that case most of the calculations fail >374 out of 500 conformers. To make it work I have to ask for 20GB and use only 4GB in psi4. The strange thing is these 500 runs have the same number of atoms and the same basis set, just different atomic positions. But some fail during the first SCF, some complete a few optimization cycles and a few complete. I have seen this behavior with the wB97x and the B3LYP functionals.; I have seen this with the conda installed 1.3rc2 and with a hand compiled version of 1.3rc2.; I have attached my input file and one of the smallest failed output files. I hope this helps pinning this down.; Thanks for working on Psi4, I love it!. [singlePsi4_rec290_pid12029.log](https://github.com/psi4/psi4/files/2911797/singlePsi4_rec290_pid12029.log); [singlePsi4_rec290_pid12029.txt](https://github.com/psi4/psi4/files/2911798/singlePsi4_rec290_pid12029.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1532#issuecomment-467980525:674,install,installed,674,https://psicode.org,https://github.com/psi4/psi4/issues/1532#issuecomment-467980525,1,['install'],['installed']
Deployability,"Whoops,. ``` python; # Integrate DFT with driver routines; for ssuper in superfunctional_list():; procedures['energy'][ssuper.name().lower()] = run_dft. for ssuper in superfunctional_list():; if ((not ssuper.is_c_hybrid()) and (not ssuper.is_c_lrc()) and (not ssuper.is_x_lrc())):; procedures['gradient'][ssuper.name().lower()] = run_dft_gradient; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178858441:23,Integrat,Integrate,23,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178858441,1,['Integrat'],['Integrate']
Deployability,"With @loriab's help, I managed to deploy `adcc` to conda.; There is a dev/temporary version available via; ```conda install -c adcc/label/dev_mkl adcc```; for testing purposes. Don't rely on it, though, it may disappear... :smile:; Make sure to install it in an existing `psi4` conda environment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-549809071:34,deploy,deploy,34,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-549809071,3,"['deploy', 'install']","['deploy', 'install']"
Deployability,"With that patch, the conda build works very nicely w/o forcing `-DPYTHON_LIBRARY`. Thank you. I'd like to absorb 0e7d3c9 into the repository, but I confess I can't find it. It's not a commit to master, a branch, a pull request, or a fork, just a lone commit on a tree. I'll accept the commit if I can find it, otherwise will push re-created commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-134831094:10,patch,patch,10,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134831094,1,['patch'],['patch']
Deployability,"With this update, dfocc.rst should also be removed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/147#issuecomment-122058381:10,update,update,10,https://psicode.org,https://github.com/psi4/psi4/pull/147#issuecomment-122058381,1,['update'],['update']
Deployability,"With wB97X-D3BJ/6-31G* on the same system, the non-MKL install gives -1964.4305 Hartree for the same system, and the MKL version blows up, not converging within 100 SCF iterations (the non-converged energies are around **66325650** Hartree). So it looks like you don't need a big basis to observe this instability, which is good for testing. But, this is more evidence that the MKL install has a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-900709116:55,install,install,55,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-900709116,2,['install'],['install']
Deployability,"Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:. # (a) for HF. energy(‘scf’). # (b) for unrestricted HF. set reference uhf; energy(‘scf’). # (c) for B3LYP. set dft_functional b3lyp; set reference rks; energy(‘scf’). # (d) also for B3LYP. energy(‘b3lyp’). # but this gets you HF (b/c ks reference is the hf/dft toggle control). set dft_functional b3lyp; energy(‘scf'). # (e) for unrestricted B3LYP. set dft_functional b3lyp; set reference uks; energy(‘scf’). # (f) also for unrestricted B3LYP. set reference uks; energy(‘b3lyp’). # (g) also for unrestricted B3LYP (since energy command trumps options, uhf gets translated to uks). set reference uhf; energy(‘b3lyp’). But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap reference into the energy() call for HF or DFT (though for the latter you’d have to use dft_functional keyword. Francesco brings up a related and overdue point. If you specify an open-shell molecule and no reference, it complains at you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110183382:323,toggle,toggle,323,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382,1,['toggle'],['toggle']
Deployability,"Without looking at ATLAS but extrapolating from OpenBLAS, unless the LAPACK is built with cmake components (or something similar), we can't even tell at psi-build+lapack-detection -time if the LAPACK has any chance of working. In OpenBLAS, of their 3 build modes (single, pthread, omp), the most commonly found, pthread, has no chance of working with psi, but one can't tell that from the blas installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455813717:394,install,installation,394,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455813717,1,['install'],['installation']
Deployability,"Without nocom, the first time the energy is computed, the center of mass is shifted to the origin, and all of the stored coordinates are updated. If change beh2.z to a new value, I might be expecting all of the other coordinates to still be where I specified them, not at their com-shifted values.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/59#issuecomment-43509699:137,update,updated,137,https://psicode.org,https://github.com/psi4/psi4/issues/59#issuecomment-43509699,1,['update'],['updated']
Deployability,"Wonder if it matters to this behavior what gcc is installed. On Friday, March 18, 2016, Ben Pritchard notifications@github.com wrote:. > This is with release 2, mkl 11.3 update 2.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/321#issuecomment-198597715",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198619829:50,install,installed,50,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198619829,3,"['install', 'release', 'update']","['installed', 'release', 'update']"
Deployability,"Wondering what's the status of 1.4 - AFAIK there was a paper out describing it, yet the latest (only) alpha release is over a year old. Do you have timeframe for 1.4? For Debian, I think I would need to package a couple more new dependencies which takes a while, so if it won't ship in 2020 anyway, it might not need to be rushed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-683409888:108,release,release,108,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-683409888,1,['release'],['release']
Deployability,"Wording this another way: what JK features is CompositeJK replacing, and what is it leaving be? Are there J-K combinations that we're leaving be because integrating them with CompositeJK would make things worse?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1302490589:153,integrat,integrating,153,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302490589,1,['integrat'],['integrating']
Deployability,"Would it be possible to decouple amplitude and orbital DIIS, i.e. so that the amplitudes get solved at fixed orbitals, and then the orbitals are updated? This would be useful for cases that are hard to converge, as well as active space calculations in large basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783#issuecomment-575730343:145,update,updated,145,https://psicode.org,https://github.com/psi4/psi4/pull/1783#issuecomment-575730343,1,['update'],['updated']
Deployability,"Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentation"" about reference log files. I can include those as well if desired. It will just greatly increase the number of lines changed in this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262515081:36,update,updated,36,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262515081,1,['update'],['updated']
Deployability,"Wow, looks like @hokru solved this 4 years ago in #1334. I've merged the PR to psi4/gdma but will need to rebuild the stack before you see any improvement. > Is there any documentation on how to keep an isolated installation of psi4 for development? Any tips would be appreciated!. It doesn't look like you need to do any investigation for this problem, but I'm glad to help on this in general. I'm not sure what you mean by ""isolated installation of psi4 for development"". I manage everything with conda envs. One might have an env with a psi4 conda package installed to use at runtime and another env with psi4-dev conda package installed to supply deps for a psi4 source repository with a compile directory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2706#issuecomment-1228746448:212,install,installation,212,https://psicode.org,https://github.com/psi4/psi4/issues/2706#issuecomment-1228746448,4,['install'],"['installation', 'installed']"
Deployability,"XFAIL is not an issue -- it means ""expected fail"". Since tests are passing, psi4 is probably correctly installed ... somewhere. :-) I'd check things like is Jupyter installed in the same conda env as psi4, did the correct conda env get activated (or selected from the jupy drop-down) _before_ starting the jupy kernel, are other packages near to psi4 importable, etc. . As you suggested, commands like `python -c ""import psi4 as q;print(q.__file__, q.__version__)""`, `python -c ""import qcelemental as q ...` can be helpful. If you paste your `conda list`, I can look for red flags.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195218393:103,install,installed,103,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195218393,2,['install'],['installed']
Deployability,"Yay, so building Psi4 w/ gcc/g++5.2 against a pre-built conda chemps2 is what's working?. HDF5 is persnickety in that chemps2 will complain if the HDF5 library it finds at runtime isn't the same one it was compiled against down to the patch level. That is, 1.8.16 and 1.8.17 aren't friendly. So unless you're lucky, you really must use the one that comes with the conda package. Does setting `-DCMAKE_PREFIX_PATH` to the conda env help to overcome the system hdf5? or `HDF5_ROOT`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288577924:235,patch,patch,235,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288577924,1,['patch'],['patch']
Deployability,"Yay. If that was the only lib --> share I missed, I'll be pleased. . > On Feb 14, 2016, at 12:59 AM, Andy Simmonett notifications@github.com wrote:; > ; > Your suggestion fixed the problem on my machine, @loriab. Great detective work. I just pushed the update, so we'll see if that fixes it. The non-PCM thing needs to be figured out some time, but I think it can wait until the rest of the merge issues are resolved.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183827620:253,update,update,253,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183827620,1,['update'],['update']
Deployability,"Yea, Psi4's SOSCF is an exact Newton update if you let the equations fully converge; however, it makes implementing SOSCF for KS a bit rough since we need to compute all possible KS Hessian vector products (which is actually on a todo list somewhere!). If it is a desired feature we can add an approximate SOSCF update. Either through BFGS or just some kind of clever diagonal approximation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/256#issuecomment-184844335:37,update,update,37,https://psicode.org,https://github.com/psi4/psi4/issues/256#issuecomment-184844335,2,['update'],['update']
Deployability,"Yeah sylabs would definitely work but only allows for storing .sif images. We could consider only offering `docker` containers and having `apptainer` users pull from `dockerhub`. See https://apptainer.org/docs/user/main/docker_and_oci.html#docker-hub. I know Jet loves using docker dev containers and I'm guessing others on the dev team do too. . As an explicit example from apptainers docs: ; pull tensorflow and run with the host's amd gpu libraries loaded into the container. MPI is essentially the same.; ```; $ apptainer pull docker://rocm/tensorflow:latest; $ apptainer run --rocm tensorflow_latest.sif; ```. As described in the link I referenced there are a few peculiarities that we would have to work through so that our docker containers will run properly with `apptainer`. Off the top of my head the two main things would be:. * making sure nothing is being installed in `/root` or `/home` by default (easy); * making sure that a writable filesystem is being mounted (The user would ultimately need to ensure that a scratch directory is available or that they're running from a directory/volume with disk space available). If we wanted, it might be nice to convert the docker containers explicitly to apptainer format and upload to sylabs? A new user at a super-computing institute probably wouldn't check dockerhub. For building apptainer containers, I normally start by pulling base images from dockerhub to work with. I haven't tried pulling and running docker containers directly though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2951#issuecomment-1536683682:869,install,installed,869,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536683682,1,['install'],['installed']
Deployability,"Yeah, CheMPS2 and Psi4 have to use gnu on the same side of 5.1 b/c GCC changed their std::string compatibility. The conda CheMPS2 is def. built against the gcc5.2 in that faq. Usually you have to have the gcc5.2 environment active during configuration and build _or_ pass extra args to the compilers, as below. Doesn't hurt to do both. But you're getting past the compiler checks. I've heard of problems with 2016.1 Intel compiler set. 2016.3 is known good. Actually, @amjames, was this the error you were seeing with early 2016 compilers?. ```; PFXC=/theoryfs2/ds/cdsgroup/miniconda/envs/text35; ; ${PFXC}/bin/cmake -H. -Bobjdir53 \; -DCMAKE_C_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icc \; -DCMAKE_CXX_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/icpc \; -DCMAKE_Fortran_COMPILER=/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/bin/intel64/ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${PFXC}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${PFXC}/bin/gcc -gxx-name=${PFXC}/bin/g++"" \; -DCMAKE_Fortran_FLAGS=""-gcc-name=${PFXC}/bin/gcc -gxx-name=${PFXC}/bin/g++"" \; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288535859:238,configurat,configuration,238,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288535859,1,['configurat'],['configuration']
Deployability,"Yeah, I actually just separated the dft-custom-functional into two tests, w/ and w/o gcp. . Are you sure it was either building v2rdm internally or finding a recent enough (early Dec) one? Psi keeps breaking API so v2rdm keeps needing updates. I just tried it locally and v2rdm3 passes (others fail, but that's `for_realloc_lhs`, a build error), so I don't think it's wholly broken. If your psi was picking up a old v2rdm lying around, I can believe it would thoroughly fail, as you see. Thanks for the report!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/905#issuecomment-361802078:235,update,updates,235,https://psicode.org,https://github.com/psi4/psi4/issues/905#issuecomment-361802078,1,['update'],['updates']
Deployability,"Yeah, I haven't looked at Azure much ever, but I noticed the error had; something to do with libxc. On Tue, Jan 19, 2021 at 5:38 PM Lori A. Burns <notifications@github.com>; wrote:. > ah, you can fix Linux CI by adding =4 to; > https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L85; > . I forgot that regular conda install psi4 has constrained libxc, but CI; > doesn't. Is that what you meant by ""bash test""?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2085#issuecomment-763212959>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TBAH7RW2EVRVZ4STADS2YJXNANCNFSM4WE43WOQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2085#issuecomment-763311657:276,pipeline,pipelines,276,https://psicode.org,https://github.com/psi4/psi4/pull/2085#issuecomment-763311657,3,"['install', 'pipeline']","['install', 'pipelines', 'pipelines-linux']"
Deployability,"Yeah, if we're going to allow C++17 we should upgrade the minimum [GCC to version 7](https://en.cppreference.com/w/cpp/compiler_support) in our CI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2483#issuecomment-1069347742:46,upgrade,upgrade,46,https://psicode.org,https://github.com/psi4/psi4/pull/2483#issuecomment-1069347742,1,['upgrade'],['upgrade']
Deployability,"Yeah, that code isn't efficient to use. That's probably why it wasn't exported. Could we help you to update the code instead?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239#issuecomment-876585963:101,update,update,101,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876585963,1,['update'],['update']
Deployability,"Yeah, that would be the reason - 1.3 was the first release with that `cubeprop` keyword. The easiest way to install is probably using the pre-built binaries for 1.3.2:. https://admiring-tesla-08529a.netlify.com/installs/v132/. If you need further help, give us a shout.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1722#issuecomment-534511091:51,release,release,51,https://psicode.org,https://github.com/psi4/psi4/issues/1722#issuecomment-534511091,3,"['install', 'release']","['install', 'installs', 'release']"
Deployability,"Yeah, the BLAS+OpenMP detection in Psi4 much predates the CMake FindBLAS, OneAPI, and Intel MKLConfig.cmake reforms. I'm not keen on any immediate changes before the upcoming release, but I agree that it's worth revisiting to see if some of the new tools streamline the build or solve more situations w/o intervention. (Though I personally don't like having environment variables influence CMake. :-) ). Btw iirc, OpenMP doesn't like to be statically linked, so you might favor `libiomp5.so`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160:175,release,release,175,https://psicode.org,https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160,1,['release'],['release']
Deployability,"Yeah, this is just too big a problem for DETCI's poor CISD capabilities. I answered this in the forums. Basically, if you optimize the code to do full CI very efficiently, you can wind up with an algorithm that creates intermediate data that is small enough to work fine for full CI, but blows up for CISD and makes the code run out of memory. And indeed, that's how I wrote the code, because we didn't care about CISD when we wrote it. I'm pretty sure the molecule reported here is big enough to run into this problem. I issued a PR to update the documentation to warn users away from DETCI CISD unless it's a tiny molecule (with a small basis).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1685#issuecomment-515615749:537,update,update,537,https://psicode.org,https://github.com/psi4/psi4/issues/1685#issuecomment-515615749,1,['update'],['update']
Deployability,"Yeah, we should put a catch in the code to not allow frequency() on an atom. On Thu, Mar 31, 2016 at 10:15 PM, Ryan Richard notifications@github.com; wrote:. > Admittedly the error message should be updated to be more informative, but; > the short answer is a single atom doesn't have a vibrational frequency.; > ; > More generally any molecular system has 3 times the number of atoms, total; > degrees of freedom; the difference between that and the number of external; > degrees of freedom is the internal degrees of freedom, i.e. the; > vibrations. An atom has three external degrees of freedom and thus in turn; > has 0 internal degrees of freedom.; > ; > Hope that helps.; > On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:; > ; > > Attempting frequency() on atomic species fails irrespective of charge,; > > multiplicity, and reference type.; > > ; > > Typical error message:; > > ; > > 1 displacements needed.; > > 1; > > ; > > An error has occurred. Traceback:; > > : basic_string::replace: File """", line 26, in; > > ; > > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > > frequency; > > psi4.thermo(wfn, wfn.frequencies()); > > ; > > Thanks,; > > -drhaney, -- that's ""D. R."", not Doctor.; > > ; > > Typical input file attached (C atom, neutral triplet).; > > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/332; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204210196",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204212411:199,update,updated,199,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204212411,1,['update'],['updated']
Deployability,"Yeah, we’re using a released libxc4. But that contains an unfavored (by them) fix that has to be hand applied to each release. Their favored fix is in their master but can’t be released because it breaks ABI so has to wait until libxc5. This PR has the interface to the libxc5 fix. Peculiar story but yes, still relevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-529103526:20,release,released,20,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-529103526,3,['release'],"['release', 'released']"
Deployability,Yes psicode.org is outdated and will be replaced soon. Maybe @loriab could update the download link until then. The latest releases are also linked on the github release page: https://github.com/psi4/psi4/releases,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1584#issuecomment-475855900:75,update,update,75,https://psicode.org,https://github.com/psi4/psi4/issues/1584#issuecomment-475855900,4,"['release', 'update']","['release', 'releases', 'update']"
Deployability,Yes sorry about that ... in the build it downloads an old adcc version from github instead of recognising the installed version from conda it seems. I'll take a look.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1825#issuecomment-593790466:110,install,installed,110,https://psicode.org,https://github.com/psi4/psi4/pull/1825#issuecomment-593790466,1,['install'],['installed']
Deployability,"Yes, I agree that details instructions and more demonstrations could be; added in separate PR, and not a reason to stall Alex's integration efforts. On Fri, Dec 2, 2022 at 2:04 PM Lori A. Burns ***@***.***>; wrote:. > /home/runner/work/psi4/psi4/code/objdir/doc/sphinxman/source/optking.rst:346:; > ERROR: Undefined substitution referenced: ""optking_frag_mode"".; >; > docs error above. probably needs double underscore after optking.; >; > Do we have a figure in there yet illustrating the inter-fragment; > definitions? I have no time to work on it today, but could tomorrow; > (Saturday).; >; > interfrag figure would be great. but if we get to the point where; > everything else is ready, I think that could be a separate PR.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/2727#issuecomment-1335779471>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TB764VCREPSYNXVVTTWLJI3HANCNFSM6AAAAAAQWELJAU>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1335896146:128,integrat,integration,128,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1335896146,1,['integrat'],['integration']
Deployability,"Yes, I believe that I am indeed mixing them. How do I specify a specific Python distribution in the installation process?. Also, the otool -L ...core.so output reads. ```; objdir/stage/usr/local/psi4/lib/psi4/core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib (compatibility versio; 	/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib (compatibility version ; 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316419197:100,install,installation,100,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316419197,1,['install'],['installation']
Deployability,"Yes, I left libdpd alone, since FAE had needed a function that psi4 didn't embed because unused. For the libraries, ""clearing out"" means simply not compiling. If any function is found to be needed, it's a `#` toggle in the CMakeLists.txt away. (Except possibly for ccsort and transqt2, for which there's another scheme afoot.) Could keep the ""unneeded"" lib files toggled off for months and then reevaluate, to be cautious.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262321324:209,toggle,toggle,209,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262321324,2,['toggle'],"['toggle', 'toggled']"
Deployability,"Yes, I updated this to do monomer-basis calculations. They are needed for correct counterpoise-corrected total energies. Maybe we should not compute them when the user requests interaction quantities with the option `return_total_data=False`. A new Psi4 driver is coming. It should have better control over which terms of the expansion are computed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-518705808:7,update,updated,7,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-518705808,1,['update'],['updated']
Deployability,"Yes, I've been updating them as I notice them, and 2845 is the most recent. afaik, there aren't any outstanding expired types. Sorry about the poor commit message - it was part of a big docs update. If you're still working from v1.3, https://github.com/psi4/psi4/issues/2656#issuecomment-1299120848 may be useful patches, too. Thanks for working on keeping this old version going. On the moving-past-v1.3 front, I now have a version of Libint2 that has solid harmonic ordering runtime-switchable, so a single build could work for all open-source consumers, finally including psi. But that'll require upstream acceptance into L2 and new versions (maybe could get away with rebuild?) of the quantum chem packages. So nothing imminent, but some progress.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865#issuecomment-1407770502:191,update,update,191,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1407770502,2,"['patch', 'update']","['patches', 'update']"
Deployability,"Yes, IIRC we need to make sure that `CCEnergyWavefunction`'s vars is updated *not* `ref_wfn`'s ? but just in energy modules, lambda/density/eom/response do not have proper wfns so they need to update whatever wfn they were passed [*Warning: It might not have the same name in all of those modules*]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/943#issuecomment-376675608:69,update,updated,69,https://psicode.org,https://github.com/psi4/psi4/issues/943#issuecomment-376675608,2,['update'],"['update', 'updated']"
Deployability,"Yes, if you were pulling from Conda everything would be fine. Conda is only updated periodically on the /dev channel, so its natural that psi4/psi4:master will get ahead of those built binaries. I usually recommend going sans addons while dev’ing unless you need them. > On Nov 29, 2017, at 12:05 PM, shannonhouck <notifications@github.com> wrote:; > ; > Ok, that makes sense. I got Psi4 by cloning the repo as usual, and it seems like I'm pulling CheMPS2 from the Miniconda p4dev (Psi4 development) environment. Using conda update chemps2 doesn't show any available updates; the button on the CheMPS2 page says the most recent version is 1.8.4, but the Conda site says it's 1.8.3.; > ; > I'll try pulling from GitHub and see if that fixes anything. Thanks for the help!; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/871#issuecomment-347979916>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABsBcS5FvbqgbVG1GK3u1ZsrwtiI714aks5s7bjvgaJpZM4QvfAl>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/871#issuecomment-347988321:76,update,updated,76,https://psicode.org,https://github.com/psi4/psi4/issues/871#issuecomment-347988321,3,['update'],"['update', 'updated', 'updates']"
Deployability,"Yes, it seems elaborate just to keep metadata with the quadratures. And the quadratures themselves are not in the best state, considering we regex process them. And having thousands of them is a blot upon the `install` step. They're downloaded from a website (see [README](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/quadratures/1_x/README)), so ideally both quadratures and metadata would be pulled into a json or similar library, then read into cpp. But this seemed a quick fix. Will tag the PR for v1.2.2 backport. Ok to let those accumulate until all errors found and solved or do you need it sooner?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451987163:210,install,install,210,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451987163,1,['install'],['install']
Deployability,"Yes, please aim for typing_extensions=4.5 https://github.com/pydantic/pydantic/issues/5821 . Or update pydantic; iirc they did an extra v1 release to resolve this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3062#issuecomment-1767169966:96,update,update,96,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767169966,2,"['release', 'update']","['release', 'update']"
Deployability,"Yes, read my comment above as if I was thinking there was a v1.3.2 py38 build. I was misremembering -- there isn't. . * v1.3 was py36/37.; * Since then, psi4 is py36/37/38.; * v1.4 release may well be py37/38/39.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-671666352:181,release,release,181,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671666352,1,['release'],['release']
Deployability,"Yes, that foreach is overkill. I'll remove it if it looks like there's nothing more to add. You're welcome to take any of this back to autocmake. @robertodr's already mentioned putting together a backport. I wouldn't call this a thorough overhaul of the mkl detection, just a patch of some known deficiencies (mkl_rt, iomp5). And with all the `-Wl,`s mkl requires, I highly recommend ConfigMath/autocmake use targets, if it isn't already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276091624:276,patch,patch,276,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276091624,1,['patch'],['patch']
Deployability,"Yes, that is exactly the contents of the above location. This plugin is just the basic psi4 plugins. All of them fail to compile/install. If I search for @CXX, this shows up in every CMakeLists.txt in the Build/psi4 plugins directory. . No, I have never used `--inplace`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271956386:129,install,install,129,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271956386,1,['install'],['install']
Deployability,"Yes, that would be nice. I try to use psi4 for sort of production use, so stay on these tag-releases in a hope that they have less of these kind of development bugs :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-410427728:92,release,releases,92,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-410427728,1,['release'],['releases']
Deployability,"Yes, the plugin scheme as currently implemented expects that you're generating a new plugin from a locally compiled psi4. The binary clearly doesn't satisfy that and indeed the excerpt you posted is both machine- and build-specific since it contains various oddities for making the binary as static and backwards-compatible as possible. I'm actually in the middle of trying to get the psi4 binary and all its subsidiaries in shape for both users and developers. May as well try to get plugins going, too. If you know of any conventions for handling plugins/libgcc dependencies within conda, I'd be interested to read of them. Where is `libplugin` called for? In the build, it's just a static library that gets linked into the psi4 exe. I can certainly install it, but it may need to be a `.so` to be useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172147949:752,install,install,752,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172147949,1,['install'],['install']
Deployability,"Yes, there's now py27, py35, py36 for Linux and Mac. I've been getting the build and packaging automated again these past few days. There's a few more external projects that need final integration (simint, ambit, a slight dkh fix). I'm aiming for RC1 by mid next week because I'll be away for a bit after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-289781613:185,integrat,integration,185,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-289781613,1,['integrat'],['integration']
Deployability,"Yes, these tests fail if I run them. As far as I understand they should be updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3167#issuecomment-2120923465:75,update,updated,75,https://psicode.org,https://github.com/psi4/psi4/pull/3167#issuecomment-2120923465,1,['update'],['updated']
Deployability,"Yes, this is an embarrassing but rare known issue. It's not unalike the problem mentioned in #782 where geometry updates were interpreted in a different frame from internal representation leading to surprise results. Only in this case it's a units problem. There isn't a ready solution, so it's simply in mind to be fixed at next Mol spec iteration (in progress). If you hit it in the meantime, just toggle [this line](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsmolecule.py#L1165) with `if True:` (and re-make to copy the file); it's harmless so long as your input geometry doesn't actually have overlapping atoms. The class was designed better than this; there was a later decision that leads to this error popping up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/804#issuecomment-333541702:113,update,updates,113,https://psicode.org,https://github.com/psi4/psi4/issues/804#issuecomment-333541702,2,"['toggle', 'update']","['toggle', 'updates']"
Deployability,"Yes, this is from my fork generated and built yesterday. All old versions, including the old installations were removed. TDC. Sent from my iPhone. > On Nov 6, 2016, at 8:34 AM, Justin Turney notifications@github.com wrote:; > ; > That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?; > ; > > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > > ; > > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > > Traceback (most recent call last):; > > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > > raise KeyError(""The file %s does not exist."" % args[""input""]); > > KeyError: 'The file input.dat does not exist.'; > > ; > > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503#issuecomment-258681365:93,install,installations,93,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681365,2,['install'],"['install', 'installations']"
Deployability,"Yes, we have recently pushed a very large update to how data handling is passed in Psi4. Please change your input to the following:. ``` python; scf_e, scf_wfn = energy('scf', return_wfn=True); oeprop(scf_wfn, ""MULLIKEN_CHARGES""); ```. Effectively, there is no longer a global wavefunction and you must explicitly pass wavefunctions around. Sowreap should fail at the moment (has not had a wavefunction_pass update yet). Can you please post the sapt4 error and the git reference hash?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260#issuecomment-184837562:42,update,update,42,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184837562,2,['update'],['update']
Deployability,"Yes, we're in a bad situation wrt pybind11. We use 2.0 (c. Jan 2017) that allows the resulting python `.so` to also be used as an ordinary Linux library for symbols for our plugins. Unfortunately, at 2.0 the pybind11 installations via `setup.py` and CMake had different directory structures, with the former being more common in packaging. So most detected pybind11 2.0's would be useless to psi. On the other hand, pybind11 2.2 restricts symbol usage, so can't be used with our plugin system. But the install directory structures have been reconciled, I believe. Until we reform our symbol handling and plugin system and allow pybind11 updating, I think the current situation is best. You're welcome to delete the final offending pybind11 files; it will only break the psi4 plugin system, not psi4 itself. It would be [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L234-L237) to change. I may be not quite following the INSIST_FIND_PACKAGE reasoning. What you're after is readily achieved by `ENABLE_PkgName=ON`/`OFF` and inspecting the ""Found""/""Building"" labels of the initial CMake config. Is it because you want the CMake config to _fail_ when the desired Found/Build pattern is not achieved, rather than the run-successfully/inspect/delete/run process currently in place? I can see how in an automated workflow situation that would be preferable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343777115:217,install,installations,217,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343777115,2,['install'],"['install', 'installations']"
Deployability,"Yes, we're planning on a series of release candidates after the necessary features are in wherein only bug fixes permitted. For the most part, we work on a nightly build release schedule, but yes, we do want 1.0.0 to be durable. Thanks for the new term, ""brown-paperbag"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-178167204:35,release,release,35,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178167204,2,['release'],['release']
Deployability,"Yes, you're quite right that the installer release (essentially miniconda with psi4 pre-installed) is a new conda installation. Sorry, for the people willing to type `conda install`, I forget they may have considered the installer. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468638876:33,install,installer,33,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468638876,6,"['install', 'release']","['install', 'installation', 'installed', 'installer', 'release']"
Deployability,"Yes. For py-side development, can probably get away setting PSIDATADIR and running driver on source. But, on the whole, I'm resigned. We did have cases, e.g., plugins, where psi4 was supporting running from source in preference to running from installed; it'll be simpler supporting just the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235905609:244,install,installed,244,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235905609,1,['install'],['installed']
Deployability,"Yes. The forums have been down since Thursday of last week. @lothian is working on getting it restored, but that involves a rather time-consuming backup and an operating system update. In the meantime, ask questions as issues (as you just did) or [on Slack](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2868#issuecomment-1411024740:177,update,update,177,https://psicode.org,https://github.com/psi4/psi4/issues/2868#issuecomment-1411024740,1,['update'],['update']
Deployability,You can `PYTHONPATH=./stage/${TRAVIS_BUILD_DIR}/Install/lib python python-fcidump` if you want to keep hammering at it. But fine by me if you want to pull the psiapi. Thanks for adding the tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-356134730:48,Install,Install,48,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-356134730,1,['Install'],['Install']
Deployability,"You can fix the `MKL FATAL ERROR` by `LD_PRELOAD=/path/to/libmkl_rt.so psi4`. Yes, #563 or a near relative will fix that properly w/o the preload. When you run the `bin/psi4` ""executable"", it hunts down its `lib/psi4/__init__.py` to load psi4 as a python module. I wouldn't have expected it to be confused by a symlink, but I suppose it's possible. I'll have to try it out. Glad the python detection seems to be working consistently now. Your CMake logs look good (the unnerving ""detached HEAD"" is just because we pin to tags or commits for dependencies). The odd python3.4 detection in the pybind11 CMake config is to be expected, since none of the environment was passed over to pybind11 because it doesn't matter at that stage. On the now-healed compilation, I was just warned today (@bennybp) that CMake _does_ search your install (not stage, install) dir for dependencies, so perhaps your hunch was right.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273738266:827,install,install,827,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273738266,2,['install'],['install']
Deployability,"You can update the operating system, though :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792#issuecomment-580240271:8,update,update,8,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-580240271,1,['update'],['update']
Deployability,"You could call it a soft release thats still not quite official. The code base has been tagged 1.0 and frozen; however, the accompanying distribution networks (binaries and conda channels) have not quite caught up. The release notes are among the very last things on the check list. Cheers,; Daniel Smith. > On Jul 14, 2016, at 3:47 PM, Michael Banck notifications@github.com wrote:; > ; > By the way, and I realize that this is quickly getting off-topic, but I am baffled that the 1.0 release wasn't tweeted from @psi_code...; > ; > I'm following the commit feed, but there was no obvious ""release 1.0"" or ""bump version to 1.1devel"" commits, so I totally missed it until now.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/issues/367#issuecomment-232787398, or mute the thread https://github.com/notifications/unsubscribe/ABsBcehgmOltfNKwWYvW1L8pGmD3ttWGks5qVqBIgaJpZM4INszQ.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367#issuecomment-232790462:25,release,release,25,https://psicode.org,https://github.com/psi4/psi4/issues/367#issuecomment-232790462,4,['release'],['release']
Deployability,"You have to do some substitution yourself based on your install locations. ""<conda-env-prefix-with-psi4>"" is ""/home/emkal/psi4conda/"" and ""same"" is ""/home/emkal/psi4conda/lib/python3.10/site-packages/"". The former is what would be done in bash _outside_ jupyter, and the latter is the equiv in python (inside jupyter).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195361850:56,install,install,56,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195361850,1,['install'],['install']
Deployability,"You're going to need to constrain psi4 to get meaningful dep resolution info. something like `psi4=1.4a2.dev1058 -c psi4/label/dev` right now. From the above, you're pulling an ancient version of psi4, pre v1.2, from before conda upgraded its compilers late 2017, hence the `gcc-5-mp`, which was a local (psi4) copy of a c++11 capable gcc so that psi4 could build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024#issuecomment-718079355:230,upgrade,upgraded,230,https://psicode.org,https://github.com/psi4/psi4/issues/2024#issuecomment-718079355,1,['upgrade'],['upgraded']
Deployability,"You're right, the handling of simint vec type is unsophisticated. The mention of `SIMINT_VECTOR` in psi4's cmake is as indication that if you set the var for psi4, then it'll be passed on to the simint build, should simint be built from source. In that way, something like the below should do what you want. (The second is a standard CMake variable that means don't-look-for-prebuilt.). ```; -D SIMINT_VECTOR=avx; -D CMAKE_DISABLE_FIND_PACKAGE_simint=ON; ```. simint itself doesn't offer any handles for choosing an installation of a particular vectorization, nor does it provide any is-this-installation-compatible-with-given-vec handles. also, it's hard to know what the user wants: on an AVX computer (cmake can't quickly say that a computer is AVX, btw), a user getting a sse simint might be quite content b/c it'll run or discontent b/c it's unoptimized. Between the uncertainty and lack of tools, I went with the dumb handling you observed. For background, the conda package is sse so that it runs everywhere. And the cmake vector variable default is AVX since that's a likely minimum, and a wrong choice produces only local trouble. I can see that the top-level CMakeList.txt text needs to be clearer so the vector status isn't surprising. But I'm not sure if more logic is worth it. What do you think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887:516,install,installation,516,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1068437887,2,['install'],"['installation', 'installation-compatible-with-given-vec']"
Deployability,"You're right, the inconsistency could be fixed the other way around by ""fixing"" the Z values instead. Though even if a new `molecular_weight` fn were implemented in `molecule` that lets me circumvent the mass issue when necessary, the problem is that there may be places other than `optrot.cc` that are returning incorrect masses without even knowing it. I suppose these codes could be tracked down and updated with some hunting. I'd be more than happy to make a PR and add such a function, and keep my eyes out for codes calculating molecular weight. However, I'm still not sure I understand the utility of retaining masses for ghosted atoms. With some testing, it looks like real -> ghost -> real is still possible using `extract_subsets` even if I set the mass of ghost atoms to zero. I tested this just by editing `Molecule::mass` in the way described above. What doesn't seem to be possible, on the other hand, is ghost -> real (where the atoms are read in originally as ghosts `Gh(C)`), but that doesn't seem to work right now anyway (not really sure why that is, may look into this if I have time). I'm very unfamiliar with how masses and fragment identities are passed around. Is there a case in which having the ghost masses zero would keep you from making a properly-massed all-real-atoms copy of that molecule? That would definitely preclude any option of setting them zero permanently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-362954523:403,update,updated,403,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-362954523,1,['update'],['updated']
Deployability,"Your right, this should be patched up in #918. As a note you will need to add a `set guess read` in your input file for this to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/918#issuecomment-370243678:27,patch,patched,27,https://psicode.org,https://github.com/psi4/psi4/issues/918#issuecomment-370243678,1,['patch'],['patched']
Deployability,"Your suggestion fixed the problem on my machine, @loriab. Great detective work. I just pushed the update, so we'll see if that fixes it. The non-PCM thing needs to be figured out some time, but I think it can wait until the rest of the merge issues are resolved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183827154:98,update,update,98,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183827154,1,['update'],['update']
Deployability,"You’re def in the newly created env? . Away from computer but do “conda list”. Then try “conda install <pkg> -c psi4/label/dev -c psi4” for every pkg that is psi4 channel in origin. That is, things like libxc, chemps2 etc. also make sure you have defaults numpy to provide mkl (which is what your error is about). . Sent from my iPhone. > On Mar 3, 2018, at 11:34 AM, timn2008 <notifications@github.com> wrote:; > ; > well, I've done; > conda update psi4 -c psi4/label/dev; > which got; > gau2grid: 0.1-0 psi4/label/dev; > psi4: 1.1+add49b9-py36_0 psi4 --> 1.2a1.dev781+837e345-py36_0 psi4/label/dev; > psi4-lt-mp: 1.1-py36_0 psi4 --> 1.2a1.dev5-py36_0 psi4/label/dev; > But now psi4 doesn't work from my Anaconda Python3:; > Traceback (most recent call last):; > File ""/opt/anaconda3/lib/python3.6/site-packages/psi4/init.py"", line 54, in ; > from . import core; > ImportError: /opt/anaconda3/lib/python3.6/site-packages/psi4/core.so: undefined symbol: __svml_sin4; > ; > During handling of the above exception, another exception occurred:; > ; > Traceback (most recent call last):; > File ""cc4.py"", line 1, in ; > import psi4; > File ""/opt/anaconda3/lib/python3.6/site-packages/psi4/init.py"", line 59, in ; > raise ImportError(""{0}"".format(err)); > ImportError: /opt/anaconda3/lib/python3.6/site-packages/psi4/core.so: undefined symbol: __svml_sin4; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/927#issuecomment-370161881:95,install,install,95,https://psicode.org,https://github.com/psi4/psi4/issues/927#issuecomment-370161881,2,"['install', 'update']","['install', 'update']"
Deployability,"[Easybuild](https://hpcugent.github.io/easybuild/) is not an alternative to CMake or autoconf. The idea is to have an easy way to make reproducible builds and modules. Everything in the stack should also be optimally build, meaning utilizing the hardware to its full extend (for example, if AVX2 or infiniband is available, we will use it). Easybuild will take care of all dependencies. It will avoid using the OS installed (old) versions of software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after building a compiler (GCC/intel/...) from scratch. We also patch out any problem. Psi4 for example hard codes it's build path for the generation of new plugins. This is not desirable on a HPC system. Some software is also not adjusted to be build by anything other than GCC. We make it work with intel too. Some software doesn't even have a real build system other than a list of makefiles that usually don't work out of the box. We fix that so the build is reproducible. . It's primarily meant for HPC sites. If somebody adds support for a piece of software, other people can reuse it with one command. I use it to build Psi4 in production. If you're developing, Easybuild is useful for building all up to date versions of dependencies. On our systems, if I run: module load PSI, I get a psi4 (a git version from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for example GCC-5.1, it takes one command. Adding a GCC subproject to Psi sounds like a bad idea. Building GCC is not a trivial task.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105224328:414,install,installed,414,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105224328,2,"['install', 'patch']","['installed', 'patch']"
Deployability,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz'], 'dashlevel': 'd3bj', 'dashparams': {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}, 'dashparams_citation': False, ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:14061,update,updates,14061,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['update'],['updates']
Deployability,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz', '-grad'], 'dashlevel': 'd2', 'dashparams': {'alpha6': 20.0, 's6': 1.05, 'sr6': 1.1}, 'dashparams_citation': '', ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; --------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:5226,update,updates,5226,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['update'],['updates']
Deployability,"_, here's my proposal for how to make the code more readable.; > ; > First and foremost, we abandon the Ochsenfeld pseudo-algorithm (Figure 1) as the definitive way to organize the code. We'll refer to it as appropriate, but it will not always be appropriate.; > ; > The code is now divided into the following => level chunks:; > ; > => Prep Auxiliary Quantities <=; > ; > * Zeroing, Sizing, Atom Blocking all go here; > ; > => Prep Atom Pairs <=; > ; > * In my ideal world, you'd compute this at the same time as the bra-bra shell pairs below, but getting that to work would require that atom_pairs be an ordered_set. There's not much gain for it.; > ; > => Prep Bra-Bra Shell Pairs <=; > ; > * What is currently, ""Store shell pairs that are significant by Schwarz estimate""; > ; > => Prep Bra-Ket Shell Pairs <=; > ; > * This is ""Pre-ordering and Pre-selection to find significant elements in Puv"" and includes both shell ceiling computation and computing the kets.; > ; > => Integral Formation Loop <=; > ; > * Note that this is the one section that doesn't start with ""Prep"". That's a clue that everything previous to this was for the integral formation loop. The next code chunks down are: build intermediate buffers, form the minilists, compute to K buffers, write to K (stripe out), and then finalize. Refer to the Ochsenfeld algorithm for the minilist part, but I think that's the only part where Ochsenfeld is worth mentioning.; > ; > How does that all sound to you? I know this is asking you to undo a lot of the changes I requested earlier, but I think this will make the code much easier to read for those who haven't been poring over the Ochsenfeld paper. If it sounds good, then please update the comments accordingly (I don't think we'll actually need code changes for this), and let me know when it's ready for another look.; > ; > And of course, if you don't like the idea, we can talk this out. As we've seen already, I can make mistakes. Made the changes. Please take another look.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1046162248:2098,update,update,2098,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1046162248,1,['update'],['update']
Deployability,"_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2252,install,installable,2252,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installable']
Deployability,"_interface\gdma_interface.lib src\psi4\mcscf\mcscf.lib src\psi4\mrcc\mrcc.lib src\psi4\occ\occ.lib src\psi4\optking\optking.lib src\psi4\psimrcc\psimrcc.lib src\psi4\sapt\sapt.lib src\psi4\scfgrad\scfgrad.lib src\psi4\lib3index\3index.lib src\psi4\libciomr\ciomr.lib src\psi4\libcubeprop\cubeprop.lib src\psi4\libdiis\diis.lib src\psi4\libdisp\disp.lib src\psi4\libdpd\dpd.lib src\psi4\libfilesystem\filesystem.lib src\psi4\libfock\fock.lib src\psi4\libfunctional\functional.lib src\psi4\libiwl\iwl.lib src\psi4\libmints\mints.lib src\psi4\libmoinfo\moinfo.lib src\psi4\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Extensions\Microsoft\Python\Miniconda\Miniconda3-x64\libs\Python37.lib"" F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\gg.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\xc.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\deriv.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\int.lib D:\OpenBLAS\lib\openblas.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib && cd .""; LINK Pass 1: command ""C:\PROGRA~2\MICROS~3\2019\COMMUN~1\VC\Tools\MSVC\1421~1.277\bin\Hostx64\x64\link.exe /nologo src\CMakeFiles\core.dir\export_benchmarks.cc.obj src\CMakeFiles\core.dir\export_blas_lapack.cc.obj src\CMakeFiles\core.dir\export_cubeprop.cc.obj src\CMakeFiles\core.dir\export_diis.cc.obj src\CMakeFiles\core.dir\export_fock.cc.obj src\CMakeFiles\core.dir\export_functional.cc.obj src\CMakeFiles\core.dir\export_mints.cc.obj src\CMakeFiles\core.dir\export_misc.cc.obj src\CMakeFiles\core.dir\export_oeprop.cc.obj src\CMakeFiles\core.dir\export_pcm.cc.obj src\CMakeFiles\core.dir\export_plugins.cc.obj src\CMakeFiles\core.dir\export_psio.cc.o",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:3491,Release,Release,3491,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['Release'],['Release']
Deployability,_license_ headers are what still need patching up.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/405#issuecomment-225907973:38,patch,patching,38,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225907973,1,['patch'],['patching']
Deployability,"`DESTDIR` hasn't been part of Psi4 cmake for a few years since it was updated for Windows compatibility. Looking through some docs, I see it can have influence if set as an environment variable. That (and basically any envvar) is untested; in my opinion, CMake has too many input routes already :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325646186:70,update,updated,70,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325646186,1,['update'],['updated']
Deployability,"`Lib/site-packages/psi4/core.cp38-win_amd64.pyd` is indeed the name for the fat compiled file. The `site-packages\psi4\__init__.py` has the `from . import core`. The dot is ""here"", so it's seeking the `site-packages\psi4\core.*pyd` file, so all's well there, I think. For adding to PATH, I think it'd be `psi4conda\Scripts` to add, not the parent directory. But I wonder if you could be using the ordinary Windows prompt instead of the Anaconda command prompt. Worth trying the left-side ""Recommended Approach"" in step 6 of https://www.datacamp.com/community/tutorials/installing-anaconda-windows rather than the right-side setup, if you aren't already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875197239:569,install,installing-anaconda-windows,569,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875197239,1,['install'],['installing-anaconda-windows']
Deployability,`MEM_JK` and `DISK_JK` need docs. Mentioned [here](http://forum.psicode.org/t/manual-update-dfocc-requires-scf-type-disk-df/904/2).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/960#issuecomment-387813447:85,update,update-dfocc-requires-scf-type-disk-df,85,https://psicode.org,https://github.com/psi4/psi4/issues/960#issuecomment-387813447,1,['update'],['update-dfocc-requires-scf-type-disk-df']
Deployability,"```; ## User-Facing Notes; <!-- A bullet-point format description of how this PR affects the user. This will be copy-pasted into the release notes. May be empty. -->; - [ ] Note 1; - [ ] Note 2. ## Dev-Facing Notes; <!-- A bullet-point format description of what this PR does ""at a glance."" Target audience is code reviewers and other devs skimming PRs. Should be more technical than user notes. Should never be empty. -->; - [ ] Note 1; - [ ] Note 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2718#issuecomment-1244232466:133,release,release,133,https://psicode.org,https://github.com/psi4/psi4/pull/2718#issuecomment-1244232466,1,['release'],['release']
Deployability,"```; $ ctest -R cubeprop-esp -V; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Test project /home/raimis/psi4.git/linux_build; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 360; Start 360: cubeprop-esp. 360: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/cubeprop-esp/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/cubeprop-esp/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 360: Test timeout computed to be: 1500; 360: 	Comparing Dt......................................................PASSED; 360: Traceback (most recent call last):; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"", line 264, in <module>; 360: exec(content); 360: File ""<string>"", line 37, in <module>; 360: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/psi4/driver/p4util/util.py"", line 387, in compare_cubes; 360: raise TestComparisonError(message); 360: ; 360: TestComparisonError: 	Comparing ESP: computed cube file does not match expected cube file.; 360: Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); 1/1 Test #360: cubeprop-esp ...................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937:33,Update,UpdateCTestConfiguration,33,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403465937,2,['Update'],['UpdateCTestConfiguration']
Deployability,"```; $ ctest -R json-schema_0_properties -V; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; UpdateCTestConfiguration from :/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Parse Config file:/home/raimis/psi4.git/linux_build/DartConfiguration.tcl; Test project /home/raimis/psi4.git/linux_build; Constructing a list of tests; Done constructing a list of tests; Updating test list for fixtures; Added 0 tests to meet fixture requirements; Checking test dependency graph...; Checking test dependency graph end; test 401; Start 401: json-schema_0_properties. 401: Test command: /shared/raimis/opt/miniconda/envs/psi4/bin/python ""/home/raimis/psi4.git/tests/runtest.py"" ""/home/raimis/psi4.git/tests/json/schema_0_properties/input.dat"" ""/home/raimis/psi4.git/linux_build/testresults.log"" ""false"" ""/home/raimis/psi4.git"" ""false"" ""/home/raimis/psi4.git/linux_build/tests/json/json-schema_0_properties/output.dat"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/bin/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4"" ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/""; 401: Test timeout computed to be: 1500; 401: ; 401: *** tstart() called on computer06; 401: *** at Mon Jul 9 14:44:29 2018; 401: ; 401: => Loading Basis Set <=; 401: ; 401: Name: 6-31G; 401: Role: ORBITAL; 401: Keyword: BASIS; 401: atoms 1 entry O line 117 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: atoms 2-3 entry H line 26 file /home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/share/psi4/basis/6-31g.gbs ; 401: ; 401: ; 401: ---------------------------------------------------------; 401: SCF; 401: by Justin Turney, Rob Parrish, Andy Simmonett; 401: and Daniel Smith; 401: RHF Reference; 401: 1 Threads, 500 MiB Co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:45,Update,UpdateCTestConfiguration,45,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,2,['Update'],['UpdateCTestConfiguration']
Deployability,"```; - Both `disk_DF` and `mem_DF` gradients yield above segfault, no message in outfile or message printed to stdout; - PBE/cc-pVDZ: Passed; - wPBE/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:5104,install,install,5104,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,"```; 100% tests passed, 0 tests failed out of 520; ```. > The original coder probably added it _anticipating_ it would be useful, but it seems to have never been used. I'm happy to see unused code burn. Burn, baby, burn. Patch incoming...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268675957:221,Patch,Patch,221,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268675957,1,['Patch'],['Patch']
Deployability,"```; >>> grep -ir simint_VECTOR .; ./CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/CMakeFiles/simint_external.dir/build.make:	cd /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build && /Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DSIMINT_STANDALONE=OFF -DENABLE_TESTS=OFF -DSIMINT_VECTOR=sse -DSIMINT_MAXAM=6 -C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-Release.cmake ""-GUnix Makefiles"" /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/simintConfig.cmake:set(simint_VECTOR sse); ./external/upstream/simint/simint_external-prefix/tmp/simint_external-cfgcmd.txt:cmd='/Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake;-DCMAKE_INSTALL_PREFIX=/usr/local/psi4;-DCMAKE_BUILD_TYPE=Release;-DCMAKE_C_COMPILER=/usr/bin/clang;-DCMAKE_CXX_COMPILER=/usr/bin/clang++;-DCMAKE_INSTALL_LIBDIR=lib;-DCMAKE_INSTALL_INCLUDEDIR=include;-DBUILD_SHARED_LIBS=OFF;-DCMAKE_POSITION_INDEPENDENT_CODE=ON;-DSIMINT_STANDALONE=OFF;-DENABLE_TESTS=OFF;-DSIMINT_VECTOR=sse;-DSIMINT_MAXAM=6;-C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-$<CONFIG>.cmake;-GUnix Makefiles;/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external'; ./stage/usr/local/psi4/share/cmake/simint/simintConfig.cmake:set(simint_VECTOR sse); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356840364:2238,Release,Release,2238,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356840364,1,['Release'],['Release']
Deployability,"```; The following tests FAILED:; 	132 - dfmp2-ecp (Failed); 	368 - dft-bench-interaction (Timeout); 	370 - pywrap-align (Failed); 	371 - pywrap-align-chiral (Failed); ```; The 132 is not surprising, as with this patch up to `[Kr]` is frozen for Xe, without it only up to `[Ar] + 3d` from the ECP. I guess this is a question of what we want as default behaviour for `freeze_core` - always freeze up to the previous Rg (as done here and in other codes), or ignore further freezing for ECP's (as is done in `master`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/978#issuecomment-383831824:213,patch,patch,213,https://psicode.org,https://github.com/psi4/psi4/pull/978#issuecomment-383831824,1,['patch'],['patch']
Deployability,```; pip install yapf; yapf -i script.py; ```. Done! Best way to do this is use some sort of editor like Sublime and grab PyYapf so it will only format your selection.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/753#issuecomment-312351821:9,install,install,9,https://psicode.org,https://github.com/psi4/psi4/pull/753#issuecomment-312351821,1,['install'],['install']
Deployability,"```DESTDIR``` is **always** set during build and install. It contains the real stage directory path that cmake uses to determine where files are installed. psi4 build adds ```DESTDIR``` to its inner stage directory which causes this problem. > That (and basically any envvar) is untested; in my opinion, CMake has too many input routes already :-). What does this mean?; Every port uses DESTDIR to supply stage directory. It is super well tested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325649105:49,install,install,49,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325649105,2,['install'],"['install', 'installed']"
Deployability,"`dfocc` was better off. `dfocc` doesn't have problems 1, 2, or 4. Not sure about 5 because I'm rusty on converting DF integrals to conventional, but if it did have that problem, it would show up in the gradients. 3 is a problem in `dfocc`. I can deal with it if you'd like, but I assumed nobody would use that algorithm for orbital optimization, and it wasn't worth adding to the #1390 nightmare. Good catch on the comment. I'll update that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1829#issuecomment-594647283:429,update,update,429,https://psicode.org,https://github.com/psi4/psi4/pull/1829#issuecomment-594647283,1,['update'],['update']
Deployability,"`libdiis` needs more changes to get it talking with [A/E]DIIS, so it'll be a while before further updates.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2320#issuecomment-943364464:98,update,updates,98,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-943364464,1,['update'],['updates']
Deployability,"`samples/SUMMARY` which was the major offender was removed some time ago. If someone's added a test to `tests`, the attendant `samples` file doesn't get updated automatically. Perhaps a post-commit hook is in order to make that happen. Basically, we want samples to never be out of date so that a make, make docs doesn't add anything outside the objdir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14#issuecomment-121321984:153,update,updated,153,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-121321984,1,['update'],['updated']
Deployability,"`src` is pretty common in a source tree, but I don't think I've ever seen it in an installed `include` tree. I could live with separate `lib` and `bin` underneath `include` if that's the consensus instead of adding `includes/bin` to the includes path.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/376#issuecomment-218530852:83,install,installed,83,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218530852,1,['install'],['installed']
Deployability,`v1.3.2` is available for Windows via `conda install psi4 -c raimis`. Please report back if you give it a try. We'll copy it to `-c psi4` (I think) after a few positive reports from the wild.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-494087443:45,install,install,45,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-494087443,1,['install'],['install']
Deployability,"a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.9']. pkgs/r/linux-64 No change; pkgs/main/linux-64 No change; pkgs/main/noarch No change; psi4/noarch No change; pkgs/r/noarch No change; psi4/linux-64 No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:4206,install,installable,4206,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installable']
Deployability,"a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix that ;)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:1088,install,install,1088,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160,2,['install'],['install']
Deployability,"a3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD22771B: __kmp_launch_thread (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD26630A: _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_launch_worker(void*) (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0x4E3EEA4: start_thread (in /usr/lib64/libpthread-2.17.so); ==2802== by 0x51519FC: clone (in /usr/lib64/libc-2.17.so); ==2802== Address 0x2866b120 is 0 bytes after a block of size 73,440 alloc'd; ==2802== at 0x4C2A593: operator new(unsigned long) (vg_replace_malloc.c:344); ==2802== by 0x1CA85F62: allocate (new_allocator.h:104); ==2802== by 0x1CA85F62: allocate (alloc_traits.h:491); ==2802== by 0x1CA85F62: _M_allocate (stl_vector.h:170); ==2802== by 0x1CA85F62: _M_fill_insert (vector.tcc:491); ==2802== by 0x1CA85F62: std::vector<long, std::allocator<long> >::insert(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, unsigned long, long const&) (stl_vector.h:1054); ==2802== by 0x1CA7E37F: resize (stl_vector.h:696); ==2802== by 0x1CA7E37F: psi::TwoBodyAOInt::create_sieve_pair_info(std::shared_ptr<psi::BasisSet>, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >&, bool) (twobody.cc:244); ```; This is a harmless copy construction of a vector that is well defined. I tried to remove the AVX2 code path using the [MKL options](https://software.intel.com/content/www/us/en/develop/documentation/onemkl-developer-reference-c/top/support-functions/miscellaneous/mkl-enable-instructions.html) but the problem persisted. Finding an old pre-AVX box and running on there did the trick, and Valgrind came back clean. It was clean for the GCC build also. Therefore it appears that there is a memory problem, but it's likely either an Intel compiler bug (I think OneAPI is still in beta technically) or a problem with me mixing `libiomp5` from Conda with the native OneAPI installed compiler suite. I'll try the commercial Intel compilers next...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-904787207:4074,install,installed,4074,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904787207,1,['install'],['installed']
Deployability,able tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16314,Install,Install,16314,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,acke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2785,Patch,Patching,2785,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Patch'],['Patching']
Deployability,additional reminders:. - `dict_xc_funcs.py` is the place to add functional name aliases. Does not seem update to libxc4.0.1 yet.; - BHHLYP == BHLYP ?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/996#issuecomment-385868187:103,update,update,103,https://psicode.org,https://github.com/psi4/psi4/issues/996#issuecomment-385868187,1,['update'],['update']
Deployability,ags; flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm ida arat epb xsaveopt pln pts dts tpr_shadow vnmi flexpriority ept vpid fsgsbase smep erms.......; ```; ```; >>> cat /proc/version ; Linux version 2.6.32-431.el6.x86_64 (mockbuild@x86-023.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Nov 10 22:19:54 EST 2013; ```; ```; >>> lsb_release -a; LSB Version:	:base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:graphics-4.0-amd64:graphics-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch; Distributor ID:	RedHatEnterpriseServer; Description:	Red Hat Enterprise Linux Server release 6.5 (Santiago); Release:	6.5; Codename:	Santiago; ```; ```; >>> ldd -v lib/python3.6/site-packages/psi4/core.so ; 	linux-vdso.so.1 => (0x00007fffe3ffd000); 	libambit.so => /home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libambit.so (0x00002b78f3dff000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00002b78f4118000); 	libm.so.6 => /lib64/libm.so.6 (0x00002b78f4335000); 	libdl.so.2 => /lib64/libdl.so.2 (0x00002b78f45b9000); 	libpcm.so.1 => /home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00002b78f47be000); 	libxc.so.5 => /home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libxc.so.5 (0x00002b78fb817000); 	libgg.so => /home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libgg.so (0x00002b78fc8e1000); 	libgdma.so => /home/usrname/.local/opt/PSI4/v1.2/lib/python3.6/site-packages/psi4/../../../libgdma.so (0x00002b78fcf28000); 	libderiv.so => /home/usrname/.local/opt/PSI4/v1.2/lib/python,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-405831690:3348,Release,Release,3348,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-405831690,1,['Release'],['Release']
Deployability,"ah ok, I remember that cfour needs an environmental variable to figure out the number of mpi threads. At the configure step of the source code one sets something like:; `configure [...] --with-mpirun=mpirun -np ${CFOUR_NUM_CORES}`. Not sure if this is just our configuration or if `CFOUR_NUM_CORES` is the default name described in some installation documentation. I see that `OMP_NUM_THREADS` is handled correctly with `env=lenv`, though I don't see it is being added to `lenv`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/661#issuecomment-288652354:261,configurat,configuration,261,https://psicode.org,https://github.com/psi4/psi4/issues/661#issuecomment-288652354,2,"['configurat', 'install']","['configuration', 'installation']"
Deployability,"ah, you can fix Linux CI by adding `=4` to https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L85 . I forgot that regular `conda install psi4` has constrained libxc, but CI doesn't. Is that what you meant by ""bash test""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2085#issuecomment-763212959:91,pipeline,pipelines,91,https://psicode.org,https://github.com/psi4/psi4/pull/2085#issuecomment-763212959,3,"['install', 'pipeline']","['install', 'pipelines', 'pipelines-linux']"
Deployability,"aha, I hit this, too! You need a current master psi4 (the patch to let v2rdm build was merged this week), and you need to build off this v2rdm branch https://github.com/edeprince3/v2rdm_casscf/pull/33 . That will get you a v2rdm and psi that build, work together, and pass v2rdm tests 1–4. still working on the rest. This is what happens when I let nightly builds stumble. Problems pile up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426#issuecomment-451598912:58,patch,patch,58,https://psicode.org,https://github.com/psi4/psi4/issues/1426#issuecomment-451598912,1,['patch'],['patch']
Deployability,"ails and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:698: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:699: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 1414 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 954 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 48 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 1302 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 1266 warnings; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:702: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 707 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 477 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 24 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 651 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 633 warnings; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:10669,release,release,10669,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['release'],['release']
Deployability,ake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/st,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3590,Install,Installing,3590,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Install'],['Installing']
Deployability,"all are with mkl 11.3 update 2; all tests run in serial; all with gcc (GCC) 4.8.5 20150623; - i7-3930K, Sandy Bridge-E; - xhost on (default), release: **Good**; - i7-4790K, Haswell-DT; - xhost on (default), release: **Bad**; - xhost off, release: **Bad**; - xhost on (default), debug: **Bad**",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198621819:22,update,update,22,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198621819,4,"['release', 'update']","['release', 'update']"
Deployability,"alled;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /███████████████████",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:5532,install,installed,5532,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"also, `conda install yapf -c conda-forge`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/753#issuecomment-312352303:13,install,install,13,https://psicode.org,https://github.com/psi4/psi4/pull/753#issuecomment-312352303,1,['install'],['install']
Deployability,"anch and API updates (see #2442), the specific requirements of psi (see https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L26), and the quirk that I can't yet myself get past a symbol limit with larger AM and the Intel linker to build a big-AM L2 conda package, building bigger Libint2's hasn't been something we recommend casually. As far as I know, it can be done with gcc, though. Any generation or build step will take hours in parallel. I don't suggest you do this, esp. if you're most accustomed to single-line builds. Nevertheless, a strategy is:; * clone and switch branches to https://github.com/loriab/libint/tree/new-cmake-harness-lab-rb1; * collect deps as described https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md . You'll need C++ compiler, CMake, Ninja, Boost headers, GMPXX, and Eigen3; * configure something like Exhibit A below. `CMAKE_PREFIX_PATH` is where you hint your boost, gmp, eigen, etc. install locations. You might have to comment out traps in int_am.cmake that stop you setting the AM too high.; * I suggest only doing the generation step by building as `cmake --build <build_dir> --target export`. when this finishes (several hours, so you might want to test run with lower AM), there'll be a `libint-*.tgz` file produced.; * Now back at your psi4 clone, edit this line https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 to the location of that tarball (according to cmake manual a filepath is ok -- needn't be URL).; * Configure Psi4. The buildsys can build from source most QC dependencies, but you'll need the basics of Python, NumPy, etc. as described https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L36-L50 . I'd definitely suggest passing in `-D BUILD_SHARED_LIBS=ON`, too. Note L2 has its dependency needs, too: https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L86-L87; * If that configures, let it build `cmak",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906:1153,install,install,1153,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906,1,['install'],['install']
Deployability,"and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have some small changes you want to make in the near future [fork my fork](https://github.com/ryanmrichard/psi4), add your changes, submit a PR to me; 2. Wait until after my PR is merged into Psi4's maste",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236723542:1183,Install,Installing,1183,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542,1,['Install'],['Installing']
Deployability,"ant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; verbose = 1. def dftd3_driver(jobrec, verbose=1):; """"""Drive the jobrec@i (input) -> dftd3rec@i -> dftd3rec@io -> jobrec@io (returned) process. Input Fields; ------------. Optional Input Fields; ---------------------. Output Fields; -------------. Optional Output Fields; ----------------------. """"""; if verbose > 2:; print('[1] {} JOBREC PRE-PLANT (j@i) <<<'.format('DFTD3')); pp.pprint(jobrec); print('>>>'). dftd3rec = dftd3_plant(jobrec). # test json roundtrip; jdftd3rec = json.dumps(dftd3rec); dftd3rec = json.loads(jdftd3rec). if verbose > 3:; print('[2] {}REC PRE-SUBPROCESS (m@i) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). dftd3_subprocess(dftd3rec) # updates dftd3rec. if verbose > 3:; print('[3] {}REC POST-SUBPROCESS (m@io) <<<'.format('DFTD3')); pp.pprint(dftd3rec); print('>>>\n'). > dftd3_harvest(jobrec, dftd3rec) # updates jobrec. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:183:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}, ...}; dftd3rec = {'command': ['dftd3', 'dftd3_geometry.xyz', '-grad'], 'dashlevel': 'd2', 'dashparams': {'alpha6': 20.0, 's6': 1.05, 'sr6': 1.1}, 'dashparams_citation': '', ...}. def dftd3_harvest(jobrec, dftd3rec):; """"""Process raw results from read-only `dftd3rec` into QCAspect; fields in returned `jobrec`: jobrec@i, dftd3rec@io -> jobrec@io. Parameters; ----------; jobrec : dict; Nested dictionary with input specifications for DFTD3 in generic; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:5397,update,updates,5397,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['update'],['updates']
Deployability,"any non-VV10 DFT functional currently (release v1.2.1) crashes already if one sets `DFT_VV10_POSTSCF true`, simply because VV10 is turned on without any checks. . And while writing about the problem with the modified libxc functionals, I figured i need to switch two lines of code!; What got me stuck, was that using `set_vv10_b` in `dict_builder.py` re-activated VV10, and I need to use it before turning off VV10. Now waiting on the reference outputs from Lars to make a test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1320#issuecomment-439212034:39,release,release,39,https://psicode.org,https://github.com/psi4/psi4/pull/1320#issuecomment-439212034,1,['release'],['release']
Deployability,are all the test plugins building ok upon first compilation? What does your (staged or installed) [plugin cache](https://github.com/psi4/psi4/blob/master/psi4/psi4PluginCache.cmake.in) look like?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271921477:87,install,installed,87,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271921477,1,['install'],['installed']
Deployability,"as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.9']. pkgs/r/linux-64 No change; pkgs/main/linux-64 No change; pkgs/main/noarch No change; psi4/noarch No change; pkgs/r/noarch No change; psi4/linux-64 No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:3210,install,installed,3210,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"as written assuming that one wants to find a; wavefunction of a definite irreducible representation. So, within D2H, or; C2H, your 3 determinants have different symmetries. I think the only; subgroup in which they will have the same irrep is if it is run in C1. So, I tried setting it up in C1. It runs, but it just gives the HF energy; back. Why? Well, even if we tell the program ""C1"", the system still has; the underlying atomic symmetry (D2H being the highest Abelian subgroup).; Under D2H symmetry, those 3 determinants won't mix, and they don't. Of course, the *true* symmetry of the molecule is atomic symmetry, higher; than D2H. But unfortunately we only have Abelian subgroups in Psi. I am not sure offhand if one could force a mixing by deliberately breaking; the symmetry of the orbitals, or by using a different guess CI vector. I'd; have to think about that a little more. It might be that to do what you; are trying to do and get a fully-spin-adapted multi-configurational; wavefunction, one would need to use actual spherical harmonic atomic; orbitals, not the Cartesian representations p_x, p_y, p_z. On Wed, Jan 8, 2020 at 1:52 PM David Sherrill <prof.david.sherrill@gmail.com>; wrote:. > Hm, nope, that doesn't get around the problem. I'll see if I can take a; > look if I get a minute free later.; >; > On Wed, Jan 8, 2020 at 1:46 PM David Sherrill <; > prof.david.sherrill@gmail.com> wrote:; >; >> This is one of those rare cases where the HF reference actually has some; >> influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; >> computation). The issue is that the code can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out; >> what you want.; >>; >> On Wed, Jan 8, 2020 at 7:10 AM S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:1031,configurat,configurational,1031,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043,1,['configurat'],['configurational']
Deployability,"assed, 0 tests failed out of 5; ```; version control files have stuff in src and built forms; ```; > cat ../psi4/metadata.py ; __version__ = '1.7'; __version_long = '1.7+6ce35a5'; __version_upcoming_annotated_v_tag = '1.8a1'. def version_formatter(dummy):; return '(inplace)'; > cat stage/lib/psi4/metadata.py ; __version__ = '1.7'; __version_branch_name = ''; __version_cmake = '1.7.0.0'; __version_is_clean = 'True'; __version_last_release = '1.7'; __version_long = '1.7+6ce35a5'; __version_prerelease = 'False'; __version_release = 'True'. def version_formatter(formatstring='{version}'):; if formatstring == 'all':; formatstring = '{version} {{{branch}}} {githash} {cmake} {clean} {release} {lastrel} <-- {versionlong}'. release = 'release' if (__version_release == 'True') else ('prerelease' if (__version_prerelease == 'True') else ''). ans = formatstring.format(version=__version__,; versionlong=__version_long,; githash=__version_long[len(__version__)+1:],; clean='' if __version_is_clean == 'True' else 'dirty',; branch=__version_branch_name,; lastrel=__version_last_release,; cmake=__version_cmake,; release=release); return ans. if __name__ == '__main__':; print(version_formatter(formatstring='all')); ```. So I think tarballs are roughly still working. But I can totally believe that either I'm working in an edge case or the two of you have found one. My closest suspects:; * perhaps you're in a repo that isn't the psi repo. I bet that'd defeat https://github.com/psi4/psi4/blob/master/psi4/versioner.py#L50 that switches the version logic from git to tarball; * that version logic is tested for release tarballs only, not tarballs of random commits; * the increasing dependency on qcengine (which arose long after the versioning system design) for finite difference and dispersion depends a lot on computing the psi4 (and other) versions. Hence the ""pull tags"" message. I can believe there's a way that communication breaks down. I'd suggest you compare commands and cat-ed files and s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:3618,release,release,3618,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,2,['release'],['release']
Deployability,"ast):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(); ; RuntimeError:; Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; The most recent 5 function calls were:; ```; 2. HF/cc-pVDZ: Passed; 3. AO DF-CASSCF/cc-pVDZ: Passed; 4. DFT Smoketests; - B2PLYP/cc-pVDZ: Passed; - CAM-B3LYP/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/inst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:1625,install,install,1625,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,"ast):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; ```; - DLDF+D09/cc-pVDZ: **GRADIENTS FAILED**; ```; Segmentation fault: 11; ```; - Both `disk_DF` and `mem_DF` gradients yield above segfault, no message in outfile or mess",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:3188,install,install,3188,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,"ast):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; ```; 5. SAPT0/cc-pVDZ (energies only; water dimer): Passed!; 6. FNOCC; - QCISD(T)/cc-pVDZ: **ENERGY FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:5296,install,install,5296,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,"at 6:14 PM, Lori A. Burns <notifications@github.com>; wrote:. > Posting Dom's very nice summary for easier perusal and searchability.; > Effective scf_type df Testing: mem_df & disk_df; >; > All tests listed below examine calls to both energy() and gradient() when; > employing the scf_type mem_df and scf_type disk_df settings. Each test; > employs a different model chemistry (indicated in the test description); > and the; > Physicists' water molecule, unless otherwise indicated.; >; > 1. Physicists' water, HF/6-31G; > - *TEST FAILED*; > - Error message:; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; > e_scf = scf_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; > The most recent 5 fun",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:1440,install,install,1440,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,"ay(_q_h1b); _q_mohijkl = numpy.asarray(_q_mints.mo_eri(_q_hf_wavefn.Ca(), _q_hf_wavefn.Ca(),; _q_hf_wavefn.Ca(), _q_hf_wavefn.Ca())); _q_molecule.mo_eri_ints = _q_mohijkl; _q_molecule.mo_eri_ints_bb = None; _q_molecule.mo_eri_ints_ba = None; if _has_B:; _q_mohijkl_BB = numpy.asarray(_q_mints.mo_eri(_q_hf_wavefn.Cb(), _q_hf_wavefn.Cb(),; _q_hf_wavefn.Cb(), _q_hf_wavefn.Cb())); _q_molecule.mo_eri_ints_bb = _q_mohijkl_BB; _q_mohijkl_BA = numpy.asarray(_q_mints.mo_eri(_q_hf_wavefn.Cb(), _q_hf_wavefn.Cb(),; _q_hf_wavefn.Ca(), _q_hf_wavefn.Ca())); _q_molecule.mo_eri_ints_ba = _q_mohijkl_BA; _q_dipole = _q_mints.ao_dipole(); _q_molecule.x_dip_ints = numpy.asarray(_q_dipole[0]); _q_molecule.y_dip_ints = numpy.asarray(_q_dipole[1]); _q_molecule.z_dip_ints = numpy.asarray(_q_dipole[2]); _q_dipole = _q_mints.ao_dipole(); for _n in range(len(_q_dipole)):; _q_dipole[_n].transform(_q_hf_wavefn.Ca()); _q_molecule.x_dip_mo_ints = numpy.asarray(_q_dipole[0]); _q_molecule.x_dip_mo_ints_b = None; _q_molecule.y_dip_mo_ints = numpy.asarray(_q_dipole[1]); _q_molecule.y_dip_mo_ints_b = None; _q_molecule.z_dip_mo_ints = numpy.asarray(_q_dipole[2]); _q_molecule.z_dip_mo_ints_b = None; if _has_B:; _q_dipole = _q_mints.ao_dipole(); for _n in range(len(_q_dipole)):; _q_dipole[_n].transform(_q_hf_wavefn.Cb()); _q_molecule.x_dip_mo_ints_b = numpy.asarray(_q_dipole[0]); _q_molecule.y_dip_mo_ints_b = numpy.asarray(_q_dipole[1]); _q_molecule.z_dip_mo_ints_b = numpy.asarray(_q_dipole[2]); _q_nd = _q_mol.nuclear_dipole(); _q_molecule.nuclear_dipole_moment = numpy.array([_q_nd[0], _q_nd[1], _q_nd[2]]); _q_molecule.reverse_dipole_sign = False; _q_molecule.save(). ```; Above outputs are all created with disabled workaround. Surprisingly my workaround doesn't work anymore even though I didn't (actively) update/change anything else. It seems it's not the backslash problem but might be the capital/small 'c' for the drive. But therewith I trust in your bug-fixing skills.; Thanks for looking into this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228#issuecomment-872891922:11529,update,update,11529,https://psicode.org,https://github.com/psi4/psi4/issues/2228#issuecomment-872891922,1,['update'],['update']
Deployability,"bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 1113, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 639, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2068, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 1360, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 84, in scf_compute_energy; self.initialize(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 178, in scf_initialize; self.initialize_jk(self.memory_jk_). RuntimeError:; Fatal Error: DFHelper: not enough memory for (p shell) AO blocking! required memory: 0.105622[GiB].; Error occurred in file: /home/psilocaluser/gits/hrw-release/psi4/src/psi4/lib3index/dfhelper.cc on line: 568; ```. ```; @@ -556,8 +557,11 @@ std::pair<size_t, size_t> DFHelper::pshell_blocks_for_AO_build(const size_t mem,; constraint = total;; constraint += full_3index;; constraint += (hold_met_ ? naux_ * naux_ : total);; + printf(""AAAA %4d: %10d > %d || %4d == %4d\n"", count, constraint, mem, i, pshells_-1);; if (constraint > mem || i == pshells_ - 1) {; + printf("" AAA %d || %d\n"", constraint > mem, i == pshells_ - 1);; if (count == 1 && i != pshells_ - 1) {; + printf("" AA %d && %d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862:1516,release,release,1516,https://psicode.org,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862,1,['release'],['release']
Deployability,bind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/FindPythonLibsNew.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Tools.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Targets.cmake; [ 69%] Completed 'pybind11_external'; [ 69%] Built target pybind11_external; Scanning dependencies of target psi4-core; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3934,Install,Installing,3934,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,8,['Install'],['Installing']
Deployability,"build constructors by following instructions https://github.com/psi4/psi4meta/blob/master/conda-recipes/constructor-cutter-unified/README.md. * edit tag and hash; * clear package cache; * `python run.py`; * check for noarch (BAD); * upload to vergil. generate the download site; * create new file akin to https://github.com/psi4/psicode-hugo-website/blob/master/content/installs/v13rc2.md mind the edition string `v13rc2` for this and future filenames; * copy and edit new https://github.com/psi4/psicode-hugo-website/blob/master/data/installs/v13rc2.yaml for menu and notes content; * enter `scripts/` dir and edit primarily https://github.com/psi4/psicode-hugo-website/blob/master/scripts/install-generator.py#L9 but also any other arrays or messages that should change.; * run the `install-generator.py` in place. it will dump new files into `data/installs/` _subdirs_. be sure to `git add` them.; * installer page is ready. if wanted, edit the desination of the `Download` nav button https://github.com/psi4/psicode-hugo-website/blob/master/config.toml#L35; * pays to test; * installer on Mac and Linux; * that download button and `curl` downloading register on the download counters on vergil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733:370,install,installs,370,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-464912733,7,['install'],"['install-generator', 'installer', 'installs']"
Deployability,"build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2439,Install,Installing,2439,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Install'],['Installing']
Deployability,"c++.so.6 => /cluster/apps/gcc/5.2.0/lib64/libstdc++.so.6 (0x00007f1a73366000); libm.so.6 => /lib64/libm.so.6 (0x00007f1a730e1000); libgomp.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgomp.so.1 (0x00007f1a72ec0000); libgcc_s.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgcc_s.so.1 (0x00007f1a72caa000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore when I install executable python scripts on our cluster, I usually change the shebang line to. #!/usr/bin/env python. This way, it takes the first python interpreter that is found in $PATH. This can be convenient for systems with multiple python versions. On our cluster, we use environment modules to manage different versions of the same software. If I have a python script with the generic shebang line, I can choose the Python interpreter by loading the corresponding module; ```. [sfux@euler04 ~]$ module load python/2.7.6; Autoloading openblas/0.2.13_seq; [sfux@euler04 ~]$ /usr/bin/env python -V; Python 2.7.6; [sfux@eule",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275104849:1650,install,installation,1650,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849,1,['install'],['installation']
Deployability,"c++filt __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; psi::PKJK::PKJK(std::__1::shared_ptr<psi::BasisSet>, psi::Options&). I'm not sure what this tells me. Regarding the symbol in core.so, it is there:. (11:48 ~/software/psi4/install/lib/psi4/) nm core.so | grep __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; 0000000000f0a730 t __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971#issuecomment-384339865:246,install,install,246,https://psicode.org,https://github.com/psi4/psi4/issues/971#issuecomment-384339865,1,['install'],['install']
Deployability,"c-4.9) fails when building with:; ```; [ 82%] Performing configure step for 'gpu_dfcc_external'; loading initial cache file /home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/tmp/gpu_dfcc_external-cache-Release.cmake; -- Psi4 script: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/bin/psi4; -- Psi4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure] Error 1; CMakeFiles/Makefile2:1533: recipe for target 'extern",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:1230,install,installation,1230,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,1,['install'],['installation']
Deployability,"can't run the pytest tests locally?; * `cd <objdir>`; * adjust PATH for psiapi http://psicode.org/psi4manual/master/build_planning.html#how-to-configure-paths-for-psiapi via `<objdir>/bin/psi --psiapi-path`; * get pytest via `conda install pytest` or `pip install pytest`; * `pytest ../tests/pytest -k methane-H_analytic`; the pytest tests can also be run via `psi4.test()`, `psi4 --test`, or `make pytest` but the above has more control. Yes, confirmed non-deterministic, so above was a red herring, sorry. But something has made it much less stable than before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-452372272:232,install,install,232,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-452372272,2,['install'],['install']
Deployability,"cause ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libgdma.so (found version 2.2.06); -- Found libint: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libint.so (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Found GCC 5.2.0; ```; Then you change into your objdir and pybind11 and other dependencies compile. Finally you get to:; ```; Scanning dependencies of targ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273512333:1263,configurat,configuration,1263,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333,1,['configurat'],['configuration']
Deployability,"cies that aren't quite vanilla upstream; * psi4 likes to provide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1205,patch,patch,1205,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,1,['patch'],['patch']
Deployability,ckage if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. In,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15804,Install,Install,15804,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,closed by #2273 and the release of https://github.com/psi4/psi4/releases/tag/v1.4.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-945789348:24,release,release,24,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-945789348,2,['release'],"['release', 'releases']"
Deployability,"cmake doesn't detect `mpmath` directly. But you can look in `<objdir>/CMakeCache.txt` `PYTHON_EXECUTABLE` to check if right python is found. Otherwise, psi doesn't actually need `mpmath` anymore, so #968 drops the requirement. I'd guess it'll be merged tomorrow, then you can update your source.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382188857:276,update,update,276,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382188857,1,['update'],['update']
Deployability,"com/psi4/psi4/pull/1721#issuecomment-537945417), you can build a Libint2 externally with cmake or internal to psi4. 1. Get some extra dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confid",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:1050,toggle,toggles,1050,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,1,['toggle'],['toggles']
Deployability,"cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears to be coming from using a `psi4` channel for installation. Some of my old `env.yaml` files used a `psi4` channel. The `psi4` installation from that channel appears broken. If you install from `conda-forge` it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:2326,install,installation,2326,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,3,['install'],"['install', 'installation']"
Deployability,cting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1],MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13373,Install,Install,13373,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"d.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:1539,install,install,1539,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,2,"['Install', 'install']","['Install', 'install']"
Deployability,"da\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) ==========================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16824,Install,Install,16824,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,5,['Install'],['Install']
Deployability,"dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; > e_scf = scf_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; > The most recent 5 function calls were:; >; > 2. HF/cc-pVDZ: Passed; > 3. AO DF-CASSCF/cc-pVDZ: Passed; > 4. DFT Smoketests; > - B2PLYP/cc-pVDZ: Passed; > - CAM-B3LYP/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/obj",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:2069,install,install,2069,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,"dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > - DLDF+D09/cc-pVDZ: *GRADIENTS FAILED*; >; > Segmentation fault: 11; >; > - Both disk_DF and mem_DF gradients yield above segfault, no; > message in out",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:3673,install,install,3673,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,"dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > 5. SAPT0/cc-pVDZ (energies only; water dimer): Passed!; > 6. FNOCC; > - QCISD(T)/cc-pVDZ: *ENERGY FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:5817,install,install,5817,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,"dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > - DLDF+D09/cc-pVDZ: *GRADIENTS FAILED*; >; > Segmentation fault: 11; >; > - Both disk_DF and mem_DF gradients yield above segfault, no; > message in outfile or message printed to stdout; > - PBE/cc-pVDZ: Passed; > - wPBE/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > super",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:5188,install,install,5188,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,dma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:1769,Install,Install,1769,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,dule v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14657,Install,Install,14657,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"e ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; set_cholesky_from('CC_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: FNOCC requires SCF_TYPE = DISK_DF; ```; 7. DFOCC (OMP2/cc-pVDZ): **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; type_val = set_cholesky_from('MP2_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: DFOCC requires SCF_TYPE = DISK_DF; ```; 8. CI; - CISD/cc-pVDZ: **ALL FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PS",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:8326,install,install,8326,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['install'],['install']
Deployability,"e ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; > e_scf = scf_wfn.compute_energy(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; > raise e; > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; > self.iterations(); > File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; > raise ConvergenceError(""""""SCF iterations"""""", self.iteration_); >; > ConvergenceError: Could not converge SCF iterations in 4 iterations.; >; > Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; > Psi4 wall time for execution: 0:00:01.01; >; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.; >; > It looks like die_if_not_converged; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L105-L113>; > toggled print-error-msg/die+traceback previously for SCF and DETCI, with; > defaulting toward print-error-msg. I think it's better to default toward; > die (which this PR now does) and ppl can catch the error if they want; > print-error-msg.; >; > For a long time we had geometry optimizations exit smoothly even if failed; > for iterations exceeded. That caused some problems (I think @dsirianni; > <https://github.com/dsirianni> hit them), so we switched toward the; > die+traceback. Now SCF will behave like optimizations.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1130#issuecomment-411567479>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvbzSmwMSXIINgOIb089mSzOfCS1ks5uO2AMgaJpZM4V0pOZ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303:2152,toggle,toggled,2152,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411580303,1,['toggle'],['toggled']
Deployability,"e coordinates. chg/mult from the xyz are possible https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/from_string.py#L117-L136. tu1.py; ```; import psi4. psi4.set_memory(""600 mb""). ### <<< Either ; #with open(""h2o.xyz"") as fp:; # fh2o = fp.read(); #; #psi4.geometry(fh2o). ### --- Or. h2o = psi4.core.Molecule.from_arrays(elem=[""O"", ""H"", ""H""], units=""Angstrom"", geom=[; 0.000000000000, 0.000000000000, -0.065775570538, ; 0.000000000000, -0.759061990794, 0.521953018295, ; 0.000000000000, 0.759061990794, 0.521953018295]) ; psi4.activate(h2o). ### >>> End. psi4.set_options({; ""basis"": ""cc-pVDZ"",; }); psi4.energy('scf'). psi4.compare_values(-76.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```. h2o.xyz; ```; 3; sdlkfs; O 0.000000000000 0.000000000000 -0.065775570538 ; H 0.000000000000 -0.759061990794 0.521953018295 ; H 0.000000000000 0.759061990794 0.521953018295 . ```; ## Single Core. To actually address your problem, can you try the following edits? If you edit the installed copy, no recompile needed. Hopefully this solves it -- thanks for the report!; ```; diff --git a/psi4/driver/procrouting/empirical_dispersion.py b/psi4/driver/procrouting/empirical_dispersion.py; index d23f016..ea4f79d 100644; --- a/psi4/driver/procrouting/empirical_dispersion.py; +++ b/psi4/driver/procrouting/empirical_dispersion.py; @@ -213,7 +213,7 @@ class EmpiricalDispersion(object):; resi,; self.engine,; raise_error=True,; - local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path()}); + local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path(), ""ncores"": core.get_num_threads()}); ; dashd_part = float(jobrec.extras['qcvars']['DISPERSION CORRECTION ENERGY']); if wfn is not None:; @@ -231,7 +231,7 @@ class EmpiricalDispersion(object):; resi,; ""gcp"",; raise_error=True,; - local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path()}); + local_options={""scratch_directory""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938:1118,install,installed,1118,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938,1,['install'],['installed']
Deployability,"e them in FreeBSD ports.; Nothing important should be hard-wired to Git during build/tests. I agree broadly, though I'd sacrifice it to get fine-grain versioning for cross-project communication if needed :-). The way psi is set up now, if the buildsys detects that it's not a git repo, it substitutes some generic most-recent-tag info and proceeds, so that one gets a working build. When I try, it works as planned:. acquire tarball; ```; > curl -L https://github.com/psi4/psi4/tarball/master -o psi4_v17.tgz; ```; configure and build -- it detects ""no git""; ```; # configure (all req'd deps detected except optking to be build from src); > cmake --build . -j12; ...; [ 88%] Performing build step for 'psi4-core'; [ 1%] Generating version info; [ 1%] Building CXX object src/psi4/lib3index/CMakeFiles/3index.dir/dftensor.cc.o; ...; [ 2%] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; Blindly (no git) accepting release version: 1.7+6ce35a5 (recorded); 1.7 {} 6ce35a5 1.7.0.0 release 1.7 <-- 1.7+6ce35a5; [ 2%] Built target update_version; [ 2%] Building CXX object src/psi4/libciomr/CMakeFiles/ciomr.dir/dsyev_ascending.cc.o; ...; ```; version computes and simple test, distributed driver tests, and dftd3 addon tests work ok; ```; > stage/bin/psi4 --psiapi # execute results; >>> stage/bin/psi4 --version; 1.7; >>> ctest -R tu1; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 426: tu1-h2o-energy; 1/1 Test #426: tu1-h2o-energy ................... Passed 1.65 sec. 100% tests passed, 0 tests failed out of 1; >>> ctest -R ddd; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 479: ddd-deriv; 1/2 Test #479: ddd-deriv ........................ Passed 13.18 sec; Start 481: ddd-function-kwargs; 2/2 Test #481: ddd-function-kwargs .............. Passed 170.20 sec. 100% tests passed, 0 tests failed out of 2; >>> ctest -R dftd3; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 510: dftd3-energy; 1/5 Test #510: dftd3-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:1061,release,release,1061,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,1,['release'],['release']
Deployability,"e/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; > type_val = set_cholesky_from('MP2_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; > raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: DFOCC requires SCF_TYPE = DISK_DF; >; > 8. CI; > - CISD/cc-pVDZ: *ALL FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 28, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; > fnocc_wfn = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - MP3/cc-pVDZ & MP4/cc-pVDZ: *FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 28, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:10513,install,install,10513,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,e/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2754,Install,Installing,2754,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Install'],['Installing']
Deployability,"e; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2230,Install,Installing,2230,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Install'],['Installing']
Deployability,"eason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 11:23 AM, ""wpoely86"" notifications@github.com wrote:; > ; > > Why don't you keep the sensitive new code in separate branches of your; > > (private) fork of the psi4public repo and only merge when the paper is; > > ready? Or only use the private repo for that kind of stuff and push; > > everything still straight to the public repo?; > > I think you",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98498738:1338,update,update,1338,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738,1,['update'],['update']
Deployability,ecessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Inst,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15973,Install,Install,15973,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"ements (transition metals), so for now my solution is to just use `freeze_core true` for all SAPT0 calcs and go about my life. And when I thought the bad setting _just_ caused segfaults, I was fine to assume that all calculations that ran to completion were obviously OK. Now seeing that there's some shade of undefined behavior leading to memory corruption possibly going on, I'd like to understand what is going wrong so I can figure out what's likely impacted... cases where the energy is obviously and egregiously wrong (like above) are easy, but I'm worried more about subtle incorrectness. As for the general fix -- if `num_frozen_docc` is disabled for SAPT0, then it becomes impossible for a user to impose their own beliefs about frozen orbitals in tricky cases like transition metals, which seems... bad. Since it does impact the dispersion portion of the calc, it needs to be user-mutable. This setting *shouldn't* be actually impacting the HF energies, and fixing that strange interaction seems like most of the battle. I'm less sure of what to do in the MP2 case, since it does seem relevant that the user should be able to specify their own core policy as required... At the risk of further complication, would it make sense to implement either:; 1. The ability for `num_frozen_docc` to take in a tuple the same length of the number of fragments in the active `Molecule` (such that correct behavior can be inferred in cases like SAPT where both monomer and dimer calcs are run in a global context); 2. The ability to define, via a list(?), a custom policy on a per-element basis that can be fed to `freeze_core`? . Both of these would allow both for the user to handle cases like custom frozen thresholds in multi-calc situations and keep things consistent. At the same time, these are... possibly a lot of work. I'm prototyping a solution of type (2) but I'm not sure if it'll be too clunky for others to use -- assuming I haven't messed up horribly, I'll propose the patch later today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1207254380:3185,patch,patch,3185,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1207254380,1,['patch'],['patch']
Deployability,"ental\molparse\from_arrays.py:698: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:699: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 1414 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 954 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 48 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 1302 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 1266 warnings; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:702: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 707 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 477 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 24 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 651 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 633 warnings; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:10799,release,release,10799,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['release'],['release']
Deployability,"eqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:771,Release,Release,771,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,3,"['Release', 'install']","['Release', 'install']"
Deployability,"er.py"", line 1113, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 639, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2068, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 1360, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 84, in scf_compute_energy; self.initialize(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 178, in scf_initialize; self.initialize_jk(self.memory_jk_). RuntimeError:; Fatal Error: DFHelper: not enough memory for (p shell) AO blocking! required memory: 0.105622[GiB].; Error occurred in file: /home/psilocaluser/gits/hrw-release/psi4/src/psi4/lib3index/dfhelper.cc on line: 568; ```. ```; @@ -556,8 +557,11 @@ std::pair<size_t, size_t> DFHelper::pshell_blocks_for_AO_build(const size_t mem,; constraint = total;; constraint += full_3index;; constraint += (hold_met_ ? naux_ * naux_ : total);; + printf(""AAAA %4d: %10d > %d || %4d == %4d\n"", count, constraint, mem, i, pshells_-1);; if (constraint > mem || i == pshells_ - 1) {; + printf("" AAA %d || %d\n"", constraint > mem, i == pshells_ - 1);; if (count == 1 && i != pshells_ - 1) {; + printf("" AA %d && %d\n"", count == 1, i != pshells_ - 1);; std::stringstream error;; error << ""DFHelper: not enough memory for (p shell) AO blocking!""; << "" required memory: "" << constra",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862:1679,release,release,1679,https://psicode.org,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862,1,['release'],['release']
Deployability,er] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2896,Install,Install,2896,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,ernary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11ConfigVersion.cmake; -- Installing: /home/psi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3441,Install,Installing,3441,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Install'],['Installing']
Deployability,error is a Windows install of conda that chocolatey seems to be failing connection on today. It was passing CI earlier.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-565980810:19,install,install,19,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-565980810,1,['install'],['install']
Deployability,"es attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; ======================== gdma::gdma ========================; tgt='gdma::gdma' prop='IMPORTED'; value='TRUE'; defined='0'; set='1'; gt='gdma::gdma' prop='INTERFACE_COMPILE_DEFINITIONS'; value='USING_gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:2048,install,install-,2048,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['install'],['install-']
Deployability,"ests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:489: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:584: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:666: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:681: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:688: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:708: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_mdi.py:11: Not detecting module mdi. Install package if necessary to enable tests.; ========================================== 21 passed, 33 skipped, 3301 deselected, 1 xfailed, 16657 warnings in 72.64s (0:01:12) =====================",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:16655,Install,Install,16655,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"ethods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#18",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:1140,Update,Update,1140,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['Update'],['Update']
Deployability,"ew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected the desired headers, but not the correct binaries. because homebrew has installed boost 1.60.0 in `/usr/local`. Try running `brew unlink boost boost-python` and running setup/make again. . This may be related to the issue linked by @bennybp. It seems it has something to do with cmake find package on osx. I haven't seen any problems come up switching between different versions of python though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-198164795:1601,install,installation,1601,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795,3,['install'],"['installation', 'installed']"
Deployability,"f hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected the desired headers, but not the correct binaries. because homebrew has installed boost 1.60.0 in `/usr/local`. Try running `brew unlink boost boost-python` and running setup/make again. . This may be related to the issue linked by @bennybp. It seems it has something to do with cmake find package on osx. I haven't seen any problems come up switching between different versions of python t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-198164795:1422,install,installed,1422,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795,1,['install'],['installed']
Deployability,"familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (without spellcheck). Please forgive the brevity.; > On May 3, 2015 11:23 AM, ""wpoely86"" notifications@github.com wrote:; > ; > > Why don't you keep the sensiti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98498738:1209,release,released,1209,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738,1,['release'],['released']
Deployability,"few comments:. It's the ia32 (32bit) build, the x86_64 one is here:; https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=amd64&ver=1%3A1.2.1-1&stamp=1546603567&raw=0. > * no need for boost at all (`libboost-atomic1.67-dev libboost-atomic1.67.0 libboost-chrono-dev`). Thanks, I thought I had removed them already. > * psi 1.2 won't work with py < 3.5 (`Get:19 http://debian.csail.mit.edu/debian unstable/main i386 python2.7 i386 2.7.15-5 [299 kB]`). It is using python3, this must be some indirect dependency which I can do nothing about.; ; > * production needs at least AM6 (`-DMAX_AM_ERI=4`) and preferably 7 or 8. OK, I will look into that. > * I think you were the one who wanted to be able to use a default theme rather than the psi custom one. this is available now (`-- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme`). Hrm right, I will take another look at building the manual, thanks for pointing that out. > * threaded blas that's not mkl can go wrong (`CMake Warning at external/common/lapack/CMakeLists.txt:50 (message):`) and unfortunately the test suite in single thread mode can't catch it. would be good to test it, perhaps with this script https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L270. Ok, I'll try to run that during bulid as well. > * Unfortunately solutions to test failures aren't leaping to mind. Some are very strange for a consistent codebase (`TypeError: set_memory_bytes(): incompatible function arguments. The following argument types are supported:`). That one is likely due to 32bit: `tests/options1/input.dat` tried to allocate more than 4 GB in the last two attempts in the `check set_memory() wrapper` test; the same applies to `json-v11-energy` and `json_data[""memory""] = ""5GB""`. . So those are accounted for, the ones which are weird are the . ```; Exit Status: infile ( -11 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; failures. I've updated the packaging and am running a new build/test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451519762:2160,update,updated,2160,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451519762,1,['update'],['updated']
Deployability,"find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30% failure rate).; ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:1408,patch,patch,1408,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['patch'],['patch']
Deployability,"first 2 questions:; Can try - this was my first psi4 optimization. 3:; ""exception"" related definitively to ""new linear angles"": . ```; Energy change for the previous step:; Projected : -0.0009583389; Actual : -0.0004424593. Performing BFGS update.; Previous computed or guess Hessian on step 1.; Steps to be used in Hessian update: 24 23; Taking RFO optimization step.; Going to follow RFO solution 1.; Using RFO vector 1.; Norm of target step-size 0.47532; Projected energy change by RFO approximation: -0.0041167176; Newly linear bends that need to be incoporated into the internal coordinates: 1 3 11; 2 9 13; The INTCO_EXCEPTion handler:; New linear angles; Dynamic level is 0.; exc.g_really_quit() is 0.; New linear angles; ```. There are 1825 geometries in the output.dat file (it is about 22mb in size).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-124906121:240,update,update,240,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124906121,2,['update'],['update']
Deployability,"found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/includ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2029,Install,Installing,2029,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,2,['Install'],['Installing']
Deployability,"g const&, bool const&) in libmints.a(onebody.cc.o); ...; ""_PyTuple_Size"", referenced from:; boost::python::objects::function::call(_object*, _object*) const in libboost_python-1_57.a(function.o); boost::python::objects::function::argument_error(_object*, _object*) const in libboost_python-1_57.a(function.o); ""_PyTuple_Type"", referenced from:; boost::python::converter::pyobject_type<boost::python::tuple, &(PyTuple_Type)>::check(_object*) in export_mints.cc.o; boost::python::detail::tuple_base::call(boost::python::api::object const&) in libboost_python-1_57.a(tuple.o); boost::python::detail::register_tuple_pytype_ptr::register_tuple_pytype_ptr() in libboost_python-1_57.a(tuple.o); boost::python::converter::pyobject_type<boost::python::tuple, &(PyTuple_Type)>::get_pytype() in libboost_python-1_57.a(pickle_support.o); ""_PyType_GenericAlloc"", referenced from:; boost::python::objects::class_type_object in libboost_python-1_57.a(class.o); ""_PyType_IsSubtype"", referenced from:; boost::python::instance_holder::install(_object*) in libboost_python-1_57.a(class.o); boost::python::objects::find_instance_impl(_object*, boost::python::type_info, bool) in libboost_python-1_57.a(class.o); boost::python::objects::(anonymous namespace)::new_class(char const*, unsigned long, boost::python::type_info const*, char const*) in libboost_python-1_57.a(class.o); boost::python::instance_holder::allocate(_object*, unsigned long, unsigned long) in libboost_python-1_57.a(class.o); boost::python::instance_holder::deallocate(_object*, void*) in libboost_python-1_57.a(class.o); boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::extract(_object*) in libboost_python-1_57.a(builtin_converters.o); boost::python::converter::(anonymous namespace)::complex_rvalue_from_python::get_slot(_object*) in libboost_python-1_57.a(builtin_converters.o); ...; ""_PyType_Ready"", referenced from:; boost::python::objects::static_data() in libboost_python-1_57.a(class.o); boost::python::objects::cl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131149225:70786,install,install,70786,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131149225,1,['install'],['install']
Deployability,"g; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2327,toggle,toggle,2327,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,1,['toggle'],['toggle']
Deployability,gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3246,Install,Installing,3246,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Install'],['Installing']
Deployability,ge/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3050,Install,Installing,3050,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Install'],['Installing']
Deployability,"gers coffee:. ```; PsiException: Could not converge SCF iterations in 4 iterations. Failed to converge. Traceback (most recent call last):; File ""stage/usr/local/psi4/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2008, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; raise e; File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; raise ConvergenceError(""""""SCF iterations"""""", self.iteration_). ConvergenceError: Could not converge SCF iterations in 4 iterations. Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; Psi4 wall time for execution: 0:00:01.01. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. It looks like [`die_if_not_converged`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L105-L113) toggled print-error-msg/die+traceback previously for SCF and DETCI, with defaulting toward print-error-msg. I think it's better to default toward die (which this PR now does) and ppl can catch the error if they want print-error-msg. For a long ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411567479:1093,patch,patch,1093,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411567479,1,['patch'],['patch']
Deployability,"ghts reserved.; ; **************** THREAD INFORMATION ******************; Job running using OpenMP.; The number of parallel threads is: 4; ; ******************************************************; ; /home/termo/chargemol_09_26_2017/atomic_densities/ ; ; ******************** TIME CONTROL ********************; Starting format_total_cube_density; ******************************************************; ; inputfile = ""total_density.cube""; parameters; 5.0000000000000000 -12.329260000000000 -10.002257999999999 -9.6799070000000000 ; 131.00000000000000 0.16000000000000000 0.0000000000000000 0.0000000000000000 ; 120.00000000000000 0.0000000000000000 0.16000000000000000 0.0000000000000000 ; 122.00000000000000 0.0000000000000000 0.0000000000000000 0.16000000000000000 ; sum_negative_density= 0.0000000000000000 ; center_nabc =; 80 63 60; 55 63 60; 50 50 60; 50 69 71; 50 69 50; delta_na= 61; delta_nb= 61; delta_nc= 61; ; ******************** TIME CONTROL ********************; Starting check_grid_spacing; ******************************************************; ; The grid spacing in your electron density input file is adequate.; ; ******************** TIME CONTROL ********************; Finished check_grid_spacing in 0.11500000208616257 seconds; ******************************************************; ; ; ******************** TIME CONTROL ********************; Finished format_total_cube_density in 1.1610000133514404 seconds; ******************************************************; ; ncore = 0.0000; nvalence = 62.0000; pixelvolume = 4.0960E-03; numerically integrated valence density = 3.3967E+01; sum_valence_occupancy_correction = 0.0000E+00; checkme = 2.8033E+01; The electrons are not properly accounted for. ```. So here 28 electrons short in the cube of the 62 expected.... running on latest master:; ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.3a1.dev221. Git: Rev {master} 28a9a54. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074:2479,integrat,integrated,2479,https://psicode.org,https://github.com/psi4/psi4/issues/1113#issuecomment-412835074,1,['integrat'],['integrated']
Deployability,"gin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and trigger an alternate Makefile.template if binary?. Of course, I haven't tried any plugin operation that actually involves blas/lapack calls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172256746:1219,install,install,1219,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746,4,['install'],"['install', 'installation']"
Deployability,"github.com/articles/duplicating-a-repository/ . And in the beginning we didn’t want everyone to have to pay for storing private repositories if they wanted private forks (moot now since github offers private storage for scientists). That’s more of the history of how the current scheme came to be. I’m open to better schemes, but I think most of our problems can be solved by an automated public/private master sync when safe. Lori. > On May 3, 2015, at 12:18 PM, andysim notifications@github.com wrote:; > ; > It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them.; > ; > The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date.; > ; > These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98501924:1330,release,release,1330,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98501924,1,['release'],['release']
Deployability,good news. The MKL is fine for this. I got the calculation finished.; Trouble was likely again #1679 because it failed right at the amplitude writing. I applied the `long long int` modification and the `size_t` suggestion above (see patch).; Results: [outfile.txt](https://github.com/psi4/psi4/files/3922471/outfile.txt); git patch: [fix.patch.txt](https://github.com/psi4/psi4/files/3922477/fix.patch.txt) (sort of untested hot fix for now),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561685809:233,patch,patch,233,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561685809,4,['patch'],['patch']
Deployability,guess I'll do v1.2.0 + patch for conda (see https://github.com/PCMSolver/pcmsolver/issues/165). let me know when there's a tag that's fully operational (and what it's name will be)).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988#issuecomment-385743002:23,patch,patch,23,https://psicode.org,https://github.com/psi4/psi4/pull/988#issuecomment-385743002,1,['patch'],['patch']
Deployability,"gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; ```; - DLDF+D09/cc-pVDZ: **GRADIENTS FAILED**; ```; Segmentation fault: 11; ```; - Both `disk_DF` and `mem_DF` gradients yield above segfault, no message in outfile or message printed to stdout; - PBE/cc-pVDZ: Passed; - wPBE/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasiria",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:3666,install,install,3666,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,"gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; ```; 5. SAPT0/cc-pVDZ (energies only; water dimer): Passed!; 6. FNOCC; - QCISD(T)/cc-pVDZ: **ENERGY FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:5774,install,install,5774,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,"he release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:702: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 707 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 477 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 24 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 651 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 633 warnings; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:11667,release,release,11667,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['release'],['release']
Deployability,"he user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in `psi4/lib`. After installation, PSI4 will look in; $prefix/share/psi. If you want to specify a non-standard location for; this; information, you can do this by setting the environmental variable; $PSI4DATADIR to the directory containg the basis, grids, etc.,; subdirectories. -Rob. On Fri, Apr 11, 2014 at 9:39 AM, zxinfish notifications@github.com wrote:. > Reopened #56 https://github.com/psi4/psi4public/issues/56.; > ; > ## ; > ; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/56; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56#issuecomment-40206429:2019,install,installation,2019,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429,1,['install'],['installation']
Deployability,"hello, I'll try to work on the replies and changes to have it completed by the end of the week, might I ask what's the timeframe we're working here before 1.4 stable release?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-870509986:166,release,release,166,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-870509986,1,['release'],['release']
Deployability,"helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > - DLDF+D09/cc-pVDZ: *GRADIENTS FAILED*; >; > Segmentation fault: 11; >; > - Both disk_DF and mem_DF gradients yield above segfault, no; > message in outfile or message printed to stdout; > - PBE/cc-pVDZ: Passed; > - wPBE/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **k",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:4816,install,install,4816,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['install'],['install']
Deployability,"her route?. ```; ==> Integral Setup <==. DFHelper Memory: AOs need 0.104621 GiB; user supplied 0.104863 GiB. 14042044 14074472; Using in-core AOs. Traceback (most recent call last):; File ""stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 1113, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/driver.py"", line 639, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2068, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/proc.py"", line 1360, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 84, in scf_compute_energy; self.initialize(); File ""/home/psilocaluser/gits/hrw-release/objdir37/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 178, in scf_initialize; self.initialize_jk(self.memory_jk_). RuntimeError:; Fatal Error: DFHelper: not enough memory for (p shell) AO blocking! required memory: 0.105622[GiB].; Error occurred in file: /home/psilocaluser/gits/hrw-release/psi4/src/psi4/lib3index/dfhelper.cc on line: 568; ```. ```; @@ -556,8 +557,11 @@ std::pair<size_t, size_t> DFHelper::pshell_blocks_for_AO_build(const size_t mem,; constraint = total;; constraint += full_3index;; constraint += (hold_met_ ? naux_ * naux_ : total);; + printf(""AAAA %4d: %10d > %d || %4d == %4d\n"", count, constraint, m",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862:1361,release,release,1361,https://psicode.org,https://github.com/psi4/psi4/pull/1233#issuecomment-428754862,1,['release'],['release']
Deployability,"hich can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.10']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └─ psi4 is installable with the potential options; ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:7374,install,installable,7374,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installable']
Deployability,"hird of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's pos",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2178,Update,Update,2178,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['Update'],['Update']
Deployability,"hmm, you're right -- adcc 15.14 is getting installed https://github.com/psi4/psi4/actions/runs/3508758253/jobs/5877394681#step:16:956 but not detected for tests https://github.com/psi4/psi4/actions/runs/3508758253/jobs/5877394681#step:21:656",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785#issuecomment-1322413359:43,install,installed,43,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322413359,1,['install'],['installed']
Deployability,"holesky_from; > raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: FNOCC requires SCF_TYPE = DISK_DF; >; > 7. DFOCC (OMP2/cc-pVDZ): *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 40, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; > type_val = set_cholesky_from('MP2_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; > raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: DFOCC requires SCF_TYPE = DISK_DF; >; > 8. CI; > - CISD/cc-pVDZ: *ALL FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 28, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; > return func(nam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:9654,install,install,9654,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,"hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:1734,install,install,1734,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,2,"['install', 'update']","['install', 'update']"
Deployability,"https://github.com/psi4/psi4/blob/master/tests/isapt2/input.dat is the test case version of that example. It has some updates, and it runs. thanks for the notice -- we should update the example. lmk if further problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902386060:118,update,updates,118,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902386060,2,['update'],"['update', 'updates']"
Deployability,"i have an update, i found this open PR (which hasn't been merged since 2018) on `psi4numpy` https://github.com/psi4/psi4numpy/pull/36/files . and adapted the code, and it works, though I couldn't specify the `dft_functional = ""WB97X-D""` parameter, but I believe it doesn't matter for the initial guess. . ```python; mol = psi4_geo. # cant specify 'dft_functional': ""WB97X-D"", not valid; psi4.set_options({'basis': 'def2-svp',; 'scf__reference': 'rhf',; # 'scf__dft_functional': ""WB97X-D"",; 'e_convergence': 1e-8}). # Integral generation from Psi4's MintsHelper; wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); # t = time.time(); mints = psi4.core.MintsHelper(wfn.basisset()); S = np.asarray(mints.ao_overlap()). # Get nbf and ndocc for closed shell molecules; nbf = S.shape[0]; ndocc = wfn.nalpha(). print('\nNumber of occupied orbitals: %d' % ndocc); print('Number of basis functions: %d' % nbf). # Set SAD basis sets; nbeta = wfn.nbeta(); psi4.core.prepare_options_for_module(""SCF""); sad_basis_list = psi4.core.BasisSet.build(wfn.molecule(), ""ORBITAL"",; psi4.core.get_global_option(""BASIS""), puream=wfn.basisset().has_puream(),; return_atomlist=True). sad_fitting_list = psi4.core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SAD"",; psi4.core.get_option(""SCF"", ""DF_BASIS_SAD""), puream=wfn.basisset().has_puream(),; return_atomlist=True). # Use Psi4 SADGuess object to build the SAD Guess; SAD = psi4.core.SADGuess.build_SAD(wfn.basisset(), sad_basis_list) # , ndocc, nbeta; SAD.set_atomic_fit_bases(sad_fitting_list); SAD.compute_guess();; D = SAD.Da(); sad_guess_manual = D.to_array(); ```. however, when I compare this `sad_guess_manual` with the density matrix from the full SCF with `maxiter = 0`, they are not close :( ; ```python; # run full SCF but limit maxiter to 0; psi4.set_options(; {; ""scf__reference"": ""rhf"",; ""scf__maxiter"": 0,; ""scf__fail_on_maxiter"": False; }; ); energy_sad, wfn_sad = psi4.energy('scf/def2-svp', dft_functional=""WB97X-D"", molecule=psi4_g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397:10,update,update,10,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397,1,['update'],['update']
Deployability,"i remember the omega issue from a forum post: http://forum.psicode.org/t/wb97x-definition-bug/480. I think ORCA was used for all the DSD developments. There you can defined DHDF compositions in the input file (see e.g. my reference outputs). If manual defining parameters for another program really counts as a good test is perhaps debatable because typos never come alone ;). Are the non-dispersion forms of DSD-PBEP86 from both papers really different? I hope not...; Anyway, I'd stick with the 2013 paper in doubt because it is the latest ""update"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-371221109:543,update,update,543,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-371221109,1,['update'],['update']
Deployability,"i/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; > fnocc_wfn = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - FNO-DF-CCSD(T)/cc-pVDZ: *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 43, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; > set_cholesky_from('CC_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; > raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: FNOCC requires SCF_TYPE = DISK_DF; >; > 7. DFOCC (OMP2/cc-pVDZ): *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 40, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:8184,install,install,8184,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,"i4.energy('ccsd', return_wfn=True); t2 = wfn.T2(); ```; At the time when the python bound function is called and the code for `CCEenergyWavefunction::T2()` is executed the `global_dpd_` the dpd object that the `global_dpd_` points to has been deleted out from under it (you can see [here](https://github.com/psi4/psi4/blob/3fdf17415282884ec86e78ba34087ddd6c3645e8/psi4/src/psi4/libdpd/init.cc#L59) that `dpd_set_default` will assign the `global_dpd_` pointer to `dpd_list[0]`, and below it is the code for `dpd_close` that will delete the object. I see two possible solutions. . - The easiest to implement would be to have the getters/setters check that `global_dpd_` is not `nullptr`, and if it is construct the dpd. Before doing the geting/setting. The function would also have to free the dpd object as well as other modules will assume that `global_dpd_` is null until they initialize it and `dpd_init` will throw when they try to create it. - The other option is to simply start phasing out the `global_dpd_` entirely. A data member can be added to the `CCEnergyWavefunction` and the member functions of the class can be modified to use that data member instead of the `global_dpd_`. The initialization of the data member is moved into the construtor and the dpd will be valid until the wavefunction is destroyed. The same would need to be done for the cclambda wavefunction as well. . The constructing the dpd object is far from trival as it allocates memory for and computes index translations for all possible pairs and quartets of the orbital subspaces provided, since this is only done once at the beginning of each module using a DPD I haven't looked into how significan the overhead is but it may be an issue for the first option. The second option is better for code quality, and I once played around with this idea in a plugin years ago, but I never got to the point where I could test if there were any unforeseen consequences down the pipeline (subsequent calls to other CC* modules).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978:2673,pipeline,pipeline,2673,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978,1,['pipeline'],['pipeline']
Deployability,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3353,Integrat,Integration,3353,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['Integrat'],['Integration']
Deployability,"i4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4477,Install,Installing,4477,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Install'],['Installing']
Deployability,"i4/cmake/math/MathLibs.cmake; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2205,patch,patch,2205,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['patch'],['patch']
Deployability,"i4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; > e_scf = scf_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; > The most recent 5 function calls were:; >; > 2. HF/cc-pVDZ: Passed; > 3. AO DF-CASSCF/cc-pVDZ: Passed; > 4. DFT Smoketests; > - B2PLYP/cc-pVDZ: Passed; > - CAM-B3LYP/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:2672,install,install,2672,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['install'],['install']
Deployability,"i4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └─ psi4 is installable with the potential options; ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ └─ blas 1.0 mkl, which can be installed;; └─ psi4 [0.5.360|1.0rc0|1.0rc213]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:8258,install,installed,8258,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"i4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: DFOCC requires SCF_TYPE = DISK_DF; ```; 8. CI; - CISD/cc-pVDZ: **ALL FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - MP3/cc-pVDZ & MP4/cc-pVDZ: **FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procro",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:10054,install,install,10054,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,i4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rd,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:5051,Install,Install,5051,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,i4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 83%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 85%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 87%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [ 89%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_basic PASSED [ 90%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_cc XFAIL (no AtomicInput optimization) [ 92%]; psi4conda/envs/psi4env/lib/site-packages/ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:7201,Install,Install,7201,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"ib src\psi4\mrcc\mrcc.lib src\psi4\occ\occ.lib src\psi4\optking\optking.lib src\psi4\psimrcc\psimrcc.lib src\psi4\sapt\sapt.lib src\psi4\scfgrad\scfgrad.lib src\psi4\lib3index\3index.lib src\psi4\libciomr\ciomr.lib src\psi4\libcubeprop\cubeprop.lib src\psi4\libdiis\diis.lib src\psi4\libdisp\disp.lib src\psi4\libdpd\dpd.lib src\psi4\libfilesystem\filesystem.lib src\psi4\libfock\fock.lib src\psi4\libfunctional\functional.lib src\psi4\libiwl\iwl.lib src\psi4\libmints\mints.lib src\psi4\libmoinfo\moinfo.lib src\psi4\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Extensions\Microsoft\Python\Miniconda\Miniconda3-x64\libs\Python37.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\gg.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\xc.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\deriv.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\int.lib D:\OpenBLAS\lib\openblas.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\CMakeFiles\core.dir/intermediate.manifest src\CMakeFiles\core.dir/manifest.res"" failed (exit code 1120) with the following output:; 正在创建库 src\core.lib 和对象 src\core.exp; F:\fnocc.lib(diis.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv_，该符号在函数 ""void __cdecl psi::fnocc::DGESV(long &,long &,double *,long &,long *,double *,long &,long &)"" (?DGESV@fnocc@psi@@YAXAEAJ0PEAN0PEAJ100@Z) 中被引用; F:\mcscf.lib(scf_diis.cc.obj) : error LNK2001: 无法解析的外部符号 dgesv_; F:\psimrcc.lib(blas_diis.cc.obj) : error LNK2001: 无法解析的外部符号 dgesv_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv_，该符号在函数 ""void __cdecl psi::fnocc::DGEMV(char &,long &,long &,double &,double *,long &,double *,long &,double &,double *,l",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:6274,Release,Release,6274,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['Release'],['Release']
Deployability,"ible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be inst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2023,install,installed,2023,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"ible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:5187,install,installed,5187,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"ich does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗███",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2480,install,installed,2480,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"ide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1259,release,releases,1259,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,1,['release'],['releases']
Deployability,"if you'll rebase now, the Linux `using_mp2d` CI error should go away. there'll also be a Windows spot check section, https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-windows.yml#L191-L197 . If you add your failing Win test there, we should get better output for debugging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-565606760:165,pipeline,pipelines,165,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-565606760,2,['pipeline'],"['pipelines', 'pipelines-windows']"
Deployability,"ight want to test run with lower AM), there'll be a `libint-*.tgz` file produced.; * Now back at your psi4 clone, edit this line https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L63 to the location of that tarball (according to cmake manual a filepath is ok -- needn't be URL).; * Configure Psi4. The buildsys can build from source most QC dependencies, but you'll need the basics of Python, NumPy, etc. as described https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L36-L50 . I'd definitely suggest passing in `-D BUILD_SHARED_LIBS=ON`, too. Note L2 has its dependency needs, too: https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L86-L87; * If that configures, let it build `cmake --build <build_dir> -j<N>`. definitely do this step in parallel. ### Note on AM=7; Regular AM is 5. If you only need 7, you can use this tarball rather than generating your own with `--target export` in L2 repo: https://github.com/loriab/libint/releases/download/v0.1/Libint2-export-7-7-4-8-8-5_mm4f12ob2_rev1.tgz Start above directions at ""Now back at your psi4 clone..."". Still GCC only, not Intel compilers. ### Exhibit A; ```; cmake -S. -Bbuild \; -G Ninja \; -D LIBINT_BUILD_LIBRARY_AS_SUBPROJECT=OFF \; -D CMAKE_INSTALL_PREFIX=/path/to/l2/install \; -D REQUIRE_CXX_API=ON \; -D REQUIRE_CXX_API_COMPILED=OFF \; -D BUILD_TESTING=ON \; -D CMAKE_PREFIX_PATH=""/psi/toolchainconda/envs/singleboost;/psi/toolchainconda/envs/singlegmp;/psi/toolchainconda/envs/singleeigen"" \; -D ENABLE_MPFR=OFF \; -D LIBINT_LOCAL_EIGEN3_INSTALL=OFF \; -D CMAKE_CXX_COMPILER=$CXX \; -D CMAKE_C_COMPILER=$CC \; -D ENABLE_FORTRAN=OFF \; -D LIBINT2_SHGAUSS_ORDERING=standard \; -D ERI3_PURE_SH=OFF \; -D ERI2_PURE_SH=OFF \; -D ENABLE_ERI=2 \; -D ENABLE_ERI3=2 \; -D ENABLE_ERI2=2 \; -D ENABLE_ONEBODY=2 \; -D ENABLE_G12=1 \; -D DISABLE_ONEBODY_PROPERTY_DERIVS=ON \; -D MULTIPOLE_MAX_ORDER=4 \; -D WITH_G12_MAX_AM=3 \; -D WITH_ERI_MAX_AM=""10;3;2"" \; -D WITH_ERI3_MAX_AM=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906:2409,release,releases,2409,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-1374405906,1,['release'],['releases']
Deployability,"im/anaconda3/include"" ../configure --enable-eri=2 --enable-eri3=2 --enable-eri2=2 --with-eri-max-am=5 --with-eri2-max-am=6 --with-eri3-max-am=6 --with-shgauss-ordering=gaussian --prefix=/u/andysim/programming/libint/installdir3 --enable-eri2-pure-sh --enable-eri3-pure-sh`. 3. `make install` (this will take a *very* long time). 4. `make export` - this will generate a tarball that can be used to build a version for Psi4 called `libint-2.7.0-beta.1.tgz`. 5. Untar that tarball somewhere else and modify the file `include/libint2_params.h` to read; ```; #ifndef LIBINT2_MAX_AM_default; # define LIBINT2_MAX_AM_default 4; #endif. #ifndef LIBINT2_MAX_AM_default1; # define LIBINT2_MAX_AM_default1 LIBINT2_MAX_AM_default; #endif. #ifndef LIBINT2_MAX_AM_default2; # define LIBINT2_MAX_AM_default2 LIBINT2_MAX_AM_default; #endif; ```; from line 81 onwards. 6. Make a `build` subdir and from there `cmake .. -DCMAKE_INSTALL_PREFIX=/u/andysim/programming/libint/installdir_2.6 -DLIBINT2_SHGAUSS_ORDERING=gaussian -DCMAKE_CXX_FLAGS=""-fPIC""` The fPIC flag is needed, or you'll get some nasty link errors. 7. Now you can build Psi4. Yay! `cmake .. -DCMAKE_BUILD_TYPE=Debug -DLibint2_DIR=/u/andysim/programming/libint/installdir_2.6/lib/cmake/libint2 -DLibint_DIR=/u/andysim/programming/libint1/installdir/share/cmake/Libint -DCMAKE_CXX_FLAGS=""-g -O0 -gxx-name=/v/apps/gcc/5.4.0/bin/g++ $CXXFLAGS""` The libint1 should be the hacked version with the `Libint_t` changed to `Libint1_t`. Also I strongly recommend adding the `-O0` flag to the compiler flags, because our CMake debug build doesn't do this (we should change that) and the code takes a _very_ long time to compile with optimization. A lot of this will be streamlined in the not so distant future, and much of the complication will be eased when we nuke libint1. Until then, the above command should be sufficient to get you up and running with a development build. Please try it out - I'd love to have some help with getting the derivatives working :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417:1816,install,installdir,1816,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417,1,['install'],['installdir']
Deployability,"ing>"", line 30, in <module>; File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 2008, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1362, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 93, in scf_compute_energy; raise e; File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/home/psilocaluser/gits/hrw-patch/objdir/stage/usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 358, in scf_iterate; raise ConvergenceError(""""""SCF iterations"""""", self.iteration_). ConvergenceError: Could not converge SCF iterations in 4 iterations. Psi4 stopped on: Wednesday, 08 August 2018 05:42PM; Psi4 wall time for execution: 0:00:01.01. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. It looks like [`die_if_not_converged`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L105-L113) toggled print-error-msg/die+traceback previously for SCF and DETCI, with defaulting toward print-error-msg. I think it's better to default toward die (which this PR now does) and ppl can catch the error if they want print-error-msg. For a long time we had geometry optimizations exit smoothly even if failed for iterations exceeded. That caused some problems (I think @dsirianni hit them), so we switched toward the die+traceback. Now SCF will behave like optimizations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411567479:1851,toggle,toggled,1851,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411567479,1,['toggle'],['toggled']
Deployability,"int.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/too",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:1851,update,update,1851,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['update'],['update']
Deployability,"ion); > and the; > Physicists' water molecule, unless otherwise indicated.; >; > 1. Physicists' water, HF/6-31G; > - *TEST FAILED*; > - Error message:; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; > e_scf = scf_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; > The most recent 5 function calls were:; >; > 2. HF/cc-pVDZ: Passed; > 3. AO DF-CASSCF/cc-pVDZ: Passed; > 4. DFT Smoketests; > - B2PLYP/cc-pVDZ: Passed; > - CAM-B3LYP/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:1873,install,install,1873,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,"ional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2005,update,update,2005,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['update'],['update']
Deployability,"ir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; ```; - DLDF+D09/cc-pVDZ: **GRADIENTS FAILED**; ```; Segmentation fault: 11; ```; - Both `disk_DF` and `mem_DF` gradients yield above segfault, no message in outfile or message printed to stdout; - PBE/cc-pVDZ: Passed; - wPBE/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:4679,install,install,4679,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,"irianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; > raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: DFOCC requires SCF_TYPE = DISK_DF; >; > 8. CI; > - CISD/cc-pVDZ: *ALL FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 28, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; > fnocc_wfn = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - MP3/cc-pVDZ & MP4/cc-pVDZ: *FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 28, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/instal",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:10687,install,install,10687,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,it'd be cool to have a libxc-4.x release with the solved issues.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450763135:33,release,release,33,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450763135,1,['release'],['release']
Deployability,jdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/typeid.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/class.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:2646,Install,Installing,2646,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Install'],['Installing']
Deployability,"jects are used throughout the codebase via calls to `JK::compute()`. In SCF, many calls to `JK::compute()` are made interspersed with updates to the object's orbitals. `JK::compute()` does a [few things](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L550): performs sanity checks, creates densities from the orbitals, zeroes out the object's `J`/`K`/`wK` matrices, and finally calls the virtual function `compute_JK()`, which is where each child class implements some algorithm to fill `J`/`K`/`wK`. Now consider incremental Fock construction. Instead of recomputing `J`/`K`/`wK` each SCF iteration, the previous iteration's `J`/`K`/`wK` are added to a `J`/`K`/`wK` computed with the difference in densities between the current and previous iterations. As [implemented in the `DirectJK` class](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L724-L734), this accomplished by storing the entire `J`/`K`/`wK` matrices of the previous iteration, computing the difference density update to `J`/`K`/`wK`, adding the two together, and storing in the `JK` objects `J`/`K`/`wK` matrices. This requires a lot of [convoluted bookkeeping](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L138-L217). Future JK classes that would want to do incremental Fock build would have to duplicate a lot of code, too. Instead, a much simpler approach would be this: The call to `JK::compute()` doesn't zero out the `J`/`K`/`wK` matrices. Instead, the child JK class can choose to zero out their `J`/`K`/`wK` matrices (if performing a normal Fock build) or leave them as-is from the previous iteration and add to them (if performing an incremental Fock build). This way no previous iterations' `J`/`K`/`wK` matrices have to be saved, and the logic in `compute_JK` becomes much simpler. . > Is `early_screening_` for this ""semi-numerical exchange,"" or something else? How close is this other PR to completion. Yes, this is used in semi-numerical exchange.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879:1623,update,update,1623,https://psicode.org,https://github.com/psi4/psi4/pull/2529#issuecomment-1089141879,1,['update'],['update']
Deployability,"kage supports very large angular momentum, whereas the default libint that's automatically compiled by Psi4 can't handle density fitting basis sets for transition metals... And the trouble is that Psi4 only detects via the cmake interface whereas other libint downstreams in Fedora require pkgconfig? iirc, Psi uses libint's cmake to also set some AM compile defs, not just location detection, so pkgconfig detection insufficient. Would having libint's cmake write out the pkgconfig files (as libxc now does) allow the cmake libint to work for everyone?. I agree I wouldn't ship a production distribution with the default angmom. I like 7 locally and soon I'll make conda use the 8 pkg (now optional) by default instead of the lighter 6. Only potential trouble for you is that libderiv AM = libint AM – 1. If you're going _really_ high for libint, deriv may not cooperate. -----------. I was misremembering when I wrote https://github.com/psi4/psi4/issues/1302#issuecomment-450762992 .; * cmake was why Psi v1.1 couldn't use upstream libxc 3 (so we forked 3 and added cmake).; * functional tweakers not in public API was why Psi v1.2 couldn't use libxc 4 w/o losing functionality (so we forked libxc 4.0 and added the rejected [MR 62](https://gitlab.com/libxc/libxc/merge_requests/62) plus a few merged build MRs). The same libxc ~4.0 is the current state of Psi master.; * The missing tweakers of rejected MR 62 were replaced in merged [MR 67](https://gitlab.com/libxc/libxc/merge_requests/67) but that's a different API (solved by #1101) and not in a release (discussion at [MR 61](https://gitlab.com/libxc/libxc/issues/61)).; * I've prepared a 4.2.3 + !67 + windows PRs + build PRs branch described [here](https://gitlab.com/libxc/libxc/issues/61#note_128653141) that works works with Psi and doesn't have any of the Maple changes. (Indeed, if I build #1101 against libxc master, it links and runs but I see a lot of numerical problems, so avoiding the ongoing libxc work is probably a good idea.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442:2010,release,release,2010,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442,1,['release'],['release']
Deployability,ke using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3812,Install,Installing,3812,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Install'],['Installing']
Deployability,"ld constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: conda update libint -c psi4/label/dev. After that, your conda list should say _5.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: conda install libint=1.2.1=h87b9b30_4 -c psi4. what can go wrong with locally-built psi4?. * A major use of the libint conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the $CONDA_PREFIX/lib/libint.so to which a psi4 core.so is linked suddenly changes identity, psi4 will be deranged.; * To fix this, cmake needs to detect the new libint headers and a half-dozen psi4 files need to rebuild. > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1). * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. Notes. * Only Linux affected. It took a week to build AM6 on t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:2116,update,update,2116,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['update'],['update']
Deployability,"le /home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/tmp/gpu_dfcc_external-cache-Release.cmake; -- Psi4 script: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/bin/psi4; -- Psi4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure] Error 1; CMakeFiles/Makefile2:1533: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:1454,install,installed,1454,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,1,['install'],['installed']
Deployability,le gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Ins,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:5510,Install,Install,5510,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,le libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4con,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13860,Install,Install,13860,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/li,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:1960,Install,Install,1960,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"libxc 3.0.1 has now been released, which includes my backport of SCAN correlation. Still, I would recommend migrating to libxc 4, where the functional implementations are autogenerated using Maple.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345682809:25,release,released,25,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345682809,1,['release'],['released']
Deployability,libxc 5 has been released so you can switch to a stable tarball,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-609977179:17,release,released,17,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-609977179,1,['release'],['released']
Deployability,"libxc updated to 5.1.5 and packages built, though min is still 5.1.2. rtg, imo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2191#issuecomment-860967229:6,update,updated,6,https://psicode.org,https://github.com/psi4/psi4/pull/2191#issuecomment-860967229,1,['update'],['updated']
Deployability,libxc4 was released a few days ago.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-332738941:11,release,released,11,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-332738941,1,['release'],['released']
Deployability,"ling: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so; CMake Error at src/cmake_install.cmake:44 (file):; file INSTALL cannot copy file; ""/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build/src/core.so""; to; ""/scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/core.so"".; Call Stack (most recent call first):; cmake_install.cmake:167 (include). gmake[3]: *** [install] Error 1; gmake[3]: Leaving directory `/scratch/appssf/psi4/build/psi4_core-prefix/src/psi4_core-build'; make[2]: *** [psi4_core-prefix/src/psi4_core-stamp/psi4_core-install] Error 2; make[2]: Leaving directory `/scratch/appssf/psi4/build'; make[1]: *** [CMakeFiles/psi4_core.dir/all] Error 2; make[1]: Leaving directory `/scratch/appssf/psi4/build'; make: *** [all] Error 2; ```; For compiling, I was using ""make -j 8"". I will try to compile serially and see if that",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:4791,Install,Installing,4791,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Install'],['Installing']
Deployability,"lled (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.10']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:6368,install,installed,6368,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"looks like pcmsolver is the culprit. add `psi4::libint2=*=hc9558a2_9 pytest=5 psi4::pcmsolver=*=py38h6d17ec8_2` to the env specs. py38 passes with that. note that you'll have to adjust the python version in the pcmsolver buildstring. Yes, v1.5 would be the primary victim. v1.6 is latest, so the newest-solving packages from `-c psi4` are built to work with it. Like wise v1.7.dev* and `-c psi4/label/dev`. In this case, v1.5 could have benefitted from more pins. For solid reproducibility, the psi4conda installers have the advantage. I'll have to add the add'l packages to the psicode download page command matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2596#issuecomment-1151558412:505,install,installers,505,https://psicode.org,https://github.com/psi4/psi4/issues/2596#issuecomment-1151558412,1,['install'],['installers']
Deployability,ls.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 1.33 seconds = 0.02 minutes; system time = 0.09 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 15.73 seconds = 0.26 minutes; system time = 0.42 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 4 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 4 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; MAXITER = 12 NUM PRINT = 20; NUM ROOTS = 1 ICORE = 0; PRINT = 1 FCI = yes; R CONV = 1.00e-04 MIXED = yes; E CONV = 1.00e-06 MIXED4 = yes; OEI FILE = 35 R4S = no; REPL OTF = no; TEI FILE = 72 DIAG METHOD = SEM; PRECONDITIONER= DAVIDSON UPDATE = DAVIDSON; S = 0.0000 Ms0 = yes; MAX NUM VECS = 13; RESTART = no; GUESS VECTOR = H0BLOCK OPENTYPE = NONE; REF SYM = auto; COLLAPSE SIZE = 1 HD AVG = EVANGELISTI; LSE = no LSE ITER = 0; HD OTF = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; RAS1 LVL = 1 A RAS3 MAX = 2; RAS1 MIN = 0 B RAS3 MAX = 2; A RAS1 LVL = 1 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 2 B RAS4 MAX = 0; B RAS1 LVL = 1 RAS4 MAX = 0; B RAS1 MIN = 0 A RAS34 MAX = 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:10774,UPDATE,UPDATE,10774,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['UPDATE'],['UPDATE']
Deployability,"m `git describe`; - get the branch and tag contents, including when ppl have neglected to pull tags and have none defined; - make it so when ppl download zip distributions, they're not prevented from compiling for lack of version info; - be able to reset commit increment to preserve monotonic versioning as in https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/src/bin/psi4_main/gitversion.py#L105; - make sure the version gets recomputed _every_ time, even if someone just pulls a change to `README.md` that technically changes the version; - get all that info ; - into the output file header; - to essentially ""configure_file"" the https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/psi4/psi4-config.in file so that it gets written to the bottom of it; - into place for https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/doc/sphinxman/source/conf.py.in#L58-L73 to absorb it for the docs build; - so that psi4 command-line can report version. The test is if the docs index.html, an output file, `psi4 --version`, and `psi4-config --version --githash` all return the same correct thing after a pull that doesn't technically require any recompile. I don't doubt that a better formulation than at present could be devised, and that'd be nice to have, especially pure CMake, but as the initial formulation only partially hit the first point, I just reverted back to what worked. I did have to change from the pre-CMakeRewrite version this bit (https://github.com/ryanmrichard/psi4/commit/18a41e0d01a9fa903cdce98bba52c785f81560b2) which is probably why it's compiling again upon install. Perhaps that bit could be fixed by moving the `versioned_code` object lib up to the top level?. Basically, I'm open to fixes, but versioning is a real can of worms, and I'm willing to tolerate eight extra file compiles to avoid opening it. btw, I'm storing my changes at https://github.com/loriab/psi4/commits/CMakeRewrite for the moment, since I'm breaking some things that are purportedly working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239050499:1780,install,install,1780,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239050499,1,['install'],['install']
Deployability,"ma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmalapl3=0x0, v4sigmalapl2tau=0x0, v4sigmalapltau2=0x0, v4sigmatau3=0x0, v4lapl4=0x0, v4lapl3tau=0x0, v4lapl2tau2=0x0, v4lapltau3=0x0, ; > v4tau4=0x0) at /psi/gits/libxc/src/mix_func.c:119; > #5 0x00007fffecf71998 in xc_gga (func=0x555556ca7500, np=255, rho=0x555556e575c0, sigma=0x555556ccda80, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, v2rho2=0x0, v2rhosigma=0x0, v2sigma2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rhosigma2=0x0, v3sigma3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho2sigma2=0x0, v4rhosigma3=0x0, v4sigma4=0x0); > at /psi/gits/libxc/src/gga.c:126; > #6 0x00007fffecf71b16 in xc_gga_exc_vxc (p=<optimized out>, np=<optimized out>, rho=<optimized out>, sigma=<optimized out>, zk=<optimized out>, vrho=<optimized out>, vsigma=0x555556c12720) at /psi/gits/libxc/src/gga.c:160; > #7 0x00007fffef1a9541 in psi::LibXCFunctional::compute_functional (this=0x896d, in=..., out=..., npoints=-1, deriv=1) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/LibXCfunctional.cc:549; > #8 0x00007fffef1b899f in psi::SuperFunctional::compute_functional (this=0x896d, vals=..., npoints=6) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/superfunctional.cc:633; > #9 0x00007fffef1737ba in psi::RV::compute_V (this=0x896d, ret=<error reading variable: Cannot access memory at address 0x896d>) at /psi/gits/hrw-demo/psi4/src/psi4/libfock/v.cc:1350; > #10 0x00007fffef7752c3 in psi::scf::RHF::form_V (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:180; > #11 0x00007fffef77451b in psi::scf::RHF::form_G (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:185; > ```; > ; > Please let me know when is a good point to try Psi4+Libxc 5.1 again and if your Libxc 6 PR needs adding atop this (surely not?), thanks. Yes, it turns out that the hotfix branch was still a work-in-progress by the time I was forced to go on holidays. I hope to get the remaining issues in the Python frontend fixed today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798:3815,hotfix,hotfix,3815,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798,1,['hotfix'],['hotfix']
Deployability,"ma_interface\gdma_interface.lib src\psi4\mcscf\mcscf.lib src\psi4\mrcc\mrcc.lib src\psi4\occ\occ.lib src\psi4\optking\optking.lib src\psi4\psimrcc\psimrcc.lib src\psi4\sapt\sapt.lib src\psi4\scfgrad\scfgrad.lib src\psi4\lib3index\3index.lib src\psi4\libciomr\ciomr.lib src\psi4\libcubeprop\cubeprop.lib src\psi4\libdiis\diis.lib src\psi4\libdisp\disp.lib src\psi4\libdpd\dpd.lib src\psi4\libfilesystem\filesystem.lib src\psi4\libfock\fock.lib src\psi4\libfunctional\functional.lib src\psi4\libiwl\iwl.lib src\psi4\libmints\mints.lib src\psi4\libmoinfo\moinfo.lib src\psi4\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Extensions\Microsoft\Python\Miniconda\Miniconda3-x64\libs\Python37.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\gg.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\xc.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\deriv.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\int.lib D:\OpenBLAS\lib\openblas.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\CMakeFiles\core.dir/intermediate.manifest src\CMakeFiles\core.dir/manifest.res"" failed (exit code 1120) with the following output:; 正在创建库 src\core.lib 和对象 src\core.exp; F:\fnocc.lib(diis.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv_，该符号在函数 ""void __cdecl psi::fnocc::DGESV(long &,long &,double *,long &,long *,double *,long &,long &)"" (?DGESV@fnocc@psi@@YAXAEAJ0PEAN0PEAJ100@Z) 中被引用; F:\mcscf.lib(scf_diis.cc.obj) : error LNK2001: 无法解析的外部符号 dgesv_; F:\psimrcc.lib(blas_diis.cc.obj) : error LNK2001: 无法解析的外部符号 dgesv_; F:\fnocc.lib(blas.cc.obj) : error LNK2019: 无法解析的外部符号 dgemv_，该符号在函数 ""void __cdecl psi::fnocc::DGEMV(char &,long &,long &,double",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:6220,Release,Release,6220,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['Release'],['Release']
Deployability,"mebody looking over the code for the first time (which is what we want). _Accordingly_, here's my proposal for how to make the code more readable. First and foremost, we abandon the Ochsenfeld pseudo-algorithm (Figure 1) as the definitive way to organize the code. We'll refer to it as appropriate, but it will not always be appropriate. The code is now divided into the following => level chunks:. => Prep Auxiliary Quantities <=; * Zeroing, Sizing, Atom Blocking all go here. => Prep Atom Pairs <=; * In my ideal world, you'd compute this at the same time as the bra-bra shell pairs below, but getting that to work would require that atom_pairs be an ordered_set. There's not much gain for it. => Prep Bra-Bra Shell Pairs <=; * What is currently, ""Store shell pairs that are significant by Schwarz estimate"". => Prep Bra-Ket Shell Pairs <=; * This is ""Pre-ordering and Pre-selection to find significant elements in Puv"" and includes both shell ceiling computation and computing the kets. => Integral Formation Loop <=; * Note that this is the one section that doesn't start with ""Prep"". That's a clue that everything previous to this was for the integral formation loop. The next code chunks down are: build intermediate buffers, form the minilists, compute to K buffers, write to K (stripe out), and then finalize. Refer to the Ochsenfeld algorithm for the minilist part, but I think that's the only part where Ochsenfeld is worth mentioning. _______________________________________________. How does that all sound to you? I know this is asking you to undo a lot of the changes I requested earlier, but I think this will make the code much easier to read for those who haven't been poring over the Ochsenfeld paper. If it sounds good, then please update the comments accordingly (I don't think we'll actually need code changes for this), and let me know when it's ready for another look. And of course, if you don't like the idea, we can talk this out. As we've seen already, I can make mistakes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653:2055,update,update,2055,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1043550653,1,['update'],['update']
Deployability,"models\molecule.py:294: in __init__; super().__init__(**kwargs); pydantic\main.py:341: in pydantic.main.BaseModel.__init__; ???; E pydantic.error_wrappers.ValidationError: 2 validation errors for Molecule; E connectivity -> 0; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); E connectivity -> 1; E '<' not supported between instances of 'tuple' and 'int' (type=type_error); ================================================== warnings summary ===================================================; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:599; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:701; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:698; psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:699; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi16\lib\site-packages\qcelemental\molparse\from_arrays.py:702; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in Num",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542:4843,release,release,4843,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160363542,1,['release'],['release']
Deployability,module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIP,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14496,Install,Install,14496,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13698,Install,Install,13698,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15302,Install,Install,15302,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,mpmath is a required for one of the dependencies which was probably added sometime between your first cloning and your re-clone. . A couple of things: ; - Was the installation of mpmath successful? ; - Did you install into the base env or a different one? ; - Is that one active? ; - You can see if mpmath is available in the env that is active while you are trying to build by looking at the output from `conda list`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382181157:163,install,installation,163,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382181157,2,['install'],"['install', 'installation']"
Deployability,"n = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - MP3/cc-pVDZ & MP4/cc-pVDZ: *FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 28, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_occ; > occ_wfn = core.occ(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - CISD/cc-pVDZ via DETCI: *FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 29, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:11813,install,install,11813,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['install'],['install']
Deployability,"n check to accommodate the default/existing conv crit (https://psicode.org/psi4manual/master/add_tests.html#test-contents). Tests checking opt status at a certain cycle exempt of course. That's the principle, but do feel free to change as you see fit --- the reference values (agreed, preferred thing to change if the ref is the culprit) or the comparison crit (if it's the optimizer behavior that's the instigator). > Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. atol = 0.001 the difference is ~ 0.0017. These tests are using the default qchem convergence criteria ~ 3e-4 max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this. Thanks for the explanation. I'd view reference NRE values as less venerable. For one thing, only those that caused trouble were even updated when physical constants changed, iirc. > Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentation"" about reference log files. I can include those as well if desired. It will just greatly increase the number of lines changed in this PR. Separate, please. Like updating `samples/`, better to keep the not-for-visual-inspection changes aside. Update: I see Jonathon thinks differently. Including is ok with me, now that GH allows files to be folded up rather than scrolled through. Is `.log` where all the optking detailed output goes now? I guess we ought to start collecting them. `output.log`, perhaps. But this can also be deferred to a grand regenerate-the-refs script and PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464:1777,update,updated,1777,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464,3,"['Update', 'update']","['Update', 'updated']"
Deployability,"n the `setup` script I will end up with the same issue where the local (boost 1.59.0) headers are in the boost inc paths, but the homebrew (1.60.0) libraries end up in the boost lib paths. . If hombrew boost is unlinked at the time I run the `setup` script I will see both the include and library paths are set to the local boost install in the cmake output. However, if homebrew boost is linked when I run `make` I will get an error in the linking step. I suspect that the directory where hombrew adds the links to boost (`/usr/local/lib`) are passed as a linker argument by cmake, either by default, or because something else is installed there. Thus, if those links are present I will get the characteristic boost 1.60.0 linking errors. Hombrew installs boost-python as a separate package so to properly remove all of the links `brew unlink boost boost-python` . Interestingly I have a similar setup on a laptop running ArchLinux 4.4.5 where boost 1.60.0 was installed globally using `pacman` and I used the conda recipie to install boost 1.59.0 in `$CONDA_ENV_PATH`. If the conda virtual environment is activated and I use the `setup` args to direct cmake to boost 1.59.0 installed there I have no problems. The correct version is always found, even if I try to `make` with the conda virtual environment deactivated the cmake paths still point to the installation I want even though those paths aren't in my environment, and the build is successful. . I don't know If I would mark this as resolved, but it is at least understood to where it is predictable. . For anyone who has run into a similar problem:. If you are using a compatible version of boost installed manually on osx and your build fails to link, even if cmake reported the compatible version of boost was detected it may have detected the desired headers, but not the correct binaries. because homebrew has installed boost 1.60.0 in `/usr/local`. Try running `brew unlink boost boost-python` and running setup/make again. . This may",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-198164795:1208,install,installed,1208,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-198164795,2,['install'],"['install', 'installed']"
Deployability,"n/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc; -- Check for working CXX compiler: /software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option PSI4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.3"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so (found suitable version ""2.7.3"", minimum required is ""2"") ; -- Suitable pybind11 could not be located, building one instead.; -- Suitable libint could not be located, building one instead.; -- Suitable libefp could not be located, building one instead.; -- Try OpenMP C flag = [-qope",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:1667,Release,Release,1667,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,1,['Release'],['Release']
Deployability,"nd hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example GCC-5.1, it takes one command.; > ; > Adding a GCC sub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:1048,patch,patch,1048,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['patch'],['patch']
Deployability,"ndent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one could also just return it to the user as is. Again the idea being that a psi4 user can use adcc implicitly for calculations, without needing to wo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1179,integrat,integrating,1179,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['integrat'],['integrating']
Deployability,"ne 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; ```; - DLDF+D09/cc-pVDZ: **GRADIENTS FAILED**; ```; Segmentation fault: 11; ```; - Both `disk_DF` and `mem_DF` gradients yield above segfault, no message in outfile or message printed to stdout; - PBE/cc-pVDZ: Passed; - wPBE/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Us",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:4317,install,install,4317,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['install'],['install']
Deployability,"ng cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └─ psi4 is installable with the potential options; ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:8165,install,installed,8165,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966,1,['install'],['installed']
Deployability,"nni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; type_val = set_cholesky_from('MP2_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: DFOCC requires SCF_TYPE = DISK_DF; ```; 8. CI; - CISD/cc-pVDZ: **ALL FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - MP3/cc-pVDZ & MP4/cc-pVDZ: **FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 49",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:9884,install,install,9884,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['install'],['install']
Deployability,"ns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4/pull/470/files#diff-5 (1); > - _M_ psi4/CMakeLists.txt; > https://github.com/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:1293,update,update,1293,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['update'],['update']
Deployability,"ntent); > File ""<string>"", line 28, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_occ; > occ_wfn = core.occ(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - CISD/cc-pVDZ via DETCI: *FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 29, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3062, in run_detci; > ciwfn = core.detci(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:12378,install,install,12378,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['install'],['install']
Deployability,nvs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2546,Install,Install,2546,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"nvs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 633 warnings; `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json; Using `psi4.json_wrapper.run_json` instead of `psi4.schema_wrapper.run_qcschema` is deprecated, and in 1.5 it will stop working. -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================= short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12256,Install,Install,12256,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,o e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:6342,Install,Install,6342,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,o this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/filesystem.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/tty/color.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_autofrag.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/wrapper_database.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/header.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/extras.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib/psi4/config.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4Config.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/share/cmake/psi4/psi4ConfigVersion.cmake; -- Installing: /scratch/appssf/psi4/build/stage/cl,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:3930,Install,Installing,3930,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Install'],['Installing']
Deployability,objdir-gcc/stage/include/pybind11/detail/common.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/descr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/init.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/detail/internals.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eval.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/operators.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/options.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl_bind.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/attr.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/cast.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/complex.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/eigen.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/embed.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/functional.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/iostream.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/numpy.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pybind11.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/pytypes.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/stl.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/share/cmake/pybind11/pybind11Config.cmake; -- Installing: /home/psilocaluser/gits/hrw-quat,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:3342,Install,Installing,3342,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['Install'],['Installing']
Deployability,"ocal/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. As you said, it seems ```gcc``` tries to impose ```gomp```. How can I bypass it ?; Because I still have the error:; ```; E ImportError: dlopen(/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so, 2): Symbol not found: __gfortran_concat_string; E Referenced from: /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; E Expected in: flat namespace; E in /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; ```. which (I think) is due to that right ?. PS: ```echo $DYLD_LIBRARY_PATH``` gives ```/opt/intel/lib``` only. And in case it helps, here is the output of my configuration step, which seems correct:; ```cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib```; ```; -- The C compiler identification is GNU 8.3.0; -- The CXX compiler identification is GNU 8.3.0; -- Checking whether C compiler has -isysroot; -- Checking whether C compiler has -isysroot - yes; -- Checking whether C compiler supports OSX deployment target flag; -- Checking whether C compiler supports OSX deployment target flag - yes; -- Check for working C compiler: /usr/local/bin/gcc-8; -- Check for working C compiler: /usr/local/bin/gcc-8 -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/lo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:2524,configurat,configuration,2524,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['configurat'],['configuration']
Deployability,odule pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14017,Install,Install,14017,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,odule simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14337,Install,Install,14337,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,1,['Install'],['Install']
Deployability,"oh no, not again. Yes, one had to download patched files for the previous version from their homepage.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1077501281:43,patch,patched,43,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1077501281,1,['patch'],['patched']
Deployability,"ok, Let me please know of the update. I am in dire need of this part of the PSI4.; Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/786#issuecomment-323519546:30,update,update,30,https://psicode.org,https://github.com/psi4/psi4/issues/786#issuecomment-323519546,1,['update'],['update']
Deployability,"ok, folks, this now gives correct answers and fixes the azure error. * @dgasmith, what's the prospect of a g2g 2.0 release; * all those who consider pointers their allies should check that my formation of `xyz` is equivalent to https://github.com/dgasmith/gau2grid/compare/v1.3.1...master#diff-f8f6cc08ea43fcbc6d2e07d960e118c2L69-R94",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1718#issuecomment-531592608:115,release,release,115,https://psicode.org,https://github.com/psi4/psi4/pull/1718#issuecomment-531592608,1,['release'],['release']
